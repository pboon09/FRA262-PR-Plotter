
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1d0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800d3a8  0800d3a8  0000e3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d808  0800d808  0000f1c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d808  0800d808  0000e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d810  0800d810  0000f1c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d810  0800d810  0000e810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d814  0800d814  0000e814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0800d818  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  200001c4  0800d9dc  0000f1c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ddc  0800d9dc  0000fddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b9f  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed7  00000000  00000000  00038d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e2  00000000  00000000  0003f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb6e  00000000  00000000  00040c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000280cb  00000000  00000000  0006d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118a34  00000000  00000000  00095873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077e0  00000000  00000000  001ae2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b5acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d390 	.word	0x0800d390

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800d390 	.word	0x0800d390

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	60fa      	str	r2, [r7, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e22:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e3e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e008      	b.n	8000e64 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3f2      	bcc.n	8000e52 <ADC_DMA_Init+0x42>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	217f      	movs	r1, #127	@ 0x7f
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f847 	bl	8005f1c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f004 f930 	bl	8005100 <HAL_ADC_Start_DMA>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e012      	b.n	8000ee8 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
        samples++;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3e7      	bcc.n	8000ec2 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00f      	beq.n	8000f18 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f10:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	e001      	b.n	8000f1c <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000f18:	f04f 0300 	mov.w	r3, #0
}
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f3e:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	4619      	mov	r1, r3
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ffaf 	bl	8000ea8 <ADC_DMA_GetValue>
 8000f4a:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f54:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f58:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f7c <ADC_DMA_GetJoystick+0x4c>
 8000f5c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f60:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f7c <ADC_DMA_GetJoystick+0x4c>
 8000f64:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f68:	f000 fb54 	bl	8001614 <mapf>
 8000f6c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f70:	eeb0 0a67 	vmov.f32	s0, s15
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	00000000 	.word	0x00000000

08000f80 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f8a:	60b8      	str	r0, [r7, #8]
 8000f8c:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	dd01      	ble.n	8000faa <PWM_Satuation+0x2a>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	e013      	b.n	8000fd2 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d501      	bpl.n	8000fc6 <PWM_Satuation+0x46>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e005      	b.n	8000fd2 <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6178      	str	r0, [r7, #20]
 8000fe6:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fea:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fee:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ff2:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	619a      	str	r2, [r3, #24]

}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	ed93 7a06 	vldr	s14, [r3, #24]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edd3 7a03 	vldr	s15, [r3, #12]
 800104a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	bfac      	ite	ge
 8001054:	2301      	movge	r3, #1
 8001056:	2300      	movlt	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10e      	bne.n	8001082 <PID_CONTROLLER_Compute+0x50>
 8001064:	edd7 7a00 	vldr	s15, [r7]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	bfcc      	ite	gt
 8001072:	2301      	movgt	r3, #1
 8001074:	2300      	movle	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d057      	beq.n	8001132 <PID_CONTROLLER_Compute+0x100>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a06 	vldr	s14, [r3, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 7a03 	vldr	s15, [r3, #12]
 800108e:	eef1 7a67 	vneg.f32	s15, s15
 8001092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	bf94      	ite	ls
 800109c:	2301      	movls	r3, #1
 800109e:	2300      	movhi	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10e      	bne.n	80010ca <PID_CONTROLLER_Compute+0x98>
 80010ac:	edd7 7a00 	vldr	s15, [r7]
 80010b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	bf4c      	ite	mi
 80010ba:	2301      	movmi	r3, #1
 80010bc:	2300      	movpl	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d033      	beq.n	8001132 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	edd3 6a00 	vldr	s13, [r3]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010ea:	edd7 7a00 	vldr	s15, [r7]
 80010ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	ed93 6a00 	vldr	s12, [r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001102:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edd3 7a04 	vldr	s15, [r3, #16]
 800110c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001110:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 6a02 	vldr	s12, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001120:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001124:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	ee07 3a90 	vmov	s15, r3
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3328      	adds	r3, #40	@ 0x28
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fb2a 	bl	80017d4 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8b3a      	ldrh	r2, [r7, #24]
 800118a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ac:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d15f      	bne.n	800127a <MDXX_set_range+0xda>
		if (duty == 0) {
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d115      	bne.n	80011f4 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3310      	adds	r3, #16
 80011cc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800134c <MDXX_set_range+0x1ac>
 80011d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fc23 	bl	8001a20 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3328      	adds	r3, #40	@ 0x28
 80011de:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800134c <MDXX_set_range+0x1ac>
 80011e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fc1a 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80011f2:	e0a6      	b.n	8001342 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dd1a      	ble.n	8001238 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3310      	adds	r3, #16
 8001206:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800134c <MDXX_set_range+0x1ac>
 800120a:	ed97 0a02 	vldr	s0, [r7, #8]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc06 	bl	8001a20 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3328      	adds	r3, #40	@ 0x28
 8001218:	edd7 0a01 	vldr	s1, [r7, #4]
 800121c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fbfd 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = duty;
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001236:	e084      	b.n	8001342 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3310      	adds	r3, #16
 800123c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001350 <MDXX_set_range+0x1b0>
 8001240:	ed97 0a02 	vldr	s0, [r7, #8]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fbeb 	bl	8001a20 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001252:	eef0 7ae7 	vabs.f32	s15, s15
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	ed97 0a02 	vldr	s0, [r7, #8]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fbde 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	eef0 7ae7 	vabs.f32	s15, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001278:	e063      	b.n	8001342 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001280:	2b01      	cmp	r3, #1
 8001282:	d15e      	bne.n	8001342 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d115      	bne.n	80012be <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	f005 fd82 	bl	8006da8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3328      	adds	r3, #40	@ 0x28
 80012a8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800134c <MDXX_set_range+0x1ac>
 80012ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fbb5 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = 0;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012bc:	e041      	b.n	8001342 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	dd1a      	ble.n	8001302 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f005 fd65 	bl	8006da8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3328      	adds	r3, #40	@ 0x28
 80012e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fb98 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = duty;
 80012f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f8:	ee17 2a90 	vmov	r2, s15
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001300:	e01f      	b.n	8001342 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f005 fd4a 	bl	8006da8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3328      	adds	r3, #40	@ 0x28
 8001318:	edd7 7a01 	vldr	s15, [r7, #4]
 800131c:	eef0 7ae7 	vabs.f32	s15, s15
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	ed97 0a02 	vldr	s0, [r7, #8]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fb79 	bl	8001a20 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800132e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001332:	eef0 7ae7 	vabs.f32	s15, s15
 8001336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133a:	ee17 2a90 	vmov	r2, s15
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	00000000 	.word	0x00000000
 8001350:	42c80000 	.word	0x42c80000

08001354 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	ed2d 8b02 	vpush	{d8}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013e6:	edc7 0a00 	vstr	s1, [r7]
 80013ea:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80013ec:	897b      	ldrh	r3, [r7, #10]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <FIR_init+0x2a>
        numTaps += 1;
 80013f8:	897b      	ldrh	r3, [r7, #10]
 80013fa:	3301      	adds	r3, #1
 80013fc:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	897a      	ldrh	r2, [r7, #10]
 8001402:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f00b f92e 	bl	800c670 <malloc>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 800141c:	897b      	ldrh	r3, [r7, #10]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4618      	mov	r0, r3
 8001422:	f00b f925 	bl	800c670 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80e0 	beq.w	80015f8 <FIR_init+0x224>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80db 	beq.w	80015f8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001446:	e00a      	b.n	800145e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001458:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800145a:	3301      	adds	r3, #1
 800145c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800145e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3f0      	bcc.n	8001448 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001466:	edd7 6a01 	vldr	s13, [r7, #4]
 800146a:	ed97 7a00 	vldr	s14, [r7]
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001476:	897b      	ldrh	r3, [r7, #10]
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001482:	e077      	b.n	8001574 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001484:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800148c:	429a      	cmp	r2, r3
 800148e:	d10c      	bne.n	80014aa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014a4:	edc3 7a00 	vstr	s15, [r3]
 80014a8:	e02c      	b.n	8001504 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80014aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014ac:	8afb      	ldrh	r3, [r7, #22]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001604 <FIR_init+0x230>
 80014bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	f00b fa28 	bl	800c928 <sinf>
 80014d8:	eef0 6a40 	vmov.f32	s13, s0
 80014dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001608 <FIR_init+0x234>
 80014ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	ed93 8a00 	vldr	s16, [r3]
 8001514:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001520:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001604 <FIR_init+0x230>
 8001524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	3b01      	subs	r3, #1
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001538:	eeb0 0a66 	vmov.f32	s0, s13
 800153c:	f00b f9b0 	bl	800c8a0 <cosf>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800160c <FIR_init+0x238>
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001610 <FIR_init+0x23c>
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001564:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001568:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	b29b      	uxth	r3, r3
 8001572:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001574:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001578:	897b      	ldrh	r3, [r7, #10]
 800157a:	429a      	cmp	r2, r3
 800157c:	db82      	blt.n	8001484 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	83fb      	strh	r3, [r7, #30]
 8001588:	e00f      	b.n	80015aa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	8bfb      	ldrh	r3, [r7, #30]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a08 	vldr	s14, [r7, #32]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015a4:	8bfb      	ldrh	r3, [r7, #30]
 80015a6:	3301      	adds	r3, #1
 80015a8:	83fb      	strh	r3, [r7, #30]
 80015aa:	8bfa      	ldrh	r2, [r7, #30]
 80015ac:	897b      	ldrh	r3, [r7, #10]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3eb      	bcc.n	800158a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80015b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80015b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d01b      	beq.n	80015f8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	83bb      	strh	r3, [r7, #28]
 80015c4:	e014      	b.n	80015f0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	edd3 6a00 	vldr	s13, [r3]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	8bbb      	ldrh	r3, [r7, #28]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	ed97 7a08 	vldr	s14, [r7, #32]
 80015e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80015ea:	8bbb      	ldrh	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	83bb      	strh	r3, [r7, #28]
 80015f0:	8bba      	ldrh	r2, [r7, #28]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3e6      	bcc.n	80015c6 <FIR_init+0x1f2>
            }
        }
    }
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	ecbd 8b02 	vpop	{d8}
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40c90fdb 	.word	0x40c90fdb
 8001608:	40490fdb 	.word	0x40490fdb
 800160c:	3eeb851f 	.word	0x3eeb851f
 8001610:	3f0a3d71 	.word	0x3f0a3d71

08001614 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a05 	vstr	s0, [r7, #20]
 800161e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001622:	ed87 1a03 	vstr	s2, [r7, #12]
 8001626:	edc7 1a02 	vstr	s3, [r7, #8]
 800162a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800162e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001632:	edd7 7a04 	vldr	s15, [r7, #16]
 8001636:	ee77 6a67 	vsub.f32	s13, s14, s15
 800163a:	ed97 7a03 	vldr	s14, [r7, #12]
 800163e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800164e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001652:	edd7 7a02 	vldr	s15, [r7, #8]
 8001656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	ee07 3a90 	vmov	s15, r3
}
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200001e0 	.word	0x200001e0

080016c4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <modbus_3t5_Timeout+0x1c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	755a      	strb	r2, [r3, #21]

}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	200001e0 	.word	0x200001e0

080016e4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f009 fa05 	bl	800aafc <HAL_UART_GetError>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d101      	bne.n	80016fc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80016f8:	f7ff ffc4 	bl	8001684 <modbus_1t5_Timeout>

	}
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001712:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <Modbus_init+0xc4>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001718:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <Modbus_init+0xc4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <Modbus_init+0xc4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <Modbus_init+0xc4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <Modbus_init+0xc4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	7e3a      	ldrb	r2, [r7, #24]
 8001736:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <Modbus_init+0xc4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <Modbus_init+0xc8>)
 8001746:	210e      	movs	r1, #14
 8001748:	4618      	mov	r0, r3
 800174a:	f007 fc85 	bl	8009058 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2110      	movs	r1, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f009 f97b 	bl	800aa50 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f009 f992 	bl	800aa88 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <Modbus_init+0xcc>)
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f008 fcc3 	bl	800a0f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <Modbus_init+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <Modbus_init+0xc4>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <Modbus_init+0xc4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001784:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001788:	4413      	add	r3, r2
 800178a:	3302      	adds	r3, #2
 800178c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001790:	4619      	mov	r1, r3
 8001792:	f008 fd6b 	bl	800a26c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <Modbus_init+0xc4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10c      	bne.n	80017c0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <Modbus_init+0xc4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fc2f 	bl	8008010 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <Modbus_init+0xc4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 fe7e 	bl	80084bc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200001e0 	.word	0x200001e0
 80017cc:	080016c5 	.word	0x080016c5
 80017d0:	080016e5 	.word	0x080016e5

080017d4 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <PWM_init+0x40>)
 80017e6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80017fa:	68b8      	ldr	r0, [r7, #8]
 80017fc:	f006 fb98 	bl	8007f30 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4619      	mov	r1, r3
 8001804:	68b8      	ldr	r0, [r7, #8]
 8001806:	f006 fcdf 	bl	80081c8 <HAL_TIM_PWM_Start>
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0a21fe80 	.word	0x0a21fe80

08001818 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	ed87 0a02 	vstr	s0, [r7, #8]
 8001824:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001828:	edd7 7a02 	vldr	s15, [r7, #8]
 800182c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d137      	bne.n	80018a6 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	889b      	ldrh	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <PWM_write_duty+0x32>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001848:	e0e1      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	889b      	ldrh	r3, [r3, #4]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d105      	bne.n	800185e <PWM_write_duty+0x46>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	6393      	str	r3, [r2, #56]	@ 0x38
 800185c:	e0d7      	b.n	8001a0e <PWM_write_duty+0x1f6>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	2b08      	cmp	r3, #8
 8001864:	d105      	bne.n	8001872 <PWM_write_duty+0x5a>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001870:	e0cd      	b.n	8001a0e <PWM_write_duty+0x1f6>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	889b      	ldrh	r3, [r3, #4]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d105      	bne.n	8001886 <PWM_write_duty+0x6e>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
 8001884:	e0c3      	b.n	8001a0e <PWM_write_duty+0x1f6>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d105      	bne.n	800189a <PWM_write_duty+0x82>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2300      	movs	r3, #0
 8001896:	6493      	str	r3, [r2, #72]	@ 0x48
 8001898:	e0b9      	b.n	8001a0e <PWM_write_duty+0x1f6>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2300      	movs	r3, #0
 80018a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018a4:	e0b3      	b.n	8001a0e <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80018b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 2a90 	vmov	r2, s15
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80018ce:	33fe      	adds	r3, #254	@ 0xfe
 80018d0:	4a51      	ldr	r2, [pc, #324]	@ (8001a18 <PWM_write_duty+0x200>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0bdb      	lsrs	r3, r3, #15
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	899b      	ldrh	r3, [r3, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001900:	ed97 7a02 	vldr	s14, [r7, #8]
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001914:	ee17 3a90 	vmov	r3, s15
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	89db      	ldrh	r3, [r3, #14]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdca 	bl	80004bc <__aeabi_i2d>
 8001928:	4604      	mov	r4, r0
 800192a:	460d      	mov	r5, r1
 800192c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001930:	eef0 7ae7 	vabs.f32	s15, s15
 8001934:	ee17 0a90 	vmov	r0, s15
 8001938:	f7fe fdd2 	bl	80004e0 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fe24 	bl	8000590 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <PWM_write_duty+0x204>)
 8001956:	f7fe ff45 	bl	80007e4 <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f84f 	bl	8000a04 <__aeabi_d2uiz>
 8001966:	4603      	mov	r3, r0
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	899a      	ldrh	r2, [r3, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	89da      	ldrh	r2, [r3, #14]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	89da      	ldrh	r2, [r3, #14]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <PWM_write_duty+0x190>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	6952      	ldr	r2, [r2, #20]
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019a6:	e032      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	889b      	ldrh	r3, [r3, #4]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d106      	bne.n	80019be <PWM_write_duty+0x1a6>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019bc:	e027      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d106      	bne.n	80019d4 <PWM_write_duty+0x1bc>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80019d2:	e01c      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d106      	bne.n	80019ea <PWM_write_duty+0x1d2>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019e8:	e011      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d106      	bne.n	8001a00 <PWM_write_duty+0x1e8>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80019fe:	e006      	b.n	8001a0e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001a0c:	e7ff      	b.n	8001a0e <PWM_write_duty+0x1f6>
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bdb0      	pop	{r4, r5, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	80008001 	.word	0x80008001
 8001a1c:	40590000 	.word	0x40590000

08001a20 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a2c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d137      	bne.n	8001aae <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	889b      	ldrh	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <PWM_write_range+0x32>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001a50:	e0e1      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d105      	bne.n	8001a66 <PWM_write_range+0x46>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a64:	e0d7      	b.n	8001c16 <PWM_write_range+0x1f6>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d105      	bne.n	8001a7a <PWM_write_range+0x5a>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a78:	e0cd      	b.n	8001c16 <PWM_write_range+0x1f6>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d105      	bne.n	8001a8e <PWM_write_range+0x6e>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8c:	e0c3      	b.n	8001c16 <PWM_write_range+0x1f6>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	889b      	ldrh	r3, [r3, #4]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d105      	bne.n	8001aa2 <PWM_write_range+0x82>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aa0:	e0b9      	b.n	8001c16 <PWM_write_range+0x1f6>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001aac:	e0b3      	b.n	8001c16 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aba:	ed97 7a02 	vldr	s14, [r7, #8]
 8001abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac6:	ee17 2a90 	vmov	r2, s15
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001ad6:	33fe      	adds	r3, #254	@ 0xfe
 8001ad8:	4a53      	ldr	r2, [pc, #332]	@ (8001c28 <PWM_write_range+0x208>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0bdb      	lsrs	r3, r3, #15
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	899b      	ldrh	r3, [r3, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1c:	ee17 3a90 	vmov	r3, s15
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	89db      	ldrh	r3, [r3, #14]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcc6 	bl	80004bc <__aeabi_i2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
 8001b34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b38:	eef0 7ae7 	vabs.f32	s15, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fcce 	bl	80004e0 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fd20 	bl	8000590 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	a331      	add	r3, pc, #196	@ (adr r3, 8001c20 <PWM_write_range+0x200>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fe41 	bl	80007e4 <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7fe ff4b 	bl	8000a04 <__aeabi_d2uiz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	899a      	ldrh	r2, [r3, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	89da      	ldrh	r2, [r3, #14]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	89da      	ldrh	r2, [r3, #14]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	889b      	ldrh	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <PWM_write_range+0x190>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	6952      	ldr	r2, [r2, #20]
 8001bac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bae:	e032      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	889b      	ldrh	r3, [r3, #4]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d106      	bne.n	8001bc6 <PWM_write_range+0x1a6>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bc4:	e027      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	889b      	ldrh	r3, [r3, #4]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d106      	bne.n	8001bdc <PWM_write_range+0x1bc>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001bda:	e01c      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	889b      	ldrh	r3, [r3, #4]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d106      	bne.n	8001bf2 <PWM_write_range+0x1d2>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bf0:	e011      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	889b      	ldrh	r3, [r3, #4]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d106      	bne.n	8001c08 <PWM_write_range+0x1e8>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001c06:	e006      	b.n	8001c16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001c14:	e7ff      	b.n	8001c16 <PWM_write_range+0x1f6>
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40efffe0 	.word	0x40efffe0
 8001c28:	80008001 	.word	0x80008001

08001c2c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6178      	str	r0, [r7, #20]
 8001c34:	6139      	str	r1, [r7, #16]
 8001c36:	60fa      	str	r2, [r7, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c7e:	68f9      	ldr	r1, [r7, #12]
 8001c80:	fb01 f202 	mul.w	r2, r1, r2
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001cba:	213c      	movs	r1, #60	@ 0x3c
 8001cbc:	6938      	ldr	r0, [r7, #16]
 8001cbe:	f006 fd3f 	bl	8008740 <HAL_TIM_Encoder_Start>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	0000      	movs	r0, r0
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	0fda      	lsrs	r2, r3, #31
 8001cf8:	4413      	add	r3, r2
 8001cfa:	105b      	asrs	r3, r3, #1
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4293      	cmp	r3, r2
 8001d02:	dd05      	ble.n	8001d10 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e00e      	b.n	8001d2e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	425b      	negs	r3, r3
 8001d16:	0fda      	lsrs	r2, r3, #31
 8001d18:	4413      	add	r3, r2
 8001d1a:	105b      	asrs	r3, r3, #1
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	da04      	bge.n	8001d2e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbaf 	bl	80004e0 <__aeabi_f2d>
 8001d82:	4604      	mov	r4, r0
 8001d84:	460d      	mov	r5, r1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001da2:	ee16 0a90 	vmov	r0, s13
 8001da6:	f7fe fb9b 	bl	80004e0 <__aeabi_f2d>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <QEI_get_diff_count+0x1b8>)
 8001db0:	f7fe fbee 	bl	8000590 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4690      	mov	r8, r2
 8001dba:	4699      	mov	r9, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb8d 	bl	80004e0 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4640      	mov	r0, r8
 8001dcc:	4649      	mov	r1, r9
 8001dce:	f7fe fbdf 	bl	8000590 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fa23 	bl	8000224 <__adddf3>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fe2d 	bl	8000a44 <__aeabi_d2f>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb73 	bl	80004e0 <__aeabi_f2d>
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fb5d 	bl	80004e0 <__aeabi_f2d>
 8001e26:	a316      	add	r3, pc, #88	@ (adr r3, 8001e80 <QEI_get_diff_count+0x1b0>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbb0 	bl	8000590 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4690      	mov	r8, r2
 8001e36:	4699      	mov	r9, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb4f 	bl	80004e0 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4640      	mov	r0, r8
 8001e48:	4649      	mov	r1, r9
 8001e4a:	f7fe fba1 	bl	8000590 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe f9e5 	bl	8000224 <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fdef 	bl	8000a44 <__aeabi_d2f>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e7e:	bf00      	nop
 8001e80:	54442d18 	.word	0x54442d18
 8001e84:	400921fb 	.word	0x400921fb
 8001e88:	40240000 	.word	0x40240000
 8001e8c:	00000000 	.word	0x00000000

08001e90 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6a12      	ldr	r2, [r2, #32]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb12 	bl	80004e0 <__aeabi_f2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8002070 <QEI_compute_data+0x1e0>)
 8001ec2:	f7fe fb65 	bl	8000590 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	ee17 0a90 	vmov	r0, s15
 8001ede:	f7fe faff 	bl	80004e0 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe fc7b 	bl	80007e4 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe faf0 	bl	80004e0 <__aeabi_f2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fb42 	bl	8000590 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fd96 	bl	8000a44 <__aeabi_d2f>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001f24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f28:	ee17 0a90 	vmov	r0, s15
 8001f2c:	f7fe fad8 	bl	80004e0 <__aeabi_f2d>
 8001f30:	a34d      	add	r3, pc, #308	@ (adr r3, 8002068 <QEI_compute_data+0x1d8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb2b 	bl	8000590 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	461d      	mov	r5, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4e:	ee17 0a90 	vmov	r0, s15
 8001f52:	f7fe fac5 	bl	80004e0 <__aeabi_f2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fc41 	bl	80007e4 <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fab6 	bl	80004e0 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe fb08 	bl	8000590 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fd5c 	bl	8000a44 <__aeabi_d2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe faa2 	bl	80004e0 <__aeabi_f2d>
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <QEI_compute_data+0x1e4>)
 8001fa2:	f7fe faf5 	bl	8000590 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4614      	mov	r4, r2
 8001fac:	461d      	mov	r5, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	ee17 0a90 	vmov	r0, s15
 8001fbe:	f7fe fa8f 	bl	80004e0 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe fc0b 	bl	80007e4 <__aeabi_ddiv>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa80 	bl	80004e0 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	f7fe fad2 	bl	8000590 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fd26 	bl	8000a44 <__aeabi_d2f>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	ed93 7a02 	vldr	s14, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002016:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 800201a:	edd7 7a03 	vldr	s15, [r7, #12]
 800201e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d104      	bne.n	8002032 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002030:	e00f      	b.n	8002052 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <QEI_compute_data+0x1b0>
 800203a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800203e:	e001      	b.n	8002044 <QEI_compute_data+0x1b4>
 8002040:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002078 <QEI_compute_data+0x1e8>
 8002044:	edd7 6a03 	vldr	s13, [r7, #12]
 8002048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	54442d18 	.word	0x54442d18
 800206c:	400921fb 	.word	0x400921fb
 8002070:	404e0000 	.word	0x404e0000
 8002074:	40240000 	.word	0x40240000
 8002078:	00000000 	.word	0x00000000

0800207c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	@ 0x38
 8002080:	af00      	add	r7, sp, #0
 8002082:	6178      	str	r0, [r7, #20]
 8002084:	ed87 0a04 	vstr	s0, [r7, #16]
 8002088:	edc7 0a03 	vstr	s1, [r7, #12]
 800208c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002090:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 80020ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80020be:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c6:	eef0 7ae7 	vabs.f32	s15, s15
 80020ca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80020ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80020d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d503      	bpl.n	80020ec <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	22ff      	movs	r2, #255	@ 0xff
 80020e8:	741a      	strb	r2, [r3, #16]
 80020ea:	e002      	b.n	80020f2 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2201      	movs	r2, #1
 80020f0:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80020f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d006      	beq.n	800210e <Trapezoidal_Generator+0x92>
 8002100:	edd7 7a01 	vldr	s15, [r7, #4]
 8002104:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d104      	bne.n	8002118 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
        return;
 8002116:	e06f      	b.n	80021f8 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8002118:	edd7 6a02 	vldr	s13, [r7, #8]
 800211c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002124:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002134:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800214c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002150:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002158:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800215c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002160:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	db27      	blt.n	80021be <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800216e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002172:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800217e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002182:	ed97 7a02 	vldr	s14, [r7, #8]
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002192:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8002194:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002198:	edd7 7a06 	vldr	s15, [r7, #24]
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 80021a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80021aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80021bc:	e018      	b.n	80021f0 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 80021be:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80021c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021ca:	eeb0 0a66 	vmov.f32	s0, s13
 80021ce:	f00a fb49 	bl	800c864 <sqrtf>
 80021d2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80021e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80021e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	3738      	adds	r7, #56	@ 0x38
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8002200:	b480      	push	{r7}
 8002202:	b08d      	sub	sp, #52	@ 0x34
 8002204:	af00      	add	r7, sp, #0
 8002206:	6178      	str	r0, [r7, #20]
 8002208:	6139      	str	r1, [r7, #16]
 800220a:	ed87 0a03 	vstr	s0, [r7, #12]
 800220e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002212:	ed87 1a01 	vstr	s2, [r7, #4]
 8002216:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002220:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80024a4 <Trapezoidal_Evaluated+0x2a4>
 8002224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	ed93 7a03 	vldr	s14, [r3, #12]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	edd3 7a03 	vldr	s15, [r3, #12]
 800223a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	f200 811b 	bhi.w	800247c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2200      	movs	r2, #0
 800224a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	7c1b      	ldrb	r3, [r3, #16]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ed97 7a00 	vldr	s14, [r7]
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	ed93 7a00 	vldr	s14, [r3]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002272:	eeb4 7a67 	vcmp.f32	s14, s15
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d109      	bne.n	8002290 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800228e:	e00c      	b.n	80022aa <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	7c1b      	ldrb	r3, [r3, #16]
 8002294:	b25b      	sxtb	r3, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229e:	ed97 7a01 	vldr	s14, [r7, #4]
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d824      	bhi.n	800230a <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80022c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80022f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002306:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8002308:	e0c6      	b.n	8002498 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	edd3 7a01 	vldr	s15, [r3, #4]
 8002316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d830      	bhi.n	8002382 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8002320:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002324:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002340:	ed97 7a03 	vldr	s14, [r7, #12]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002364:	edd7 7a06 	vldr	s15, [r7, #24]
 8002368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002376:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
}
 8002380:	e08a      	b.n	8002498 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	ed93 7a03 	vldr	s14, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	edd3 7a02 	vldr	s15, [r3, #8]
 800238e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	d900      	bls.n	800239a <Trapezoidal_Evaluated+0x19a>
}
 8002398:	e07e      	b.n	8002498 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800239a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800239e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80023a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	dd11      	ble.n	8002404 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80023fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002400:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	ed93 7a03 	vldr	s14, [r3, #12]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002414:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8002418:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800241c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002424:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002430:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002434:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002438:	edd7 7a07 	vldr	s15, [r7, #28]
 800243c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002440:	edd7 7a07 	vldr	s15, [r7, #28]
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8002452:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002456:	edd7 7a07 	vldr	s15, [r7, #28]
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800246c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002470:	eef1 7a67 	vneg.f32	s15, s15
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800247a:	e00d      	b.n	8002498 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2201      	movs	r2, #1
 8002480:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	3734      	adds	r7, #52	@ 0x34
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	3a83126f 	.word	0x3a83126f

080024a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2220      	movs	r2, #32
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00a f98b 	bl	800c7dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024d6:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024dc:	4b33      	ldr	r3, [pc, #204]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024e8:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ee:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024f0:	2204      	movs	r2, #4
 80024f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024fa:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <MX_ADC1_Init+0x104>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002502:	2202      	movs	r2, #2
 8002504:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002510:	2200      	movs	r2, #0
 8002512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002514:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <MX_ADC1_Init+0x104>)
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002522:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002524:	2200      	movs	r2, #0
 8002526:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002528:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <MX_ADC1_Init+0x104>)
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002530:	481e      	ldr	r0, [pc, #120]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002532:	f002 fc29 	bl	8004d88 <HAL_ADC_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800253c:	f000 fef0 	bl	8003320 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	4818      	ldr	r0, [pc, #96]	@ (80025ac <MX_ADC1_Init+0x104>)
 800254c:	f003 fd48 	bl	8005fe0 <HAL_ADCEx_MultiModeConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002556:	f000 fee3 	bl	8003320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <MX_ADC1_Init+0x108>)
 800255c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800255e:	2306      	movs	r3, #6
 8002560:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002562:	2307      	movs	r3, #7
 8002564:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002566:	237f      	movs	r3, #127	@ 0x7f
 8002568:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800256a:	2304      	movs	r3, #4
 800256c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	4619      	mov	r1, r3
 8002576:	480d      	ldr	r0, [pc, #52]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002578:	f002 feb4 	bl	80052e4 <HAL_ADC_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002582:	f000 fecd 	bl	8003320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002586:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <MX_ADC1_Init+0x10c>)
 8002588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800258a:	230c      	movs	r3, #12
 800258c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4806      	ldr	r0, [pc, #24]	@ (80025ac <MX_ADC1_Init+0x104>)
 8002594:	f002 fea6 	bl	80052e4 <HAL_ADC_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800259e:	f000 febf 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	3730      	adds	r7, #48	@ 0x30
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001e4 	.word	0x200001e4
 80025b0:	19200040 	.word	0x19200040
 80025b4:	1d500080 	.word	0x1d500080

080025b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09e      	sub	sp, #120	@ 0x78
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2254      	movs	r2, #84	@ 0x54
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f00a f8ff 	bl	800c7dc <memset>
  if(adcHandle->Instance==ADC1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025e6:	d15e      	bne.n	80026a6 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 f9e7 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002604:	f000 fe8c 	bl	8003320 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002608:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 800260e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002614:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002620:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_ADC_MspInit+0xf8>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002638:	2303      	movs	r3, #3
 800263a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263c:	2303      	movs	r3, #3
 800263e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002644:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002648:	4619      	mov	r1, r3
 800264a:	481a      	ldr	r0, [pc, #104]	@ (80026b4 <HAL_ADC_MspInit+0xfc>)
 800264c:	f004 fa12 	bl	8006a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002652:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <HAL_ADC_MspInit+0x104>)
 8002654:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002656:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002658:	2205      	movs	r2, #5
 800265a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002674:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800267c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002680:	2220      	movs	r2, #32
 8002682:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800268a:	480b      	ldr	r0, [pc, #44]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 800268c:	f003 fec0 	bl	8006410 <HAL_DMA_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002696:	f000 fe43 	bl	8003320 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a06      	ldr	r2, [pc, #24]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
 80026a0:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <HAL_ADC_MspInit+0x100>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80026a6:	bf00      	nop
 80026a8:	3778      	adds	r7, #120	@ 0x78
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	48000800 	.word	0x48000800
 80026b8:	20000250 	.word	0x20000250
 80026bc:	40020008 	.word	0x40020008

080026c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <MX_DMA_Init+0x70>)
 80026c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ca:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <MX_DMA_Init+0x70>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <MX_DMA_Init+0x70>)
 80026d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <MX_DMA_Init+0x70>)
 80026e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e2:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <MX_DMA_Init+0x70>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_DMA_Init+0x70>)
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	200b      	movs	r0, #11
 80026fc:	f003 fe53 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002700:	200b      	movs	r0, #11
 8002702:	f003 fe6a 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	200c      	movs	r0, #12
 800270c:	f003 fe4b 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002710:	200c      	movs	r0, #12
 8002712:	f003 fe62 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	200d      	movs	r0, #13
 800271c:	f003 fe43 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002720:	200d      	movs	r0, #13
 8002722:	f003 fe5a 	bl	80063da <HAL_NVIC_EnableIRQ>

}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <MX_GPIO_Init+0x154>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a4e      	ldr	r2, [pc, #312]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b4c      	ldr	r3, [pc, #304]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002762:	4b49      	ldr	r3, [pc, #292]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a48      	ldr	r2, [pc, #288]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002768:	f043 0320 	orr.w	r3, r3, #32
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b46      	ldr	r3, [pc, #280]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b43      	ldr	r3, [pc, #268]	@ (8002888 <MX_GPIO_Init+0x154>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	4a42      	ldr	r2, [pc, #264]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	4a3c      	ldr	r2, [pc, #240]	@ (8002888 <MX_GPIO_Init+0x154>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <MX_GPIO_Init+0x154>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b4:	f004 faf8 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027be:	4833      	ldr	r0, [pc, #204]	@ (800288c <MX_GPIO_Init+0x158>)
 80027c0:	f004 faf2 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	482c      	ldr	r0, [pc, #176]	@ (800288c <MX_GPIO_Init+0x158>)
 80027dc:	f004 f94a 	bl	8006a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80027e0:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fc:	f004 f93a 	bl	8006a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002800:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 8002804:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	481e      	ldr	r0, [pc, #120]	@ (8002890 <MX_GPIO_Init+0x15c>)
 8002816:	f004 f92d 	bl	8006a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800281a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002820:	2301      	movs	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4816      	ldr	r0, [pc, #88]	@ (800288c <MX_GPIO_Init+0x158>)
 8002834:	f004 f91e 	bl	8006a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 8002838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f004 f910 	bl	8006a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8002854:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4808      	ldr	r0, [pc, #32]	@ (800288c <MX_GPIO_Init+0x158>)
 800286a:	f004 f903 	bl	8006a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2028      	movs	r0, #40	@ 0x28
 8002874:	f003 fd97 	bl	80063a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002878:	2028      	movs	r0, #40	@ 0x28
 800287a:	f003 fdae 	bl	80063da <HAL_NVIC_EnableIRQ>

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	@ 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	48000800 	.word	0x48000800
 8002890:	48000400 	.word	0x48000400

08002894 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8002894:	b580      	push	{r7, lr}
 8002896:	b096      	sub	sp, #88	@ 0x58
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	ed87 0a02 	vstr	s0, [r7, #8]
 80028a0:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	2201      	movs	r2, #1
 80028ae:	2101      	movs	r1, #1
 80028b0:	f009 fa23 	bl	800bcfa <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f009 fe93 	bl	800c5ee <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f009 fe89 	bl	800c5ee <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f009 fe7f 	bl	800c5ee <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80028fc:	4619      	mov	r1, r3
 80028fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8002902:	4610      	mov	r0, r2
 8002904:	f009 fe02 	bl	800c50c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800291a:	461a      	mov	r2, r3
 800291c:	f009 fd7c 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002932:	461a      	mov	r2, r3
 8002934:	f009 f9a6 	bl	800bc84 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800294a:	461a      	mov	r2, r3
 800294c:	f009 fd64 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002962:	461a      	mov	r2, r3
 8002964:	f009 fd58 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800297a:	461a      	mov	r2, r3
 800297c:	f009 fd4c 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8002992:	4619      	mov	r1, r3
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	4610      	mov	r0, r2
 800299a:	f009 fdb7 	bl	800c50c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80029b0:	461a      	mov	r2, r3
 80029b2:	f009 f967 	bl	800bc84 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80029c8:	461a      	mov	r2, r3
 80029ca:	f009 fd25 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80029e0:	461a      	mov	r2, r3
 80029e2:	f009 fd19 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80029f8:	461a      	mov	r2, r3
 80029fa:	f009 f943 	bl	800bc84 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f009 f98c 	bl	800bd2a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002a24:	461a      	mov	r2, r3
 8002a26:	f009 fcf7 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f009 fceb 	bl	800c418 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002a54:	461a      	mov	r2, r3
 8002a56:	f009 fcdf 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f009 fd83 	bl	800c578 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8002a84:	461a      	mov	r2, r3
 8002a86:	f009 fcc7 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f009 f8f1 	bl	800bc84 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f009 fcaf 	bl	800c418 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	f009 f918 	bl	800bcfa <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8002ad6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002ada:	4619      	mov	r1, r3
 8002adc:	f009 fc9c 	bl	800c418 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002ae6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002aea:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002aee:	4618      	mov	r0, r3
 8002af0:	f009 fd42 	bl	800c578 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8002b00:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b04:	4618      	mov	r0, r3
 8002b06:	f009 fc87 	bl	800c418 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002b1a:	ee07 3a90 	vmov	s15, r3
}
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	3758      	adds	r7, #88	@ 0x58
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b0a4      	sub	sp, #144	@ 0x90
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6178      	str	r0, [r7, #20]
 8002b30:	6139      	str	r1, [r7, #16]
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b38:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8002b4c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b70:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002b82:	4bc6      	ldr	r3, [pc, #792]	@ (8002e9c <Kalman_Start+0x374>)
 8002b84:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002b88:	461d      	mov	r5, r3
 8002b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bbc:	e028      	b.n	8002c10 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	3390      	adds	r3, #144	@ 0x90
 8002be0:	443b      	add	r3, r7
 8002be2:	3b64      	subs	r3, #100	@ 0x64
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bec:	3398      	adds	r3, #152	@ 0x98
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	ddd2      	ble.n	8002bbe <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c1e:	e03a      	b.n	8002c96 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3390      	adds	r3, #144	@ 0x90
 8002c28:	443b      	add	r3, r7
 8002c2a:	3b74      	subs	r3, #116	@ 0x74
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4c:	3324      	adds	r3, #36	@ 0x24
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3390      	adds	r3, #144	@ 0x90
 8002c5c:	443b      	add	r3, r7
 8002c5e:	3b14      	subs	r3, #20
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c68:	3328      	adds	r3, #40	@ 0x28
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3390      	adds	r3, #144	@ 0x90
 8002c78:	443b      	add	r3, r7
 8002c7a:	3b24      	subs	r3, #36	@ 0x24
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c84:	332c      	adds	r3, #44	@ 0x2c
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c90:	3301      	adds	r3, #1
 8002c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	ddc0      	ble.n	8002c20 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2104      	movs	r1, #4
 8002caa:	f009 f826 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	2204      	movs	r2, #4
 8002cba:	2104      	movs	r1, #4
 8002cbc:	f009 f81d 	bl	800bcfa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3350      	adds	r3, #80	@ 0x50
 8002cca:	2204      	movs	r2, #4
 8002ccc:	2104      	movs	r1, #4
 8002cce:	f009 f814 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3390      	adds	r3, #144	@ 0x90
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2104      	movs	r1, #4
 8002ce0:	f009 f80b 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	33a0      	adds	r3, #160	@ 0xa0
 8002cee:	2204      	movs	r2, #4
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	f009 f802 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	33b0      	adds	r3, #176	@ 0xb0
 8002d00:	2201      	movs	r2, #1
 8002d02:	2104      	movs	r1, #4
 8002d04:	f008 fff9 	bl	800bcfa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	33c8      	adds	r3, #200	@ 0xc8
 8002d12:	2204      	movs	r2, #4
 8002d14:	2104      	movs	r1, #4
 8002d16:	f008 fff0 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002d26:	2201      	movs	r2, #1
 8002d28:	2104      	movs	r1, #4
 8002d2a:	f008 ffe6 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	f008 ffdc 	bl	800bcfa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002d4e:	2204      	movs	r2, #4
 8002d50:	2104      	movs	r1, #4
 8002d52:	f008 ffd2 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d62:	2204      	movs	r2, #4
 8002d64:	2104      	movs	r1, #4
 8002d66:	f008 ffc8 	bl	800bcfa <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002d76:	2201      	movs	r2, #1
 8002d78:	2104      	movs	r1, #4
 8002d7a:	f008 ffbe 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	f008 ffb4 	bl	800bcfa <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002d9e:	2204      	movs	r2, #4
 8002da0:	2101      	movs	r1, #1
 8002da2:	f008 ffaa 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002db2:	2201      	movs	r2, #1
 8002db4:	2101      	movs	r1, #1
 8002db6:	f008 ffa0 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2101      	movs	r1, #1
 8002dca:	f008 ff96 	bl	800bcfa <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2104      	movs	r1, #4
 8002dde:	f008 ff8c 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002dee:	2201      	movs	r2, #1
 8002df0:	2104      	movs	r1, #4
 8002df2:	f008 ff82 	bl	800bcfa <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002e02:	2201      	movs	r2, #1
 8002e04:	2101      	movs	r1, #1
 8002e06:	f008 ff78 	bl	800bcfa <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002e16:	2201      	movs	r2, #1
 8002e18:	2101      	movs	r1, #1
 8002e1a:	f008 ff6e 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	f008 ff64 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2104      	movs	r1, #4
 8002e42:	f008 ff5a 	bl	800bcfa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002e52:	2201      	movs	r2, #1
 8002e54:	2101      	movs	r1, #1
 8002e56:	f008 ff50 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e66:	2204      	movs	r2, #4
 8002e68:	2104      	movs	r1, #4
 8002e6a:	f008 ff46 	bl	800bcfa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	33c4      	adds	r3, #196	@ 0xc4
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	f008 ff3d 	bl	800bcfa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2101      	movs	r1, #1
 8002e90:	f008 ff33 	bl	800bcfa <arm_mat_init_f32>
}
 8002e94:	bf00      	nop
 8002e96:	3790      	adds	r7, #144	@ 0x90
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9c:	0800d3a8 	.word	0x0800d3a8

08002ea0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ea4:	f3bf 8f4f 	dsb	sy
}
 8002ea8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <__NVIC_SystemReset+0x24>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002eb2:	4904      	ldr	r1, [pc, #16]	@ (8002ec4 <__NVIC_SystemReset+0x24>)
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <__NVIC_SystemReset+0x28>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eba:	f3bf 8f4f 	dsb	sy
}
 8002ebe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <__NVIC_SystemReset+0x20>
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	05fa0004 	.word	0x05fa0004

08002ecc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002ecc:	b598      	push	{r3, r4, r7, lr}
 8002ece:	ed2d 8b02 	vpush	{d8}
 8002ed2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ed4:	f001 fca3 	bl	800481e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ed8:	f000 f89a 	bl	8003010 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002edc:	f7ff fc2a 	bl	8002734 <MX_GPIO_Init>
	MX_DMA_Init();
 8002ee0:	f7ff fbee 	bl	80026c0 <MX_DMA_Init>
	MX_ADC1_Init();
 8002ee4:	f7ff fae0 	bl	80024a8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8002ee8:	f000 ff9a 	bl	8003e20 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002eec:	f000 ffe6 	bl	8003ebc <MX_TIM3_Init>
	MX_TIM4_Init();
 8002ef0:	f001 f83a 	bl	8003f68 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002ef4:	f001 f88e 	bl	8004014 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002ef8:	f001 f8da 	bl	80040b0 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8002efc:	f001 fb5c 	bl	80045b8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002f00:	f001 f99e 	bl	8004240 <MX_TIM16_Init>
	MX_TIM1_Init();
 8002f04:	f000 fef8 	bl	8003cf8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002f08:	f000 fa10 	bl	800332c <plotter_begin>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !trajectoryActive) {
 8002f0c:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <main+0x110>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d04e      	beq.n	8002fb2 <main+0xe6>
 8002f14:	4b32      	ldr	r3, [pc, #200]	@ (8002fe0 <main+0x114>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d14a      	bne.n	8002fb2 <main+0xe6>
 8002f1c:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <main+0x118>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d043      	beq.n	8002fb2 <main+0xe6>
			prisEva.t = 0.0f;
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe8 <main+0x11c>)
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
			prisEva.isFinised = false;
 8002f32:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <main+0x11c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	741a      	strb	r2, [r3, #16]

			initial_p = current_position;
 8002f38:	4b2c      	ldr	r3, [pc, #176]	@ (8002fec <main+0x120>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff0 <main+0x124>)
 8002f3e:	6013      	str	r3, [r2, #0]

			target_p = trajectory_sequence[trajectory_sequence_index];
 8002f40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <main+0x128>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff8 <main+0x12c>)
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <main+0x130>)
 8002f4e:	6013      	str	r3, [r2, #0]

//			Trapezoidal_Generator(&prisGen, initial_p, target_p,
//					ZGX45RGG_400RPM_Constant.qd_max,
//					ZGX45RGG_400RPM_Constant.qdd_max);

			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002f50:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <main+0x124>)
 8002f52:	ed93 8a00 	vldr	s16, [r3]
 8002f56:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <main+0x130>)
 8002f58:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8002f5c:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <main+0x134>)
 8002f5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7fd fd6d 	bl	8000a44 <__aeabi_d2f>
 8002f6a:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <main+0x134>)
 8002f6e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f7fd fd65 	bl	8000a44 <__aeabi_d2f>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	ee01 3a90 	vmov	s3, r3
 8002f80:	ee01 4a10 	vmov	s2, r4
 8002f84:	eef0 0a68 	vmov.f32	s1, s17
 8002f88:	eeb0 0a48 	vmov.f32	s0, s16
 8002f8c:	481d      	ldr	r0, [pc, #116]	@ (8003004 <main+0x138>)
 8002f8e:	f7ff f875 	bl	800207c <Trapezoidal_Generator>

			trajectoryActive = true;
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <main+0x118>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <main+0x128>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	425a      	negs	r2, r3
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	bf58      	it	pl
 8002faa:	4253      	negpl	r3, r2
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <main+0x128>)
 8002fb0:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <main+0x110>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <main+0x114>)
 8002fba:	701a      	strb	r2, [r3, #0]
//		if (b1) {
//			pen_down();
//		} else if (b4) {
//			pen_up();
//		}
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <main+0x13c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fcc:	f003 feec 	bl	8006da8 <HAL_GPIO_WritePin>

		if (b3) {
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <main+0x140>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d099      	beq.n	8002f0c <main+0x40>
			NVIC_SystemReset();
 8002fd8:	f7ff ff62 	bl	8002ea0 <__NVIC_SystemReset>
 8002fdc:	20001544 	.word	0x20001544
 8002fe0:	20000308 	.word	0x20000308
 8002fe4:	200002d8 	.word	0x200002d8
 8002fe8:	200002c4 	.word	0x200002c4
 8002fec:	200002e4 	.word	0x200002e4
 8002ff0:	200002dc 	.word	0x200002dc
 8002ff4:	200002ec 	.word	0x200002ec
 8002ff8:	0800d3e8 	.word	0x0800d3e8
 8002ffc:	200002e0 	.word	0x200002e0
 8003000:	20000000 	.word	0x20000000
 8003004:	200002b0 	.word	0x200002b0
 8003008:	20001548 	.word	0x20001548
 800300c:	2000154c 	.word	0x2000154c

08003010 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b094      	sub	sp, #80	@ 0x50
 8003014:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003016:	f107 0318 	add.w	r3, r7, #24
 800301a:	2238      	movs	r2, #56	@ 0x38
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f009 fbdc 	bl	800c7dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003032:	2000      	movs	r0, #0
 8003034:	f003 fee8 	bl	8006e08 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800303c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003042:	2340      	movs	r3, #64	@ 0x40
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003046:	2302      	movs	r3, #2
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800304a:	2302      	movs	r3, #2
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800304e:	2304      	movs	r3, #4
 8003050:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003052:	2355      	movs	r3, #85	@ 0x55
 8003054:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003056:	2302      	movs	r3, #2
 8003058:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800305a:	2302      	movs	r3, #2
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800305e:	2302      	movs	r3, #2
 8003060:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003062:	f107 0318 	add.w	r3, r7, #24
 8003066:	4618      	mov	r0, r3
 8003068:	f003 ff82 	bl	8006f70 <HAL_RCC_OscConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SystemClock_Config+0x66>
		Error_Handler();
 8003072:	f000 f955 	bl	8003320 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003076:	230f      	movs	r3, #15
 8003078:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800307a:	2303      	movs	r3, #3
 800307c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2104      	movs	r1, #4
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fa80 	bl	8007594 <HAL_RCC_ClockConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <SystemClock_Config+0x8e>
		Error_Handler();
 800309a:	f000 f941 	bl	8003320 <Error_Handler>
	}
}
 800309e:	bf00      	nop
 80030a0:	3750      	adds	r7, #80	@ 0x50
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	80fb      	strh	r3, [r7, #6]

}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	ed2d 8b02 	vpush	{d8}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a78      	ldr	r2, [pc, #480]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f040 80e6 	bne.w	80032b2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		update_sensors();
 80030e6:	f000 fba3 	bl	8003830 <update_sensors>
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&prismatic_motor, 2000, cmd_ux);

		if (trajectoryActive && !prisEva.isFinised) {
 80030ea:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80b8 	beq.w	8003264 <HAL_TIM_PeriodElapsedCallback+0x194>
 80030f4:	4b74      	ldr	r3, [pc, #464]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80030f6:	7c1b      	ldrb	r3, [r3, #16]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80b0 	beq.w	8003264 <HAL_TIM_PeriodElapsedCallback+0x194>
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003104:	4b71      	ldr	r3, [pc, #452]	@ (80032cc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003106:	ed93 8a00 	vldr	s16, [r3]
 800310a:	4b71      	ldr	r3, [pc, #452]	@ (80032d0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800310c:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8003110:	4b70      	ldr	r3, [pc, #448]	@ (80032d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003112:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fc93 	bl	8000a44 <__aeabi_d2f>
 800311e:	4606      	mov	r6, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8003120:	4b6c      	ldr	r3, [pc, #432]	@ (80032d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003122:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fc8b 	bl	8000a44 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	ee01 3a90 	vmov	s3, r3
 8003134:	ee01 6a10 	vmov	s2, r6
 8003138:	eef0 0a68 	vmov.f32	s1, s17
 800313c:	eeb0 0a48 	vmov.f32	s0, s16
 8003140:	4961      	ldr	r1, [pc, #388]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003142:	4865      	ldr	r0, [pc, #404]	@ (80032d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003144:	f7ff f85c 	bl	8002200 <Trapezoidal_Evaluated>

			current_position = prisEva.setposition;
 8003148:	4b5f      	ldr	r3, [pc, #380]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a63      	ldr	r2, [pc, #396]	@ (80032dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800314e:	6013      	str	r3, [r2, #0]
			current_velocity = prisEva.setvelocity;
 8003150:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a62      	ldr	r2, [pc, #392]	@ (80032e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003156:	6013      	str	r3, [r2, #0]

			setpoint_pos = current_position;
 8003158:	4b60      	ldr	r3, [pc, #384]	@ (80032dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a61      	ldr	r2, [pc, #388]	@ (80032e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800315e:	6013      	str	r3, [r2, #0]
			setpoint_vel = current_velocity;
 8003160:	4b5f      	ldr	r3, [pc, #380]	@ (80032e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a60      	ldr	r2, [pc, #384]	@ (80032e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003166:	6013      	str	r3, [r2, #0]

			QEI_get_diff_count(&revolute_encoder);
 8003168:	4860      	ldr	r0, [pc, #384]	@ (80032ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800316a:	f7fe fdb1 	bl	8001cd0 <QEI_get_diff_count>
			QEI_compute_data(&revolute_encoder);
 800316e:	485f      	ldr	r0, [pc, #380]	@ (80032ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003170:	f7fe fe8e 	bl	8001e90 <QEI_compute_data>

			vin = mapf(cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 8003174:	4b5e      	ldr	r3, [pc, #376]	@ (80032f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800317e:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8003182:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 80032f4 <HAL_TIM_PeriodElapsedCallback+0x224>
 8003186:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 80032f8 <HAL_TIM_PeriodElapsedCallback+0x228>
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	f7fe fa41 	bl	8001614 <mapf>
 8003192:	eef0 7a40 	vmov.f32	s15, s0
 8003196:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003198:	edc3 7a00 	vstr	s15, [r3]

			kal_flit = SteadyStateKalmanFilter(&revolute_kalman, vin,
 800319c:	4b57      	ldr	r3, [pc, #348]	@ (80032fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	4b52      	ldr	r3, [pc, #328]	@ (80032ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80031a4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80031a8:	eef0 0a47 	vmov.f32	s1, s14
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	4853      	ldr	r0, [pc, #332]	@ (8003300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80031b2:	f7ff fb6f 	bl	8002894 <SteadyStateKalmanFilter>
 80031b6:	eef0 7a40 	vmov.f32	s15, s0
 80031ba:	4b52      	ldr	r3, [pc, #328]	@ (8003304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80031bc:	edc3 7a00 	vstr	s15, [r3]
					revolute_encoder.rads);

			cmd_vx = PWM_Satuation(
 80031c0:	4b48      	ldr	r3, [pc, #288]	@ (80032e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80031c2:	ed93 7a00 	vldr	s14, [r3]
					PID_CONTROLLER_Compute(&revolute_position_pid,
							setpoint_pos - revolute_encoder.rads),
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80031c8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
			cmd_vx = PWM_Satuation(
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	484c      	ldr	r0, [pc, #304]	@ (8003308 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80031d6:	f7fd ff2c 	bl	8001032 <PID_CONTROLLER_Compute>
 80031da:	eeb0 8a40 	vmov.f32	s16, s0
					ZGX45RGG_150RPM_Constant.qd_max,
 80031de:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80031e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			cmd_vx = PWM_Satuation(
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fbe4 	bl	80009b4 <__aeabi_d2iz>
 80031ec:	4606      	mov	r6, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 80031ee:	4b39      	ldr	r3, [pc, #228]	@ (80032d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80031f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80031f4:	4614      	mov	r4, r2
 80031f6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
			cmd_vx = PWM_Satuation(
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd fbd9 	bl	80009b4 <__aeabi_d2iz>
 8003202:	4603      	mov	r3, r0
 8003204:	4619      	mov	r1, r3
 8003206:	4630      	mov	r0, r6
 8003208:	eeb0 0a48 	vmov.f32	s0, s16
 800320c:	f7fd feb8 	bl	8000f80 <PWM_Satuation>
 8003210:	ee07 0a90 	vmov	s15, r0
 8003214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003218:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800321a:	edc3 7a00 	vstr	s15, [r3]

			cmd_ux = PWM_Satuation(
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							cmd_vx + setpoint_vel - kal_flit), 65535, -65535);
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003220:	ed93 7a00 	vldr	s14, [r3]
 8003224:	4b30      	ldr	r3, [pc, #192]	@ (80032e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee37 7a27 	vadd.f32	s14, s14, s15
			cmd_ux = PWM_Satuation(
 800322e:	4b35      	ldr	r3, [pc, #212]	@ (8003304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	eeb0 0a67 	vmov.f32	s0, s15
 800323c:	4834      	ldr	r0, [pc, #208]	@ (8003310 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800323e:	f7fd fef8 	bl	8001032 <PID_CONTROLLER_Compute>
 8003242:	eef0 7a40 	vmov.f32	s15, s0
 8003246:	4933      	ldr	r1, [pc, #204]	@ (8003314 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003248:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f7fd fe96 	bl	8000f80 <PWM_Satuation>
 8003254:	ee07 0a90 	vmov	s15, r0
 8003258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325c:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800325e:	edc3 7a00 	vstr	s15, [r3]
 8003262:	e01c      	b.n	800329e <HAL_TIM_PeriodElapsedCallback+0x1ce>
		} else {
			trajectoryActive = false;
 8003264:	4b17      	ldr	r3, [pc, #92]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
			cmd_ux = 0;
 800326a:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
			vin = 0;
 8003272:	4b22      	ldr	r3, [pc, #136]	@ (80032fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
			kal_flit = SteadyStateKalmanFilter(&revolute_kalman, vin,
 800327a:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003282:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003286:	eef0 0a47 	vmov.f32	s1, s14
 800328a:	eeb0 0a67 	vmov.f32	s0, s15
 800328e:	481c      	ldr	r0, [pc, #112]	@ (8003300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003290:	f7ff fb00 	bl	8002894 <SteadyStateKalmanFilter>
 8003294:	eef0 7a40 	vmov.f32	s15, s0
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800329a:	edc3 7a00 	vstr	s15, [r3]
					revolute_encoder.rads);
		}

		MDXX_set_range(&revolute_motor, 2000, cmd_ux);
 800329e:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eef0 0a67 	vmov.f32	s1, s15
 80032a8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8003318 <HAL_TIM_PeriodElapsedCallback+0x248>
 80032ac:	481b      	ldr	r0, [pc, #108]	@ (800331c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80032ae:	f7fd ff77 	bl	80011a0 <MDXX_set_range>
	}
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	ecbd 8b02 	vpop	{d8}
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000163c 	.word	0x2000163c
 80032c4:	200002d8 	.word	0x200002d8
 80032c8:	200002c4 	.word	0x200002c4
 80032cc:	200002dc 	.word	0x200002dc
 80032d0:	200002e0 	.word	0x200002e0
 80032d4:	20000000 	.word	0x20000000
 80032d8:	200002b0 	.word	0x200002b0
 80032dc:	200002e4 	.word	0x200002e4
 80032e0:	200002e8 	.word	0x200002e8
 80032e4:	200002f0 	.word	0x200002f0
 80032e8:	200002f4 	.word	0x200002f4
 80032ec:	200003f0 	.word	0x200003f0
 80032f0:	200002fc 	.word	0x200002fc
 80032f4:	477fff00 	.word	0x477fff00
 80032f8:	c77fff00 	.word	0xc77fff00
 80032fc:	20000304 	.word	0x20000304
 8003300:	20000b04 	.word	0x20000b04
 8003304:	200002f8 	.word	0x200002f8
 8003308:	20000494 	.word	0x20000494
 800330c:	20000300 	.word	0x20000300
 8003310:	200004c0 	.word	0x200004c0
 8003314:	ffff0001 	.word	0xffff0001
 8003318:	44fa0000 	.word	0x44fa0000
 800331c:	20000358 	.word	0x20000358

08003320 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003324:	b672      	cpsid	i
}
 8003326:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <Error_Handler+0x8>

0800332c <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	ed2d 8b02 	vpush	{d8}
 8003332:	b083      	sub	sp, #12
 8003334:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8003336:	2100      	movs	r1, #0
 8003338:	48cb      	ldr	r0, [pc, #812]	@ (8003668 <plotter_begin+0x33c>)
 800333a:	f000 fb2b 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800333e:	eddf 2acb 	vldr	s5, [pc, #812]	@ 800366c <plotter_begin+0x340>
 8003342:	ed9f 2acb 	vldr	s4, [pc, #812]	@ 8003670 <plotter_begin+0x344>
 8003346:	eddf 1acb 	vldr	s3, [pc, #812]	@ 8003674 <plotter_begin+0x348>
 800334a:	ed9f 1aca 	vldr	s2, [pc, #808]	@ 8003674 <plotter_begin+0x348>
 800334e:	eddf 0aca 	vldr	s1, [pc, #808]	@ 8003678 <plotter_begin+0x34c>
 8003352:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 800366c <plotter_begin+0x340>
 8003356:	48c4      	ldr	r0, [pc, #784]	@ (8003668 <plotter_begin+0x33c>)
 8003358:	f000 fb7a 	bl	8003a50 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800335c:	2102      	movs	r1, #2
 800335e:	48c7      	ldr	r0, [pc, #796]	@ (800367c <plotter_begin+0x350>)
 8003360:	f000 fb18 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8003364:	ed9f 3ac1 	vldr	s6, [pc, #772]	@ 800366c <plotter_begin+0x340>
 8003368:	eddf 2ac1 	vldr	s5, [pc, #772]	@ 8003670 <plotter_begin+0x344>
 800336c:	ed9f 2ac1 	vldr	s4, [pc, #772]	@ 8003674 <plotter_begin+0x348>
 8003370:	eddf 1ac0 	vldr	s3, [pc, #768]	@ 8003674 <plotter_begin+0x348>
 8003374:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003378:	eddf 0abf 	vldr	s1, [pc, #764]	@ 8003678 <plotter_begin+0x34c>
 800337c:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 800366c <plotter_begin+0x340>
 8003380:	48be      	ldr	r0, [pc, #760]	@ (800367c <plotter_begin+0x350>)
 8003382:	f000 fb90 	bl	8003aa6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8003386:	2100      	movs	r1, #0
 8003388:	48bd      	ldr	r0, [pc, #756]	@ (8003680 <plotter_begin+0x354>)
 800338a:	f000 fb03 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY, SINE_PHASE,
 800338e:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8003392:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8003396:	eddf 1ab7 	vldr	s3, [pc, #732]	@ 8003674 <plotter_begin+0x348>
 800339a:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8003674 <plotter_begin+0x348>
 800339e:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 8003678 <plotter_begin+0x34c>
 80033a2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80033a6:	48b6      	ldr	r0, [pc, #728]	@ (8003680 <plotter_begin+0x354>)
 80033a8:	f000 fb52 	bl	8003a50 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80033ac:	2102      	movs	r1, #2
 80033ae:	48b5      	ldr	r0, [pc, #724]	@ (8003684 <plotter_begin+0x358>)
 80033b0:	f000 faf0 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE, SQUARE_FREQUENCY,
 80033b4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80033b8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80033bc:	ed9f 2aad 	vldr	s4, [pc, #692]	@ 8003674 <plotter_begin+0x348>
 80033c0:	eddf 1aac 	vldr	s3, [pc, #688]	@ 8003674 <plotter_begin+0x348>
 80033c4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80033c8:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8003678 <plotter_begin+0x34c>
 80033cc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80033d0:	48ac      	ldr	r0, [pc, #688]	@ (8003684 <plotter_begin+0x358>)
 80033d2:	f000 fb68 	bl	8003aa6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80033d6:	2100      	movs	r1, #0
 80033d8:	48ab      	ldr	r0, [pc, #684]	@ (8003688 <plotter_begin+0x35c>)
 80033da:	f000 fadb 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80033de:	4bab      	ldr	r3, [pc, #684]	@ (800368c <plotter_begin+0x360>)
 80033e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fd fb2c 	bl	8000a44 <__aeabi_d2f>
 80033ec:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80033ee:	4ba7      	ldr	r3, [pc, #668]	@ (800368c <plotter_begin+0x360>)
 80033f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f7fd fb24 	bl	8000a44 <__aeabi_d2f>
 80033fc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8003406:	4ba1      	ldr	r3, [pc, #644]	@ (800368c <plotter_begin+0x360>)
 8003408:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	f7fd fb18 	bl	8000a44 <__aeabi_d2f>
 8003414:	4603      	mov	r3, r0
 8003416:	ee02 3a90 	vmov	s5, r3
 800341a:	eeb0 2a48 	vmov.f32	s4, s16
 800341e:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8003674 <plotter_begin+0x348>
 8003422:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8003674 <plotter_begin+0x348>
 8003426:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8003678 <plotter_begin+0x34c>
 800342a:	ee00 4a10 	vmov	s0, r4
 800342e:	4896      	ldr	r0, [pc, #600]	@ (8003688 <plotter_begin+0x35c>)
 8003430:	f000 fb0e 	bl	8003a50 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8003434:	2102      	movs	r1, #2
 8003436:	4896      	ldr	r0, [pc, #600]	@ (8003690 <plotter_begin+0x364>)
 8003438:	f000 faac 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800343c:	4b93      	ldr	r3, [pc, #588]	@ (800368c <plotter_begin+0x360>)
 800343e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fafd 	bl	8000a44 <__aeabi_d2f>
 800344a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800344c:	4b8f      	ldr	r3, [pc, #572]	@ (800368c <plotter_begin+0x360>)
 800344e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd faf5 	bl	8000a44 <__aeabi_d2f>
 800345a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003464:	4b89      	ldr	r3, [pc, #548]	@ (800368c <plotter_begin+0x360>)
 8003466:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fae9 	bl	8000a44 <__aeabi_d2f>
 8003472:	4603      	mov	r3, r0
 8003474:	ee03 3a10 	vmov	s6, r3
 8003478:	eef0 2a48 	vmov.f32	s5, s16
 800347c:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 8003674 <plotter_begin+0x348>
 8003480:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 8003674 <plotter_begin+0x348>
 8003484:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003488:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8003678 <plotter_begin+0x34c>
 800348c:	ee00 4a10 	vmov	s0, r4
 8003490:	487f      	ldr	r0, [pc, #508]	@ (8003690 <plotter_begin+0x364>)
 8003492:	f000 fb08 	bl	8003aa6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8003496:	2100      	movs	r1, #0
 8003498:	487e      	ldr	r0, [pc, #504]	@ (8003694 <plotter_begin+0x368>)
 800349a:	f000 fa7b 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800349e:	4b7e      	ldr	r3, [pc, #504]	@ (8003698 <plotter_begin+0x36c>)
 80034a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd facc 	bl	8000a44 <__aeabi_d2f>
 80034ac:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80034ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003698 <plotter_begin+0x36c>)
 80034b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fac4 	bl	8000a44 <__aeabi_d2f>
 80034bc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80034c6:	4b74      	ldr	r3, [pc, #464]	@ (8003698 <plotter_begin+0x36c>)
 80034c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fab8 	bl	8000a44 <__aeabi_d2f>
 80034d4:	4603      	mov	r3, r0
 80034d6:	ee02 3a90 	vmov	s5, r3
 80034da:	eeb0 2a48 	vmov.f32	s4, s16
 80034de:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8003674 <plotter_begin+0x348>
 80034e2:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 8003674 <plotter_begin+0x348>
 80034e6:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8003678 <plotter_begin+0x34c>
 80034ea:	ee00 4a10 	vmov	s0, r4
 80034ee:	4869      	ldr	r0, [pc, #420]	@ (8003694 <plotter_begin+0x368>)
 80034f0:	f000 faae 	bl	8003a50 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80034f4:	2102      	movs	r1, #2
 80034f6:	4869      	ldr	r0, [pc, #420]	@ (800369c <plotter_begin+0x370>)
 80034f8:	f000 fa4c 	bl	8003994 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80034fc:	4b66      	ldr	r3, [pc, #408]	@ (8003698 <plotter_begin+0x36c>)
 80034fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fa9d 	bl	8000a44 <__aeabi_d2f>
 800350a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800350c:	4b62      	ldr	r3, [pc, #392]	@ (8003698 <plotter_begin+0x36c>)
 800350e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f7fd fa95 	bl	8000a44 <__aeabi_d2f>
 800351a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003524:	4b5c      	ldr	r3, [pc, #368]	@ (8003698 <plotter_begin+0x36c>)
 8003526:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fa89 	bl	8000a44 <__aeabi_d2f>
 8003532:	4603      	mov	r3, r0
 8003534:	ee03 3a10 	vmov	s6, r3
 8003538:	eef0 2a48 	vmov.f32	s5, s16
 800353c:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 8003674 <plotter_begin+0x348>
 8003540:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8003674 <plotter_begin+0x348>
 8003544:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003548:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8003678 <plotter_begin+0x34c>
 800354c:	ee00 4a10 	vmov	s0, r4
 8003550:	4852      	ldr	r0, [pc, #328]	@ (800369c <plotter_begin+0x370>)
 8003552:	f000 faa8 	bl	8003aa6 <SIGNAL_config_square>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8003556:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800355a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800355e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003562:	494f      	ldr	r1, [pc, #316]	@ (80036a0 <plotter_begin+0x374>)
 8003564:	484f      	ldr	r0, [pc, #316]	@ (80036a4 <plotter_begin+0x378>)
 8003566:	f7fe fb61 	bl	8001c2c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 800356a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800356e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003572:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003576:	494c      	ldr	r1, [pc, #304]	@ (80036a8 <plotter_begin+0x37c>)
 8003578:	484c      	ldr	r0, [pc, #304]	@ (80036ac <plotter_begin+0x380>)
 800357a:	f7fe fb57 	bl	8001c2c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 800357e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003588:	2204      	movs	r2, #4
 800358a:	4949      	ldr	r1, [pc, #292]	@ (80036b0 <plotter_begin+0x384>)
 800358c:	4849      	ldr	r0, [pc, #292]	@ (80036b4 <plotter_begin+0x388>)
 800358e:	f7fd fde2 	bl	8001156 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8003592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <plotter_begin+0x38c>)
 800359a:	2200      	movs	r2, #0
 800359c:	4944      	ldr	r1, [pc, #272]	@ (80036b0 <plotter_begin+0x384>)
 800359e:	4847      	ldr	r0, [pc, #284]	@ (80036bc <plotter_begin+0x390>)
 80035a0:	f7fd fdd9 	bl	8001156 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80035a4:	220c      	movs	r2, #12
 80035a6:	4946      	ldr	r1, [pc, #280]	@ (80036c0 <plotter_begin+0x394>)
 80035a8:	4846      	ldr	r0, [pc, #280]	@ (80036c4 <plotter_begin+0x398>)
 80035aa:	f7fe f913 	bl	80017d4 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80035ae:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8003674 <plotter_begin+0x348>
 80035b2:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80036c8 <plotter_begin+0x39c>
 80035b6:	483f      	ldr	r0, [pc, #252]	@ (80036b4 <plotter_begin+0x388>)
 80035b8:	f7fd fdf2 	bl	80011a0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80035bc:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8003674 <plotter_begin+0x348>
 80035c0:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80036c8 <plotter_begin+0x39c>
 80035c4:	483d      	ldr	r0, [pc, #244]	@ (80036bc <plotter_begin+0x390>)
 80035c6:	f7fd fdeb 	bl	80011a0 <MDXX_set_range>
	pen_up();
 80035ca:	f000 f9d3 	bl	8003974 <pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1,
			ZGX45RGG_400RPM_Constant.qd_max);
 80035ce:	4b2f      	ldr	r3, [pc, #188]	@ (800368c <plotter_begin+0x360>)
 80035d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1,
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7fd fa34 	bl	8000a44 <__aeabi_d2f>
 80035dc:	4603      	mov	r3, r0
 80035de:	ee01 3a90 	vmov	s3, r3
 80035e2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80035e6:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80036cc <plotter_begin+0x3a0>
 80035ea:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80035ee:	4838      	ldr	r0, [pc, #224]	@ (80036d0 <plotter_begin+0x3a4>)
 80035f0:	f7fd fcf5 	bl	8000fde <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80035f4:	4b25      	ldr	r3, [pc, #148]	@ (800368c <plotter_begin+0x360>)
 80035f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0,
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7fd fa21 	bl	8000a44 <__aeabi_d2f>
 8003602:	4603      	mov	r3, r0
 8003604:	ee01 3a90 	vmov	s3, r3
 8003608:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8003674 <plotter_begin+0x348>
 800360c:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8003610:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80036d4 <plotter_begin+0x3a8>
 8003614:	4830      	ldr	r0, [pc, #192]	@ (80036d8 <plotter_begin+0x3ac>)
 8003616:	f7fd fce2 	bl	8000fde <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72.5,
			ZGX45RGG_150RPM_Constant.qd_max);
 800361a:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <plotter_begin+0x36c>)
 800361c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72.5,
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f7fd fa0e 	bl	8000a44 <__aeabi_d2f>
 8003628:	4603      	mov	r3, r0
 800362a:	ee01 3a90 	vmov	s3, r3
 800362e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 80036dc <plotter_begin+0x3b0>
 8003632:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80036e0 <plotter_begin+0x3b4>
 8003636:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80036d4 <plotter_begin+0x3a8>
 800363a:	482a      	ldr	r0, [pc, #168]	@ (80036e4 <plotter_begin+0x3b8>)
 800363c:	f7fd fccf 	bl	8000fde <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 1.5, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8003640:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <plotter_begin+0x36c>)
 8003642:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 1.5, 0,
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd f9fb 	bl	8000a44 <__aeabi_d2f>
 800364e:	4603      	mov	r3, r0
 8003650:	ee01 3a90 	vmov	s3, r3
 8003654:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8003674 <plotter_begin+0x348>
 8003658:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 800365c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80036e8 <plotter_begin+0x3bc>
 8003660:	4822      	ldr	r0, [pc, #136]	@ (80036ec <plotter_begin+0x3c0>)
 8003662:	f7fd fcbc 	bl	8000fde <PID_CONTROLLER_Init>
 8003666:	e043      	b.n	80036f0 <plotter_begin+0x3c4>
 8003668:	20000534 	.word	0x20000534
 800366c:	477fff00 	.word	0x477fff00
 8003670:	c77fff00 	.word	0xc77fff00
 8003674:	00000000 	.word	0x00000000
 8003678:	3dcccccd 	.word	0x3dcccccd
 800367c:	20000578 	.word	0x20000578
 8003680:	200005bc 	.word	0x200005bc
 8003684:	20000600 	.word	0x20000600
 8003688:	20000644 	.word	0x20000644
 800368c:	20000050 	.word	0x20000050
 8003690:	20000688 	.word	0x20000688
 8003694:	200006cc 	.word	0x200006cc
 8003698:	20000000 	.word	0x20000000
 800369c:	20000710 	.word	0x20000710
 80036a0:	200017d4 	.word	0x200017d4
 80036a4:	200003a4 	.word	0x200003a4
 80036a8:	20001708 	.word	0x20001708
 80036ac:	200003f0 	.word	0x200003f0
 80036b0:	2000196c 	.word	0x2000196c
 80036b4:	2000030c 	.word	0x2000030c
 80036b8:	48000800 	.word	0x48000800
 80036bc:	20000358 	.word	0x20000358
 80036c0:	20001570 	.word	0x20001570
 80036c4:	20000504 	.word	0x20000504
 80036c8:	44fa0000 	.word	0x44fa0000
 80036cc:	33d6bf95 	.word	0x33d6bf95
 80036d0:	2000043c 	.word	0x2000043c
 80036d4:	43fa0000 	.word	0x43fa0000
 80036d8:	20000468 	.word	0x20000468
 80036dc:	42910000 	.word	0x42910000
 80036e0:	3089705f 	.word	0x3089705f
 80036e4:	20000494 	.word	0x20000494
 80036e8:	447a0000 	.word	0x447a0000
 80036ec:	200004c0 	.word	0x200004c0
	//unit test
	//25 1e-8 0
	//2000 80 0

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80036f0:	4932      	ldr	r1, [pc, #200]	@ (80037bc <plotter_begin+0x490>)
 80036f2:	4833      	ldr	r0, [pc, #204]	@ (80037c0 <plotter_begin+0x494>)
 80036f4:	f7fd fe2e 	bl	8001354 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80036f8:	4932      	ldr	r1, [pc, #200]	@ (80037c4 <plotter_begin+0x498>)
 80036fa:	4833      	ldr	r0, [pc, #204]	@ (80037c8 <plotter_begin+0x49c>)
 80036fc:	f7fd fe4a 	bl	8001394 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8003700:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <plotter_begin+0x4a0>)
 8003702:	492e      	ldr	r1, [pc, #184]	@ (80037bc <plotter_begin+0x490>)
 8003704:	4832      	ldr	r0, [pc, #200]	@ (80037d0 <plotter_begin+0x4a4>)
 8003706:	f7fd fe33 	bl	8001370 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800370a:	4a30      	ldr	r2, [pc, #192]	@ (80037cc <plotter_begin+0x4a0>)
 800370c:	492d      	ldr	r1, [pc, #180]	@ (80037c4 <plotter_begin+0x498>)
 800370e:	4831      	ldr	r0, [pc, #196]	@ (80037d4 <plotter_begin+0x4a8>)
 8003710:	f7fd fe4e 	bl	80013b0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8003714:	2304      	movs	r3, #4
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80037d8 <plotter_begin+0x4ac>
 800371c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80037dc <plotter_begin+0x4b0>
 8003720:	2328      	movs	r3, #40	@ 0x28
 8003722:	4a2f      	ldr	r2, [pc, #188]	@ (80037e0 <plotter_begin+0x4b4>)
 8003724:	492f      	ldr	r1, [pc, #188]	@ (80037e4 <plotter_begin+0x4b8>)
 8003726:	4830      	ldr	r0, [pc, #192]	@ (80037e8 <plotter_begin+0x4bc>)
 8003728:	f7fd fb72 	bl	8000e10 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 800372c:	482e      	ldr	r0, [pc, #184]	@ (80037e8 <plotter_begin+0x4bc>)
 800372e:	f7fd fba4 	bl	8000e7a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003732:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80037ec <plotter_begin+0x4c0>
 8003736:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800373a:	211f      	movs	r1, #31
 800373c:	482c      	ldr	r0, [pc, #176]	@ (80037f0 <plotter_begin+0x4c4>)
 800373e:	f7fd fe49 	bl	80013d4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003742:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80037ec <plotter_begin+0x4c0>
 8003746:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800374a:	211f      	movs	r1, #31
 800374c:	4829      	ldr	r0, [pc, #164]	@ (80037f4 <plotter_begin+0x4c8>)
 800374e:	f7fd fe41 	bl	80013d4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003752:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80037ec <plotter_begin+0x4c0>
 8003756:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800375a:	211f      	movs	r1, #31
 800375c:	4826      	ldr	r0, [pc, #152]	@ (80037f8 <plotter_begin+0x4cc>)
 800375e:	f7fd fe39 	bl	80013d4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003762:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80037ec <plotter_begin+0x4c0>
 8003766:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800376a:	211f      	movs	r1, #31
 800376c:	4823      	ldr	r0, [pc, #140]	@ (80037fc <plotter_begin+0x4d0>)
 800376e:	f7fd fe31 	bl	80013d4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8003772:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003800 <plotter_begin+0x4d4>
 8003776:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800377a:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <plotter_begin+0x4d8>)
 800377c:	4922      	ldr	r1, [pc, #136]	@ (8003808 <plotter_begin+0x4dc>)
 800377e:	4823      	ldr	r0, [pc, #140]	@ (800380c <plotter_begin+0x4e0>)
 8003780:	f7ff f9d2 	bl	8002b28 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8003784:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8003800 <plotter_begin+0x4d4>
 8003788:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800378c:	4a20      	ldr	r2, [pc, #128]	@ (8003810 <plotter_begin+0x4e4>)
 800378e:	4921      	ldr	r1, [pc, #132]	@ (8003814 <plotter_begin+0x4e8>)
 8003790:	4821      	ldr	r0, [pc, #132]	@ (8003818 <plotter_begin+0x4ec>)
 8003792:	f7ff f9c9 	bl	8002b28 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8003796:	23c8      	movs	r3, #200	@ 0xc8
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2315      	movs	r3, #21
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <plotter_begin+0x4f0>)
 80037a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <plotter_begin+0x4f4>)
 80037a2:	4920      	ldr	r1, [pc, #128]	@ (8003824 <plotter_begin+0x4f8>)
 80037a4:	4820      	ldr	r0, [pc, #128]	@ (8003828 <plotter_begin+0x4fc>)
 80037a6:	f7fd ffad 	bl	8001704 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80037aa:	4820      	ldr	r0, [pc, #128]	@ (800382c <plotter_begin+0x500>)
 80037ac:	f004 fc30 	bl	8008010 <HAL_TIM_Base_Start_IT>
}
 80037b0:	bf00      	nop
 80037b2:	3704      	adds	r7, #4
 80037b4:	46bd      	mov	sp, r7
 80037b6:	ecbd 8b02 	vpop	{d8}
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	20000000 	.word	0x20000000
 80037c0:	200004f8 	.word	0x200004f8
 80037c4:	20000050 	.word	0x20000050
 80037c8:	200004ec 	.word	0x200004ec
 80037cc:	200000a0 	.word	0x200000a0
 80037d0:	200004fc 	.word	0x200004fc
 80037d4:	200004f0 	.word	0x200004f0
 80037d8:	457ff000 	.word	0x457ff000
 80037dc:	40533333 	.word	0x40533333
 80037e0:	20000e84 	.word	0x20000e84
 80037e4:	200001e4 	.word	0x200001e4
 80037e8:	2000051c 	.word	0x2000051c
 80037ec:	447a0000 	.word	0x447a0000
 80037f0:	20000760 	.word	0x20000760
 80037f4:	20000754 	.word	0x20000754
 80037f8:	20000778 	.word	0x20000778
 80037fc:	2000076c 	.word	0x2000076c
 8003800:	3d4ccccd 	.word	0x3d4ccccd
 8003804:	20000158 	.word	0x20000158
 8003808:	20000118 	.word	0x20000118
 800380c:	20000b04 	.word	0x20000b04
 8003810:	20000108 	.word	0x20000108
 8003814:	200000c8 	.word	0x200000c8
 8003818:	20000784 	.word	0x20000784
 800381c:	200013ac 	.word	0x200013ac
 8003820:	20001a38 	.word	0x20001a38
 8003824:	20001b04 	.word	0x20001b04
 8003828:	20000ed4 	.word	0x20000ed4
 800382c:	2000163c 	.word	0x2000163c

08003830 <update_sensors>:

void update_sensors() {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8003834:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003838:	2106      	movs	r1, #6
 800383a:	483f      	ldr	r0, [pc, #252]	@ (8003938 <update_sensors+0x108>)
 800383c:	f7fd fb78 	bl	8000f30 <ADC_DMA_GetJoystick>
 8003840:	eef0 7a40 	vmov.f32	s15, s0
 8003844:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <update_sensors+0x10c>)
 8003846:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 800384a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800384e:	2107      	movs	r1, #7
 8003850:	4839      	ldr	r0, [pc, #228]	@ (8003938 <update_sensors+0x108>)
 8003852:	f7fd fb6d 	bl	8000f30 <ADC_DMA_GetJoystick>
 8003856:	eef0 7a40 	vmov.f32	s15, s0
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <update_sensors+0x110>)
 800385c:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8003860:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003864:	4837      	ldr	r0, [pc, #220]	@ (8003944 <update_sensors+0x114>)
 8003866:	f003 fa87 	bl	8006d78 <HAL_GPIO_ReadPin>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <update_sensors+0x118>)
 800387a:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	4833      	ldr	r0, [pc, #204]	@ (800394c <update_sensors+0x11c>)
 8003880:	f003 fa7a 	bl	8006d78 <HAL_GPIO_ReadPin>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <update_sensors+0x120>)
 8003894:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8003896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800389a:	482a      	ldr	r0, [pc, #168]	@ (8003944 <update_sensors+0x114>)
 800389c:	f003 fa6c 	bl	8006d78 <HAL_GPIO_ReadPin>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <update_sensors+0x124>)
 80038b0:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 80038b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038b6:	4823      	ldr	r0, [pc, #140]	@ (8003944 <update_sensors+0x114>)
 80038b8:	f003 fa5e 	bl	8006d78 <HAL_GPIO_ReadPin>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <update_sensors+0x128>)
 80038cc:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80038ce:	2120      	movs	r1, #32
 80038d0:	481e      	ldr	r0, [pc, #120]	@ (800394c <update_sensors+0x11c>)
 80038d2:	f003 fa51 	bl	8006d78 <HAL_GPIO_ReadPin>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <update_sensors+0x12c>)
 80038dc:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 80038de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e6:	f003 fa47 	bl	8006d78 <HAL_GPIO_ReadPin>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <update_sensors+0x130>)
 80038f0:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 80038f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038f6:	4815      	ldr	r0, [pc, #84]	@ (800394c <update_sensors+0x11c>)
 80038f8:	f003 fa3e 	bl	8006d78 <HAL_GPIO_ReadPin>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <update_sensors+0x134>)
 8003902:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8003904:	2102      	movs	r1, #2
 8003906:	4811      	ldr	r0, [pc, #68]	@ (800394c <update_sensors+0x11c>)
 8003908:	f003 fa36 	bl	8006d78 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <update_sensors+0x138>)
 8003912:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8003914:	2104      	movs	r1, #4
 8003916:	480d      	ldr	r0, [pc, #52]	@ (800394c <update_sensors+0x11c>)
 8003918:	f003 fa2e 	bl	8006d78 <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	4b12      	ldr	r3, [pc, #72]	@ (800396c <update_sensors+0x13c>)
 8003922:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8003924:	2110      	movs	r1, #16
 8003926:	4809      	ldr	r0, [pc, #36]	@ (800394c <update_sensors+0x11c>)
 8003928:	f003 fa26 	bl	8006d78 <HAL_GPIO_ReadPin>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <update_sensors+0x140>)
 8003932:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000051c 	.word	0x2000051c
 800393c:	2000153c 	.word	0x2000153c
 8003940:	20001540 	.word	0x20001540
 8003944:	48000800 	.word	0x48000800
 8003948:	20001544 	.word	0x20001544
 800394c:	48000400 	.word	0x48000400
 8003950:	20001548 	.word	0x20001548
 8003954:	2000154c 	.word	0x2000154c
 8003958:	20001550 	.word	0x20001550
 800395c:	20001554 	.word	0x20001554
 8003960:	2000155c 	.word	0x2000155c
 8003964:	20001560 	.word	0x20001560
 8003968:	20001564 	.word	0x20001564
 800396c:	20001568 	.word	0x20001568
 8003970:	20001558 	.word	0x20001558

08003974 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8003978:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 800397c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800398c <pen_up+0x18>
 8003980:	4803      	ldr	r0, [pc, #12]	@ (8003990 <pen_up+0x1c>)
 8003982:	f7fd ff49 	bl	8001818 <PWM_write_duty>
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	42480000 	.word	0x42480000
 8003990:	20000504 	.word	0x20000504

08003994 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ac:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039b4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <SIGNAL_init+0xb4>)
 80039da:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d828      	bhi.n	8003a3c <SIGNAL_init+0xa8>
 80039ea:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <SIGNAL_init+0x5c>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a3b 	.word	0x08003a3b
 80039f4:	08003a01 	.word	0x08003a01
 80039f8:	08003a1f 	.word	0x08003a1f
 80039fc:	08003a29 	.word	0x08003a29
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a0c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	@ (8003a4c <SIGNAL_init+0xb8>)
 8003a12:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a1a:	621a      	str	r2, [r3, #32]
            break;
 8003a1c:	e00e      	b.n	8003a3c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003a24:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8003a26:	e009      	b.n	8003a3c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003a38:	e000      	b.n	8003a3c <SIGNAL_init+0xa8>
            break;
 8003a3a:	bf00      	nop
    }
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	bf800000 	.word	0xbf800000
 8003a4c:	41200000 	.word	0x41200000

08003a50 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	61f8      	str	r0, [r7, #28]
 8003a58:	ed87 0a06 	vstr	s0, [r7, #24]
 8003a5c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003a60:	ed87 1a04 	vstr	s2, [r7, #16]
 8003a64:	edc7 1a03 	vstr	s3, [r7, #12]
 8003a68:	ed87 2a02 	vstr	s4, [r7, #8]
 8003a6c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a9a:	bf00      	nop
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003aa6:	b480      	push	{r7}
 8003aa8:	b089      	sub	sp, #36	@ 0x24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	61f8      	str	r0, [r7, #28]
 8003aae:	ed87 0a06 	vstr	s0, [r7, #24]
 8003ab2:	edc7 0a05 	vstr	s1, [r7, #20]
 8003ab6:	ed87 1a04 	vstr	s2, [r7, #16]
 8003aba:	edc7 1a03 	vstr	s3, [r7, #12]
 8003abe:	ed87 2a02 	vstr	s4, [r7, #8]
 8003ac2:	edc7 2a01 	vstr	s5, [r7, #4]
 8003ac6:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b12:	4a0e      	ldr	r2, [pc, #56]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_MspInit+0x44>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b3e:	f003 fa07 	bl	8006f50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <NMI_Handler+0x4>

08003b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <HardFault_Handler+0x4>

08003b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <MemManage_Handler+0x4>

08003b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <BusFault_Handler+0x4>

08003b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <UsageFault_Handler+0x4>

08003b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba6:	f000 fe8d 	bl	80048c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <DMA1_Channel1_IRQHandler+0x10>)
 8003bb6:	f002 fe0e 	bl	80067d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000250 	.word	0x20000250

08003bc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bc8:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <DMA1_Channel2_IRQHandler+0x10>)
 8003bca:	f002 fe04 	bl	80067d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20001bd0 	.word	0x20001bd0

08003bd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003bdc:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <DMA1_Channel3_IRQHandler+0x10>)
 8003bde:	f002 fdfa 	bl	80067d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20001c30 	.word	0x20001c30

08003bec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf0:	4803      	ldr	r0, [pc, #12]	@ (8003c00 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003bf2:	f004 fe33 	bl	800885c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003bf6:	4803      	ldr	r0, [pc, #12]	@ (8003c04 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003bf8:	f004 fe30 	bl	800885c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20001570 	.word	0x20001570
 8003c04:	20001a38 	.word	0x20001a38

08003c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <TIM2_IRQHandler+0x10>)
 8003c0e:	f004 fe25 	bl	800885c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2000163c 	.word	0x2000163c

08003c1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c20:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <TIM3_IRQHandler+0x10>)
 8003c22:	f004 fe1b 	bl	800885c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20001708 	.word	0x20001708

08003c30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <TIM4_IRQHandler+0x10>)
 8003c36:	f004 fe11 	bl	800885c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200017d4 	.word	0x200017d4

08003c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c48:	4802      	ldr	r0, [pc, #8]	@ (8003c54 <USART2_IRQHandler+0x10>)
 8003c4a:	f006 fb5b 	bl	800a304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20001b04 	.word	0x20001b04

08003c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003c60:	f003 f8ba 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c70:	4a14      	ldr	r2, [pc, #80]	@ (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c84:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	@ (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c98:	f008 fdb8 	bl	800c80c <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cae:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20020000 	.word	0x20020000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	2000156c 	.word	0x2000156c
 8003cd0:	20001de0 	.word	0x20001de0

08003cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b098      	sub	sp, #96	@ 0x60
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	2234      	movs	r2, #52	@ 0x34
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f008 fd59 	bl	800c7dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e1c <MX_TIM1_Init+0x124>)
 8003d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d30:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d36:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d3c:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d44:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d56:	4830      	ldr	r0, [pc, #192]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d58:	f004 f9d2 	bl	8008100 <HAL_TIM_PWM_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003d62:	f7ff fadd 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d76:	4619      	mov	r1, r3
 8003d78:	4827      	ldr	r0, [pc, #156]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d7a:	f005 ffe3 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003d84:	f7ff facc 	bl	8003320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d88:	2360      	movs	r3, #96	@ 0x60
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d94:	2300      	movs	r3, #0
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003da8:	220c      	movs	r2, #12
 8003daa:	4619      	mov	r1, r3
 8003dac:	481a      	ldr	r0, [pc, #104]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003dae:	f004 fecf 	bl	8008b50 <HAL_TIM_PWM_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003db8:	f7ff fab2 	bl	8003320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003de2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dec:	2300      	movs	r3, #0
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4807      	ldr	r0, [pc, #28]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003dfa:	f006 f839 	bl	8009e70 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003e04:	f7ff fa8c 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e08:	4803      	ldr	r0, [pc, #12]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003e0a:	f000 fb5b 	bl	80044c4 <HAL_TIM_MspPostInit>

}
 8003e0e:	bf00      	nop
 8003e10:	3760      	adds	r7, #96	@ 0x60
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20001570 	.word	0x20001570
 8003e1c:	40012c00 	.word	0x40012c00

08003e20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e48:	22a9      	movs	r2, #169	@ 0xa9
 8003e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003e52:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e60:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e66:	4814      	ldr	r0, [pc, #80]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e68:	f003 fffe 	bl	8007e68 <HAL_TIM_Base_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e72:	f7ff fa55 	bl	8003320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e7c:	f107 0310 	add.w	r3, r7, #16
 8003e80:	4619      	mov	r1, r3
 8003e82:	480d      	ldr	r0, [pc, #52]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e84:	f004 ff78 	bl	8008d78 <HAL_TIM_ConfigClockSource>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e8e:	f7ff fa47 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4806      	ldr	r0, [pc, #24]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003ea0:	f005 ff50 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003eaa:	f7ff fa39 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003eae:	bf00      	nop
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000163c 	.word	0x2000163c

08003ebc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	@ 0x30
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	2224      	movs	r2, #36	@ 0x24
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f008 fc86 	bl	800c7dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003eda:	4b21      	ldr	r3, [pc, #132]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <MX_TIM3_Init+0xa8>)
 8003ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ef2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efa:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f00:	2303      	movs	r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f14:	2300      	movs	r3, #0
 8003f16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	4619      	mov	r1, r3
 8003f2a:	480d      	ldr	r0, [pc, #52]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003f2c:	f004 fb54 	bl	80085d8 <HAL_TIM_Encoder_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003f36:	f7ff f9f3 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f42:	463b      	mov	r3, r7
 8003f44:	4619      	mov	r1, r3
 8003f46:	4806      	ldr	r0, [pc, #24]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003f48:	f005 fefc 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003f52:	f7ff f9e5 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	3730      	adds	r7, #48	@ 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20001708 	.word	0x20001708
 8003f64:	40000400 	.word	0x40000400

08003f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f008 fc30 	bl	800c7dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f86:	4b21      	ldr	r3, [pc, #132]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f88:	4a21      	ldr	r2, [pc, #132]	@ (8004010 <MX_TIM4_Init+0xa8>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa6:	4b19      	ldr	r3, [pc, #100]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fac:	2303      	movs	r3, #3
 8003fae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	480d      	ldr	r0, [pc, #52]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fd8:	f004 fafe 	bl	80085d8 <HAL_TIM_Encoder_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003fe2:	f7ff f99d 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4806      	ldr	r0, [pc, #24]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003ff4:	f005 fea6 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003ffe:	f7ff f98f 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004002:	bf00      	nop
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200017d4 	.word	0x200017d4
 8004010:	40000800 	.word	0x40000800

08004014 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800401a:	f107 0310 	add.w	r3, r7, #16
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004032:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004034:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <MX_TIM5_Init+0x98>)
 8004036:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8004038:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <MX_TIM5_Init+0x94>)
 800403a:	22a9      	movs	r2, #169	@ 0xa9
 800403c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004044:	4b18      	ldr	r3, [pc, #96]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004046:	f04f 32ff 	mov.w	r2, #4294967295
 800404a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <MX_TIM5_Init+0x94>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	4b15      	ldr	r3, [pc, #84]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004058:	4813      	ldr	r0, [pc, #76]	@ (80040a8 <MX_TIM5_Init+0x94>)
 800405a:	f003 ff05 	bl	8007e68 <HAL_TIM_Base_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004064:	f7ff f95c 	bl	8003320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800406c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800406e:	f107 0310 	add.w	r3, r7, #16
 8004072:	4619      	mov	r1, r3
 8004074:	480c      	ldr	r0, [pc, #48]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004076:	f004 fe7f 	bl	8008d78 <HAL_TIM_ConfigClockSource>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004080:	f7ff f94e 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4805      	ldr	r0, [pc, #20]	@ (80040a8 <MX_TIM5_Init+0x94>)
 8004092:	f005 fe57 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800409c:	f7ff f940 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80040a0:	bf00      	nop
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200018a0 	.word	0x200018a0
 80040ac:	40000c00 	.word	0x40000c00

080040b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09c      	sub	sp, #112	@ 0x70
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
 80040e0:	615a      	str	r2, [r3, #20]
 80040e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	2234      	movs	r2, #52	@ 0x34
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f008 fb76 	bl	800c7dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80040f0:	4b51      	ldr	r3, [pc, #324]	@ (8004238 <MX_TIM8_Init+0x188>)
 80040f2:	4a52      	ldr	r2, [pc, #328]	@ (800423c <MX_TIM8_Init+0x18c>)
 80040f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80040f6:	4b50      	ldr	r3, [pc, #320]	@ (8004238 <MX_TIM8_Init+0x188>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004238 <MX_TIM8_Init+0x188>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004102:	4b4d      	ldr	r3, [pc, #308]	@ (8004238 <MX_TIM8_Init+0x188>)
 8004104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004108:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410a:	4b4b      	ldr	r3, [pc, #300]	@ (8004238 <MX_TIM8_Init+0x188>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004110:	4b49      	ldr	r3, [pc, #292]	@ (8004238 <MX_TIM8_Init+0x188>)
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004116:	4b48      	ldr	r3, [pc, #288]	@ (8004238 <MX_TIM8_Init+0x188>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800411c:	4846      	ldr	r0, [pc, #280]	@ (8004238 <MX_TIM8_Init+0x188>)
 800411e:	f003 fea3 	bl	8007e68 <HAL_TIM_Base_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8004128:	f7ff f8fa 	bl	8003320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004130:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004132:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004136:	4619      	mov	r1, r3
 8004138:	483f      	ldr	r0, [pc, #252]	@ (8004238 <MX_TIM8_Init+0x188>)
 800413a:	f004 fe1d 	bl	8008d78 <HAL_TIM_ConfigClockSource>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8004144:	f7ff f8ec 	bl	8003320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004148:	483b      	ldr	r0, [pc, #236]	@ (8004238 <MX_TIM8_Init+0x188>)
 800414a:	f003 ffd9 	bl	8008100 <HAL_TIM_PWM_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8004154:	f7ff f8e4 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004158:	2300      	movs	r3, #0
 800415a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004160:	2300      	movs	r3, #0
 8004162:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004164:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004168:	4619      	mov	r1, r3
 800416a:	4833      	ldr	r0, [pc, #204]	@ (8004238 <MX_TIM8_Init+0x188>)
 800416c:	f005 fdea 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8004176:	f7ff f8d3 	bl	8003320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800417a:	2360      	movs	r3, #96	@ 0x60
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004182:	2300      	movs	r3, #0
 8004184:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004186:	2300      	movs	r3, #0
 8004188:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800418e:	2300      	movs	r3, #0
 8004190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800419a:	2200      	movs	r2, #0
 800419c:	4619      	mov	r1, r3
 800419e:	4826      	ldr	r0, [pc, #152]	@ (8004238 <MX_TIM8_Init+0x188>)
 80041a0:	f004 fcd6 	bl	8008b50 <HAL_TIM_PWM_ConfigChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80041aa:	f7ff f8b9 	bl	8003320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80041b2:	2204      	movs	r2, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4820      	ldr	r0, [pc, #128]	@ (8004238 <MX_TIM8_Init+0x188>)
 80041b8:	f004 fcca 	bl	8008b50 <HAL_TIM_PWM_ConfigChannel>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80041c2:	f7ff f8ad 	bl	8003320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80041ca:	2208      	movs	r2, #8
 80041cc:	4619      	mov	r1, r3
 80041ce:	481a      	ldr	r0, [pc, #104]	@ (8004238 <MX_TIM8_Init+0x188>)
 80041d0:	f004 fcbe 	bl	8008b50 <HAL_TIM_PWM_ConfigChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80041da:	f7ff f8a1 	bl	8003320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800420e:	2300      	movs	r3, #0
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4807      	ldr	r0, [pc, #28]	@ (8004238 <MX_TIM8_Init+0x188>)
 800421c:	f005 fe28 	bl	8009e70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8004226:	f7ff f87b 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800422a:	4803      	ldr	r0, [pc, #12]	@ (8004238 <MX_TIM8_Init+0x188>)
 800422c:	f000 f94a 	bl	80044c4 <HAL_TIM_MspPostInit>

}
 8004230:	bf00      	nop
 8004232:	3770      	adds	r7, #112	@ 0x70
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	2000196c 	.word	0x2000196c
 800423c:	40013400 	.word	0x40013400

08004240 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004246:	4a15      	ldr	r2, [pc, #84]	@ (800429c <MX_TIM16_Init+0x5c>)
 8004248:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800424a:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <MX_TIM16_Init+0x58>)
 800424c:	22a9      	movs	r2, #169	@ 0xa9
 800424e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004258:	f240 4279 	movw	r2, #1145	@ 0x479
 800425c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425e:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004266:	2200      	movs	r2, #0
 8004268:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <MX_TIM16_Init+0x58>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004270:	4809      	ldr	r0, [pc, #36]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004272:	f003 fdf9 	bl	8007e68 <HAL_TIM_Base_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800427c:	f7ff f850 	bl	8003320 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004280:	2108      	movs	r1, #8
 8004282:	4805      	ldr	r0, [pc, #20]	@ (8004298 <MX_TIM16_Init+0x58>)
 8004284:	f004 f8b2 	bl	80083ec <HAL_TIM_OnePulse_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800428e:	f7ff f847 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20001a38 	.word	0x20001a38
 800429c:	40014400 	.word	0x40014400

080042a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <HAL_TIM_PWM_MspInit+0x44>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d113      	bne.n	80042da <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <HAL_TIM_PWM_MspInit+0x48>)
 80042b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b6:	4a0c      	ldr	r2, [pc, #48]	@ (80042e8 <HAL_TIM_PWM_MspInit+0x48>)
 80042b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80042be:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_TIM_PWM_MspInit+0x48>)
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	2019      	movs	r0, #25
 80042d0:	f002 f869 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80042d4:	2019      	movs	r0, #25
 80042d6:	f002 f880 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40021000 	.word	0x40021000

080042ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d114      	bne.n	8004328 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fe:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004302:	4a2a      	ldr	r2, [pc, #168]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6593      	str	r3, [r2, #88]	@ 0x58
 800430a:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004316:	2200      	movs	r2, #0
 8004318:	2100      	movs	r1, #0
 800431a:	201c      	movs	r0, #28
 800431c:	f002 f843 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004320:	201c      	movs	r0, #28
 8004322:	f002 f85a 	bl	80063da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004326:	e03c      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <HAL_TIM_Base_MspInit+0xc4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004332:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	6593      	str	r3, [r2, #88]	@ 0x58
 800433e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
}
 800434a:	e02a      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_TIM_Base_MspInit+0xc8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435a:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 800435c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004360:	6613      	str	r3, [r2, #96]	@ 0x60
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	e018      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a10      	ldr	r2, [pc, #64]	@ (80043b8 <HAL_TIM_Base_MspInit+0xcc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d113      	bne.n	80043a2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800437a:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	4a0b      	ldr	r2, [pc, #44]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004384:	6613      	str	r3, [r2, #96]	@ 0x60
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_TIM_Base_MspInit+0xc0>)
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2100      	movs	r1, #0
 8004396:	2019      	movs	r0, #25
 8004398:	f002 f805 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800439c:	2019      	movs	r0, #25
 800439e:	f002 f81c 	bl	80063da <HAL_NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40013400 	.word	0x40013400
 80043b8:	40014400 	.word	0x40014400

080043bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	@ 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 031c 	add.w	r3, r7, #28
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a37      	ldr	r2, [pc, #220]	@ (80044b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d131      	bne.n	8004442 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043de:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	4a36      	ldr	r2, [pc, #216]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ea:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f6:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	4a30      	ldr	r2, [pc, #192]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004402:	4b2e      	ldr	r3, [pc, #184]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800440e:	23c0      	movs	r3, #192	@ 0xc0
 8004410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004412:	2302      	movs	r3, #2
 8004414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800441e:	2302      	movs	r3, #2
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800442c:	f002 fb22 	bl	8006a74 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004430:	2200      	movs	r2, #0
 8004432:	2100      	movs	r1, #0
 8004434:	201d      	movs	r0, #29
 8004436:	f001 ffb6 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800443a:	201d      	movs	r0, #29
 800443c:	f001 ffcd 	bl	80063da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004440:	e036      	b.n	80044b0 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_TIM_Encoder_MspInit+0x104>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d131      	bne.n	80044b0 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	6593      	str	r3, [r2, #88]	@ 0x58
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004464:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	4a14      	ldr	r2, [pc, #80]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_TIM_Encoder_MspInit+0x100>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800447c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800448e:	230a      	movs	r3, #10
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800449c:	f002 faea 	bl	8006a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80044a0:	2200      	movs	r2, #0
 80044a2:	2100      	movs	r1, #0
 80044a4:	201e      	movs	r0, #30
 80044a6:	f001 ff7e 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044aa:	201e      	movs	r0, #30
 80044ac:	f001 ff95 	bl	80063da <HAL_NVIC_EnableIRQ>
}
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	@ 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40000800 	.word	0x40000800

080044c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	@ 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a30      	ldr	r2, [pc, #192]	@ (80045a4 <HAL_TIM_MspPostInit+0xe0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d11c      	bne.n	8004520 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e6:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 80044e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ea:	4a2f      	ldr	r2, [pc, #188]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044f2:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 80044f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044fe:	2308      	movs	r3, #8
 8004500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004502:	2302      	movs	r3, #2
 8004504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800450e:	2302      	movs	r3, #2
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4619      	mov	r1, r3
 8004518:	4824      	ldr	r0, [pc, #144]	@ (80045ac <HAL_TIM_MspPostInit+0xe8>)
 800451a:	f002 faab 	bl	8006a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800451e:	e03d      	b.n	800459c <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <HAL_TIM_MspPostInit+0xec>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d138      	bne.n	800459c <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800452a:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452e:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800454e:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_TIM_MspPostInit+0xe4>)
 8004550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800455a:	23c0      	movs	r3, #192	@ 0xc0
 800455c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800456a:	2304      	movs	r3, #4
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	4619      	mov	r1, r3
 8004574:	480d      	ldr	r0, [pc, #52]	@ (80045ac <HAL_TIM_MspPostInit+0xe8>)
 8004576:	f002 fa7d 	bl	8006a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800457a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800458c:	230a      	movs	r3, #10
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	4807      	ldr	r0, [pc, #28]	@ (80045b4 <HAL_TIM_MspPostInit+0xf0>)
 8004598:	f002 fa6c 	bl	8006a74 <HAL_GPIO_Init>
}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	@ 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40021000 	.word	0x40021000
 80045ac:	48000800 	.word	0x48000800
 80045b0:	40013400 	.word	0x40013400
 80045b4:	48000400 	.word	0x48000400

080045b8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045bc:	4b23      	ldr	r3, [pc, #140]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045be:	4a24      	ldr	r2, [pc, #144]	@ (8004650 <MX_USART2_UART_Init+0x98>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80045c2:	4b22      	ldr	r3, [pc, #136]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045c4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80045c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80045d0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80045d8:	4b1c      	ldr	r3, [pc, #112]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045e2:	220c      	movs	r2, #12
 80045e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b19      	ldr	r3, [pc, #100]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b17      	ldr	r3, [pc, #92]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045f2:	4b16      	ldr	r3, [pc, #88]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045f8:	4b14      	ldr	r3, [pc, #80]	@ (800464c <MX_USART2_UART_Init+0x94>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <MX_USART2_UART_Init+0x94>)
 8004600:	2200      	movs	r2, #0
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004604:	4811      	ldr	r0, [pc, #68]	@ (800464c <MX_USART2_UART_Init+0x94>)
 8004606:	f005 fd17 	bl	800a038 <HAL_UART_Init>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004610:	f7fe fe86 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004614:	2100      	movs	r1, #0
 8004616:	480d      	ldr	r0, [pc, #52]	@ (800464c <MX_USART2_UART_Init+0x94>)
 8004618:	f007 fa6a 	bl	800baf0 <HAL_UARTEx_SetTxFifoThreshold>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004622:	f7fe fe7d 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004626:	2100      	movs	r1, #0
 8004628:	4808      	ldr	r0, [pc, #32]	@ (800464c <MX_USART2_UART_Init+0x94>)
 800462a:	f007 fa9f 	bl	800bb6c <HAL_UARTEx_SetRxFifoThreshold>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004634:	f7fe fe74 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004638:	4804      	ldr	r0, [pc, #16]	@ (800464c <MX_USART2_UART_Init+0x94>)
 800463a:	f007 fa20 	bl	800ba7e <HAL_UARTEx_DisableFifoMode>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004644:	f7fe fe6c 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20001b04 	.word	0x20001b04
 8004650:	40004400 	.word	0x40004400

08004654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b09e      	sub	sp, #120	@ 0x78
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	2254      	movs	r2, #84	@ 0x54
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f008 f8b1 	bl	800c7dc <memset>
  if(uartHandle->Instance==USART2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a4d      	ldr	r2, [pc, #308]	@ (80047b4 <HAL_UART_MspInit+0x160>)
 8004680:	4293      	cmp	r3, r2
 8004682:	f040 8092 	bne.w	80047aa <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004686:	2302      	movs	r3, #2
 8004688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4618      	mov	r0, r3
 8004694:	f003 f99a 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800469e:	f7fe fe3f 	bl	8003320 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046a2:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	4a44      	ldr	r2, [pc, #272]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ae:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ba:	4b3f      	ldr	r3, [pc, #252]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	4a3e      	ldr	r2, [pc, #248]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c6:	4b3c      	ldr	r3, [pc, #240]	@ (80047b8 <HAL_UART_MspInit+0x164>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046d2:	230c      	movs	r3, #12
 80046d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046de:	2300      	movs	r3, #0
 80046e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046e2:	2307      	movs	r3, #7
 80046e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80046ea:	4619      	mov	r1, r3
 80046ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046f0:	f002 f9c0 	bl	8006a74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80046f4:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <HAL_UART_MspInit+0x168>)
 80046f6:	4a32      	ldr	r2, [pc, #200]	@ (80047c0 <HAL_UART_MspInit+0x16c>)
 80046f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80046fa:	4b30      	ldr	r3, [pc, #192]	@ (80047bc <HAL_UART_MspInit+0x168>)
 80046fc:	221a      	movs	r2, #26
 80046fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004700:	4b2e      	ldr	r3, [pc, #184]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004706:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <HAL_UART_MspInit+0x168>)
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004712:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <HAL_UART_MspInit+0x168>)
 800471a:	2200      	movs	r2, #0
 800471c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800471e:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004720:	2200      	movs	r2, #0
 8004722:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004724:	4b25      	ldr	r3, [pc, #148]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004726:	2200      	movs	r2, #0
 8004728:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800472a:	4824      	ldr	r0, [pc, #144]	@ (80047bc <HAL_UART_MspInit+0x168>)
 800472c:	f001 fe70 	bl	8006410 <HAL_DMA_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004736:	f7fe fdf3 	bl	8003320 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1f      	ldr	r2, [pc, #124]	@ (80047bc <HAL_UART_MspInit+0x168>)
 800473e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004742:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <HAL_UART_MspInit+0x168>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004748:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 800474a:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_UART_MspInit+0x174>)
 800474c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800474e:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004750:	221b      	movs	r2, #27
 8004752:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004756:	2210      	movs	r2, #16
 8004758:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800475a:	4b1a      	ldr	r3, [pc, #104]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 800475c:	2200      	movs	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004760:	4b18      	ldr	r3, [pc, #96]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004762:	2280      	movs	r2, #128	@ 0x80
 8004764:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004766:	4b17      	ldr	r3, [pc, #92]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004768:	2200      	movs	r2, #0
 800476a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004772:	4b14      	ldr	r3, [pc, #80]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004774:	2200      	movs	r2, #0
 8004776:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004778:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 800477a:	2200      	movs	r2, #0
 800477c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800477e:	4811      	ldr	r0, [pc, #68]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004780:	f001 fe46 	bl	8006410 <HAL_DMA_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800478a:	f7fe fdc9 	bl	8003320 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0c      	ldr	r2, [pc, #48]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004792:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004794:	4a0b      	ldr	r2, [pc, #44]	@ (80047c4 <HAL_UART_MspInit+0x170>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	2026      	movs	r0, #38	@ 0x26
 80047a0:	f001 fe01 	bl	80063a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047a4:	2026      	movs	r0, #38	@ 0x26
 80047a6:	f001 fe18 	bl	80063da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80047aa:	bf00      	nop
 80047ac:	3778      	adds	r7, #120	@ 0x78
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40021000 	.word	0x40021000
 80047bc:	20001bd0 	.word	0x20001bd0
 80047c0:	4002001c 	.word	0x4002001c
 80047c4:	20001c30 	.word	0x20001c30
 80047c8:	40020030 	.word	0x40020030

080047cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047cc:	480d      	ldr	r0, [pc, #52]	@ (8004804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047d0:	f7ff fa80 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047d4:	480c      	ldr	r0, [pc, #48]	@ (8004808 <LoopForever+0x6>)
  ldr r1, =_edata
 80047d6:	490d      	ldr	r1, [pc, #52]	@ (800480c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <LoopForever+0xe>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80047dc:	e002      	b.n	80047e4 <LoopCopyDataInit>

080047de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e2:	3304      	adds	r3, #4

080047e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047e8:	d3f9      	bcc.n	80047de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004818 <LoopForever+0x16>)
  movs r3, #0
 80047ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f0:	e001      	b.n	80047f6 <LoopFillZerobss>

080047f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f4:	3204      	adds	r2, #4

080047f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047f8:	d3fb      	bcc.n	80047f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047fa:	f008 f80d 	bl	800c818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047fe:	f7fe fb65 	bl	8002ecc <main>

08004802 <LoopForever>:

LoopForever:
    b LoopForever
 8004802:	e7fe      	b.n	8004802 <LoopForever>
  ldr   r0, =_estack
 8004804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800480c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8004810:	0800d818 	.word	0x0800d818
  ldr r2, =_sbss
 8004814:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8004818:	20001ddc 	.word	0x20001ddc

0800481c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800481c:	e7fe      	b.n	800481c <ADC1_2_IRQHandler>

0800481e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004828:	2003      	movs	r0, #3
 800482a:	f001 fdb1 	bl	8006390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800482e:	2000      	movs	r0, #0
 8004830:	f000 f80e 	bl	8004850 <HAL_InitTick>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	71fb      	strb	r3, [r7, #7]
 800483e:	e001      	b.n	8004844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004840:	f7ff f962 	bl	8003b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004844:	79fb      	ldrb	r3, [r7, #7]

}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800485c:	4b16      	ldr	r3, [pc, #88]	@ (80048b8 <HAL_InitTick+0x68>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d022      	beq.n	80048aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004864:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <HAL_InitTick+0x6c>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_InitTick+0x68>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004870:	fbb1 f3f3 	udiv	r3, r1, r3
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fdbc 	bl	80063f6 <HAL_SYSTICK_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d809      	bhi.n	800489e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800488a:	2200      	movs	r2, #0
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	f04f 30ff 	mov.w	r0, #4294967295
 8004892:	f001 fd88 	bl	80063a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <HAL_InitTick+0x70>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e007      	b.n	80048ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e004      	b.n	80048ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e001      	b.n	80048ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000170 	.word	0x20000170
 80048bc:	20000168 	.word	0x20000168
 80048c0:	2000016c 	.word	0x2000016c

080048c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_IncTick+0x1c>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_IncTick+0x20>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a03      	ldr	r2, [pc, #12]	@ (80048e0 <HAL_IncTick+0x1c>)
 80048d4:	6013      	str	r3, [r2, #0]
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20001c90 	.word	0x20001c90
 80048e4:	20000170 	.word	0x20000170

080048e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return uwTick;
 80048ec:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <HAL_GetTick+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20001c90 	.word	0x20001c90

08004900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3360      	adds	r3, #96	@ 0x60
 800497a:	461a      	mov	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <LL_ADC_SetOffset+0x44>)
 800498a:	4013      	ands	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	03fff000 	.word	0x03fff000

080049b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3360      	adds	r3, #96	@ 0x60
 80049be:	461a      	mov	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3360      	adds	r3, #96	@ 0x60
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3360      	adds	r3, #96	@ 0x60
 8004a22:	461a      	mov	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3360      	adds	r3, #96	@ 0x60
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	615a      	str	r2, [r3, #20]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3330      	adds	r3, #48	@ 0x30
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	4413      	add	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	211f      	movs	r1, #31
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	401a      	ands	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	f003 011f 	and.w	r1, r3, #31
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	431a      	orrs	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3314      	adds	r3, #20
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	0e5b      	lsrs	r3, r3, #25
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	4413      	add	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0d1b      	lsrs	r3, r3, #20
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2107      	movs	r1, #7
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	401a      	ands	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	0d1b      	lsrs	r3, r3, #20
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	431a      	orrs	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	43db      	mvns	r3, r3
 8004b92:	401a      	ands	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0318 	and.w	r3, r3, #24
 8004b9a:	4908      	ldr	r1, [pc, #32]	@ (8004bbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b9c:	40d9      	lsrs	r1, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	0007ffff 	.word	0x0007ffff

08004bc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6093      	str	r3, [r2, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c14:	d101      	bne.n	8004c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c64:	d101      	bne.n	8004c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cb4:	f043 0202 	orr.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <LL_ADC_IsEnabled+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_ADC_IsEnabled+0x1a>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d101      	bne.n	8004d06 <LL_ADC_IsDisableOngoing+0x18>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <LL_ADC_IsDisableOngoing+0x1a>
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d101      	bne.n	8004d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d101      	bne.n	8004d7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b089      	sub	sp, #36	@ 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e1a9      	b.n	80050f6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fd fc01 	bl	80025b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff19 	bl	8004c00 <LL_ADC_IsDeepPowerDownEnabled>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff feff 	bl	8004bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff34 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d115      	bne.n	8004e1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff18 	bl	8004c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004df8:	4b9c      	ldr	r3, [pc, #624]	@ (800506c <HAL_ADC_Init+0x2e4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	4a9c      	ldr	r2, [pc, #624]	@ (8005070 <HAL_ADC_Init+0x2e8>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e0c:	e002      	b.n	8004e14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f9      	bne.n	8004e0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff16 	bl	8004c50 <LL_ADC_IsInternalRegulatorEnabled>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2e:	f043 0210 	orr.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff ff76 	bl	8004d3c <LL_ADC_REG_IsConversionOngoing>
 8004e50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8142 	bne.w	80050e4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 813e 	bne.w	80050e4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e70:	f043 0202 	orr.w	r2, r3, #2
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff23 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d141      	bne.n	8004f0c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e90:	d004      	beq.n	8004e9c <HAL_ADC_Init+0x114>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a77      	ldr	r2, [pc, #476]	@ (8005074 <HAL_ADC_Init+0x2ec>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d10f      	bne.n	8004ebc <HAL_ADC_Init+0x134>
 8004e9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ea0:	f7ff ff12 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4873      	ldr	r0, [pc, #460]	@ (8005074 <HAL_ADC_Init+0x2ec>)
 8004ea8:	f7ff ff0e 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4323      	orrs	r3, r4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e012      	b.n	8004ee2 <HAL_ADC_Init+0x15a>
 8004ebc:	486e      	ldr	r0, [pc, #440]	@ (8005078 <HAL_ADC_Init+0x2f0>)
 8004ebe:	f7ff ff03 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	486d      	ldr	r0, [pc, #436]	@ (800507c <HAL_ADC_Init+0x2f4>)
 8004ec6:	f7ff feff 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	431c      	orrs	r4, r3
 8004ece:	486c      	ldr	r0, [pc, #432]	@ (8005080 <HAL_ADC_Init+0x2f8>)
 8004ed0:	f7ff fefa 	bl	8004cc8 <LL_ADC_IsEnabled>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4323      	orrs	r3, r4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d012      	beq.n	8004f0c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eee:	d004      	beq.n	8004efa <HAL_ADC_Init+0x172>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5f      	ldr	r2, [pc, #380]	@ (8005074 <HAL_ADC_Init+0x2ec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_ADC_Init+0x176>
 8004efa:	4a62      	ldr	r2, [pc, #392]	@ (8005084 <HAL_ADC_Init+0x2fc>)
 8004efc:	e000      	b.n	8004f00 <HAL_ADC_Init+0x178>
 8004efe:	4a62      	ldr	r2, [pc, #392]	@ (8005088 <HAL_ADC_Init+0x300>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7ff fcfa 	bl	8004900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7f5b      	ldrb	r3, [r3, #29]
 8004f10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004f1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004f22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d106      	bne.n	8004f48 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	045b      	lsls	r3, r3, #17
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	4b48      	ldr	r3, [pc, #288]	@ (800508c <HAL_ADC_Init+0x304>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fee5 	bl	8004d62 <LL_ADC_INJ_IsConversionOngoing>
 8004f98:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d17f      	bne.n	80050a0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d17c      	bne.n	80050a0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004faa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc2:	f023 0302 	bic.w	r3, r3, #2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	69b9      	ldr	r1, [r7, #24]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ff0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6911      	ldr	r1, [r2, #16]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005006:	e013      	b.n	8005030 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005016:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800502c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005036:	2b01      	cmp	r3, #1
 8005038:	d12a      	bne.n	8005090 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800505c:	430a      	orrs	r2, r1
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	611a      	str	r2, [r3, #16]
 800506a:	e019      	b.n	80050a0 <HAL_ADC_Init+0x318>
 800506c:	20000168 	.word	0x20000168
 8005070:	053e2d63 	.word	0x053e2d63
 8005074:	50000100 	.word	0x50000100
 8005078:	50000400 	.word	0x50000400
 800507c:	50000500 	.word	0x50000500
 8005080:	50000600 	.word	0x50000600
 8005084:	50000300 	.word	0x50000300
 8005088:	50000700 	.word	0x50000700
 800508c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f023 010f 	bic.w	r1, r3, #15
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
 80050c0:	e007      	b.n	80050d2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 020f 	bic.w	r2, r2, #15
 80050d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050e2:	e007      	b.n	80050f4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e8:	f043 0210 	orr.w	r2, r3, #16
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3724      	adds	r7, #36	@ 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop

08005100 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005114:	d004      	beq.n	8005120 <HAL_ADC_Start_DMA+0x20>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a5a      	ldr	r2, [pc, #360]	@ (8005284 <HAL_ADC_Start_DMA+0x184>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_ADC_Start_DMA+0x24>
 8005120:	4b59      	ldr	r3, [pc, #356]	@ (8005288 <HAL_ADC_Start_DMA+0x188>)
 8005122:	e000      	b.n	8005126 <HAL_ADC_Start_DMA+0x26>
 8005124:	4b59      	ldr	r3, [pc, #356]	@ (800528c <HAL_ADC_Start_DMA+0x18c>)
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fd4a 	bl	8004bc0 <LL_ADC_GetMultimode>
 800512c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fe02 	bl	8004d3c <LL_ADC_REG_IsConversionOngoing>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 809b 	bne.w	8005276 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_ADC_Start_DMA+0x4e>
 800514a:	2302      	movs	r3, #2
 800514c:	e096      	b.n	800527c <HAL_ADC_Start_DMA+0x17c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4d      	ldr	r2, [pc, #308]	@ (8005290 <HAL_ADC_Start_DMA+0x190>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d008      	beq.n	8005172 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d002      	beq.n	8005172 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b09      	cmp	r3, #9
 8005170:	d17a      	bne.n	8005268 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fcf6 	bl	8005b64 <ADC_Enable>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d16d      	bne.n	800525e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005186:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3a      	ldr	r2, [pc, #232]	@ (8005284 <HAL_ADC_Start_DMA+0x184>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_ADC_Start_DMA+0xb4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005294 <HAL_ADC_Start_DMA+0x194>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d002      	beq.n	80051b0 <HAL_ADC_Start_DMA+0xb0>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	e003      	b.n	80051b8 <HAL_ADC_Start_DMA+0xb8>
 80051b0:	4b39      	ldr	r3, [pc, #228]	@ (8005298 <HAL_ADC_Start_DMA+0x198>)
 80051b2:	e001      	b.n	80051b8 <HAL_ADC_Start_DMA+0xb8>
 80051b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d002      	beq.n	80051c6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d105      	bne.n	80051d2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e2:	f023 0206 	bic.w	r2, r3, #6
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80051ea:	e002      	b.n	80051f2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	4a29      	ldr	r2, [pc, #164]	@ (800529c <HAL_ADC_Start_DMA+0x19c>)
 80051f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	4a28      	ldr	r2, [pc, #160]	@ (80052a0 <HAL_ADC_Start_DMA+0x1a0>)
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	4a27      	ldr	r2, [pc, #156]	@ (80052a4 <HAL_ADC_Start_DMA+0x1a4>)
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	221c      	movs	r2, #28
 8005210:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0210 	orr.w	r2, r2, #16
 8005228:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3340      	adds	r3, #64	@ 0x40
 8005244:	4619      	mov	r1, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f001 f989 	bl	8006560 <HAL_DMA_Start_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fd5c 	bl	8004d14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800525c:	e00d      	b.n	800527a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005266:	e008      	b.n	800527a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005274:	e001      	b.n	800527a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005276:	2302      	movs	r3, #2
 8005278:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	50000100 	.word	0x50000100
 8005288:	50000300 	.word	0x50000300
 800528c:	50000700 	.word	0x50000700
 8005290:	50000600 	.word	0x50000600
 8005294:	50000500 	.word	0x50000500
 8005298:	50000400 	.word	0x50000400
 800529c:	08005d4f 	.word	0x08005d4f
 80052a0:	08005e27 	.word	0x08005e27
 80052a4:	08005e43 	.word	0x08005e43

080052a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b0b6      	sub	sp, #216	@ 0xd8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x24>
 8005302:	2302      	movs	r3, #2
 8005304:	f000 bc13 	b.w	8005b2e <HAL_ADC_ConfigChannel+0x84a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fd11 	bl	8004d3c <LL_ADC_REG_IsConversionOngoing>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 83f3 	bne.w	8005b08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	f7ff fbcb 	bl	8004aca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fcff 	bl	8004d3c <LL_ADC_REG_IsConversionOngoing>
 800533e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fd0b 	bl	8004d62 <LL_ADC_INJ_IsConversionOngoing>
 800534c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 81d9 	bne.w	800570c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800535a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 81d4 	bne.w	800570c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800536c:	d10f      	bne.n	800538e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	4619      	mov	r1, r3
 800537a:	f7ff fbd2 	bl	8004b22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fb79 	bl	8004a7e <LL_ADC_SetSamplingTimeCommonConfig>
 800538c:	e00e      	b.n	80053ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	461a      	mov	r2, r3
 800539c:	f7ff fbc1 	bl	8004b22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fb69 	bl	8004a7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d022      	beq.n	8005414 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6919      	ldr	r1, [r3, #16]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053de:	f7ff fac3 	bl	8004968 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6919      	ldr	r1, [r3, #16]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7ff fb0f 	bl	8004a12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_ADC_ConfigChannel+0x126>
 8005404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005408:	e000      	b.n	800540c <HAL_ADC_ConfigChannel+0x128>
 800540a:	2300      	movs	r3, #0
 800540c:	461a      	mov	r2, r3
 800540e:	f7ff fb1b 	bl	8004a48 <LL_ADC_SetOffsetSaturation>
 8005412:	e17b      	b.n	800570c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fac8 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005420:	4603      	mov	r3, r0
 8005422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x15c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fabd 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005436:	4603      	mov	r3, r0
 8005438:	0e9b      	lsrs	r3, r3, #26
 800543a:	f003 021f 	and.w	r2, r3, #31
 800543e:	e01e      	b.n	800547e <HAL_ADC_ConfigChannel+0x19a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fab2 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800544c:	4603      	mov	r3, r0
 800544e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005456:	fa93 f3a3 	rbit	r3, r3
 800545a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800545e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800546e:	2320      	movs	r3, #32
 8005470:	e004      	b.n	800547c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x1b2>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0e9b      	lsrs	r3, r3, #26
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	e018      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x1e4>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80054aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80054b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e004      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80054be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d106      	bne.n	80054da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fa81 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fa65 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x222>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fa5a 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80054fc:	4603      	mov	r3, r0
 80054fe:	0e9b      	lsrs	r3, r3, #26
 8005500:	f003 021f 	and.w	r2, r3, #31
 8005504:	e01e      	b.n	8005544 <HAL_ADC_ConfigChannel+0x260>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fa4f 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005512:	4603      	mov	r3, r0
 8005514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800552c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	e004      	b.n	8005542 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_ADC_ConfigChannel+0x278>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	0e9b      	lsrs	r3, r3, #26
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	e018      	b.n	800558e <HAL_ADC_ConfigChannel+0x2aa>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005568:	fa93 f3a3 	rbit	r3, r3
 800556c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005570:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e004      	b.n	800558e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800558e:	429a      	cmp	r2, r3
 8005590:	d106      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fa1e 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fa02 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x2e8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2102      	movs	r1, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff f9f7 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80055c2:	4603      	mov	r3, r0
 80055c4:	0e9b      	lsrs	r3, r3, #26
 80055c6:	f003 021f 	and.w	r2, r3, #31
 80055ca:	e01e      	b.n	800560a <HAL_ADC_ConfigChannel+0x326>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2102      	movs	r1, #2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f9ec 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80055d8:	4603      	mov	r3, r0
 80055da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80055ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80055f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80055fa:	2320      	movs	r3, #32
 80055fc:	e004      	b.n	8005608 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80055fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x33e>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	0e9b      	lsrs	r3, r3, #26
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	e016      	b.n	8005650 <HAL_ADC_ConfigChannel+0x36c>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800563a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005642:	2320      	movs	r3, #32
 8005644:	e004      	b.n	8005650 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005650:	429a      	cmp	r2, r3
 8005652:	d106      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff f9bd 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2103      	movs	r1, #3
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff f9a1 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800566e:	4603      	mov	r3, r0
 8005670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_ADC_ConfigChannel+0x3aa>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2103      	movs	r1, #3
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff f996 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005684:	4603      	mov	r3, r0
 8005686:	0e9b      	lsrs	r3, r3, #26
 8005688:	f003 021f 	and.w	r2, r3, #31
 800568c:	e017      	b.n	80056be <HAL_ADC_ConfigChannel+0x3da>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2103      	movs	r1, #3
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f98b 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800569a:	4603      	mov	r3, r0
 800569c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80056a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80056aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80056b0:	2320      	movs	r3, #32
 80056b2:	e003      	b.n	80056bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80056b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x3f2>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	0e9b      	lsrs	r3, r3, #26
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	e011      	b.n	80056fa <HAL_ADC_ConfigChannel+0x416>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056de:	fa93 f3a3 	rbit	r3, r3
 80056e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80056e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80056e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80056ee:	2320      	movs	r3, #32
 80056f0:	e003      	b.n	80056fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80056f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d106      	bne.n	800570c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	2103      	movs	r1, #3
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff f968 	bl	80049dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fad9 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 813d 	bne.w	8005998 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f7ff fa24 	bl	8004b78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4aa2      	ldr	r2, [pc, #648]	@ (80059c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f040 812e 	bne.w	8005998 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x480>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0e9b      	lsrs	r3, r3, #26
 8005752:	3301      	adds	r3, #1
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2b09      	cmp	r3, #9
 800575a:	bf94      	ite	ls
 800575c:	2301      	movls	r3, #1
 800575e:	2300      	movhi	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e019      	b.n	8005798 <HAL_ADC_ConfigChannel+0x4b4>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800576c:	fa93 f3a3 	rbit	r3, r3
 8005770:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005774:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800577c:	2320      	movs	r3, #32
 800577e:	e003      	b.n	8005788 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005782:	fab3 f383 	clz	r3, r3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	3301      	adds	r3, #1
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	2b09      	cmp	r3, #9
 8005790:	bf94      	ite	ls
 8005792:	2301      	movls	r3, #1
 8005794:	2300      	movhi	r3, #0
 8005796:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005798:	2b00      	cmp	r3, #0
 800579a:	d079      	beq.n	8005890 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x4d4>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	0e9b      	lsrs	r3, r3, #26
 80057ae:	3301      	adds	r3, #1
 80057b0:	069b      	lsls	r3, r3, #26
 80057b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057b6:	e015      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x500>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c0:	fa93 f3a3 	rbit	r3, r3
 80057c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80057c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80057ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80057d0:	2320      	movs	r3, #32
 80057d2:	e003      	b.n	80057dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80057d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d6:	fab3 f383 	clz	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3301      	adds	r3, #1
 80057de:	069b      	lsls	r3, r3, #26
 80057e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x520>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	0e9b      	lsrs	r3, r3, #26
 80057f6:	3301      	adds	r3, #1
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2101      	movs	r1, #1
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	e017      	b.n	8005834 <HAL_ADC_ConfigChannel+0x550>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005814:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800581c:	2320      	movs	r3, #32
 800581e:	e003      	b.n	8005828 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b2db      	uxtb	r3, r3
 8005828:	3301      	adds	r3, #1
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2101      	movs	r1, #1
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	ea42 0103 	orr.w	r1, r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <HAL_ADC_ConfigChannel+0x576>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0e9b      	lsrs	r3, r3, #26
 800584a:	3301      	adds	r3, #1
 800584c:	f003 021f 	and.w	r2, r3, #31
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	051b      	lsls	r3, r3, #20
 8005858:	e018      	b.n	800588c <HAL_ADC_ConfigChannel+0x5a8>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	fa93 f3a3 	rbit	r3, r3
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005872:	2320      	movs	r3, #32
 8005874:	e003      	b.n	800587e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005878:	fab3 f383 	clz	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	3301      	adds	r3, #1
 8005880:	f003 021f 	and.w	r2, r3, #31
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800588c:	430b      	orrs	r3, r1
 800588e:	e07e      	b.n	800598e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <HAL_ADC_ConfigChannel+0x5c8>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0e9b      	lsrs	r3, r3, #26
 80058a2:	3301      	adds	r3, #1
 80058a4:	069b      	lsls	r3, r3, #26
 80058a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058aa:	e015      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x5f4>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80058c4:	2320      	movs	r3, #32
 80058c6:	e003      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	fab3 f383 	clz	r3, r3
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	069b      	lsls	r3, r3, #26
 80058d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x614>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	0e9b      	lsrs	r3, r3, #26
 80058ea:	3301      	adds	r3, #1
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2101      	movs	r1, #1
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	e017      	b.n	8005928 <HAL_ADC_ConfigChannel+0x644>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	61fb      	str	r3, [r7, #28]
  return result;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005910:	2320      	movs	r3, #32
 8005912:	e003      	b.n	800591c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	3301      	adds	r3, #1
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2101      	movs	r1, #1
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	ea42 0103 	orr.w	r1, r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x670>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	0e9b      	lsrs	r3, r3, #26
 800593e:	3301      	adds	r3, #1
 8005940:	f003 021f 	and.w	r2, r3, #31
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	3b1e      	subs	r3, #30
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005952:	e01b      	b.n	800598c <HAL_ADC_ConfigChannel+0x6a8>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	613b      	str	r3, [r7, #16]
  return result;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800596c:	2320      	movs	r3, #32
 800596e:	e003      	b.n	8005978 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	3301      	adds	r3, #1
 800597a:	f003 021f 	and.w	r2, r3, #31
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	3b1e      	subs	r3, #30
 8005986:	051b      	lsls	r3, r3, #20
 8005988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800598c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005992:	4619      	mov	r1, r3
 8005994:	f7ff f8c5 	bl	8004b22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80be 	beq.w	8005b22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ae:	d004      	beq.n	80059ba <HAL_ADC_ConfigChannel+0x6d6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a04      	ldr	r2, [pc, #16]	@ (80059c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10a      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x6ec>
 80059ba:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <HAL_ADC_ConfigChannel+0x6e8>)
 80059bc:	e009      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x6ee>
 80059be:	bf00      	nop
 80059c0:	407f0000 	.word	0x407f0000
 80059c4:	80080000 	.word	0x80080000
 80059c8:	50000100 	.word	0x50000100
 80059cc:	50000300 	.word	0x50000300
 80059d0:	4b59      	ldr	r3, [pc, #356]	@ (8005b38 <HAL_ADC_ConfigChannel+0x854>)
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe ffba 	bl	800494c <LL_ADC_GetCommonPathInternalCh>
 80059d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_ADC_ConfigChannel+0x858>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_ADC_ConfigChannel+0x70c>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a55      	ldr	r2, [pc, #340]	@ (8005b40 <HAL_ADC_ConfigChannel+0x85c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d13a      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d134      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a04:	d005      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x72e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005b44 <HAL_ADC_ConfigChannel+0x860>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f040 8085 	bne.w	8005b1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a1a:	d004      	beq.n	8005a26 <HAL_ADC_ConfigChannel+0x742>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a49      	ldr	r2, [pc, #292]	@ (8005b48 <HAL_ADC_ConfigChannel+0x864>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_ADC_ConfigChannel+0x746>
 8005a26:	4a49      	ldr	r2, [pc, #292]	@ (8005b4c <HAL_ADC_ConfigChannel+0x868>)
 8005a28:	e000      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x748>
 8005a2a:	4a43      	ldr	r2, [pc, #268]	@ (8005b38 <HAL_ADC_ConfigChannel+0x854>)
 8005a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7fe ff75 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a3c:	4b44      	ldr	r3, [pc, #272]	@ (8005b50 <HAL_ADC_ConfigChannel+0x86c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	099b      	lsrs	r3, r3, #6
 8005a42:	4a44      	ldr	r2, [pc, #272]	@ (8005b54 <HAL_ADC_ConfigChannel+0x870>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a56:	e002      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f9      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a64:	e05a      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b58 <HAL_ADC_ConfigChannel+0x874>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d125      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11f      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a31      	ldr	r2, [pc, #196]	@ (8005b48 <HAL_ADC_ConfigChannel+0x864>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d104      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x7ac>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a34      	ldr	r2, [pc, #208]	@ (8005b5c <HAL_ADC_ConfigChannel+0x878>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d047      	beq.n	8005b20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a98:	d004      	beq.n	8005aa4 <HAL_ADC_ConfigChannel+0x7c0>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b48 <HAL_ADC_ConfigChannel+0x864>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_ADC_ConfigChannel+0x7c4>
 8005aa4:	4a29      	ldr	r2, [pc, #164]	@ (8005b4c <HAL_ADC_ConfigChannel+0x868>)
 8005aa6:	e000      	b.n	8005aaa <HAL_ADC_ConfigChannel+0x7c6>
 8005aa8:	4a23      	ldr	r2, [pc, #140]	@ (8005b38 <HAL_ADC_ConfigChannel+0x854>)
 8005aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe ff36 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aba:	e031      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <HAL_ADC_ConfigChannel+0x87c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d12d      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d127      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b48 <HAL_ADC_ConfigChannel+0x864>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ae4:	d004      	beq.n	8005af0 <HAL_ADC_ConfigChannel+0x80c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <HAL_ADC_ConfigChannel+0x864>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_ADC_ConfigChannel+0x810>
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <HAL_ADC_ConfigChannel+0x868>)
 8005af2:	e000      	b.n	8005af6 <HAL_ADC_ConfigChannel+0x812>
 8005af4:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <HAL_ADC_ConfigChannel+0x854>)
 8005af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005afa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7fe ff10 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
 8005b06:	e00c      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005b1a:	e002      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	37d8      	adds	r7, #216	@ 0xd8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	50000700 	.word	0x50000700
 8005b3c:	c3210000 	.word	0xc3210000
 8005b40:	90c00010 	.word	0x90c00010
 8005b44:	50000600 	.word	0x50000600
 8005b48:	50000100 	.word	0x50000100
 8005b4c:	50000300 	.word	0x50000300
 8005b50:	20000168 	.word	0x20000168
 8005b54:	053e2d63 	.word	0x053e2d63
 8005b58:	c7520000 	.word	0xc7520000
 8005b5c:	50000500 	.word	0x50000500
 8005b60:	cb840000 	.word	0xcb840000

08005b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff f8a7 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d176      	bne.n	8005c6e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	4b3c      	ldr	r3, [pc, #240]	@ (8005c78 <ADC_Enable+0x114>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b92:	f043 0210 	orr.w	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e062      	b.n	8005c70 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff f862 	bl	8004c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bbc:	d004      	beq.n	8005bc8 <ADC_Enable+0x64>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8005c7c <ADC_Enable+0x118>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <ADC_Enable+0x68>
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <ADC_Enable+0x11c>)
 8005bca:	e000      	b.n	8005bce <ADC_Enable+0x6a>
 8005bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c84 <ADC_Enable+0x120>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe febc 	bl	800494c <LL_ADC_GetCommonPathInternalCh>
 8005bd4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d013      	beq.n	8005c06 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bde:	4b2a      	ldr	r3, [pc, #168]	@ (8005c88 <ADC_Enable+0x124>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <ADC_Enable+0x128>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	099b      	lsrs	r3, r3, #6
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005bf8:	e002      	b.n	8005c00 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f9      	bne.n	8005bfa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c06:	f7fe fe6f 	bl	80048e8 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c0c:	e028      	b.n	8005c60 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff f858 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff f828 	bl	8004c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c28:	f7fe fe5e 	bl	80048e8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d914      	bls.n	8005c60 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d00d      	beq.n	8005c60 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d1cf      	bne.n	8005c0e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	8000003f 	.word	0x8000003f
 8005c7c:	50000100 	.word	0x50000100
 8005c80:	50000300 	.word	0x50000300
 8005c84:	50000700 	.word	0x50000700
 8005c88:	20000168 	.word	0x20000168
 8005c8c:	053e2d63 	.word	0x053e2d63

08005c90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f826 	bl	8004cee <LL_ADC_IsDisableOngoing>
 8005ca2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff f80d 	bl	8004cc8 <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d047      	beq.n	8005d44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d144      	bne.n	8005d44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 030d 	and.w	r3, r3, #13
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10c      	bne.n	8005ce2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe ffe7 	bl	8004ca0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cda:	f7fe fe05 	bl	80048e8 <HAL_GetTick>
 8005cde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ce0:	e029      	b.n	8005d36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce6:	f043 0210 	orr.w	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e023      	b.n	8005d46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cfe:	f7fe fdf3 	bl	80048e8 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d914      	bls.n	8005d36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1e:	f043 0210 	orr.w	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e007      	b.n	8005d46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1dc      	bne.n	8005cfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d14b      	bne.n	8005e00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d021      	beq.n	8005dc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fe8c 	bl	8004aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d032      	beq.n	8005df8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d12b      	bne.n	8005df8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11f      	bne.n	8005df8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dc4:	e018      	b.n	8005df8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d111      	bne.n	8005df8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7ff fa55 	bl	80052a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005dfe:	e00e      	b.n	8005e1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fa5f 	bl	80052d0 <HAL_ADC_ErrorCallback>
}
 8005e12:	e004      	b.n	8005e1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fa41 	bl	80052bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e60:	f043 0204 	orr.w	r2, r3, #4
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fa31 	bl	80052d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <LL_ADC_IsEnabled>:
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <LL_ADC_IsEnabled+0x18>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <LL_ADC_IsEnabled+0x1a>
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_ADC_StartCalibration>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005eae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	609a      	str	r2, [r3, #8]
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_ADC_IsCalibrationOnGoing>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee2:	d101      	bne.n	8005ee8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d101      	bne.n	8005f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_ADCEx_Calibration_Start+0x1c>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e04d      	b.n	8005fd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fea5 	bl	8005c90 <ADC_Disable>
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d136      	bne.n	8005fbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005f58:	f023 0302 	bic.w	r3, r3, #2
 8005f5c:	f043 0202 	orr.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ff96 	bl	8005e9c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f70:	e014      	b.n	8005f9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4a18      	ldr	r2, [pc, #96]	@ (8005fdc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d90d      	bls.n	8005f9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f84:	f023 0312 	bic.w	r3, r3, #18
 8005f88:	f043 0210 	orr.w	r2, r3, #16
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e01b      	b.n	8005fd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff ff94 	bl	8005ece <LL_ADC_IsCalibrationOnGoing>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e2      	bne.n	8005f72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	f043 0201 	orr.w	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fbc:	e005      	b.n	8005fca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc2:	f043 0210 	orr.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	0004de01 	.word	0x0004de01

08005fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b0a1      	sub	sp, #132	@ 0x84
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0e7      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006006:	2300      	movs	r3, #0
 8006008:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800600a:	2300      	movs	r3, #0
 800600c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006016:	d102      	bne.n	800601e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006018:	4b6f      	ldr	r3, [pc, #444]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	e009      	b.n	8006032 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6e      	ldr	r2, [pc, #440]	@ (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d102      	bne.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006028:	4b6d      	ldr	r3, [pc, #436]	@ (80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	e001      	b.n	8006032 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0be      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff ff4f 	bl	8005ef6 <LL_ADC_REG_IsConversionOngoing>
 8006058:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ff49 	bl	8005ef6 <LL_ADC_REG_IsConversionOngoing>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 80a0 	bne.w	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800606c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 809c 	bne.w	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607c:	d004      	beq.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a55      	ldr	r2, [pc, #340]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006088:	4b56      	ldr	r3, [pc, #344]	@ (80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800608a:	e000      	b.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800608c:	4b56      	ldr	r3, [pc, #344]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800608e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d04b      	beq.n	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060aa:	035b      	lsls	r3, r3, #13
 80060ac:	430b      	orrs	r3, r1
 80060ae:	431a      	orrs	r2, r3
 80060b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060bc:	d004      	beq.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a45      	ldr	r2, [pc, #276]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10f      	bne.n	80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80060c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80060cc:	f7ff fed3 	bl	8005e76 <LL_ADC_IsEnabled>
 80060d0:	4604      	mov	r4, r0
 80060d2:	4841      	ldr	r0, [pc, #260]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060d4:	f7ff fecf 	bl	8005e76 <LL_ADC_IsEnabled>
 80060d8:	4603      	mov	r3, r0
 80060da:	4323      	orrs	r3, r4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e012      	b.n	800610e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80060e8:	483c      	ldr	r0, [pc, #240]	@ (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80060ea:	f7ff fec4 	bl	8005e76 <LL_ADC_IsEnabled>
 80060ee:	4604      	mov	r4, r0
 80060f0:	483b      	ldr	r0, [pc, #236]	@ (80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80060f2:	f7ff fec0 	bl	8005e76 <LL_ADC_IsEnabled>
 80060f6:	4603      	mov	r3, r0
 80060f8:	431c      	orrs	r4, r3
 80060fa:	483c      	ldr	r0, [pc, #240]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80060fc:	f7ff febb 	bl	8005e76 <LL_ADC_IsEnabled>
 8006100:	4603      	mov	r3, r0
 8006102:	4323      	orrs	r3, r4
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf0c      	ite	eq
 8006108:	2301      	moveq	r3, #1
 800610a:	2300      	movne	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d056      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800611a:	f023 030f 	bic.w	r3, r3, #15
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	6811      	ldr	r1, [r2, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	6892      	ldr	r2, [r2, #8]
 8006126:	430a      	orrs	r2, r1
 8006128:	431a      	orrs	r2, r3
 800612a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800612c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800612e:	e047      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800613a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006144:	d004      	beq.n	8006150 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a23      	ldr	r2, [pc, #140]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10f      	bne.n	8006170 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006150:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006154:	f7ff fe8f 	bl	8005e76 <LL_ADC_IsEnabled>
 8006158:	4604      	mov	r4, r0
 800615a:	481f      	ldr	r0, [pc, #124]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800615c:	f7ff fe8b 	bl	8005e76 <LL_ADC_IsEnabled>
 8006160:	4603      	mov	r3, r0
 8006162:	4323      	orrs	r3, r4
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e012      	b.n	8006196 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006170:	481a      	ldr	r0, [pc, #104]	@ (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006172:	f7ff fe80 	bl	8005e76 <LL_ADC_IsEnabled>
 8006176:	4604      	mov	r4, r0
 8006178:	4819      	ldr	r0, [pc, #100]	@ (80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800617a:	f7ff fe7c 	bl	8005e76 <LL_ADC_IsEnabled>
 800617e:	4603      	mov	r3, r0
 8006180:	431c      	orrs	r4, r3
 8006182:	481a      	ldr	r0, [pc, #104]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006184:	f7ff fe77 	bl	8005e76 <LL_ADC_IsEnabled>
 8006188:	4603      	mov	r3, r0
 800618a:	4323      	orrs	r3, r4
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d012      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800619a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80061a2:	f023 030f 	bic.w	r3, r3, #15
 80061a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80061a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061aa:	e009      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80061be:	e000      	b.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3784      	adds	r7, #132	@ 0x84
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	50000100 	.word	0x50000100
 80061dc:	50000400 	.word	0x50000400
 80061e0:	50000500 	.word	0x50000500
 80061e4:	50000300 	.word	0x50000300
 80061e8:	50000700 	.word	0x50000700
 80061ec:	50000600 	.word	0x50000600

080061f0 <__NVIC_SetPriorityGrouping>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <__NVIC_SetPriorityGrouping+0x44>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800620c:	4013      	ands	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800621c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006222:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <__NVIC_SetPriorityGrouping+0x44>)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	60d3      	str	r3, [r2, #12]
}
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	e000ed00 	.word	0xe000ed00

08006238 <__NVIC_GetPriorityGrouping>:
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800623c:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <__NVIC_GetPriorityGrouping+0x18>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	f003 0307 	and.w	r3, r3, #7
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <__NVIC_EnableIRQ>:
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006262:	2b00      	cmp	r3, #0
 8006264:	db0b      	blt.n	800627e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	f003 021f 	and.w	r2, r3, #31
 800626c:	4907      	ldr	r1, [pc, #28]	@ (800628c <__NVIC_EnableIRQ+0x38>)
 800626e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2001      	movs	r0, #1
 8006276:	fa00 f202 	lsl.w	r2, r0, r2
 800627a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	e000e100 	.word	0xe000e100

08006290 <__NVIC_SetPriority>:
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800629c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	db0a      	blt.n	80062ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	490c      	ldr	r1, [pc, #48]	@ (80062dc <__NVIC_SetPriority+0x4c>)
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ae:	0112      	lsls	r2, r2, #4
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	440b      	add	r3, r1
 80062b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062b8:	e00a      	b.n	80062d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	4908      	ldr	r1, [pc, #32]	@ (80062e0 <__NVIC_SetPriority+0x50>)
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3b04      	subs	r3, #4
 80062c8:	0112      	lsls	r2, r2, #4
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	761a      	strb	r2, [r3, #24]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	e000e100 	.word	0xe000e100
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <NVIC_EncodePriority>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	@ 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f1c3 0307 	rsb	r3, r3, #7
 80062fe:	2b04      	cmp	r3, #4
 8006300:	bf28      	it	cs
 8006302:	2304      	movcs	r3, #4
 8006304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3304      	adds	r3, #4
 800630a:	2b06      	cmp	r3, #6
 800630c:	d902      	bls.n	8006314 <NVIC_EncodePriority+0x30>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3b03      	subs	r3, #3
 8006312:	e000      	b.n	8006316 <NVIC_EncodePriority+0x32>
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	401a      	ands	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800632c:	f04f 31ff 	mov.w	r1, #4294967295
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	43d9      	mvns	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800633c:	4313      	orrs	r3, r2
}
 800633e:	4618      	mov	r0, r3
 8006340:	3724      	adds	r7, #36	@ 0x24
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3b01      	subs	r3, #1
 8006358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800635c:	d301      	bcc.n	8006362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800635e:	2301      	movs	r3, #1
 8006360:	e00f      	b.n	8006382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006362:	4a0a      	ldr	r2, [pc, #40]	@ (800638c <SysTick_Config+0x40>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3b01      	subs	r3, #1
 8006368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800636a:	210f      	movs	r1, #15
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	f7ff ff8e 	bl	8006290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006374:	4b05      	ldr	r3, [pc, #20]	@ (800638c <SysTick_Config+0x40>)
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800637a:	4b04      	ldr	r3, [pc, #16]	@ (800638c <SysTick_Config+0x40>)
 800637c:	2207      	movs	r2, #7
 800637e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	e000e010 	.word	0xe000e010

08006390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff ff29 	bl	80061f0 <__NVIC_SetPriorityGrouping>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	4603      	mov	r3, r0
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063b4:	f7ff ff40 	bl	8006238 <__NVIC_GetPriorityGrouping>
 80063b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f7ff ff90 	bl	80062e4 <NVIC_EncodePriority>
 80063c4:	4602      	mov	r2, r0
 80063c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff5f 	bl	8006290 <__NVIC_SetPriority>
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	4603      	mov	r3, r0
 80063e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff33 	bl	8006254 <__NVIC_EnableIRQ>
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ffa4 	bl	800634c <SysTick_Config>
 8006404:	4603      	mov	r3, r0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e08d      	b.n	800653e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	4b47      	ldr	r3, [pc, #284]	@ (8006548 <HAL_DMA_Init+0x138>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d80f      	bhi.n	800644e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	4b45      	ldr	r3, [pc, #276]	@ (800654c <HAL_DMA_Init+0x13c>)
 8006436:	4413      	add	r3, r2
 8006438:	4a45      	ldr	r2, [pc, #276]	@ (8006550 <HAL_DMA_Init+0x140>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	009a      	lsls	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a42      	ldr	r2, [pc, #264]	@ (8006554 <HAL_DMA_Init+0x144>)
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40
 800644c:	e00e      	b.n	800646c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	4b40      	ldr	r3, [pc, #256]	@ (8006558 <HAL_DMA_Init+0x148>)
 8006456:	4413      	add	r3, r2
 8006458:	4a3d      	ldr	r2, [pc, #244]	@ (8006550 <HAL_DMA_Init+0x140>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	009a      	lsls	r2, r3, #2
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a3c      	ldr	r2, [pc, #240]	@ (800655c <HAL_DMA_Init+0x14c>)
 800646a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa76 	bl	80069b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064cc:	d102      	bne.n	80064d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <HAL_DMA_Init+0x104>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d80c      	bhi.n	8006514 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa96 	bl	8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	e008      	b.n	8006526 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40020407 	.word	0x40020407
 800654c:	bffdfff8 	.word	0xbffdfff8
 8006550:	cccccccd 	.word	0xcccccccd
 8006554:	40020000 	.word	0x40020000
 8006558:	bffdfbf8 	.word	0xbffdfbf8
 800655c:	40020400 	.word	0x40020400

08006560 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_DMA_Start_IT+0x20>
 800657c:	2302      	movs	r3, #2
 800657e:	e066      	b.n	800664e <HAL_DMA_Start_IT+0xee>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	d155      	bne.n	8006640 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f9bb 	bl	8006934 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 020e 	orr.w	r2, r2, #14
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e00f      	b.n	80065f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0204 	bic.w	r2, r2, #4
 80065e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 020a 	orr.w	r2, r2, #10
 80065f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006614:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800662c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e005      	b.n	800664c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006648:	2302      	movs	r3, #2
 800664a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d005      	beq.n	800667a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2204      	movs	r2, #4
 8006672:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
 8006678:	e037      	b.n	80066ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 020e 	bic.w	r2, r2, #14
 8006688:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006698:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f003 021f 	and.w	r2, r3, #31
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	2101      	movs	r1, #1
 80066b8:	fa01 f202 	lsl.w	r2, r1, r2
 80066bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d00d      	beq.n	800673c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2204      	movs	r2, #4
 8006724:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	e047      	b.n	80067cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 020e 	bic.w	r2, r2, #14
 800674a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006766:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800676a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	2101      	movs	r1, #1
 800677a:	fa01 f202 	lsl.w	r2, r1, r2
 800677e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
    }
  }
  return status;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2204      	movs	r2, #4
 80067f8:	409a      	lsls	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d026      	beq.n	8006850 <HAL_DMA_IRQHandler+0x7a>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d021      	beq.n	8006850 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d107      	bne.n	800682a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f003 021f 	and.w	r2, r3, #31
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2104      	movs	r1, #4
 8006838:	fa01 f202 	lsl.w	r2, r1, r2
 800683c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006842:	2b00      	cmp	r3, #0
 8006844:	d071      	beq.n	800692a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800684e:	e06c      	b.n	800692a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2202      	movs	r2, #2
 800685a:	409a      	lsls	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d02e      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d029      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020a 	bic.w	r2, r2, #10
 800688a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006898:	f003 021f 	and.w	r2, r3, #31
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a0:	2102      	movs	r1, #2
 80068a2:	fa01 f202 	lsl.w	r2, r1, r2
 80068a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d038      	beq.n	800692a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068c0:	e033      	b.n	800692a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2208      	movs	r2, #8
 80068cc:	409a      	lsls	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d02a      	beq.n	800692c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d025      	beq.n	800692c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 020e 	bic.w	r2, r2, #14
 80068ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f4:	f003 021f 	and.w	r2, r3, #31
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	2101      	movs	r1, #1
 80068fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006902:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800692a:	bf00      	nop
 800692c:	bf00      	nop
}
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800694a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	f003 021f 	and.w	r2, r3, #31
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696a:	2101      	movs	r1, #1
 800696c:	fa01 f202 	lsl.w	r2, r1, r2
 8006970:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b10      	cmp	r3, #16
 8006980:	d108      	bne.n	8006994 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006992:	e007      	b.n	80069a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	60da      	str	r2, [r3, #12]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	4b16      	ldr	r3, [pc, #88]	@ (8006a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d802      	bhi.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069c4:	4b15      	ldr	r3, [pc, #84]	@ (8006a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e001      	b.n	80069ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069ca:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	3b08      	subs	r3, #8
 80069da:	4a12      	ldr	r2, [pc, #72]	@ (8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069dc:	fba2 2303 	umull	r2, r3, r2, r3
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	009a      	lsls	r2, r3, #2
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80069fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2201      	movs	r2, #1
 8006a04:	409a      	lsls	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40020407 	.word	0x40020407
 8006a1c:	40020800 	.word	0x40020800
 8006a20:	40020820 	.word	0x40020820
 8006a24:	cccccccd 	.word	0xcccccccd
 8006a28:	40020880 	.word	0x40020880

08006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a08      	ldr	r2, [pc, #32]	@ (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a4e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2201      	movs	r2, #1
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	1000823f 	.word	0x1000823f
 8006a70:	40020940 	.word	0x40020940

08006a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a82:	e15a      	b.n	8006d3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2101      	movs	r1, #1
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	4013      	ands	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 814c 	beq.w	8006d34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d005      	beq.n	8006ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d130      	bne.n	8006b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	2203      	movs	r2, #3
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006aea:	2201      	movs	r2, #1
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	f003 0201 	and.w	r2, r3, #1
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d017      	beq.n	8006b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4013      	ands	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d123      	bne.n	8006ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	08da      	lsrs	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3208      	adds	r2, #8
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	220f      	movs	r2, #15
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	08da      	lsrs	r2, r3, #3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3208      	adds	r2, #8
 8006ba0:	6939      	ldr	r1, [r7, #16]
 8006ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f003 0203 	and.w	r2, r3, #3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80a6 	beq.w	8006d34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be8:	4b5b      	ldr	r3, [pc, #364]	@ (8006d58 <HAL_GPIO_Init+0x2e4>)
 8006bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bec:	4a5a      	ldr	r2, [pc, #360]	@ (8006d58 <HAL_GPIO_Init+0x2e4>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bf4:	4b58      	ldr	r3, [pc, #352]	@ (8006d58 <HAL_GPIO_Init+0x2e4>)
 8006bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c00:	4a56      	ldr	r2, [pc, #344]	@ (8006d5c <HAL_GPIO_Init+0x2e8>)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	089b      	lsrs	r3, r3, #2
 8006c06:	3302      	adds	r3, #2
 8006c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	220f      	movs	r2, #15
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4013      	ands	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c2a:	d01f      	beq.n	8006c6c <HAL_GPIO_Init+0x1f8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006d60 <HAL_GPIO_Init+0x2ec>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d019      	beq.n	8006c68 <HAL_GPIO_Init+0x1f4>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a4b      	ldr	r2, [pc, #300]	@ (8006d64 <HAL_GPIO_Init+0x2f0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <HAL_GPIO_Init+0x1f0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d68 <HAL_GPIO_Init+0x2f4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00d      	beq.n	8006c60 <HAL_GPIO_Init+0x1ec>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a49      	ldr	r2, [pc, #292]	@ (8006d6c <HAL_GPIO_Init+0x2f8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <HAL_GPIO_Init+0x1e8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a48      	ldr	r2, [pc, #288]	@ (8006d70 <HAL_GPIO_Init+0x2fc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d101      	bne.n	8006c58 <HAL_GPIO_Init+0x1e4>
 8006c54:	2305      	movs	r3, #5
 8006c56:	e00a      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c58:	2306      	movs	r3, #6
 8006c5a:	e008      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	e006      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c60:	2303      	movs	r3, #3
 8006c62:	e004      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e002      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_GPIO_Init+0x1fa>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	f002 0203 	and.w	r2, r2, #3
 8006c74:	0092      	lsls	r2, r2, #2
 8006c76:	4093      	lsls	r3, r2
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c7e:	4937      	ldr	r1, [pc, #220]	@ (8006d5c <HAL_GPIO_Init+0x2e8>)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	3302      	adds	r3, #2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c8c:	4b39      	ldr	r3, [pc, #228]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cb0:	4a30      	ldr	r2, [pc, #192]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006cda:	4a26      	ldr	r2, [pc, #152]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006ce0:	4b24      	ldr	r3, [pc, #144]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4013      	ands	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d04:	4a1b      	ldr	r2, [pc, #108]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	43db      	mvns	r3, r3
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4013      	ands	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d2e:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <HAL_GPIO_Init+0x300>)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	3301      	adds	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f ae9d 	bne.w	8006a84 <HAL_GPIO_Init+0x10>
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	48000400 	.word	0x48000400
 8006d64:	48000800 	.word	0x48000800
 8006d68:	48000c00 	.word	0x48000c00
 8006d6c:	48001000 	.word	0x48001000
 8006d70:	48001400 	.word	0x48001400
 8006d74:	40010400 	.word	0x40010400

08006d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	887b      	ldrh	r3, [r7, #2]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
 8006d94:	e001      	b.n	8006d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
 8006db4:	4613      	mov	r3, r2
 8006db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006db8:	787b      	ldrb	r3, [r7, #1]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dbe:	887a      	ldrh	r2, [r7, #2]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006dc4:	e002      	b.n	8006dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dc6:	887a      	ldrh	r2, [r7, #2]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006de2:	4b08      	ldr	r3, [pc, #32]	@ (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dee:	4a05      	ldr	r2, [pc, #20]	@ (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fc f955 	bl	80030a6 <HAL_GPIO_EXTI_Callback>
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40010400 	.word	0x40010400

08006e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d141      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e16:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e22:	d131      	bne.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e24:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2a:	4a46      	ldr	r2, [pc, #280]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e3c:	4a41      	ldr	r2, [pc, #260]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e44:	4b40      	ldr	r3, [pc, #256]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2232      	movs	r2, #50	@ 0x32
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	0c9b      	lsrs	r3, r3, #18
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5a:	e002      	b.n	8006e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e62:	4b38      	ldr	r3, [pc, #224]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6e:	d102      	bne.n	8006e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e76:	4b33      	ldr	r3, [pc, #204]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e82:	d158      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e057      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e88:	4b2e      	ldr	r3, [pc, #184]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e98:	e04d      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea0:	d141      	bne.n	8006f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eae:	d131      	bne.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eb0:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb6:	4a23      	ldr	r2, [pc, #140]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec0:	4b20      	ldr	r3, [pc, #128]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2232      	movs	r2, #50	@ 0x32
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9b      	lsrs	r3, r3, #18
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee6:	e002      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efa:	d102      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f2      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0e:	d112      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f24:	e007      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f2e:	4a05      	ldr	r2, [pc, #20]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40007000 	.word	0x40007000
 8006f48:	20000168 	.word	0x20000168
 8006f4c:	431bde83 	.word	0x431bde83

08006f50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f5e:	6093      	str	r3, [r2, #8]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40007000 	.word	0x40007000

08006f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e2fe      	b.n	8007580 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d075      	beq.n	800707a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8e:	4b97      	ldr	r3, [pc, #604]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 030c 	and.w	r3, r3, #12
 8006f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f98:	4b94      	ldr	r3, [pc, #592]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_OscConfig+0x3e>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x44>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d05b      	beq.n	8007078 <HAL_RCC_OscConfig+0x108>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d157      	bne.n	8007078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e2d9      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x74>
 8006fd6:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a84      	ldr	r2, [pc, #528]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e01d      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x98>
 8006fee:	4b7f      	ldr	r3, [pc, #508]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7b      	ldr	r2, [pc, #492]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e00b      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8007008:	4b78      	ldr	r3, [pc, #480]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4b75      	ldr	r3, [pc, #468]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a74      	ldr	r2, [pc, #464]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800701a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d013      	beq.n	8007050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fd fc5e 	bl	80048e8 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007030:	f7fd fc5a 	bl	80048e8 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	@ 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e29e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007042:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCC_OscConfig+0xc0>
 800704e:	e014      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fd fc4a 	bl	80048e8 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007058:	f7fd fc46 	bl	80048e8 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b64      	cmp	r3, #100	@ 0x64
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e28a      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706a:	4b60      	ldr	r3, [pc, #384]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0xe8>
 8007076:	e000      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d075      	beq.n	8007172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007086:	4b59      	ldr	r3, [pc, #356]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007090:	4b56      	ldr	r3, [pc, #344]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d102      	bne.n	80070a6 <HAL_RCC_OscConfig+0x136>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <HAL_RCC_OscConfig+0x13c>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11f      	bne.n	80070ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	4b4f      	ldr	r3, [pc, #316]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_OscConfig+0x154>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e25d      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c4:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	4946      	ldr	r1, [pc, #280]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <HAL_RCC_OscConfig+0x280>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fbb7 	bl	8004850 <HAL_InitTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d043      	beq.n	8007170 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e249      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d023      	beq.n	800713c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070f4:	4b3d      	ldr	r3, [pc, #244]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3c      	ldr	r2, [pc, #240]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fd fbf2 	bl	80048e8 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007108:	f7fd fbee 	bl	80048e8 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e232      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b31      	ldr	r3, [pc, #196]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	061b      	lsls	r3, r3, #24
 8007134:	492d      	ldr	r1, [pc, #180]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
 800713a:	e01a      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713c:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a2a      	ldr	r2, [pc, #168]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fd fbce 	bl	80048e8 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007150:	f7fd fbca 	bl	80048e8 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e20e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x1e0>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d041      	beq.n	8007202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01c      	beq.n	80071c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007186:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718c:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fd fba7 	bl	80048e8 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719e:	f7fd fba3 	bl	80048e8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e1e7      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <HAL_RCC_OscConfig+0x22e>
 80071be:	e020      	b.n	8007202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c0:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c8:	f023 0301 	bic.w	r3, r3, #1
 80071cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fd fb8a 	bl	80048e8 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d6:	e00d      	b.n	80071f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d8:	f7fd fb86 	bl	80048e8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d906      	bls.n	80071f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e1ca      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	2000016c 	.word	0x2000016c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80071f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ea      	bne.n	80071d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80a6 	beq.w	800735c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007214:	4b84      	ldr	r3, [pc, #528]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x2b4>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x2b6>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4b7f      	ldr	r3, [pc, #508]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	4a7e      	ldr	r2, [pc, #504]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6593      	str	r3, [r2, #88]	@ 0x58
 8007236:	4b7c      	ldr	r3, [pc, #496]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007242:	2301      	movs	r3, #1
 8007244:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007246:	4b79      	ldr	r3, [pc, #484]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d118      	bne.n	8007284 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007252:	4b76      	ldr	r3, [pc, #472]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a75      	ldr	r2, [pc, #468]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725e:	f7fd fb43 	bl	80048e8 <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007266:	f7fd fb3f 	bl	80048e8 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e183      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007278:	4b6c      	ldr	r3, [pc, #432]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d108      	bne.n	800729e <HAL_RCC_OscConfig+0x32e>
 800728c:	4b66      	ldr	r3, [pc, #408]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	4a65      	ldr	r2, [pc, #404]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800729c:	e024      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d110      	bne.n	80072c8 <HAL_RCC_OscConfig+0x358>
 80072a6:	4b60      	ldr	r3, [pc, #384]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072c6:	e00f      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 80072c8:	4b57      	ldr	r3, [pc, #348]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	4a56      	ldr	r2, [pc, #344]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072d8:	4b53      	ldr	r3, [pc, #332]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072de:	4a52      	ldr	r2, [pc, #328]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d016      	beq.n	800731e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f0:	f7fd fafa 	bl	80048e8 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f6:	e00a      	b.n	800730e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f8:	f7fd faf6 	bl	80048e8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007306:	4293      	cmp	r3, r2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e138      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730e:	4b46      	ldr	r3, [pc, #280]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ed      	beq.n	80072f8 <HAL_RCC_OscConfig+0x388>
 800731c:	e015      	b.n	800734a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fd fae3 	bl	80048e8 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fd fadf 	bl	80048e8 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e121      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800733c:	4b3a      	ldr	r3, [pc, #232]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ed      	bne.n	8007326 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800734a:	7ffb      	ldrb	r3, [r7, #31]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b35      	ldr	r3, [pc, #212]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007354:	4a34      	ldr	r2, [pc, #208]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d03c      	beq.n	80073e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01c      	beq.n	80073aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007370:	4b2d      	ldr	r3, [pc, #180]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007376:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007380:	f7fd fab2 	bl	80048e8 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007388:	f7fd faae 	bl	80048e8 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0f2      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739a:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800739c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ef      	beq.n	8007388 <HAL_RCC_OscConfig+0x418>
 80073a8:	e01b      	b.n	80073e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ba:	f7fd fa95 	bl	80048e8 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073c2:	f7fd fa91 	bl	80048e8 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e0d5      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d4:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ef      	bne.n	80073c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80c9 	beq.w	800757e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	f000 8083 	beq.w	8007500 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d15e      	bne.n	80074c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a08      	ldr	r2, [pc, #32]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800740c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740e:	f7fd fa6b 	bl	80048e8 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007414:	e00c      	b.n	8007430 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007416:	f7fd fa67 	bl	80048e8 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d905      	bls.n	8007430 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0ab      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 8007428:	40021000 	.word	0x40021000
 800742c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007430:	4b55      	ldr	r3, [pc, #340]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ec      	bne.n	8007416 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800743c:	4b52      	ldr	r3, [pc, #328]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	4b52      	ldr	r3, [pc, #328]	@ (800758c <HAL_RCC_OscConfig+0x61c>)
 8007442:	4013      	ands	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6a11      	ldr	r1, [r2, #32]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800744c:	3a01      	subs	r2, #1
 800744e:	0112      	lsls	r2, r2, #4
 8007450:	4311      	orrs	r1, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007456:	0212      	lsls	r2, r2, #8
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	3a01      	subs	r2, #1
 8007462:	0552      	lsls	r2, r2, #21
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0652      	lsls	r2, r2, #25
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007476:	06d2      	lsls	r2, r2, #27
 8007478:	430a      	orrs	r2, r1
 800747a:	4943      	ldr	r1, [pc, #268]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800747c:	4313      	orrs	r3, r2
 800747e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007480:	4b41      	ldr	r3, [pc, #260]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a40      	ldr	r2, [pc, #256]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800748c:	4b3e      	ldr	r3, [pc, #248]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a3d      	ldr	r2, [pc, #244]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fd fa26 	bl	80048e8 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fd fa22 	bl	80048e8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e066      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b2:	4b35      	ldr	r3, [pc, #212]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x530>
 80074be:	e05e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c0:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a30      	ldr	r2, [pc, #192]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fd fa0c 	bl	80048e8 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fd fa08 	bl	80048e8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e04c      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074e6:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074f2:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	4924      	ldr	r1, [pc, #144]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f8:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <HAL_RCC_OscConfig+0x620>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	60cb      	str	r3, [r1, #12]
 80074fe:	e03e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e039      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800750c:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f003 0203 	and.w	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	429a      	cmp	r2, r3
 800751e:	d12c      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	3b01      	subs	r3, #1
 800752c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d123      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d11b      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d113      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d109      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	3b01      	subs	r3, #1
 8007574:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40021000 	.word	0x40021000
 800758c:	019f800c 	.word	0x019f800c
 8007590:	feeefffc 	.word	0xfeeefffc

08007594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e11e      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b91      	ldr	r3, [pc, #580]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d910      	bls.n	80075dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b8e      	ldr	r3, [pc, #568]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 020f 	bic.w	r2, r3, #15
 80075c2:	498c      	ldr	r1, [pc, #560]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b8a      	ldr	r3, [pc, #552]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e106      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d073      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d129      	bne.n	8007644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f0:	4b81      	ldr	r3, [pc, #516]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0f4      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007600:	f000 f99e 	bl	8007940 <RCC_GetSysClockFreqFromPLLSource>
 8007604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4a7c      	ldr	r2, [pc, #496]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d93f      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800760e:	4b7a      	ldr	r3, [pc, #488]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007622:	2b00      	cmp	r3, #0
 8007624:	d033      	beq.n	800768e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12f      	bne.n	800768e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800762e:	4b72      	ldr	r3, [pc, #456]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007636:	4a70      	ldr	r2, [pc, #448]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800763e:	2380      	movs	r3, #128	@ 0x80
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e024      	b.n	800768e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d107      	bne.n	800765c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800764c:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0c6      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800765c:	4b66      	ldr	r3, [pc, #408]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0be      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800766c:	f000 f8ce 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8007670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4a61      	ldr	r2, [pc, #388]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d909      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800767a:	4b5f      	ldr	r3, [pc, #380]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007682:	4a5d      	ldr	r2, [pc, #372]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800768a:	2380      	movs	r3, #128	@ 0x80
 800768c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800768e:	4b5a      	ldr	r3, [pc, #360]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 0203 	bic.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4957      	ldr	r1, [pc, #348]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fd f922 	bl	80048e8 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	e00a      	b.n	80076be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a8:	f7fd f91e 	bl	80048e8 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e095      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	4b4e      	ldr	r3, [pc, #312]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 020c 	and.w	r2, r3, #12
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1eb      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d023      	beq.n	8007724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076e8:	4b43      	ldr	r3, [pc, #268]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a42      	ldr	r2, [pc, #264]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007700:	4b3d      	ldr	r3, [pc, #244]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007708:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800770a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800770e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4936      	ldr	r1, [pc, #216]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
 8007722:	e008      	b.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d105      	bne.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800772a:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d21d      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007744:	4b2b      	ldr	r3, [pc, #172]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 020f 	bic.w	r2, r3, #15
 800774c:	4929      	ldr	r1, [pc, #164]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007754:	f7fd f8c8 	bl	80048e8 <HAL_GetTick>
 8007758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	e00a      	b.n	8007772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800775c:	f7fd f8c4 	bl	80048e8 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e03b      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d1ed      	bne.n	800775c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800778c:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4917      	ldr	r1, [pc, #92]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077be:	f000 f825 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	490c      	ldr	r1, [pc, #48]	@ (8007800 <HAL_RCC_ClockConfig+0x26c>)
 80077d0:	5ccb      	ldrb	r3, [r1, r3]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	4a0a      	ldr	r2, [pc, #40]	@ (8007804 <HAL_RCC_ClockConfig+0x270>)
 80077dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077de:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <HAL_RCC_ClockConfig+0x274>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd f834 	bl	8004850 <HAL_InitTick>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	04c4b400 	.word	0x04c4b400
 8007800:	0800d3f8 	.word	0x0800d3f8
 8007804:	20000168 	.word	0x20000168
 8007808:	2000016c 	.word	0x2000016c

0800780c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007812:	4b2c      	ldr	r3, [pc, #176]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 030c 	and.w	r3, r3, #12
 800781a:	2b04      	cmp	r3, #4
 800781c:	d102      	bne.n	8007824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800781e:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e047      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007824:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b08      	cmp	r3, #8
 800782e:	d102      	bne.n	8007836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007830:	4b26      	ldr	r3, [pc, #152]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	e03e      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d136      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007842:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800784c:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	3301      	adds	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d10c      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007860:	4a1a      	ldr	r2, [pc, #104]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	4a16      	ldr	r2, [pc, #88]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786a:	68d2      	ldr	r2, [r2, #12]
 800786c:	0a12      	lsrs	r2, r2, #8
 800786e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	617b      	str	r3, [r7, #20]
      break;
 8007878:	e00c      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800787a:	4a13      	ldr	r2, [pc, #76]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	4a10      	ldr	r2, [pc, #64]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007884:	68d2      	ldr	r2, [r2, #12]
 8007886:	0a12      	lsrs	r2, r2, #8
 8007888:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
      break;
 8007892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	0e5b      	lsrs	r3, r3, #25
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	3301      	adds	r3, #1
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	e001      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078b4:	693b      	ldr	r3, [r7, #16]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40021000 	.word	0x40021000
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	016e3600 	.word	0x016e3600

080078d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000168 	.word	0x20000168

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4904      	ldr	r1, [pc, #16]	@ (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	0800d408 	.word	0x0800d408

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007918:	f7ff ffda 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	0adb      	lsrs	r3, r3, #11
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4904      	ldr	r1, [pc, #16]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40021000 	.word	0x40021000
 800793c:	0800d408 	.word	0x0800d408

08007940 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007946:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007950:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d10c      	bne.n	800797e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007964:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	4a14      	ldr	r2, [pc, #80]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800796e:	68d2      	ldr	r2, [r2, #12]
 8007970:	0a12      	lsrs	r2, r2, #8
 8007972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
    break;
 800797c:	e00c      	b.n	8007998 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800797e:	4a12      	ldr	r2, [pc, #72]	@ (80079c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4a0e      	ldr	r2, [pc, #56]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007988:	68d2      	ldr	r2, [r2, #12]
 800798a:	0a12      	lsrs	r2, r2, #8
 800798c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
    break;
 8007996:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007998:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0e5b      	lsrs	r3, r3, #25
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	3301      	adds	r3, #1
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079b2:	687b      	ldr	r3, [r7, #4]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40021000 	.word	0x40021000
 80079c4:	016e3600 	.word	0x016e3600
 80079c8:	00f42400 	.word	0x00f42400

080079cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079d4:	2300      	movs	r3, #0
 80079d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079d8:	2300      	movs	r3, #0
 80079da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8098 	beq.w	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ea:	2300      	movs	r3, #0
 80079ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ee:	4b43      	ldr	r3, [pc, #268]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b40      	ldr	r3, [pc, #256]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fe:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a06:	4b3d      	ldr	r3, [pc, #244]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a12:	2301      	movs	r3, #1
 8007a14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a16:	4b3a      	ldr	r3, [pc, #232]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a39      	ldr	r2, [pc, #228]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a22:	f7fc ff61 	bl	80048e8 <HAL_GetTick>
 8007a26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a28:	e009      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2a:	f7fc ff5d 	bl	80048e8 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d902      	bls.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a3c:	e005      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a3e:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0ef      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a4a:	7cfb      	ldrb	r3, [r7, #19]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d159      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a50:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01e      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d019      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a6c:	4b23      	ldr	r3, [pc, #140]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a78:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a88:	4b1c      	ldr	r3, [pc, #112]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a98:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aaa:	f7fc ff1d 	bl	80048e8 <HAL_GetTick>
 8007aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab0:	e00b      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab2:	f7fc ff19 	bl	80048e8 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d902      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aca:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0ec      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ade:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aec:	4903      	ldr	r1, [pc, #12]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af6:	7cfb      	ldrb	r3, [r7, #19]
 8007af8:	74bb      	strb	r3, [r7, #18]
 8007afa:	e005      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007afc:	40021000 	.word	0x40021000
 8007b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7cfb      	ldrb	r3, [r7, #19]
 8007b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b08:	7c7b      	ldrb	r3, [r7, #17]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d105      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	4aa6      	ldr	r2, [pc, #664]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b26:	4ba1      	ldr	r3, [pc, #644]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2c:	f023 0203 	bic.w	r2, r3, #3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	499d      	ldr	r1, [pc, #628]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b48:	4b98      	ldr	r3, [pc, #608]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	f023 020c 	bic.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4995      	ldr	r1, [pc, #596]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b6a:	4b90      	ldr	r3, [pc, #576]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	498c      	ldr	r1, [pc, #560]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b8c:	4b87      	ldr	r3, [pc, #540]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4984      	ldr	r1, [pc, #528]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bae:	4b7f      	ldr	r3, [pc, #508]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	497b      	ldr	r1, [pc, #492]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bd0:	4b76      	ldr	r3, [pc, #472]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4973      	ldr	r1, [pc, #460]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	496a      	ldr	r1, [pc, #424]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c14:	4b65      	ldr	r3, [pc, #404]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	4962      	ldr	r1, [pc, #392]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c36:	4b5d      	ldr	r3, [pc, #372]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	4959      	ldr	r1, [pc, #356]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c58:	4b54      	ldr	r3, [pc, #336]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5e:	f023 0203 	bic.w	r2, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c66:	4951      	ldr	r1, [pc, #324]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4948      	ldr	r1, [pc, #288]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c9c:	4b43      	ldr	r3, [pc, #268]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4940      	ldr	r1, [pc, #256]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	4932      	ldr	r1, [pc, #200]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d0c:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	4924      	ldr	r1, [pc, #144]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d44:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	4916      	ldr	r1, [pc, #88]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d019      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	4908      	ldr	r1, [pc, #32]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a02      	ldr	r2, [pc, #8]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007daa:	bf00      	nop
 8007dac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dbc:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dca:	4926      	ldr	r1, [pc, #152]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dda:	d105      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a20      	ldr	r2, [pc, #128]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d015      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007df4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	4918      	ldr	r1, [pc, #96]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d105      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a12      	ldr	r2, [pc, #72]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3a:	490a      	ldr	r1, [pc, #40]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e4c:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a04      	ldr	r2, [pc, #16]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000

08007e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e054      	b.n	8007f24 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d111      	bne.n	8007eaa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fee2 	bl	8009c58 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a23      	ldr	r2, [pc, #140]	@ (8007f2c <HAL_TIM_Base_Init+0xc4>)
 8007ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f001 fa2b 	bl	8009318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	080042ed 	.word	0x080042ed

08007f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04c      	b.n	8007fe2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a26      	ldr	r2, [pc, #152]	@ (8007ff0 <HAL_TIM_Base_Start+0xc0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f62:	d01d      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a22      	ldr	r2, [pc, #136]	@ (8007ff4 <HAL_TIM_Base_Start+0xc4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a21      	ldr	r2, [pc, #132]	@ (8007ff8 <HAL_TIM_Base_Start+0xc8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ffc <HAL_TIM_Base_Start+0xcc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1e      	ldr	r2, [pc, #120]	@ (8008000 <HAL_TIM_Base_Start+0xd0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <HAL_TIM_Base_Start+0xd4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <HAL_TIM_Base_Start+0xd8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d115      	bne.n	8007fcc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	4b19      	ldr	r3, [pc, #100]	@ (800800c <HAL_TIM_Base_Start+0xdc>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	d015      	beq.n	8007fde <HAL_TIM_Base_Start+0xae>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d011      	beq.n	8007fde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fca:	e008      	b.n	8007fde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40013400 	.word	0x40013400
 8008004:	40014000 	.word	0x40014000
 8008008:	40015000 	.word	0x40015000
 800800c:	00010007 	.word	0x00010007

08008010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	d001      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e054      	b.n	80080d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d022      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008052:	d01d      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a22      	ldr	r2, [pc, #136]	@ (80080e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a21      	ldr	r2, [pc, #132]	@ (80080e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <HAL_TIM_Base_Start_IT+0xdc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d115      	bne.n	80080bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	4b19      	ldr	r3, [pc, #100]	@ (80080fc <HAL_TIM_Base_Start_IT+0xec>)
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b06      	cmp	r3, #6
 80080a0:	d015      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a8:	d011      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ba:	e008      	b.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e000      	b.n	80080d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40013400 	.word	0x40013400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40015000 	.word	0x40015000
 80080fc:	00010007 	.word	0x00010007

08008100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e054      	b.n	80081bc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d111      	bne.n	8008142 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fd96 	bl	8009c58 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <HAL_TIM_PWM_Init+0xc4>)
 8008138:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f001 f8df 	bl	8009318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080042a1 	.word	0x080042a1

080081c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_TIM_PWM_Start+0x24>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	bf14      	ite	ne
 80081e4:	2301      	movne	r3, #1
 80081e6:	2300      	moveq	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e03c      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d109      	bne.n	8008206 <HAL_TIM_PWM_Start+0x3e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	bf14      	ite	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	2300      	moveq	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e02f      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b08      	cmp	r3, #8
 800820a:	d109      	bne.n	8008220 <HAL_TIM_PWM_Start+0x58>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	bf14      	ite	ne
 8008218:	2301      	movne	r3, #1
 800821a:	2300      	moveq	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	e022      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b0c      	cmp	r3, #12
 8008224:	d109      	bne.n	800823a <HAL_TIM_PWM_Start+0x72>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b01      	cmp	r3, #1
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	e015      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b10      	cmp	r3, #16
 800823e:	d109      	bne.n	8008254 <HAL_TIM_PWM_Start+0x8c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	bf14      	ite	ne
 800824c:	2301      	movne	r3, #1
 800824e:	2300      	moveq	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	e008      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0a6      	b.n	80083bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <HAL_TIM_PWM_Start+0xb6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800827c:	e023      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d104      	bne.n	800828e <HAL_TIM_PWM_Start+0xc6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800828c:	e01b      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d104      	bne.n	800829e <HAL_TIM_PWM_Start+0xd6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800829c:	e013      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	d104      	bne.n	80082ae <HAL_TIM_PWM_Start+0xe6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082ac:	e00b      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d104      	bne.n	80082be <HAL_TIM_PWM_Start+0xf6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082bc:	e003      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 fc9c 	bl	8009c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a3a      	ldr	r2, [pc, #232]	@ (80083c4 <HAL_TIM_PWM_Start+0x1fc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d018      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a39      	ldr	r2, [pc, #228]	@ (80083c8 <HAL_TIM_PWM_Start+0x200>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a37      	ldr	r2, [pc, #220]	@ (80083cc <HAL_TIM_PWM_Start+0x204>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a36      	ldr	r2, [pc, #216]	@ (80083d0 <HAL_TIM_PWM_Start+0x208>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a34      	ldr	r2, [pc, #208]	@ (80083d4 <HAL_TIM_PWM_Start+0x20c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a33      	ldr	r2, [pc, #204]	@ (80083d8 <HAL_TIM_PWM_Start+0x210>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d101      	bne.n	8008314 <HAL_TIM_PWM_Start+0x14c>
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <HAL_TIM_PWM_Start+0x14e>
 8008314:	2300      	movs	r3, #0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a25      	ldr	r2, [pc, #148]	@ (80083c4 <HAL_TIM_PWM_Start+0x1fc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833c:	d01d      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a26      	ldr	r2, [pc, #152]	@ (80083dc <HAL_TIM_PWM_Start+0x214>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a24      	ldr	r2, [pc, #144]	@ (80083e0 <HAL_TIM_PWM_Start+0x218>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a23      	ldr	r2, [pc, #140]	@ (80083e4 <HAL_TIM_PWM_Start+0x21c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a19      	ldr	r2, [pc, #100]	@ (80083c8 <HAL_TIM_PWM_Start+0x200>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a18      	ldr	r2, [pc, #96]	@ (80083cc <HAL_TIM_PWM_Start+0x204>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_TIM_PWM_Start+0x1b2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <HAL_TIM_PWM_Start+0x210>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d115      	bne.n	80083a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	4b19      	ldr	r3, [pc, #100]	@ (80083e8 <HAL_TIM_PWM_Start+0x220>)
 8008382:	4013      	ands	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b06      	cmp	r3, #6
 800838a:	d015      	beq.n	80083b8 <HAL_TIM_PWM_Start+0x1f0>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008392:	d011      	beq.n	80083b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a4:	e008      	b.n	80083b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0201 	orr.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e000      	b.n	80083ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	40013400 	.word	0x40013400
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40014400 	.word	0x40014400
 80083d4:	40014800 	.word	0x40014800
 80083d8:	40015000 	.word	0x40015000
 80083dc:	40000400 	.word	0x40000400
 80083e0:	40000800 	.word	0x40000800
 80083e4:	40000c00 	.word	0x40000c00
 80083e8:	00010007 	.word	0x00010007

080083ec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e04c      	b.n	800849a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d111      	bne.n	8008430 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fc1f 	bl	8009c58 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1f      	ldr	r2, [pc, #124]	@ (80084a4 <HAL_TIM_OnePulse_Init+0xb8>)
 8008426:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f000 ff68 	bl	8009318 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0208 	bic.w	r2, r2, #8
 8008456:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6819      	ldr	r1, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	080084a9 	.word	0x080084a9

080084a8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d108      	bne.n	80084fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d105      	bne.n	80084fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084f2:	7b7b      	ldrb	r3, [r7, #13]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d102      	bne.n	80084fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084f8:	7b3b      	ldrb	r3, [r7, #12]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e059      	b.n	80085b6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0202 	orr.w	r2, r2, #2
 8008530:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0204 	orr.w	r2, r2, #4
 8008540:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2201      	movs	r2, #1
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fb5e 	bl	8009c0c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	2104      	movs	r1, #4
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fb57 	bl	8009c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a17      	ldr	r2, [pc, #92]	@ (80085c0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d018      	beq.n	800859a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a15      	ldr	r2, [pc, #84]	@ (80085c4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a14      	ldr	r2, [pc, #80]	@ (80085c8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00e      	beq.n	800859a <HAL_TIM_OnePulse_Start_IT+0xde>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a12      	ldr	r2, [pc, #72]	@ (80085cc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d009      	beq.n	800859a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a11      	ldr	r2, [pc, #68]	@ (80085d0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d004      	beq.n	800859a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d101      	bne.n	800859e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40013400 	.word	0x40013400
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40014400 	.word	0x40014400
 80085d0:	40014800 	.word	0x40014800
 80085d4:	40015000 	.word	0x40015000

080085d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0a2      	b.n	8008732 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d111      	bne.n	800861c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fb29 	bl	8009c58 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a4a      	ldr	r2, [pc, #296]	@ (800873c <HAL_TIM_Encoder_Init+0x164>)
 8008612:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6812      	ldr	r2, [r2, #0]
 800862e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008632:	f023 0307 	bic.w	r3, r3, #7
 8008636:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f000 fe68 	bl	8009318 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	4313      	orrs	r3, r2
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800868e:	f023 030c 	bic.w	r3, r3, #12
 8008692:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800869a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800869e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	4313      	orrs	r3, r2
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	011a      	lsls	r2, r3, #4
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	031b      	lsls	r3, r3, #12
 80086be:	4313      	orrs	r3, r2
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80086cc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80086d4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	4313      	orrs	r3, r2
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	080043bd 	.word	0x080043bd

08008740 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008750:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008758:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008760:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008768:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d110      	bne.n	8008792 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d102      	bne.n	800877c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008776:	7b7b      	ldrb	r3, [r7, #13]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d001      	beq.n	8008780 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e069      	b.n	8008854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008790:	e031      	b.n	80087f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b04      	cmp	r3, #4
 8008796:	d110      	bne.n	80087ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d102      	bne.n	80087a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800879e:	7b3b      	ldrb	r3, [r7, #12]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d001      	beq.n	80087a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e055      	b.n	8008854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087b8:	e01d      	b.n	80087f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d108      	bne.n	80087d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d105      	bne.n	80087d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087c6:	7b7b      	ldrb	r3, [r7, #13]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d102      	bne.n	80087d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087cc:	7b3b      	ldrb	r3, [r7, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d001      	beq.n	80087d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e03e      	b.n	8008854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_TIM_Encoder_Start+0xc4>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d008      	beq.n	8008814 <HAL_TIM_Encoder_Start+0xd4>
 8008802:	e00f      	b.n	8008824 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2201      	movs	r2, #1
 800880a:	2100      	movs	r1, #0
 800880c:	4618      	mov	r0, r3
 800880e:	f001 f9fd 	bl	8009c0c <TIM_CCxChannelCmd>
      break;
 8008812:	e016      	b.n	8008842 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	2104      	movs	r1, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f9f5 	bl	8009c0c <TIM_CCxChannelCmd>
      break;
 8008822:	e00e      	b.n	8008842 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f001 f9ed 	bl	8009c0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2201      	movs	r2, #1
 8008838:	2104      	movs	r1, #4
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f9e6 	bl	8009c0c <TIM_CCxChannelCmd>
      break;
 8008840:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d026      	beq.n	80088cc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d021      	beq.n	80088cc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0202 	mvn.w	r2, #2
 8008890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
 80088b0:	e009      	b.n	80088c6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d026      	beq.n	8008924 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d021      	beq.n	8008924 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0204 	mvn.w	r2, #4
 80088e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
 8008908:	e009      	b.n	800891e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d026      	beq.n	800897c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b00      	cmp	r3, #0
 8008936:	d021      	beq.n	800897c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0208 	mvn.w	r2, #8
 8008940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2204      	movs	r2, #4
 8008946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
 8008960:	e009      	b.n	8008976 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	2b00      	cmp	r3, #0
 8008984:	d026      	beq.n	80089d4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	d021      	beq.n	80089d4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f06f 0210 	mvn.w	r2, #16
 8008998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2208      	movs	r2, #8
 800899e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
 80089b8:	e009      	b.n	80089ce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0201 	mvn.w	r2, #1
 80089f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00e      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f06f 0220 	mvn.w	r2, #32
 8008a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e0ff      	b.n	8008d6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b14      	cmp	r3, #20
 8008b7a:	f200 80f0 	bhi.w	8008d5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008d5f 	.word	0x08008d5f
 8008b8c:	08008d5f 	.word	0x08008d5f
 8008b90:	08008d5f 	.word	0x08008d5f
 8008b94:	08008c19 	.word	0x08008c19
 8008b98:	08008d5f 	.word	0x08008d5f
 8008b9c:	08008d5f 	.word	0x08008d5f
 8008ba0:	08008d5f 	.word	0x08008d5f
 8008ba4:	08008c5b 	.word	0x08008c5b
 8008ba8:	08008d5f 	.word	0x08008d5f
 8008bac:	08008d5f 	.word	0x08008d5f
 8008bb0:	08008d5f 	.word	0x08008d5f
 8008bb4:	08008c9b 	.word	0x08008c9b
 8008bb8:	08008d5f 	.word	0x08008d5f
 8008bbc:	08008d5f 	.word	0x08008d5f
 8008bc0:	08008d5f 	.word	0x08008d5f
 8008bc4:	08008cdd 	.word	0x08008cdd
 8008bc8:	08008d5f 	.word	0x08008d5f
 8008bcc:	08008d5f 	.word	0x08008d5f
 8008bd0:	08008d5f 	.word	0x08008d5f
 8008bd4:	08008d1d 	.word	0x08008d1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fc4e 	bl	8009480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0204 	bic.w	r2, r2, #4
 8008c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6999      	ldr	r1, [r3, #24]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	619a      	str	r2, [r3, #24]
      break;
 8008c16:	e0a5      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fcc8 	bl	80095b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6999      	ldr	r1, [r3, #24]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	021a      	lsls	r2, r3, #8
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	619a      	str	r2, [r3, #24]
      break;
 8008c58:	e084      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fd3b 	bl	80096dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0208 	orr.w	r2, r2, #8
 8008c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0204 	bic.w	r2, r2, #4
 8008c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69d9      	ldr	r1, [r3, #28]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	61da      	str	r2, [r3, #28]
      break;
 8008c98:	e064      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fdad 	bl	8009800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69d9      	ldr	r1, [r3, #28]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	021a      	lsls	r2, r3, #8
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	61da      	str	r2, [r3, #28]
      break;
 8008cda:	e043      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fe20 	bl	8009928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0208 	orr.w	r2, r2, #8
 8008cf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0204 	bic.w	r2, r2, #4
 8008d06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	691a      	ldr	r2, [r3, #16]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d1a:	e023      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fe6a 	bl	80099fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	021a      	lsls	r2, r3, #8
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d5c:	e002      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	75fb      	strb	r3, [r7, #23]
      break;
 8008d62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop

08008d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_TIM_ConfigClockSource+0x1c>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e0f6      	b.n	8008f82 <HAL_TIM_ConfigClockSource+0x20a>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008db2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a6f      	ldr	r2, [pc, #444]	@ (8008f8c <HAL_TIM_ConfigClockSource+0x214>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	f000 80c1 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8008f8c <HAL_TIM_ConfigClockSource+0x214>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	f200 80c6 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ddc:	4a6c      	ldr	r2, [pc, #432]	@ (8008f90 <HAL_TIM_ConfigClockSource+0x218>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	f000 80b9 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008de4:	4a6a      	ldr	r2, [pc, #424]	@ (8008f90 <HAL_TIM_ConfigClockSource+0x218>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	f200 80be 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dec:	4a69      	ldr	r2, [pc, #420]	@ (8008f94 <HAL_TIM_ConfigClockSource+0x21c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	f000 80b1 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008df4:	4a67      	ldr	r2, [pc, #412]	@ (8008f94 <HAL_TIM_ConfigClockSource+0x21c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	f200 80b6 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dfc:	4a66      	ldr	r2, [pc, #408]	@ (8008f98 <HAL_TIM_ConfigClockSource+0x220>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	f000 80a9 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e04:	4a64      	ldr	r2, [pc, #400]	@ (8008f98 <HAL_TIM_ConfigClockSource+0x220>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	f200 80ae 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e0c:	4a63      	ldr	r2, [pc, #396]	@ (8008f9c <HAL_TIM_ConfigClockSource+0x224>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	f000 80a1 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e14:	4a61      	ldr	r2, [pc, #388]	@ (8008f9c <HAL_TIM_ConfigClockSource+0x224>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	f200 80a6 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e1c:	4a60      	ldr	r2, [pc, #384]	@ (8008fa0 <HAL_TIM_ConfigClockSource+0x228>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f000 8099 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e24:	4a5e      	ldr	r2, [pc, #376]	@ (8008fa0 <HAL_TIM_ConfigClockSource+0x228>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	f200 809e 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e30:	f000 8091 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e38:	f200 8096 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e40:	f000 8089 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e48:	f200 808e 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e50:	d03e      	beq.n	8008ed0 <HAL_TIM_ConfigClockSource+0x158>
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e56:	f200 8087 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e5e:	f000 8086 	beq.w	8008f6e <HAL_TIM_ConfigClockSource+0x1f6>
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e66:	d87f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e68:	2b70      	cmp	r3, #112	@ 0x70
 8008e6a:	d01a      	beq.n	8008ea2 <HAL_TIM_ConfigClockSource+0x12a>
 8008e6c:	2b70      	cmp	r3, #112	@ 0x70
 8008e6e:	d87b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e70:	2b60      	cmp	r3, #96	@ 0x60
 8008e72:	d050      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x19e>
 8008e74:	2b60      	cmp	r3, #96	@ 0x60
 8008e76:	d877      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e78:	2b50      	cmp	r3, #80	@ 0x50
 8008e7a:	d03c      	beq.n	8008ef6 <HAL_TIM_ConfigClockSource+0x17e>
 8008e7c:	2b50      	cmp	r3, #80	@ 0x50
 8008e7e:	d873      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e80:	2b40      	cmp	r3, #64	@ 0x40
 8008e82:	d058      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x1be>
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d86f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e88:	2b30      	cmp	r3, #48	@ 0x30
 8008e8a:	d064      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e8c:	2b30      	cmp	r3, #48	@ 0x30
 8008e8e:	d86b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d060      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d867      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05c      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d05a      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1de>
 8008ea0:	e062      	b.n	8008f68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008eb2:	f000 fe8b 	bl	8009bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	609a      	str	r2, [r3, #8]
      break;
 8008ece:	e04f      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ee0:	f000 fe74 	bl	8009bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ef2:	609a      	str	r2, [r3, #8]
      break;
 8008ef4:	e03c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f02:	461a      	mov	r2, r3
 8008f04:	f000 fde6 	bl	8009ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2150      	movs	r1, #80	@ 0x50
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fe3f 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 8008f14:	e02c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f22:	461a      	mov	r2, r3
 8008f24:	f000 fe05 	bl	8009b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2160      	movs	r1, #96	@ 0x60
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fe2f 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 8008f34:	e01c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 fdc6 	bl	8009ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2140      	movs	r1, #64	@ 0x40
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fe1f 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 8008f54:	e00c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f000 fe16 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 8008f66:	e003      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6c:	e000      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	00100070 	.word	0x00100070
 8008f90:	00100060 	.word	0x00100060
 8008f94:	00100050 	.word	0x00100050
 8008f98:	00100040 	.word	0x00100040
 8008f9c:	00100030 	.word	0x00100030
 8008fa0:	00100020 	.word	0x00100020

08008fa4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	460b      	mov	r3, r1
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e14a      	b.n	800930a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	f040 80dd 	bne.w	800923c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b1f      	cmp	r3, #31
 8009086:	f200 80d6 	bhi.w	8009236 <HAL_TIM_RegisterCallback+0x1de>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <HAL_TIM_RegisterCallback+0x38>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	08009111 	.word	0x08009111
 8009094:	08009119 	.word	0x08009119
 8009098:	08009121 	.word	0x08009121
 800909c:	08009129 	.word	0x08009129
 80090a0:	08009131 	.word	0x08009131
 80090a4:	08009139 	.word	0x08009139
 80090a8:	08009141 	.word	0x08009141
 80090ac:	08009149 	.word	0x08009149
 80090b0:	08009151 	.word	0x08009151
 80090b4:	08009159 	.word	0x08009159
 80090b8:	08009161 	.word	0x08009161
 80090bc:	08009169 	.word	0x08009169
 80090c0:	08009171 	.word	0x08009171
 80090c4:	08009179 	.word	0x08009179
 80090c8:	08009183 	.word	0x08009183
 80090cc:	0800918d 	.word	0x0800918d
 80090d0:	08009197 	.word	0x08009197
 80090d4:	080091a1 	.word	0x080091a1
 80090d8:	080091ab 	.word	0x080091ab
 80090dc:	080091b5 	.word	0x080091b5
 80090e0:	080091bf 	.word	0x080091bf
 80090e4:	080091c9 	.word	0x080091c9
 80090e8:	080091d3 	.word	0x080091d3
 80090ec:	080091dd 	.word	0x080091dd
 80090f0:	080091e7 	.word	0x080091e7
 80090f4:	080091f1 	.word	0x080091f1
 80090f8:	080091fb 	.word	0x080091fb
 80090fc:	08009205 	.word	0x08009205
 8009100:	0800920f 	.word	0x0800920f
 8009104:	08009219 	.word	0x08009219
 8009108:	08009223 	.word	0x08009223
 800910c:	0800922d 	.word	0x0800922d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009116:	e0f7      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800911e:	e0f3      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009126:	e0ef      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800912e:	e0eb      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009136:	e0e7      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800913e:	e0e3      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009146:	e0df      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800914e:	e0db      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009156:	e0d7      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800915e:	e0d3      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009166:	e0cf      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800916e:	e0cb      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009176:	e0c7      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009180:	e0c2      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800918a:	e0bd      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009194:	e0b8      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800919e:	e0b3      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80091a8:	e0ae      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80091b2:	e0a9      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80091bc:	e0a4      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80091c6:	e09f      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80091d0:	e09a      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80091da:	e095      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80091e4:	e090      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80091ee:	e08b      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80091f8:	e086      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009202:	e081      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800920c:	e07c      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009216:	e077      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009220:	e072      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800922a:	e06d      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009234:	e068      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]
        break;
 800923a:	e065      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d15d      	bne.n	8009304 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	2b0d      	cmp	r3, #13
 800924c:	d857      	bhi.n	80092fe <HAL_TIM_RegisterCallback+0x2a6>
 800924e:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <HAL_TIM_RegisterCallback+0x1fc>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	0800928d 	.word	0x0800928d
 8009258:	08009295 	.word	0x08009295
 800925c:	0800929d 	.word	0x0800929d
 8009260:	080092a5 	.word	0x080092a5
 8009264:	080092ad 	.word	0x080092ad
 8009268:	080092b5 	.word	0x080092b5
 800926c:	080092bd 	.word	0x080092bd
 8009270:	080092c5 	.word	0x080092c5
 8009274:	080092cd 	.word	0x080092cd
 8009278:	080092d5 	.word	0x080092d5
 800927c:	080092dd 	.word	0x080092dd
 8009280:	080092e5 	.word	0x080092e5
 8009284:	080092ed 	.word	0x080092ed
 8009288:	080092f5 	.word	0x080092f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009292:	e039      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800929a:	e035      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80092a2:	e031      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80092aa:	e02d      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80092b2:	e029      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80092ba:	e025      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80092c2:	e021      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80092ca:	e01d      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80092d2:	e019      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80092da:	e015      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80092e2:	e011      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80092ea:	e00d      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80092f2:	e009      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80092fc:	e004      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
        break;
 8009302:	e001      	b.n	8009308 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
}
 800930a:	4618      	mov	r0, r3
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop

08009318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a4c      	ldr	r2, [pc, #304]	@ (800945c <TIM_Base_SetConfig+0x144>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d017      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009336:	d013      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a49      	ldr	r2, [pc, #292]	@ (8009460 <TIM_Base_SetConfig+0x148>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a48      	ldr	r2, [pc, #288]	@ (8009464 <TIM_Base_SetConfig+0x14c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a47      	ldr	r2, [pc, #284]	@ (8009468 <TIM_Base_SetConfig+0x150>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a46      	ldr	r2, [pc, #280]	@ (800946c <TIM_Base_SetConfig+0x154>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_Base_SetConfig+0x48>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a45      	ldr	r2, [pc, #276]	@ (8009470 <TIM_Base_SetConfig+0x158>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d108      	bne.n	8009372 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a39      	ldr	r2, [pc, #228]	@ (800945c <TIM_Base_SetConfig+0x144>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d023      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009380:	d01f      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a36      	ldr	r2, [pc, #216]	@ (8009460 <TIM_Base_SetConfig+0x148>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d01b      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a35      	ldr	r2, [pc, #212]	@ (8009464 <TIM_Base_SetConfig+0x14c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d017      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a34      	ldr	r2, [pc, #208]	@ (8009468 <TIM_Base_SetConfig+0x150>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a33      	ldr	r2, [pc, #204]	@ (800946c <TIM_Base_SetConfig+0x154>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00f      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a33      	ldr	r2, [pc, #204]	@ (8009474 <TIM_Base_SetConfig+0x15c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a32      	ldr	r2, [pc, #200]	@ (8009478 <TIM_Base_SetConfig+0x160>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d007      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a31      	ldr	r2, [pc, #196]	@ (800947c <TIM_Base_SetConfig+0x164>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_Base_SetConfig+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2c      	ldr	r2, [pc, #176]	@ (8009470 <TIM_Base_SetConfig+0x158>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d108      	bne.n	80093d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a18      	ldr	r2, [pc, #96]	@ (800945c <TIM_Base_SetConfig+0x144>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d013      	beq.n	8009428 <TIM_Base_SetConfig+0x110>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a1a      	ldr	r2, [pc, #104]	@ (800946c <TIM_Base_SetConfig+0x154>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00f      	beq.n	8009428 <TIM_Base_SetConfig+0x110>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1a      	ldr	r2, [pc, #104]	@ (8009474 <TIM_Base_SetConfig+0x15c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00b      	beq.n	8009428 <TIM_Base_SetConfig+0x110>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a19      	ldr	r2, [pc, #100]	@ (8009478 <TIM_Base_SetConfig+0x160>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d007      	beq.n	8009428 <TIM_Base_SetConfig+0x110>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a18      	ldr	r2, [pc, #96]	@ (800947c <TIM_Base_SetConfig+0x164>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <TIM_Base_SetConfig+0x110>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a13      	ldr	r2, [pc, #76]	@ (8009470 <TIM_Base_SetConfig+0x158>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d103      	bne.n	8009430 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b01      	cmp	r3, #1
 8009440:	d105      	bne.n	800944e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f023 0201 	bic.w	r2, r3, #1
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	611a      	str	r2, [r3, #16]
  }
}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40012c00 	.word	0x40012c00
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40013400 	.word	0x40013400
 8009470:	40015000 	.word	0x40015000
 8009474:	40014000 	.word	0x40014000
 8009478:	40014400 	.word	0x40014400
 800947c:	40014800 	.word	0x40014800

08009480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	f023 0201 	bic.w	r2, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f023 0302 	bic.w	r3, r3, #2
 80094cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a30      	ldr	r2, [pc, #192]	@ (800959c <TIM_OC1_SetConfig+0x11c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d013      	beq.n	8009508 <TIM_OC1_SetConfig+0x88>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a2f      	ldr	r2, [pc, #188]	@ (80095a0 <TIM_OC1_SetConfig+0x120>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00f      	beq.n	8009508 <TIM_OC1_SetConfig+0x88>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a2e      	ldr	r2, [pc, #184]	@ (80095a4 <TIM_OC1_SetConfig+0x124>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00b      	beq.n	8009508 <TIM_OC1_SetConfig+0x88>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a2d      	ldr	r2, [pc, #180]	@ (80095a8 <TIM_OC1_SetConfig+0x128>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d007      	beq.n	8009508 <TIM_OC1_SetConfig+0x88>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a2c      	ldr	r2, [pc, #176]	@ (80095ac <TIM_OC1_SetConfig+0x12c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_OC1_SetConfig+0x88>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a2b      	ldr	r2, [pc, #172]	@ (80095b0 <TIM_OC1_SetConfig+0x130>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d10c      	bne.n	8009522 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0308 	bic.w	r3, r3, #8
 800950e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	4313      	orrs	r3, r2
 8009518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f023 0304 	bic.w	r3, r3, #4
 8009520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a1d      	ldr	r2, [pc, #116]	@ (800959c <TIM_OC1_SetConfig+0x11c>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <TIM_OC1_SetConfig+0xd2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a1c      	ldr	r2, [pc, #112]	@ (80095a0 <TIM_OC1_SetConfig+0x120>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00f      	beq.n	8009552 <TIM_OC1_SetConfig+0xd2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a1b      	ldr	r2, [pc, #108]	@ (80095a4 <TIM_OC1_SetConfig+0x124>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00b      	beq.n	8009552 <TIM_OC1_SetConfig+0xd2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a1a      	ldr	r2, [pc, #104]	@ (80095a8 <TIM_OC1_SetConfig+0x128>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_OC1_SetConfig+0xd2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a19      	ldr	r2, [pc, #100]	@ (80095ac <TIM_OC1_SetConfig+0x12c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_OC1_SetConfig+0xd2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a18      	ldr	r2, [pc, #96]	@ (80095b0 <TIM_OC1_SetConfig+0x130>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d111      	bne.n	8009576 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	4313      	orrs	r3, r2
 8009574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	621a      	str	r2, [r3, #32]
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	40012c00 	.word	0x40012c00
 80095a0:	40013400 	.word	0x40013400
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40014400 	.word	0x40014400
 80095ac:	40014800 	.word	0x40014800
 80095b0:	40015000 	.word	0x40015000

080095b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	f023 0210 	bic.w	r2, r3, #16
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0320 	bic.w	r3, r3, #32
 8009602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a2c      	ldr	r2, [pc, #176]	@ (80096c4 <TIM_OC2_SetConfig+0x110>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d007      	beq.n	8009628 <TIM_OC2_SetConfig+0x74>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2b      	ldr	r2, [pc, #172]	@ (80096c8 <TIM_OC2_SetConfig+0x114>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_OC2_SetConfig+0x74>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2a      	ldr	r2, [pc, #168]	@ (80096cc <TIM_OC2_SetConfig+0x118>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d10d      	bne.n	8009644 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800962e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	4313      	orrs	r3, r2
 800963a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1f      	ldr	r2, [pc, #124]	@ (80096c4 <TIM_OC2_SetConfig+0x110>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <TIM_OC2_SetConfig+0xc0>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <TIM_OC2_SetConfig+0x114>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00f      	beq.n	8009674 <TIM_OC2_SetConfig+0xc0>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a1e      	ldr	r2, [pc, #120]	@ (80096d0 <TIM_OC2_SetConfig+0x11c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00b      	beq.n	8009674 <TIM_OC2_SetConfig+0xc0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1d      	ldr	r2, [pc, #116]	@ (80096d4 <TIM_OC2_SetConfig+0x120>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_OC2_SetConfig+0xc0>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <TIM_OC2_SetConfig+0x124>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_OC2_SetConfig+0xc0>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a17      	ldr	r2, [pc, #92]	@ (80096cc <TIM_OC2_SetConfig+0x118>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d113      	bne.n	800969c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800967a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	621a      	str	r2, [r3, #32]
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	40012c00 	.word	0x40012c00
 80096c8:	40013400 	.word	0x40013400
 80096cc:	40015000 	.word	0x40015000
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40014400 	.word	0x40014400
 80096d8:	40014800 	.word	0x40014800

080096dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800970a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800970e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a2b      	ldr	r2, [pc, #172]	@ (80097e8 <TIM_OC3_SetConfig+0x10c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d007      	beq.n	800974e <TIM_OC3_SetConfig+0x72>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a2a      	ldr	r2, [pc, #168]	@ (80097ec <TIM_OC3_SetConfig+0x110>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d003      	beq.n	800974e <TIM_OC3_SetConfig+0x72>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a29      	ldr	r2, [pc, #164]	@ (80097f0 <TIM_OC3_SetConfig+0x114>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d10d      	bne.n	800976a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a1e      	ldr	r2, [pc, #120]	@ (80097e8 <TIM_OC3_SetConfig+0x10c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <TIM_OC3_SetConfig+0xbe>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a1d      	ldr	r2, [pc, #116]	@ (80097ec <TIM_OC3_SetConfig+0x110>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00f      	beq.n	800979a <TIM_OC3_SetConfig+0xbe>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a1d      	ldr	r2, [pc, #116]	@ (80097f4 <TIM_OC3_SetConfig+0x118>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00b      	beq.n	800979a <TIM_OC3_SetConfig+0xbe>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a1c      	ldr	r2, [pc, #112]	@ (80097f8 <TIM_OC3_SetConfig+0x11c>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d007      	beq.n	800979a <TIM_OC3_SetConfig+0xbe>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a1b      	ldr	r2, [pc, #108]	@ (80097fc <TIM_OC3_SetConfig+0x120>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d003      	beq.n	800979a <TIM_OC3_SetConfig+0xbe>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a16      	ldr	r2, [pc, #88]	@ (80097f0 <TIM_OC3_SetConfig+0x114>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d113      	bne.n	80097c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	621a      	str	r2, [r3, #32]
}
 80097dc:	bf00      	nop
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	40012c00 	.word	0x40012c00
 80097ec:	40013400 	.word	0x40013400
 80097f0:	40015000 	.word	0x40015000
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40014400 	.word	0x40014400
 80097fc:	40014800 	.word	0x40014800

08009800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800982e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800983a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800984e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	031b      	lsls	r3, r3, #12
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a2c      	ldr	r2, [pc, #176]	@ (8009910 <TIM_OC4_SetConfig+0x110>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_OC4_SetConfig+0x74>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a2b      	ldr	r2, [pc, #172]	@ (8009914 <TIM_OC4_SetConfig+0x114>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC4_SetConfig+0x74>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a2a      	ldr	r2, [pc, #168]	@ (8009918 <TIM_OC4_SetConfig+0x118>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d10d      	bne.n	8009890 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	031b      	lsls	r3, r3, #12
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800988e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <TIM_OC4_SetConfig+0x110>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d013      	beq.n	80098c0 <TIM_OC4_SetConfig+0xc0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a1e      	ldr	r2, [pc, #120]	@ (8009914 <TIM_OC4_SetConfig+0x114>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00f      	beq.n	80098c0 <TIM_OC4_SetConfig+0xc0>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a1e      	ldr	r2, [pc, #120]	@ (800991c <TIM_OC4_SetConfig+0x11c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00b      	beq.n	80098c0 <TIM_OC4_SetConfig+0xc0>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009920 <TIM_OC4_SetConfig+0x120>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d007      	beq.n	80098c0 <TIM_OC4_SetConfig+0xc0>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <TIM_OC4_SetConfig+0x124>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d003      	beq.n	80098c0 <TIM_OC4_SetConfig+0xc0>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a17      	ldr	r2, [pc, #92]	@ (8009918 <TIM_OC4_SetConfig+0x118>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d113      	bne.n	80098e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	019b      	lsls	r3, r3, #6
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	019b      	lsls	r3, r3, #6
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	621a      	str	r2, [r3, #32]
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40012c00 	.word	0x40012c00
 8009914:	40013400 	.word	0x40013400
 8009918:	40015000 	.word	0x40015000
 800991c:	40014000 	.word	0x40014000
 8009920:	40014400 	.word	0x40014400
 8009924:	40014800 	.word	0x40014800

08009928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4313      	orrs	r3, r2
 8009964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800996c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	041b      	lsls	r3, r3, #16
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4313      	orrs	r3, r2
 8009978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a19      	ldr	r2, [pc, #100]	@ (80099e4 <TIM_OC5_SetConfig+0xbc>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <TIM_OC5_SetConfig+0x82>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a18      	ldr	r2, [pc, #96]	@ (80099e8 <TIM_OC5_SetConfig+0xc0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00f      	beq.n	80099aa <TIM_OC5_SetConfig+0x82>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a17      	ldr	r2, [pc, #92]	@ (80099ec <TIM_OC5_SetConfig+0xc4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00b      	beq.n	80099aa <TIM_OC5_SetConfig+0x82>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a16      	ldr	r2, [pc, #88]	@ (80099f0 <TIM_OC5_SetConfig+0xc8>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d007      	beq.n	80099aa <TIM_OC5_SetConfig+0x82>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a15      	ldr	r2, [pc, #84]	@ (80099f4 <TIM_OC5_SetConfig+0xcc>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d003      	beq.n	80099aa <TIM_OC5_SetConfig+0x82>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a14      	ldr	r2, [pc, #80]	@ (80099f8 <TIM_OC5_SetConfig+0xd0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d109      	bne.n	80099be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	621a      	str	r2, [r3, #32]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	40012c00 	.word	0x40012c00
 80099e8:	40013400 	.word	0x40013400
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40014400 	.word	0x40014400
 80099f4:	40014800 	.word	0x40014800
 80099f8:	40015000 	.word	0x40015000

080099fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b087      	sub	sp, #28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	051b      	lsls	r3, r3, #20
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a1a      	ldr	r2, [pc, #104]	@ (8009abc <TIM_OC6_SetConfig+0xc0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d013      	beq.n	8009a80 <TIM_OC6_SetConfig+0x84>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a19      	ldr	r2, [pc, #100]	@ (8009ac0 <TIM_OC6_SetConfig+0xc4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00f      	beq.n	8009a80 <TIM_OC6_SetConfig+0x84>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a18      	ldr	r2, [pc, #96]	@ (8009ac4 <TIM_OC6_SetConfig+0xc8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00b      	beq.n	8009a80 <TIM_OC6_SetConfig+0x84>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a17      	ldr	r2, [pc, #92]	@ (8009ac8 <TIM_OC6_SetConfig+0xcc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d007      	beq.n	8009a80 <TIM_OC6_SetConfig+0x84>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <TIM_OC6_SetConfig+0xd0>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_OC6_SetConfig+0x84>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a15      	ldr	r2, [pc, #84]	@ (8009ad0 <TIM_OC6_SetConfig+0xd4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d109      	bne.n	8009a94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	029b      	lsls	r3, r3, #10
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	40013400 	.word	0x40013400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	40014400 	.word	0x40014400
 8009acc:	40014800 	.word	0x40014800
 8009ad0:	40015000 	.word	0x40015000

08009ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f023 030a 	bic.w	r3, r3, #10
 8009b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	621a      	str	r2, [r3, #32]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b087      	sub	sp, #28
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	f023 0210 	bic.w	r2, r3, #16
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	031b      	lsls	r3, r3, #12
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	621a      	str	r2, [r3, #32]
}
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f043 0307 	orr.w	r3, r3, #7
 8009bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]
}
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	021a      	lsls	r2, r3, #8
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	2201      	movs	r2, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	401a      	ands	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 031f 	and.w	r3, r3, #31
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	fa01 f303 	lsl.w	r3, r1, r3
 8009c44:	431a      	orrs	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a26      	ldr	r2, [pc, #152]	@ (8009cfc <TIM_ResetCallback+0xa4>)
 8009c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a25      	ldr	r2, [pc, #148]	@ (8009d00 <TIM_ResetCallback+0xa8>)
 8009c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a24      	ldr	r2, [pc, #144]	@ (8009d04 <TIM_ResetCallback+0xac>)
 8009c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a23      	ldr	r2, [pc, #140]	@ (8009d08 <TIM_ResetCallback+0xb0>)
 8009c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a22      	ldr	r2, [pc, #136]	@ (8009d0c <TIM_ResetCallback+0xb4>)
 8009c84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a21      	ldr	r2, [pc, #132]	@ (8009d10 <TIM_ResetCallback+0xb8>)
 8009c8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a20      	ldr	r2, [pc, #128]	@ (8009d14 <TIM_ResetCallback+0xbc>)
 8009c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8009d18 <TIM_ResetCallback+0xc0>)
 8009c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d1c <TIM_ResetCallback+0xc4>)
 8009ca4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a1d      	ldr	r2, [pc, #116]	@ (8009d20 <TIM_ResetCallback+0xc8>)
 8009cac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8009d24 <TIM_ResetCallback+0xcc>)
 8009cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <TIM_ResetCallback+0xd0>)
 8009cbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8009d2c <TIM_ResetCallback+0xd4>)
 8009cc4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a19      	ldr	r2, [pc, #100]	@ (8009d30 <TIM_ResetCallback+0xd8>)
 8009ccc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a18      	ldr	r2, [pc, #96]	@ (8009d34 <TIM_ResetCallback+0xdc>)
 8009cd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a17      	ldr	r2, [pc, #92]	@ (8009d38 <TIM_ResetCallback+0xe0>)
 8009cdc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a16      	ldr	r2, [pc, #88]	@ (8009d3c <TIM_ResetCallback+0xe4>)
 8009ce4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a15      	ldr	r2, [pc, #84]	@ (8009d40 <TIM_ResetCallback+0xe8>)
 8009cec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	080030d1 	.word	0x080030d1
 8009d00:	08008fa5 	.word	0x08008fa5
 8009d04:	0800901d 	.word	0x0800901d
 8009d08:	08009031 	.word	0x08009031
 8009d0c:	08008fcd 	.word	0x08008fcd
 8009d10:	08008fe1 	.word	0x08008fe1
 8009d14:	08008fb9 	.word	0x08008fb9
 8009d18:	08008ff5 	.word	0x08008ff5
 8009d1c:	08009009 	.word	0x08009009
 8009d20:	08009045 	.word	0x08009045
 8009d24:	08009f99 	.word	0x08009f99
 8009d28:	08009fad 	.word	0x08009fad
 8009d2c:	08009fc1 	.word	0x08009fc1
 8009d30:	08009fd5 	.word	0x08009fd5
 8009d34:	08009fe9 	.word	0x08009fe9
 8009d38:	08009ffd 	.word	0x08009ffd
 8009d3c:	0800a011 	.word	0x0800a011
 8009d40:	0800a025 	.word	0x0800a025

08009d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e074      	b.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a34      	ldr	r2, [pc, #208]	@ (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d009      	beq.n	8009d9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a33      	ldr	r2, [pc, #204]	@ (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d004      	beq.n	8009d9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a31      	ldr	r2, [pc, #196]	@ (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d108      	bne.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009da0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a21      	ldr	r2, [pc, #132]	@ (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d022      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ddc:	d01d      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d018      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1d      	ldr	r2, [pc, #116]	@ (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d013      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a15      	ldr	r2, [pc, #84]	@ (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a18      	ldr	r2, [pc, #96]	@ (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a11      	ldr	r2, [pc, #68]	@ (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d10c      	bne.n	8009e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	40012c00 	.word	0x40012c00
 8009e58:	40013400 	.word	0x40013400
 8009e5c:	40015000 	.word	0x40015000
 8009e60:	40000400 	.word	0x40000400
 8009e64:	40000800 	.word	0x40000800
 8009e68:	40000c00 	.word	0x40000c00
 8009e6c:	40014000 	.word	0x40014000

08009e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e078      	b.n	8009f7e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	041b      	lsls	r3, r3, #16
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1c      	ldr	r2, [pc, #112]	@ (8009f8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d009      	beq.n	8009f32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1b      	ldr	r2, [pc, #108]	@ (8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d004      	beq.n	8009f32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a19      	ldr	r2, [pc, #100]	@ (8009f94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d11c      	bne.n	8009f6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	051b      	lsls	r3, r3, #20
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	40012c00 	.word	0x40012c00
 8009f90:	40013400 	.word	0x40013400
 8009f94:	40015000 	.word	0x40015000

08009f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e050      	b.n	800a0ec <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a050:	2b00      	cmp	r3, #0
 800a052:	d114      	bne.n	800a07e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fd5b 	bl	800ab18 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a21      	ldr	r2, [pc, #132]	@ (800a0f4 <HAL_UART_Init+0xbc>)
 800a070:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2224      	movs	r2, #36	@ 0x24
 800a082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0201 	bic.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 f888 	bl	800b1b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fd89 	bl	800abbc <UART_SetConfig>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e01b      	b.n	800a0ec <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 f907 	bl	800b2f8 <UART_CheckIdleState>
 800a0ea:	4603      	mov	r3, r0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	08004655 	.word	0x08004655

0800a0f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	460b      	mov	r3, r1
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e09c      	b.n	800a25e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d16c      	bne.n	800a208 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a12e:	7afb      	ldrb	r3, [r7, #11]
 800a130:	2b0c      	cmp	r3, #12
 800a132:	d85e      	bhi.n	800a1f2 <HAL_UART_RegisterCallback+0xfa>
 800a134:	a201      	add	r2, pc, #4	@ (adr r2, 800a13c <HAL_UART_RegisterCallback+0x44>)
 800a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13a:	bf00      	nop
 800a13c:	0800a171 	.word	0x0800a171
 800a140:	0800a17b 	.word	0x0800a17b
 800a144:	0800a185 	.word	0x0800a185
 800a148:	0800a18f 	.word	0x0800a18f
 800a14c:	0800a199 	.word	0x0800a199
 800a150:	0800a1a3 	.word	0x0800a1a3
 800a154:	0800a1ad 	.word	0x0800a1ad
 800a158:	0800a1b7 	.word	0x0800a1b7
 800a15c:	0800a1c1 	.word	0x0800a1c1
 800a160:	0800a1cb 	.word	0x0800a1cb
 800a164:	0800a1d5 	.word	0x0800a1d5
 800a168:	0800a1df 	.word	0x0800a1df
 800a16c:	0800a1e9 	.word	0x0800a1e9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a178:	e070      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a182:	e06b      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a18c:	e066      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a196:	e061      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a1a0:	e05c      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a1aa:	e057      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a1b4:	e052      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a1be:	e04d      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a1c8:	e048      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a1d2:	e043      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a1dc:	e03e      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a1e6:	e039      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a1f0:	e034      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	75fb      	strb	r3, [r7, #23]
        break;
 800a206:	e029      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d11a      	bne.n	800a248 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	2b0b      	cmp	r3, #11
 800a216:	d002      	beq.n	800a21e <HAL_UART_RegisterCallback+0x126>
 800a218:	2b0c      	cmp	r3, #12
 800a21a:	d005      	beq.n	800a228 <HAL_UART_RegisterCallback+0x130>
 800a21c:	e009      	b.n	800a232 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a226:	e019      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a230:	e014      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a238:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	75fb      	strb	r3, [r7, #23]
        break;
 800a246:	e009      	b.n	800a25c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a24e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop

0800a26c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a280:	2b20      	cmp	r3, #32
 800a282:	d137      	bne.n	800a2f4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <HAL_UART_Receive_DMA+0x24>
 800a28a:	88fb      	ldrh	r3, [r7, #6]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e030      	b.n	800a2f6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a18      	ldr	r2, [pc, #96]	@ (800a300 <HAL_UART_Receive_DMA+0x94>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d01f      	beq.n	800a2e4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a2c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	69f9      	ldr	r1, [r7, #28]
 800a2d6:	6a3a      	ldr	r2, [r7, #32]
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	68b9      	ldr	r1, [r7, #8]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f001 f91c 	bl	800b528 <UART_Start_Receive_DMA>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	e000      	b.n	800a2f6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2f4:	2302      	movs	r3, #2
  }
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3728      	adds	r7, #40	@ 0x28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	40008000 	.word	0x40008000

0800a304 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b0ba      	sub	sp, #232	@ 0xe8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a32a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a32e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a332:	4013      	ands	r3, r2
 800a334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d11b      	bne.n	800a378 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a344:	f003 0320 	and.w	r3, r3, #32
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d015      	beq.n	800a378 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a35c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 8312 	beq.w	800a992 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	4798      	blx	r3
      }
      return;
 800a376:	e30c      	b.n	800a992 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 8129 	beq.w	800a5d4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a382:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a386:	4b90      	ldr	r3, [pc, #576]	@ (800a5c8 <HAL_UART_IRQHandler+0x2c4>)
 800a388:	4013      	ands	r3, r2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a38e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a392:	4b8e      	ldr	r3, [pc, #568]	@ (800a5cc <HAL_UART_IRQHandler+0x2c8>)
 800a394:	4013      	ands	r3, r2
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 811c 	beq.w	800a5d4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d011      	beq.n	800a3cc <HAL_UART_IRQHandler+0xc8>
 800a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c2:	f043 0201 	orr.w	r2, r3, #1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d011      	beq.n	800a3fc <HAL_UART_IRQHandler+0xf8>
 800a3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f2:	f043 0204 	orr.w	r2, r3, #4
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b00      	cmp	r3, #0
 800a406:	d011      	beq.n	800a42c <HAL_UART_IRQHandler+0x128>
 800a408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00b      	beq.n	800a42c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2204      	movs	r2, #4
 800a41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a422:	f043 0202 	orr.w	r2, r3, #2
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f003 0308 	and.w	r3, r3, #8
 800a434:	2b00      	cmp	r3, #0
 800a436:	d017      	beq.n	800a468 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b00      	cmp	r3, #0
 800a442:	d105      	bne.n	800a450 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a444:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a448:	4b5f      	ldr	r3, [pc, #380]	@ (800a5c8 <HAL_UART_IRQHandler+0x2c4>)
 800a44a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2208      	movs	r2, #8
 800a456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a45e:	f043 0208 	orr.w	r2, r3, #8
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a46c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a470:	2b00      	cmp	r3, #0
 800a472:	d012      	beq.n	800a49a <HAL_UART_IRQHandler+0x196>
 800a474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a478:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00c      	beq.n	800a49a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a488:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a490:	f043 0220 	orr.w	r2, r3, #32
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 8278 	beq.w	800a996 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d013      	beq.n	800a4da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ee:	2b40      	cmp	r3, #64	@ 0x40
 800a4f0:	d005      	beq.n	800a4fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d058      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 f8f9 	bl	800b6f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a50e:	2b40      	cmp	r3, #64	@ 0x40
 800a510:	d148      	bne.n	800a5a4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3308      	adds	r3, #8
 800a518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a52c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3308      	adds	r3, #8
 800a53a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a53e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a54a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1d9      	bne.n	800a512 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56e:	4a18      	ldr	r2, [pc, #96]	@ (800a5d0 <HAL_UART_IRQHandler+0x2cc>)
 800a570:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fc f8c5 	bl	8006708 <HAL_DMA_Abort_IT>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d01f      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a592:	4610      	mov	r0, r2
 800a594:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a596:	e015      	b.n	800a5c4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a2:	e00f      	b.n	800a5c4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ae:	e009      	b.n	800a5c4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a5c2:	e1e8      	b.n	800a996 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	bf00      	nop
    return;
 800a5c6:	e1e6      	b.n	800a996 <HAL_UART_IRQHandler+0x692>
 800a5c8:	10000001 	.word	0x10000001
 800a5cc:	04000120 	.word	0x04000120
 800a5d0:	0800b9c1 	.word	0x0800b9c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	f040 8176 	bne.w	800a8ca <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e2:	f003 0310 	and.w	r3, r3, #16
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 816f 	beq.w	800a8ca <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8168 	beq.w	800a8ca <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2210      	movs	r2, #16
 800a600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60c:	2b40      	cmp	r3, #64	@ 0x40
 800a60e:	f040 80dc 	bne.w	800a7ca <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80b1 	beq.w	800a78c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a634:	429a      	cmp	r2, r3
 800a636:	f080 80a9 	bcs.w	800a78c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 8087 	bne.w	800a766 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a686:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a68e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1da      	bne.n	800a658 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e1      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e3      	bne.n	800a6de <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a734:	f023 0310 	bic.w	r3, r3, #16
 800a738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a746:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a748:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a74c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e4      	bne.n	800a724 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a760:	4618      	mov	r0, r3
 800a762:	f7fb ff78 	bl	8006656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2202      	movs	r2, #2
 800a76a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a77e:	b292      	uxth	r2, r2
 800a780:	1a8a      	subs	r2, r1, r2
 800a782:	b292      	uxth	r2, r2
 800a784:	4611      	mov	r1, r2
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a78a:	e106      	b.n	800a99a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a796:	429a      	cmp	r2, r3
 800a798:	f040 80ff 	bne.w	800a99a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	f040 80f5 	bne.w	800a99a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
      return;
 800a7c8:	e0e7      	b.n	800a99a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 80d9 	beq.w	800a99e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a7ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80d4 	beq.w	800a99e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a80a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a818:	647b      	str	r3, [r7, #68]	@ 0x44
 800a81a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a81e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e4      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	623b      	str	r3, [r7, #32]
   return(result);
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a842:	f023 0301 	bic.w	r3, r3, #1
 800a846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a854:	633a      	str	r2, [r7, #48]	@ 0x30
 800a856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a85a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e1      	bne.n	800a82c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	e853 3f00 	ldrex	r3, [r3]
 800a888:	60fb      	str	r3, [r7, #12]
   return(result);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f023 0310 	bic.w	r3, r3, #16
 800a890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	69b9      	ldr	r1, [r7, #24]
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e4      	bne.n	800a87c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8be:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8c8:	e069      	b.n	800a99e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d010      	beq.n	800a8f8 <HAL_UART_IRQHandler+0x5f4>
 800a8d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a8ea:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8f6:	e055      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a900:	2b00      	cmp	r3, #0
 800a902:	d014      	beq.n	800a92e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d105      	bne.n	800a91c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d008      	beq.n	800a92e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a920:	2b00      	cmp	r3, #0
 800a922:	d03e      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
    }
    return;
 800a92c:	e039      	b.n	800a9a2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <HAL_UART_IRQHandler+0x64a>
 800a93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a93e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f001 f84e 	bl	800b9e8 <UART_EndTransmit_IT>
    return;
 800a94c:	e02a      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <HAL_UART_IRQHandler+0x66e>
 800a95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a95e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a970:	e018      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d012      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
 800a97e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a982:	2b00      	cmp	r3, #0
 800a984:	da0e      	bge.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a990:	e008      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a992:	bf00      	nop
 800a994:	e006      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a996:	bf00      	nop
 800a998:	e004      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a99a:	bf00      	nop
 800a99c:	e002      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a99e:	bf00      	nop
 800a9a0:	e000      	b.n	800a9a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a9a2:	bf00      	nop
  }
}
 800a9a4:	37e8      	adds	r7, #232	@ 0xe8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop

0800a9ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a09      	ldr	r2, [pc, #36]	@ (800aa84 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d009      	beq.n	800aa78 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	615a      	str	r2, [r3, #20]
  }
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	40008000 	.word	0x40008000

0800aa88 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a18      	ldr	r2, [pc, #96]	@ (800aaf8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d027      	beq.n	800aaea <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	d120      	bne.n	800aae6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e01c      	b.n	800aaec <HAL_UART_EnableReceiverTimeout+0x64>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2224      	movs	r2, #36	@ 0x24
 800aabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800aad0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e002      	b.n	800aaec <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800aae6:	2302      	movs	r3, #2
 800aae8:	e000      	b.n	800aaec <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
  }
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	40008000 	.word	0x40008000

0800aafc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a1a      	ldr	r2, [pc, #104]	@ (800ab8c <UART_InitCallbacksToDefault+0x74>)
 800ab24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a19      	ldr	r2, [pc, #100]	@ (800ab90 <UART_InitCallbacksToDefault+0x78>)
 800ab2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a18      	ldr	r2, [pc, #96]	@ (800ab94 <UART_InitCallbacksToDefault+0x7c>)
 800ab34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a17      	ldr	r2, [pc, #92]	@ (800ab98 <UART_InitCallbacksToDefault+0x80>)
 800ab3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a16      	ldr	r2, [pc, #88]	@ (800ab9c <UART_InitCallbacksToDefault+0x84>)
 800ab44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a15      	ldr	r2, [pc, #84]	@ (800aba0 <UART_InitCallbacksToDefault+0x88>)
 800ab4c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a14      	ldr	r2, [pc, #80]	@ (800aba4 <UART_InitCallbacksToDefault+0x8c>)
 800ab54:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a13      	ldr	r2, [pc, #76]	@ (800aba8 <UART_InitCallbacksToDefault+0x90>)
 800ab5c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a12      	ldr	r2, [pc, #72]	@ (800abac <UART_InitCallbacksToDefault+0x94>)
 800ab64:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a11      	ldr	r2, [pc, #68]	@ (800abb0 <UART_InitCallbacksToDefault+0x98>)
 800ab6c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a10      	ldr	r2, [pc, #64]	@ (800abb4 <UART_InitCallbacksToDefault+0x9c>)
 800ab74:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a0f      	ldr	r2, [pc, #60]	@ (800abb8 <UART_InitCallbacksToDefault+0xa0>)
 800ab7c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	0800a9c1 	.word	0x0800a9c1
 800ab90:	0800a9ad 	.word	0x0800a9ad
 800ab94:	0800a9d5 	.word	0x0800a9d5
 800ab98:	080030bd 	.word	0x080030bd
 800ab9c:	0800a9e9 	.word	0x0800a9e9
 800aba0:	0800a9fd 	.word	0x0800a9fd
 800aba4:	0800aa11 	.word	0x0800aa11
 800aba8:	0800aa25 	.word	0x0800aa25
 800abac:	0800ba43 	.word	0x0800ba43
 800abb0:	0800ba57 	.word	0x0800ba57
 800abb4:	0800ba6b 	.word	0x0800ba6b
 800abb8:	0800aa39 	.word	0x0800aa39

0800abbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abc0:	b08c      	sub	sp, #48	@ 0x30
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	431a      	orrs	r2, r3
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	4baa      	ldr	r3, [pc, #680]	@ (800ae94 <UART_SetConfig+0x2d8>)
 800abec:	4013      	ands	r3, r2
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf4:	430b      	orrs	r3, r1
 800abf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a9f      	ldr	r2, [pc, #636]	@ (800ae98 <UART_SetConfig+0x2dc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d004      	beq.n	800ac28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac24:	4313      	orrs	r3, r2
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ac32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	6812      	ldr	r2, [r2, #0]
 800ac3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac46:	f023 010f 	bic.w	r1, r3, #15
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a90      	ldr	r2, [pc, #576]	@ (800ae9c <UART_SetConfig+0x2e0>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d125      	bne.n	800acac <UART_SetConfig+0xf0>
 800ac60:	4b8f      	ldr	r3, [pc, #572]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800ac62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d81a      	bhi.n	800aca4 <UART_SetConfig+0xe8>
 800ac6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac74 <UART_SetConfig+0xb8>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800ac85 	.word	0x0800ac85
 800ac78:	0800ac95 	.word	0x0800ac95
 800ac7c:	0800ac8d 	.word	0x0800ac8d
 800ac80:	0800ac9d 	.word	0x0800ac9d
 800ac84:	2301      	movs	r3, #1
 800ac86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac8a:	e116      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac92:	e112      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ac94:	2304      	movs	r3, #4
 800ac96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9a:	e10e      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca2:	e10a      	b.n	800aeba <UART_SetConfig+0x2fe>
 800aca4:	2310      	movs	r3, #16
 800aca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acaa:	e106      	b.n	800aeba <UART_SetConfig+0x2fe>
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a7c      	ldr	r2, [pc, #496]	@ (800aea4 <UART_SetConfig+0x2e8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d138      	bne.n	800ad28 <UART_SetConfig+0x16c>
 800acb6:	4b7a      	ldr	r3, [pc, #488]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800acb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acbc:	f003 030c 	and.w	r3, r3, #12
 800acc0:	2b0c      	cmp	r3, #12
 800acc2:	d82d      	bhi.n	800ad20 <UART_SetConfig+0x164>
 800acc4:	a201      	add	r2, pc, #4	@ (adr r2, 800accc <UART_SetConfig+0x110>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800ad01 	.word	0x0800ad01
 800acd0:	0800ad21 	.word	0x0800ad21
 800acd4:	0800ad21 	.word	0x0800ad21
 800acd8:	0800ad21 	.word	0x0800ad21
 800acdc:	0800ad11 	.word	0x0800ad11
 800ace0:	0800ad21 	.word	0x0800ad21
 800ace4:	0800ad21 	.word	0x0800ad21
 800ace8:	0800ad21 	.word	0x0800ad21
 800acec:	0800ad09 	.word	0x0800ad09
 800acf0:	0800ad21 	.word	0x0800ad21
 800acf4:	0800ad21 	.word	0x0800ad21
 800acf8:	0800ad21 	.word	0x0800ad21
 800acfc:	0800ad19 	.word	0x0800ad19
 800ad00:	2300      	movs	r3, #0
 800ad02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad06:	e0d8      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad0e:	e0d4      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad10:	2304      	movs	r3, #4
 800ad12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad16:	e0d0      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1e:	e0cc      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad20:	2310      	movs	r3, #16
 800ad22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad26:	e0c8      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a5e      	ldr	r2, [pc, #376]	@ (800aea8 <UART_SetConfig+0x2ec>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d125      	bne.n	800ad7e <UART_SetConfig+0x1c2>
 800ad32:	4b5b      	ldr	r3, [pc, #364]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad3c:	2b30      	cmp	r3, #48	@ 0x30
 800ad3e:	d016      	beq.n	800ad6e <UART_SetConfig+0x1b2>
 800ad40:	2b30      	cmp	r3, #48	@ 0x30
 800ad42:	d818      	bhi.n	800ad76 <UART_SetConfig+0x1ba>
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d00a      	beq.n	800ad5e <UART_SetConfig+0x1a2>
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d814      	bhi.n	800ad76 <UART_SetConfig+0x1ba>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <UART_SetConfig+0x19a>
 800ad50:	2b10      	cmp	r3, #16
 800ad52:	d008      	beq.n	800ad66 <UART_SetConfig+0x1aa>
 800ad54:	e00f      	b.n	800ad76 <UART_SetConfig+0x1ba>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad5c:	e0ad      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad5e:	2302      	movs	r3, #2
 800ad60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad64:	e0a9      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad66:	2304      	movs	r3, #4
 800ad68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad6c:	e0a5      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad6e:	2308      	movs	r3, #8
 800ad70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad74:	e0a1      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad76:	2310      	movs	r3, #16
 800ad78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad7c:	e09d      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a4a      	ldr	r2, [pc, #296]	@ (800aeac <UART_SetConfig+0x2f0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d125      	bne.n	800add4 <UART_SetConfig+0x218>
 800ad88:	4b45      	ldr	r3, [pc, #276]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800ad8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad92:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad94:	d016      	beq.n	800adc4 <UART_SetConfig+0x208>
 800ad96:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad98:	d818      	bhi.n	800adcc <UART_SetConfig+0x210>
 800ad9a:	2b80      	cmp	r3, #128	@ 0x80
 800ad9c:	d00a      	beq.n	800adb4 <UART_SetConfig+0x1f8>
 800ad9e:	2b80      	cmp	r3, #128	@ 0x80
 800ada0:	d814      	bhi.n	800adcc <UART_SetConfig+0x210>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <UART_SetConfig+0x1f0>
 800ada6:	2b40      	cmp	r3, #64	@ 0x40
 800ada8:	d008      	beq.n	800adbc <UART_SetConfig+0x200>
 800adaa:	e00f      	b.n	800adcc <UART_SetConfig+0x210>
 800adac:	2300      	movs	r3, #0
 800adae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adb2:	e082      	b.n	800aeba <UART_SetConfig+0x2fe>
 800adb4:	2302      	movs	r3, #2
 800adb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adba:	e07e      	b.n	800aeba <UART_SetConfig+0x2fe>
 800adbc:	2304      	movs	r3, #4
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adc2:	e07a      	b.n	800aeba <UART_SetConfig+0x2fe>
 800adc4:	2308      	movs	r3, #8
 800adc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adca:	e076      	b.n	800aeba <UART_SetConfig+0x2fe>
 800adcc:	2310      	movs	r3, #16
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add2:	e072      	b.n	800aeba <UART_SetConfig+0x2fe>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a35      	ldr	r2, [pc, #212]	@ (800aeb0 <UART_SetConfig+0x2f4>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d12a      	bne.n	800ae34 <UART_SetConfig+0x278>
 800adde:	4b30      	ldr	r3, [pc, #192]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ade8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adec:	d01a      	beq.n	800ae24 <UART_SetConfig+0x268>
 800adee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adf2:	d81b      	bhi.n	800ae2c <UART_SetConfig+0x270>
 800adf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adf8:	d00c      	beq.n	800ae14 <UART_SetConfig+0x258>
 800adfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adfe:	d815      	bhi.n	800ae2c <UART_SetConfig+0x270>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <UART_SetConfig+0x250>
 800ae04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae08:	d008      	beq.n	800ae1c <UART_SetConfig+0x260>
 800ae0a:	e00f      	b.n	800ae2c <UART_SetConfig+0x270>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae12:	e052      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae14:	2302      	movs	r3, #2
 800ae16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae1a:	e04e      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae1c:	2304      	movs	r3, #4
 800ae1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae22:	e04a      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae24:	2308      	movs	r3, #8
 800ae26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae2a:	e046      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae2c:	2310      	movs	r3, #16
 800ae2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae32:	e042      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a17      	ldr	r2, [pc, #92]	@ (800ae98 <UART_SetConfig+0x2dc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d13a      	bne.n	800aeb4 <UART_SetConfig+0x2f8>
 800ae3e:	4b18      	ldr	r3, [pc, #96]	@ (800aea0 <UART_SetConfig+0x2e4>)
 800ae40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae4c:	d01a      	beq.n	800ae84 <UART_SetConfig+0x2c8>
 800ae4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae52:	d81b      	bhi.n	800ae8c <UART_SetConfig+0x2d0>
 800ae54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae58:	d00c      	beq.n	800ae74 <UART_SetConfig+0x2b8>
 800ae5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae5e:	d815      	bhi.n	800ae8c <UART_SetConfig+0x2d0>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <UART_SetConfig+0x2b0>
 800ae64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae68:	d008      	beq.n	800ae7c <UART_SetConfig+0x2c0>
 800ae6a:	e00f      	b.n	800ae8c <UART_SetConfig+0x2d0>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae72:	e022      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae74:	2302      	movs	r3, #2
 800ae76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae7a:	e01e      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae7c:	2304      	movs	r3, #4
 800ae7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae82:	e01a      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae84:	2308      	movs	r3, #8
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8a:	e016      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae92:	e012      	b.n	800aeba <UART_SetConfig+0x2fe>
 800ae94:	cfff69f3 	.word	0xcfff69f3
 800ae98:	40008000 	.word	0x40008000
 800ae9c:	40013800 	.word	0x40013800
 800aea0:	40021000 	.word	0x40021000
 800aea4:	40004400 	.word	0x40004400
 800aea8:	40004800 	.word	0x40004800
 800aeac:	40004c00 	.word	0x40004c00
 800aeb0:	40005000 	.word	0x40005000
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4aae      	ldr	r2, [pc, #696]	@ (800b178 <UART_SetConfig+0x5bc>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	f040 8097 	bne.w	800aff4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d823      	bhi.n	800af16 <UART_SetConfig+0x35a>
 800aece:	a201      	add	r2, pc, #4	@ (adr r2, 800aed4 <UART_SetConfig+0x318>)
 800aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed4:	0800aef9 	.word	0x0800aef9
 800aed8:	0800af17 	.word	0x0800af17
 800aedc:	0800af01 	.word	0x0800af01
 800aee0:	0800af17 	.word	0x0800af17
 800aee4:	0800af07 	.word	0x0800af07
 800aee8:	0800af17 	.word	0x0800af17
 800aeec:	0800af17 	.word	0x0800af17
 800aef0:	0800af17 	.word	0x0800af17
 800aef4:	0800af0f 	.word	0x0800af0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aef8:	f7fc fcf6 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800aefc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aefe:	e010      	b.n	800af22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af00:	4b9e      	ldr	r3, [pc, #632]	@ (800b17c <UART_SetConfig+0x5c0>)
 800af02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af04:	e00d      	b.n	800af22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af06:	f7fc fc81 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800af0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af0c:	e009      	b.n	800af22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af14:	e005      	b.n	800af22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 8130 	beq.w	800b18a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2e:	4a94      	ldr	r2, [pc, #592]	@ (800b180 <UART_SetConfig+0x5c4>)
 800af30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af34:	461a      	mov	r2, r3
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	fbb3 f3f2 	udiv	r3, r3, r2
 800af3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	4613      	mov	r3, r2
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	4413      	add	r3, r2
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d305      	bcc.n	800af5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	429a      	cmp	r2, r3
 800af58:	d903      	bls.n	800af62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af60:	e113      	b.n	800b18a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af64:	2200      	movs	r2, #0
 800af66:	60bb      	str	r3, [r7, #8]
 800af68:	60fa      	str	r2, [r7, #12]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6e:	4a84      	ldr	r2, [pc, #528]	@ (800b180 <UART_SetConfig+0x5c4>)
 800af70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af74:	b29b      	uxth	r3, r3
 800af76:	2200      	movs	r2, #0
 800af78:	603b      	str	r3, [r7, #0]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af84:	f7f5 fdae 	bl	8000ae4 <__aeabi_uldivmod>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4610      	mov	r0, r2
 800af8e:	4619      	mov	r1, r3
 800af90:	f04f 0200 	mov.w	r2, #0
 800af94:	f04f 0300 	mov.w	r3, #0
 800af98:	020b      	lsls	r3, r1, #8
 800af9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af9e:	0202      	lsls	r2, r0, #8
 800afa0:	6979      	ldr	r1, [r7, #20]
 800afa2:	6849      	ldr	r1, [r1, #4]
 800afa4:	0849      	lsrs	r1, r1, #1
 800afa6:	2000      	movs	r0, #0
 800afa8:	460c      	mov	r4, r1
 800afaa:	4605      	mov	r5, r0
 800afac:	eb12 0804 	adds.w	r8, r2, r4
 800afb0:	eb43 0905 	adc.w	r9, r3, r5
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	469a      	mov	sl, r3
 800afbc:	4693      	mov	fp, r2
 800afbe:	4652      	mov	r2, sl
 800afc0:	465b      	mov	r3, fp
 800afc2:	4640      	mov	r0, r8
 800afc4:	4649      	mov	r1, r9
 800afc6:	f7f5 fd8d 	bl	8000ae4 <__aeabi_uldivmod>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4613      	mov	r3, r2
 800afd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afd8:	d308      	bcc.n	800afec <UART_SetConfig+0x430>
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afe0:	d204      	bcs.n	800afec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a3a      	ldr	r2, [r7, #32]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	e0ce      	b.n	800b18a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aff2:	e0ca      	b.n	800b18a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800affc:	d166      	bne.n	800b0cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800affe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b002:	2b08      	cmp	r3, #8
 800b004:	d827      	bhi.n	800b056 <UART_SetConfig+0x49a>
 800b006:	a201      	add	r2, pc, #4	@ (adr r2, 800b00c <UART_SetConfig+0x450>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b031 	.word	0x0800b031
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b041 	.word	0x0800b041
 800b018:	0800b057 	.word	0x0800b057
 800b01c:	0800b047 	.word	0x0800b047
 800b020:	0800b057 	.word	0x0800b057
 800b024:	0800b057 	.word	0x0800b057
 800b028:	0800b057 	.word	0x0800b057
 800b02c:	0800b04f 	.word	0x0800b04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b030:	f7fc fc5a 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800b034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b036:	e014      	b.n	800b062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b038:	f7fc fc6c 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800b03c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b03e:	e010      	b.n	800b062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b040:	4b4e      	ldr	r3, [pc, #312]	@ (800b17c <UART_SetConfig+0x5c0>)
 800b042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b044:	e00d      	b.n	800b062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b046:	f7fc fbe1 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800b04a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b04c:	e009      	b.n	800b062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b054:	e005      	b.n	800b062 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8090 	beq.w	800b18a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	4a44      	ldr	r2, [pc, #272]	@ (800b180 <UART_SetConfig+0x5c4>)
 800b070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b074:	461a      	mov	r2, r3
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	fbb3 f3f2 	udiv	r3, r3, r2
 800b07c:	005a      	lsls	r2, r3, #1
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	085b      	lsrs	r3, r3, #1
 800b084:	441a      	add	r2, r3
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b0f      	cmp	r3, #15
 800b094:	d916      	bls.n	800b0c4 <UART_SetConfig+0x508>
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b09c:	d212      	bcs.n	800b0c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f023 030f 	bic.w	r3, r3, #15
 800b0a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	085b      	lsrs	r3, r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	8bfb      	ldrh	r3, [r7, #30]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	8bfa      	ldrh	r2, [r7, #30]
 800b0c0:	60da      	str	r2, [r3, #12]
 800b0c2:	e062      	b.n	800b18a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0ca:	e05e      	b.n	800b18a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d828      	bhi.n	800b126 <UART_SetConfig+0x56a>
 800b0d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0dc <UART_SetConfig+0x520>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b101 	.word	0x0800b101
 800b0e0:	0800b109 	.word	0x0800b109
 800b0e4:	0800b111 	.word	0x0800b111
 800b0e8:	0800b127 	.word	0x0800b127
 800b0ec:	0800b117 	.word	0x0800b117
 800b0f0:	0800b127 	.word	0x0800b127
 800b0f4:	0800b127 	.word	0x0800b127
 800b0f8:	0800b127 	.word	0x0800b127
 800b0fc:	0800b11f 	.word	0x0800b11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b100:	f7fc fbf2 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800b104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b106:	e014      	b.n	800b132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b108:	f7fc fc04 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800b10c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b10e:	e010      	b.n	800b132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b110:	4b1a      	ldr	r3, [pc, #104]	@ (800b17c <UART_SetConfig+0x5c0>)
 800b112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b114:	e00d      	b.n	800b132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b116:	f7fc fb79 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800b11a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b11c:	e009      	b.n	800b132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b124:	e005      	b.n	800b132 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b130:	bf00      	nop
    }

    if (pclk != 0U)
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	d028      	beq.n	800b18a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13c:	4a10      	ldr	r2, [pc, #64]	@ (800b180 <UART_SetConfig+0x5c4>)
 800b13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b142:	461a      	mov	r2, r3
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	fbb3 f2f2 	udiv	r2, r3, r2
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	085b      	lsrs	r3, r3, #1
 800b150:	441a      	add	r2, r3
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	2b0f      	cmp	r3, #15
 800b160:	d910      	bls.n	800b184 <UART_SetConfig+0x5c8>
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b168:	d20c      	bcs.n	800b184 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60da      	str	r2, [r3, #12]
 800b174:	e009      	b.n	800b18a <UART_SetConfig+0x5ce>
 800b176:	bf00      	nop
 800b178:	40008000 	.word	0x40008000
 800b17c:	00f42400 	.word	0x00f42400
 800b180:	0800d410 	.word	0x0800d410
      }
      else
      {
        ret = HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2201      	movs	r2, #1
 800b196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2200      	movs	r2, #0
 800b19e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3730      	adds	r7, #48	@ 0x30
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c0:	f003 0308 	and.w	r3, r3, #8
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b226:	f003 0304 	and.w	r3, r3, #4
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b248:	f003 0310 	and.w	r3, r3, #16
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01a      	beq.n	800b2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b2:	d10a      	bne.n	800b2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	605a      	str	r2, [r3, #4]
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b098      	sub	sp, #96	@ 0x60
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b308:	f7f9 faee 	bl	80048e8 <HAL_GetTick>
 800b30c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d12f      	bne.n	800b37c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b31c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b324:	2200      	movs	r2, #0
 800b326:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f88e 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d022      	beq.n	800b37c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b34a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b354:	647b      	str	r3, [r7, #68]	@ 0x44
 800b356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b35a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e6      	bne.n	800b336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b378:	2303      	movs	r3, #3
 800b37a:	e063      	b.n	800b444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b04      	cmp	r3, #4
 800b388:	d149      	bne.n	800b41e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b38a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b392:	2200      	movs	r2, #0
 800b394:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f857 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d03c      	beq.n	800b41e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e6      	bne.n	800b3a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f023 0301 	bic.w	r3, r3, #1
 800b3ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3f6:	61fa      	str	r2, [r7, #28]
 800b3f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	69b9      	ldr	r1, [r7, #24]
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	617b      	str	r3, [r7, #20]
   return(result);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e5      	bne.n	800b3d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e012      	b.n	800b444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3758      	adds	r7, #88	@ 0x58
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b45c:	e04f      	b.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b464:	d04b      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b466:	f7f9 fa3f 	bl	80048e8 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	429a      	cmp	r2, r3
 800b474:	d302      	bcc.n	800b47c <UART_WaitOnFlagUntilTimeout+0x30>
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e04e      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d037      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b80      	cmp	r3, #128	@ 0x80
 800b492:	d034      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b40      	cmp	r3, #64	@ 0x40
 800b498:	d031      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	f003 0308 	and.w	r3, r3, #8
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d110      	bne.n	800b4ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f920 	bl	800b6f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e029      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4d8:	d111      	bne.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f906 	bl	800b6f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2220      	movs	r2, #32
 800b4ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e00f      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4013      	ands	r3, r2
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	bf0c      	ite	eq
 800b50e:	2301      	moveq	r3, #1
 800b510:	2300      	movne	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	461a      	mov	r2, r3
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d0a0      	beq.n	800b45e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b096      	sub	sp, #88	@ 0x58
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	88fa      	ldrh	r2, [r7, #6]
 800b540:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2222      	movs	r2, #34	@ 0x22
 800b550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d02d      	beq.n	800b5ba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b564:	4a40      	ldr	r2, [pc, #256]	@ (800b668 <UART_Start_Receive_DMA+0x140>)
 800b566:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b56e:	4a3f      	ldr	r2, [pc, #252]	@ (800b66c <UART_Start_Receive_DMA+0x144>)
 800b570:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b578:	4a3d      	ldr	r2, [pc, #244]	@ (800b670 <UART_Start_Receive_DMA+0x148>)
 800b57a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b582:	2200      	movs	r2, #0
 800b584:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3324      	adds	r3, #36	@ 0x24
 800b592:	4619      	mov	r1, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b598:	461a      	mov	r2, r3
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	f7fa ffe0 	bl	8006560 <HAL_DMA_Start_IT>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d009      	beq.n	800b5ba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2210      	movs	r2, #16
 800b5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2220      	movs	r2, #32
 800b5b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e051      	b.n	800b65e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d018      	beq.n	800b5f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ca:	e853 3f00 	ldrex	r3, [r3]
 800b5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5e8:	e841 2300 	strex	r3, r2, [r1]
 800b5ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b5ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e6      	bne.n	800b5c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3308      	adds	r3, #8
 800b612:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b614:	637a      	str	r2, [r7, #52]	@ 0x34
 800b616:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b618:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b61a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b61c:	e841 2300 	strex	r3, r2, [r1]
 800b620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e5      	bne.n	800b5f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3308      	adds	r3, #8
 800b62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	e853 3f00 	ldrex	r3, [r3]
 800b636:	613b      	str	r3, [r7, #16]
   return(result);
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b63e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3308      	adds	r3, #8
 800b646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b648:	623a      	str	r2, [r7, #32]
 800b64a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64c:	69f9      	ldr	r1, [r7, #28]
 800b64e:	6a3a      	ldr	r2, [r7, #32]
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	61bb      	str	r3, [r7, #24]
   return(result);
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e5      	bne.n	800b628 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3758      	adds	r7, #88	@ 0x58
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0800b7c3 	.word	0x0800b7c3
 800b66c:	0800b8f7 	.word	0x0800b8f7
 800b670:	0800b93d 	.word	0x0800b93d

0800b674 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b08f      	sub	sp, #60	@ 0x3c
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	61fb      	str	r3, [r7, #28]
   return(result);
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b690:	637b      	str	r3, [r7, #52]	@ 0x34
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b69c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e6      	bne.n	800b67c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b6c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ce:	61ba      	str	r2, [r7, #24]
 800b6d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6979      	ldr	r1, [r7, #20]
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	613b      	str	r3, [r7, #16]
   return(result);
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e5      	bne.n	800b6ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b6ea:	bf00      	nop
 800b6ec:	373c      	adds	r7, #60	@ 0x3c
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b095      	sub	sp, #84	@ 0x54
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b71c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b71e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b724:	e841 2300 	strex	r3, r2, [r1]
 800b728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e6      	bne.n	800b6fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3308      	adds	r3, #8
 800b736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	e853 3f00 	ldrex	r3, [r3]
 800b73e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b746:	f023 0301 	bic.w	r3, r3, #1
 800b74a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3308      	adds	r3, #8
 800b752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b75c:	e841 2300 	strex	r3, r2, [r1]
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e3      	bne.n	800b730 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d118      	bne.n	800b7a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	e853 3f00 	ldrex	r3, [r3]
 800b77c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f023 0310 	bic.w	r3, r3, #16
 800b784:	647b      	str	r3, [r7, #68]	@ 0x44
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b792:	6979      	ldr	r1, [r7, #20]
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	613b      	str	r3, [r7, #16]
   return(result);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e6      	bne.n	800b770 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7b6:	bf00      	nop
 800b7b8:	3754      	adds	r7, #84	@ 0x54
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b09c      	sub	sp, #112	@ 0x70
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d171      	bne.n	800b8c2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b7fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b804:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b806:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b80a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e6      	bne.n	800b7e6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3308      	adds	r3, #8
 800b81e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b822:	e853 3f00 	ldrex	r3, [r3]
 800b826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82a:	f023 0301 	bic.w	r3, r3, #1
 800b82e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3308      	adds	r3, #8
 800b836:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b838:	647a      	str	r2, [r7, #68]	@ 0x44
 800b83a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b83e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b840:	e841 2300 	strex	r3, r2, [r1]
 800b844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1e5      	bne.n	800b818 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b84c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3308      	adds	r3, #8
 800b852:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b856:	e853 3f00 	ldrex	r3, [r3]
 800b85a:	623b      	str	r3, [r7, #32]
   return(result);
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b862:	663b      	str	r3, [r7, #96]	@ 0x60
 800b864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b86c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e5      	bne.n	800b84c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b882:	2220      	movs	r2, #32
 800b884:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d118      	bne.n	800b8c2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f023 0310 	bic.w	r3, r3, #16
 800b8a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8ae:	61fb      	str	r3, [r7, #28]
 800b8b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	69b9      	ldr	r1, [r7, #24]
 800b8b4:	69fa      	ldr	r2, [r7, #28]
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e6      	bne.n	800b890 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d109      	bne.n	800b8e4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b8d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b8d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8d8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b8dc:	4611      	mov	r1, r2
 800b8de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8e2:	e004      	b.n	800b8ee <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b8e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8ec:	4798      	blx	r3
}
 800b8ee:	bf00      	nop
 800b8f0:	3770      	adds	r7, #112	@ 0x70
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b902:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2201      	movs	r2, #1
 800b908:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d10b      	bne.n	800b92a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b91e:	0852      	lsrs	r2, r2, #1
 800b920:	b292      	uxth	r2, r2
 800b922:	4611      	mov	r1, r2
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b928:	e004      	b.n	800b934 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	4798      	blx	r3
}
 800b934:	bf00      	nop
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b948:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b950:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b958:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b964:	2b80      	cmp	r3, #128	@ 0x80
 800b966:	d109      	bne.n	800b97c <UART_DMAError+0x40>
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b21      	cmp	r3, #33	@ 0x21
 800b96c:	d106      	bne.n	800b97c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2200      	movs	r2, #0
 800b972:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b976:	6978      	ldr	r0, [r7, #20]
 800b978:	f7ff fe7c 	bl	800b674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b986:	2b40      	cmp	r3, #64	@ 0x40
 800b988:	d109      	bne.n	800b99e <UART_DMAError+0x62>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b22      	cmp	r3, #34	@ 0x22
 800b98e:	d106      	bne.n	800b99e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2200      	movs	r2, #0
 800b994:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b998:	6978      	ldr	r0, [r7, #20]
 800b99a:	f7ff feac 	bl	800b6f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a4:	f043 0210 	orr.w	r2, r3, #16
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9b4:	6978      	ldr	r0, [r7, #20]
 800b9b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9b8:	bf00      	nop
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e0:	bf00      	nop
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	61bb      	str	r3, [r7, #24]
 800ba10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6979      	ldr	r1, [r7, #20]
 800ba14:	69ba      	ldr	r2, [r7, #24]
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e6      	bne.n	800b9f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba3a:	bf00      	nop
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba90:	2302      	movs	r3, #2
 800ba92:	e027      	b.n	800bae4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2224      	movs	r2, #36	@ 0x24
 800baa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d101      	bne.n	800bb08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb04:	2302      	movs	r3, #2
 800bb06:	e02d      	b.n	800bb64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2224      	movs	r2, #36	@ 0x24
 800bb14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0201 	bic.w	r2, r2, #1
 800bb2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f84f 	bl	800bbe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2220      	movs	r2, #32
 800bb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e02d      	b.n	800bbe0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2224      	movs	r2, #36	@ 0x24
 800bb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f811 	bl	800bbe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d108      	bne.n	800bc0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc08:	e031      	b.n	800bc6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc0a:	2308      	movs	r3, #8
 800bc0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc0e:	2308      	movs	r3, #8
 800bc10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	0e5b      	lsrs	r3, r3, #25
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f003 0307 	and.w	r3, r3, #7
 800bc20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	0f5b      	lsrs	r3, r3, #29
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0307 	and.w	r3, r3, #7
 800bc30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	7b3a      	ldrb	r2, [r7, #12]
 800bc36:	4911      	ldr	r1, [pc, #68]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x94>)
 800bc38:	5c8a      	ldrb	r2, [r1, r2]
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc3e:	7b3a      	ldrb	r2, [r7, #12]
 800bc40:	490f      	ldr	r1, [pc, #60]	@ (800bc80 <UARTEx_SetNbDataToProcess+0x98>)
 800bc42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc44:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	7b7a      	ldrb	r2, [r7, #13]
 800bc54:	4909      	ldr	r1, [pc, #36]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x94>)
 800bc56:	5c8a      	ldrb	r2, [r1, r2]
 800bc58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc5c:	7b7a      	ldrb	r2, [r7, #13]
 800bc5e:	4908      	ldr	r1, [pc, #32]	@ (800bc80 <UARTEx_SetNbDataToProcess+0x98>)
 800bc60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc62:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	0800d428 	.word	0x0800d428
 800bc80:	0800d430 	.word	0x0800d430

0800bc84 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b08b      	sub	sp, #44	@ 0x2c
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	885b      	ldrh	r3, [r3, #2]
 800bcac:	fb02 f303 	mul.w	r3, r2, r3
 800bcb0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bcb6:	e013      	b.n	800bce0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcbe:	ed93 7a00 	vldr	s14, [r3]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	1d1a      	adds	r2, r3, #4
 800bcc6:	623a      	str	r2, [r7, #32]
 800bcc8:	edd3 7a00 	vldr	s15, [r3]
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	1d1a      	adds	r2, r3, #4
 800bcd0:	61fa      	str	r2, [r7, #28]
 800bcd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcd6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e8      	bne.n	800bcb8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bce6:	2300      	movs	r3, #0
 800bce8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bcea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	372c      	adds	r7, #44	@ 0x2c
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	607b      	str	r3, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	817b      	strh	r3, [r7, #10]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	897a      	ldrh	r2, [r7, #10]
 800bd10:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	893a      	ldrh	r2, [r7, #8]
 800bd16:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	605a      	str	r2, [r3, #4]
}
 800bd1e:	bf00      	nop
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b0bb      	sub	sp, #236	@ 0xec
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd54:	f04f 0300 	mov.w	r3, #0
 800bd58:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800bd60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800bd66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800bd6c:	e03b      	b.n	800bde6 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800bd6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bd70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bd7a:	e00c      	b.n	800bd96 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800bd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd80:	1d1a      	adds	r2, r3, #4
 800bd82:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]
        j--;
 800bd8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd90:	3b01      	subs	r3, #1
 800bd92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bd96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1ee      	bne.n	800bd7c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800bd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bda8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bdac:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800bdae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bdb8:	e00c      	b.n	800bdd4 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800bdba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
        j--;
 800bdca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bdd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1ee      	bne.n	800bdba <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800bddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bde0:	3b01      	subs	r3, #1
 800bde2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800bde6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1bf      	bne.n	800bd6e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdf4:	e2c7      	b.n	800c386 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800bdf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdfa:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	885b      	ldrh	r3, [r3, #2]
 800be04:	3301      	adds	r3, #1
 800be06:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800be0a:	fb01 f303 	mul.w	r3, r1, r3
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800be16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800be20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800be28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be2c:	3301      	adds	r3, #1
 800be2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be32:	e02c      	b.n	800be8e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	885b      	ldrh	r3, [r3, #2]
 800be3c:	4619      	mov	r1, r3
 800be3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be42:	fb03 f101 	mul.w	r1, r3, r1
 800be46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be4a:	440b      	add	r3, r1
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800be54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800be5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800be60:	eeb0 7ae7 	vabs.f32	s14, s15
 800be64:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800be68:	eef0 7ae7 	vabs.f32	s15, s15
 800be6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	dd06      	ble.n	800be84 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800be76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800be7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800be84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be88:	3301      	adds	r3, #1
 800be8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800be92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be94:	429a      	cmp	r2, r3
 800be96:	d3cd      	bcc.n	800be34 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800be98:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800be9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea4:	f000 809b 	beq.w	800bfde <arm_mat_inverse_f32+0x2b4>
 800bea8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800beac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800beb0:	429a      	cmp	r2, r3
 800beb2:	f000 8094 	beq.w	800bfde <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800becc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800beda:	fb03 f202 	mul.w	r2, r3, r2
 800bede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bee2:	4413      	add	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800beea:	4413      	add	r3, r2
 800beec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bef6:	fb03 f202 	mul.w	r2, r3, r2
 800befa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bf06:	4413      	add	r3, r2
 800bf08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf12:	e018      	b.n	800bf46 <arm_mat_inverse_f32+0x21c>
 800bf14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf20:	1d1a      	adds	r2, r3, #4
 800bf22:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800bf26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf32:	1d1a      	adds	r2, r3, #4
 800bf34:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bf38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf40:	3301      	adds	r3, #1
 800bf42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800bf4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	dbe1      	blt.n	800bf14 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	885b      	ldrh	r3, [r3, #2]
 800bf64:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf68:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf6e:	fb02 f303 	mul.w	r3, r2, r3
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bf78:	4413      	add	r3, r2
 800bf7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bf84:	fb02 f303 	mul.w	r3, r2, r3
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf8e:	4413      	add	r3, r2
 800bf90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf9a:	e018      	b.n	800bfce <arm_mat_inverse_f32+0x2a4>
 800bf9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfa8:	1d1a      	adds	r2, r3, #4
 800bfaa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bfae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bfc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bfc8:	3301      	adds	r3, #1
 800bfca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bfce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	dbe1      	blt.n	800bf9c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800bfde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d009      	beq.n	800bffa <arm_mat_inverse_f32+0x2d0>
 800bfe6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bfea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff2:	d102      	bne.n	800bffa <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800bff4:	f06f 0304 	mvn.w	r3, #4
 800bff8:	e208      	b.n	800c40c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800bffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bffe:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	637b      	str	r3, [r7, #52]	@ 0x34
 800c018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c01a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	633b      	str	r3, [r7, #48]	@ 0x30
 800c022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c026:	fb03 f202 	mul.w	r2, r3, r2
 800c02a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c036:	4413      	add	r3, r2
 800c038:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c03c:	2300      	movs	r3, #0
 800c03e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c042:	e011      	b.n	800c068 <arm_mat_inverse_f32+0x33e>
 800c044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c048:	1d1a      	adds	r2, r3, #4
 800c04a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800c04e:	ed93 7a00 	vldr	s14, [r3]
 800c052:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc3 7a00 	vstr	s15, [r3]
 800c05e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c062:	3301      	adds	r3, #1
 800c064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c068:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06e:	429a      	cmp	r2, r3
 800c070:	dbe8      	blt.n	800c044 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	885b      	ldrh	r3, [r3, #2]
 800c07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c082:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c086:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c088:	fb02 f303 	mul.w	r3, r2, r3
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c092:	4413      	add	r3, r2
 800c094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c098:	2300      	movs	r3, #0
 800c09a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c09e:	e011      	b.n	800c0c4 <arm_mat_inverse_f32+0x39a>
 800c0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800c0aa:	ed93 7a00 	vldr	s14, [r3]
 800c0ae:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	edc3 7a00 	vstr	s15, [r3]
 800c0ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c0be:	3301      	adds	r3, #1
 800c0c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c0c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	dbe8      	blt.n	800c0a0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800c0d4:	e0ae      	b.n	800c234 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	885b      	ldrh	r3, [r3, #2]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0e4:	fb03 f101 	mul.w	r1, r3, r1
 800c0e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0ec:	440b      	add	r3, r1
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	885b      	ldrh	r3, [r3, #2]
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	613b      	str	r3, [r7, #16]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c126:	fb03 f202 	mul.w	r2, r3, r2
 800c12a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c12e:	4413      	add	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c136:	4413      	add	r3, r2
 800c138:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c140:	fb03 f202 	mul.w	r2, r3, r2
 800c144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c150:	4413      	add	r3, r2
 800c152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c156:	2300      	movs	r3, #0
 800c158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c15c:	e01a      	b.n	800c194 <arm_mat_inverse_f32+0x46a>
 800c15e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c162:	1d1a      	adds	r2, r3, #4
 800c164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c168:	ed93 7a00 	vldr	s14, [r3]
 800c16c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c17e:	ed93 7a00 	vldr	s14, [r3]
 800c182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c186:	edc3 7a00 	vstr	s15, [r3]
 800c18a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c18e:	3301      	adds	r3, #1
 800c190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c194:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	dbdf      	blt.n	800c15e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60bb      	str	r3, [r7, #8]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c1be:	fb02 f303 	mul.w	r3, r2, r3
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1d2:	fb02 f303 	mul.w	r3, r2, r3
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c1dc:	4413      	add	r3, r2
 800c1de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c1e8:	e01a      	b.n	800c220 <arm_mat_inverse_f32+0x4f6>
 800c1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c1f4:	ed93 7a00 	vldr	s14, [r3]
 800c1f8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c204:	1d1a      	adds	r2, r3, #4
 800c206:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c20a:	ed93 7a00 	vldr	s14, [r3]
 800c20e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c212:	edc3 7a00 	vstr	s15, [r3]
 800c216:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c21a:	3301      	adds	r3, #1
 800c21c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c220:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	429a      	cmp	r2, r3
 800c228:	dbdf      	blt.n	800c1ea <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c22e:	3301      	adds	r3, #1
 800c230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c234:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c23a:	429a      	cmp	r2, r3
 800c23c:	f4ff af4b 	bcc.w	800c0d6 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c242:	3301      	adds	r3, #1
 800c244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c248:	e092      	b.n	800c370 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	885b      	ldrh	r3, [r3, #2]
 800c252:	4619      	mov	r1, r3
 800c254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c258:	fb03 f101 	mul.w	r1, r3, r1
 800c25c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c260:	440b      	add	r3, r1
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	885b      	ldrh	r3, [r3, #2]
 800c284:	627b      	str	r3, [r7, #36]	@ 0x24
 800c286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	623b      	str	r3, [r7, #32]
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c296:	fb03 f202 	mul.w	r2, r3, r2
 800c29a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c2a4:	4413      	add	r3, r2
 800c2a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2ac:	fb03 f202 	mul.w	r2, r3, r2
 800c2b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c2ba:	4413      	add	r3, r2
 800c2bc:	677b      	str	r3, [r7, #116]	@ 0x74
 800c2be:	2300      	movs	r3, #0
 800c2c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c2c2:	e014      	b.n	800c2ee <arm_mat_inverse_f32+0x5c4>
 800c2c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2c6:	1d1a      	adds	r2, r3, #4
 800c2c8:	677a      	str	r2, [r7, #116]	@ 0x74
 800c2ca:	ed93 7a00 	vldr	s14, [r3]
 800c2ce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2d8:	1d1a      	adds	r2, r3, #4
 800c2da:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c2dc:	ed93 7a00 	vldr	s14, [r3]
 800c2e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2e4:	edc3 7a00 	vstr	s15, [r3]
 800c2e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c2ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	dbe6      	blt.n	800c2c4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	885b      	ldrh	r3, [r3, #2]
 800c306:	61fb      	str	r3, [r7, #28]
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	61bb      	str	r3, [r7, #24]
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c31a:	4413      	add	r3, r2
 800c31c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c32a:	4413      	add	r3, r2
 800c32c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c32e:	2300      	movs	r3, #0
 800c330:	673b      	str	r3, [r7, #112]	@ 0x70
 800c332:	e014      	b.n	800c35e <arm_mat_inverse_f32+0x634>
 800c334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c33a:	ed93 7a00 	vldr	s14, [r3]
 800c33e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c348:	1d1a      	adds	r2, r3, #4
 800c34a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c34c:	ed93 7a00 	vldr	s14, [r3]
 800c350:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c354:	edc3 7a00 	vstr	s15, [r3]
 800c358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c35a:	3301      	adds	r3, #1
 800c35c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c35e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	429a      	cmp	r2, r3
 800c364:	dbe6      	blt.n	800c334 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c36a:	3301      	adds	r3, #1
 800c36c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c370:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c376:	429a      	cmp	r2, r3
 800c378:	f4ff af67 	bcc.w	800c24a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c37c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c380:	3301      	adds	r3, #1
 800c382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c38c:	429a      	cmp	r2, r3
 800c38e:	f4ff ad32 	bcc.w	800bdf6 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c392:	2300      	movs	r3, #0
 800c394:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d033      	beq.n	800c408 <arm_mat_inverse_f32+0x6de>
 800c3a0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c3a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ac:	d12c      	bne.n	800c408 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3ba:	e010      	b.n	800c3de <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c3bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c3c4:	4413      	add	r3, r2
 800c3c6:	edd3 7a00 	vldr	s15, [r3]
 800c3ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d2:	d10d      	bne.n	800c3f0 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3e2:	fb02 f303 	mul.w	r3, r2, r3
 800c3e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d3e6      	bcc.n	800c3bc <arm_mat_inverse_f32+0x692>
 800c3ee:	e000      	b.n	800c3f2 <arm_mat_inverse_f32+0x6c8>
            break;
 800c3f0:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c3f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d102      	bne.n	800c408 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c402:	23fb      	movs	r3, #251	@ 0xfb
 800c404:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c408:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	37ec      	adds	r7, #236	@ 0xec
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c418:	b480      	push	{r7}
 800c41a:	b093      	sub	sp, #76	@ 0x4c
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	885b      	ldrh	r3, [r3, #2]
 800c44c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c454:	2300      	movs	r3, #0
 800c456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c458:	8b7b      	ldrh	r3, [r7, #26]
 800c45a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	69fa      	ldr	r2, [r7, #28]
 800c462:	4413      	add	r3, r2
 800c464:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c466:	8b3b      	ldrh	r3, [r7, #24]
 800c468:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c470:	f04f 0300 	mov.w	r3, #0
 800c474:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c478:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c47a:	8afb      	ldrh	r3, [r7, #22]
 800c47c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c47e:	e017      	b.n	800c4b0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c482:	1d1a      	adds	r2, r3, #4
 800c484:	647a      	str	r2, [r7, #68]	@ 0x44
 800c486:	ed93 7a00 	vldr	s14, [r3]
 800c48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c48c:	edd3 7a00 	vldr	s15, [r3]
 800c490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c494:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c49c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c4a0:	8b3b      	ldrh	r3, [r7, #24]
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4a6:	4413      	add	r3, r2
 800c4a8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e4      	bne.n	800c480 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b8:	1d1a      	adds	r2, r3, #4
 800c4ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4be:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c4c6:	8b3a      	ldrh	r2, [r7, #24]
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	6a3a      	ldr	r2, [r7, #32]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1ca      	bne.n	800c470 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c4da:	8b3b      	ldrh	r3, [r7, #24]
 800c4dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4de:	4413      	add	r3, r2
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c4e2:	8afb      	ldrh	r3, [r7, #22]
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4e8:	4413      	add	r3, r2
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1b1      	bne.n	800c45c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c4fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c500:	4618      	mov	r0, r3
 800c502:	374c      	adds	r7, #76	@ 0x4c
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b08b      	sub	sp, #44	@ 0x2c
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	ed87 0a02 	vstr	s0, [r7, #8]
 800c518:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	885b      	ldrh	r3, [r3, #2]
 800c530:	fb02 f303 	mul.w	r3, r2, r3
 800c534:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c53a:	e010      	b.n	800c55e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	1d1a      	adds	r2, r3, #4
 800c540:	627a      	str	r2, [r7, #36]	@ 0x24
 800c542:	ed93 7a00 	vldr	s14, [r3]
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	1d1a      	adds	r2, r3, #4
 800c54a:	623a      	str	r2, [r7, #32]
 800c54c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c554:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1eb      	bne.n	800c53c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c564:	2300      	movs	r3, #0
 800c566:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800c568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	372c      	adds	r7, #44	@ 0x2c
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c578:	b480      	push	{r7}
 800c57a:	b08b      	sub	sp, #44	@ 0x2c
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	885b      	ldrh	r3, [r3, #2]
 800c5a0:	fb02 f303 	mul.w	r3, r2, r3
 800c5a4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c5aa:	e013      	b.n	800c5d4 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5b2:	ed93 7a00 	vldr	s14, [r3]
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	1d1a      	adds	r2, r3, #4
 800c5ba:	623a      	str	r2, [r7, #32]
 800c5bc:	edd3 7a00 	vldr	s15, [r3]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	1d1a      	adds	r2, r3, #4
 800c5c4:	61fa      	str	r2, [r7, #28]
 800c5c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ca:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e8      	bne.n	800c5ac <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c5de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	372c      	adds	r7, #44	@ 0x2c
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b08b      	sub	sp, #44	@ 0x2c
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c610:	89fb      	ldrh	r3, [r7, #14]
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	2300      	movs	r3, #0
 800c616:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	4413      	add	r3, r2
 800c620:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c622:	89bb      	ldrh	r3, [r7, #12]
 800c624:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c626:	e00d      	b.n	800c644 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	1d1a      	adds	r2, r3, #4
 800c62c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c634:	89fb      	ldrh	r3, [r7, #14]
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	6a3a      	ldr	r2, [r7, #32]
 800c63a:	4413      	add	r3, r2
 800c63c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	3b01      	subs	r3, #1
 800c642:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ee      	bne.n	800c628 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	3301      	adds	r3, #1
 800c64e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	3b01      	subs	r3, #1
 800c654:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1dd      	bne.n	800c618 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c65c:	2300      	movs	r3, #0
 800c65e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c660:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c664:	4618      	mov	r0, r3
 800c666:	372c      	adds	r7, #44	@ 0x2c
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <malloc>:
 800c670:	4b02      	ldr	r3, [pc, #8]	@ (800c67c <malloc+0xc>)
 800c672:	4601      	mov	r1, r0
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	f000 b825 	b.w	800c6c4 <_malloc_r>
 800c67a:	bf00      	nop
 800c67c:	20000174 	.word	0x20000174

0800c680 <sbrk_aligned>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	4e0f      	ldr	r6, [pc, #60]	@ (800c6c0 <sbrk_aligned+0x40>)
 800c684:	460c      	mov	r4, r1
 800c686:	6831      	ldr	r1, [r6, #0]
 800c688:	4605      	mov	r5, r0
 800c68a:	b911      	cbnz	r1, 800c692 <sbrk_aligned+0x12>
 800c68c:	f000 f8ae 	bl	800c7ec <_sbrk_r>
 800c690:	6030      	str	r0, [r6, #0]
 800c692:	4621      	mov	r1, r4
 800c694:	4628      	mov	r0, r5
 800c696:	f000 f8a9 	bl	800c7ec <_sbrk_r>
 800c69a:	1c43      	adds	r3, r0, #1
 800c69c:	d103      	bne.n	800c6a6 <sbrk_aligned+0x26>
 800c69e:	f04f 34ff 	mov.w	r4, #4294967295
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	bd70      	pop	{r4, r5, r6, pc}
 800c6a6:	1cc4      	adds	r4, r0, #3
 800c6a8:	f024 0403 	bic.w	r4, r4, #3
 800c6ac:	42a0      	cmp	r0, r4
 800c6ae:	d0f8      	beq.n	800c6a2 <sbrk_aligned+0x22>
 800c6b0:	1a21      	subs	r1, r4, r0
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 f89a 	bl	800c7ec <_sbrk_r>
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d1f2      	bne.n	800c6a2 <sbrk_aligned+0x22>
 800c6bc:	e7ef      	b.n	800c69e <sbrk_aligned+0x1e>
 800c6be:	bf00      	nop
 800c6c0:	20001c94 	.word	0x20001c94

0800c6c4 <_malloc_r>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	1ccd      	adds	r5, r1, #3
 800c6ca:	f025 0503 	bic.w	r5, r5, #3
 800c6ce:	3508      	adds	r5, #8
 800c6d0:	2d0c      	cmp	r5, #12
 800c6d2:	bf38      	it	cc
 800c6d4:	250c      	movcc	r5, #12
 800c6d6:	2d00      	cmp	r5, #0
 800c6d8:	4606      	mov	r6, r0
 800c6da:	db01      	blt.n	800c6e0 <_malloc_r+0x1c>
 800c6dc:	42a9      	cmp	r1, r5
 800c6de:	d904      	bls.n	800c6ea <_malloc_r+0x26>
 800c6e0:	230c      	movs	r3, #12
 800c6e2:	6033      	str	r3, [r6, #0]
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7c0 <_malloc_r+0xfc>
 800c6ee:	f000 f869 	bl	800c7c4 <__malloc_lock>
 800c6f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c6f6:	461c      	mov	r4, r3
 800c6f8:	bb44      	cbnz	r4, 800c74c <_malloc_r+0x88>
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f7ff ffbf 	bl	800c680 <sbrk_aligned>
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	4604      	mov	r4, r0
 800c706:	d158      	bne.n	800c7ba <_malloc_r+0xf6>
 800c708:	f8d8 4000 	ldr.w	r4, [r8]
 800c70c:	4627      	mov	r7, r4
 800c70e:	2f00      	cmp	r7, #0
 800c710:	d143      	bne.n	800c79a <_malloc_r+0xd6>
 800c712:	2c00      	cmp	r4, #0
 800c714:	d04b      	beq.n	800c7ae <_malloc_r+0xea>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	4639      	mov	r1, r7
 800c71a:	4630      	mov	r0, r6
 800c71c:	eb04 0903 	add.w	r9, r4, r3
 800c720:	f000 f864 	bl	800c7ec <_sbrk_r>
 800c724:	4581      	cmp	r9, r0
 800c726:	d142      	bne.n	800c7ae <_malloc_r+0xea>
 800c728:	6821      	ldr	r1, [r4, #0]
 800c72a:	1a6d      	subs	r5, r5, r1
 800c72c:	4629      	mov	r1, r5
 800c72e:	4630      	mov	r0, r6
 800c730:	f7ff ffa6 	bl	800c680 <sbrk_aligned>
 800c734:	3001      	adds	r0, #1
 800c736:	d03a      	beq.n	800c7ae <_malloc_r+0xea>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	442b      	add	r3, r5
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	f8d8 3000 	ldr.w	r3, [r8]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	bb62      	cbnz	r2, 800c7a0 <_malloc_r+0xdc>
 800c746:	f8c8 7000 	str.w	r7, [r8]
 800c74a:	e00f      	b.n	800c76c <_malloc_r+0xa8>
 800c74c:	6822      	ldr	r2, [r4, #0]
 800c74e:	1b52      	subs	r2, r2, r5
 800c750:	d420      	bmi.n	800c794 <_malloc_r+0xd0>
 800c752:	2a0b      	cmp	r2, #11
 800c754:	d917      	bls.n	800c786 <_malloc_r+0xc2>
 800c756:	1961      	adds	r1, r4, r5
 800c758:	42a3      	cmp	r3, r4
 800c75a:	6025      	str	r5, [r4, #0]
 800c75c:	bf18      	it	ne
 800c75e:	6059      	strne	r1, [r3, #4]
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	bf08      	it	eq
 800c764:	f8c8 1000 	streq.w	r1, [r8]
 800c768:	5162      	str	r2, [r4, r5]
 800c76a:	604b      	str	r3, [r1, #4]
 800c76c:	4630      	mov	r0, r6
 800c76e:	f000 f82f 	bl	800c7d0 <__malloc_unlock>
 800c772:	f104 000b 	add.w	r0, r4, #11
 800c776:	1d23      	adds	r3, r4, #4
 800c778:	f020 0007 	bic.w	r0, r0, #7
 800c77c:	1ac2      	subs	r2, r0, r3
 800c77e:	bf1c      	itt	ne
 800c780:	1a1b      	subne	r3, r3, r0
 800c782:	50a3      	strne	r3, [r4, r2]
 800c784:	e7af      	b.n	800c6e6 <_malloc_r+0x22>
 800c786:	6862      	ldr	r2, [r4, #4]
 800c788:	42a3      	cmp	r3, r4
 800c78a:	bf0c      	ite	eq
 800c78c:	f8c8 2000 	streq.w	r2, [r8]
 800c790:	605a      	strne	r2, [r3, #4]
 800c792:	e7eb      	b.n	800c76c <_malloc_r+0xa8>
 800c794:	4623      	mov	r3, r4
 800c796:	6864      	ldr	r4, [r4, #4]
 800c798:	e7ae      	b.n	800c6f8 <_malloc_r+0x34>
 800c79a:	463c      	mov	r4, r7
 800c79c:	687f      	ldr	r7, [r7, #4]
 800c79e:	e7b6      	b.n	800c70e <_malloc_r+0x4a>
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d1fb      	bne.n	800c7a0 <_malloc_r+0xdc>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	6053      	str	r3, [r2, #4]
 800c7ac:	e7de      	b.n	800c76c <_malloc_r+0xa8>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	6033      	str	r3, [r6, #0]
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f000 f80c 	bl	800c7d0 <__malloc_unlock>
 800c7b8:	e794      	b.n	800c6e4 <_malloc_r+0x20>
 800c7ba:	6005      	str	r5, [r0, #0]
 800c7bc:	e7d6      	b.n	800c76c <_malloc_r+0xa8>
 800c7be:	bf00      	nop
 800c7c0:	20001c98 	.word	0x20001c98

0800c7c4 <__malloc_lock>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	@ (800c7cc <__malloc_lock+0x8>)
 800c7c6:	f000 b84b 	b.w	800c860 <__retarget_lock_acquire_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	20001dd8 	.word	0x20001dd8

0800c7d0 <__malloc_unlock>:
 800c7d0:	4801      	ldr	r0, [pc, #4]	@ (800c7d8 <__malloc_unlock+0x8>)
 800c7d2:	f000 b846 	b.w	800c862 <__retarget_lock_release_recursive>
 800c7d6:	bf00      	nop
 800c7d8:	20001dd8 	.word	0x20001dd8

0800c7dc <memset>:
 800c7dc:	4402      	add	r2, r0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d100      	bne.n	800c7e6 <memset+0xa>
 800c7e4:	4770      	bx	lr
 800c7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ea:	e7f9      	b.n	800c7e0 <memset+0x4>

0800c7ec <_sbrk_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d06      	ldr	r5, [pc, #24]	@ (800c808 <_sbrk_r+0x1c>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f7 fa36 	bl	8003c68 <_sbrk>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_sbrk_r+0x1a>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_sbrk_r+0x1a>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	20001dd4 	.word	0x20001dd4

0800c80c <__errno>:
 800c80c:	4b01      	ldr	r3, [pc, #4]	@ (800c814 <__errno+0x8>)
 800c80e:	6818      	ldr	r0, [r3, #0]
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	20000174 	.word	0x20000174

0800c818 <__libc_init_array>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	4d0d      	ldr	r5, [pc, #52]	@ (800c850 <__libc_init_array+0x38>)
 800c81c:	4c0d      	ldr	r4, [pc, #52]	@ (800c854 <__libc_init_array+0x3c>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	2600      	movs	r6, #0
 800c824:	42a6      	cmp	r6, r4
 800c826:	d109      	bne.n	800c83c <__libc_init_array+0x24>
 800c828:	4d0b      	ldr	r5, [pc, #44]	@ (800c858 <__libc_init_array+0x40>)
 800c82a:	4c0c      	ldr	r4, [pc, #48]	@ (800c85c <__libc_init_array+0x44>)
 800c82c:	f000 fdb0 	bl	800d390 <_init>
 800c830:	1b64      	subs	r4, r4, r5
 800c832:	10a4      	asrs	r4, r4, #2
 800c834:	2600      	movs	r6, #0
 800c836:	42a6      	cmp	r6, r4
 800c838:	d105      	bne.n	800c846 <__libc_init_array+0x2e>
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c840:	4798      	blx	r3
 800c842:	3601      	adds	r6, #1
 800c844:	e7ee      	b.n	800c824 <__libc_init_array+0xc>
 800c846:	f855 3b04 	ldr.w	r3, [r5], #4
 800c84a:	4798      	blx	r3
 800c84c:	3601      	adds	r6, #1
 800c84e:	e7f2      	b.n	800c836 <__libc_init_array+0x1e>
 800c850:	0800d810 	.word	0x0800d810
 800c854:	0800d810 	.word	0x0800d810
 800c858:	0800d810 	.word	0x0800d810
 800c85c:	0800d814 	.word	0x0800d814

0800c860 <__retarget_lock_acquire_recursive>:
 800c860:	4770      	bx	lr

0800c862 <__retarget_lock_release_recursive>:
 800c862:	4770      	bx	lr

0800c864 <sqrtf>:
 800c864:	b508      	push	{r3, lr}
 800c866:	ed2d 8b02 	vpush	{d8}
 800c86a:	eeb0 8a40 	vmov.f32	s16, s0
 800c86e:	f000 f8a1 	bl	800c9b4 <__ieee754_sqrtf>
 800c872:	eeb4 8a48 	vcmp.f32	s16, s16
 800c876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87a:	d60c      	bvs.n	800c896 <sqrtf+0x32>
 800c87c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c89c <sqrtf+0x38>
 800c880:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c888:	d505      	bpl.n	800c896 <sqrtf+0x32>
 800c88a:	f7ff ffbf 	bl	800c80c <__errno>
 800c88e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c892:	2321      	movs	r3, #33	@ 0x21
 800c894:	6003      	str	r3, [r0, #0]
 800c896:	ecbd 8b02 	vpop	{d8}
 800c89a:	bd08      	pop	{r3, pc}
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <cosf>:
 800c8a0:	ee10 3a10 	vmov	r3, s0
 800c8a4:	b507      	push	{r0, r1, r2, lr}
 800c8a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c920 <cosf+0x80>)
 800c8a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d806      	bhi.n	800c8be <cosf+0x1e>
 800c8b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c924 <cosf+0x84>
 800c8b4:	b003      	add	sp, #12
 800c8b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ba:	f000 b87f 	b.w	800c9bc <__kernel_cosf>
 800c8be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8c2:	d304      	bcc.n	800c8ce <cosf+0x2e>
 800c8c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c8c8:	b003      	add	sp, #12
 800c8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8ce:	4668      	mov	r0, sp
 800c8d0:	f000 f914 	bl	800cafc <__ieee754_rem_pio2f>
 800c8d4:	f000 0003 	and.w	r0, r0, #3
 800c8d8:	2801      	cmp	r0, #1
 800c8da:	d009      	beq.n	800c8f0 <cosf+0x50>
 800c8dc:	2802      	cmp	r0, #2
 800c8de:	d010      	beq.n	800c902 <cosf+0x62>
 800c8e0:	b9b0      	cbnz	r0, 800c910 <cosf+0x70>
 800c8e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8e6:	ed9d 0a00 	vldr	s0, [sp]
 800c8ea:	f000 f867 	bl	800c9bc <__kernel_cosf>
 800c8ee:	e7eb      	b.n	800c8c8 <cosf+0x28>
 800c8f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8f4:	ed9d 0a00 	vldr	s0, [sp]
 800c8f8:	f000 f8b8 	bl	800ca6c <__kernel_sinf>
 800c8fc:	eeb1 0a40 	vneg.f32	s0, s0
 800c900:	e7e2      	b.n	800c8c8 <cosf+0x28>
 800c902:	eddd 0a01 	vldr	s1, [sp, #4]
 800c906:	ed9d 0a00 	vldr	s0, [sp]
 800c90a:	f000 f857 	bl	800c9bc <__kernel_cosf>
 800c90e:	e7f5      	b.n	800c8fc <cosf+0x5c>
 800c910:	eddd 0a01 	vldr	s1, [sp, #4]
 800c914:	ed9d 0a00 	vldr	s0, [sp]
 800c918:	2001      	movs	r0, #1
 800c91a:	f000 f8a7 	bl	800ca6c <__kernel_sinf>
 800c91e:	e7d3      	b.n	800c8c8 <cosf+0x28>
 800c920:	3f490fd8 	.word	0x3f490fd8
 800c924:	00000000 	.word	0x00000000

0800c928 <sinf>:
 800c928:	ee10 3a10 	vmov	r3, s0
 800c92c:	b507      	push	{r0, r1, r2, lr}
 800c92e:	4a1f      	ldr	r2, [pc, #124]	@ (800c9ac <sinf+0x84>)
 800c930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c934:	4293      	cmp	r3, r2
 800c936:	d807      	bhi.n	800c948 <sinf+0x20>
 800c938:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c9b0 <sinf+0x88>
 800c93c:	2000      	movs	r0, #0
 800c93e:	b003      	add	sp, #12
 800c940:	f85d eb04 	ldr.w	lr, [sp], #4
 800c944:	f000 b892 	b.w	800ca6c <__kernel_sinf>
 800c948:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c94c:	d304      	bcc.n	800c958 <sinf+0x30>
 800c94e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c952:	b003      	add	sp, #12
 800c954:	f85d fb04 	ldr.w	pc, [sp], #4
 800c958:	4668      	mov	r0, sp
 800c95a:	f000 f8cf 	bl	800cafc <__ieee754_rem_pio2f>
 800c95e:	f000 0003 	and.w	r0, r0, #3
 800c962:	2801      	cmp	r0, #1
 800c964:	d00a      	beq.n	800c97c <sinf+0x54>
 800c966:	2802      	cmp	r0, #2
 800c968:	d00f      	beq.n	800c98a <sinf+0x62>
 800c96a:	b9c0      	cbnz	r0, 800c99e <sinf+0x76>
 800c96c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c970:	ed9d 0a00 	vldr	s0, [sp]
 800c974:	2001      	movs	r0, #1
 800c976:	f000 f879 	bl	800ca6c <__kernel_sinf>
 800c97a:	e7ea      	b.n	800c952 <sinf+0x2a>
 800c97c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c980:	ed9d 0a00 	vldr	s0, [sp]
 800c984:	f000 f81a 	bl	800c9bc <__kernel_cosf>
 800c988:	e7e3      	b.n	800c952 <sinf+0x2a>
 800c98a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c98e:	ed9d 0a00 	vldr	s0, [sp]
 800c992:	2001      	movs	r0, #1
 800c994:	f000 f86a 	bl	800ca6c <__kernel_sinf>
 800c998:	eeb1 0a40 	vneg.f32	s0, s0
 800c99c:	e7d9      	b.n	800c952 <sinf+0x2a>
 800c99e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9a2:	ed9d 0a00 	vldr	s0, [sp]
 800c9a6:	f000 f809 	bl	800c9bc <__kernel_cosf>
 800c9aa:	e7f5      	b.n	800c998 <sinf+0x70>
 800c9ac:	3f490fd8 	.word	0x3f490fd8
 800c9b0:	00000000 	.word	0x00000000

0800c9b4 <__ieee754_sqrtf>:
 800c9b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c9b8:	4770      	bx	lr
	...

0800c9bc <__kernel_cosf>:
 800c9bc:	ee10 3a10 	vmov	r3, s0
 800c9c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c9c8:	eef0 6a40 	vmov.f32	s13, s0
 800c9cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c9d0:	d204      	bcs.n	800c9dc <__kernel_cosf+0x20>
 800c9d2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c9d6:	ee17 2a90 	vmov	r2, s15
 800c9da:	b342      	cbz	r2, 800ca2e <__kernel_cosf+0x72>
 800c9dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c9e0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ca4c <__kernel_cosf+0x90>
 800c9e4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ca50 <__kernel_cosf+0x94>
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800ca54 <__kernel_cosf+0x98>)
 800c9ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ca58 <__kernel_cosf+0x9c>
 800c9f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c9f8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ca5c <__kernel_cosf+0xa0>
 800c9fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca00:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ca60 <__kernel_cosf+0xa4>
 800ca04:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca08:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ca64 <__kernel_cosf+0xa8>
 800ca0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca10:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ca14:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ca18:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ca1c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ca20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca24:	d804      	bhi.n	800ca30 <__kernel_cosf+0x74>
 800ca26:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ca2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca2e:	4770      	bx	lr
 800ca30:	4a0d      	ldr	r2, [pc, #52]	@ (800ca68 <__kernel_cosf+0xac>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	bf9a      	itte	ls
 800ca36:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ca3a:	ee07 3a10 	vmovls	s14, r3
 800ca3e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ca42:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca4a:	e7ec      	b.n	800ca26 <__kernel_cosf+0x6a>
 800ca4c:	ad47d74e 	.word	0xad47d74e
 800ca50:	310f74f6 	.word	0x310f74f6
 800ca54:	3e999999 	.word	0x3e999999
 800ca58:	b493f27c 	.word	0xb493f27c
 800ca5c:	37d00d01 	.word	0x37d00d01
 800ca60:	bab60b61 	.word	0xbab60b61
 800ca64:	3d2aaaab 	.word	0x3d2aaaab
 800ca68:	3f480000 	.word	0x3f480000

0800ca6c <__kernel_sinf>:
 800ca6c:	ee10 3a10 	vmov	r3, s0
 800ca70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca74:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ca78:	d204      	bcs.n	800ca84 <__kernel_sinf+0x18>
 800ca7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ca7e:	ee17 3a90 	vmov	r3, s15
 800ca82:	b35b      	cbz	r3, 800cadc <__kernel_sinf+0x70>
 800ca84:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca88:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cae0 <__kernel_sinf+0x74>
 800ca8c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800cae4 <__kernel_sinf+0x78>
 800ca90:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca94:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800cae8 <__kernel_sinf+0x7c>
 800ca98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca9c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800caec <__kernel_sinf+0x80>
 800caa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800caa4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800caf0 <__kernel_sinf+0x84>
 800caa8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800caac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cab0:	b930      	cbnz	r0, 800cac0 <__kernel_sinf+0x54>
 800cab2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800caf4 <__kernel_sinf+0x88>
 800cab6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800caba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cabe:	4770      	bx	lr
 800cac0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cac4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cac8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cacc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cad0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800caf8 <__kernel_sinf+0x8c>
 800cad4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cad8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	2f2ec9d3 	.word	0x2f2ec9d3
 800cae4:	b2d72f34 	.word	0xb2d72f34
 800cae8:	3638ef1b 	.word	0x3638ef1b
 800caec:	b9500d01 	.word	0xb9500d01
 800caf0:	3c088889 	.word	0x3c088889
 800caf4:	be2aaaab 	.word	0xbe2aaaab
 800caf8:	3e2aaaab 	.word	0x3e2aaaab

0800cafc <__ieee754_rem_pio2f>:
 800cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cafe:	ee10 6a10 	vmov	r6, s0
 800cb02:	4b88      	ldr	r3, [pc, #544]	@ (800cd24 <__ieee754_rem_pio2f+0x228>)
 800cb04:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cb08:	429d      	cmp	r5, r3
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	d805      	bhi.n	800cb1c <__ieee754_rem_pio2f+0x20>
 800cb10:	2300      	movs	r3, #0
 800cb12:	ed80 0a00 	vstr	s0, [r0]
 800cb16:	6043      	str	r3, [r0, #4]
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e022      	b.n	800cb62 <__ieee754_rem_pio2f+0x66>
 800cb1c:	4b82      	ldr	r3, [pc, #520]	@ (800cd28 <__ieee754_rem_pio2f+0x22c>)
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	d83a      	bhi.n	800cb98 <__ieee754_rem_pio2f+0x9c>
 800cb22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800cd2c <__ieee754_rem_pio2f+0x230>
 800cb2c:	4a80      	ldr	r2, [pc, #512]	@ (800cd30 <__ieee754_rem_pio2f+0x234>)
 800cb2e:	f023 030f 	bic.w	r3, r3, #15
 800cb32:	dd18      	ble.n	800cb66 <__ieee754_rem_pio2f+0x6a>
 800cb34:	4293      	cmp	r3, r2
 800cb36:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cb3a:	bf09      	itett	eq
 800cb3c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800cd34 <__ieee754_rem_pio2f+0x238>
 800cb40:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800cd38 <__ieee754_rem_pio2f+0x23c>
 800cb44:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800cd3c <__ieee754_rem_pio2f+0x240>
 800cb48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cb4c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb54:	ed80 7a00 	vstr	s14, [r0]
 800cb58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cb5c:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb60:	2001      	movs	r0, #1
 800cb62:	b007      	add	sp, #28
 800cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb66:	4293      	cmp	r3, r2
 800cb68:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cb6c:	bf09      	itett	eq
 800cb6e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800cd34 <__ieee754_rem_pio2f+0x238>
 800cb72:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800cd38 <__ieee754_rem_pio2f+0x23c>
 800cb76:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800cd3c <__ieee754_rem_pio2f+0x240>
 800cb7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cb7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb86:	ed80 7a00 	vstr	s14, [r0]
 800cb8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8e:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb92:	f04f 30ff 	mov.w	r0, #4294967295
 800cb96:	e7e4      	b.n	800cb62 <__ieee754_rem_pio2f+0x66>
 800cb98:	4b69      	ldr	r3, [pc, #420]	@ (800cd40 <__ieee754_rem_pio2f+0x244>)
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	d873      	bhi.n	800cc86 <__ieee754_rem_pio2f+0x18a>
 800cb9e:	f000 f8dd 	bl	800cd5c <fabsf>
 800cba2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cd44 <__ieee754_rem_pio2f+0x248>
 800cba6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cbaa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cbae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cbb6:	ee17 0a90 	vmov	r0, s15
 800cbba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cd2c <__ieee754_rem_pio2f+0x230>
 800cbbe:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cbc2:	281f      	cmp	r0, #31
 800cbc4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cd38 <__ieee754_rem_pio2f+0x23c>
 800cbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbcc:	eeb1 6a47 	vneg.f32	s12, s14
 800cbd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cbd4:	ee16 1a90 	vmov	r1, s13
 800cbd8:	dc09      	bgt.n	800cbee <__ieee754_rem_pio2f+0xf2>
 800cbda:	4a5b      	ldr	r2, [pc, #364]	@ (800cd48 <__ieee754_rem_pio2f+0x24c>)
 800cbdc:	1e47      	subs	r7, r0, #1
 800cbde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cbe2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cbe6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d107      	bne.n	800cbfe <__ieee754_rem_pio2f+0x102>
 800cbee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800cbf2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800cbf6:	2a08      	cmp	r2, #8
 800cbf8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cbfc:	dc14      	bgt.n	800cc28 <__ieee754_rem_pio2f+0x12c>
 800cbfe:	6021      	str	r1, [r4, #0]
 800cc00:	ed94 7a00 	vldr	s14, [r4]
 800cc04:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc0e:	ed84 0a01 	vstr	s0, [r4, #4]
 800cc12:	daa6      	bge.n	800cb62 <__ieee754_rem_pio2f+0x66>
 800cc14:	eeb1 7a47 	vneg.f32	s14, s14
 800cc18:	eeb1 0a40 	vneg.f32	s0, s0
 800cc1c:	ed84 7a00 	vstr	s14, [r4]
 800cc20:	ed84 0a01 	vstr	s0, [r4, #4]
 800cc24:	4240      	negs	r0, r0
 800cc26:	e79c      	b.n	800cb62 <__ieee754_rem_pio2f+0x66>
 800cc28:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800cd34 <__ieee754_rem_pio2f+0x238>
 800cc2c:	eef0 6a40 	vmov.f32	s13, s0
 800cc30:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cc34:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cc38:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cc3c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cd3c <__ieee754_rem_pio2f+0x240>
 800cc40:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cc44:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cc48:	ee15 2a90 	vmov	r2, s11
 800cc4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cc50:	1a5b      	subs	r3, r3, r1
 800cc52:	2b19      	cmp	r3, #25
 800cc54:	dc04      	bgt.n	800cc60 <__ieee754_rem_pio2f+0x164>
 800cc56:	edc4 5a00 	vstr	s11, [r4]
 800cc5a:	eeb0 0a66 	vmov.f32	s0, s13
 800cc5e:	e7cf      	b.n	800cc00 <__ieee754_rem_pio2f+0x104>
 800cc60:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800cd4c <__ieee754_rem_pio2f+0x250>
 800cc64:	eeb0 0a66 	vmov.f32	s0, s13
 800cc68:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cc6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cc70:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800cd50 <__ieee754_rem_pio2f+0x254>
 800cc74:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cc78:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cc7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc80:	ed84 7a00 	vstr	s14, [r4]
 800cc84:	e7bc      	b.n	800cc00 <__ieee754_rem_pio2f+0x104>
 800cc86:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800cc8a:	d306      	bcc.n	800cc9a <__ieee754_rem_pio2f+0x19e>
 800cc8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cc90:	edc0 7a01 	vstr	s15, [r0, #4]
 800cc94:	edc0 7a00 	vstr	s15, [r0]
 800cc98:	e73e      	b.n	800cb18 <__ieee754_rem_pio2f+0x1c>
 800cc9a:	15ea      	asrs	r2, r5, #23
 800cc9c:	3a86      	subs	r2, #134	@ 0x86
 800cc9e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ccaa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800cd54 <__ieee754_rem_pio2f+0x258>
 800ccae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ccba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ccbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ccc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccca:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ccce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ccd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccda:	edcd 7a05 	vstr	s15, [sp, #20]
 800ccde:	d11e      	bne.n	800cd1e <__ieee754_rem_pio2f+0x222>
 800cce0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce8:	bf0c      	ite	eq
 800ccea:	2301      	moveq	r3, #1
 800ccec:	2302      	movne	r3, #2
 800ccee:	491a      	ldr	r1, [pc, #104]	@ (800cd58 <__ieee754_rem_pio2f+0x25c>)
 800ccf0:	9101      	str	r1, [sp, #4]
 800ccf2:	2102      	movs	r1, #2
 800ccf4:	9100      	str	r1, [sp, #0]
 800ccf6:	a803      	add	r0, sp, #12
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	f000 f89d 	bl	800ce38 <__kernel_rem_pio2f>
 800ccfe:	2e00      	cmp	r6, #0
 800cd00:	f6bf af2f 	bge.w	800cb62 <__ieee754_rem_pio2f+0x66>
 800cd04:	edd4 7a00 	vldr	s15, [r4]
 800cd08:	eef1 7a67 	vneg.f32	s15, s15
 800cd0c:	edc4 7a00 	vstr	s15, [r4]
 800cd10:	edd4 7a01 	vldr	s15, [r4, #4]
 800cd14:	eef1 7a67 	vneg.f32	s15, s15
 800cd18:	edc4 7a01 	vstr	s15, [r4, #4]
 800cd1c:	e782      	b.n	800cc24 <__ieee754_rem_pio2f+0x128>
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e7e5      	b.n	800ccee <__ieee754_rem_pio2f+0x1f2>
 800cd22:	bf00      	nop
 800cd24:	3f490fd8 	.word	0x3f490fd8
 800cd28:	4016cbe3 	.word	0x4016cbe3
 800cd2c:	3fc90f80 	.word	0x3fc90f80
 800cd30:	3fc90fd0 	.word	0x3fc90fd0
 800cd34:	37354400 	.word	0x37354400
 800cd38:	37354443 	.word	0x37354443
 800cd3c:	2e85a308 	.word	0x2e85a308
 800cd40:	43490f80 	.word	0x43490f80
 800cd44:	3f22f984 	.word	0x3f22f984
 800cd48:	0800d438 	.word	0x0800d438
 800cd4c:	2e85a300 	.word	0x2e85a300
 800cd50:	248d3132 	.word	0x248d3132
 800cd54:	43800000 	.word	0x43800000
 800cd58:	0800d4b8 	.word	0x0800d4b8

0800cd5c <fabsf>:
 800cd5c:	ee10 3a10 	vmov	r3, s0
 800cd60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd64:	ee00 3a10 	vmov	s0, r3
 800cd68:	4770      	bx	lr
	...

0800cd6c <scalbnf>:
 800cd6c:	ee10 3a10 	vmov	r3, s0
 800cd70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cd74:	d02b      	beq.n	800cdce <scalbnf+0x62>
 800cd76:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cd7a:	d302      	bcc.n	800cd82 <scalbnf+0x16>
 800cd7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd80:	4770      	bx	lr
 800cd82:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cd86:	d123      	bne.n	800cdd0 <scalbnf+0x64>
 800cd88:	4b24      	ldr	r3, [pc, #144]	@ (800ce1c <scalbnf+0xb0>)
 800cd8a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ce20 <scalbnf+0xb4>
 800cd8e:	4298      	cmp	r0, r3
 800cd90:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cd94:	db17      	blt.n	800cdc6 <scalbnf+0x5a>
 800cd96:	ee10 3a10 	vmov	r3, s0
 800cd9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cd9e:	3a19      	subs	r2, #25
 800cda0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cda4:	4288      	cmp	r0, r1
 800cda6:	dd15      	ble.n	800cdd4 <scalbnf+0x68>
 800cda8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ce24 <scalbnf+0xb8>
 800cdac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ce28 <scalbnf+0xbc>
 800cdb0:	ee10 3a10 	vmov	r3, s0
 800cdb4:	eeb0 7a67 	vmov.f32	s14, s15
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfb8      	it	lt
 800cdbc:	eef0 7a66 	vmovlt.f32	s15, s13
 800cdc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cdc4:	4770      	bx	lr
 800cdc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ce2c <scalbnf+0xc0>
 800cdca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cdce:	4770      	bx	lr
 800cdd0:	0dd2      	lsrs	r2, r2, #23
 800cdd2:	e7e5      	b.n	800cda0 <scalbnf+0x34>
 800cdd4:	4410      	add	r0, r2
 800cdd6:	28fe      	cmp	r0, #254	@ 0xfe
 800cdd8:	dce6      	bgt.n	800cda8 <scalbnf+0x3c>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	dd06      	ble.n	800cdec <scalbnf+0x80>
 800cdde:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cde2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cde6:	ee00 3a10 	vmov	s0, r3
 800cdea:	4770      	bx	lr
 800cdec:	f110 0f16 	cmn.w	r0, #22
 800cdf0:	da09      	bge.n	800ce06 <scalbnf+0x9a>
 800cdf2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ce2c <scalbnf+0xc0>
 800cdf6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ce30 <scalbnf+0xc4>
 800cdfa:	ee10 3a10 	vmov	r3, s0
 800cdfe:	eeb0 7a67 	vmov.f32	s14, s15
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	e7d9      	b.n	800cdba <scalbnf+0x4e>
 800ce06:	3019      	adds	r0, #25
 800ce08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce0c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ce10:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ce34 <scalbnf+0xc8>
 800ce14:	ee07 3a90 	vmov	s15, r3
 800ce18:	e7d7      	b.n	800cdca <scalbnf+0x5e>
 800ce1a:	bf00      	nop
 800ce1c:	ffff3cb0 	.word	0xffff3cb0
 800ce20:	4c000000 	.word	0x4c000000
 800ce24:	7149f2ca 	.word	0x7149f2ca
 800ce28:	f149f2ca 	.word	0xf149f2ca
 800ce2c:	0da24260 	.word	0x0da24260
 800ce30:	8da24260 	.word	0x8da24260
 800ce34:	33000000 	.word	0x33000000

0800ce38 <__kernel_rem_pio2f>:
 800ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3c:	ed2d 8b04 	vpush	{d8-d9}
 800ce40:	b0d9      	sub	sp, #356	@ 0x164
 800ce42:	4690      	mov	r8, r2
 800ce44:	9001      	str	r0, [sp, #4]
 800ce46:	4ab6      	ldr	r2, [pc, #728]	@ (800d120 <__kernel_rem_pio2f+0x2e8>)
 800ce48:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ce4a:	f118 0f04 	cmn.w	r8, #4
 800ce4e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ce52:	460f      	mov	r7, r1
 800ce54:	f103 3bff 	add.w	fp, r3, #4294967295
 800ce58:	db26      	blt.n	800cea8 <__kernel_rem_pio2f+0x70>
 800ce5a:	f1b8 0203 	subs.w	r2, r8, #3
 800ce5e:	bf48      	it	mi
 800ce60:	f108 0204 	addmi.w	r2, r8, #4
 800ce64:	10d2      	asrs	r2, r2, #3
 800ce66:	1c55      	adds	r5, r2, #1
 800ce68:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ce6a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800ce6e:	00e8      	lsls	r0, r5, #3
 800ce70:	eba2 060b 	sub.w	r6, r2, fp
 800ce74:	9002      	str	r0, [sp, #8]
 800ce76:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ce7a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ce7e:	ac1c      	add	r4, sp, #112	@ 0x70
 800ce80:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ce84:	2000      	movs	r0, #0
 800ce86:	4560      	cmp	r0, ip
 800ce88:	dd10      	ble.n	800ceac <__kernel_rem_pio2f+0x74>
 800ce8a:	a91c      	add	r1, sp, #112	@ 0x70
 800ce8c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ce90:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ce94:	2600      	movs	r6, #0
 800ce96:	4556      	cmp	r6, sl
 800ce98:	dc24      	bgt.n	800cee4 <__kernel_rem_pio2f+0xac>
 800ce9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ce9e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800cea2:	4684      	mov	ip, r0
 800cea4:	2400      	movs	r4, #0
 800cea6:	e016      	b.n	800ced6 <__kernel_rem_pio2f+0x9e>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	e7dc      	b.n	800ce66 <__kernel_rem_pio2f+0x2e>
 800ceac:	42c6      	cmn	r6, r0
 800ceae:	bf5d      	ittte	pl
 800ceb0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ceb4:	ee07 1a90 	vmovpl	s15, r1
 800ceb8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cebc:	eef0 7a47 	vmovmi.f32	s15, s14
 800cec0:	ece4 7a01 	vstmia	r4!, {s15}
 800cec4:	3001      	adds	r0, #1
 800cec6:	e7de      	b.n	800ce86 <__kernel_rem_pio2f+0x4e>
 800cec8:	ecfe 6a01 	vldmia	lr!, {s13}
 800cecc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800ced0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ced4:	3401      	adds	r4, #1
 800ced6:	455c      	cmp	r4, fp
 800ced8:	ddf6      	ble.n	800cec8 <__kernel_rem_pio2f+0x90>
 800ceda:	ece9 7a01 	vstmia	r9!, {s15}
 800cede:	3601      	adds	r6, #1
 800cee0:	3004      	adds	r0, #4
 800cee2:	e7d8      	b.n	800ce96 <__kernel_rem_pio2f+0x5e>
 800cee4:	a908      	add	r1, sp, #32
 800cee6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceea:	9104      	str	r1, [sp, #16]
 800ceec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ceee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d12c <__kernel_rem_pio2f+0x2f4>
 800cef2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d128 <__kernel_rem_pio2f+0x2f0>
 800cef6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cefa:	9203      	str	r2, [sp, #12]
 800cefc:	4654      	mov	r4, sl
 800cefe:	00a2      	lsls	r2, r4, #2
 800cf00:	9205      	str	r2, [sp, #20]
 800cf02:	aa58      	add	r2, sp, #352	@ 0x160
 800cf04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cf08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800cf0c:	a944      	add	r1, sp, #272	@ 0x110
 800cf0e:	aa08      	add	r2, sp, #32
 800cf10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800cf14:	4694      	mov	ip, r2
 800cf16:	4626      	mov	r6, r4
 800cf18:	2e00      	cmp	r6, #0
 800cf1a:	dc4c      	bgt.n	800cfb6 <__kernel_rem_pio2f+0x17e>
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf22:	f7ff ff23 	bl	800cd6c <scalbnf>
 800cf26:	eeb0 8a40 	vmov.f32	s16, s0
 800cf2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800cf2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cf32:	f000 f9e9 	bl	800d308 <floorf>
 800cf36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800cf3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cf3e:	2d00      	cmp	r5, #0
 800cf40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cf48:	ee17 9a90 	vmov	r9, s15
 800cf4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf50:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cf54:	dd41      	ble.n	800cfda <__kernel_rem_pio2f+0x1a2>
 800cf56:	f104 3cff 	add.w	ip, r4, #4294967295
 800cf5a:	a908      	add	r1, sp, #32
 800cf5c:	f1c5 0e08 	rsb	lr, r5, #8
 800cf60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800cf64:	fa46 f00e 	asr.w	r0, r6, lr
 800cf68:	4481      	add	r9, r0
 800cf6a:	fa00 f00e 	lsl.w	r0, r0, lr
 800cf6e:	1a36      	subs	r6, r6, r0
 800cf70:	f1c5 0007 	rsb	r0, r5, #7
 800cf74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800cf78:	4106      	asrs	r6, r0
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	dd3c      	ble.n	800cff8 <__kernel_rem_pio2f+0x1c0>
 800cf7e:	f04f 0e00 	mov.w	lr, #0
 800cf82:	f109 0901 	add.w	r9, r9, #1
 800cf86:	4670      	mov	r0, lr
 800cf88:	4574      	cmp	r4, lr
 800cf8a:	dc68      	bgt.n	800d05e <__kernel_rem_pio2f+0x226>
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	dd03      	ble.n	800cf98 <__kernel_rem_pio2f+0x160>
 800cf90:	2d01      	cmp	r5, #1
 800cf92:	d074      	beq.n	800d07e <__kernel_rem_pio2f+0x246>
 800cf94:	2d02      	cmp	r5, #2
 800cf96:	d07d      	beq.n	800d094 <__kernel_rem_pio2f+0x25c>
 800cf98:	2e02      	cmp	r6, #2
 800cf9a:	d12d      	bne.n	800cff8 <__kernel_rem_pio2f+0x1c0>
 800cf9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cfa0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cfa4:	b340      	cbz	r0, 800cff8 <__kernel_rem_pio2f+0x1c0>
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	9306      	str	r3, [sp, #24]
 800cfaa:	f7ff fedf 	bl	800cd6c <scalbnf>
 800cfae:	9b06      	ldr	r3, [sp, #24]
 800cfb0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cfb4:	e020      	b.n	800cff8 <__kernel_rem_pio2f+0x1c0>
 800cfb6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cfba:	3e01      	subs	r6, #1
 800cfbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfc4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cfc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cfcc:	ecac 0a01 	vstmia	ip!, {s0}
 800cfd0:	ed30 0a01 	vldmdb	r0!, {s0}
 800cfd4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cfd8:	e79e      	b.n	800cf18 <__kernel_rem_pio2f+0xe0>
 800cfda:	d105      	bne.n	800cfe8 <__kernel_rem_pio2f+0x1b0>
 800cfdc:	1e60      	subs	r0, r4, #1
 800cfde:	a908      	add	r1, sp, #32
 800cfe0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800cfe4:	11f6      	asrs	r6, r6, #7
 800cfe6:	e7c8      	b.n	800cf7a <__kernel_rem_pio2f+0x142>
 800cfe8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cfec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	da31      	bge.n	800d05a <__kernel_rem_pio2f+0x222>
 800cff6:	2600      	movs	r6, #0
 800cff8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d000:	f040 8098 	bne.w	800d134 <__kernel_rem_pio2f+0x2fc>
 800d004:	1e60      	subs	r0, r4, #1
 800d006:	2200      	movs	r2, #0
 800d008:	4550      	cmp	r0, sl
 800d00a:	da4b      	bge.n	800d0a4 <__kernel_rem_pio2f+0x26c>
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	d065      	beq.n	800d0dc <__kernel_rem_pio2f+0x2a4>
 800d010:	3c01      	subs	r4, #1
 800d012:	ab08      	add	r3, sp, #32
 800d014:	3d08      	subs	r5, #8
 800d016:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0f8      	beq.n	800d010 <__kernel_rem_pio2f+0x1d8>
 800d01e:	4628      	mov	r0, r5
 800d020:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d024:	f7ff fea2 	bl	800cd6c <scalbnf>
 800d028:	1c63      	adds	r3, r4, #1
 800d02a:	aa44      	add	r2, sp, #272	@ 0x110
 800d02c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d12c <__kernel_rem_pio2f+0x2f4>
 800d030:	0099      	lsls	r1, r3, #2
 800d032:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d036:	4623      	mov	r3, r4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f280 80a9 	bge.w	800d190 <__kernel_rem_pio2f+0x358>
 800d03e:	4623      	mov	r3, r4
 800d040:	2b00      	cmp	r3, #0
 800d042:	f2c0 80c7 	blt.w	800d1d4 <__kernel_rem_pio2f+0x39c>
 800d046:	aa44      	add	r2, sp, #272	@ 0x110
 800d048:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d04c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d124 <__kernel_rem_pio2f+0x2ec>
 800d050:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800d054:	2000      	movs	r0, #0
 800d056:	1ae2      	subs	r2, r4, r3
 800d058:	e0b1      	b.n	800d1be <__kernel_rem_pio2f+0x386>
 800d05a:	2602      	movs	r6, #2
 800d05c:	e78f      	b.n	800cf7e <__kernel_rem_pio2f+0x146>
 800d05e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d062:	b948      	cbnz	r0, 800d078 <__kernel_rem_pio2f+0x240>
 800d064:	b121      	cbz	r1, 800d070 <__kernel_rem_pio2f+0x238>
 800d066:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d06a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d06e:	2101      	movs	r1, #1
 800d070:	f10e 0e01 	add.w	lr, lr, #1
 800d074:	4608      	mov	r0, r1
 800d076:	e787      	b.n	800cf88 <__kernel_rem_pio2f+0x150>
 800d078:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d07c:	e7f5      	b.n	800d06a <__kernel_rem_pio2f+0x232>
 800d07e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d082:	aa08      	add	r2, sp, #32
 800d084:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d088:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d08c:	a908      	add	r1, sp, #32
 800d08e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d092:	e781      	b.n	800cf98 <__kernel_rem_pio2f+0x160>
 800d094:	f104 3cff 	add.w	ip, r4, #4294967295
 800d098:	aa08      	add	r2, sp, #32
 800d09a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d09e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d0a2:	e7f3      	b.n	800d08c <__kernel_rem_pio2f+0x254>
 800d0a4:	a908      	add	r1, sp, #32
 800d0a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d0aa:	3801      	subs	r0, #1
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	e7ab      	b.n	800d008 <__kernel_rem_pio2f+0x1d0>
 800d0b0:	3201      	adds	r2, #1
 800d0b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d0b6:	2e00      	cmp	r6, #0
 800d0b8:	d0fa      	beq.n	800d0b0 <__kernel_rem_pio2f+0x278>
 800d0ba:	9905      	ldr	r1, [sp, #20]
 800d0bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d0c0:	eb0d 0001 	add.w	r0, sp, r1
 800d0c4:	18e6      	adds	r6, r4, r3
 800d0c6:	a91c      	add	r1, sp, #112	@ 0x70
 800d0c8:	f104 0c01 	add.w	ip, r4, #1
 800d0cc:	384c      	subs	r0, #76	@ 0x4c
 800d0ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d0d2:	4422      	add	r2, r4
 800d0d4:	4562      	cmp	r2, ip
 800d0d6:	da04      	bge.n	800d0e2 <__kernel_rem_pio2f+0x2aa>
 800d0d8:	4614      	mov	r4, r2
 800d0da:	e710      	b.n	800cefe <__kernel_rem_pio2f+0xc6>
 800d0dc:	9804      	ldr	r0, [sp, #16]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	e7e7      	b.n	800d0b2 <__kernel_rem_pio2f+0x27a>
 800d0e2:	9903      	ldr	r1, [sp, #12]
 800d0e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d0e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d0ec:	9105      	str	r1, [sp, #20]
 800d0ee:	ee07 1a90 	vmov	s15, r1
 800d0f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0f6:	2400      	movs	r4, #0
 800d0f8:	ece6 7a01 	vstmia	r6!, {s15}
 800d0fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800d100:	46b1      	mov	r9, r6
 800d102:	455c      	cmp	r4, fp
 800d104:	dd04      	ble.n	800d110 <__kernel_rem_pio2f+0x2d8>
 800d106:	ece0 7a01 	vstmia	r0!, {s15}
 800d10a:	f10c 0c01 	add.w	ip, ip, #1
 800d10e:	e7e1      	b.n	800d0d4 <__kernel_rem_pio2f+0x29c>
 800d110:	ecfe 6a01 	vldmia	lr!, {s13}
 800d114:	ed39 7a01 	vldmdb	r9!, {s14}
 800d118:	3401      	adds	r4, #1
 800d11a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d11e:	e7f0      	b.n	800d102 <__kernel_rem_pio2f+0x2ca>
 800d120:	0800d7fc 	.word	0x0800d7fc
 800d124:	0800d7d0 	.word	0x0800d7d0
 800d128:	43800000 	.word	0x43800000
 800d12c:	3b800000 	.word	0x3b800000
 800d130:	00000000 	.word	0x00000000
 800d134:	9b02      	ldr	r3, [sp, #8]
 800d136:	eeb0 0a48 	vmov.f32	s0, s16
 800d13a:	eba3 0008 	sub.w	r0, r3, r8
 800d13e:	f7ff fe15 	bl	800cd6c <scalbnf>
 800d142:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d128 <__kernel_rem_pio2f+0x2f0>
 800d146:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d14e:	db19      	blt.n	800d184 <__kernel_rem_pio2f+0x34c>
 800d150:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d12c <__kernel_rem_pio2f+0x2f4>
 800d154:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d158:	aa08      	add	r2, sp, #32
 800d15a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d15e:	3508      	adds	r5, #8
 800d160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d164:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d16c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d170:	ee10 3a10 	vmov	r3, s0
 800d174:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d178:	ee17 3a90 	vmov	r3, s15
 800d17c:	3401      	adds	r4, #1
 800d17e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d182:	e74c      	b.n	800d01e <__kernel_rem_pio2f+0x1e6>
 800d184:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d188:	aa08      	add	r2, sp, #32
 800d18a:	ee10 3a10 	vmov	r3, s0
 800d18e:	e7f6      	b.n	800d17e <__kernel_rem_pio2f+0x346>
 800d190:	a808      	add	r0, sp, #32
 800d192:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d196:	9001      	str	r0, [sp, #4]
 800d198:	ee07 0a90 	vmov	s15, r0
 800d19c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d1a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d1aa:	ed62 7a01 	vstmdb	r2!, {s15}
 800d1ae:	e743      	b.n	800d038 <__kernel_rem_pio2f+0x200>
 800d1b0:	ecfc 6a01 	vldmia	ip!, {s13}
 800d1b4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d1b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d1bc:	3001      	adds	r0, #1
 800d1be:	4550      	cmp	r0, sl
 800d1c0:	dc01      	bgt.n	800d1c6 <__kernel_rem_pio2f+0x38e>
 800d1c2:	4290      	cmp	r0, r2
 800d1c4:	ddf4      	ble.n	800d1b0 <__kernel_rem_pio2f+0x378>
 800d1c6:	a858      	add	r0, sp, #352	@ 0x160
 800d1c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d1cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	e735      	b.n	800d040 <__kernel_rem_pio2f+0x208>
 800d1d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	dc09      	bgt.n	800d1ee <__kernel_rem_pio2f+0x3b6>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dc27      	bgt.n	800d22e <__kernel_rem_pio2f+0x3f6>
 800d1de:	d040      	beq.n	800d262 <__kernel_rem_pio2f+0x42a>
 800d1e0:	f009 0007 	and.w	r0, r9, #7
 800d1e4:	b059      	add	sp, #356	@ 0x164
 800d1e6:	ecbd 8b04 	vpop	{d8-d9}
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d1f5      	bne.n	800d1e0 <__kernel_rem_pio2f+0x3a8>
 800d1f4:	aa30      	add	r2, sp, #192	@ 0xc0
 800d1f6:	1f0b      	subs	r3, r1, #4
 800d1f8:	4413      	add	r3, r2
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	2800      	cmp	r0, #0
 800d200:	dc50      	bgt.n	800d2a4 <__kernel_rem_pio2f+0x46c>
 800d202:	4622      	mov	r2, r4
 800d204:	2a01      	cmp	r2, #1
 800d206:	dc5d      	bgt.n	800d2c4 <__kernel_rem_pio2f+0x48c>
 800d208:	ab30      	add	r3, sp, #192	@ 0xc0
 800d20a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800d20e:	440b      	add	r3, r1
 800d210:	2c01      	cmp	r4, #1
 800d212:	dc67      	bgt.n	800d2e4 <__kernel_rem_pio2f+0x4ac>
 800d214:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d218:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d21c:	2e00      	cmp	r6, #0
 800d21e:	d167      	bne.n	800d2f0 <__kernel_rem_pio2f+0x4b8>
 800d220:	edc7 6a00 	vstr	s13, [r7]
 800d224:	ed87 7a01 	vstr	s14, [r7, #4]
 800d228:	edc7 7a02 	vstr	s15, [r7, #8]
 800d22c:	e7d8      	b.n	800d1e0 <__kernel_rem_pio2f+0x3a8>
 800d22e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d230:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800d234:	440b      	add	r3, r1
 800d236:	4622      	mov	r2, r4
 800d238:	2a00      	cmp	r2, #0
 800d23a:	da24      	bge.n	800d286 <__kernel_rem_pio2f+0x44e>
 800d23c:	b34e      	cbz	r6, 800d292 <__kernel_rem_pio2f+0x45a>
 800d23e:	eef1 7a47 	vneg.f32	s15, s14
 800d242:	edc7 7a00 	vstr	s15, [r7]
 800d246:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d24a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d24e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d250:	2301      	movs	r3, #1
 800d252:	429c      	cmp	r4, r3
 800d254:	da20      	bge.n	800d298 <__kernel_rem_pio2f+0x460>
 800d256:	b10e      	cbz	r6, 800d25c <__kernel_rem_pio2f+0x424>
 800d258:	eef1 7a67 	vneg.f32	s15, s15
 800d25c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d260:	e7be      	b.n	800d1e0 <__kernel_rem_pio2f+0x3a8>
 800d262:	ab30      	add	r3, sp, #192	@ 0xc0
 800d264:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d130 <__kernel_rem_pio2f+0x2f8>
 800d268:	440b      	add	r3, r1
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	da05      	bge.n	800d27a <__kernel_rem_pio2f+0x442>
 800d26e:	b10e      	cbz	r6, 800d274 <__kernel_rem_pio2f+0x43c>
 800d270:	eef1 7a67 	vneg.f32	s15, s15
 800d274:	edc7 7a00 	vstr	s15, [r7]
 800d278:	e7b2      	b.n	800d1e0 <__kernel_rem_pio2f+0x3a8>
 800d27a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d27e:	3c01      	subs	r4, #1
 800d280:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d284:	e7f1      	b.n	800d26a <__kernel_rem_pio2f+0x432>
 800d286:	ed73 7a01 	vldmdb	r3!, {s15}
 800d28a:	3a01      	subs	r2, #1
 800d28c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d290:	e7d2      	b.n	800d238 <__kernel_rem_pio2f+0x400>
 800d292:	eef0 7a47 	vmov.f32	s15, s14
 800d296:	e7d4      	b.n	800d242 <__kernel_rem_pio2f+0x40a>
 800d298:	ecb2 7a01 	vldmia	r2!, {s14}
 800d29c:	3301      	adds	r3, #1
 800d29e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2a2:	e7d6      	b.n	800d252 <__kernel_rem_pio2f+0x41a>
 800d2a4:	ed72 7a01 	vldmdb	r2!, {s15}
 800d2a8:	edd2 6a01 	vldr	s13, [r2, #4]
 800d2ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d2b0:	3801      	subs	r0, #1
 800d2b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2b6:	ed82 7a00 	vstr	s14, [r2]
 800d2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2be:	edc2 7a01 	vstr	s15, [r2, #4]
 800d2c2:	e79c      	b.n	800d1fe <__kernel_rem_pio2f+0x3c6>
 800d2c4:	ed73 7a01 	vldmdb	r3!, {s15}
 800d2c8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d2cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d2d0:	3a01      	subs	r2, #1
 800d2d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2d6:	ed83 7a00 	vstr	s14, [r3]
 800d2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2de:	edc3 7a01 	vstr	s15, [r3, #4]
 800d2e2:	e78f      	b.n	800d204 <__kernel_rem_pio2f+0x3cc>
 800d2e4:	ed33 7a01 	vldmdb	r3!, {s14}
 800d2e8:	3c01      	subs	r4, #1
 800d2ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2ee:	e78f      	b.n	800d210 <__kernel_rem_pio2f+0x3d8>
 800d2f0:	eef1 6a66 	vneg.f32	s13, s13
 800d2f4:	eeb1 7a47 	vneg.f32	s14, s14
 800d2f8:	edc7 6a00 	vstr	s13, [r7]
 800d2fc:	ed87 7a01 	vstr	s14, [r7, #4]
 800d300:	eef1 7a67 	vneg.f32	s15, s15
 800d304:	e790      	b.n	800d228 <__kernel_rem_pio2f+0x3f0>
 800d306:	bf00      	nop

0800d308 <floorf>:
 800d308:	ee10 3a10 	vmov	r3, s0
 800d30c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d310:	3a7f      	subs	r2, #127	@ 0x7f
 800d312:	2a16      	cmp	r2, #22
 800d314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d318:	dc2b      	bgt.n	800d372 <floorf+0x6a>
 800d31a:	2a00      	cmp	r2, #0
 800d31c:	da12      	bge.n	800d344 <floorf+0x3c>
 800d31e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d384 <floorf+0x7c>
 800d322:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d326:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32e:	dd06      	ble.n	800d33e <floorf+0x36>
 800d330:	2b00      	cmp	r3, #0
 800d332:	da24      	bge.n	800d37e <floorf+0x76>
 800d334:	2900      	cmp	r1, #0
 800d336:	4b14      	ldr	r3, [pc, #80]	@ (800d388 <floorf+0x80>)
 800d338:	bf08      	it	eq
 800d33a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d33e:	ee00 3a10 	vmov	s0, r3
 800d342:	4770      	bx	lr
 800d344:	4911      	ldr	r1, [pc, #68]	@ (800d38c <floorf+0x84>)
 800d346:	4111      	asrs	r1, r2
 800d348:	420b      	tst	r3, r1
 800d34a:	d0fa      	beq.n	800d342 <floorf+0x3a>
 800d34c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d384 <floorf+0x7c>
 800d350:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d354:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35c:	ddef      	ble.n	800d33e <floorf+0x36>
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbe      	ittt	lt
 800d362:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d366:	fa40 f202 	asrlt.w	r2, r0, r2
 800d36a:	189b      	addlt	r3, r3, r2
 800d36c:	ea23 0301 	bic.w	r3, r3, r1
 800d370:	e7e5      	b.n	800d33e <floorf+0x36>
 800d372:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d376:	d3e4      	bcc.n	800d342 <floorf+0x3a>
 800d378:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d37c:	4770      	bx	lr
 800d37e:	2300      	movs	r3, #0
 800d380:	e7dd      	b.n	800d33e <floorf+0x36>
 800d382:	bf00      	nop
 800d384:	7149f2ca 	.word	0x7149f2ca
 800d388:	bf800000 	.word	0xbf800000
 800d38c:	007fffff 	.word	0x007fffff

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr
