
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d63c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  0800d814  0800d814  0000e814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e488  0800e488  000101b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e488  0800e488  0000f488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e490  0800e490  000101b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e490  0800e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e494  0800e494  0000f494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800e498  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  200001b4  0800e64c  000101b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  0800e64c  00010cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d08c  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005165  00000000  00000000  0003d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  000423d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001541  00000000  00000000  00043f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd74  00000000  00000000  000454a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002980c  00000000  00000000  0007221d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a78d  00000000  00000000  0009ba29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b61b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  001b61fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bde54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d7fc 	.word	0x0800d7fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800d7fc 	.word	0x0800d7fc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fe49 	bl	8005ad0 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 ff32 	bl	8004cb4 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 faeb 	bl	80014f2 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb81 	bl	80016b0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_range+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_range+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc7d 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_range+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc74 	bl	8001900 <PWM_write_range>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_range+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc60 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fc57 	bl	8001900 <PWM_write_range>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_range+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc45 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc38 	bl	8001900 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 fc46 	bl	800695c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_range+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fc0f 	bl	8001900 <PWM_write_range>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f005 fc29 	bl	800695c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbf2 	bl	8001900 <PWM_write_range>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f005 fc0e 	bl	800695c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fbd3 	bl	8001900 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	edc7 0a00 	vstr	s1, [r7]
 8001216:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <FIR_init+0x2a>
        numTaps += 1;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f00b f874 	bl	800c328 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f00b f86b 	bl	800c328 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <FIR_init+0x224>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80db 	beq.w	8001424 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001272:	e00a      	b.n	800128a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	3301      	adds	r3, #1
 8001288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800128a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f0      	bcc.n	8001274 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001292:	edd7 6a01 	vldr	s13, [r7, #4]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ae:	e077      	b.n	80013a0 <FIR_init+0x1a0>
            if (i == half_taps) {
 80012b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10c      	bne.n	80012d6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
 80012d4:	e02c      	b.n	8001330 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80012d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80012e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001430 <FIR_init+0x230>
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f00b f9c8 	bl	800c694 <sinf>
 8001304:	eef0 6a40 	vmov.f32	s13, s0
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001434 <FIR_init+0x234>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	ed93 8a00 	vldr	s16, [r3]
 8001340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001430 <FIR_init+0x230>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3b01      	subs	r3, #1
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eeb0 0a66 	vmov.f32	s0, s13
 8001368:	f00b f950 	bl	800c60c <cosf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001438 <FIR_init+0x238>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800143c <FIR_init+0x23c>
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001390:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db82      	blt.n	80012b0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	83fb      	strh	r3, [r7, #30]
 80013b4:	e00f      	b.n	80013d6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83fb      	strh	r3, [r7, #30]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3eb      	bcc.n	80013b6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d01b      	beq.n	8001424 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	83bb      	strh	r3, [r7, #28]
 80013f0:	e014      	b.n	800141c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed97 7a08 	vldr	s14, [r7, #32]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	83bb      	strh	r3, [r7, #28]
 800141c:	8bba      	ldrh	r2, [r7, #28]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e6      	bcc.n	80013f2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	ecbd 8b02 	vpop	{d8}
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40c90fdb 	.word	0x40c90fdb
 8001434:	40490fdb 	.word	0x40490fdb
 8001438:	3eeb851f 	.word	0x3eeb851f
 800143c:	3f0a3d71 	.word	0x3f0a3d71

08001440 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	895b      	ldrh	r3, [r3, #10]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	895b      	ldrh	r3, [r3, #10]
 8001466:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	813b      	strh	r3, [r7, #8]
 800146c:	e023      	b.n	80014b6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 800149a:	897b      	ldrh	r3, [r7, #10]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d104      	bne.n	80014aa <FIR_process+0x6a>
            index = fir->numTaps - 1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	e002      	b.n	80014b0 <FIR_process+0x70>
        } else {
            index--;
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80014b0:	893b      	ldrh	r3, [r7, #8]
 80014b2:	3301      	adds	r3, #1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	891b      	ldrh	r3, [r3, #8]
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3d6      	bcc.n	800146e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	895b      	ldrh	r3, [r3, #10]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	895a      	ldrh	r2, [r3, #10]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	891b      	ldrh	r3, [r3, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d302      	bcc.n	80014de <FIR_process+0x9e>
        fir->bufferIndex = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	815a      	strh	r2, [r3, #10]
    }

    return output;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	ee07 3a90 	vmov	s15, r3
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80014f2:	b480      	push	{r7}
 80014f4:	b089      	sub	sp, #36	@ 0x24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fc:	edc7 0a04 	vstr	s1, [r7, #16]
 8001500:	ed87 1a03 	vstr	s2, [r7, #12]
 8001504:	edc7 1a02 	vstr	s3, [r7, #8]
 8001508:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800150c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001518:	ed97 7a03 	vldr	s14, [r7, #12]
 800151c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001528:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800152c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001530:	edd7 7a02 	vldr	s15, [r7, #8]
 8001534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001538:	edd7 7a07 	vldr	s15, [r7, #28]
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	ed97 7a02 	vldr	s14, [r7, #8]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	ee07 3a90 	vmov	s15, r3
}
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	3724      	adds	r7, #36	@ 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200001d0 	.word	0x200001d0

080015a0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <modbus_3t5_Timeout+0x1c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	755a      	strb	r2, [r3, #21]

}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200001d0 	.word	0x200001d0

080015c0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f009 f871 	bl	800a6b0 <HAL_UART_GetError>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d101      	bne.n	80015d8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80015d4:	f7ff ffc4 	bl	8001560 <modbus_1t5_Timeout>

	}
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80015ee:	4a2d      	ldr	r2, [pc, #180]	@ (80016a4 <Modbus_init+0xc4>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <Modbus_init+0xc4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <Modbus_init+0xc4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <Modbus_init+0xc4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <Modbus_init+0xc4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	7e3a      	ldrb	r2, [r7, #24]
 8001612:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <Modbus_init+0xc4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <Modbus_init+0xc8>)
 8001622:	210e      	movs	r1, #14
 8001624:	4618      	mov	r0, r3
 8001626:	f007 faf1 	bl	8008c0c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2110      	movs	r1, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f008 ffe7 	bl	800a604 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4618      	mov	r0, r3
 800163c:	f008 fffe 	bl	800a63c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <Modbus_init+0xcc>)
 8001646:	2104      	movs	r1, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f008 fb2f 	bl	8009cac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <Modbus_init+0xc4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <Modbus_init+0xc4>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <Modbus_init+0xc4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001660:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001664:	4413      	add	r3, r2
 8001666:	3302      	adds	r3, #2
 8001668:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800166c:	4619      	mov	r1, r3
 800166e:	f008 fbd7 	bl	8009e20 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <Modbus_init+0xc4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10c      	bne.n	800169c <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <Modbus_init+0xc4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fa9b 	bl	8007bc4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <Modbus_init+0xc4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fcea 	bl	8008070 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200001d0 	.word	0x200001d0
 80016a8:	080015a1 	.word	0x080015a1
 80016ac:	080015c1 	.word	0x080015c1

080016b0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <PWM_init+0x40>)
 80016c2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f006 fa04 	bl	8007ae4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4619      	mov	r1, r3
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f006 fb4b 	bl	8007d7c <HAL_TIM_PWM_Start>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0a21fe80 	.word	0x0a21fe80

080016f4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001700:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001704:	edd7 7a02 	vldr	s15, [r7, #8]
 8001708:	eef5 7a40 	vcmp.f32	s15, #0.0
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d137      	bne.n	8001782 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	889b      	ldrh	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <PWM_write_duty+0x32>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001724:	e0e1      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d105      	bne.n	800173a <PWM_write_duty+0x46>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	6393      	str	r3, [r2, #56]	@ 0x38
 8001738:	e0d7      	b.n	80018ea <PWM_write_duty+0x1f6>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d105      	bne.n	800174e <PWM_write_duty+0x5a>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800174c:	e0cd      	b.n	80018ea <PWM_write_duty+0x1f6>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d105      	bne.n	8001762 <PWM_write_duty+0x6e>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	e0c3      	b.n	80018ea <PWM_write_duty+0x1f6>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d105      	bne.n	8001776 <PWM_write_duty+0x82>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	6493      	str	r3, [r2, #72]	@ 0x48
 8001774:	e0b9      	b.n	80018ea <PWM_write_duty+0x1f6>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001780:	e0b3      	b.n	80018ea <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800178e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 2a90 	vmov	r2, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80017aa:	33fe      	adds	r3, #254	@ 0xfe
 80017ac:	4a51      	ldr	r2, [pc, #324]	@ (80018f4 <PWM_write_duty+0x200>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0bdb      	lsrs	r3, r3, #15
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	3301      	adds	r3, #1
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80017e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	89db      	ldrh	r3, [r3, #14]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe5c 	bl	80004bc <__aeabi_i2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	eef0 7ae7 	vabs.f32	s15, s15
 8001810:	ee17 0a90 	vmov	r0, s15
 8001814:	f7fe fe64 	bl	80004e0 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe feb6 	bl	8000590 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <PWM_write_duty+0x204>)
 8001832:	f7fe ffd7 	bl	80007e4 <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f8b9 	bl	80009b4 <__aeabi_d2uiz>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	899a      	ldrh	r2, [r3, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	89da      	ldrh	r2, [r3, #14]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	89da      	ldrh	r2, [r3, #14]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <PWM_write_duty+0x190>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	6952      	ldr	r2, [r2, #20]
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001882:	e032      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d106      	bne.n	800189a <PWM_write_duty+0x1a6>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001898:	e027      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	889b      	ldrh	r3, [r3, #4]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d106      	bne.n	80018b0 <PWM_write_duty+0x1bc>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018ae:	e01c      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d106      	bne.n	80018c6 <PWM_write_duty+0x1d2>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018c4:	e011      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	889b      	ldrh	r3, [r3, #4]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d106      	bne.n	80018dc <PWM_write_duty+0x1e8>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80018da:	e006      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018e8:	e7ff      	b.n	80018ea <PWM_write_duty+0x1f6>
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	80008001 	.word	0x80008001
 80018f8:	40590000 	.word	0x40590000
 80018fc:	00000000 	.word	0x00000000

08001900 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	ed87 0a02 	vstr	s0, [r7, #8]
 800190c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001910:	edd7 7a02 	vldr	s15, [r7, #8]
 8001914:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d137      	bne.n	800198e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <PWM_write_range+0x32>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001930:	e0e1      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d105      	bne.n	8001946 <PWM_write_range+0x46>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	6393      	str	r3, [r2, #56]	@ 0x38
 8001944:	e0d7      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d105      	bne.n	800195a <PWM_write_range+0x5a>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001958:	e0cd      	b.n	8001af6 <PWM_write_range+0x1f6>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d105      	bne.n	800196e <PWM_write_range+0x6e>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	e0c3      	b.n	8001af6 <PWM_write_range+0x1f6>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d105      	bne.n	8001982 <PWM_write_range+0x82>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001980:	e0b9      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800198c:	e0b3      	b.n	8001af6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800199a:	ed97 7a02 	vldr	s14, [r7, #8]
 800199e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 2a90 	vmov	r2, s15
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019b6:	33fe      	adds	r3, #254	@ 0xfe
 80019b8:	4a53      	ldr	r2, [pc, #332]	@ (8001b08 <PWM_write_range+0x208>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0bdb      	lsrs	r3, r3, #15
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	89db      	ldrh	r3, [r3, #14]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd56 	bl	80004bc <__aeabi_i2d>
 8001a10:	4604      	mov	r4, r0
 8001a12:	460d      	mov	r5, r1
 8001a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a18:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd5e 	bl	80004e0 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fdb0 	bl	8000590 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	a331      	add	r3, pc, #196	@ (adr r3, 8001b00 <PWM_write_range+0x200>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fed1 	bl	80007e4 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7fe ffb3 	bl	80009b4 <__aeabi_d2uiz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	899a      	ldrh	r2, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	89da      	ldrh	r2, [r3, #14]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	89da      	ldrh	r2, [r3, #14]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <PWM_write_range+0x190>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6952      	ldr	r2, [r2, #20]
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a8e:	e032      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d106      	bne.n	8001aa6 <PWM_write_range+0x1a6>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001aa4:	e027      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d106      	bne.n	8001abc <PWM_write_range+0x1bc>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001aba:	e01c      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d106      	bne.n	8001ad2 <PWM_write_range+0x1d2>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ad0:	e011      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	889b      	ldrh	r3, [r3, #4]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d106      	bne.n	8001ae8 <PWM_write_range+0x1e8>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001ae6:	e006      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001af4:	e7ff      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40efffe0 	.word	0x40efffe0
 8001b08:	80008001 	.word	0x80008001

08001b0c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6178      	str	r0, [r7, #20]
 8001b14:	6139      	str	r1, [r7, #16]
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	fb01 f202 	mul.w	r2, r1, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b9a:	213c      	movs	r1, #60	@ 0x3c
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f006 fba9 	bl	80082f4 <HAL_TIM_Encoder_Start>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	0000      	movs	r0, r0
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	dd05      	ble.n	8001bf0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00e      	b.n	8001c0e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	0fda      	lsrs	r2, r3, #31
 8001bf8:	4413      	add	r3, r2
 8001bfa:	105b      	asrs	r3, r3, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	da04      	bge.n	8001c0e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc3f 	bl	80004e0 <__aeabi_f2d>
 8001c62:	4604      	mov	r4, r0
 8001c64:	460d      	mov	r5, r1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c82:	ee16 0a90 	vmov	r0, s13
 8001c86:	f7fe fc2b 	bl	80004e0 <__aeabi_f2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <QEI_get_diff_count+0x1b8>)
 8001c90:	f7fe fc7e 	bl	8000590 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4690      	mov	r8, r2
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc1d 	bl	80004e0 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4640      	mov	r0, r8
 8001cac:	4649      	mov	r1, r9
 8001cae:	f7fe fc6f 	bl	8000590 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fab3 	bl	8000224 <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe fe95 	bl	80009f4 <__aeabi_d2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc03 	bl	80004e0 <__aeabi_f2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f7fe fbed 	bl	80004e0 <__aeabi_f2d>
 8001d06:	a316      	add	r3, pc, #88	@ (adr r3, 8001d60 <QEI_get_diff_count+0x1b0>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc40 	bl	8000590 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4690      	mov	r8, r2
 8001d16:	4699      	mov	r9, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbdf 	bl	80004e0 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe fc31 	bl	8000590 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fa75 	bl	8000224 <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fe57 	bl	80009f4 <__aeabi_d2f>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d5e:	bf00      	nop
 8001d60:	54442d18 	.word	0x54442d18
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	40240000 	.word	0x40240000
 8001d6c:	00000000 	.word	0x00000000

08001d70 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6a12      	ldr	r2, [r2, #32]
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fba2 	bl	80004e0 <__aeabi_f2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f50 <QEI_compute_data+0x1e0>)
 8001da2:	f7fe fbf5 	bl	8000590 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4614      	mov	r4, r2
 8001dac:	461d      	mov	r5, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dba:	ee17 0a90 	vmov	r0, s15
 8001dbe:	f7fe fb8f 	bl	80004e0 <__aeabi_f2d>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	f7fe fd0b 	bl	80007e4 <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb80 	bl	80004e0 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fbd2 	bl	8000590 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fdfe 	bl	80009f4 <__aeabi_d2f>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f7fe fb68 	bl	80004e0 <__aeabi_f2d>
 8001e10:	a34d      	add	r3, pc, #308	@ (adr r3, 8001f48 <QEI_compute_data+0x1d8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbbb 	bl	8000590 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fb55 	bl	80004e0 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe fcd1 	bl	80007e4 <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb46 	bl	80004e0 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fb98 	bl	8000590 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fdc4 	bl	80009f4 <__aeabi_d2f>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb32 	bl	80004e0 <__aeabi_f2d>
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <QEI_compute_data+0x1e4>)
 8001e82:	f7fe fb85 	bl	8000590 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f7fe fb1f 	bl	80004e0 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7fe fc9b 	bl	80007e4 <__aeabi_ddiv>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb10 	bl	80004e0 <__aeabi_f2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe fb62 	bl	8000590 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fd8e 	bl	80009f4 <__aeabi_d2f>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d104      	bne.n	8001f12 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f10:	e00f      	b.n	8001f32 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <QEI_compute_data+0x1b0>
 8001f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f1e:	e001      	b.n	8001f24 <QEI_compute_data+0x1b4>
 8001f20:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001f58 <QEI_compute_data+0x1e8>
 8001f24:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60da      	str	r2, [r3, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	f3af 8000 	nop.w
 8001f48:	54442d18 	.word	0x54442d18
 8001f4c:	400921fb 	.word	0x400921fb
 8001f50:	404e0000 	.word	0x404e0000
 8001f54:	40240000 	.word	0x40240000
 8001f58:	00000000 	.word	0x00000000

08001f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	@ 0x30
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2220      	movs	r2, #32
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a fa8d 	bl	800c494 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f7a:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8a:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f96:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fae:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fce:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fdc:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe4:	481e      	ldr	r0, [pc, #120]	@ (8002060 <MX_ADC1_Init+0x104>)
 8001fe6:	f002 fca9 	bl	800493c <HAL_ADC_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001ff0:	f000 fdf0 	bl	8002bd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4818      	ldr	r0, [pc, #96]	@ (8002060 <MX_ADC1_Init+0x104>)
 8002000:	f003 fdc8 	bl	8005b94 <HAL_ADCEx_MultiModeConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800200a:	f000 fde3 	bl	8002bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_ADC1_Init+0x108>)
 8002010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002012:	2306      	movs	r3, #6
 8002014:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002016:	2307      	movs	r3, #7
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800201a:	237f      	movs	r3, #127	@ 0x7f
 800201c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800201e:	2304      	movs	r3, #4
 8002020:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4619      	mov	r1, r3
 800202a:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MX_ADC1_Init+0x104>)
 800202c:	f002 ff34 	bl	8004e98 <HAL_ADC_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002036:	f000 fdcd 	bl	8002bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_ADC1_Init+0x10c>)
 800203c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800203e:	230c      	movs	r3, #12
 8002040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	@ (8002060 <MX_ADC1_Init+0x104>)
 8002048:	f002 ff26 	bl	8004e98 <HAL_ADC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002052:	f000 fdbf 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3730      	adds	r7, #48	@ 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200001d4 	.word	0x200001d4
 8002064:	19200040 	.word	0x19200040
 8002068:	1d500080 	.word	0x1d500080

0800206c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09e      	sub	sp, #120	@ 0x78
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	2254      	movs	r2, #84	@ 0x54
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f00a fa01 	bl	800c494 <memset>
  if(adcHandle->Instance==ADC1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800209a:	d15e      	bne.n	800215a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800209c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020a6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fa67 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020b8:	f000 fd8c 	bl	8002bd4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c0:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c8:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <HAL_ADC_MspInit+0xf8>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ec:	2303      	movs	r3, #3
 80020ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f0:	2303      	movs	r3, #3
 80020f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020fc:	4619      	mov	r1, r3
 80020fe:	481a      	ldr	r0, [pc, #104]	@ (8002168 <HAL_ADC_MspInit+0xfc>)
 8002100:	f004 fa92 	bl	8006628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002106:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <HAL_ADC_MspInit+0x104>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_ADC_MspInit+0x100>)
 800210c:	2205      	movs	r2, #5
 800210e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <HAL_ADC_MspInit+0x100>)
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002128:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_ADC_MspInit+0x100>)
 800212c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002130:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002134:	2220      	movs	r2, #32
 8002136:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_ADC_MspInit+0x100>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800213e:	480b      	ldr	r0, [pc, #44]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002140:	f003 ff40 	bl	8005fc4 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800214a:	f000 fd43 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <HAL_ADC_MspInit+0x100>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800215a:	bf00      	nop
 800215c:	3778      	adds	r7, #120	@ 0x78
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	48000800 	.word	0x48000800
 800216c:	20000240 	.word	0x20000240
 8002170:	40020008 	.word	0x40020008

08002174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <MX_DMA_Init+0x70>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <MX_DMA_Init+0x70>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6493      	str	r3, [r2, #72]	@ 0x48
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <MX_DMA_Init+0x70>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <MX_DMA_Init+0x70>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	4a13      	ldr	r2, [pc, #76]	@ (80021e4 <MX_DMA_Init+0x70>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6493      	str	r3, [r2, #72]	@ 0x48
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <MX_DMA_Init+0x70>)
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	200b      	movs	r0, #11
 80021b0:	f003 fed3 	bl	8005f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021b4:	200b      	movs	r0, #11
 80021b6:	f003 feea 	bl	8005f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	200c      	movs	r0, #12
 80021c0:	f003 fecb 	bl	8005f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021c4:	200c      	movs	r0, #12
 80021c6:	f003 fee2 	bl	8005f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200d      	movs	r0, #13
 80021d0:	f003 fec3 	bl	8005f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021d4:	200d      	movs	r0, #13
 80021d6:	f003 feda 	bl	8005f8e <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <MX_GPIO_Init+0x154>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <MX_GPIO_Init+0x154>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <MX_GPIO_Init+0x154>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <MX_GPIO_Init+0x154>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a48      	ldr	r2, [pc, #288]	@ (800233c <MX_GPIO_Init+0x154>)
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <MX_GPIO_Init+0x154>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <MX_GPIO_Init+0x154>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4a42      	ldr	r2, [pc, #264]	@ (800233c <MX_GPIO_Init+0x154>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4b40      	ldr	r3, [pc, #256]	@ (800233c <MX_GPIO_Init+0x154>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <MX_GPIO_Init+0x154>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <MX_GPIO_Init+0x154>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002252:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <MX_GPIO_Init+0x154>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002268:	f004 fb78 	bl	800695c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002272:	4833      	ldr	r0, [pc, #204]	@ (8002340 <MX_GPIO_Init+0x158>)
 8002274:	f004 fb72 	bl	800695c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	482c      	ldr	r0, [pc, #176]	@ (8002340 <MX_GPIO_Init+0x158>)
 8002290:	f004 f9ca 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002294:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b0:	f004 f9ba 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 80022b4:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 80022b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	481e      	ldr	r0, [pc, #120]	@ (8002344 <MX_GPIO_Init+0x15c>)
 80022ca:	f004 f9ad 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4816      	ldr	r0, [pc, #88]	@ (8002340 <MX_GPIO_Init+0x158>)
 80022e8:	f004 f99e 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 80022ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002304:	f004 f990 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8002308:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4808      	ldr	r0, [pc, #32]	@ (8002340 <MX_GPIO_Init+0x158>)
 800231e:	f004 f983 	bl	8006628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2028      	movs	r0, #40	@ 0x28
 8002328:	f003 fe17 	bl	8005f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800232c:	2028      	movs	r0, #40	@ 0x28
 800232e:	f003 fe2e 	bl	8005f8e <HAL_NVIC_EnableIRQ>

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	48000800 	.word	0x48000800
 8002344:	48000400 	.word	0x48000400

08002348 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8002348:	b580      	push	{r7, lr}
 800234a:	b096      	sub	sp, #88	@ 0x58
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	ed87 0a02 	vstr	s0, [r7, #8]
 8002354:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2201      	movs	r2, #1
 8002362:	2101      	movs	r1, #1
 8002364:	f009 fb25 	bl	800b9b2 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f009 ff95 	bl	800c2a6 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f009 ff8b 	bl	800c2a6 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f009 ff81 	bl	800c2a6 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80023b0:	4619      	mov	r1, r3
 80023b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80023b6:	4610      	mov	r0, r2
 80023b8:	f009 ff04 	bl	800c1c4 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 80023ce:	461a      	mov	r2, r3
 80023d0:	f009 fe7e 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80023e6:	461a      	mov	r2, r3
 80023e8:	f009 faa8 	bl	800b93c <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80023fe:	461a      	mov	r2, r3
 8002400:	f009 fe66 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002416:	461a      	mov	r2, r3
 8002418:	f009 fe5a 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800242e:	461a      	mov	r2, r3
 8002430:	f009 fe4e 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8002446:	4619      	mov	r1, r3
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	4610      	mov	r0, r2
 800244e:	f009 feb9 	bl	800c1c4 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002464:	461a      	mov	r2, r3
 8002466:	f009 fa69 	bl	800b93c <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800247c:	461a      	mov	r2, r3
 800247e:	f009 fe27 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002494:	461a      	mov	r2, r3
 8002496:	f009 fe1b 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80024ac:	461a      	mov	r2, r3
 80024ae:	f009 fa45 	bl	800b93c <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f009 fa8e 	bl	800b9e2 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80024d8:	461a      	mov	r2, r3
 80024da:	f009 fdf9 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80024f0:	461a      	mov	r2, r3
 80024f2:	f009 fded 	bl	800c0d0 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002508:	461a      	mov	r2, r3
 800250a:	f009 fde1 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8002520:	461a      	mov	r2, r3
 8002522:	f009 fe85 	bl	800c230 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8002538:	461a      	mov	r2, r3
 800253a:	f009 fdc9 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002550:	461a      	mov	r2, r3
 8002552:	f009 f9f3 	bl	800b93c <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8002568:	461a      	mov	r2, r3
 800256a:	f009 fdb1 	bl	800c0d0 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002576:	2204      	movs	r2, #4
 8002578:	2104      	movs	r1, #4
 800257a:	f009 fa1a 	bl	800b9b2 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800258a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800258e:	4619      	mov	r1, r3
 8002590:	f009 fd9e 	bl	800c0d0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800259a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800259e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80025a2:	4618      	mov	r0, r3
 80025a4:	f009 fe44 	bl	800c230 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 80025b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025b8:	4618      	mov	r0, r3
 80025ba:	f009 fd89 	bl	800c0d0 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80025ce:	ee07 3a90 	vmov	s15, r3
}
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	3758      	adds	r7, #88	@ 0x58
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b0a2      	sub	sp, #136	@ 0x88
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.7
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a38      	ldr	r2, [pc, #224]	@ (80026cc <Kalman_Start+0xf0>)
 80025ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f; //0.05
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8002600:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002604:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	667b      	str	r3, [r7, #100]	@ 0x64
 800261a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800261e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 800262c:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <Kalman_Start+0xf4>)
 800262e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002632:	461d      	mov	r5, r3
 8002634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002640:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002666:	e028      	b.n	80026ba <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 8002668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	4413      	add	r3, r2
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800267a:	3314      	adds	r3, #20
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	3388      	adds	r3, #136	@ 0x88
 800268a:	443b      	add	r3, r7
 800268c:	3b64      	subs	r3, #100	@ 0x64
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002696:	3398      	adds	r3, #152	@ 0x98
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026a4:	3304      	adds	r3, #4
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80026b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026b4:	3301      	adds	r3, #1
 80026b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	ddd2      	ble.n	8002668 <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026c8:	e03f      	b.n	800274a <Kalman_Start+0x16e>
 80026ca:	bf00      	nop
 80026cc:	3d4ccccd 	.word	0x3d4ccccd
 80026d0:	0800d814 	.word	0x0800d814
	{
		filter->X_k[i] = x_k[i];
 80026d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	3388      	adds	r3, #136	@ 0x88
 80026dc:	443b      	add	r3, r7
 80026de:	3b74      	subs	r3, #116	@ 0x74
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80026ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002700:	3324      	adds	r3, #36	@ 0x24
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	3388      	adds	r3, #136	@ 0x88
 8002710:	443b      	add	r3, r7
 8002712:	3b14      	subs	r3, #20
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800271c:	3328      	adds	r3, #40	@ 0x28
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	3388      	adds	r3, #136	@ 0x88
 800272c:	443b      	add	r3, r7
 800272e:	3b24      	subs	r3, #36	@ 0x24
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002738:	332c      	adds	r3, #44	@ 0x2c
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002744:	3301      	adds	r3, #1
 8002746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800274a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800274e:	2b03      	cmp	r3, #3
 8002750:	ddc0      	ble.n	80026d4 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	2104      	movs	r1, #4
 800275e:	f009 f928 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3310      	adds	r3, #16
 800276c:	2204      	movs	r2, #4
 800276e:	2104      	movs	r1, #4
 8002770:	f009 f91f 	bl	800b9b2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3350      	adds	r3, #80	@ 0x50
 800277e:	2204      	movs	r2, #4
 8002780:	2104      	movs	r1, #4
 8002782:	f009 f916 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3390      	adds	r3, #144	@ 0x90
 8002790:	2201      	movs	r2, #1
 8002792:	2104      	movs	r1, #4
 8002794:	f009 f90d 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	33a0      	adds	r3, #160	@ 0xa0
 80027a2:	2204      	movs	r2, #4
 80027a4:	2101      	movs	r1, #1
 80027a6:	f009 f904 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	33b0      	adds	r3, #176	@ 0xb0
 80027b4:	2201      	movs	r2, #1
 80027b6:	2104      	movs	r1, #4
 80027b8:	f009 f8fb 	bl	800b9b2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	33c8      	adds	r3, #200	@ 0xc8
 80027c6:	2204      	movs	r2, #4
 80027c8:	2104      	movs	r1, #4
 80027ca:	f009 f8f2 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80027da:	2201      	movs	r2, #1
 80027dc:	2104      	movs	r1, #4
 80027de:	f009 f8e8 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80027ee:	2204      	movs	r2, #4
 80027f0:	2101      	movs	r1, #1
 80027f2:	f009 f8de 	bl	800b9b2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002802:	2204      	movs	r2, #4
 8002804:	2104      	movs	r1, #4
 8002806:	f009 f8d4 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002816:	2204      	movs	r2, #4
 8002818:	2104      	movs	r1, #4
 800281a:	f009 f8ca 	bl	800b9b2 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800282a:	2201      	movs	r2, #1
 800282c:	2104      	movs	r1, #4
 800282e:	f009 f8c0 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800283e:	2201      	movs	r2, #1
 8002840:	2104      	movs	r1, #4
 8002842:	f009 f8b6 	bl	800b9b2 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002852:	2204      	movs	r2, #4
 8002854:	2101      	movs	r1, #1
 8002856:	f009 f8ac 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002866:	2201      	movs	r2, #1
 8002868:	2101      	movs	r1, #1
 800286a:	f009 f8a2 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800287a:	2201      	movs	r2, #1
 800287c:	2101      	movs	r1, #1
 800287e:	f009 f898 	bl	800b9b2 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800288e:	2201      	movs	r2, #1
 8002890:	2104      	movs	r1, #4
 8002892:	f009 f88e 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80028a2:	2201      	movs	r2, #1
 80028a4:	2104      	movs	r1, #4
 80028a6:	f009 f884 	bl	800b9b2 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80028b6:	2201      	movs	r2, #1
 80028b8:	2101      	movs	r1, #1
 80028ba:	f009 f87a 	bl	800b9b2 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80028ca:	2201      	movs	r2, #1
 80028cc:	2101      	movs	r1, #1
 80028ce:	f009 f870 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80028de:	2201      	movs	r2, #1
 80028e0:	2101      	movs	r1, #1
 80028e2:	f009 f866 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80028f2:	2201      	movs	r2, #1
 80028f4:	2104      	movs	r1, #4
 80028f6:	f009 f85c 	bl	800b9b2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002906:	2201      	movs	r2, #1
 8002908:	2101      	movs	r1, #1
 800290a:	f009 f852 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800291a:	2204      	movs	r2, #4
 800291c:	2104      	movs	r1, #4
 800291e:	f009 f848 	bl	800b9b2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	33c4      	adds	r3, #196	@ 0xc4
 800292c:	2201      	movs	r2, #1
 800292e:	2101      	movs	r1, #1
 8002930:	f009 f83f 	bl	800b9b2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002940:	2201      	movs	r2, #1
 8002942:	2101      	movs	r1, #1
 8002944:	f009 f835 	bl	800b9b2 <arm_mat_init_f32>
}
 8002948:	bf00      	nop
 800294a:	3788      	adds	r7, #136	@ 0x88
 800294c:	46bd      	mov	sp, r7
 800294e:	bdb0      	pop	{r4, r5, r7, pc}

08002950 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002954:	f3bf 8f4f 	dsb	sy
}
 8002958:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <__NVIC_SystemReset+0x24>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002962:	4904      	ldr	r1, [pc, #16]	@ (8002974 <__NVIC_SystemReset+0x24>)
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__NVIC_SystemReset+0x28>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800296a:	f3bf 8f4f 	dsb	sy
}
 800296e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <__NVIC_SystemReset+0x20>
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	05fa0004 	.word	0x05fa0004

0800297c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002980:	f001 fd27 	bl	80043d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002984:	f000 f82c 	bl	80029e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002988:	f7ff fc2e 	bl	80021e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800298c:	f7ff fbf2 	bl	8002174 <MX_DMA_Init>
	MX_ADC1_Init();
 8002990:	f7ff fae4 	bl	8001f5c <MX_ADC1_Init>
	MX_TIM2_Init();
 8002994:	f001 f81e 	bl	80039d4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002998:	f001 f86a 	bl	8003a70 <MX_TIM3_Init>
	MX_TIM4_Init();
 800299c:	f001 f8be 	bl	8003b1c <MX_TIM4_Init>
	MX_TIM5_Init();
 80029a0:	f001 f912 	bl	8003bc8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80029a4:	f001 f95e 	bl	8003c64 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80029a8:	f001 fbe0 	bl	800416c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80029ac:	f001 fa22 	bl	8003df4 <MX_TIM16_Init>
	MX_TIM1_Init();
 80029b0:	f000 ff7c 	bl	80038ac <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80029b4:	f000 f914 	bl	8002be0 <plotter_begin>
//
//			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
//		}
//		button_pressed_previous = b1;

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 80029b8:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <main+0x5c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c8:	f003 ffc8 	bl	800695c <HAL_GPIO_WritePin>

		if (b3) {
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <main+0x60>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f1      	beq.n	80029b8 <main+0x3c>
			NVIC_SystemReset();
 80029d4:	f7ff ffbc 	bl	8002950 <__NVIC_SystemReset>
 80029d8:	20001420 	.word	0x20001420
 80029dc:	20001424 	.word	0x20001424

080029e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b094      	sub	sp, #80	@ 0x50
 80029e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029e6:	f107 0318 	add.w	r3, r7, #24
 80029ea:	2238      	movs	r2, #56	@ 0x38
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f009 fd50 	bl	800c494 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f003 ffda 	bl	80069bc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a12:	2340      	movs	r3, #64	@ 0x40
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a16:	2302      	movs	r3, #2
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002a22:	2355      	movs	r3, #85	@ 0x55
 8002a24:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a26:	2302      	movs	r3, #2
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a32:	f107 0318 	add.w	r3, r7, #24
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 f874 	bl	8006b24 <HAL_RCC_OscConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x66>
		Error_Handler();
 8002a42:	f000 f8c7 	bl	8002bd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a46:	230f      	movs	r3, #15
 8002a48:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fb72 	bl	8007148 <HAL_RCC_ClockConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <SystemClock_Config+0x8e>
		Error_Handler();
 8002a6a:	f000 f8b3 	bl	8002bd4 <Error_Handler>
	}
}
 8002a6e:	bf00      	nop
 8002a70:	3750      	adds	r7, #80	@ 0x50
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	80fb      	strh	r3, [r7, #6]

}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d16c      	bne.n	8002b8a <HAL_TIM_PeriodElapsedCallback+0xea>
		update_sensors();
 8002ab0:	f000 fa58 	bl	8002f64 <update_sensors>
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&revolute_motor, 2000, cmd_ux);

		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8002ab4:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002ba4 <HAL_TIM_PeriodElapsedCallback+0x104>
 8002ab8:	483b      	ldr	r0, [pc, #236]	@ (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002aba:	f000 fc8d 	bl	80033d8 <SIGNAL_generate>
 8002abe:	eef0 7a40 	vmov.f32	s15, s0
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
//		kal_flit = SteadyStateKalmanFilter(&flit_revolute_velocity, vin, revolute_encoder.radps);
//		lp_filt = FIR_process(&LP_revolute_velocity,revolute_encoder.radps);
//
//		MDXX_set_range(&revolute_motor, 2000, square_sample);

		QEI_get_diff_count(&prismatic_encoder);
 8002ac8:	4839      	ldr	r0, [pc, #228]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002aca:	f7ff f871 	bl	8001bb0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8002ace:	4838      	ldr	r0, [pc, #224]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002ad0:	f7ff f94e 	bl	8001d70 <QEI_compute_data>

		vin = square_sample * 12.0 / 65535.0;
 8002ad4:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd01 	bl	80004e0 <__aeabi_f2d>
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002ae4:	f7fd fd54 	bl	8000590 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	a329      	add	r3, pc, #164	@ (adr r3, 8002b98 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fe75 	bl	80007e4 <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fd ff77 	bl	80009f4 <__aeabi_d2f>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002b0a:	6013      	str	r3, [r2, #0]

		if (abs(prismatic_encoder.radps) < 1e-3){
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002b0e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b16:	ee17 3a90 	vmov	r3, s15
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0c      	blt.n	8002b38 <HAL_TIM_PeriodElapsedCallback+0x98>
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002b20:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b28:	ee17 3a90 	vmov	r3, s15
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dc03      	bgt.n	8002b38 <HAL_TIM_PeriodElapsedCallback+0x98>
			vin = 0;
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
		}

		kal_flit = SteadyStateKalmanFilter(&flit_prismatic_velocity, vin, prismatic_encoder.radps);
 8002b38:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002b40:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002b44:	eef0 0a47 	vmov.f32	s1, s14
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	481b      	ldr	r0, [pc, #108]	@ (8002bbc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002b4e:	f7ff fbfb 	bl	8002348 <SteadyStateKalmanFilter>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002b58:	edc3 7a00 	vstr	s15, [r3]
		lp_filt = FIR_process(&LP_prismatic_velocity,prismatic_encoder.radps);
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002b5e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	4817      	ldr	r0, [pc, #92]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002b68:	f7fe fc6a 	bl	8001440 <FIR_process>
 8002b6c:	eef0 7a40 	vmov.f32	s15, s0
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b72:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&prismatic_motor, 2000, square_sample);
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	eef0 0a67 	vmov.f32	s1, s15
 8002b80:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002bcc <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002b84:	4812      	ldr	r0, [pc, #72]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002b86:	f7fe fa21 	bl	8000fcc <MDXX_set_range>
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	f3af 8000 	nop.w
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	40efffe0 	.word	0x40efffe0
 8002ba0:	20001514 	.word	0x20001514
 8002ba4:	3a83126f 	.word	0x3a83126f
 8002ba8:	200005a4 	.word	0x200005a4
 8002bac:	200002ac 	.word	0x200002ac
 8002bb0:	20000348 	.word	0x20000348
 8002bb4:	40280000 	.word	0x40280000
 8002bb8:	200002a8 	.word	0x200002a8
 8002bbc:	2000065c 	.word	0x2000065c
 8002bc0:	200002a0 	.word	0x200002a0
 8002bc4:	2000062c 	.word	0x2000062c
 8002bc8:	200002a4 	.word	0x200002a4
 8002bcc:	44fa0000 	.word	0x44fa0000
 8002bd0:	200002b0 	.word	0x200002b0

08002bd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <Error_Handler+0x8>

08002be0 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002be6:	2100      	movs	r1, #0
 8002be8:	48a4      	ldr	r0, [pc, #656]	@ (8002e7c <plotter_begin+0x29c>)
 8002bea:	f000 fad3 	bl	8003194 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002bee:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8002e80 <plotter_begin+0x2a0>
 8002bf2:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8002e84 <plotter_begin+0x2a4>
 8002bf6:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 8002e88 <plotter_begin+0x2a8>
 8002bfa:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 8002e88 <plotter_begin+0x2a8>
 8002bfe:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8002e8c <plotter_begin+0x2ac>
 8002c02:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8002e80 <plotter_begin+0x2a0>
 8002c06:	489d      	ldr	r0, [pc, #628]	@ (8002e7c <plotter_begin+0x29c>)
 8002c08:	f000 fb22 	bl	8003250 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	48a0      	ldr	r0, [pc, #640]	@ (8002e90 <plotter_begin+0x2b0>)
 8002c10:	f000 fac0 	bl	8003194 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 8002c14:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8002e80 <plotter_begin+0x2a0>
 8002c18:	ed9f 2a9a 	vldr	s4, [pc, #616]	@ 8002e84 <plotter_begin+0x2a4>
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002c22:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002c26:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c2a:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8002e80 <plotter_begin+0x2a0>
 8002c2e:	4898      	ldr	r0, [pc, #608]	@ (8002e90 <plotter_begin+0x2b0>)
 8002c30:	f000 fb39 	bl	80032a6 <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002c34:	2101      	movs	r1, #1
 8002c36:	4897      	ldr	r0, [pc, #604]	@ (8002e94 <plotter_begin+0x2b4>)
 8002c38:	f000 faac 	bl	8003194 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 8002c3c:	eddf 2a90 	vldr	s5, [pc, #576]	@ 8002e80 <plotter_begin+0x2a0>
 8002c40:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8002e84 <plotter_begin+0x2a4>
 8002c44:	2101      	movs	r1, #1
 8002c46:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002c4a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002c4e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c52:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002e80 <plotter_begin+0x2a0>
 8002c56:	488f      	ldr	r0, [pc, #572]	@ (8002e94 <plotter_begin+0x2b4>)
 8002c58:	f000 fb25 	bl	80032a6 <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	488e      	ldr	r0, [pc, #568]	@ (8002e98 <plotter_begin+0x2b8>)
 8002c60:	f000 fa98 	bl	8003194 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002c64:	ed9f 3a8d 	vldr	s6, [pc, #564]	@ 8002e9c <plotter_begin+0x2bc>
 8002c68:	eddf 2a8d 	vldr	s5, [pc, #564]	@ 8002ea0 <plotter_begin+0x2c0>
 8002c6c:	ed9f 2a86 	vldr	s4, [pc, #536]	@ 8002e88 <plotter_begin+0x2a8>
 8002c70:	eddf 1a85 	vldr	s3, [pc, #532]	@ 8002e88 <plotter_begin+0x2a8>
 8002c74:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002c78:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8002ea4 <plotter_begin+0x2c4>
 8002c7c:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002e9c <plotter_begin+0x2bc>
 8002c80:	4885      	ldr	r0, [pc, #532]	@ (8002e98 <plotter_begin+0x2b8>)
 8002c82:	f000 fb44 	bl	800330e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002c86:	2103      	movs	r1, #3
 8002c88:	4887      	ldr	r0, [pc, #540]	@ (8002ea8 <plotter_begin+0x2c8>)
 8002c8a:	f000 fa83 	bl	8003194 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002c8e:	eddf 3a7c 	vldr	s7, [pc, #496]	@ 8002e80 <plotter_begin+0x2a0>
 8002c92:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002e84 <plotter_begin+0x2a4>
 8002c96:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8002e88 <plotter_begin+0x2a8>
 8002c9a:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 8002e88 <plotter_begin+0x2a8>
 8002c9e:	eddf 1a78 	vldr	s3, [pc, #480]	@ 8002e80 <plotter_begin+0x2a0>
 8002ca2:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8002e84 <plotter_begin+0x2a4>
 8002ca6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002caa:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8002e80 <plotter_begin+0x2a0>
 8002cae:	487e      	ldr	r0, [pc, #504]	@ (8002ea8 <plotter_begin+0x2c8>)
 8002cb0:	f000 fb5d 	bl	800336e <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002cb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc0:	497a      	ldr	r1, [pc, #488]	@ (8002eac <plotter_begin+0x2cc>)
 8002cc2:	487b      	ldr	r0, [pc, #492]	@ (8002eb0 <plotter_begin+0x2d0>)
 8002cc4:	f7fe ff22 	bl	8001b0c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002cc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cd4:	4977      	ldr	r1, [pc, #476]	@ (8002eb4 <plotter_begin+0x2d4>)
 8002cd6:	4878      	ldr	r0, [pc, #480]	@ (8002eb8 <plotter_begin+0x2d8>)
 8002cd8:	f7fe ff18 	bl	8001b0c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8002cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4974      	ldr	r1, [pc, #464]	@ (8002ebc <plotter_begin+0x2dc>)
 8002cea:	4875      	ldr	r0, [pc, #468]	@ (8002ec0 <plotter_begin+0x2e0>)
 8002cec:	f7fe f94a 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8002cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4b73      	ldr	r3, [pc, #460]	@ (8002ec4 <plotter_begin+0x2e4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4970      	ldr	r1, [pc, #448]	@ (8002ebc <plotter_begin+0x2dc>)
 8002cfc:	4872      	ldr	r0, [pc, #456]	@ (8002ec8 <plotter_begin+0x2e8>)
 8002cfe:	f7fe f941 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002d02:	220c      	movs	r2, #12
 8002d04:	4971      	ldr	r1, [pc, #452]	@ (8002ecc <plotter_begin+0x2ec>)
 8002d06:	4872      	ldr	r0, [pc, #456]	@ (8002ed0 <plotter_begin+0x2f0>)
 8002d08:	f7fe fcd2 	bl	80016b0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002d0c:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8002e88 <plotter_begin+0x2a8>
 8002d10:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8002ed4 <plotter_begin+0x2f4>
 8002d14:	486a      	ldr	r0, [pc, #424]	@ (8002ec0 <plotter_begin+0x2e0>)
 8002d16:	f7fe f959 	bl	8000fcc <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002d1a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8002e88 <plotter_begin+0x2a8>
 8002d1e:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8002ed4 <plotter_begin+0x2f4>
 8002d22:	4869      	ldr	r0, [pc, #420]	@ (8002ec8 <plotter_begin+0x2e8>)
 8002d24:	f7fe f952 	bl	8000fcc <MDXX_set_range>
	pen_up();
 8002d28:	f000 f9be 	bl	80030a8 <pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <plotter_begin+0x2f8>)
 8002d2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fe5d 	bl	80009f4 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	ee01 3a90 	vmov	s3, r3
 8002d40:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002d44:	eddf 0a65 	vldr	s1, [pc, #404]	@ 8002edc <plotter_begin+0x2fc>
 8002d48:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002d4c:	4864      	ldr	r0, [pc, #400]	@ (8002ee0 <plotter_begin+0x300>)
 8002d4e:	f7fe f8ef 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 8002d52:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <plotter_begin+0x2f8>)
 8002d54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f7fd fe4a 	bl	80009f4 <__aeabi_d2f>
 8002d60:	4603      	mov	r3, r0
 8002d62:	ee01 3a90 	vmov	s3, r3
 8002d66:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8002e88 <plotter_begin+0x2a8>
 8002d6a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8002d6e:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8002ee4 <plotter_begin+0x304>
 8002d72:	485d      	ldr	r0, [pc, #372]	@ (8002ee8 <plotter_begin+0x308>)
 8002d74:	f7fe f8dc 	bl	8000f30 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 2, 1e-7, 1, ZGX45RGG_150RPM_Constant.U_max);
 8002d78:	4b5c      	ldr	r3, [pc, #368]	@ (8002eec <plotter_begin+0x30c>)
 8002d7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd fe37 	bl	80009f4 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	ee01 3a90 	vmov	s3, r3
 8002d8c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002d90:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8002edc <plotter_begin+0x2fc>
 8002d94:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002d98:	4855      	ldr	r0, [pc, #340]	@ (8002ef0 <plotter_begin+0x310>)
 8002d9a:	f7fe f8c9 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 50, 0, ZGX45RGG_150RPM_Constant.U_max);
 8002d9e:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <plotter_begin+0x30c>)
 8002da0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7fd fe24 	bl	80009f4 <__aeabi_d2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	ee01 3a90 	vmov	s3, r3
 8002db2:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002e88 <plotter_begin+0x2a8>
 8002db6:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8002ef4 <plotter_begin+0x314>
 8002dba:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8002ef8 <plotter_begin+0x318>
 8002dbe:	484f      	ldr	r0, [pc, #316]	@ (8002efc <plotter_begin+0x31c>)
 8002dc0:	f7fe f8b6 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002dc4:	4949      	ldr	r1, [pc, #292]	@ (8002eec <plotter_begin+0x30c>)
 8002dc6:	484e      	ldr	r0, [pc, #312]	@ (8002f00 <plotter_begin+0x320>)
 8002dc8:	f7fe f9da 	bl	8001180 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002dcc:	4942      	ldr	r1, [pc, #264]	@ (8002ed8 <plotter_begin+0x2f8>)
 8002dce:	484d      	ldr	r0, [pc, #308]	@ (8002f04 <plotter_begin+0x324>)
 8002dd0:	f7fe f9f6 	bl	80011c0 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002f08 <plotter_begin+0x328>)
 8002dd6:	4945      	ldr	r1, [pc, #276]	@ (8002eec <plotter_begin+0x30c>)
 8002dd8:	484c      	ldr	r0, [pc, #304]	@ (8002f0c <plotter_begin+0x32c>)
 8002dda:	f7fe f9df 	bl	800119c <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8002dde:	4a4a      	ldr	r2, [pc, #296]	@ (8002f08 <plotter_begin+0x328>)
 8002de0:	493d      	ldr	r1, [pc, #244]	@ (8002ed8 <plotter_begin+0x2f8>)
 8002de2:	484b      	ldr	r0, [pc, #300]	@ (8002f10 <plotter_begin+0x330>)
 8002de4:	f7fe f9fa 	bl	80011dc <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 8002de8:	2304      	movs	r3, #4
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002f14 <plotter_begin+0x334>
 8002df0:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8002f18 <plotter_begin+0x338>
 8002df4:	2328      	movs	r3, #40	@ 0x28
 8002df6:	4a49      	ldr	r2, [pc, #292]	@ (8002f1c <plotter_begin+0x33c>)
 8002df8:	4949      	ldr	r1, [pc, #292]	@ (8002f20 <plotter_begin+0x340>)
 8002dfa:	484a      	ldr	r0, [pc, #296]	@ (8002f24 <plotter_begin+0x344>)
 8002dfc:	f7fd ffe0 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002e00:	4848      	ldr	r0, [pc, #288]	@ (8002f24 <plotter_begin+0x344>)
 8002e02:	f7fe f812 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002e06:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002ef8 <plotter_begin+0x318>
 8002e0a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002e0e:	211f      	movs	r1, #31
 8002e10:	4845      	ldr	r0, [pc, #276]	@ (8002f28 <plotter_begin+0x348>)
 8002e12:	f7fe f9f5 	bl	8001200 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002e16:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8002ef8 <plotter_begin+0x318>
 8002e1a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002e1e:	211f      	movs	r1, #31
 8002e20:	4842      	ldr	r0, [pc, #264]	@ (8002f2c <plotter_begin+0x34c>)
 8002e22:	f7fe f9ed 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002e26:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8002ef8 <plotter_begin+0x318>
 8002e2a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002e2e:	211f      	movs	r1, #31
 8002e30:	483f      	ldr	r0, [pc, #252]	@ (8002f30 <plotter_begin+0x350>)
 8002e32:	f7fe f9e5 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002e36:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002ef8 <plotter_begin+0x318>
 8002e3a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002e3e:	211f      	movs	r1, #31
 8002e40:	483c      	ldr	r0, [pc, #240]	@ (8002f34 <plotter_begin+0x354>)
 8002e42:	f7fe f9dd 	bl	8001200 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 8002e46:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <plotter_begin+0x358>)
 8002e48:	493c      	ldr	r1, [pc, #240]	@ (8002f3c <plotter_begin+0x35c>)
 8002e4a:	483d      	ldr	r0, [pc, #244]	@ (8002f40 <plotter_begin+0x360>)
 8002e4c:	f7ff fbc6 	bl	80025dc <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8002e50:	4a3c      	ldr	r2, [pc, #240]	@ (8002f44 <plotter_begin+0x364>)
 8002e52:	493d      	ldr	r1, [pc, #244]	@ (8002f48 <plotter_begin+0x368>)
 8002e54:	483d      	ldr	r0, [pc, #244]	@ (8002f4c <plotter_begin+0x36c>)
 8002e56:	f7ff fbc1 	bl	80025dc <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8002e5a:	23c8      	movs	r3, #200	@ 0xc8
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	2315      	movs	r3, #21
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <plotter_begin+0x370>)
 8002e64:	4a3b      	ldr	r2, [pc, #236]	@ (8002f54 <plotter_begin+0x374>)
 8002e66:	493c      	ldr	r1, [pc, #240]	@ (8002f58 <plotter_begin+0x378>)
 8002e68:	483c      	ldr	r0, [pc, #240]	@ (8002f5c <plotter_begin+0x37c>)
 8002e6a:	f7fe fbb9 	bl	80015e0 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002e6e:	483c      	ldr	r0, [pc, #240]	@ (8002f60 <plotter_begin+0x380>)
 8002e70:	f004 fea8 	bl	8007bc4 <HAL_TIM_Base_Start_IT>
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004d8 	.word	0x200004d8
 8002e80:	3e6eeeef 	.word	0x3e6eeeef
 8002e84:	be6eeeef 	.word	0xbe6eeeef
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	3d4ccccd 	.word	0x3d4ccccd
 8002e90:	2000051c 	.word	0x2000051c
 8002e94:	20000560 	.word	0x20000560
 8002e98:	200005a4 	.word	0x200005a4
 8002e9c:	477fff00 	.word	0x477fff00
 8002ea0:	c77fff00 	.word	0xc77fff00
 8002ea4:	3e99999a 	.word	0x3e99999a
 8002ea8:	200005e8 	.word	0x200005e8
 8002eac:	200016ac 	.word	0x200016ac
 8002eb0:	20000348 	.word	0x20000348
 8002eb4:	200015e0 	.word	0x200015e0
 8002eb8:	20000394 	.word	0x20000394
 8002ebc:	20001844 	.word	0x20001844
 8002ec0:	200002b0 	.word	0x200002b0
 8002ec4:	48000800 	.word	0x48000800
 8002ec8:	200002fc 	.word	0x200002fc
 8002ecc:	20001448 	.word	0x20001448
 8002ed0:	200004a8 	.word	0x200004a8
 8002ed4:	44fa0000 	.word	0x44fa0000
 8002ed8:	20000048 	.word	0x20000048
 8002edc:	33d6bf95 	.word	0x33d6bf95
 8002ee0:	200003e0 	.word	0x200003e0
 8002ee4:	43fa0000 	.word	0x43fa0000
 8002ee8:	2000040c 	.word	0x2000040c
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000438 	.word	0x20000438
 8002ef4:	42480000 	.word	0x42480000
 8002ef8:	447a0000 	.word	0x447a0000
 8002efc:	20000464 	.word	0x20000464
 8002f00:	2000049c 	.word	0x2000049c
 8002f04:	20000490 	.word	0x20000490
 8002f08:	20000090 	.word	0x20000090
 8002f0c:	200004a0 	.word	0x200004a0
 8002f10:	20000494 	.word	0x20000494
 8002f14:	457ff000 	.word	0x457ff000
 8002f18:	40533333 	.word	0x40533333
 8002f1c:	20000d5c 	.word	0x20000d5c
 8002f20:	200001d4 	.word	0x200001d4
 8002f24:	200004c0 	.word	0x200004c0
 8002f28:	20000638 	.word	0x20000638
 8002f2c:	2000062c 	.word	0x2000062c
 8002f30:	20000650 	.word	0x20000650
 8002f34:	20000644 	.word	0x20000644
 8002f38:	20000148 	.word	0x20000148
 8002f3c:	20000108 	.word	0x20000108
 8002f40:	200009dc 	.word	0x200009dc
 8002f44:	200000f8 	.word	0x200000f8
 8002f48:	200000b8 	.word	0x200000b8
 8002f4c:	2000065c 	.word	0x2000065c
 8002f50:	20001284 	.word	0x20001284
 8002f54:	20001910 	.word	0x20001910
 8002f58:	200019dc 	.word	0x200019dc
 8002f5c:	20000dac 	.word	0x20000dac
 8002f60:	20001514 	.word	0x20001514

08002f64 <update_sensors>:

void update_sensors() {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8002f68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002f6c:	2106      	movs	r1, #6
 8002f6e:	483f      	ldr	r0, [pc, #252]	@ (800306c <update_sensors+0x108>)
 8002f70:	f7fd ffb6 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002f74:	eef0 7a40 	vmov.f32	s15, s0
 8002f78:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <update_sensors+0x10c>)
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8002f7e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002f82:	2107      	movs	r1, #7
 8002f84:	4839      	ldr	r0, [pc, #228]	@ (800306c <update_sensors+0x108>)
 8002f86:	f7fd ffab 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002f8a:	eef0 7a40 	vmov.f32	s15, s0
 8002f8e:	4b39      	ldr	r3, [pc, #228]	@ (8003074 <update_sensors+0x110>)
 8002f90:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8002f94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f98:	4837      	ldr	r0, [pc, #220]	@ (8003078 <update_sensors+0x114>)
 8002f9a:	f003 fcc7 	bl	800692c <HAL_GPIO_ReadPin>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b33      	ldr	r3, [pc, #204]	@ (800307c <update_sensors+0x118>)
 8002fae:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	4833      	ldr	r0, [pc, #204]	@ (8003080 <update_sensors+0x11c>)
 8002fb4:	f003 fcba 	bl	800692c <HAL_GPIO_ReadPin>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <update_sensors+0x120>)
 8002fc8:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8002fca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fce:	482a      	ldr	r0, [pc, #168]	@ (8003078 <update_sensors+0x114>)
 8002fd0:	f003 fcac 	bl	800692c <HAL_GPIO_ReadPin>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <update_sensors+0x124>)
 8002fe4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8002fe6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fea:	4823      	ldr	r0, [pc, #140]	@ (8003078 <update_sensors+0x114>)
 8002fec:	f003 fc9e 	bl	800692c <HAL_GPIO_ReadPin>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b23      	ldr	r3, [pc, #140]	@ (800308c <update_sensors+0x128>)
 8003000:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8003002:	2120      	movs	r1, #32
 8003004:	481e      	ldr	r0, [pc, #120]	@ (8003080 <update_sensors+0x11c>)
 8003006:	f003 fc91 	bl	800692c <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <update_sensors+0x12c>)
 8003010:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 8003012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800301a:	f003 fc87 	bl	800692c <HAL_GPIO_ReadPin>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <update_sensors+0x130>)
 8003024:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 8003026:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800302a:	4815      	ldr	r0, [pc, #84]	@ (8003080 <update_sensors+0x11c>)
 800302c:	f003 fc7e 	bl	800692c <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <update_sensors+0x134>)
 8003036:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8003038:	2102      	movs	r1, #2
 800303a:	4811      	ldr	r0, [pc, #68]	@ (8003080 <update_sensors+0x11c>)
 800303c:	f003 fc76 	bl	800692c <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	4b15      	ldr	r3, [pc, #84]	@ (800309c <update_sensors+0x138>)
 8003046:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8003048:	2104      	movs	r1, #4
 800304a:	480d      	ldr	r0, [pc, #52]	@ (8003080 <update_sensors+0x11c>)
 800304c:	f003 fc6e 	bl	800692c <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <update_sensors+0x13c>)
 8003056:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8003058:	2110      	movs	r1, #16
 800305a:	4809      	ldr	r0, [pc, #36]	@ (8003080 <update_sensors+0x11c>)
 800305c:	f003 fc66 	bl	800692c <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <update_sensors+0x140>)
 8003066:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200004c0 	.word	0x200004c0
 8003070:	20001414 	.word	0x20001414
 8003074:	20001418 	.word	0x20001418
 8003078:	48000800 	.word	0x48000800
 800307c:	2000141c 	.word	0x2000141c
 8003080:	48000400 	.word	0x48000400
 8003084:	20001420 	.word	0x20001420
 8003088:	20001424 	.word	0x20001424
 800308c:	20001428 	.word	0x20001428
 8003090:	2000142c 	.word	0x2000142c
 8003094:	20001434 	.word	0x20001434
 8003098:	20001438 	.word	0x20001438
 800309c:	2000143c 	.word	0x2000143c
 80030a0:	20001440 	.word	0x20001440
 80030a4:	20001430 	.word	0x20001430

080030a8 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80030ac:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80030b0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80030c0 <pen_up+0x18>
 80030b4:	4803      	ldr	r0, [pc, #12]	@ (80030c4 <pen_up+0x1c>)
 80030b6:	f7fe fb1d 	bl	80016f4 <PWM_write_duty>
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	42480000 	.word	0x42480000
 80030c4:	200004a8 	.word	0x200004a8

080030c8 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 80030d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80030d6:	eef0 7ae7 	vabs.f32	s15, s15
 80030da:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 80030de:	4b17      	ldr	r3, [pc, #92]	@ (800313c <wrap_phase+0x74>)
 80030e0:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 80030e2:	e007      	b.n	80030f4 <wrap_phase+0x2c>
        phase -= two_pi;
 80030e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f0:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 80030f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	dcee      	bgt.n	80030e4 <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 8003106:	e007      	b.n	8003118 <wrap_phase+0x50>
        phase += two_pi;
 8003108:	ed97 7a01 	vldr	s14, [r7, #4]
 800310c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8003118:	edd7 7a01 	vldr	s15, [r7, #4]
 800311c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003124:	d4f0      	bmi.n	8003108 <wrap_phase+0x40>
    }
    return phase;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	ee07 3a90 	vmov	s15, r3
}
 800312c:	eeb0 0a67 	vmov.f32	s0, s15
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40c90fdb 	.word	0x40c90fdb

08003140 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	ed87 0a03 	vstr	s0, [r7, #12]
 800314a:	edc7 0a02 	vstr	s1, [r7, #8]
 800314e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 8003152:	ed97 7a03 	vldr	s14, [r7, #12]
 8003156:	edd7 7a02 	vldr	s15, [r7, #8]
 800315a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d501      	bpl.n	8003168 <limit_setpoint+0x28>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	e00b      	b.n	8003180 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 8003168:	ed97 7a03 	vldr	s14, [r7, #12]
 800316c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	dd01      	ble.n	800317e <limit_setpoint+0x3e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	e000      	b.n	8003180 <limit_setpoint+0x40>
    return value;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031ac:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031b4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <SIGNAL_init+0xb4>)
 80031da:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d828      	bhi.n	800323c <SIGNAL_init+0xa8>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <SIGNAL_init+0x5c>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	0800323b 	.word	0x0800323b
 80031f4:	08003201 	.word	0x08003201
 80031f8:	0800321f 	.word	0x0800321f
 80031fc:	08003229 	.word	0x08003229
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800320c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <SIGNAL_init+0xb8>)
 8003212:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800321a:	621a      	str	r2, [r3, #32]
            break;
 800321c:	e00e      	b.n	800323c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8003226:	e009      	b.n	800323c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003238:	e000      	b.n	800323c <SIGNAL_init+0xa8>
            break;
 800323a:	bf00      	nop
    }
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	bf800000 	.word	0xbf800000
 800324c:	41200000 	.word	0x41200000

08003250 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	@ 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	61f8      	str	r0, [r7, #28]
 8003258:	ed87 0a06 	vstr	s0, [r7, #24]
 800325c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003260:	ed87 1a04 	vstr	s2, [r7, #16]
 8003264:	edc7 1a03 	vstr	s3, [r7, #12]
 8003268:	ed87 2a02 	vstr	s4, [r7, #8]
 800326c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800329a:	bf00      	nop
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 80032a6:	b480      	push	{r7}
 80032a8:	b089      	sub	sp, #36	@ 0x24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	61f8      	str	r0, [r7, #28]
 80032ae:	ed87 0a06 	vstr	s0, [r7, #24]
 80032b2:	edc7 0a05 	vstr	s1, [r7, #20]
 80032b6:	ed87 1a04 	vstr	s2, [r7, #16]
 80032ba:	edc7 1a03 	vstr	s3, [r7, #12]
 80032be:	460b      	mov	r3, r1
 80032c0:	ed87 2a01 	vstr	s4, [r7, #4]
 80032c4:	edc7 2a00 	vstr	s5, [r7]
 80032c8:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	7afa      	ldrb	r2, [r7, #11]
 80032ec:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003302:	bf00      	nop
 8003304:	3724      	adds	r7, #36	@ 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800330e:	b480      	push	{r7}
 8003310:	b089      	sub	sp, #36	@ 0x24
 8003312:	af00      	add	r7, sp, #0
 8003314:	61f8      	str	r0, [r7, #28]
 8003316:	ed87 0a06 	vstr	s0, [r7, #24]
 800331a:	edc7 0a05 	vstr	s1, [r7, #20]
 800331e:	ed87 1a04 	vstr	s2, [r7, #16]
 8003322:	edc7 1a03 	vstr	s3, [r7, #12]
 8003326:	ed87 2a02 	vstr	s4, [r7, #8]
 800332a:	edc7 2a01 	vstr	s5, [r7, #4]
 800332e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003362:	bf00      	nop
 8003364:	3724      	adds	r7, #36	@ 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800336e:	b480      	push	{r7}
 8003370:	b08b      	sub	sp, #44	@ 0x2c
 8003372:	af00      	add	r7, sp, #0
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24
 8003376:	ed87 0a08 	vstr	s0, [r7, #32]
 800337a:	edc7 0a07 	vstr	s1, [r7, #28]
 800337e:	ed87 1a06 	vstr	s2, [r7, #24]
 8003382:	edc7 1a05 	vstr	s3, [r7, #20]
 8003386:	ed87 2a04 	vstr	s4, [r7, #16]
 800338a:	edc7 2a03 	vstr	s5, [r7, #12]
 800338e:	ed87 3a02 	vstr	s6, [r7, #8]
 8003392:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	2203      	movs	r2, #3
 800339a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033cc:	bf00      	nop
 80033ce:	372c      	adds	r7, #44	@ 0x2c
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	ed2d 8b02 	vpush	{d8}
 80033de:	b08c      	sub	sp, #48	@ 0x30
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 80033ee:	4bb2      	ldr	r3, [pc, #712]	@ (80036b8 <SIGNAL_generate+0x2e0>)
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80033fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003402:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003406:	edd7 7a00 	vldr	s15, [r7]
 800340a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f7ff fe57 	bl	80030c8 <wrap_phase>
 800341a:	eef0 7a40 	vmov.f32	s15, s0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800342a:	edd7 7a00 	vldr	s15, [r7]
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	f200 8123 	bhi.w	8003688 <SIGNAL_generate+0x2b0>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <SIGNAL_generate+0x70>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003459 	.word	0x08003459
 800344c:	08003497 	.word	0x08003497
 8003450:	080035b1 	.word	0x080035b1
 8003454:	0800361d 	.word	0x0800361d
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	edd3 7a03 	vldr	s15, [r3, #12]
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 800346c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003470:	f008 f9e2 	bl	800b838 <arm_sin_f32>
 8003474:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	ed93 7a01 	vldr	s14, [r3, #4]
 800347e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	edd3 7a04 	vldr	s15, [r3, #16]
 800348c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003490:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003494:	e0f8      	b.n	8003688 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	ed93 7a08 	vldr	s14, [r3, #32]
 80034a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a6:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7d1b      	ldrb	r3, [r3, #20]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d032      	beq.n	8003518 <SIGNAL_generate+0x140>
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	dc48      	bgt.n	8003548 <SIGNAL_generate+0x170>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <SIGNAL_generate+0xe8>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d014      	beq.n	80034e8 <SIGNAL_generate+0x110>
 80034be:	e043      	b.n	8003548 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	edd3 6a07 	vldr	s13, [r3, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80034d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80034e6:	e02f      	b.n	8003548 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	ed93 8a06 	vldr	s16, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80034fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034fe:	edd7 0a04 	vldr	s1, [r7, #16]
 8003502:	eeb0 0a66 	vmov.f32	s0, s13
 8003506:	f009 f829 	bl	800c55c <powf>
 800350a:	eef0 7a40 	vmov.f32	s15, s0
 800350e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003512:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 8003516:	e017      	b.n	8003548 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	ed93 7a06 	vldr	s14, [r3, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	edd3 6a07 	vldr	s13, [r3, #28]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	edd3 7a06 	vldr	s15, [r3, #24]
 800352a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800352e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003532:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003536:	edd7 7a04 	vldr	s15, [r7, #16]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003542:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 8003546:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 8003548:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800354c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	ed93 7a03 	vldr	s14, [r3, #12]
 8003568:	edd7 7a03 	vldr	s15, [r7, #12]
 800356c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	f008 f960 	bl	800b838 <arm_sin_f32>
 8003578:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003582:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	edd3 7a08 	vldr	s15, [r3, #32]
 800359a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	da00      	bge.n	80035a6 <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 80035a4:	e070      	b.n	8003688 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80035ae:	e06b      	b.n	8003688 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80035bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c0:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80035c4:	eeb0 0a67 	vmov.f32	s0, s15
 80035c8:	f008 ffa8 	bl	800c51c <fmodf>
 80035cc:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80035d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 80035e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80035e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d508      	bpl.n	8003606 <SIGNAL_generate+0x22e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003604:	e007      	b.n	8003616 <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	ed93 7a04 	vldr	s14, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 8003616:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800361a:	e035      	b.n	8003688 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	edd3 7a03 	vldr	s15, [r3, #12]
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	f008 ff72 	bl	800c51c <fmodf>
 8003638:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 800363c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003640:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800365e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003662:	edd7 7a07 	vldr	s15, [r7, #28]
 8003666:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003670:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 8003674:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 800367e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003682:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003686:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003694:	eeb0 1a47 	vmov.f32	s2, s14
 8003698:	eef0 0a67 	vmov.f32	s1, s15
 800369c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80036a0:	f7ff fd4e 	bl	8003140 <limit_setpoint>
 80036a4:	eef0 7a40 	vmov.f32	s15, s0
}
 80036a8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ac:	3730      	adds	r7, #48	@ 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	ecbd 8b02 	vpop	{d8}
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40c90fdb 	.word	0x40c90fdb

080036bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <HAL_MspInit+0x44>)
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003700 <HAL_MspInit+0x44>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <HAL_MspInit+0x44>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_MspInit+0x44>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <HAL_MspInit+0x44>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_MspInit+0x44>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036f2:	f003 fa07 	bl	8006b04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000

08003704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <NMI_Handler+0x4>

0800370c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <MemManage_Handler+0x4>

0800371c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <UsageFault_Handler+0x4>

0800372c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800375a:	f000 fe8d 	bl	8004478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003768:	4802      	ldr	r0, [pc, #8]	@ (8003774 <DMA1_Channel1_IRQHandler+0x10>)
 800376a:	f002 fe0e 	bl	800638a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000240 	.word	0x20000240

08003778 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800377c:	4802      	ldr	r0, [pc, #8]	@ (8003788 <DMA1_Channel2_IRQHandler+0x10>)
 800377e:	f002 fe04 	bl	800638a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20001aa8 	.word	0x20001aa8

0800378c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003790:	4802      	ldr	r0, [pc, #8]	@ (800379c <DMA1_Channel3_IRQHandler+0x10>)
 8003792:	f002 fdfa 	bl	800638a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20001b08 	.word	0x20001b08

080037a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037a4:	4803      	ldr	r0, [pc, #12]	@ (80037b4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80037a6:	f004 fe33 	bl	8008410 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80037aa:	4803      	ldr	r0, [pc, #12]	@ (80037b8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80037ac:	f004 fe30 	bl	8008410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20001448 	.word	0x20001448
 80037b8:	20001910 	.word	0x20001910

080037bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <TIM2_IRQHandler+0x10>)
 80037c2:	f004 fe25 	bl	8008410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20001514 	.word	0x20001514

080037d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <TIM3_IRQHandler+0x10>)
 80037d6:	f004 fe1b 	bl	8008410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200015e0 	.word	0x200015e0

080037e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <TIM4_IRQHandler+0x10>)
 80037ea:	f004 fe11 	bl	8008410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200016ac 	.word	0x200016ac

080037f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <USART2_IRQHandler+0x10>)
 80037fe:	f006 fb5b 	bl	8009eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200019dc 	.word	0x200019dc

0800380c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003810:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003814:	f003 f8ba 	bl	800698c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003824:	4a14      	ldr	r2, [pc, #80]	@ (8003878 <_sbrk+0x5c>)
 8003826:	4b15      	ldr	r3, [pc, #84]	@ (800387c <_sbrk+0x60>)
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003830:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <_sbrk+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <_sbrk+0x64>)
 800383a:	4a12      	ldr	r2, [pc, #72]	@ (8003884 <_sbrk+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383e:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d207      	bcs.n	800385c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800384c:	f008 fe3a 	bl	800c4c4 <__errno>
 8003850:	4603      	mov	r3, r0
 8003852:	220c      	movs	r2, #12
 8003854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	e009      	b.n	8003870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003862:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <_sbrk+0x64>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	4a05      	ldr	r2, [pc, #20]	@ (8003880 <_sbrk+0x64>)
 800386c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20020000 	.word	0x20020000
 800387c:	00000400 	.word	0x00000400
 8003880:	20001444 	.word	0x20001444
 8003884:	20001cb8 	.word	0x20001cb8

08003888 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <SystemInit+0x20>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <SystemInit+0x20>)
 8003894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b098      	sub	sp, #96	@ 0x60
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	611a      	str	r2, [r3, #16]
 80038ce:	615a      	str	r2, [r3, #20]
 80038d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2234      	movs	r2, #52	@ 0x34
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f008 fddb 	bl	800c494 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <MX_TIM1_Init+0x120>)
 80038e0:	4a3b      	ldr	r2, [pc, #236]	@ (80039d0 <MX_TIM1_Init+0x124>)
 80038e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038e4:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <MX_TIM1_Init+0x120>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ea:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <MX_TIM1_Init+0x120>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <MX_TIM1_Init+0x120>)
 80038f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f8:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <MX_TIM1_Init+0x120>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038fe:	4b33      	ldr	r3, [pc, #204]	@ (80039cc <MX_TIM1_Init+0x120>)
 8003900:	2200      	movs	r2, #0
 8003902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003904:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <MX_TIM1_Init+0x120>)
 8003906:	2200      	movs	r2, #0
 8003908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800390a:	4830      	ldr	r0, [pc, #192]	@ (80039cc <MX_TIM1_Init+0x120>)
 800390c:	f004 f9d2 	bl	8007cb4 <HAL_TIM_PWM_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003916:	f7ff f95d 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003926:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800392a:	4619      	mov	r1, r3
 800392c:	4827      	ldr	r0, [pc, #156]	@ (80039cc <MX_TIM1_Init+0x120>)
 800392e:	f005 ffe3 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003938:	f7ff f94c 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800393c:	2360      	movs	r3, #96	@ 0x60
 800393e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003944:	2300      	movs	r3, #0
 8003946:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003948:	2300      	movs	r3, #0
 800394a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003958:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800395c:	220c      	movs	r2, #12
 800395e:	4619      	mov	r1, r3
 8003960:	481a      	ldr	r0, [pc, #104]	@ (80039cc <MX_TIM1_Init+0x120>)
 8003962:	f004 fecf 	bl	8008704 <HAL_TIM_PWM_ConfigChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800396c:	f7ff f932 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80039a0:	2300      	movs	r3, #0
 80039a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4807      	ldr	r0, [pc, #28]	@ (80039cc <MX_TIM1_Init+0x120>)
 80039ae:	f006 f839 	bl	8009a24 <HAL_TIMEx_ConfigBreakDeadTime>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80039b8:	f7ff f90c 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039bc:	4803      	ldr	r0, [pc, #12]	@ (80039cc <MX_TIM1_Init+0x120>)
 80039be:	f000 fb5b 	bl	8004078 <HAL_TIM_MspPostInit>

}
 80039c2:	bf00      	nop
 80039c4:	3760      	adds	r7, #96	@ 0x60
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20001448 	.word	0x20001448
 80039d0:	40012c00 	.word	0x40012c00

080039d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039da:	f107 0310 	add.w	r3, r7, #16
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <MX_TIM2_Init+0x98>)
 80039f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <MX_TIM2_Init+0x98>)
 80039fc:	22a9      	movs	r2, #169	@ 0xa9
 80039fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003a06:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b17      	ldr	r3, [pc, #92]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a1a:	4814      	ldr	r0, [pc, #80]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a1c:	f003 fffe 	bl	8007a1c <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a26:	f7ff f8d5 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a30:	f107 0310 	add.w	r3, r7, #16
 8003a34:	4619      	mov	r1, r3
 8003a36:	480d      	ldr	r0, [pc, #52]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a38:	f004 ff78 	bl	800892c <HAL_TIM_ConfigClockSource>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a42:	f7ff f8c7 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	@ (8003a6c <MX_TIM2_Init+0x98>)
 8003a54:	f005 ff50 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a5e:	f7ff f8b9 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20001514 	.word	0x20001514

08003a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	@ 0x30
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f008 fd08 	bl	800c494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a84:	463b      	mov	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a8e:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003a90:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <MX_TIM3_Init+0xa8>)
 8003a92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a94:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003aa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aae:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003abc:	2301      	movs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003acc:	2301      	movs	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	4619      	mov	r1, r3
 8003ade:	480d      	ldr	r0, [pc, #52]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003ae0:	f004 fb54 	bl	800818c <HAL_TIM_Encoder_Init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003aea:	f7ff f873 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003af6:	463b      	mov	r3, r7
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	@ (8003b14 <MX_TIM3_Init+0xa4>)
 8003afc:	f005 fefc 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003b06:	f7ff f865 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	3730      	adds	r7, #48	@ 0x30
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200015e0 	.word	0x200015e0
 8003b18:	40000400 	.word	0x40000400

08003b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	@ 0x30
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f008 fcb2 	bl	800c494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b30:	463b      	mov	r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b3a:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b3c:	4a21      	ldr	r2, [pc, #132]	@ (8003bc4 <MX_TIM4_Init+0xa8>)
 8003b3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b40:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b54:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b60:	2303      	movs	r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b74:	2300      	movs	r3, #0
 8003b76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	4619      	mov	r1, r3
 8003b8a:	480d      	ldr	r0, [pc, #52]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003b8c:	f004 fafe 	bl	800818c <HAL_TIM_Encoder_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b96:	f7ff f81d 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4806      	ldr	r0, [pc, #24]	@ (8003bc0 <MX_TIM4_Init+0xa4>)
 8003ba8:	f005 fea6 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003bb2:	f7ff f80f 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003bb6:	bf00      	nop
 8003bb8:	3730      	adds	r7, #48	@ 0x30
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200016ac 	.word	0x200016ac
 8003bc4:	40000800 	.word	0x40000800

08003bc8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bce:	f107 0310 	add.w	r3, r7, #16
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003be6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003be8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c60 <MX_TIM5_Init+0x98>)
 8003bea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003bee:	22a9      	movs	r2, #169	@ 0xa9
 8003bf0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003bf8:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c00:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c0c:	4813      	ldr	r0, [pc, #76]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003c0e:	f003 ff05 	bl	8007a1c <HAL_TIM_Base_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003c18:	f7fe ffdc 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c22:	f107 0310 	add.w	r3, r7, #16
 8003c26:	4619      	mov	r1, r3
 8003c28:	480c      	ldr	r0, [pc, #48]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003c2a:	f004 fe7f 	bl	800892c <HAL_TIM_ConfigClockSource>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003c34:	f7fe ffce 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4805      	ldr	r0, [pc, #20]	@ (8003c5c <MX_TIM5_Init+0x94>)
 8003c46:	f005 fe57 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003c50:	f7fe ffc0 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c54:	bf00      	nop
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20001778 	.word	0x20001778
 8003c60:	40000c00 	.word	0x40000c00

08003c64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b09c      	sub	sp, #112	@ 0x70
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	2234      	movs	r2, #52	@ 0x34
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f008 fbf8 	bl	800c494 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ca4:	4b51      	ldr	r3, [pc, #324]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003ca6:	4a52      	ldr	r2, [pc, #328]	@ (8003df0 <MX_TIM8_Init+0x18c>)
 8003ca8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003caa:	4b50      	ldr	r3, [pc, #320]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cbc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003cc4:	4b49      	ldr	r3, [pc, #292]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cca:	4b48      	ldr	r3, [pc, #288]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003cd0:	4846      	ldr	r0, [pc, #280]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cd2:	f003 fea3 	bl	8007a1c <HAL_TIM_Base_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003cdc:	f7fe ff7a 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ce4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ce6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003cea:	4619      	mov	r1, r3
 8003cec:	483f      	ldr	r0, [pc, #252]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cee:	f004 fe1d 	bl	800892c <HAL_TIM_ConfigClockSource>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003cf8:	f7fe ff6c 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003cfc:	483b      	ldr	r0, [pc, #236]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003cfe:	f003 ffd9 	bl	8007cb4 <HAL_TIM_PWM_Init>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003d08:	f7fe ff64 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d10:	2300      	movs	r3, #0
 8003d12:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4833      	ldr	r0, [pc, #204]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003d20:	f005 fdea 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003d2a:	f7fe ff53 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d2e:	2360      	movs	r3, #96	@ 0x60
 8003d30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d36:	2300      	movs	r3, #0
 8003d38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4619      	mov	r1, r3
 8003d52:	4826      	ldr	r0, [pc, #152]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003d54:	f004 fcd6 	bl	8008704 <HAL_TIM_PWM_ConfigChannel>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003d5e:	f7fe ff39 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d66:	2204      	movs	r2, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4820      	ldr	r0, [pc, #128]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003d6c:	f004 fcca 	bl	8008704 <HAL_TIM_PWM_ConfigChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003d76:	f7fe ff2d 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d7e:	2208      	movs	r2, #8
 8003d80:	4619      	mov	r1, r3
 8003d82:	481a      	ldr	r0, [pc, #104]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003d84:	f004 fcbe 	bl	8008704 <HAL_TIM_PWM_ConfigChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003d8e:	f7fe ff21 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003daa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003db8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4807      	ldr	r0, [pc, #28]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003dd0:	f005 fe28 	bl	8009a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003dda:	f7fe fefb 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003dde:	4803      	ldr	r0, [pc, #12]	@ (8003dec <MX_TIM8_Init+0x188>)
 8003de0:	f000 f94a 	bl	8004078 <HAL_TIM_MspPostInit>

}
 8003de4:	bf00      	nop
 8003de6:	3770      	adds	r7, #112	@ 0x70
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20001844 	.word	0x20001844
 8003df0:	40013400 	.word	0x40013400

08003df4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003df8:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003dfa:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <MX_TIM16_Init+0x5c>)
 8003dfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e00:	22a9      	movs	r2, #169	@ 0xa9
 8003e02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e0c:	f240 4279 	movw	r2, #1145	@ 0x479
 8003e10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003e24:	4809      	ldr	r0, [pc, #36]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e26:	f003 fdf9 	bl	8007a1c <HAL_TIM_Base_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003e30:	f7fe fed0 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e34:	2108      	movs	r1, #8
 8003e36:	4805      	ldr	r0, [pc, #20]	@ (8003e4c <MX_TIM16_Init+0x58>)
 8003e38:	f004 f8b2 	bl	8007fa0 <HAL_TIM_OnePulse_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003e42:	f7fe fec7 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20001910 	.word	0x20001910
 8003e50:	40014400 	.word	0x40014400

08003e54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <HAL_TIM_PWM_MspInit+0x44>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_TIM_PWM_MspInit+0x48>)
 8003e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <HAL_TIM_PWM_MspInit+0x48>)
 8003e6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e70:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e72:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_TIM_PWM_MspInit+0x48>)
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2019      	movs	r0, #25
 8003e84:	f002 f869 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e88:	2019      	movs	r0, #25
 8003e8a:	f002 f880 	bl	8005f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d114      	bne.n	8003edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ebe:	4b28      	ldr	r3, [pc, #160]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2100      	movs	r1, #0
 8003ece:	201c      	movs	r0, #28
 8003ed0:	f002 f843 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ed4:	201c      	movs	r0, #28
 8003ed6:	f002 f85a 	bl	8005f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003eda:	e03c      	b.n	8003f56 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	@ (8003f64 <HAL_TIM_Base_MspInit+0xc4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	4a1d      	ldr	r2, [pc, #116]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
}
 8003efe:	e02a      	b.n	8003f56 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_TIM_Base_MspInit+0xc8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10c      	bne.n	8003f24 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0e:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f14:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
}
 8003f22:	e018      	b.n	8003f56 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a10      	ldr	r2, [pc, #64]	@ (8003f6c <HAL_TIM_Base_MspInit+0xcc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d113      	bne.n	8003f56 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	4a0b      	ldr	r2, [pc, #44]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_TIM_Base_MspInit+0xc0>)
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2019      	movs	r0, #25
 8003f4c:	f002 f805 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f50:	2019      	movs	r0, #25
 8003f52:	f002 f81c 	bl	8005f8e <HAL_NVIC_EnableIRQ>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014400 	.word	0x40014400

08003f70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	@ 0x30
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f78:	f107 031c 	add.w	r3, r7, #28
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a37      	ldr	r2, [pc, #220]	@ (800406c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d131      	bne.n	8003ff6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f96:	4a36      	ldr	r2, [pc, #216]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9e:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	4a30      	ldr	r2, [pc, #192]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fc2:	23c0      	movs	r3, #192	@ 0xc0
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fe0:	f002 fb22 	bl	8006628 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	201d      	movs	r0, #29
 8003fea:	f001 ffb6 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fee:	201d      	movs	r0, #29
 8003ff0:	f001 ffcd 	bl	8005f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003ff4:	e036      	b.n	8004064 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Encoder_MspInit+0x104>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d131      	bne.n	8004064 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6593      	str	r3, [r2, #88]	@ 0x58
 800400c:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 800401a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401c:	4a14      	ldr	r2, [pc, #80]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004024:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x100>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004030:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004042:	230a      	movs	r3, #10
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004046:	f107 031c 	add.w	r3, r7, #28
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004050:	f002 faea 	bl	8006628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2100      	movs	r1, #0
 8004058:	201e      	movs	r0, #30
 800405a:	f001 ff7e 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800405e:	201e      	movs	r0, #30
 8004060:	f001 ff95 	bl	8005f8e <HAL_NVIC_EnableIRQ>
}
 8004064:	bf00      	nop
 8004066:	3730      	adds	r7, #48	@ 0x30
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40000400 	.word	0x40000400
 8004070:	40021000 	.word	0x40021000
 8004074:	40000800 	.word	0x40000800

08004078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	@ 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a30      	ldr	r2, [pc, #192]	@ (8004158 <HAL_TIM_MspPostInit+0xe0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d11c      	bne.n	80040d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800409a:	4b30      	ldr	r3, [pc, #192]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	4a2f      	ldr	r2, [pc, #188]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040a6:	4b2d      	ldr	r3, [pc, #180]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040b2:	2308      	movs	r3, #8
 80040b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040be:	2300      	movs	r3, #0
 80040c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040c2:	2302      	movs	r3, #2
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4619      	mov	r1, r3
 80040cc:	4824      	ldr	r0, [pc, #144]	@ (8004160 <HAL_TIM_MspPostInit+0xe8>)
 80040ce:	f002 faab 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80040d2:	e03d      	b.n	8004150 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <HAL_TIM_MspPostInit+0xec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d138      	bne.n	8004150 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040de:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ea:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b19      	ldr	r3, [pc, #100]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	4a18      	ldr	r2, [pc, #96]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004102:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_TIM_MspPostInit+0xe4>)
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800410e:	23c0      	movs	r3, #192	@ 0xc0
 8004110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411a:	2300      	movs	r3, #0
 800411c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800411e:	2304      	movs	r3, #4
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4619      	mov	r1, r3
 8004128:	480d      	ldr	r0, [pc, #52]	@ (8004160 <HAL_TIM_MspPostInit+0xe8>)
 800412a:	f002 fa7d 	bl	8006628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800412e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004134:	2302      	movs	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413c:	2300      	movs	r3, #0
 800413e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004140:	230a      	movs	r3, #10
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	4619      	mov	r1, r3
 800414a:	4807      	ldr	r0, [pc, #28]	@ (8004168 <HAL_TIM_MspPostInit+0xf0>)
 800414c:	f002 fa6c 	bl	8006628 <HAL_GPIO_Init>
}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	@ 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40021000 	.word	0x40021000
 8004160:	48000800 	.word	0x48000800
 8004164:	40013400 	.word	0x40013400
 8004168:	48000400 	.word	0x48000400

0800416c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004170:	4b23      	ldr	r3, [pc, #140]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 8004172:	4a24      	ldr	r2, [pc, #144]	@ (8004204 <MX_USART2_UART_Init+0x98>)
 8004174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004176:	4b22      	ldr	r3, [pc, #136]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 8004178:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800417c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800417e:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 8004180:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004184:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004186:	4b1e      	ldr	r3, [pc, #120]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 8004188:	2200      	movs	r2, #0
 800418a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800418c:	4b1c      	ldr	r3, [pc, #112]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 800418e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004194:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 8004196:	220c      	movs	r2, #12
 8004198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419a:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a6:	4b16      	ldr	r3, [pc, #88]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041b2:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041b8:	4811      	ldr	r0, [pc, #68]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041ba:	f005 fd17 	bl	8009bec <HAL_UART_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80041c4:	f7fe fd06 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041c8:	2100      	movs	r1, #0
 80041ca:	480d      	ldr	r0, [pc, #52]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041cc:	f007 fa6a 	bl	800b6a4 <HAL_UARTEx_SetTxFifoThreshold>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80041d6:	f7fe fcfd 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041da:	2100      	movs	r1, #0
 80041dc:	4808      	ldr	r0, [pc, #32]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041de:	f007 fa9f 	bl	800b720 <HAL_UARTEx_SetRxFifoThreshold>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80041e8:	f7fe fcf4 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80041ec:	4804      	ldr	r0, [pc, #16]	@ (8004200 <MX_USART2_UART_Init+0x94>)
 80041ee:	f007 fa20 	bl	800b632 <HAL_UARTEx_DisableFifoMode>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80041f8:	f7fe fcec 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200019dc 	.word	0x200019dc
 8004204:	40004400 	.word	0x40004400

08004208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b09e      	sub	sp, #120	@ 0x78
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	2254      	movs	r2, #84	@ 0x54
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f008 f933 	bl	800c494 <memset>
  if(uartHandle->Instance==USART2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4d      	ldr	r2, [pc, #308]	@ (8004368 <HAL_UART_MspInit+0x160>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f040 8092 	bne.w	800435e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800423a:	2302      	movs	r3, #2
 800423c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	4618      	mov	r0, r3
 8004248:	f003 f99a 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004252:	f7fe fcbf 	bl	8002bd4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004256:	4b45      	ldr	r3, [pc, #276]	@ (800436c <HAL_UART_MspInit+0x164>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	4a44      	ldr	r2, [pc, #272]	@ (800436c <HAL_UART_MspInit+0x164>)
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	6593      	str	r3, [r2, #88]	@ 0x58
 8004262:	4b42      	ldr	r3, [pc, #264]	@ (800436c <HAL_UART_MspInit+0x164>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	4b3f      	ldr	r3, [pc, #252]	@ (800436c <HAL_UART_MspInit+0x164>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004272:	4a3e      	ldr	r2, [pc, #248]	@ (800436c <HAL_UART_MspInit+0x164>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800427a:	4b3c      	ldr	r3, [pc, #240]	@ (800436c <HAL_UART_MspInit+0x164>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004286:	230c      	movs	r3, #12
 8004288:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004292:	2300      	movs	r3, #0
 8004294:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004296:	2307      	movs	r3, #7
 8004298:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800429e:	4619      	mov	r1, r3
 80042a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042a4:	f002 f9c0 	bl	8006628 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80042a8:	4b31      	ldr	r3, [pc, #196]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042aa:	4a32      	ldr	r2, [pc, #200]	@ (8004374 <HAL_UART_MspInit+0x16c>)
 80042ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80042ae:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042b0:	221a      	movs	r2, #26
 80042b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042c2:	2280      	movs	r2, #128	@ 0x80
 80042c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042cc:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80042d2:	4b27      	ldr	r3, [pc, #156]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042da:	2200      	movs	r2, #0
 80042dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80042de:	4824      	ldr	r0, [pc, #144]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042e0:	f001 fe70 	bl	8005fc4 <HAL_DMA_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80042ea:	f7fe fc73 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80042f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004370 <HAL_UART_MspInit+0x168>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <HAL_UART_MspInit+0x170>)
 80042fe:	4a1f      	ldr	r2, [pc, #124]	@ (800437c <HAL_UART_MspInit+0x174>)
 8004300:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004302:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004304:	221b      	movs	r2, #27
 8004306:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HAL_UART_MspInit+0x170>)
 800430a:	2210      	movs	r2, #16
 800430c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004310:	2200      	movs	r2, #0
 8004312:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004314:	4b18      	ldr	r3, [pc, #96]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800431a:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <HAL_UART_MspInit+0x170>)
 800431c:	2200      	movs	r2, #0
 800431e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004320:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004328:	2200      	movs	r2, #0
 800432a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800432c:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <HAL_UART_MspInit+0x170>)
 800432e:	2200      	movs	r2, #0
 8004330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004332:	4811      	ldr	r0, [pc, #68]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004334:	f001 fe46 	bl	8005fc4 <HAL_DMA_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800433e:	f7fe fc49 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a0c      	ldr	r2, [pc, #48]	@ (8004378 <HAL_UART_MspInit+0x170>)
 8004346:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004348:	4a0b      	ldr	r2, [pc, #44]	@ (8004378 <HAL_UART_MspInit+0x170>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	2026      	movs	r0, #38	@ 0x26
 8004354:	f001 fe01 	bl	8005f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004358:	2026      	movs	r0, #38	@ 0x26
 800435a:	f001 fe18 	bl	8005f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800435e:	bf00      	nop
 8004360:	3778      	adds	r7, #120	@ 0x78
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40004400 	.word	0x40004400
 800436c:	40021000 	.word	0x40021000
 8004370:	20001aa8 	.word	0x20001aa8
 8004374:	4002001c 	.word	0x4002001c
 8004378:	20001b08 	.word	0x20001b08
 800437c:	40020030 	.word	0x40020030

08004380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004380:	480d      	ldr	r0, [pc, #52]	@ (80043b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004382:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004384:	f7ff fa80 	bl	8003888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004388:	480c      	ldr	r0, [pc, #48]	@ (80043bc <LoopForever+0x6>)
  ldr r1, =_edata
 800438a:	490d      	ldr	r1, [pc, #52]	@ (80043c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800438c:	4a0d      	ldr	r2, [pc, #52]	@ (80043c4 <LoopForever+0xe>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004390:	e002      	b.n	8004398 <LoopCopyDataInit>

08004392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004396:	3304      	adds	r3, #4

08004398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800439c:	d3f9      	bcc.n	8004392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439e:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043a0:	4c0a      	ldr	r4, [pc, #40]	@ (80043cc <LoopForever+0x16>)
  movs r3, #0
 80043a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a4:	e001      	b.n	80043aa <LoopFillZerobss>

080043a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a8:	3204      	adds	r2, #4

080043aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ac:	d3fb      	bcc.n	80043a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ae:	f008 f88f 	bl	800c4d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043b2:	f7fe fae3 	bl	800297c <main>

080043b6 <LoopForever>:

LoopForever:
    b LoopForever
 80043b6:	e7fe      	b.n	80043b6 <LoopForever>
  ldr   r0, =_estack
 80043b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c0:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80043c4:	0800e498 	.word	0x0800e498
  ldr r2, =_sbss
 80043c8:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80043cc:	20001cb4 	.word	0x20001cb4

080043d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043d0:	e7fe      	b.n	80043d0 <ADC1_2_IRQHandler>

080043d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043dc:	2003      	movs	r0, #3
 80043de:	f001 fdb1 	bl	8005f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043e2:	2000      	movs	r0, #0
 80043e4:	f000 f80e 	bl	8004404 <HAL_InitTick>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	71fb      	strb	r3, [r7, #7]
 80043f2:	e001      	b.n	80043f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043f4:	f7ff f962 	bl	80036bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043f8:	79fb      	ldrb	r3, [r7, #7]

}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004410:	4b16      	ldr	r3, [pc, #88]	@ (800446c <HAL_InitTick+0x68>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004418:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <HAL_InitTick+0x6c>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b13      	ldr	r3, [pc, #76]	@ (800446c <HAL_InitTick+0x68>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004424:	fbb1 f3f3 	udiv	r3, r1, r3
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fdbc 	bl	8005faa <HAL_SYSTICK_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10f      	bne.n	8004458 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	d809      	bhi.n	8004452 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800443e:	2200      	movs	r2, #0
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	f04f 30ff 	mov.w	r0, #4294967295
 8004446:	f001 fd88 	bl	8005f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800444a:	4a0a      	ldr	r2, [pc, #40]	@ (8004474 <HAL_InitTick+0x70>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e007      	b.n	8004462 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e004      	b.n	8004462 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000160 	.word	0x20000160
 8004470:	20000158 	.word	0x20000158
 8004474:	2000015c 	.word	0x2000015c

08004478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_IncTick+0x1c>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_IncTick+0x20>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4413      	add	r3, r2
 8004486:	4a03      	ldr	r2, [pc, #12]	@ (8004494 <HAL_IncTick+0x1c>)
 8004488:	6013      	str	r3, [r2, #0]
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	20001b68 	.word	0x20001b68
 8004498:	20000160 	.word	0x20000160

0800449c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return uwTick;
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_GetTick+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20001b68 	.word	0x20001b68

080044b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3360      	adds	r3, #96	@ 0x60
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <LL_ADC_SetOffset+0x44>)
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	03fff000 	.word	0x03fff000

08004564 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3360      	adds	r3, #96	@ 0x60
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3360      	adds	r3, #96	@ 0x60
 80045a0:	461a      	mov	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3360      	adds	r3, #96	@ 0x60
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3360      	adds	r3, #96	@ 0x60
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	431a      	orrs	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	615a      	str	r2, [r3, #20]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3330      	adds	r3, #48	@ 0x30
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	4413      	add	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	211f      	movs	r1, #31
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	401a      	ands	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 011f 	and.w	r1, r3, #31
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3314      	adds	r3, #20
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0e5b      	lsrs	r3, r3, #25
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	4413      	add	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	0d1b      	lsrs	r3, r3, #20
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2107      	movs	r1, #7
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0d1b      	lsrs	r3, r3, #20
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	fa01 f303 	lsl.w	r3, r1, r3
 800471a:	431a      	orrs	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	43db      	mvns	r3, r3
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0318 	and.w	r3, r3, #24
 800474e:	4908      	ldr	r1, [pc, #32]	@ (8004770 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004750:	40d9      	lsrs	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	400b      	ands	r3, r1
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	0007ffff 	.word	0x0007ffff

08004774 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 031f 	and.w	r3, r3, #31
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80047a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6093      	str	r3, [r2, #8]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c8:	d101      	bne.n	80047ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80047ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004818:	d101      	bne.n	800481e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800483c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004868:	f043 0202 	orr.w	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <LL_ADC_IsEnabled+0x18>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <LL_ADC_IsEnabled+0x1a>
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d101      	bne.n	80048ba <LL_ADC_IsDisableOngoing+0x18>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <LL_ADC_IsDisableOngoing+0x1a>
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d101      	bne.n	8004908 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b08      	cmp	r3, #8
 8004928:	d101      	bne.n	800492e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b089      	sub	sp, #36	@ 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1a9      	b.n	8004caa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fd fb81 	bl	800206c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff19 	bl	80047b4 <LL_ADC_IsDeepPowerDownEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff feff 	bl	8004790 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ff34 	bl	8004804 <LL_ADC_IsInternalRegulatorEnabled>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d115      	bne.n	80049ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff18 	bl	80047dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004c20 <HAL_ADC_Init+0x2e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	4a9c      	ldr	r2, [pc, #624]	@ (8004c24 <HAL_ADC_Init+0x2e8>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80049c0:	e002      	b.n	80049c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f9      	bne.n	80049c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ff16 	bl	8004804 <LL_ADC_IsInternalRegulatorEnabled>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e2:	f043 0210 	orr.w	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff76 	bl	80048f0 <LL_ADC_REG_IsConversionOngoing>
 8004a04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8142 	bne.w	8004c98 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 813e 	bne.w	8004c98 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004a24:	f043 0202 	orr.w	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff ff23 	bl	800487c <LL_ADC_IsEnabled>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d141      	bne.n	8004ac0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a44:	d004      	beq.n	8004a50 <HAL_ADC_Init+0x114>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a77      	ldr	r2, [pc, #476]	@ (8004c28 <HAL_ADC_Init+0x2ec>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10f      	bne.n	8004a70 <HAL_ADC_Init+0x134>
 8004a50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a54:	f7ff ff12 	bl	800487c <LL_ADC_IsEnabled>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4873      	ldr	r0, [pc, #460]	@ (8004c28 <HAL_ADC_Init+0x2ec>)
 8004a5c:	f7ff ff0e 	bl	800487c <LL_ADC_IsEnabled>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4323      	orrs	r3, r4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e012      	b.n	8004a96 <HAL_ADC_Init+0x15a>
 8004a70:	486e      	ldr	r0, [pc, #440]	@ (8004c2c <HAL_ADC_Init+0x2f0>)
 8004a72:	f7ff ff03 	bl	800487c <LL_ADC_IsEnabled>
 8004a76:	4604      	mov	r4, r0
 8004a78:	486d      	ldr	r0, [pc, #436]	@ (8004c30 <HAL_ADC_Init+0x2f4>)
 8004a7a:	f7ff feff 	bl	800487c <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	431c      	orrs	r4, r3
 8004a82:	486c      	ldr	r0, [pc, #432]	@ (8004c34 <HAL_ADC_Init+0x2f8>)
 8004a84:	f7ff fefa 	bl	800487c <LL_ADC_IsEnabled>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4323      	orrs	r3, r4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa2:	d004      	beq.n	8004aae <HAL_ADC_Init+0x172>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c28 <HAL_ADC_Init+0x2ec>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_Init+0x176>
 8004aae:	4a62      	ldr	r2, [pc, #392]	@ (8004c38 <HAL_ADC_Init+0x2fc>)
 8004ab0:	e000      	b.n	8004ab4 <HAL_ADC_Init+0x178>
 8004ab2:	4a62      	ldr	r2, [pc, #392]	@ (8004c3c <HAL_ADC_Init+0x300>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7ff fcfa 	bl	80044b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	7f5b      	ldrb	r3, [r3, #29]
 8004ac4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004aca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ad0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ad6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ade:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d106      	bne.n	8004afc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	045b      	lsls	r3, r3, #17
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	4b48      	ldr	r3, [pc, #288]	@ (8004c40 <HAL_ADC_Init+0x304>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fee5 	bl	8004916 <LL_ADC_INJ_IsConversionOngoing>
 8004b4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d17f      	bne.n	8004c54 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d17c      	bne.n	8004c54 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b5e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b66:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b76:	f023 0302 	bic.w	r3, r3, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d017      	beq.n	8004bbc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004b9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ba4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6911      	ldr	r1, [r2, #16]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004bba:	e013      	b.n	8004be4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004bca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004bdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004be0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d12a      	bne.n	8004c44 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c04:	4311      	orrs	r1, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c0a:	4311      	orrs	r1, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c10:	430a      	orrs	r2, r1
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	611a      	str	r2, [r3, #16]
 8004c1e:	e019      	b.n	8004c54 <HAL_ADC_Init+0x318>
 8004c20:	20000158 	.word	0x20000158
 8004c24:	053e2d63 	.word	0x053e2d63
 8004c28:	50000100 	.word	0x50000100
 8004c2c:	50000400 	.word	0x50000400
 8004c30:	50000500 	.word	0x50000500
 8004c34:	50000600 	.word	0x50000600
 8004c38:	50000300 	.word	0x50000300
 8004c3c:	50000700 	.word	0x50000700
 8004c40:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10c      	bne.n	8004c76 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	f023 010f 	bic.w	r1, r3, #15
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c74:	e007      	b.n	8004c86 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 020f 	bic.w	r2, r2, #15
 8004c84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c96:	e007      	b.n	8004ca8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	f043 0210 	orr.w	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3724      	adds	r7, #36	@ 0x24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd90      	pop	{r4, r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc8:	d004      	beq.n	8004cd4 <HAL_ADC_Start_DMA+0x20>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5a      	ldr	r2, [pc, #360]	@ (8004e38 <HAL_ADC_Start_DMA+0x184>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADC_Start_DMA+0x24>
 8004cd4:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <HAL_ADC_Start_DMA+0x188>)
 8004cd6:	e000      	b.n	8004cda <HAL_ADC_Start_DMA+0x26>
 8004cd8:	4b59      	ldr	r3, [pc, #356]	@ (8004e40 <HAL_ADC_Start_DMA+0x18c>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fd4a 	bl	8004774 <LL_ADC_GetMultimode>
 8004ce0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fe02 	bl	80048f0 <LL_ADC_REG_IsConversionOngoing>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 809b 	bne.w	8004e2a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_Start_DMA+0x4e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e096      	b.n	8004e30 <HAL_ADC_Start_DMA+0x17c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004e44 <HAL_ADC_Start_DMA+0x190>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d008      	beq.n	8004d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d002      	beq.n	8004d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	d17a      	bne.n	8004e1c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fcf6 	bl	8005718 <ADC_Enable>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d16d      	bne.n	8004e12 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8004e38 <HAL_ADC_Start_DMA+0x184>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_ADC_Start_DMA+0xb4>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3b      	ldr	r2, [pc, #236]	@ (8004e48 <HAL_ADC_Start_DMA+0x194>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d002      	beq.n	8004d64 <HAL_ADC_Start_DMA+0xb0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	e003      	b.n	8004d6c <HAL_ADC_Start_DMA+0xb8>
 8004d64:	4b39      	ldr	r3, [pc, #228]	@ (8004e4c <HAL_ADC_Start_DMA+0x198>)
 8004d66:	e001      	b.n	8004d6c <HAL_ADC_Start_DMA+0xb8>
 8004d68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d002      	beq.n	8004d7a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f023 0206 	bic.w	r2, r3, #6
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d9e:	e002      	b.n	8004da6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	4a29      	ldr	r2, [pc, #164]	@ (8004e50 <HAL_ADC_Start_DMA+0x19c>)
 8004dac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db2:	4a28      	ldr	r2, [pc, #160]	@ (8004e54 <HAL_ADC_Start_DMA+0x1a0>)
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	4a27      	ldr	r2, [pc, #156]	@ (8004e58 <HAL_ADC_Start_DMA+0x1a4>)
 8004dbc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	221c      	movs	r2, #28
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0210 	orr.w	r2, r2, #16
 8004ddc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3340      	adds	r3, #64	@ 0x40
 8004df8:	4619      	mov	r1, r3
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f001 f989 	bl	8006114 <HAL_DMA_Start_IT>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fd5c 	bl	80048c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004e10:	e00d      	b.n	8004e2e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004e1a:	e008      	b.n	8004e2e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004e28:	e001      	b.n	8004e2e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	50000100 	.word	0x50000100
 8004e3c:	50000300 	.word	0x50000300
 8004e40:	50000700 	.word	0x50000700
 8004e44:	50000600 	.word	0x50000600
 8004e48:	50000500 	.word	0x50000500
 8004e4c:	50000400 	.word	0x50000400
 8004e50:	08005903 	.word	0x08005903
 8004e54:	080059db 	.word	0x080059db
 8004e58:	080059f7 	.word	0x080059f7

08004e5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b0b6      	sub	sp, #216	@ 0xd8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x24>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	f000 bc13 	b.w	80056e2 <HAL_ADC_ConfigChannel+0x84a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fd11 	bl	80048f0 <LL_ADC_REG_IsConversionOngoing>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 83f3 	bne.w	80056bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7ff fbcb 	bl	800467e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fcff 	bl	80048f0 <LL_ADC_REG_IsConversionOngoing>
 8004ef2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fd0b 	bl	8004916 <LL_ADC_INJ_IsConversionOngoing>
 8004f00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 81d9 	bne.w	80052c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 81d4 	bne.w	80052c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f20:	d10f      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f7ff fbd2 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fb79 	bl	8004632 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f40:	e00e      	b.n	8004f60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7ff fbc1 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fb69 	bl	8004632 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d022      	beq.n	8004fc8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6919      	ldr	r1, [r3, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f92:	f7ff fac3 	bl	800451c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6919      	ldr	r1, [r3, #16]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7ff fb0f 	bl	80045c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x126>
 8004fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fbc:	e000      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x128>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f7ff fb1b 	bl	80045fc <LL_ADC_SetOffsetSaturation>
 8004fc6:	e17b      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fac8 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x15c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fabd 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8004fea:	4603      	mov	r3, r0
 8004fec:	0e9b      	lsrs	r3, r3, #26
 8004fee:	f003 021f 	and.w	r2, r3, #31
 8004ff2:	e01e      	b.n	8005032 <HAL_ADC_ConfigChannel+0x19a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fab2 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8005000:	4603      	mov	r3, r0
 8005002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005016:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800501a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005022:	2320      	movs	r3, #32
 8005024:	e004      	b.n	8005030 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_ADC_ConfigChannel+0x1b2>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	0e9b      	lsrs	r3, r3, #26
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	e018      	b.n	800507c <HAL_ADC_ConfigChannel+0x1e4>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800505e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800506e:	2320      	movs	r3, #32
 8005070:	e004      	b.n	800507c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800507c:	429a      	cmp	r2, r3
 800507e:	d106      	bne.n	800508e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fa81 	bl	8004590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fa65 	bl	8004564 <LL_ADC_GetOffsetChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x222>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fa5a 	bl	8004564 <LL_ADC_GetOffsetChannel>
 80050b0:	4603      	mov	r3, r0
 80050b2:	0e9b      	lsrs	r3, r3, #26
 80050b4:	f003 021f 	and.w	r2, r3, #31
 80050b8:	e01e      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x260>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fa4f 	bl	8004564 <LL_ADC_GetOffsetChannel>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80050d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80050e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e004      	b.n	80050f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80050ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050f0:	fab3 f383 	clz	r3, r3
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x278>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	e018      	b.n	8005142 <HAL_ADC_ConfigChannel+0x2aa>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800511c:	fa93 f3a3 	rbit	r3, r3
 8005120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800512c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e004      	b.n	8005142 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005142:	429a      	cmp	r2, r3
 8005144:	d106      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fa1e 	bl	8004590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fa02 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8005160:	4603      	mov	r3, r0
 8005162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x2e8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f9f7 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	0e9b      	lsrs	r3, r3, #26
 800517a:	f003 021f 	and.w	r2, r3, #31
 800517e:	e01e      	b.n	80051be <HAL_ADC_ConfigChannel+0x326>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f9ec 	bl	8004564 <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005196:	fa93 f3a3 	rbit	r3, r3
 800519a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800519e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80051a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80051ae:	2320      	movs	r3, #32
 80051b0:	e004      	b.n	80051bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80051b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x33e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0e9b      	lsrs	r3, r3, #26
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	e016      	b.n	8005204 <HAL_ADC_ConfigChannel+0x36c>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80051e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80051ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80051f6:	2320      	movs	r3, #32
 80051f8:	e004      	b.n	8005204 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80051fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005204:	429a      	cmp	r2, r3
 8005206:	d106      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f9bd 	bl	8004590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2103      	movs	r1, #3
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff f9a1 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8005222:	4603      	mov	r3, r0
 8005224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <HAL_ADC_ConfigChannel+0x3aa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2103      	movs	r1, #3
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f996 	bl	8004564 <LL_ADC_GetOffsetChannel>
 8005238:	4603      	mov	r3, r0
 800523a:	0e9b      	lsrs	r3, r3, #26
 800523c:	f003 021f 	and.w	r2, r3, #31
 8005240:	e017      	b.n	8005272 <HAL_ADC_ConfigChannel+0x3da>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2103      	movs	r1, #3
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff f98b 	bl	8004564 <LL_ADC_GetOffsetChannel>
 800524e:	4603      	mov	r3, r0
 8005250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800525a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800525c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800525e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e003      	b.n	8005270 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_ADC_ConfigChannel+0x3f2>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0e9b      	lsrs	r3, r3, #26
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	e011      	b.n	80052ae <HAL_ADC_ConfigChannel+0x416>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005292:	fa93 f3a3 	rbit	r3, r3
 8005296:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800529a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800529c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80052a2:	2320      	movs	r3, #32
 80052a4:	e003      	b.n	80052ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80052a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d106      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2103      	movs	r1, #3
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff f968 	bl	8004590 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fad9 	bl	800487c <LL_ADC_IsEnabled>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 813d 	bne.w	800554c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f7ff fa24 	bl	800472c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4aa2      	ldr	r2, [pc, #648]	@ (8005574 <HAL_ADC_ConfigChannel+0x6dc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	f040 812e 	bne.w	800554c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x480>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0e9b      	lsrs	r3, r3, #26
 8005306:	3301      	adds	r3, #1
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	2b09      	cmp	r3, #9
 800530e:	bf94      	ite	ls
 8005310:	2301      	movls	r3, #1
 8005312:	2300      	movhi	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e019      	b.n	800534c <HAL_ADC_ConfigChannel+0x4b4>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005328:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800532a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005330:	2320      	movs	r3, #32
 8005332:	e003      	b.n	800533c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	3301      	adds	r3, #1
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2b09      	cmp	r3, #9
 8005344:	bf94      	ite	ls
 8005346:	2301      	movls	r3, #1
 8005348:	2300      	movhi	r3, #0
 800534a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800534c:	2b00      	cmp	r3, #0
 800534e:	d079      	beq.n	8005444 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <HAL_ADC_ConfigChannel+0x4d4>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	0e9b      	lsrs	r3, r3, #26
 8005362:	3301      	adds	r3, #1
 8005364:	069b      	lsls	r3, r3, #26
 8005366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800536a:	e015      	b.n	8005398 <HAL_ADC_ConfigChannel+0x500>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005374:	fa93 f3a3 	rbit	r3, r3
 8005378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800537e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005384:	2320      	movs	r3, #32
 8005386:	e003      	b.n	8005390 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538a:	fab3 f383 	clz	r3, r3
 800538e:	b2db      	uxtb	r3, r3
 8005390:	3301      	adds	r3, #1
 8005392:	069b      	lsls	r3, r3, #26
 8005394:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x520>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	0e9b      	lsrs	r3, r3, #26
 80053aa:	3301      	adds	r3, #1
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2101      	movs	r1, #1
 80053b2:	fa01 f303 	lsl.w	r3, r1, r3
 80053b6:	e017      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x550>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c0:	fa93 f3a3 	rbit	r3, r3
 80053c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80053c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80053ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80053d0:	2320      	movs	r3, #32
 80053d2:	e003      	b.n	80053dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80053d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d6:	fab3 f383 	clz	r3, r3
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	3301      	adds	r3, #1
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2101      	movs	r1, #1
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	ea42 0103 	orr.w	r1, r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <HAL_ADC_ConfigChannel+0x576>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0e9b      	lsrs	r3, r3, #26
 80053fe:	3301      	adds	r3, #1
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	4613      	mov	r3, r2
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4413      	add	r3, r2
 800540a:	051b      	lsls	r3, r3, #20
 800540c:	e018      	b.n	8005440 <HAL_ADC_ConfigChannel+0x5a8>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800541c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005426:	2320      	movs	r3, #32
 8005428:	e003      	b.n	8005432 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800542a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	b2db      	uxtb	r3, r3
 8005432:	3301      	adds	r3, #1
 8005434:	f003 021f 	and.w	r2, r3, #31
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005440:	430b      	orrs	r3, r1
 8005442:	e07e      	b.n	8005542 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x5c8>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	3301      	adds	r3, #1
 8005458:	069b      	lsls	r3, r3, #26
 800545a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800545e:	e015      	b.n	800548c <HAL_ADC_ConfigChannel+0x5f4>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005478:	2320      	movs	r3, #32
 800547a:	e003      	b.n	8005484 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	3301      	adds	r3, #1
 8005486:	069b      	lsls	r3, r3, #26
 8005488:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005494:	2b00      	cmp	r3, #0
 8005496:	d109      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x614>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0e9b      	lsrs	r3, r3, #26
 800549e:	3301      	adds	r3, #1
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	e017      	b.n	80054dc <HAL_ADC_ConfigChannel+0x644>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	fa93 f3a3 	rbit	r3, r3
 80054b8:	61fb      	str	r3, [r7, #28]
  return result;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80054c4:	2320      	movs	r3, #32
 80054c6:	e003      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	3301      	adds	r3, #1
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	ea42 0103 	orr.w	r1, r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x670>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0e9b      	lsrs	r3, r3, #26
 80054f2:	3301      	adds	r3, #1
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	3b1e      	subs	r3, #30
 8005500:	051b      	lsls	r3, r3, #20
 8005502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005506:	e01b      	b.n	8005540 <HAL_ADC_ConfigChannel+0x6a8>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	fa93 f3a3 	rbit	r3, r3
 8005514:	613b      	str	r3, [r7, #16]
  return result;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005520:	2320      	movs	r3, #32
 8005522:	e003      	b.n	800552c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3301      	adds	r3, #1
 800552e:	f003 021f 	and.w	r2, r3, #31
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	3b1e      	subs	r3, #30
 800553a:	051b      	lsls	r3, r3, #20
 800553c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005540:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005546:	4619      	mov	r1, r3
 8005548:	f7ff f8c5 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <HAL_ADC_ConfigChannel+0x6e0>)
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80be 	beq.w	80056d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005562:	d004      	beq.n	800556e <HAL_ADC_ConfigChannel+0x6d6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a04      	ldr	r2, [pc, #16]	@ (800557c <HAL_ADC_ConfigChannel+0x6e4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10a      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x6ec>
 800556e:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <HAL_ADC_ConfigChannel+0x6e8>)
 8005570:	e009      	b.n	8005586 <HAL_ADC_ConfigChannel+0x6ee>
 8005572:	bf00      	nop
 8005574:	407f0000 	.word	0x407f0000
 8005578:	80080000 	.word	0x80080000
 800557c:	50000100 	.word	0x50000100
 8005580:	50000300 	.word	0x50000300
 8005584:	4b59      	ldr	r3, [pc, #356]	@ (80056ec <HAL_ADC_ConfigChannel+0x854>)
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe ffba 	bl	8004500 <LL_ADC_GetCommonPathInternalCh>
 800558c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a56      	ldr	r2, [pc, #344]	@ (80056f0 <HAL_ADC_ConfigChannel+0x858>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_ADC_ConfigChannel+0x70c>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a55      	ldr	r2, [pc, #340]	@ (80056f4 <HAL_ADC_ConfigChannel+0x85c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d13a      	bne.n	800561a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d134      	bne.n	800561a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055b8:	d005      	beq.n	80055c6 <HAL_ADC_ConfigChannel+0x72e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a4e      	ldr	r2, [pc, #312]	@ (80056f8 <HAL_ADC_ConfigChannel+0x860>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 8085 	bne.w	80056d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ce:	d004      	beq.n	80055da <HAL_ADC_ConfigChannel+0x742>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a49      	ldr	r2, [pc, #292]	@ (80056fc <HAL_ADC_ConfigChannel+0x864>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x746>
 80055da:	4a49      	ldr	r2, [pc, #292]	@ (8005700 <HAL_ADC_ConfigChannel+0x868>)
 80055dc:	e000      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x748>
 80055de:	4a43      	ldr	r2, [pc, #268]	@ (80056ec <HAL_ADC_ConfigChannel+0x854>)
 80055e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe ff75 	bl	80044da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055f0:	4b44      	ldr	r3, [pc, #272]	@ (8005704 <HAL_ADC_ConfigChannel+0x86c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	4a44      	ldr	r2, [pc, #272]	@ (8005708 <HAL_ADC_ConfigChannel+0x870>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800560a:	e002      	b.n	8005612 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3b01      	subs	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f9      	bne.n	800560c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005618:	e05a      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3b      	ldr	r2, [pc, #236]	@ (800570c <HAL_ADC_ConfigChannel+0x874>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d125      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11f      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a31      	ldr	r2, [pc, #196]	@ (80056fc <HAL_ADC_ConfigChannel+0x864>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d104      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x7ac>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a34      	ldr	r2, [pc, #208]	@ (8005710 <HAL_ADC_ConfigChannel+0x878>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d047      	beq.n	80056d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800564c:	d004      	beq.n	8005658 <HAL_ADC_ConfigChannel+0x7c0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <HAL_ADC_ConfigChannel+0x864>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_ADC_ConfigChannel+0x7c4>
 8005658:	4a29      	ldr	r2, [pc, #164]	@ (8005700 <HAL_ADC_ConfigChannel+0x868>)
 800565a:	e000      	b.n	800565e <HAL_ADC_ConfigChannel+0x7c6>
 800565c:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_ADC_ConfigChannel+0x854>)
 800565e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fe ff36 	bl	80044da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800566e:	e031      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a27      	ldr	r2, [pc, #156]	@ (8005714 <HAL_ADC_ConfigChannel+0x87c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d12d      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800567a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800567e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d127      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <HAL_ADC_ConfigChannel+0x864>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d022      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005698:	d004      	beq.n	80056a4 <HAL_ADC_ConfigChannel+0x80c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a17      	ldr	r2, [pc, #92]	@ (80056fc <HAL_ADC_ConfigChannel+0x864>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x810>
 80056a4:	4a16      	ldr	r2, [pc, #88]	@ (8005700 <HAL_ADC_ConfigChannel+0x868>)
 80056a6:	e000      	b.n	80056aa <HAL_ADC_ConfigChannel+0x812>
 80056a8:	4a10      	ldr	r2, [pc, #64]	@ (80056ec <HAL_ADC_ConfigChannel+0x854>)
 80056aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7fe ff10 	bl	80044da <LL_ADC_SetCommonPathInternalCh>
 80056ba:	e00c      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056ce:	e002      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80056de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	37d8      	adds	r7, #216	@ 0xd8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	50000700 	.word	0x50000700
 80056f0:	c3210000 	.word	0xc3210000
 80056f4:	90c00010 	.word	0x90c00010
 80056f8:	50000600 	.word	0x50000600
 80056fc:	50000100 	.word	0x50000100
 8005700:	50000300 	.word	0x50000300
 8005704:	20000158 	.word	0x20000158
 8005708:	053e2d63 	.word	0x053e2d63
 800570c:	c7520000 	.word	0xc7520000
 8005710:	50000500 	.word	0x50000500
 8005714:	cb840000 	.word	0xcb840000

08005718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005720:	2300      	movs	r3, #0
 8005722:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff f8a7 	bl	800487c <LL_ADC_IsEnabled>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d176      	bne.n	8005822 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	4b3c      	ldr	r3, [pc, #240]	@ (800582c <ADC_Enable+0x114>)
 800573c:	4013      	ands	r3, r2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005746:	f043 0210 	orr.w	r2, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e062      	b.n	8005824 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f862 	bl	800482c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005770:	d004      	beq.n	800577c <ADC_Enable+0x64>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <ADC_Enable+0x118>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d101      	bne.n	8005780 <ADC_Enable+0x68>
 800577c:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <ADC_Enable+0x11c>)
 800577e:	e000      	b.n	8005782 <ADC_Enable+0x6a>
 8005780:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <ADC_Enable+0x120>)
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe febc 	bl	8004500 <LL_ADC_GetCommonPathInternalCh>
 8005788:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800578a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005792:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <ADC_Enable+0x124>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a29      	ldr	r2, [pc, #164]	@ (8005840 <ADC_Enable+0x128>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	099b      	lsrs	r3, r3, #6
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057ac:	e002      	b.n	80057b4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f9      	bne.n	80057ae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80057ba:	f7fe fe6f 	bl	800449c <HAL_GetTick>
 80057be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057c0:	e028      	b.n	8005814 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f858 	bl	800487c <LL_ADC_IsEnabled>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f828 	bl	800482c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057dc:	f7fe fe5e 	bl	800449c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d914      	bls.n	8005814 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d00d      	beq.n	8005814 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fc:	f043 0210 	orr.w	r2, r3, #16
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d1cf      	bne.n	80057c2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	8000003f 	.word	0x8000003f
 8005830:	50000100 	.word	0x50000100
 8005834:	50000300 	.word	0x50000300
 8005838:	50000700 	.word	0x50000700
 800583c:	20000158 	.word	0x20000158
 8005840:	053e2d63 	.word	0x053e2d63

08005844 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff f826 	bl	80048a2 <LL_ADC_IsDisableOngoing>
 8005856:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f80d 	bl	800487c <LL_ADC_IsEnabled>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d047      	beq.n	80058f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d144      	bne.n	80058f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030d 	and.w	r3, r3, #13
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10c      	bne.n	8005896 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe ffe7 	bl	8004854 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2203      	movs	r2, #3
 800588c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800588e:	f7fe fe05 	bl	800449c <HAL_GetTick>
 8005892:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005894:	e029      	b.n	80058ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589a:	f043 0210 	orr.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e023      	b.n	80058fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058b2:	f7fe fdf3 	bl	800449c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d914      	bls.n	80058ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d2:	f043 0210 	orr.w	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e007      	b.n	80058fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1dc      	bne.n	80058b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005914:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005918:	2b00      	cmp	r3, #0
 800591a:	d14b      	bne.n	80059b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005920:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d021      	beq.n	800597a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fe8c 	bl	8004658 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d032      	beq.n	80059ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d12b      	bne.n	80059ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11f      	bne.n	80059ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	f043 0201 	orr.w	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005978:	e018      	b.n	80059ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d111      	bne.n	80059ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fa55 	bl	8004e5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059b2:	e00e      	b.n	80059d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fa5f 	bl	8004e84 <HAL_ADC_ErrorCallback>
}
 80059c6:	e004      	b.n	80059d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fa41 	bl	8004e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a14:	f043 0204 	orr.w	r2, r3, #4
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fa31 	bl	8004e84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <LL_ADC_IsEnabled>:
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <LL_ADC_IsEnabled+0x18>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <LL_ADC_IsEnabled+0x1a>
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_ADC_StartCalibration>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005a62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_ADC_IsCalibrationOnGoing>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a96:	d101      	bne.n	8005a9c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_ADC_REG_IsConversionOngoing>:
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d101      	bne.n	8005ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_ADCEx_Calibration_Start+0x1c>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e04d      	b.n	8005b88 <HAL_ADCEx_Calibration_Start+0xb8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fea5 	bl	8005844 <ADC_Disable>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d136      	bne.n	8005b72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b0c:	f023 0302 	bic.w	r3, r3, #2
 8005b10:	f043 0202 	orr.w	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ff96 	bl	8005a50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b24:	e014      	b.n	8005b50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d90d      	bls.n	8005b50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b38:	f023 0312 	bic.w	r3, r3, #18
 8005b3c:	f043 0210 	orr.w	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01b      	b.n	8005b88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff ff94 	bl	8005a82 <LL_ADC_IsCalibrationOnGoing>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e2      	bne.n	8005b26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b70:	e005      	b.n	8005b7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	f043 0210 	orr.w	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0004de01 	.word	0x0004de01

08005b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b0a1      	sub	sp, #132	@ 0x84
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0e7      	b.n	8005d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bca:	d102      	bne.n	8005bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	e009      	b.n	8005be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d102      	bne.n	8005be2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	e001      	b.n	8005be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0be      	b.n	8005d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ff4f 	bl	8005aaa <LL_ADC_REG_IsConversionOngoing>
 8005c0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff ff49 	bl	8005aaa <LL_ADC_REG_IsConversionOngoing>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 80a0 	bne.w	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 809c 	bne.w	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c30:	d004      	beq.n	8005c3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a55      	ldr	r2, [pc, #340]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005c3c:	4b56      	ldr	r3, [pc, #344]	@ (8005d98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005c3e:	e000      	b.n	8005c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005c40:	4b56      	ldr	r3, [pc, #344]	@ (8005d9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005c42:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d04b      	beq.n	8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c5e:	035b      	lsls	r3, r3, #13
 8005c60:	430b      	orrs	r3, r1
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c70:	d004      	beq.n	8005c7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a45      	ldr	r2, [pc, #276]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10f      	bne.n	8005c9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005c7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c80:	f7ff fed3 	bl	8005a2a <LL_ADC_IsEnabled>
 8005c84:	4604      	mov	r4, r0
 8005c86:	4841      	ldr	r0, [pc, #260]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c88:	f7ff fecf 	bl	8005a2a <LL_ADC_IsEnabled>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4323      	orrs	r3, r4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e012      	b.n	8005cc2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c9c:	483c      	ldr	r0, [pc, #240]	@ (8005d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c9e:	f7ff fec4 	bl	8005a2a <LL_ADC_IsEnabled>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	483b      	ldr	r0, [pc, #236]	@ (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ca6:	f7ff fec0 	bl	8005a2a <LL_ADC_IsEnabled>
 8005caa:	4603      	mov	r3, r0
 8005cac:	431c      	orrs	r4, r3
 8005cae:	483c      	ldr	r0, [pc, #240]	@ (8005da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005cb0:	f7ff febb 	bl	8005a2a <LL_ADC_IsEnabled>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4323      	orrs	r3, r4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf0c      	ite	eq
 8005cbc:	2301      	moveq	r3, #1
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d056      	beq.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005cce:	f023 030f 	bic.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	6811      	ldr	r1, [r2, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6892      	ldr	r2, [r2, #8]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ce2:	e047      	b.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cf8:	d004      	beq.n	8005d04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a23      	ldr	r2, [pc, #140]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d10f      	bne.n	8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005d04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d08:	f7ff fe8f 	bl	8005a2a <LL_ADC_IsEnabled>
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	481f      	ldr	r0, [pc, #124]	@ (8005d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d10:	f7ff fe8b 	bl	8005a2a <LL_ADC_IsEnabled>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4323      	orrs	r3, r4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e012      	b.n	8005d4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005d24:	481a      	ldr	r0, [pc, #104]	@ (8005d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d26:	f7ff fe80 	bl	8005a2a <LL_ADC_IsEnabled>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4819      	ldr	r0, [pc, #100]	@ (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d2e:	f7ff fe7c 	bl	8005a2a <LL_ADC_IsEnabled>
 8005d32:	4603      	mov	r3, r0
 8005d34:	431c      	orrs	r4, r3
 8005d36:	481a      	ldr	r0, [pc, #104]	@ (8005da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d38:	f7ff fe77 	bl	8005a2a <LL_ADC_IsEnabled>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4323      	orrs	r3, r4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d56:	f023 030f 	bic.w	r3, r3, #15
 8005d5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d5e:	e009      	b.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005d72:	e000      	b.n	8005d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3784      	adds	r7, #132	@ 0x84
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd90      	pop	{r4, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	50000100 	.word	0x50000100
 8005d90:	50000400 	.word	0x50000400
 8005d94:	50000500 	.word	0x50000500
 8005d98:	50000300 	.word	0x50000300
 8005d9c:	50000700 	.word	0x50000700
 8005da0:	50000600 	.word	0x50000600

08005da4 <__NVIC_SetPriorityGrouping>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <__NVIC_SetPriorityGrouping+0x44>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dd6:	4a04      	ldr	r2, [pc, #16]	@ (8005de8 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	60d3      	str	r3, [r2, #12]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <__NVIC_GetPriorityGrouping>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005df0:	4b04      	ldr	r3, [pc, #16]	@ (8005e04 <__NVIC_GetPriorityGrouping+0x18>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	0a1b      	lsrs	r3, r3, #8
 8005df6:	f003 0307 	and.w	r3, r3, #7
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	e000ed00 	.word	0xe000ed00

08005e08 <__NVIC_EnableIRQ>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	db0b      	blt.n	8005e32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	f003 021f 	and.w	r2, r3, #31
 8005e20:	4907      	ldr	r1, [pc, #28]	@ (8005e40 <__NVIC_EnableIRQ+0x38>)
 8005e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2001      	movs	r0, #1
 8005e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	e000e100 	.word	0xe000e100

08005e44 <__NVIC_SetPriority>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	6039      	str	r1, [r7, #0]
 8005e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db0a      	blt.n	8005e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	490c      	ldr	r1, [pc, #48]	@ (8005e90 <__NVIC_SetPriority+0x4c>)
 8005e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	440b      	add	r3, r1
 8005e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e6c:	e00a      	b.n	8005e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	4908      	ldr	r1, [pc, #32]	@ (8005e94 <__NVIC_SetPriority+0x50>)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	3b04      	subs	r3, #4
 8005e7c:	0112      	lsls	r2, r2, #4
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	440b      	add	r3, r1
 8005e82:	761a      	strb	r2, [r3, #24]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	e000e100 	.word	0xe000e100
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <NVIC_EncodePriority>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b089      	sub	sp, #36	@ 0x24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f1c3 0307 	rsb	r3, r3, #7
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	bf28      	it	cs
 8005eb6:	2304      	movcs	r3, #4
 8005eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d902      	bls.n	8005ec8 <NVIC_EncodePriority+0x30>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	3b03      	subs	r3, #3
 8005ec6:	e000      	b.n	8005eca <NVIC_EncodePriority+0x32>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43da      	mvns	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	401a      	ands	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	43d9      	mvns	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ef0:	4313      	orrs	r3, r2
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3724      	adds	r7, #36	@ 0x24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f10:	d301      	bcc.n	8005f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00f      	b.n	8005f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f16:	4a0a      	ldr	r2, [pc, #40]	@ (8005f40 <SysTick_Config+0x40>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f1e:	210f      	movs	r1, #15
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	f7ff ff8e 	bl	8005e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f28:	4b05      	ldr	r3, [pc, #20]	@ (8005f40 <SysTick_Config+0x40>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f2e:	4b04      	ldr	r3, [pc, #16]	@ (8005f40 <SysTick_Config+0x40>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010

08005f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff29 	bl	8005da4 <__NVIC_SetPriorityGrouping>
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	4603      	mov	r3, r0
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f68:	f7ff ff40 	bl	8005dec <__NVIC_GetPriorityGrouping>
 8005f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f7ff ff90 	bl	8005e98 <NVIC_EncodePriority>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff ff5f 	bl	8005e44 <__NVIC_SetPriority>
}
 8005f86:	bf00      	nop
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	4603      	mov	r3, r0
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff ff33 	bl	8005e08 <__NVIC_EnableIRQ>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff ffa4 	bl	8005f00 <SysTick_Config>
 8005fb8:	4603      	mov	r3, r0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e08d      	b.n	80060f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b47      	ldr	r3, [pc, #284]	@ (80060fc <HAL_DMA_Init+0x138>)
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d80f      	bhi.n	8006002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b45      	ldr	r3, [pc, #276]	@ (8006100 <HAL_DMA_Init+0x13c>)
 8005fea:	4413      	add	r3, r2
 8005fec:	4a45      	ldr	r2, [pc, #276]	@ (8006104 <HAL_DMA_Init+0x140>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	009a      	lsls	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a42      	ldr	r2, [pc, #264]	@ (8006108 <HAL_DMA_Init+0x144>)
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40
 8006000:	e00e      	b.n	8006020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	4b40      	ldr	r3, [pc, #256]	@ (800610c <HAL_DMA_Init+0x148>)
 800600a:	4413      	add	r3, r2
 800600c:	4a3d      	ldr	r2, [pc, #244]	@ (8006104 <HAL_DMA_Init+0x140>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	091b      	lsrs	r3, r3, #4
 8006014:	009a      	lsls	r2, r3, #2
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a3c      	ldr	r2, [pc, #240]	@ (8006110 <HAL_DMA_Init+0x14c>)
 800601e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800605c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa76 	bl	8006564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006080:	d102      	bne.n	8006088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800609c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d010      	beq.n	80060c8 <HAL_DMA_Init+0x104>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d80c      	bhi.n	80060c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa96 	bl	80065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	e008      	b.n	80060da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40020407 	.word	0x40020407
 8006100:	bffdfff8 	.word	0xbffdfff8
 8006104:	cccccccd 	.word	0xcccccccd
 8006108:	40020000 	.word	0x40020000
 800610c:	bffdfbf8 	.word	0xbffdfbf8
 8006110:	40020400 	.word	0x40020400

08006114 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_DMA_Start_IT+0x20>
 8006130:	2302      	movs	r3, #2
 8006132:	e066      	b.n	8006202 <HAL_DMA_Start_IT+0xee>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d155      	bne.n	80061f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f9bb 	bl	80064e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 020e 	orr.w	r2, r2, #14
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e00f      	b.n	80061ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 020a 	orr.w	r2, r2, #10
 80061aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e005      	b.n	8006200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
 80061fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d005      	beq.n	800622e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2204      	movs	r2, #4
 8006226:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
 800622c:	e037      	b.n	800629e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 020e 	bic.w	r2, r2, #14
 800623c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800624c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006262:	f003 021f 	and.w	r2, r3, #31
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	2101      	movs	r1, #1
 800626c:	fa01 f202 	lsl.w	r2, r1, r2
 8006270:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800627a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006292:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800629c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d00d      	beq.n	80062f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2204      	movs	r2, #4
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
 80062ee:	e047      	b.n	8006380 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 020e 	bic.w	r2, r2, #14
 80062fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800631e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006324:	f003 021f 	and.w	r2, r3, #31
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f202 	lsl.w	r2, r1, r2
 8006332:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800633c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006354:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800635e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
    }
  }
  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	2204      	movs	r2, #4
 80063ac:	409a      	lsls	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d026      	beq.n	8006404 <HAL_DMA_IRQHandler+0x7a>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d021      	beq.n	8006404 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0204 	bic.w	r2, r2, #4
 80063dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	f003 021f 	and.w	r2, r3, #31
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	2104      	movs	r1, #4
 80063ec:	fa01 f202 	lsl.w	r2, r1, r2
 80063f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d071      	beq.n	80064de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006402:	e06c      	b.n	80064de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2202      	movs	r2, #2
 800640e:	409a      	lsls	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d02e      	beq.n	8006476 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d029      	beq.n	8006476 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 020a 	bic.w	r2, r2, #10
 800643e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	2102      	movs	r1, #2
 8006456:	fa01 f202 	lsl.w	r2, r1, r2
 800645a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d038      	beq.n	80064de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006474:	e033      	b.n	80064de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	2208      	movs	r2, #8
 8006480:	409a      	lsls	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02a      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d025      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 020e 	bic.w	r2, r2, #14
 80064a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a8:	f003 021f 	and.w	r2, r3, #31
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f202 	lsl.w	r2, r1, r2
 80064b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
}
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006516:	f003 021f 	and.w	r2, r3, #31
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	2101      	movs	r1, #1
 8006520:	fa01 f202 	lsl.w	r2, r1, r2
 8006524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b10      	cmp	r3, #16
 8006534:	d108      	bne.n	8006548 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006546:	e007      	b.n	8006558 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d802      	bhi.n	800657e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006578:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e001      	b.n	8006582 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800657e:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006580:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3b08      	subs	r3, #8
 800658e:	4a12      	ldr	r2, [pc, #72]	@ (80065d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	009a      	lsls	r2, r3, #2
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a0b      	ldr	r2, [pc, #44]	@ (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80065ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2201      	movs	r2, #1
 80065b8:	409a      	lsls	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40020407 	.word	0x40020407
 80065d0:	40020800 	.word	0x40020800
 80065d4:	40020820 	.word	0x40020820
 80065d8:	cccccccd 	.word	0xcccccccd
 80065dc:	40020880 	.word	0x40020880

080065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	461a      	mov	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a08      	ldr	r2, [pc, #32]	@ (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006602:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b01      	subs	r3, #1
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2201      	movs	r2, #1
 800660e:	409a      	lsls	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	1000823f 	.word	0x1000823f
 8006624:	40020940 	.word	0x40020940

08006628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006636:	e15a      	b.n	80068ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2101      	movs	r1, #1
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 814c 	beq.w	80068e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d005      	beq.n	8006668 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006664:	2b02      	cmp	r3, #2
 8006666:	d130      	bne.n	80066ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	2203      	movs	r2, #3
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	43db      	mvns	r3, r3
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4013      	ands	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800669e:	2201      	movs	r2, #1
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	43db      	mvns	r3, r3
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4013      	ands	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	f003 0201 	and.w	r2, r3, #1
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d017      	beq.n	8006706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	2203      	movs	r2, #3
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	43db      	mvns	r3, r3
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4013      	ands	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d123      	bne.n	800675a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	08da      	lsrs	r2, r3, #3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3208      	adds	r2, #8
 800671a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	220f      	movs	r2, #15
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4013      	ands	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	08da      	lsrs	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3208      	adds	r2, #8
 8006754:	6939      	ldr	r1, [r7, #16]
 8006756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	2203      	movs	r2, #3
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 0203 	and.w	r2, r3, #3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80a6 	beq.w	80068e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800679c:	4b5b      	ldr	r3, [pc, #364]	@ (800690c <HAL_GPIO_Init+0x2e4>)
 800679e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a0:	4a5a      	ldr	r2, [pc, #360]	@ (800690c <HAL_GPIO_Init+0x2e4>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80067a8:	4b58      	ldr	r3, [pc, #352]	@ (800690c <HAL_GPIO_Init+0x2e4>)
 80067aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067b4:	4a56      	ldr	r2, [pc, #344]	@ (8006910 <HAL_GPIO_Init+0x2e8>)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	089b      	lsrs	r3, r3, #2
 80067ba:	3302      	adds	r3, #2
 80067bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	220f      	movs	r2, #15
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067de:	d01f      	beq.n	8006820 <HAL_GPIO_Init+0x1f8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a4c      	ldr	r2, [pc, #304]	@ (8006914 <HAL_GPIO_Init+0x2ec>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d019      	beq.n	800681c <HAL_GPIO_Init+0x1f4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a4b      	ldr	r2, [pc, #300]	@ (8006918 <HAL_GPIO_Init+0x2f0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_GPIO_Init+0x1f0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a4a      	ldr	r2, [pc, #296]	@ (800691c <HAL_GPIO_Init+0x2f4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00d      	beq.n	8006814 <HAL_GPIO_Init+0x1ec>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a49      	ldr	r2, [pc, #292]	@ (8006920 <HAL_GPIO_Init+0x2f8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <HAL_GPIO_Init+0x1e8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a48      	ldr	r2, [pc, #288]	@ (8006924 <HAL_GPIO_Init+0x2fc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_GPIO_Init+0x1e4>
 8006808:	2305      	movs	r3, #5
 800680a:	e00a      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 800680c:	2306      	movs	r3, #6
 800680e:	e008      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 8006810:	2304      	movs	r3, #4
 8006812:	e006      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 8006814:	2303      	movs	r3, #3
 8006816:	e004      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 8006818:	2302      	movs	r3, #2
 800681a:	e002      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_GPIO_Init+0x1fa>
 8006820:	2300      	movs	r3, #0
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	f002 0203 	and.w	r2, r2, #3
 8006828:	0092      	lsls	r2, r2, #2
 800682a:	4093      	lsls	r3, r2
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006832:	4937      	ldr	r1, [pc, #220]	@ (8006910 <HAL_GPIO_Init+0x2e8>)
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	3302      	adds	r3, #2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006840:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <HAL_GPIO_Init+0x300>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	43db      	mvns	r3, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4013      	ands	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006864:	4a30      	ldr	r2, [pc, #192]	@ (8006928 <HAL_GPIO_Init+0x300>)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800686a:	4b2f      	ldr	r3, [pc, #188]	@ (8006928 <HAL_GPIO_Init+0x300>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	43db      	mvns	r3, r3
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4013      	ands	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800688e:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <HAL_GPIO_Init+0x300>)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006894:	4b24      	ldr	r3, [pc, #144]	@ (8006928 <HAL_GPIO_Init+0x300>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	43db      	mvns	r3, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <HAL_GPIO_Init+0x300>)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <HAL_GPIO_Init+0x300>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068e2:	4a11      	ldr	r2, [pc, #68]	@ (8006928 <HAL_GPIO_Init+0x300>)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3301      	adds	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f47f ae9d 	bne.w	8006638 <HAL_GPIO_Init+0x10>
  }
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40021000 	.word	0x40021000
 8006910:	40010000 	.word	0x40010000
 8006914:	48000400 	.word	0x48000400
 8006918:	48000800 	.word	0x48000800
 800691c:	48000c00 	.word	0x48000c00
 8006920:	48001000 	.word	0x48001000
 8006924:	48001400 	.word	0x48001400
 8006928:	40010400 	.word	0x40010400

0800692c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	4013      	ands	r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e001      	b.n	800694e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
 8006968:	4613      	mov	r3, r2
 800696a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800696c:	787b      	ldrb	r3, [r7, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006972:	887a      	ldrh	r2, [r7, #2]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006978:	e002      	b.n	8006980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006996:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069a2:	4a05      	ldr	r2, [pc, #20]	@ (80069b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069a4:	88fb      	ldrh	r3, [r7, #6]
 80069a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fc f863 	bl	8002a76 <HAL_GPIO_EXTI_Callback>
  }
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40010400 	.word	0x40010400

080069bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d141      	bne.n	8006a4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069ca:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d6:	d131      	bne.n	8006a3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069d8:	4b47      	ldr	r3, [pc, #284]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069de:	4a46      	ldr	r2, [pc, #280]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069e8:	4b43      	ldr	r3, [pc, #268]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069f0:	4a41      	ldr	r2, [pc, #260]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069f8:	4b40      	ldr	r3, [pc, #256]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2232      	movs	r2, #50	@ 0x32
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	4a3f      	ldr	r2, [pc, #252]	@ (8006b00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	0c9b      	lsrs	r3, r3, #18
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a0e:	e002      	b.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a16:	4b38      	ldr	r3, [pc, #224]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a22:	d102      	bne.n	8006a2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f2      	bne.n	8006a10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a2a:	4b33      	ldr	r3, [pc, #204]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a36:	d158      	bne.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e057      	b.n	8006aec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a42:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a4c:	e04d      	b.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a54:	d141      	bne.n	8006ada <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a56:	4b28      	ldr	r3, [pc, #160]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a62:	d131      	bne.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a64:	4b24      	ldr	r3, [pc, #144]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a6a:	4a23      	ldr	r2, [pc, #140]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a74:	4b20      	ldr	r3, [pc, #128]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2232      	movs	r2, #50	@ 0x32
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	0c9b      	lsrs	r3, r3, #18
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a9a:	e002      	b.n	8006aa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aa2:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aae:	d102      	bne.n	8006ab6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f2      	bne.n	8006a9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ab6:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac2:	d112      	bne.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e011      	b.n	8006aec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ace:	4a0a      	ldr	r2, [pc, #40]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ad8:	e007      	b.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ada:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ae2:	4a05      	ldr	r2, [pc, #20]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ae8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40007000 	.word	0x40007000
 8006afc:	20000158 	.word	0x20000158
 8006b00:	431bde83 	.word	0x431bde83

08006b04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b12:	6093      	str	r3, [r2, #8]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40007000 	.word	0x40007000

08006b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e2fe      	b.n	8007134 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d075      	beq.n	8006c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b42:	4b97      	ldr	r3, [pc, #604]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b4c:	4b94      	ldr	r3, [pc, #592]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d102      	bne.n	8006b62 <HAL_RCC_OscConfig+0x3e>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d002      	beq.n	8006b68 <HAL_RCC_OscConfig+0x44>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d10b      	bne.n	8006b80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	4b8d      	ldr	r3, [pc, #564]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05b      	beq.n	8006c2c <HAL_RCC_OscConfig+0x108>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d157      	bne.n	8006c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e2d9      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d106      	bne.n	8006b98 <HAL_RCC_OscConfig+0x74>
 8006b8a:	4b85      	ldr	r3, [pc, #532]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a84      	ldr	r2, [pc, #528]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e01d      	b.n	8006bd4 <HAL_RCC_OscConfig+0xb0>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x98>
 8006ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	4b7c      	ldr	r3, [pc, #496]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a7b      	ldr	r2, [pc, #492]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	e00b      	b.n	8006bd4 <HAL_RCC_OscConfig+0xb0>
 8006bbc:	4b78      	ldr	r3, [pc, #480]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a77      	ldr	r2, [pc, #476]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	4b75      	ldr	r3, [pc, #468]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a74      	ldr	r2, [pc, #464]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d013      	beq.n	8006c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fc5e 	bl	800449c <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fd fc5a 	bl	800449c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	@ 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e29e      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCC_OscConfig+0xc0>
 8006c02:	e014      	b.n	8006c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fd fc4a 	bl	800449c <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c0c:	f7fd fc46 	bl	800449c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b64      	cmp	r3, #100	@ 0x64
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e28a      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c1e:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0xe8>
 8006c2a:	e000      	b.n	8006c2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d075      	beq.n	8006d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c3a:	4b59      	ldr	r3, [pc, #356]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c44:	4b56      	ldr	r3, [pc, #344]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	d102      	bne.n	8006c5a <HAL_RCC_OscConfig+0x136>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d002      	beq.n	8006c60 <HAL_RCC_OscConfig+0x13c>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d11f      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c60:	4b4f      	ldr	r3, [pc, #316]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_OscConfig+0x154>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e25d      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c78:	4b49      	ldr	r3, [pc, #292]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	061b      	lsls	r3, r3, #24
 8006c86:	4946      	ldr	r1, [pc, #280]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c8c:	4b45      	ldr	r3, [pc, #276]	@ (8006da4 <HAL_RCC_OscConfig+0x280>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd fbb7 	bl	8004404 <HAL_InitTick>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d043      	beq.n	8006d24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e249      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d023      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fd fbf2 	bl	800449c <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cbc:	f7fd fbee 	bl	800449c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e232      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cce:	4b34      	ldr	r3, [pc, #208]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cda:	4b31      	ldr	r3, [pc, #196]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	061b      	lsls	r3, r3, #24
 8006ce8:	492d      	ldr	r1, [pc, #180]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	604b      	str	r3, [r1, #4]
 8006cee:	e01a      	b.n	8006d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006cf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fd fbce 	bl	800449c <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d04:	f7fd fbca 	bl	800449c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e20e      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d16:	4b22      	ldr	r3, [pc, #136]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x1e0>
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d041      	beq.n	8006db6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01c      	beq.n	8006d74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3a:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d40:	4a17      	ldr	r2, [pc, #92]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4a:	f7fd fba7 	bl	800449c <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d52:	f7fd fba3 	bl	800449c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e1e7      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d64:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ef      	beq.n	8006d52 <HAL_RCC_OscConfig+0x22e>
 8006d72:	e020      	b.n	8006db6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d7a:	4a09      	ldr	r2, [pc, #36]	@ (8006da0 <HAL_RCC_OscConfig+0x27c>)
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fd fb8a 	bl	800449c <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d8a:	e00d      	b.n	8006da8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d8c:	f7fd fb86 	bl	800449c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d906      	bls.n	8006da8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e1ca      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
 8006d9e:	bf00      	nop
 8006da0:	40021000 	.word	0x40021000
 8006da4:	2000015c 	.word	0x2000015c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006da8:	4b8c      	ldr	r3, [pc, #560]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ea      	bne.n	8006d8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80a6 	beq.w	8006f10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dc8:	4b84      	ldr	r3, [pc, #528]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x2b4>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x2b6>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	4b7f      	ldr	r3, [pc, #508]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de2:	4a7e      	ldr	r2, [pc, #504]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dea:	4b7c      	ldr	r3, [pc, #496]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006df6:	2301      	movs	r3, #1
 8006df8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfa:	4b79      	ldr	r3, [pc, #484]	@ (8006fe0 <HAL_RCC_OscConfig+0x4bc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d118      	bne.n	8006e38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e06:	4b76      	ldr	r3, [pc, #472]	@ (8006fe0 <HAL_RCC_OscConfig+0x4bc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a75      	ldr	r2, [pc, #468]	@ (8006fe0 <HAL_RCC_OscConfig+0x4bc>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e12:	f7fd fb43 	bl	800449c <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7fd fb3f 	bl	800449c <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e183      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe0 <HAL_RCC_OscConfig+0x4bc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0f0      	beq.n	8006e1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d108      	bne.n	8006e52 <HAL_RCC_OscConfig+0x32e>
 8006e40:	4b66      	ldr	r3, [pc, #408]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e46:	4a65      	ldr	r2, [pc, #404]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e50:	e024      	b.n	8006e9c <HAL_RCC_OscConfig+0x378>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d110      	bne.n	8006e7c <HAL_RCC_OscConfig+0x358>
 8006e5a:	4b60      	ldr	r3, [pc, #384]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e60:	4a5e      	ldr	r2, [pc, #376]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e70:	4a5a      	ldr	r2, [pc, #360]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e7a:	e00f      	b.n	8006e9c <HAL_RCC_OscConfig+0x378>
 8006e7c:	4b57      	ldr	r3, [pc, #348]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e82:	4a56      	ldr	r2, [pc, #344]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e8c:	4b53      	ldr	r3, [pc, #332]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e92:	4a52      	ldr	r2, [pc, #328]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006e94:	f023 0304 	bic.w	r3, r3, #4
 8006e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fd fafa 	bl	800449c <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eac:	f7fd faf6 	bl	800449c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e138      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec2:	4b46      	ldr	r3, [pc, #280]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ed      	beq.n	8006eac <HAL_RCC_OscConfig+0x388>
 8006ed0:	e015      	b.n	8006efe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed2:	f7fd fae3 	bl	800449c <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eda:	f7fd fadf 	bl	800449c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e121      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1ed      	bne.n	8006eda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006efe:	7ffb      	ldrb	r3, [r7, #31]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f04:	4b35      	ldr	r3, [pc, #212]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	4a34      	ldr	r2, [pc, #208]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d03c      	beq.n	8006f96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01c      	beq.n	8006f5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f24:	4b2d      	ldr	r3, [pc, #180]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f34:	f7fd fab2 	bl	800449c <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f3c:	f7fd faae 	bl	800449c <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e0f2      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f4e:	4b23      	ldr	r3, [pc, #140]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0ef      	beq.n	8006f3c <HAL_RCC_OscConfig+0x418>
 8006f5c:	e01b      	b.n	8006f96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f64:	4a1d      	ldr	r2, [pc, #116]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f6e:	f7fd fa95 	bl	800449c <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f76:	f7fd fa91 	bl	800449c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e0d5      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f88:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1ef      	bne.n	8006f76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80c9 	beq.w	8007132 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 030c 	and.w	r3, r3, #12
 8006fa8:	2b0c      	cmp	r3, #12
 8006faa:	f000 8083 	beq.w	80070b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d15e      	bne.n	8007074 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb6:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fd fa6b 	bl	800449c <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fc8:	e00c      	b.n	8006fe4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fca:	f7fd fa67 	bl	800449c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d905      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e0ab      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fe4:	4b55      	ldr	r3, [pc, #340]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1ec      	bne.n	8006fca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ff0:	4b52      	ldr	r3, [pc, #328]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	4b52      	ldr	r3, [pc, #328]	@ (8007140 <HAL_RCC_OscConfig+0x61c>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6a11      	ldr	r1, [r2, #32]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007000:	3a01      	subs	r2, #1
 8007002:	0112      	lsls	r2, r2, #4
 8007004:	4311      	orrs	r1, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800700a:	0212      	lsls	r2, r2, #8
 800700c:	4311      	orrs	r1, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007012:	0852      	lsrs	r2, r2, #1
 8007014:	3a01      	subs	r2, #1
 8007016:	0552      	lsls	r2, r2, #21
 8007018:	4311      	orrs	r1, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800701e:	0852      	lsrs	r2, r2, #1
 8007020:	3a01      	subs	r2, #1
 8007022:	0652      	lsls	r2, r2, #25
 8007024:	4311      	orrs	r1, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800702a:	06d2      	lsls	r2, r2, #27
 800702c:	430a      	orrs	r2, r1
 800702e:	4943      	ldr	r1, [pc, #268]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007030:	4313      	orrs	r3, r2
 8007032:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007034:	4b41      	ldr	r3, [pc, #260]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a40      	ldr	r2, [pc, #256]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 800703a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800703e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007040:	4b3e      	ldr	r3, [pc, #248]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a3d      	ldr	r2, [pc, #244]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800704a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fd fa26 	bl	800449c <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007054:	f7fd fa22 	bl	800449c <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e066      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007066:	4b35      	ldr	r3, [pc, #212]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x530>
 8007072:	e05e      	b.n	8007132 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007074:	4b31      	ldr	r3, [pc, #196]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a30      	ldr	r2, [pc, #192]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 800707a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800707e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fd fa0c 	bl	800449c <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007088:	f7fd fa08 	bl	800449c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e04c      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800709a:	4b28      	ldr	r3, [pc, #160]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80070a6:	4b25      	ldr	r3, [pc, #148]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	4924      	ldr	r1, [pc, #144]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 80070ac:	4b25      	ldr	r3, [pc, #148]	@ (8007144 <HAL_RCC_OscConfig+0x620>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	60cb      	str	r3, [r1, #12]
 80070b2:	e03e      	b.n	8007132 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e039      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80070c0:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <HAL_RCC_OscConfig+0x618>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f003 0203 	and.w	r2, r3, #3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d12c      	bne.n	800712e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	3b01      	subs	r3, #1
 80070e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d123      	bne.n	800712e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d11b      	bne.n	800712e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d113      	bne.n	800712e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	3b01      	subs	r3, #1
 8007114:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007116:	429a      	cmp	r2, r3
 8007118:	d109      	bne.n	800712e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	3b01      	subs	r3, #1
 8007128:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d001      	beq.n	8007132 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000
 8007140:	019f800c 	.word	0x019f800c
 8007144:	feeefffc 	.word	0xfeeefffc

08007148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e11e      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007160:	4b91      	ldr	r3, [pc, #580]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d910      	bls.n	8007190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b8e      	ldr	r3, [pc, #568]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 020f 	bic.w	r2, r3, #15
 8007176:	498c      	ldr	r1, [pc, #560]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b8a      	ldr	r3, [pc, #552]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e106      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d073      	beq.n	8007284 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d129      	bne.n	80071f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a4:	4b81      	ldr	r3, [pc, #516]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0f4      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80071b4:	f000 f99e 	bl	80074f4 <RCC_GetSysClockFreqFromPLLSource>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4a7c      	ldr	r2, [pc, #496]	@ (80073b0 <HAL_RCC_ClockConfig+0x268>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d93f      	bls.n	8007242 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071c2:	4b7a      	ldr	r3, [pc, #488]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d033      	beq.n	8007242 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d12f      	bne.n	8007242 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071e2:	4b72      	ldr	r3, [pc, #456]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ea:	4a70      	ldr	r2, [pc, #448]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80071ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80071f2:	2380      	movs	r3, #128	@ 0x80
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	e024      	b.n	8007242 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d107      	bne.n	8007210 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007200:	4b6a      	ldr	r3, [pc, #424]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0c6      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007210:	4b66      	ldr	r3, [pc, #408]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0be      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007220:	f000 f8ce 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 8007224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4a61      	ldr	r2, [pc, #388]	@ (80073b0 <HAL_RCC_ClockConfig+0x268>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d909      	bls.n	8007242 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800722e:	4b5f      	ldr	r3, [pc, #380]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007236:	4a5d      	ldr	r2, [pc, #372]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800723e:	2380      	movs	r3, #128	@ 0x80
 8007240:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007242:	4b5a      	ldr	r3, [pc, #360]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f023 0203 	bic.w	r2, r3, #3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	4957      	ldr	r1, [pc, #348]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007250:	4313      	orrs	r3, r2
 8007252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007254:	f7fd f922 	bl	800449c <HAL_GetTick>
 8007258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725a:	e00a      	b.n	8007272 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800725c:	f7fd f91e 	bl	800449c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e095      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007272:	4b4e      	ldr	r3, [pc, #312]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 020c 	and.w	r2, r3, #12
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	429a      	cmp	r2, r3
 8007282:	d1eb      	bne.n	800725c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d023      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800729c:	4b43      	ldr	r3, [pc, #268]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	4a42      	ldr	r2, [pc, #264]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80072b4:	4b3d      	ldr	r3, [pc, #244]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072bc:	4a3b      	ldr	r2, [pc, #236]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072c4:	4b39      	ldr	r3, [pc, #228]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4936      	ldr	r1, [pc, #216]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	e008      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b80      	cmp	r3, #128	@ 0x80
 80072dc:	d105      	bne.n	80072ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80072de:	4b33      	ldr	r3, [pc, #204]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4a32      	ldr	r2, [pc, #200]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 80072e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072ea:	4b2f      	ldr	r3, [pc, #188]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d21d      	bcs.n	8007334 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f8:	4b2b      	ldr	r3, [pc, #172]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f023 020f 	bic.w	r2, r3, #15
 8007300:	4929      	ldr	r1, [pc, #164]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007308:	f7fd f8c8 	bl	800449c <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fd f8c4 	bl	800449c <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e03b      	b.n	800739e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007326:	4b20      	ldr	r3, [pc, #128]	@ (80073a8 <HAL_RCC_ClockConfig+0x260>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d1ed      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007340:	4b1a      	ldr	r3, [pc, #104]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4917      	ldr	r1, [pc, #92]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 800734e:	4313      	orrs	r3, r2
 8007350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800735e:	4b13      	ldr	r3, [pc, #76]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	490f      	ldr	r1, [pc, #60]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 800736e:	4313      	orrs	r3, r2
 8007370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007372:	f000 f825 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 8007376:	4602      	mov	r2, r0
 8007378:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <HAL_RCC_ClockConfig+0x264>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	490c      	ldr	r1, [pc, #48]	@ (80073b4 <HAL_RCC_ClockConfig+0x26c>)
 8007384:	5ccb      	ldrb	r3, [r1, r3]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	4a0a      	ldr	r2, [pc, #40]	@ (80073b8 <HAL_RCC_ClockConfig+0x270>)
 8007390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <HAL_RCC_ClockConfig+0x274>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fd f834 	bl	8004404 <HAL_InitTick>
 800739c:	4603      	mov	r3, r0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40022000 	.word	0x40022000
 80073ac:	40021000 	.word	0x40021000
 80073b0:	04c4b400 	.word	0x04c4b400
 80073b4:	0800d854 	.word	0x0800d854
 80073b8:	20000158 	.word	0x20000158
 80073bc:	2000015c 	.word	0x2000015c

080073c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80073c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d102      	bne.n	80073d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80073d2:	4b2a      	ldr	r3, [pc, #168]	@ (800747c <HAL_RCC_GetSysClockFreq+0xbc>)
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	e047      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80073d8:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 030c 	and.w	r3, r3, #12
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d102      	bne.n	80073ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073e4:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	e03e      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80073ea:	4b23      	ldr	r3, [pc, #140]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d136      	bne.n	8007464 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073f6:	4b20      	ldr	r3, [pc, #128]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007400:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	3301      	adds	r3, #1
 800740c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b03      	cmp	r3, #3
 8007412:	d10c      	bne.n	800742e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007414:	4a1a      	ldr	r2, [pc, #104]	@ (8007480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800741e:	68d2      	ldr	r2, [r2, #12]
 8007420:	0a12      	lsrs	r2, r2, #8
 8007422:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007426:	fb02 f303 	mul.w	r3, r2, r3
 800742a:	617b      	str	r3, [r7, #20]
      break;
 800742c:	e00c      	b.n	8007448 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800742e:	4a13      	ldr	r2, [pc, #76]	@ (800747c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	4a10      	ldr	r2, [pc, #64]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007438:	68d2      	ldr	r2, [r2, #12]
 800743a:	0a12      	lsrs	r2, r2, #8
 800743c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	617b      	str	r3, [r7, #20]
      break;
 8007446:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	0e5b      	lsrs	r3, r3, #25
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	3301      	adds	r3, #1
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	e001      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007468:	693b      	ldr	r3, [r7, #16]
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40021000 	.word	0x40021000
 800747c:	00f42400 	.word	0x00f42400
 8007480:	016e3600 	.word	0x016e3600

08007484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007488:	4b03      	ldr	r3, [pc, #12]	@ (8007498 <HAL_RCC_GetHCLKFreq+0x14>)
 800748a:	681b      	ldr	r3, [r3, #0]
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000158 	.word	0x20000158

0800749c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074a0:	f7ff fff0 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	4904      	ldr	r1, [pc, #16]	@ (80074c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074b2:	5ccb      	ldrb	r3, [r1, r3]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40021000 	.word	0x40021000
 80074c4:	0800d864 	.word	0x0800d864

080074c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80074cc:	f7ff ffda 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 80074d0:	4602      	mov	r2, r0
 80074d2:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	0adb      	lsrs	r3, r3, #11
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	4904      	ldr	r1, [pc, #16]	@ (80074f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074de:	5ccb      	ldrb	r3, [r1, r3]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000
 80074f0:	0800d864 	.word	0x0800d864

080074f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b03      	cmp	r3, #3
 8007516:	d10c      	bne.n	8007532 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007518:	4a17      	ldr	r2, [pc, #92]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	4a14      	ldr	r2, [pc, #80]	@ (8007574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007522:	68d2      	ldr	r2, [r2, #12]
 8007524:	0a12      	lsrs	r2, r2, #8
 8007526:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	617b      	str	r3, [r7, #20]
    break;
 8007530:	e00c      	b.n	800754c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007532:	4a12      	ldr	r2, [pc, #72]	@ (800757c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	4a0e      	ldr	r2, [pc, #56]	@ (8007574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800753c:	68d2      	ldr	r2, [r2, #12]
 800753e:	0a12      	lsrs	r2, r2, #8
 8007540:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	617b      	str	r3, [r7, #20]
    break;
 800754a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800754c:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	0e5b      	lsrs	r3, r3, #25
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	3301      	adds	r3, #1
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007566:	687b      	ldr	r3, [r7, #4]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	40021000 	.word	0x40021000
 8007578:	016e3600 	.word	0x016e3600
 800757c:	00f42400 	.word	0x00f42400

08007580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007588:	2300      	movs	r3, #0
 800758a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800758c:	2300      	movs	r3, #0
 800758e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8098 	beq.w	80076ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800759e:	2300      	movs	r3, #0
 80075a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a2:	4b43      	ldr	r3, [pc, #268]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ae:	4b40      	ldr	r3, [pc, #256]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b2:	4a3f      	ldr	r2, [pc, #252]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ba:	4b3d      	ldr	r3, [pc, #244]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075c6:	2301      	movs	r3, #1
 80075c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ca:	4b3a      	ldr	r3, [pc, #232]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a39      	ldr	r2, [pc, #228]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075d6:	f7fc ff61 	bl	800449c <HAL_GetTick>
 80075da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075dc:	e009      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075de:	f7fc ff5d 	bl	800449c <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d902      	bls.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	74fb      	strb	r3, [r7, #19]
        break;
 80075f0:	e005      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f2:	4b30      	ldr	r3, [pc, #192]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0ef      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80075fe:	7cfb      	ldrb	r3, [r7, #19]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d159      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007604:	4b2a      	ldr	r3, [pc, #168]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01e      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	d019      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007620:	4b23      	ldr	r3, [pc, #140]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800762c:	4b20      	ldr	r3, [pc, #128]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007632:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800763c:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007642:	4a1b      	ldr	r2, [pc, #108]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800764c:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fc ff1d 	bl	800449c <HAL_GetTick>
 8007662:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007664:	e00b      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007666:	f7fc ff19 	bl	800449c <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007674:	4293      	cmp	r3, r2
 8007676:	d902      	bls.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	74fb      	strb	r3, [r7, #19]
            break;
 800767c:	e006      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800767e:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0ec      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800768c:	7cfb      	ldrb	r3, [r7, #19]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007692:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a0:	4903      	ldr	r1, [pc, #12]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076a8:	e008      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	74bb      	strb	r3, [r7, #18]
 80076ae:	e005      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80076b0:	40021000 	.word	0x40021000
 80076b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b8:	7cfb      	ldrb	r3, [r7, #19]
 80076ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076bc:	7c7b      	ldrb	r3, [r7, #17]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d105      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c6:	4aa6      	ldr	r2, [pc, #664]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076da:	4ba1      	ldr	r3, [pc, #644]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	f023 0203 	bic.w	r2, r3, #3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	499d      	ldr	r1, [pc, #628]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076fc:	4b98      	ldr	r3, [pc, #608]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007702:	f023 020c 	bic.w	r2, r3, #12
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	4995      	ldr	r1, [pc, #596]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800771e:	4b90      	ldr	r3, [pc, #576]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007724:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	498c      	ldr	r1, [pc, #560]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0308 	and.w	r3, r3, #8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007740:	4b87      	ldr	r3, [pc, #540]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	4984      	ldr	r1, [pc, #528]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007762:	4b7f      	ldr	r3, [pc, #508]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	497b      	ldr	r1, [pc, #492]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007784:	4b76      	ldr	r3, [pc, #472]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	4973      	ldr	r1, [pc, #460]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	496a      	ldr	r1, [pc, #424]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077c8:	4b65      	ldr	r3, [pc, #404]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	4962      	ldr	r1, [pc, #392]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	4959      	ldr	r1, [pc, #356]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800780c:	4b54      	ldr	r3, [pc, #336]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800780e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007812:	f023 0203 	bic.w	r2, r3, #3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	4951      	ldr	r1, [pc, #324]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800782e:	4b4c      	ldr	r3, [pc, #304]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4948      	ldr	r1, [pc, #288]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784c:	2b00      	cmp	r3, #0
 800784e:	d015      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007850:	4b43      	ldr	r3, [pc, #268]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785e:	4940      	ldr	r1, [pc, #256]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800786e:	d105      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007870:	4b3b      	ldr	r3, [pc, #236]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a3a      	ldr	r2, [pc, #232]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800787a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007884:	2b00      	cmp	r3, #0
 8007886:	d015      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007888:	4b35      	ldr	r3, [pc, #212]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	4932      	ldr	r1, [pc, #200]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078a6:	d105      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d015      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078c0:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	4924      	ldr	r1, [pc, #144]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078de:	d105      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d015      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078f8:	4b19      	ldr	r3, [pc, #100]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007906:	4916      	ldr	r1, [pc, #88]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007916:	d105      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007918:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	4a10      	ldr	r2, [pc, #64]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007922:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d019      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007930:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	4908      	ldr	r1, [pc, #32]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800794e:	d109      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007950:	4b03      	ldr	r3, [pc, #12]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a02      	ldr	r2, [pc, #8]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800795a:	60d3      	str	r3, [r2, #12]
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800795e:	bf00      	nop
 8007960:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007970:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007976:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	4926      	ldr	r1, [pc, #152]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800798e:	d105      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007990:	4b21      	ldr	r3, [pc, #132]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4a20      	ldr	r2, [pc, #128]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800799a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80079a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b6:	4918      	ldr	r1, [pc, #96]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d105      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079c8:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4a12      	ldr	r2, [pc, #72]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d015      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80079e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ee:	490a      	ldr	r1, [pc, #40]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079fe:	d105      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a04      	ldr	r2, [pc, #16]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40021000 	.word	0x40021000

08007a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e054      	b.n	8007ad8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d111      	bne.n	8007a5e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 fee2 	bl	800980c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a23      	ldr	r2, [pc, #140]	@ (8007ae0 <HAL_TIM_Base_Init+0xc4>)
 8007a54:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f001 fa2b 	bl	8008ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	08003ea1 	.word	0x08003ea1

08007ae4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d001      	beq.n	8007afc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e04c      	b.n	8007b96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a26      	ldr	r2, [pc, #152]	@ (8007ba4 <HAL_TIM_Base_Start+0xc0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d022      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b16:	d01d      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a22      	ldr	r2, [pc, #136]	@ (8007ba8 <HAL_TIM_Base_Start+0xc4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d018      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a21      	ldr	r2, [pc, #132]	@ (8007bac <HAL_TIM_Base_Start+0xc8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb0 <HAL_TIM_Base_Start+0xcc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00e      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007bb4 <HAL_TIM_Base_Start+0xd0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb8 <HAL_TIM_Base_Start+0xd4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_TIM_Base_Start+0x70>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007bbc <HAL_TIM_Base_Start+0xd8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d115      	bne.n	8007b80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	4b19      	ldr	r3, [pc, #100]	@ (8007bc0 <HAL_TIM_Base_Start+0xdc>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b06      	cmp	r3, #6
 8007b64:	d015      	beq.n	8007b92 <HAL_TIM_Base_Start+0xae>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b6c:	d011      	beq.n	8007b92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0201 	orr.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7e:	e008      	b.n	8007b92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e000      	b.n	8007b94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40000800 	.word	0x40000800
 8007bb0:	40000c00 	.word	0x40000c00
 8007bb4:	40013400 	.word	0x40013400
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40015000 	.word	0x40015000
 8007bc0:	00010007 	.word	0x00010007

08007bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d001      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e054      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a26      	ldr	r2, [pc, #152]	@ (8007c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d022      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c06:	d01d      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a22      	ldr	r2, [pc, #136]	@ (8007c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d018      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a21      	ldr	r2, [pc, #132]	@ (8007c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca4 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cac <HAL_TIM_Base_Start_IT+0xe8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d115      	bne.n	8007c70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	4b19      	ldr	r3, [pc, #100]	@ (8007cb0 <HAL_TIM_Base_Start_IT+0xec>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d015      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c5c:	d011      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	e008      	b.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40012c00 	.word	0x40012c00
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	40013400 	.word	0x40013400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40015000 	.word	0x40015000
 8007cb0:	00010007 	.word	0x00010007

08007cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e054      	b.n	8007d70 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d111      	bne.n	8007cf6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fd96 	bl	800980c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a23      	ldr	r2, [pc, #140]	@ (8007d78 <HAL_TIM_PWM_Init+0xc4>)
 8007cec:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f001 f8df 	bl	8008ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08003e55 	.word	0x08003e55

08007d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_TIM_PWM_Start+0x24>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	e03c      	b.n	8007e1a <HAL_TIM_PWM_Start+0x9e>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d109      	bne.n	8007dba <HAL_TIM_PWM_Start+0x3e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	e02f      	b.n	8007e1a <HAL_TIM_PWM_Start+0x9e>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d109      	bne.n	8007dd4 <HAL_TIM_PWM_Start+0x58>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	bf14      	ite	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	2300      	moveq	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e022      	b.n	8007e1a <HAL_TIM_PWM_Start+0x9e>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b0c      	cmp	r3, #12
 8007dd8:	d109      	bne.n	8007dee <HAL_TIM_PWM_Start+0x72>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	e015      	b.n	8007e1a <HAL_TIM_PWM_Start+0x9e>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d109      	bne.n	8007e08 <HAL_TIM_PWM_Start+0x8c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	bf14      	ite	ne
 8007e00:	2301      	movne	r3, #1
 8007e02:	2300      	moveq	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	e008      	b.n	8007e1a <HAL_TIM_PWM_Start+0x9e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	bf14      	ite	ne
 8007e14:	2301      	movne	r3, #1
 8007e16:	2300      	moveq	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e0a6      	b.n	8007f70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_PWM_Start+0xb6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e30:	e023      	b.n	8007e7a <HAL_TIM_PWM_Start+0xfe>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Start+0xc6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e40:	e01b      	b.n	8007e7a <HAL_TIM_PWM_Start+0xfe>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_PWM_Start+0xd6>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e50:	e013      	b.n	8007e7a <HAL_TIM_PWM_Start+0xfe>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start+0xe6>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e60:	e00b      	b.n	8007e7a <HAL_TIM_PWM_Start+0xfe>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start+0xf6>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e70:	e003      	b.n	8007e7a <HAL_TIM_PWM_Start+0xfe>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fc9c 	bl	80097c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8007f78 <HAL_TIM_PWM_Start+0x1fc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d018      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0x148>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a39      	ldr	r2, [pc, #228]	@ (8007f7c <HAL_TIM_PWM_Start+0x200>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d013      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0x148>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a37      	ldr	r2, [pc, #220]	@ (8007f80 <HAL_TIM_PWM_Start+0x204>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0x148>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a36      	ldr	r2, [pc, #216]	@ (8007f84 <HAL_TIM_PWM_Start+0x208>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0x148>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a34      	ldr	r2, [pc, #208]	@ (8007f88 <HAL_TIM_PWM_Start+0x20c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0x148>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a33      	ldr	r2, [pc, #204]	@ (8007f8c <HAL_TIM_PWM_Start+0x210>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_PWM_Start+0x14c>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_TIM_PWM_Start+0x14e>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007edc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a25      	ldr	r2, [pc, #148]	@ (8007f78 <HAL_TIM_PWM_Start+0x1fc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d022      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef0:	d01d      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a26      	ldr	r2, [pc, #152]	@ (8007f90 <HAL_TIM_PWM_Start+0x214>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d018      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a24      	ldr	r2, [pc, #144]	@ (8007f94 <HAL_TIM_PWM_Start+0x218>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a23      	ldr	r2, [pc, #140]	@ (8007f98 <HAL_TIM_PWM_Start+0x21c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00e      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a19      	ldr	r2, [pc, #100]	@ (8007f7c <HAL_TIM_PWM_Start+0x200>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d009      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a18      	ldr	r2, [pc, #96]	@ (8007f80 <HAL_TIM_PWM_Start+0x204>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x1b2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a18      	ldr	r2, [pc, #96]	@ (8007f8c <HAL_TIM_PWM_Start+0x210>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d115      	bne.n	8007f5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	4b19      	ldr	r3, [pc, #100]	@ (8007f9c <HAL_TIM_PWM_Start+0x220>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b06      	cmp	r3, #6
 8007f3e:	d015      	beq.n	8007f6c <HAL_TIM_PWM_Start+0x1f0>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f46:	d011      	beq.n	8007f6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f58:	e008      	b.n	8007f6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0201 	orr.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e000      	b.n	8007f6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	40013400 	.word	0x40013400
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40014400 	.word	0x40014400
 8007f88:	40014800 	.word	0x40014800
 8007f8c:	40015000 	.word	0x40015000
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	00010007 	.word	0x00010007

08007fa0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e04c      	b.n	800804e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d111      	bne.n	8007fe4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 fc1f 	bl	800980c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8008058 <HAL_TIM_OnePulse_Init+0xb8>)
 8007fda:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f000 ff68 	bl	8008ecc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0208 	bic.w	r2, r2, #8
 800800a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	0800805d 	.word	0x0800805d

0800805c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008080:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008088:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008090:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008098:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d108      	bne.n	80080b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080a6:	7b7b      	ldrb	r3, [r7, #13]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d102      	bne.n	80080b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080ac:	7b3b      	ldrb	r3, [r7, #12]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d001      	beq.n	80080b6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e059      	b.n	800816a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2202      	movs	r2, #2
 80080ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2202      	movs	r2, #2
 80080d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0202 	orr.w	r2, r2, #2
 80080e4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0204 	orr.w	r2, r2, #4
 80080f4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2201      	movs	r2, #1
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fb5e 	bl	80097c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	2104      	movs	r1, #4
 800810c:	4618      	mov	r0, r3
 800810e:	f001 fb57 	bl	80097c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a17      	ldr	r2, [pc, #92]	@ (8008174 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d018      	beq.n	800814e <HAL_TIM_OnePulse_Start_IT+0xde>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a15      	ldr	r2, [pc, #84]	@ (8008178 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a14      	ldr	r2, [pc, #80]	@ (800817c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00e      	beq.n	800814e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a12      	ldr	r2, [pc, #72]	@ (8008180 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d009      	beq.n	800814e <HAL_TIM_OnePulse_Start_IT+0xde>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a11      	ldr	r2, [pc, #68]	@ (8008184 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d004      	beq.n	800814e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a0f      	ldr	r2, [pc, #60]	@ (8008188 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d101      	bne.n	8008152 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008166:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40013400 	.word	0x40013400
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800
 8008188:	40015000 	.word	0x40015000

0800818c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e0a2      	b.n	80082e6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d111      	bne.n	80081d0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fb29 	bl	800980c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a4a      	ldr	r2, [pc, #296]	@ (80082f0 <HAL_TIM_Encoder_Init+0x164>)
 80081c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f000 fe68 	bl	8008ecc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	4313      	orrs	r3, r2
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008242:	f023 030c 	bic.w	r3, r3, #12
 8008246:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800824e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4313      	orrs	r3, r2
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	011a      	lsls	r2, r3, #4
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	4313      	orrs	r3, r2
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008280:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008288:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	4313      	orrs	r3, r2
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	08003f71 	.word	0x08003f71

080082f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008304:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800830c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008314:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800831c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d102      	bne.n	8008330 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800832a:	7b7b      	ldrb	r3, [r7, #13]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d001      	beq.n	8008334 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e069      	b.n	8008408 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008344:	e031      	b.n	80083aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d110      	bne.n	800836e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d102      	bne.n	8008358 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008352:	7b3b      	ldrb	r3, [r7, #12]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d001      	beq.n	800835c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e055      	b.n	8008408 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800836c:	e01d      	b.n	80083aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d108      	bne.n	8008386 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d105      	bne.n	8008386 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800837a:	7b7b      	ldrb	r3, [r7, #13]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d102      	bne.n	8008386 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008380:	7b3b      	ldrb	r3, [r7, #12]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d001      	beq.n	800838a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e03e      	b.n	8008408 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <HAL_TIM_Encoder_Start+0xc4>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d008      	beq.n	80083c8 <HAL_TIM_Encoder_Start+0xd4>
 80083b6:	e00f      	b.n	80083d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2201      	movs	r2, #1
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 f9fd 	bl	80097c0 <TIM_CCxChannelCmd>
      break;
 80083c6:	e016      	b.n	80083f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2201      	movs	r2, #1
 80083ce:	2104      	movs	r1, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f9f5 	bl	80097c0 <TIM_CCxChannelCmd>
      break;
 80083d6:	e00e      	b.n	80083f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2201      	movs	r2, #1
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 f9ed 	bl	80097c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2201      	movs	r2, #1
 80083ec:	2104      	movs	r1, #4
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 f9e6 	bl	80097c0 <TIM_CCxChannelCmd>
      break;
 80083f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d026      	beq.n	8008480 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d021      	beq.n	8008480 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0202 	mvn.w	r2, #2
 8008444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
 8008464:	e009      	b.n	800847a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d026      	beq.n	80084d8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	d021      	beq.n	80084d8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0204 	mvn.w	r2, #4
 800849c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
 80084bc:	e009      	b.n	80084d2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d026      	beq.n	8008530 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d021      	beq.n	8008530 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f06f 0208 	mvn.w	r2, #8
 80084f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2204      	movs	r2, #4
 80084fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
 8008514:	e009      	b.n	800852a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f003 0310 	and.w	r3, r3, #16
 8008536:	2b00      	cmp	r3, #0
 8008538:	d026      	beq.n	8008588 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	d021      	beq.n	8008588 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0210 	mvn.w	r2, #16
 800854c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2208      	movs	r2, #8
 8008552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
 800856c:	e009      	b.n	8008582 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00e      	beq.n	80085b0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0201 	mvn.w	r2, #1
 80085a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d104      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80085d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00e      	beq.n	800865a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f06f 0220 	mvn.w	r2, #32
 800864e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800869e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80086c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80086ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800871e:	2302      	movs	r3, #2
 8008720:	e0ff      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b14      	cmp	r3, #20
 800872e:	f200 80f0 	bhi.w	8008912 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	0800878d 	.word	0x0800878d
 800873c:	08008913 	.word	0x08008913
 8008740:	08008913 	.word	0x08008913
 8008744:	08008913 	.word	0x08008913
 8008748:	080087cd 	.word	0x080087cd
 800874c:	08008913 	.word	0x08008913
 8008750:	08008913 	.word	0x08008913
 8008754:	08008913 	.word	0x08008913
 8008758:	0800880f 	.word	0x0800880f
 800875c:	08008913 	.word	0x08008913
 8008760:	08008913 	.word	0x08008913
 8008764:	08008913 	.word	0x08008913
 8008768:	0800884f 	.word	0x0800884f
 800876c:	08008913 	.word	0x08008913
 8008770:	08008913 	.word	0x08008913
 8008774:	08008913 	.word	0x08008913
 8008778:	08008891 	.word	0x08008891
 800877c:	08008913 	.word	0x08008913
 8008780:	08008913 	.word	0x08008913
 8008784:	08008913 	.word	0x08008913
 8008788:	080088d1 	.word	0x080088d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fc4e 	bl	8009034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0208 	orr.w	r2, r2, #8
 80087a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6999      	ldr	r1, [r3, #24]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	619a      	str	r2, [r3, #24]
      break;
 80087ca:	e0a5      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fcc8 	bl	8009168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]
      break;
 800880c:	e084      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fd3b 	bl	8009290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0208 	orr.w	r2, r2, #8
 8008828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0204 	bic.w	r2, r2, #4
 8008838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	61da      	str	r2, [r3, #28]
      break;
 800884c:	e064      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fdad 	bl	80093b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	021a      	lsls	r2, r3, #8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	61da      	str	r2, [r3, #28]
      break;
 800888e:	e043      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fe20 	bl	80094dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088ce:	e023      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fe6a 	bl	80095b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008910:	e002      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]
      break;
 8008916:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop

0800892c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIM_ConfigClockSource+0x1c>
 8008944:	2302      	movs	r3, #2
 8008946:	e0f6      	b.n	8008b36 <HAL_TIM_ConfigClockSource+0x20a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008966:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800896a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a6f      	ldr	r2, [pc, #444]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x214>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f000 80c1 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008988:	4a6d      	ldr	r2, [pc, #436]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x214>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f200 80c6 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008990:	4a6c      	ldr	r2, [pc, #432]	@ (8008b44 <HAL_TIM_ConfigClockSource+0x218>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f000 80b9 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008998:	4a6a      	ldr	r2, [pc, #424]	@ (8008b44 <HAL_TIM_ConfigClockSource+0x218>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f200 80be 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089a0:	4a69      	ldr	r2, [pc, #420]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f000 80b1 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089a8:	4a67      	ldr	r2, [pc, #412]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f200 80b6 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089b0:	4a66      	ldr	r2, [pc, #408]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x220>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f000 80a9 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089b8:	4a64      	ldr	r2, [pc, #400]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x220>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f200 80ae 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089c0:	4a63      	ldr	r2, [pc, #396]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x224>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	f000 80a1 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089c8:	4a61      	ldr	r2, [pc, #388]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x224>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f200 80a6 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089d0:	4a60      	ldr	r2, [pc, #384]	@ (8008b54 <HAL_TIM_ConfigClockSource+0x228>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	f000 8099 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089d8:	4a5e      	ldr	r2, [pc, #376]	@ (8008b54 <HAL_TIM_ConfigClockSource+0x228>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	f200 809e 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089e4:	f000 8091 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089ec:	f200 8096 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80089f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f4:	f000 8089 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 80089f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fc:	f200 808e 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a04:	d03e      	beq.n	8008a84 <HAL_TIM_ConfigClockSource+0x158>
 8008a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0a:	f200 8087 	bhi.w	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a12:	f000 8086 	beq.w	8008b22 <HAL_TIM_ConfigClockSource+0x1f6>
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1a:	d87f      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a1c:	2b70      	cmp	r3, #112	@ 0x70
 8008a1e:	d01a      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x12a>
 8008a20:	2b70      	cmp	r3, #112	@ 0x70
 8008a22:	d87b      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a24:	2b60      	cmp	r3, #96	@ 0x60
 8008a26:	d050      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0x19e>
 8008a28:	2b60      	cmp	r3, #96	@ 0x60
 8008a2a:	d877      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a2c:	2b50      	cmp	r3, #80	@ 0x50
 8008a2e:	d03c      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x17e>
 8008a30:	2b50      	cmp	r3, #80	@ 0x50
 8008a32:	d873      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a34:	2b40      	cmp	r3, #64	@ 0x40
 8008a36:	d058      	beq.n	8008aea <HAL_TIM_ConfigClockSource+0x1be>
 8008a38:	2b40      	cmp	r3, #64	@ 0x40
 8008a3a:	d86f      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a3c:	2b30      	cmp	r3, #48	@ 0x30
 8008a3e:	d064      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008a40:	2b30      	cmp	r3, #48	@ 0x30
 8008a42:	d86b      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d060      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d867      	bhi.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d05c      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	d05a      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0x1de>
 8008a54:	e062      	b.n	8008b1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a66:	f000 fe8b 	bl	8009780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	609a      	str	r2, [r3, #8]
      break;
 8008a82:	e04f      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a94:	f000 fe74 	bl	8009780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689a      	ldr	r2, [r3, #8]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aa6:	609a      	str	r2, [r3, #8]
      break;
 8008aa8:	e03c      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f000 fde6 	bl	8009688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2150      	movs	r1, #80	@ 0x50
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fe3f 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008ac8:	e02c      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f000 fe05 	bl	80096e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2160      	movs	r1, #96	@ 0x60
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fe2f 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008ae8:	e01c      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af6:	461a      	mov	r2, r3
 8008af8:	f000 fdc6 	bl	8009688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2140      	movs	r1, #64	@ 0x40
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fe1f 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008b08:	e00c      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f000 fe16 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008b1a:	e003      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b20:	e000      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	00100070 	.word	0x00100070
 8008b44:	00100060 	.word	0x00100060
 8008b48:	00100050 	.word	0x00100050
 8008b4c:	00100040 	.word	0x00100040
 8008b50:	00100030 	.word	0x00100030
 8008b54:	00100020 	.word	0x00100020

08008b58 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	460b      	mov	r3, r1
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e14a      	b.n	8008ebe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	f040 80dd 	bne.w	8008df0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008c36:	7afb      	ldrb	r3, [r7, #11]
 8008c38:	2b1f      	cmp	r3, #31
 8008c3a:	f200 80d6 	bhi.w	8008dea <HAL_TIM_RegisterCallback+0x1de>
 8008c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <HAL_TIM_RegisterCallback+0x38>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008cc5 	.word	0x08008cc5
 8008c48:	08008ccd 	.word	0x08008ccd
 8008c4c:	08008cd5 	.word	0x08008cd5
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008ce5 	.word	0x08008ce5
 8008c58:	08008ced 	.word	0x08008ced
 8008c5c:	08008cf5 	.word	0x08008cf5
 8008c60:	08008cfd 	.word	0x08008cfd
 8008c64:	08008d05 	.word	0x08008d05
 8008c68:	08008d0d 	.word	0x08008d0d
 8008c6c:	08008d15 	.word	0x08008d15
 8008c70:	08008d1d 	.word	0x08008d1d
 8008c74:	08008d25 	.word	0x08008d25
 8008c78:	08008d2d 	.word	0x08008d2d
 8008c7c:	08008d37 	.word	0x08008d37
 8008c80:	08008d41 	.word	0x08008d41
 8008c84:	08008d4b 	.word	0x08008d4b
 8008c88:	08008d55 	.word	0x08008d55
 8008c8c:	08008d5f 	.word	0x08008d5f
 8008c90:	08008d69 	.word	0x08008d69
 8008c94:	08008d73 	.word	0x08008d73
 8008c98:	08008d7d 	.word	0x08008d7d
 8008c9c:	08008d87 	.word	0x08008d87
 8008ca0:	08008d91 	.word	0x08008d91
 8008ca4:	08008d9b 	.word	0x08008d9b
 8008ca8:	08008da5 	.word	0x08008da5
 8008cac:	08008daf 	.word	0x08008daf
 8008cb0:	08008db9 	.word	0x08008db9
 8008cb4:	08008dc3 	.word	0x08008dc3
 8008cb8:	08008dcd 	.word	0x08008dcd
 8008cbc:	08008dd7 	.word	0x08008dd7
 8008cc0:	08008de1 	.word	0x08008de1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008cca:	e0f7      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008cd2:	e0f3      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008cda:	e0ef      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ce2:	e0eb      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008cea:	e0e7      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008cf2:	e0e3      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008cfa:	e0df      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008d02:	e0db      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008d0a:	e0d7      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008d12:	e0d3      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008d1a:	e0cf      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008d22:	e0cb      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008d2a:	e0c7      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008d34:	e0c2      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008d3e:	e0bd      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008d48:	e0b8      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008d52:	e0b3      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008d5c:	e0ae      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008d66:	e0a9      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008d70:	e0a4      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008d7a:	e09f      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008d84:	e09a      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008d8e:	e095      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008d98:	e090      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008da2:	e08b      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008dac:	e086      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008db6:	e081      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008dc0:	e07c      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008dca:	e077      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008dd4:	e072      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008dde:	e06d      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008de8:	e068      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
        break;
 8008dee:	e065      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d15d      	bne.n	8008eb8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	2b0d      	cmp	r3, #13
 8008e00:	d857      	bhi.n	8008eb2 <HAL_TIM_RegisterCallback+0x2a6>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <HAL_TIM_RegisterCallback+0x1fc>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e41 	.word	0x08008e41
 8008e0c:	08008e49 	.word	0x08008e49
 8008e10:	08008e51 	.word	0x08008e51
 8008e14:	08008e59 	.word	0x08008e59
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e71 	.word	0x08008e71
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e89 	.word	0x08008e89
 8008e30:	08008e91 	.word	0x08008e91
 8008e34:	08008e99 	.word	0x08008e99
 8008e38:	08008ea1 	.word	0x08008ea1
 8008e3c:	08008ea9 	.word	0x08008ea9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008e46:	e039      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008e4e:	e035      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008e56:	e031      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008e5e:	e02d      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008e66:	e029      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008e6e:	e025      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008e76:	e021      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008e7e:	e01d      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008e86:	e019      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008e8e:	e015      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008e96:	e011      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008e9e:	e00d      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008ea6:	e009      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008eb0:	e004      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8008eb6:	e001      	b.n	8008ebc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop

08008ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a4c      	ldr	r2, [pc, #304]	@ (8009010 <TIM_Base_SetConfig+0x144>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d017      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eea:	d013      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a49      	ldr	r2, [pc, #292]	@ (8009014 <TIM_Base_SetConfig+0x148>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00f      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a48      	ldr	r2, [pc, #288]	@ (8009018 <TIM_Base_SetConfig+0x14c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a47      	ldr	r2, [pc, #284]	@ (800901c <TIM_Base_SetConfig+0x150>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a46      	ldr	r2, [pc, #280]	@ (8009020 <TIM_Base_SetConfig+0x154>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_Base_SetConfig+0x48>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a45      	ldr	r2, [pc, #276]	@ (8009024 <TIM_Base_SetConfig+0x158>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d108      	bne.n	8008f26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a39      	ldr	r2, [pc, #228]	@ (8009010 <TIM_Base_SetConfig+0x144>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d023      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f34:	d01f      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a36      	ldr	r2, [pc, #216]	@ (8009014 <TIM_Base_SetConfig+0x148>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01b      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a35      	ldr	r2, [pc, #212]	@ (8009018 <TIM_Base_SetConfig+0x14c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d017      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a34      	ldr	r2, [pc, #208]	@ (800901c <TIM_Base_SetConfig+0x150>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a33      	ldr	r2, [pc, #204]	@ (8009020 <TIM_Base_SetConfig+0x154>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00f      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a33      	ldr	r2, [pc, #204]	@ (8009028 <TIM_Base_SetConfig+0x15c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00b      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a32      	ldr	r2, [pc, #200]	@ (800902c <TIM_Base_SetConfig+0x160>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d007      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a31      	ldr	r2, [pc, #196]	@ (8009030 <TIM_Base_SetConfig+0x164>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d003      	beq.n	8008f76 <TIM_Base_SetConfig+0xaa>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2c      	ldr	r2, [pc, #176]	@ (8009024 <TIM_Base_SetConfig+0x158>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d108      	bne.n	8008f88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a18      	ldr	r2, [pc, #96]	@ (8009010 <TIM_Base_SetConfig+0x144>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d013      	beq.n	8008fdc <TIM_Base_SetConfig+0x110>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8009020 <TIM_Base_SetConfig+0x154>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00f      	beq.n	8008fdc <TIM_Base_SetConfig+0x110>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8009028 <TIM_Base_SetConfig+0x15c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00b      	beq.n	8008fdc <TIM_Base_SetConfig+0x110>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a19      	ldr	r2, [pc, #100]	@ (800902c <TIM_Base_SetConfig+0x160>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d007      	beq.n	8008fdc <TIM_Base_SetConfig+0x110>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a18      	ldr	r2, [pc, #96]	@ (8009030 <TIM_Base_SetConfig+0x164>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_Base_SetConfig+0x110>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a13      	ldr	r2, [pc, #76]	@ (8009024 <TIM_Base_SetConfig+0x158>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d103      	bne.n	8008fe4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d105      	bne.n	8009002 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f023 0201 	bic.w	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	611a      	str	r2, [r3, #16]
  }
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40012c00 	.word	0x40012c00
 8009014:	40000400 	.word	0x40000400
 8009018:	40000800 	.word	0x40000800
 800901c:	40000c00 	.word	0x40000c00
 8009020:	40013400 	.word	0x40013400
 8009024:	40015000 	.word	0x40015000
 8009028:	40014000 	.word	0x40014000
 800902c:	40014400 	.word	0x40014400
 8009030:	40014800 	.word	0x40014800

08009034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	f023 0201 	bic.w	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0303 	bic.w	r3, r3, #3
 800906e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f023 0302 	bic.w	r3, r3, #2
 8009080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a30      	ldr	r2, [pc, #192]	@ (8009150 <TIM_OC1_SetConfig+0x11c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <TIM_OC1_SetConfig+0x88>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a2f      	ldr	r2, [pc, #188]	@ (8009154 <TIM_OC1_SetConfig+0x120>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d00f      	beq.n	80090bc <TIM_OC1_SetConfig+0x88>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a2e      	ldr	r2, [pc, #184]	@ (8009158 <TIM_OC1_SetConfig+0x124>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00b      	beq.n	80090bc <TIM_OC1_SetConfig+0x88>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a2d      	ldr	r2, [pc, #180]	@ (800915c <TIM_OC1_SetConfig+0x128>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d007      	beq.n	80090bc <TIM_OC1_SetConfig+0x88>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009160 <TIM_OC1_SetConfig+0x12c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC1_SetConfig+0x88>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009164 <TIM_OC1_SetConfig+0x130>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d10c      	bne.n	80090d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0308 	bic.w	r3, r3, #8
 80090c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f023 0304 	bic.w	r3, r3, #4
 80090d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <TIM_OC1_SetConfig+0x11c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <TIM_OC1_SetConfig+0xd2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009154 <TIM_OC1_SetConfig+0x120>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00f      	beq.n	8009106 <TIM_OC1_SetConfig+0xd2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009158 <TIM_OC1_SetConfig+0x124>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_OC1_SetConfig+0xd2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a1a      	ldr	r2, [pc, #104]	@ (800915c <TIM_OC1_SetConfig+0x128>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_OC1_SetConfig+0xd2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <TIM_OC1_SetConfig+0x12c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_OC1_SetConfig+0xd2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a18      	ldr	r2, [pc, #96]	@ (8009164 <TIM_OC1_SetConfig+0x130>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d111      	bne.n	800912a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800910c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	621a      	str	r2, [r3, #32]
}
 8009144:	bf00      	nop
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	40012c00 	.word	0x40012c00
 8009154:	40013400 	.word	0x40013400
 8009158:	40014000 	.word	0x40014000
 800915c:	40014400 	.word	0x40014400
 8009160:	40014800 	.word	0x40014800
 8009164:	40015000 	.word	0x40015000

08009168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	f023 0210 	bic.w	r2, r3, #16
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800919a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	021b      	lsls	r3, r3, #8
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f023 0320 	bic.w	r3, r3, #32
 80091b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a2c      	ldr	r2, [pc, #176]	@ (8009278 <TIM_OC2_SetConfig+0x110>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_OC2_SetConfig+0x74>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a2b      	ldr	r2, [pc, #172]	@ (800927c <TIM_OC2_SetConfig+0x114>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_OC2_SetConfig+0x74>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009280 <TIM_OC2_SetConfig+0x118>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d10d      	bne.n	80091f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009278 <TIM_OC2_SetConfig+0x110>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d013      	beq.n	8009228 <TIM_OC2_SetConfig+0xc0>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1e      	ldr	r2, [pc, #120]	@ (800927c <TIM_OC2_SetConfig+0x114>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00f      	beq.n	8009228 <TIM_OC2_SetConfig+0xc0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a1e      	ldr	r2, [pc, #120]	@ (8009284 <TIM_OC2_SetConfig+0x11c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00b      	beq.n	8009228 <TIM_OC2_SetConfig+0xc0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1d      	ldr	r2, [pc, #116]	@ (8009288 <TIM_OC2_SetConfig+0x120>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d007      	beq.n	8009228 <TIM_OC2_SetConfig+0xc0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1c      	ldr	r2, [pc, #112]	@ (800928c <TIM_OC2_SetConfig+0x124>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_OC2_SetConfig+0xc0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a17      	ldr	r2, [pc, #92]	@ (8009280 <TIM_OC2_SetConfig+0x118>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d113      	bne.n	8009250 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800922e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40013400 	.word	0x40013400
 8009280:	40015000 	.word	0x40015000
 8009284:	40014000 	.word	0x40014000
 8009288:	40014400 	.word	0x40014400
 800928c:	40014800 	.word	0x40014800

08009290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0303 	bic.w	r3, r3, #3
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a2b      	ldr	r2, [pc, #172]	@ (800939c <TIM_OC3_SetConfig+0x10c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d007      	beq.n	8009302 <TIM_OC3_SetConfig+0x72>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2a      	ldr	r2, [pc, #168]	@ (80093a0 <TIM_OC3_SetConfig+0x110>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_OC3_SetConfig+0x72>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a29      	ldr	r2, [pc, #164]	@ (80093a4 <TIM_OC3_SetConfig+0x114>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d10d      	bne.n	800931e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	021b      	lsls	r3, r3, #8
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800931c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a1e      	ldr	r2, [pc, #120]	@ (800939c <TIM_OC3_SetConfig+0x10c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d013      	beq.n	800934e <TIM_OC3_SetConfig+0xbe>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a1d      	ldr	r2, [pc, #116]	@ (80093a0 <TIM_OC3_SetConfig+0x110>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00f      	beq.n	800934e <TIM_OC3_SetConfig+0xbe>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <TIM_OC3_SetConfig+0x118>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00b      	beq.n	800934e <TIM_OC3_SetConfig+0xbe>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a1c      	ldr	r2, [pc, #112]	@ (80093ac <TIM_OC3_SetConfig+0x11c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d007      	beq.n	800934e <TIM_OC3_SetConfig+0xbe>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a1b      	ldr	r2, [pc, #108]	@ (80093b0 <TIM_OC3_SetConfig+0x120>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d003      	beq.n	800934e <TIM_OC3_SetConfig+0xbe>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a16      	ldr	r2, [pc, #88]	@ (80093a4 <TIM_OC3_SetConfig+0x114>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d113      	bne.n	8009376 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800935c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	4313      	orrs	r3, r2
 8009374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	621a      	str	r2, [r3, #32]
}
 8009390:	bf00      	nop
 8009392:	371c      	adds	r7, #28
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40013400 	.word	0x40013400
 80093a4:	40015000 	.word	0x40015000
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	031b      	lsls	r3, r3, #12
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a2c      	ldr	r2, [pc, #176]	@ (80094c4 <TIM_OC4_SetConfig+0x110>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d007      	beq.n	8009428 <TIM_OC4_SetConfig+0x74>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a2b      	ldr	r2, [pc, #172]	@ (80094c8 <TIM_OC4_SetConfig+0x114>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <TIM_OC4_SetConfig+0x74>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a2a      	ldr	r2, [pc, #168]	@ (80094cc <TIM_OC4_SetConfig+0x118>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d10d      	bne.n	8009444 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800942e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	031b      	lsls	r3, r3, #12
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4313      	orrs	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1f      	ldr	r2, [pc, #124]	@ (80094c4 <TIM_OC4_SetConfig+0x110>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <TIM_OC4_SetConfig+0xc0>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <TIM_OC4_SetConfig+0x114>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <TIM_OC4_SetConfig+0xc0>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a1e      	ldr	r2, [pc, #120]	@ (80094d0 <TIM_OC4_SetConfig+0x11c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_OC4_SetConfig+0xc0>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a1d      	ldr	r2, [pc, #116]	@ (80094d4 <TIM_OC4_SetConfig+0x120>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_OC4_SetConfig+0xc0>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1c      	ldr	r2, [pc, #112]	@ (80094d8 <TIM_OC4_SetConfig+0x124>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC4_SetConfig+0xc0>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a17      	ldr	r2, [pc, #92]	@ (80094cc <TIM_OC4_SetConfig+0x118>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d113      	bne.n	800949c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800947a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009482:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	019b      	lsls	r3, r3, #6
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	019b      	lsls	r3, r3, #6
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	4313      	orrs	r3, r2
 800949a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	40012c00 	.word	0x40012c00
 80094c8:	40013400 	.word	0x40013400
 80094cc:	40015000 	.word	0x40015000
 80094d0:	40014000 	.word	0x40014000
 80094d4:	40014400 	.word	0x40014400
 80094d8:	40014800 	.word	0x40014800

080094dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800950a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	4313      	orrs	r3, r2
 800952c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a19      	ldr	r2, [pc, #100]	@ (8009598 <TIM_OC5_SetConfig+0xbc>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <TIM_OC5_SetConfig+0x82>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a18      	ldr	r2, [pc, #96]	@ (800959c <TIM_OC5_SetConfig+0xc0>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00f      	beq.n	800955e <TIM_OC5_SetConfig+0x82>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a17      	ldr	r2, [pc, #92]	@ (80095a0 <TIM_OC5_SetConfig+0xc4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00b      	beq.n	800955e <TIM_OC5_SetConfig+0x82>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a16      	ldr	r2, [pc, #88]	@ (80095a4 <TIM_OC5_SetConfig+0xc8>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d007      	beq.n	800955e <TIM_OC5_SetConfig+0x82>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a15      	ldr	r2, [pc, #84]	@ (80095a8 <TIM_OC5_SetConfig+0xcc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d003      	beq.n	800955e <TIM_OC5_SetConfig+0x82>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a14      	ldr	r2, [pc, #80]	@ (80095ac <TIM_OC5_SetConfig+0xd0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d109      	bne.n	8009572 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	621a      	str	r2, [r3, #32]
}
 800958c:	bf00      	nop
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40013400 	.word	0x40013400
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40014400 	.word	0x40014400
 80095a8:	40014800 	.word	0x40014800
 80095ac:	40015000 	.word	0x40015000

080095b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80095f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	051b      	lsls	r3, r3, #20
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4313      	orrs	r3, r2
 8009602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a1a      	ldr	r2, [pc, #104]	@ (8009670 <TIM_OC6_SetConfig+0xc0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d013      	beq.n	8009634 <TIM_OC6_SetConfig+0x84>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a19      	ldr	r2, [pc, #100]	@ (8009674 <TIM_OC6_SetConfig+0xc4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00f      	beq.n	8009634 <TIM_OC6_SetConfig+0x84>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a18      	ldr	r2, [pc, #96]	@ (8009678 <TIM_OC6_SetConfig+0xc8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d00b      	beq.n	8009634 <TIM_OC6_SetConfig+0x84>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a17      	ldr	r2, [pc, #92]	@ (800967c <TIM_OC6_SetConfig+0xcc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d007      	beq.n	8009634 <TIM_OC6_SetConfig+0x84>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <TIM_OC6_SetConfig+0xd0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_OC6_SetConfig+0x84>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <TIM_OC6_SetConfig+0xd4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d109      	bne.n	8009648 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800963a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	029b      	lsls	r3, r3, #10
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	621a      	str	r2, [r3, #32]
}
 8009662:	bf00      	nop
 8009664:	371c      	adds	r7, #28
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40012c00 	.word	0x40012c00
 8009674:	40013400 	.word	0x40013400
 8009678:	40014000 	.word	0x40014000
 800967c:	40014400 	.word	0x40014400
 8009680:	40014800 	.word	0x40014800
 8009684:	40015000 	.word	0x40015000

08009688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f023 0201 	bic.w	r2, r3, #1
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 030a 	bic.w	r3, r3, #10
 80096c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	621a      	str	r2, [r3, #32]
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b087      	sub	sp, #28
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f023 0210 	bic.w	r2, r3, #16
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	031b      	lsls	r3, r3, #12
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800975c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	f043 0307 	orr.w	r3, r3, #7
 800976c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	609a      	str	r2, [r3, #8]
}
 8009774:	bf00      	nop
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800979a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	021a      	lsls	r2, r3, #8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	431a      	orrs	r2, r3
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	609a      	str	r2, [r3, #8]
}
 80097b4:	bf00      	nop
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f003 031f 	and.w	r3, r3, #31
 80097d2:	2201      	movs	r2, #1
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a1a      	ldr	r2, [r3, #32]
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f003 031f 	and.w	r3, r3, #31
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	431a      	orrs	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	621a      	str	r2, [r3, #32]
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a26      	ldr	r2, [pc, #152]	@ (80098b0 <TIM_ResetCallback+0xa4>)
 8009818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a25      	ldr	r2, [pc, #148]	@ (80098b4 <TIM_ResetCallback+0xa8>)
 8009820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a24      	ldr	r2, [pc, #144]	@ (80098b8 <TIM_ResetCallback+0xac>)
 8009828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a23      	ldr	r2, [pc, #140]	@ (80098bc <TIM_ResetCallback+0xb0>)
 8009830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a22      	ldr	r2, [pc, #136]	@ (80098c0 <TIM_ResetCallback+0xb4>)
 8009838:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a21      	ldr	r2, [pc, #132]	@ (80098c4 <TIM_ResetCallback+0xb8>)
 8009840:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a20      	ldr	r2, [pc, #128]	@ (80098c8 <TIM_ResetCallback+0xbc>)
 8009848:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a1f      	ldr	r2, [pc, #124]	@ (80098cc <TIM_ResetCallback+0xc0>)
 8009850:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a1e      	ldr	r2, [pc, #120]	@ (80098d0 <TIM_ResetCallback+0xc4>)
 8009858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a1d      	ldr	r2, [pc, #116]	@ (80098d4 <TIM_ResetCallback+0xc8>)
 8009860:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a1c      	ldr	r2, [pc, #112]	@ (80098d8 <TIM_ResetCallback+0xcc>)
 8009868:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a1b      	ldr	r2, [pc, #108]	@ (80098dc <TIM_ResetCallback+0xd0>)
 8009870:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a1a      	ldr	r2, [pc, #104]	@ (80098e0 <TIM_ResetCallback+0xd4>)
 8009878:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a19      	ldr	r2, [pc, #100]	@ (80098e4 <TIM_ResetCallback+0xd8>)
 8009880:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a18      	ldr	r2, [pc, #96]	@ (80098e8 <TIM_ResetCallback+0xdc>)
 8009888:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a17      	ldr	r2, [pc, #92]	@ (80098ec <TIM_ResetCallback+0xe0>)
 8009890:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a16      	ldr	r2, [pc, #88]	@ (80098f0 <TIM_ResetCallback+0xe4>)
 8009898:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <TIM_ResetCallback+0xe8>)
 80098a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	08002aa1 	.word	0x08002aa1
 80098b4:	08008b59 	.word	0x08008b59
 80098b8:	08008bd1 	.word	0x08008bd1
 80098bc:	08008be5 	.word	0x08008be5
 80098c0:	08008b81 	.word	0x08008b81
 80098c4:	08008b95 	.word	0x08008b95
 80098c8:	08008b6d 	.word	0x08008b6d
 80098cc:	08008ba9 	.word	0x08008ba9
 80098d0:	08008bbd 	.word	0x08008bbd
 80098d4:	08008bf9 	.word	0x08008bf9
 80098d8:	08009b4d 	.word	0x08009b4d
 80098dc:	08009b61 	.word	0x08009b61
 80098e0:	08009b75 	.word	0x08009b75
 80098e4:	08009b89 	.word	0x08009b89
 80098e8:	08009b9d 	.word	0x08009b9d
 80098ec:	08009bb1 	.word	0x08009bb1
 80098f0:	08009bc5 	.word	0x08009bc5
 80098f4:	08009bd9 	.word	0x08009bd9

080098f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800990c:	2302      	movs	r3, #2
 800990e:	e074      	b.n	80099fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a34      	ldr	r2, [pc, #208]	@ (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d009      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a33      	ldr	r2, [pc, #204]	@ (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d004      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a31      	ldr	r2, [pc, #196]	@ (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d108      	bne.n	8009960 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4313      	orrs	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800996a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a21      	ldr	r2, [pc, #132]	@ (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d022      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009990:	d01d      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a1f      	ldr	r2, [pc, #124]	@ (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d018      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a1c      	ldr	r2, [pc, #112]	@ (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00e      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a15      	ldr	r2, [pc, #84]	@ (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a11      	ldr	r2, [pc, #68]	@ (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d10c      	bne.n	80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	40012c00 	.word	0x40012c00
 8009a0c:	40013400 	.word	0x40013400
 8009a10:	40015000 	.word	0x40015000
 8009a14:	40000400 	.word	0x40000400
 8009a18:	40000800 	.word	0x40000800
 8009a1c:	40000c00 	.word	0x40000c00
 8009a20:	40014000 	.word	0x40014000

08009a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e078      	b.n	8009b32 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	041b      	lsls	r3, r3, #16
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a1c      	ldr	r2, [pc, #112]	@ (8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d009      	beq.n	8009ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d004      	beq.n	8009ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a19      	ldr	r2, [pc, #100]	@ (8009b48 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d11c      	bne.n	8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af0:	051b      	lsls	r3, r3, #20
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	40012c00 	.word	0x40012c00
 8009b44:	40013400 	.word	0x40013400
 8009b48:	40015000 	.word	0x40015000

08009b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e050      	b.n	8009ca0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d114      	bne.n	8009c32 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fd5b 	bl	800a6cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a21      	ldr	r2, [pc, #132]	@ (8009ca8 <HAL_UART_Init+0xbc>)
 8009c24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2224      	movs	r2, #36	@ 0x24
 8009c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 f888 	bl	800ad68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fd89 	bl	800a770 <UART_SetConfig>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e01b      	b.n	8009ca0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f907 	bl	800aeac <UART_CheckIdleState>
 8009c9e:	4603      	mov	r3, r0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	08004209 	.word	0x08004209

08009cac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d109      	bne.n	8009cd8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e09c      	b.n	8009e12 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d16c      	bne.n	8009dbc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	2b0c      	cmp	r3, #12
 8009ce6:	d85e      	bhi.n	8009da6 <HAL_UART_RegisterCallback+0xfa>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <HAL_UART_RegisterCallback+0x44>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d25 	.word	0x08009d25
 8009cf4:	08009d2f 	.word	0x08009d2f
 8009cf8:	08009d39 	.word	0x08009d39
 8009cfc:	08009d43 	.word	0x08009d43
 8009d00:	08009d4d 	.word	0x08009d4d
 8009d04:	08009d57 	.word	0x08009d57
 8009d08:	08009d61 	.word	0x08009d61
 8009d0c:	08009d6b 	.word	0x08009d6b
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d7f 	.word	0x08009d7f
 8009d18:	08009d89 	.word	0x08009d89
 8009d1c:	08009d93 	.word	0x08009d93
 8009d20:	08009d9d 	.word	0x08009d9d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d2c:	e070      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d36:	e06b      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d40:	e066      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d4a:	e061      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d54:	e05c      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d5e:	e057      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d68:	e052      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d72:	e04d      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009d7c:	e048      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009d86:	e043      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009d90:	e03e      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d9a:	e039      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009da4:	e034      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	75fb      	strb	r3, [r7, #23]
        break;
 8009dba:	e029      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d11a      	bne.n	8009dfc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	2b0b      	cmp	r3, #11
 8009dca:	d002      	beq.n	8009dd2 <HAL_UART_RegisterCallback+0x126>
 8009dcc:	2b0c      	cmp	r3, #12
 8009dce:	d005      	beq.n	8009ddc <HAL_UART_RegisterCallback+0x130>
 8009dd0:	e009      	b.n	8009de6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009dda:	e019      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009de4:	e014      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
        break;
 8009dfa:	e009      	b.n	8009e10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	@ 0x28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d137      	bne.n	8009ea8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <HAL_UART_Receive_DMA+0x24>
 8009e3e:	88fb      	ldrh	r3, [r7, #6]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e030      	b.n	8009eaa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a18      	ldr	r2, [pc, #96]	@ (8009eb4 <HAL_UART_Receive_DMA+0x94>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d01f      	beq.n	8009e98 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d018      	beq.n	8009e98 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	613b      	str	r3, [r7, #16]
   return(result);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e84:	623b      	str	r3, [r7, #32]
 8009e86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	69f9      	ldr	r1, [r7, #28]
 8009e8a:	6a3a      	ldr	r2, [r7, #32]
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e6      	bne.n	8009e66 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f001 f91c 	bl	800b0dc <UART_Start_Receive_DMA>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	e000      	b.n	8009eaa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ea8:	2302      	movs	r3, #2
  }
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3728      	adds	r7, #40	@ 0x28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	40008000 	.word	0x40008000

08009eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b0ba      	sub	sp, #232	@ 0xe8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009ee2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11b      	bne.n	8009f2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d015      	beq.n	8009f2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8312 	beq.w	800a546 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
      }
      return;
 8009f2a:	e30c      	b.n	800a546 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 8129 	beq.w	800a188 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f3a:	4b90      	ldr	r3, [pc, #576]	@ (800a17c <HAL_UART_IRQHandler+0x2c4>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009f46:	4b8e      	ldr	r3, [pc, #568]	@ (800a180 <HAL_UART_IRQHandler+0x2c8>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 811c 	beq.w	800a188 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d011      	beq.n	8009f80 <HAL_UART_IRQHandler+0xc8>
 8009f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f76:	f043 0201 	orr.w	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d011      	beq.n	8009fb0 <HAL_UART_IRQHandler+0xf8>
 8009f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa6:	f043 0204 	orr.w	r2, r3, #4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d011      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x128>
 8009fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd6:	f043 0202 	orr.w	r2, r3, #2
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d017      	beq.n	800a01c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d105      	bne.n	800a004 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800a17c <HAL_UART_IRQHandler+0x2c4>)
 8009ffe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00b      	beq.n	800a01c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2208      	movs	r2, #8
 800a00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a012:	f043 0208 	orr.w	r2, r3, #8
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a024:	2b00      	cmp	r3, #0
 800a026:	d012      	beq.n	800a04e <HAL_UART_IRQHandler+0x196>
 800a028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a02c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00c      	beq.n	800a04e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a03c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a044:	f043 0220 	orr.w	r2, r3, #32
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8278 	beq.w	800a54a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d013      	beq.n	800a08e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d105      	bne.n	800a07e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a2:	2b40      	cmp	r3, #64	@ 0x40
 800a0a4:	d005      	beq.n	800a0b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d058      	beq.n	800a164 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f001 f8f9 	bl	800b2aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c2:	2b40      	cmp	r3, #64	@ 0x40
 800a0c4:	d148      	bne.n	800a158 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a0dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a0f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a0fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a10a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1d9      	bne.n	800a0c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d017      	beq.n	800a14c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a122:	4a18      	ldr	r2, [pc, #96]	@ (800a184 <HAL_UART_IRQHandler+0x2cc>)
 800a124:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fc f8c5 	bl	80062bc <HAL_DMA_Abort_IT>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01f      	beq.n	800a178 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a146:	4610      	mov	r0, r2
 800a148:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a14a:	e015      	b.n	800a178 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a156:	e00f      	b.n	800a178 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a162:	e009      	b.n	800a178 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a176:	e1e8      	b.n	800a54a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a178:	bf00      	nop
    return;
 800a17a:	e1e6      	b.n	800a54a <HAL_UART_IRQHandler+0x692>
 800a17c:	10000001 	.word	0x10000001
 800a180:	04000120 	.word	0x04000120
 800a184:	0800b575 	.word	0x0800b575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	f040 8176 	bne.w	800a47e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a196:	f003 0310 	and.w	r3, r3, #16
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 816f 	beq.w	800a47e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8168 	beq.w	800a47e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2210      	movs	r2, #16
 800a1b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	f040 80dc 	bne.w	800a37e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 80b1 	beq.w	800a340 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	f080 80a9 	bcs.w	800a340 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0320 	and.w	r3, r3, #32
 800a206:	2b00      	cmp	r3, #0
 800a208:	f040 8087 	bne.w	800a31a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a23a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1da      	bne.n	800a20c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3308      	adds	r3, #8
 800a276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a27a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a27e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a28c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e1      	bne.n	800a256 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3308      	adds	r3, #8
 800a298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a2a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a2b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a2bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e3      	bne.n	800a292 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2e8:	f023 0310 	bic.w	r3, r3, #16
 800a2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e4      	bne.n	800a2d8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a314:	4618      	mov	r0, r3
 800a316:	f7fb ff78 	bl	800620a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2202      	movs	r2, #2
 800a31e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a332:	b292      	uxth	r2, r2
 800a334:	1a8a      	subs	r2, r1, r2
 800a336:	b292      	uxth	r2, r2
 800a338:	4611      	mov	r1, r2
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a33e:	e106      	b.n	800a54e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a34a:	429a      	cmp	r2, r3
 800a34c:	f040 80ff 	bne.w	800a54e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0320 	and.w	r3, r3, #32
 800a35e:	2b20      	cmp	r3, #32
 800a360:	f040 80f5 	bne.w	800a54e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2202      	movs	r2, #2
 800a368:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a376:	4611      	mov	r1, r2
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
      return;
 800a37c:	e0e7      	b.n	800a54e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80d9 	beq.w	800a552 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a3a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80d4 	beq.w	800a552 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3d4:	e841 2300 	strex	r3, r2, [r1]
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e4      	bne.n	800a3aa <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3f6:	f023 0301 	bic.w	r3, r3, #1
 800a3fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a408:	633a      	str	r2, [r7, #48]	@ 0x30
 800a40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a410:	e841 2300 	strex	r3, r2, [r1]
 800a414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e1      	bne.n	800a3e0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f023 0310 	bic.w	r3, r3, #16
 800a444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	69b9      	ldr	r1, [r7, #24]
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	617b      	str	r3, [r7, #20]
   return(result);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e4      	bne.n	800a430 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2202      	movs	r2, #2
 800a46a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a472:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a476:	4611      	mov	r1, r2
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a47c:	e069      	b.n	800a552 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d010      	beq.n	800a4ac <HAL_UART_IRQHandler+0x5f4>
 800a48a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a48e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a49e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4aa:	e055      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d014      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d008      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d03e      	beq.n	800a556 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
    }
    return;
 800a4e0:	e039      	b.n	800a556 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <HAL_UART_IRQHandler+0x64a>
 800a4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 f84e 	bl	800b59c <UART_EndTransmit_IT>
    return;
 800a500:	e02a      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <HAL_UART_IRQHandler+0x66e>
 800a50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a512:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a524:	e018      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a52a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d012      	beq.n	800a558 <HAL_UART_IRQHandler+0x6a0>
 800a532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a536:	2b00      	cmp	r3, #0
 800a538:	da0e      	bge.n	800a558 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a544:	e008      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a546:	bf00      	nop
 800a548:	e006      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a54a:	bf00      	nop
 800a54c:	e004      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a54e:	bf00      	nop
 800a550:	e002      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a556:	bf00      	nop
  }
}
 800a558:	37e8      	adds	r7, #232	@ 0xe8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop

0800a560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a09      	ldr	r2, [pc, #36]	@ (800a638 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d009      	beq.n	800a62c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	615a      	str	r2, [r3, #20]
  }
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	40008000 	.word	0x40008000

0800a63c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a18      	ldr	r2, [pc, #96]	@ (800a6ac <HAL_UART_EnableReceiverTimeout+0x70>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d027      	beq.n	800a69e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a654:	2b20      	cmp	r3, #32
 800a656:	d120      	bne.n	800a69a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d101      	bne.n	800a666 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a662:	2302      	movs	r3, #2
 800a664:	e01c      	b.n	800a6a0 <HAL_UART_EnableReceiverTimeout+0x64>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2224      	movs	r2, #36	@ 0x24
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a684:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2220      	movs	r2, #32
 800a68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	e002      	b.n	800a6a0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a69a:	2302      	movs	r3, #2
 800a69c:	e000      	b.n	800a6a0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
  }
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	40008000 	.word	0x40008000

0800a6b0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a740 <UART_InitCallbacksToDefault+0x74>)
 800a6d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a19      	ldr	r2, [pc, #100]	@ (800a744 <UART_InitCallbacksToDefault+0x78>)
 800a6e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a18      	ldr	r2, [pc, #96]	@ (800a748 <UART_InitCallbacksToDefault+0x7c>)
 800a6e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a17      	ldr	r2, [pc, #92]	@ (800a74c <UART_InitCallbacksToDefault+0x80>)
 800a6f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a16      	ldr	r2, [pc, #88]	@ (800a750 <UART_InitCallbacksToDefault+0x84>)
 800a6f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a15      	ldr	r2, [pc, #84]	@ (800a754 <UART_InitCallbacksToDefault+0x88>)
 800a700:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a14      	ldr	r2, [pc, #80]	@ (800a758 <UART_InitCallbacksToDefault+0x8c>)
 800a708:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a13      	ldr	r2, [pc, #76]	@ (800a75c <UART_InitCallbacksToDefault+0x90>)
 800a710:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a12      	ldr	r2, [pc, #72]	@ (800a760 <UART_InitCallbacksToDefault+0x94>)
 800a718:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a11      	ldr	r2, [pc, #68]	@ (800a764 <UART_InitCallbacksToDefault+0x98>)
 800a720:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a10      	ldr	r2, [pc, #64]	@ (800a768 <UART_InitCallbacksToDefault+0x9c>)
 800a728:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a0f      	ldr	r2, [pc, #60]	@ (800a76c <UART_InitCallbacksToDefault+0xa0>)
 800a730:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	0800a575 	.word	0x0800a575
 800a744:	0800a561 	.word	0x0800a561
 800a748:	0800a589 	.word	0x0800a589
 800a74c:	08002a8d 	.word	0x08002a8d
 800a750:	0800a59d 	.word	0x0800a59d
 800a754:	0800a5b1 	.word	0x0800a5b1
 800a758:	0800a5c5 	.word	0x0800a5c5
 800a75c:	0800a5d9 	.word	0x0800a5d9
 800a760:	0800b5f7 	.word	0x0800b5f7
 800a764:	0800b60b 	.word	0x0800b60b
 800a768:	0800b61f 	.word	0x0800b61f
 800a76c:	0800a5ed 	.word	0x0800a5ed

0800a770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a774:	b08c      	sub	sp, #48	@ 0x30
 800a776:	af00      	add	r7, sp, #0
 800a778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	431a      	orrs	r2, r3
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	431a      	orrs	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	4313      	orrs	r3, r2
 800a796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4baa      	ldr	r3, [pc, #680]	@ (800aa48 <UART_SetConfig+0x2d8>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	68da      	ldr	r2, [r3, #12]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a9f      	ldr	r2, [pc, #636]	@ (800aa4c <UART_SetConfig+0x2dc>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a7e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	6812      	ldr	r2, [r2, #0]
 800a7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fa:	f023 010f 	bic.w	r1, r3, #15
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a90      	ldr	r2, [pc, #576]	@ (800aa50 <UART_SetConfig+0x2e0>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d125      	bne.n	800a860 <UART_SetConfig+0xf0>
 800a814:	4b8f      	ldr	r3, [pc, #572]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d81a      	bhi.n	800a858 <UART_SetConfig+0xe8>
 800a822:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <UART_SetConfig+0xb8>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a849 	.word	0x0800a849
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a851 	.word	0x0800a851
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83e:	e116      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a840:	2302      	movs	r3, #2
 800a842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a846:	e112      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a848:	2304      	movs	r3, #4
 800a84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a84e:	e10e      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a850:	2308      	movs	r3, #8
 800a852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a856:	e10a      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a858:	2310      	movs	r3, #16
 800a85a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a85e:	e106      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a7c      	ldr	r2, [pc, #496]	@ (800aa58 <UART_SetConfig+0x2e8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d138      	bne.n	800a8dc <UART_SetConfig+0x16c>
 800a86a:	4b7a      	ldr	r3, [pc, #488]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a86c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a870:	f003 030c 	and.w	r3, r3, #12
 800a874:	2b0c      	cmp	r3, #12
 800a876:	d82d      	bhi.n	800a8d4 <UART_SetConfig+0x164>
 800a878:	a201      	add	r2, pc, #4	@ (adr r2, 800a880 <UART_SetConfig+0x110>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a8d5 	.word	0x0800a8d5
 800a888:	0800a8d5 	.word	0x0800a8d5
 800a88c:	0800a8d5 	.word	0x0800a8d5
 800a890:	0800a8c5 	.word	0x0800a8c5
 800a894:	0800a8d5 	.word	0x0800a8d5
 800a898:	0800a8d5 	.word	0x0800a8d5
 800a89c:	0800a8d5 	.word	0x0800a8d5
 800a8a0:	0800a8bd 	.word	0x0800a8bd
 800a8a4:	0800a8d5 	.word	0x0800a8d5
 800a8a8:	0800a8d5 	.word	0x0800a8d5
 800a8ac:	0800a8d5 	.word	0x0800a8d5
 800a8b0:	0800a8cd 	.word	0x0800a8cd
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ba:	e0d8      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c2:	e0d4      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ca:	e0d0      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d2:	e0cc      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8da:	e0c8      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a5e      	ldr	r2, [pc, #376]	@ (800aa5c <UART_SetConfig+0x2ec>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d125      	bne.n	800a932 <UART_SetConfig+0x1c2>
 800a8e6:	4b5b      	ldr	r3, [pc, #364]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a8f0:	2b30      	cmp	r3, #48	@ 0x30
 800a8f2:	d016      	beq.n	800a922 <UART_SetConfig+0x1b2>
 800a8f4:	2b30      	cmp	r3, #48	@ 0x30
 800a8f6:	d818      	bhi.n	800a92a <UART_SetConfig+0x1ba>
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d00a      	beq.n	800a912 <UART_SetConfig+0x1a2>
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d814      	bhi.n	800a92a <UART_SetConfig+0x1ba>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <UART_SetConfig+0x19a>
 800a904:	2b10      	cmp	r3, #16
 800a906:	d008      	beq.n	800a91a <UART_SetConfig+0x1aa>
 800a908:	e00f      	b.n	800a92a <UART_SetConfig+0x1ba>
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a910:	e0ad      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a912:	2302      	movs	r3, #2
 800a914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a918:	e0a9      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a91a:	2304      	movs	r3, #4
 800a91c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a920:	e0a5      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a922:	2308      	movs	r3, #8
 800a924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a928:	e0a1      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a92a:	2310      	movs	r3, #16
 800a92c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a930:	e09d      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a4a      	ldr	r2, [pc, #296]	@ (800aa60 <UART_SetConfig+0x2f0>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d125      	bne.n	800a988 <UART_SetConfig+0x218>
 800a93c:	4b45      	ldr	r3, [pc, #276]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a946:	2bc0      	cmp	r3, #192	@ 0xc0
 800a948:	d016      	beq.n	800a978 <UART_SetConfig+0x208>
 800a94a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a94c:	d818      	bhi.n	800a980 <UART_SetConfig+0x210>
 800a94e:	2b80      	cmp	r3, #128	@ 0x80
 800a950:	d00a      	beq.n	800a968 <UART_SetConfig+0x1f8>
 800a952:	2b80      	cmp	r3, #128	@ 0x80
 800a954:	d814      	bhi.n	800a980 <UART_SetConfig+0x210>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <UART_SetConfig+0x1f0>
 800a95a:	2b40      	cmp	r3, #64	@ 0x40
 800a95c:	d008      	beq.n	800a970 <UART_SetConfig+0x200>
 800a95e:	e00f      	b.n	800a980 <UART_SetConfig+0x210>
 800a960:	2300      	movs	r3, #0
 800a962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a966:	e082      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a968:	2302      	movs	r3, #2
 800a96a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a96e:	e07e      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a970:	2304      	movs	r3, #4
 800a972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a976:	e07a      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a978:	2308      	movs	r3, #8
 800a97a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a97e:	e076      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a980:	2310      	movs	r3, #16
 800a982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a986:	e072      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a35      	ldr	r2, [pc, #212]	@ (800aa64 <UART_SetConfig+0x2f4>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d12a      	bne.n	800a9e8 <UART_SetConfig+0x278>
 800a992:	4b30      	ldr	r3, [pc, #192]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a99c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9a0:	d01a      	beq.n	800a9d8 <UART_SetConfig+0x268>
 800a9a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9a6:	d81b      	bhi.n	800a9e0 <UART_SetConfig+0x270>
 800a9a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ac:	d00c      	beq.n	800a9c8 <UART_SetConfig+0x258>
 800a9ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9b2:	d815      	bhi.n	800a9e0 <UART_SetConfig+0x270>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <UART_SetConfig+0x250>
 800a9b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9bc:	d008      	beq.n	800a9d0 <UART_SetConfig+0x260>
 800a9be:	e00f      	b.n	800a9e0 <UART_SetConfig+0x270>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9c6:	e052      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ce:	e04e      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9d6:	e04a      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a9d8:	2308      	movs	r3, #8
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9de:	e046      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	e042      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a17      	ldr	r2, [pc, #92]	@ (800aa4c <UART_SetConfig+0x2dc>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d13a      	bne.n	800aa68 <UART_SetConfig+0x2f8>
 800a9f2:	4b18      	ldr	r3, [pc, #96]	@ (800aa54 <UART_SetConfig+0x2e4>)
 800a9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a9fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa00:	d01a      	beq.n	800aa38 <UART_SetConfig+0x2c8>
 800aa02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa06:	d81b      	bhi.n	800aa40 <UART_SetConfig+0x2d0>
 800aa08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa0c:	d00c      	beq.n	800aa28 <UART_SetConfig+0x2b8>
 800aa0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa12:	d815      	bhi.n	800aa40 <UART_SetConfig+0x2d0>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <UART_SetConfig+0x2b0>
 800aa18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa1c:	d008      	beq.n	800aa30 <UART_SetConfig+0x2c0>
 800aa1e:	e00f      	b.n	800aa40 <UART_SetConfig+0x2d0>
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa26:	e022      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa2e:	e01e      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800aa30:	2304      	movs	r3, #4
 800aa32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa36:	e01a      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800aa38:	2308      	movs	r3, #8
 800aa3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa3e:	e016      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800aa40:	2310      	movs	r3, #16
 800aa42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa46:	e012      	b.n	800aa6e <UART_SetConfig+0x2fe>
 800aa48:	cfff69f3 	.word	0xcfff69f3
 800aa4c:	40008000 	.word	0x40008000
 800aa50:	40013800 	.word	0x40013800
 800aa54:	40021000 	.word	0x40021000
 800aa58:	40004400 	.word	0x40004400
 800aa5c:	40004800 	.word	0x40004800
 800aa60:	40004c00 	.word	0x40004c00
 800aa64:	40005000 	.word	0x40005000
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4aae      	ldr	r2, [pc, #696]	@ (800ad2c <UART_SetConfig+0x5bc>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	f040 8097 	bne.w	800aba8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa7e:	2b08      	cmp	r3, #8
 800aa80:	d823      	bhi.n	800aaca <UART_SetConfig+0x35a>
 800aa82:	a201      	add	r2, pc, #4	@ (adr r2, 800aa88 <UART_SetConfig+0x318>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aacb 	.word	0x0800aacb
 800aa90:	0800aab5 	.word	0x0800aab5
 800aa94:	0800aacb 	.word	0x0800aacb
 800aa98:	0800aabb 	.word	0x0800aabb
 800aa9c:	0800aacb 	.word	0x0800aacb
 800aaa0:	0800aacb 	.word	0x0800aacb
 800aaa4:	0800aacb 	.word	0x0800aacb
 800aaa8:	0800aac3 	.word	0x0800aac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaac:	f7fc fcf6 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800aab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aab2:	e010      	b.n	800aad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aab4:	4b9e      	ldr	r3, [pc, #632]	@ (800ad30 <UART_SetConfig+0x5c0>)
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aab8:	e00d      	b.n	800aad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaba:	f7fc fc81 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 800aabe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aac0:	e009      	b.n	800aad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aac8:	e005      	b.n	800aad6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 8130 	beq.w	800ad3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae2:	4a94      	ldr	r2, [pc, #592]	@ (800ad34 <UART_SetConfig+0x5c4>)
 800aae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaec:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d305      	bcc.n	800ab0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d903      	bls.n	800ab16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab14:	e113      	b.n	800ad3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	2200      	movs	r2, #0
 800ab1a:	60bb      	str	r3, [r7, #8]
 800ab1c:	60fa      	str	r2, [r7, #12]
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	4a84      	ldr	r2, [pc, #528]	@ (800ad34 <UART_SetConfig+0x5c4>)
 800ab24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab38:	f7f5 ffac 	bl	8000a94 <__aeabi_uldivmod>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4610      	mov	r0, r2
 800ab42:	4619      	mov	r1, r3
 800ab44:	f04f 0200 	mov.w	r2, #0
 800ab48:	f04f 0300 	mov.w	r3, #0
 800ab4c:	020b      	lsls	r3, r1, #8
 800ab4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab52:	0202      	lsls	r2, r0, #8
 800ab54:	6979      	ldr	r1, [r7, #20]
 800ab56:	6849      	ldr	r1, [r1, #4]
 800ab58:	0849      	lsrs	r1, r1, #1
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	4605      	mov	r5, r0
 800ab60:	eb12 0804 	adds.w	r8, r2, r4
 800ab64:	eb43 0905 	adc.w	r9, r3, r5
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	469a      	mov	sl, r3
 800ab70:	4693      	mov	fp, r2
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	f7f5 ff8b 	bl	8000a94 <__aeabi_uldivmod>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4613      	mov	r3, r2
 800ab84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab8c:	d308      	bcc.n	800aba0 <UART_SetConfig+0x430>
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab94:	d204      	bcs.n	800aba0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	e0ce      	b.n	800ad3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aba6:	e0ca      	b.n	800ad3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abb0:	d166      	bne.n	800ac80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800abb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d827      	bhi.n	800ac0a <UART_SetConfig+0x49a>
 800abba:	a201      	add	r2, pc, #4	@ (adr r2, 800abc0 <UART_SetConfig+0x450>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abe5 	.word	0x0800abe5
 800abc4:	0800abed 	.word	0x0800abed
 800abc8:	0800abf5 	.word	0x0800abf5
 800abcc:	0800ac0b 	.word	0x0800ac0b
 800abd0:	0800abfb 	.word	0x0800abfb
 800abd4:	0800ac0b 	.word	0x0800ac0b
 800abd8:	0800ac0b 	.word	0x0800ac0b
 800abdc:	0800ac0b 	.word	0x0800ac0b
 800abe0:	0800ac03 	.word	0x0800ac03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe4:	f7fc fc5a 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800abe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abea:	e014      	b.n	800ac16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abec:	f7fc fc6c 	bl	80074c8 <HAL_RCC_GetPCLK2Freq>
 800abf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abf2:	e010      	b.n	800ac16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abf4:	4b4e      	ldr	r3, [pc, #312]	@ (800ad30 <UART_SetConfig+0x5c0>)
 800abf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abf8:	e00d      	b.n	800ac16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abfa:	f7fc fbe1 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 800abfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac00:	e009      	b.n	800ac16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac08:	e005      	b.n	800ac16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8090 	beq.w	800ad3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac22:	4a44      	ldr	r2, [pc, #272]	@ (800ad34 <UART_SetConfig+0x5c4>)
 800ac24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac30:	005a      	lsls	r2, r3, #1
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	441a      	add	r2, r3
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	2b0f      	cmp	r3, #15
 800ac48:	d916      	bls.n	800ac78 <UART_SetConfig+0x508>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac50:	d212      	bcs.n	800ac78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f023 030f 	bic.w	r3, r3, #15
 800ac5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	085b      	lsrs	r3, r3, #1
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	8bfb      	ldrh	r3, [r7, #30]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	8bfa      	ldrh	r2, [r7, #30]
 800ac74:	60da      	str	r2, [r3, #12]
 800ac76:	e062      	b.n	800ad3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac7e:	e05e      	b.n	800ad3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d828      	bhi.n	800acda <UART_SetConfig+0x56a>
 800ac88:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <UART_SetConfig+0x520>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acbd 	.word	0x0800acbd
 800ac98:	0800acc5 	.word	0x0800acc5
 800ac9c:	0800acdb 	.word	0x0800acdb
 800aca0:	0800accb 	.word	0x0800accb
 800aca4:	0800acdb 	.word	0x0800acdb
 800aca8:	0800acdb 	.word	0x0800acdb
 800acac:	0800acdb 	.word	0x0800acdb
 800acb0:	0800acd3 	.word	0x0800acd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acb4:	f7fc fbf2 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800acb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acba:	e014      	b.n	800ace6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acbc:	f7fc fc04 	bl	80074c8 <HAL_RCC_GetPCLK2Freq>
 800acc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acc2:	e010      	b.n	800ace6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad30 <UART_SetConfig+0x5c0>)
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acc8:	e00d      	b.n	800ace6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acca:	f7fc fb79 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 800acce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acd0:	e009      	b.n	800ace6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acd8:	e005      	b.n	800ace6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ace4:	bf00      	nop
    }

    if (pclk != 0U)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d028      	beq.n	800ad3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf0:	4a10      	ldr	r2, [pc, #64]	@ (800ad34 <UART_SetConfig+0x5c4>)
 800acf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf6:	461a      	mov	r2, r3
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	085b      	lsrs	r3, r3, #1
 800ad04:	441a      	add	r2, r3
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	2b0f      	cmp	r3, #15
 800ad14:	d910      	bls.n	800ad38 <UART_SetConfig+0x5c8>
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad1c:	d20c      	bcs.n	800ad38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60da      	str	r2, [r3, #12]
 800ad28:	e009      	b.n	800ad3e <UART_SetConfig+0x5ce>
 800ad2a:	bf00      	nop
 800ad2c:	40008000 	.word	0x40008000
 800ad30:	00f42400 	.word	0x00f42400
 800ad34:	0800d86c 	.word	0x0800d86c
      }
      else
      {
        ret = HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2200      	movs	r2, #0
 800ad58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3730      	adds	r7, #48	@ 0x30
 800ad62:	46bd      	mov	sp, r7
 800ad64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ad68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adda:	f003 0304 	and.w	r3, r3, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01a      	beq.n	800ae7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae66:	d10a      	bne.n	800ae7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	605a      	str	r2, [r3, #4]
  }
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b098      	sub	sp, #96	@ 0x60
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aebc:	f7f9 faee 	bl	800449c <HAL_GetTick>
 800aec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d12f      	bne.n	800af30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aed8:	2200      	movs	r2, #0
 800aeda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f88e 	bl	800b000 <UART_WaitOnFlagUntilTimeout>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d022      	beq.n	800af30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aefe:	653b      	str	r3, [r7, #80]	@ 0x50
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af08:	647b      	str	r3, [r7, #68]	@ 0x44
 800af0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e6      	bne.n	800aeea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e063      	b.n	800aff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0304 	and.w	r3, r3, #4
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d149      	bne.n	800afd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af46:	2200      	movs	r2, #0
 800af48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f857 	bl	800b000 <UART_WaitOnFlagUntilTimeout>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d03c      	beq.n	800afd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	623b      	str	r3, [r7, #32]
   return(result);
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af76:	633b      	str	r3, [r7, #48]	@ 0x30
 800af78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e6      	bne.n	800af58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3308      	adds	r3, #8
 800af90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	60fb      	str	r3, [r7, #12]
   return(result);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f023 0301 	bic.w	r3, r3, #1
 800afa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3308      	adds	r3, #8
 800afa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afaa:	61fa      	str	r2, [r7, #28]
 800afac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	69b9      	ldr	r1, [r7, #24]
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	617b      	str	r3, [r7, #20]
   return(result);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e5      	bne.n	800af8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2220      	movs	r2, #32
 800afc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e012      	b.n	800aff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2220      	movs	r2, #32
 800afde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3758      	adds	r7, #88	@ 0x58
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	4613      	mov	r3, r2
 800b00e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b010:	e04f      	b.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d04b      	beq.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b01a:	f7f9 fa3f 	bl	800449c <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	429a      	cmp	r2, r3
 800b028:	d302      	bcc.n	800b030 <UART_WaitOnFlagUntilTimeout+0x30>
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e04e      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d037      	beq.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b80      	cmp	r3, #128	@ 0x80
 800b046:	d034      	beq.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b40      	cmp	r3, #64	@ 0x40
 800b04c:	d031      	beq.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d110      	bne.n	800b07e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2208      	movs	r2, #8
 800b062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f920 	bl	800b2aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2208      	movs	r2, #8
 800b06e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e029      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b08c:	d111      	bne.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f906 	bl	800b2aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e00f      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	bf0c      	ite	eq
 800b0c2:	2301      	moveq	r3, #1
 800b0c4:	2300      	movne	r3, #0
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d0a0      	beq.n	800b012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b096      	sub	sp, #88	@ 0x58
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2222      	movs	r2, #34	@ 0x22
 800b104:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d02d      	beq.n	800b16e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b118:	4a40      	ldr	r2, [pc, #256]	@ (800b21c <UART_Start_Receive_DMA+0x140>)
 800b11a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b122:	4a3f      	ldr	r2, [pc, #252]	@ (800b220 <UART_Start_Receive_DMA+0x144>)
 800b124:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b12c:	4a3d      	ldr	r2, [pc, #244]	@ (800b224 <UART_Start_Receive_DMA+0x148>)
 800b12e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b136:	2200      	movs	r2, #0
 800b138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3324      	adds	r3, #36	@ 0x24
 800b146:	4619      	mov	r1, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b14c:	461a      	mov	r2, r3
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	f7fa ffe0 	bl	8006114 <HAL_DMA_Start_IT>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d009      	beq.n	800b16e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2210      	movs	r2, #16
 800b15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e051      	b.n	800b212 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d018      	beq.n	800b1a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17e:	e853 3f00 	ldrex	r3, [r3]
 800b182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b18a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	461a      	mov	r2, r3
 800b192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b194:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b196:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b19a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b1a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e6      	bne.n	800b176 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	f043 0301 	orr.w	r3, r3, #1
 800b1be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1c8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b1ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e5      	bne.n	800b1a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1fc:	623a      	str	r2, [r7, #32]
 800b1fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	6a3a      	ldr	r2, [r7, #32]
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	61bb      	str	r3, [r7, #24]
   return(result);
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e5      	bne.n	800b1dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3758      	adds	r7, #88	@ 0x58
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	0800b377 	.word	0x0800b377
 800b220:	0800b4ab 	.word	0x0800b4ab
 800b224:	0800b4f1 	.word	0x0800b4f1

0800b228 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b08f      	sub	sp, #60	@ 0x3c
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b250:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e6      	bne.n	800b230 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3308      	adds	r3, #8
 800b268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	60bb      	str	r3, [r7, #8]
   return(result);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b278:	633b      	str	r3, [r7, #48]	@ 0x30
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b282:	61ba      	str	r2, [r7, #24]
 800b284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6979      	ldr	r1, [r7, #20]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	613b      	str	r3, [r7, #16]
   return(result);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e5      	bne.n	800b262 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b29e:	bf00      	nop
 800b2a0:	373c      	adds	r7, #60	@ 0x3c
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b095      	sub	sp, #84	@ 0x54
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ba:	e853 3f00 	ldrex	r3, [r3]
 800b2be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e6      	bne.n	800b2b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3308      	adds	r3, #8
 800b306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b308:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b30a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b310:	e841 2300 	strex	r3, r2, [r1]
 800b314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e3      	bne.n	800b2e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b320:	2b01      	cmp	r3, #1
 800b322:	d118      	bne.n	800b356 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	60bb      	str	r3, [r7, #8]
   return(result);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f023 0310 	bic.w	r3, r3, #16
 800b338:	647b      	str	r3, [r7, #68]	@ 0x44
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b346:	6979      	ldr	r1, [r7, #20]
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	613b      	str	r3, [r7, #16]
   return(result);
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e6      	bne.n	800b324 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2220      	movs	r2, #32
 800b35a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b36a:	bf00      	nop
 800b36c:	3754      	adds	r7, #84	@ 0x54
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b09c      	sub	sp, #112	@ 0x70
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b382:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0320 	and.w	r3, r3, #32
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d171      	bne.n	800b476 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b394:	2200      	movs	r2, #0
 800b396:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e6      	bne.n	800b39a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3de:	f023 0301 	bic.w	r3, r3, #1
 800b3e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b3e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b3ec:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e5      	bne.n	800b3cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3308      	adds	r3, #8
 800b406:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	e853 3f00 	ldrex	r3, [r3]
 800b40e:	623b      	str	r3, [r7, #32]
   return(result);
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b416:	663b      	str	r3, [r7, #96]	@ 0x60
 800b418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3308      	adds	r3, #8
 800b41e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b420:	633a      	str	r2, [r7, #48]	@ 0x30
 800b422:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b428:	e841 2300 	strex	r3, r2, [r1]
 800b42c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e5      	bne.n	800b400 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b436:	2220      	movs	r2, #32
 800b438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b43c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b43e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b440:	2b01      	cmp	r3, #1
 800b442:	d118      	bne.n	800b476 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	60fb      	str	r3, [r7, #12]
   return(result);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f023 0310 	bic.w	r3, r3, #16
 800b458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b466:	69b9      	ldr	r1, [r7, #24]
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	e841 2300 	strex	r3, r2, [r1]
 800b46e:	617b      	str	r3, [r7, #20]
   return(result);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e6      	bne.n	800b444 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b478:	2200      	movs	r2, #0
 800b47a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d109      	bne.n	800b498 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b486:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b48a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b48c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b490:	4611      	mov	r1, r2
 800b492:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b494:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b496:	e004      	b.n	800b4a2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b49a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b49e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4a0:	4798      	blx	r3
}
 800b4a2:	bf00      	nop
 800b4a4:	3770      	adds	r7, #112	@ 0x70
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d10b      	bne.n	800b4de <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b4d2:	0852      	lsrs	r2, r2, #1
 800b4d4:	b292      	uxth	r2, r2
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4dc:	e004      	b.n	800b4e8 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	4798      	blx	r3
}
 800b4e8:	bf00      	nop
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b504:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b518:	2b80      	cmp	r3, #128	@ 0x80
 800b51a:	d109      	bne.n	800b530 <UART_DMAError+0x40>
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2b21      	cmp	r3, #33	@ 0x21
 800b520:	d106      	bne.n	800b530 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2200      	movs	r2, #0
 800b526:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f7ff fe7c 	bl	800b228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53a:	2b40      	cmp	r3, #64	@ 0x40
 800b53c:	d109      	bne.n	800b552 <UART_DMAError+0x62>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b22      	cmp	r3, #34	@ 0x22
 800b542:	d106      	bne.n	800b552 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2200      	movs	r2, #0
 800b548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f7ff feac 	bl	800b2aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b558:	f043 0210 	orr.w	r2, r3, #16
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b568:	6978      	ldr	r0, [r7, #20]
 800b56a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b56c:	bf00      	nop
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b594:	bf00      	nop
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5b8:	61fb      	str	r3, [r7, #28]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	61bb      	str	r3, [r7, #24]
 800b5c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c6:	6979      	ldr	r1, [r7, #20]
 800b5c8:	69ba      	ldr	r2, [r7, #24]
 800b5ca:	e841 2300 	strex	r3, r2, [r1]
 800b5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e6      	bne.n	800b5a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5ee:	bf00      	nop
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b632:	b480      	push	{r7}
 800b634:	b085      	sub	sp, #20
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_UARTEx_DisableFifoMode+0x16>
 800b644:	2302      	movs	r3, #2
 800b646:	e027      	b.n	800b698 <HAL_UARTEx_DisableFifoMode+0x66>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2224      	movs	r2, #36	@ 0x24
 800b654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0201 	bic.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b676:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2220      	movs	r2, #32
 800b68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e02d      	b.n	800b718 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2224      	movs	r2, #36	@ 0x24
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0201 	bic.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f84f 	bl	800b79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2220      	movs	r2, #32
 800b70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b734:	2302      	movs	r3, #2
 800b736:	e02d      	b.n	800b794 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2224      	movs	r2, #36	@ 0x24
 800b744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f811 	bl	800b79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d108      	bne.n	800b7be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7bc:	e031      	b.n	800b822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7be:	2308      	movs	r3, #8
 800b7c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	0e5b      	lsrs	r3, r3, #25
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	0f5b      	lsrs	r3, r3, #29
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	7b3a      	ldrb	r2, [r7, #12]
 800b7ea:	4911      	ldr	r1, [pc, #68]	@ (800b830 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ec:	5c8a      	ldrb	r2, [r1, r2]
 800b7ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7f2:	7b3a      	ldrb	r2, [r7, #12]
 800b7f4:	490f      	ldr	r1, [pc, #60]	@ (800b834 <UARTEx_SetNbDataToProcess+0x98>)
 800b7f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	7b7a      	ldrb	r2, [r7, #13]
 800b808:	4909      	ldr	r1, [pc, #36]	@ (800b830 <UARTEx_SetNbDataToProcess+0x94>)
 800b80a:	5c8a      	ldrb	r2, [r1, r2]
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b810:	7b7a      	ldrb	r2, [r7, #13]
 800b812:	4908      	ldr	r1, [pc, #32]	@ (800b834 <UARTEx_SetNbDataToProcess+0x98>)
 800b814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b816:	fb93 f3f2 	sdiv	r3, r3, r2
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	0800d884 	.word	0x0800d884
 800b834:	0800d88c 	.word	0x0800d88c

0800b838 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800b838:	b480      	push	{r7}
 800b83a:	b08b      	sub	sp, #44	@ 0x2c
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800b842:	edd7 7a01 	vldr	s15, [r7, #4]
 800b846:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b930 <arm_sin_f32+0xf8>
 800b84a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b84e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800b852:	edd7 7a06 	vldr	s15, [r7, #24]
 800b856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b85a:	ee17 3a90 	vmov	r3, s15
 800b85e:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800b860:	edd7 7a06 	vldr	s15, [r7, #24]
 800b864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86c:	d502      	bpl.n	800b874 <arm_sin_f32+0x3c>
  {
    n--;
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	3b01      	subs	r3, #1
 800b872:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	ee07 3a90 	vmov	s15, r3
 800b87a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b87e:	ed97 7a06 	vldr	s14, [r7, #24]
 800b882:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b886:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800b88a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b88e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800b934 <arm_sin_f32+0xfc>
 800b892:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b896:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800b89a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8a2:	ee17 3a90 	vmov	r3, s15
 800b8a6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800b8a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b8aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8ae:	d309      	bcc.n	800b8c4 <arm_sin_f32+0x8c>
    index = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800b8b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800b934 <arm_sin_f32+0xfc>
 800b8bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8c0:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800b8c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	ed97 7a07 	vldr	s14, [r7, #28]
 800b8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8d6:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800b8da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b8dc:	4a16      	ldr	r2, [pc, #88]	@ (800b938 <arm_sin_f32+0x100>)
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800b8e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	4a13      	ldr	r2, [pc, #76]	@ (800b938 <arm_sin_f32+0x100>)
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800b8f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b900:	edd7 7a04 	vldr	s15, [r7, #16]
 800b904:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b908:	edd7 6a05 	vldr	s13, [r7, #20]
 800b90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b918:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	ee07 3a90 	vmov	s15, r3
}
 800b922:	eeb0 0a67 	vmov.f32	s0, s15
 800b926:	372c      	adds	r7, #44	@ 0x2c
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	3e22f983 	.word	0x3e22f983
 800b934:	44000000 	.word	0x44000000
 800b938:	0800d894 	.word	0x0800d894

0800b93c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b08b      	sub	sp, #44	@ 0x2c
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	885b      	ldrh	r3, [r3, #2]
 800b964:	fb02 f303 	mul.w	r3, r2, r3
 800b968:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b96e:	e013      	b.n	800b998 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	1d1a      	adds	r2, r3, #4
 800b974:	627a      	str	r2, [r7, #36]	@ 0x24
 800b976:	ed93 7a00 	vldr	s14, [r3]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	1d1a      	adds	r2, r3, #4
 800b97e:	623a      	str	r2, [r7, #32]
 800b980:	edd3 7a00 	vldr	s15, [r3]
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	1d1a      	adds	r2, r3, #4
 800b988:	61fa      	str	r2, [r7, #28]
 800b98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b98e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	3b01      	subs	r3, #1
 800b996:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e8      	bne.n	800b970 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800b9a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	372c      	adds	r7, #44	@ 0x2c
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	607b      	str	r3, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	817b      	strh	r3, [r7, #10]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	897a      	ldrh	r2, [r7, #10]
 800b9c8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	893a      	ldrh	r2, [r7, #8]
 800b9ce:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	605a      	str	r2, [r3, #4]
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b0bb      	sub	sp, #236	@ 0xec
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	885b      	ldrh	r3, [r3, #2]
 800ba02:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ba04:	f04f 0300 	mov.w	r3, #0
 800ba08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba0c:	f04f 0300 	mov.w	r3, #0
 800ba10:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ba12:	2300      	movs	r3, #0
 800ba14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ba18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ba1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ba24:	e03b      	b.n	800ba9e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ba26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ba32:	e00c      	b.n	800ba4e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ba34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba38:	1d1a      	adds	r2, r3, #4
 800ba3a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ba3e:	f04f 0200 	mov.w	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
        j--;
 800ba44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ba4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1ee      	bne.n	800ba34 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ba56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba5a:	1d1a      	adds	r2, r3, #4
 800ba5c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ba60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ba64:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ba66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ba70:	e00c      	b.n	800ba8c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba76:	1d1a      	adds	r2, r3, #4
 800ba78:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	601a      	str	r2, [r3, #0]
        j--;
 800ba82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba86:	3b01      	subs	r3, #1
 800ba88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ba8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1ee      	bne.n	800ba72 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ba94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ba9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1bf      	bne.n	800ba26 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800baac:	e2c7      	b.n	800c03e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800baae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bab2:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	885b      	ldrh	r3, [r3, #2]
 800babc:	3301      	adds	r3, #1
 800babe:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800bac2:	fb01 f303 	mul.w	r3, r1, r3
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800bace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800bad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800badc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bae4:	3301      	adds	r3, #1
 800bae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800baea:	e02c      	b.n	800bb46 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	885b      	ldrh	r3, [r3, #2]
 800baf4:	4619      	mov	r1, r3
 800baf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bafa:	fb03 f101 	mul.w	r1, r3, r1
 800bafe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb02:	440b      	add	r3, r1
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800bb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800bb14:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800bb18:	eeb0 7ae7 	vabs.f32	s14, s15
 800bb1c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bb20:	eef0 7ae7 	vabs.f32	s15, s15
 800bb24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2c:	dd06      	ble.n	800bb3c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800bb2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800bb36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bb3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb40:	3301      	adds	r3, #1
 800bb42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb46:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bb4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d3cd      	bcc.n	800baec <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800bb50:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bb54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5c:	f000 809b 	beq.w	800bc96 <arm_mat_inverse_f32+0x2b4>
 800bb60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	f000 8094 	beq.w	800bc96 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	885b      	ldrh	r3, [r3, #2]
 800bb82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb92:	fb03 f202 	mul.w	r2, r3, r2
 800bb96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bba2:	4413      	add	r3, r2
 800bba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bbae:	fb03 f202 	mul.w	r2, r3, r2
 800bbb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bbca:	e018      	b.n	800bbfe <arm_mat_inverse_f32+0x21c>
 800bbcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbd8:	1d1a      	adds	r2, r3, #4
 800bbda:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800bbde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbe2:	6812      	ldr	r2, [r2, #0]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbea:	1d1a      	adds	r2, r3, #4
 800bbec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bbf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bbfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800bc02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc04:	429a      	cmp	r2, r3
 800bc06:	dbe1      	blt.n	800bbcc <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	885b      	ldrh	r3, [r3, #2]
 800bc1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc20:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bc30:	4413      	add	r3, r2
 800bc32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc46:	4413      	add	r3, r2
 800bc48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc52:	e018      	b.n	800bc86 <arm_mat_inverse_f32+0x2a4>
 800bc54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc60:	1d1a      	adds	r2, r3, #4
 800bc62:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bc66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc6a:	6812      	ldr	r2, [r2, #0]
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc72:	1d1a      	adds	r2, r3, #4
 800bc74:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc80:	3301      	adds	r3, #1
 800bc82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	dbe1      	blt.n	800bc54 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800bc90:	2301      	movs	r3, #1
 800bc92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800bc96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d009      	beq.n	800bcb2 <arm_mat_inverse_f32+0x2d0>
 800bc9e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	d102      	bne.n	800bcb2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800bcac:	f06f 0304 	mvn.w	r3, #4
 800bcb0:	e208      	b.n	800c0c4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800bcb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcb6:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800bcba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcbe:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	885b      	ldrh	r3, [r3, #2]
 800bcce:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcde:	fb03 f202 	mul.w	r2, r3, r2
 800bce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bce6:	4413      	add	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bcee:	4413      	add	r3, r2
 800bcf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bcfa:	e011      	b.n	800bd20 <arm_mat_inverse_f32+0x33e>
 800bcfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd00:	1d1a      	adds	r2, r3, #4
 800bd02:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800bd06:	ed93 7a00 	vldr	s14, [r3]
 800bd0a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc3 7a00 	vstr	s15, [r3]
 800bd16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bd20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd26:	429a      	cmp	r2, r3
 800bd28:	dbe8      	blt.n	800bcfc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	885b      	ldrh	r3, [r3, #2]
 800bd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd40:	fb02 f303 	mul.w	r3, r2, r3
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd50:	2300      	movs	r3, #0
 800bd52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd56:	e011      	b.n	800bd7c <arm_mat_inverse_f32+0x39a>
 800bd58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800bd62:	ed93 7a00 	vldr	s14, [r3]
 800bd66:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6e:	edc3 7a00 	vstr	s15, [r3]
 800bd72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd76:	3301      	adds	r3, #1
 800bd78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800bd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd82:	429a      	cmp	r2, r3
 800bd84:	dbe8      	blt.n	800bd58 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800bd8c:	e0ae      	b.n	800beec <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	885b      	ldrh	r3, [r3, #2]
 800bd96:	4619      	mov	r1, r3
 800bd98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd9c:	fb03 f101 	mul.w	r1, r3, r1
 800bda0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bda4:	440b      	add	r3, r1
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800bdae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	885b      	ldrh	r3, [r3, #2]
 800bdcc:	617b      	str	r3, [r7, #20]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	613b      	str	r3, [r7, #16]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bdde:	fb03 f202 	mul.w	r2, r3, r2
 800bde2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800bdee:	4413      	add	r3, r2
 800bdf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdf8:	fb03 f202 	mul.w	r2, r3, r2
 800bdfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be00:	4413      	add	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800be08:	4413      	add	r3, r2
 800be0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be14:	e01a      	b.n	800be4c <arm_mat_inverse_f32+0x46a>
 800be16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be1a:	1d1a      	adds	r2, r3, #4
 800be1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800be20:	ed93 7a00 	vldr	s14, [r3]
 800be24:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800be28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be30:	1d1a      	adds	r2, r3, #4
 800be32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800be36:	ed93 7a00 	vldr	s14, [r3]
 800be3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be3e:	edc3 7a00 	vstr	s15, [r3]
 800be42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800be46:	3301      	adds	r3, #1
 800be48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	429a      	cmp	r2, r3
 800be54:	dbdf      	blt.n	800be16 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	885b      	ldrh	r3, [r3, #2]
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	60bb      	str	r3, [r7, #8]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800be76:	fb02 f303 	mul.w	r3, r2, r3
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800be80:	4413      	add	r3, r2
 800be82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be8a:	fb02 f303 	mul.w	r3, r2, r3
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800be94:	4413      	add	r3, r2
 800be96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be9a:	2300      	movs	r3, #0
 800be9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bea0:	e01a      	b.n	800bed8 <arm_mat_inverse_f32+0x4f6>
 800bea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bea6:	1d1a      	adds	r2, r3, #4
 800bea8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800beac:	ed93 7a00 	vldr	s14, [r3]
 800beb0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800beb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bebc:	1d1a      	adds	r2, r3, #4
 800bebe:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800bec2:	ed93 7a00 	vldr	s14, [r3]
 800bec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beca:	edc3 7a00 	vstr	s15, [r3]
 800bece:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bed2:	3301      	adds	r3, #1
 800bed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bed8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	429a      	cmp	r2, r3
 800bee0:	dbdf      	blt.n	800bea2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800bee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bee6:	3301      	adds	r3, #1
 800bee8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800beec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef2:	429a      	cmp	r2, r3
 800bef4:	f4ff af4b 	bcc.w	800bd8e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800bef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800befa:	3301      	adds	r3, #1
 800befc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf00:	e092      	b.n	800c028 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	885b      	ldrh	r3, [r3, #2]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf10:	fb03 f101 	mul.w	r1, r3, r1
 800bf14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf18:	440b      	add	r3, r1
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	677b      	str	r3, [r7, #116]	@ 0x74
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	885b      	ldrh	r3, [r3, #2]
 800bf3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	623b      	str	r3, [r7, #32]
 800bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bf4e:	fb03 f202 	mul.w	r2, r3, r2
 800bf52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bf5c:	4413      	add	r3, r2
 800bf5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf64:	fb03 f202 	mul.w	r2, r3, r2
 800bf68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bf72:	4413      	add	r3, r2
 800bf74:	677b      	str	r3, [r7, #116]	@ 0x74
 800bf76:	2300      	movs	r3, #0
 800bf78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf7a:	e014      	b.n	800bfa6 <arm_mat_inverse_f32+0x5c4>
 800bf7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf7e:	1d1a      	adds	r2, r3, #4
 800bf80:	677a      	str	r2, [r7, #116]	@ 0x74
 800bf82:	ed93 7a00 	vldr	s14, [r3]
 800bf86:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf90:	1d1a      	adds	r2, r3, #4
 800bf92:	67ba      	str	r2, [r7, #120]	@ 0x78
 800bf94:	ed93 7a00 	vldr	s14, [r3]
 800bf98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf9c:	edc3 7a00 	vstr	s15, [r3]
 800bfa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bfa6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	dbe6      	blt.n	800bf7c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	885b      	ldrh	r3, [r3, #2]
 800bfbe:	61fb      	str	r3, [r7, #28]
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	61bb      	str	r3, [r7, #24]
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bfca:	fb02 f303 	mul.w	r3, r2, r3
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bfd2:	4413      	add	r3, r2
 800bfd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfda:	fb02 f303 	mul.w	r3, r2, r3
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfe2:	4413      	add	r3, r2
 800bfe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfea:	e014      	b.n	800c016 <arm_mat_inverse_f32+0x634>
 800bfec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfee:	1d1a      	adds	r2, r3, #4
 800bff0:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bff2:	ed93 7a00 	vldr	s14, [r3]
 800bff6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c004:	ed93 7a00 	vldr	s14, [r3]
 800c008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c00c:	edc3 7a00 	vstr	s15, [r3]
 800c010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c012:	3301      	adds	r3, #1
 800c014:	673b      	str	r3, [r7, #112]	@ 0x70
 800c016:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	dbe6      	blt.n	800bfec <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c022:	3301      	adds	r3, #1
 800c024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c028:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c02c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c02e:	429a      	cmp	r2, r3
 800c030:	f4ff af67 	bcc.w	800bf02 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c038:	3301      	adds	r3, #1
 800c03a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c03e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c044:	429a      	cmp	r2, r3
 800c046:	f4ff ad32 	bcc.w	800baae <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c04a:	2300      	movs	r3, #0
 800c04c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c054:	2b01      	cmp	r3, #1
 800c056:	d033      	beq.n	800c0c0 <arm_mat_inverse_f32+0x6de>
 800c058:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c05c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c064:	d12c      	bne.n	800c0c0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c06c:	2300      	movs	r3, #0
 800c06e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c072:	e010      	b.n	800c096 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c07c:	4413      	add	r3, r2
 800c07e:	edd3 7a00 	vldr	s15, [r3]
 800c082:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08a:	d10d      	bne.n	800c0a8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c08c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c090:	3301      	adds	r3, #1
 800c092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c098:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
 800c09e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d3e6      	bcc.n	800c074 <arm_mat_inverse_f32+0x692>
 800c0a6:	e000      	b.n	800c0aa <arm_mat_inverse_f32+0x6c8>
            break;
 800c0a8:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c0aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0ae:	fb02 f303 	mul.w	r3, r2, r3
 800c0b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d102      	bne.n	800c0c0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c0ba:	23fb      	movs	r3, #251	@ 0xfb
 800c0bc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c0c0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	37ec      	adds	r7, #236	@ 0xec
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b093      	sub	sp, #76	@ 0x4c
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	885b      	ldrh	r3, [r3, #2]
 800c104:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	885b      	ldrh	r3, [r3, #2]
 800c10a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c10c:	2300      	movs	r3, #0
 800c10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c110:	8b7b      	ldrh	r3, [r7, #26]
 800c112:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c11e:	8b3b      	ldrh	r3, [r7, #24]
 800c120:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c128:	f04f 0300 	mov.w	r3, #0
 800c12c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c130:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c132:	8afb      	ldrh	r3, [r7, #22]
 800c134:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c136:	e017      	b.n	800c168 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c13a:	1d1a      	adds	r2, r3, #4
 800c13c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c13e:	ed93 7a00 	vldr	s14, [r3]
 800c142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c144:	edd3 7a00 	vldr	s15, [r3]
 800c148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c150:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c154:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c158:	8b3b      	ldrh	r3, [r7, #24]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c15e:	4413      	add	r3, r2
 800c160:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	3b01      	subs	r3, #1
 800c166:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1e4      	bne.n	800c138 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c176:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17a:	3b01      	subs	r3, #1
 800c17c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c17e:	8b3a      	ldrh	r2, [r7, #24]
 800c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	6a3a      	ldr	r2, [r7, #32]
 800c188:	4413      	add	r3, r2
 800c18a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1ca      	bne.n	800c128 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c192:	8b3b      	ldrh	r3, [r7, #24]
 800c194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c196:	4413      	add	r3, r2
 800c198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c19a:	8afb      	ldrh	r3, [r7, #22]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c1a0:	4413      	add	r3, r2
 800c1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1b1      	bne.n	800c114 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c1b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	374c      	adds	r7, #76	@ 0x4c
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b08b      	sub	sp, #44	@ 0x2c
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	ed87 0a02 	vstr	s0, [r7, #8]
 800c1d0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	885b      	ldrh	r3, [r3, #2]
 800c1e8:	fb02 f303 	mul.w	r3, r2, r3
 800c1ec:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c1f2:	e010      	b.n	800c216 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	1d1a      	adds	r2, r3, #4
 800c1f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1fa:	ed93 7a00 	vldr	s14, [r3]
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	1d1a      	adds	r2, r3, #4
 800c202:	623a      	str	r2, [r7, #32]
 800c204:	edd7 7a02 	vldr	s15, [r7, #8]
 800c208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c20c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3b01      	subs	r3, #1
 800c214:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1eb      	bne.n	800c1f4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c21c:	2300      	movs	r3, #0
 800c21e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800c220:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c224:	4618      	mov	r0, r3
 800c226:	372c      	adds	r7, #44	@ 0x2c
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c230:	b480      	push	{r7}
 800c232:	b08b      	sub	sp, #44	@ 0x2c
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	885b      	ldrh	r3, [r3, #2]
 800c258:	fb02 f303 	mul.w	r3, r2, r3
 800c25c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c262:	e013      	b.n	800c28c <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	627a      	str	r2, [r7, #36]	@ 0x24
 800c26a:	ed93 7a00 	vldr	s14, [r3]
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	1d1a      	adds	r2, r3, #4
 800c272:	623a      	str	r2, [r7, #32]
 800c274:	edd3 7a00 	vldr	s15, [r3]
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	1d1a      	adds	r2, r3, #4
 800c27c:	61fa      	str	r2, [r7, #28]
 800c27e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c282:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	3b01      	subs	r3, #1
 800c28a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1e8      	bne.n	800c264 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c292:	2300      	movs	r3, #0
 800c294:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c296:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	372c      	adds	r7, #44	@ 0x2c
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr

0800c2a6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b08b      	sub	sp, #44	@ 0x2c
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	881b      	ldrh	r3, [r3, #0]
 800c2c0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	885b      	ldrh	r3, [r3, #2]
 800c2c6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c2c8:	89fb      	ldrh	r3, [r7, #14]
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c2da:	89bb      	ldrh	r3, [r7, #12]
 800c2dc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c2de:	e00d      	b.n	800c2fc <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	1d1a      	adds	r2, r3, #4
 800c2e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c2ec:	89fb      	ldrh	r3, [r7, #14]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1ee      	bne.n	800c2e0 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	3301      	adds	r3, #1
 800c306:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1dd      	bne.n	800c2d0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c314:	2300      	movs	r3, #0
 800c316:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c318:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	372c      	adds	r7, #44	@ 0x2c
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <malloc>:
 800c328:	4b02      	ldr	r3, [pc, #8]	@ (800c334 <malloc+0xc>)
 800c32a:	4601      	mov	r1, r0
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	f000 b825 	b.w	800c37c <_malloc_r>
 800c332:	bf00      	nop
 800c334:	20000164 	.word	0x20000164

0800c338 <sbrk_aligned>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	4e0f      	ldr	r6, [pc, #60]	@ (800c378 <sbrk_aligned+0x40>)
 800c33c:	460c      	mov	r4, r1
 800c33e:	6831      	ldr	r1, [r6, #0]
 800c340:	4605      	mov	r5, r0
 800c342:	b911      	cbnz	r1, 800c34a <sbrk_aligned+0x12>
 800c344:	f000 f8ae 	bl	800c4a4 <_sbrk_r>
 800c348:	6030      	str	r0, [r6, #0]
 800c34a:	4621      	mov	r1, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	f000 f8a9 	bl	800c4a4 <_sbrk_r>
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	d103      	bne.n	800c35e <sbrk_aligned+0x26>
 800c356:	f04f 34ff 	mov.w	r4, #4294967295
 800c35a:	4620      	mov	r0, r4
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	1cc4      	adds	r4, r0, #3
 800c360:	f024 0403 	bic.w	r4, r4, #3
 800c364:	42a0      	cmp	r0, r4
 800c366:	d0f8      	beq.n	800c35a <sbrk_aligned+0x22>
 800c368:	1a21      	subs	r1, r4, r0
 800c36a:	4628      	mov	r0, r5
 800c36c:	f000 f89a 	bl	800c4a4 <_sbrk_r>
 800c370:	3001      	adds	r0, #1
 800c372:	d1f2      	bne.n	800c35a <sbrk_aligned+0x22>
 800c374:	e7ef      	b.n	800c356 <sbrk_aligned+0x1e>
 800c376:	bf00      	nop
 800c378:	20001b6c 	.word	0x20001b6c

0800c37c <_malloc_r>:
 800c37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c380:	1ccd      	adds	r5, r1, #3
 800c382:	f025 0503 	bic.w	r5, r5, #3
 800c386:	3508      	adds	r5, #8
 800c388:	2d0c      	cmp	r5, #12
 800c38a:	bf38      	it	cc
 800c38c:	250c      	movcc	r5, #12
 800c38e:	2d00      	cmp	r5, #0
 800c390:	4606      	mov	r6, r0
 800c392:	db01      	blt.n	800c398 <_malloc_r+0x1c>
 800c394:	42a9      	cmp	r1, r5
 800c396:	d904      	bls.n	800c3a2 <_malloc_r+0x26>
 800c398:	230c      	movs	r3, #12
 800c39a:	6033      	str	r3, [r6, #0]
 800c39c:	2000      	movs	r0, #0
 800c39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c478 <_malloc_r+0xfc>
 800c3a6:	f000 f869 	bl	800c47c <__malloc_lock>
 800c3aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ae:	461c      	mov	r4, r3
 800c3b0:	bb44      	cbnz	r4, 800c404 <_malloc_r+0x88>
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff ffbf 	bl	800c338 <sbrk_aligned>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	4604      	mov	r4, r0
 800c3be:	d158      	bne.n	800c472 <_malloc_r+0xf6>
 800c3c0:	f8d8 4000 	ldr.w	r4, [r8]
 800c3c4:	4627      	mov	r7, r4
 800c3c6:	2f00      	cmp	r7, #0
 800c3c8:	d143      	bne.n	800c452 <_malloc_r+0xd6>
 800c3ca:	2c00      	cmp	r4, #0
 800c3cc:	d04b      	beq.n	800c466 <_malloc_r+0xea>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	eb04 0903 	add.w	r9, r4, r3
 800c3d8:	f000 f864 	bl	800c4a4 <_sbrk_r>
 800c3dc:	4581      	cmp	r9, r0
 800c3de:	d142      	bne.n	800c466 <_malloc_r+0xea>
 800c3e0:	6821      	ldr	r1, [r4, #0]
 800c3e2:	1a6d      	subs	r5, r5, r1
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ffa6 	bl	800c338 <sbrk_aligned>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	d03a      	beq.n	800c466 <_malloc_r+0xea>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	442b      	add	r3, r5
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	bb62      	cbnz	r2, 800c458 <_malloc_r+0xdc>
 800c3fe:	f8c8 7000 	str.w	r7, [r8]
 800c402:	e00f      	b.n	800c424 <_malloc_r+0xa8>
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	1b52      	subs	r2, r2, r5
 800c408:	d420      	bmi.n	800c44c <_malloc_r+0xd0>
 800c40a:	2a0b      	cmp	r2, #11
 800c40c:	d917      	bls.n	800c43e <_malloc_r+0xc2>
 800c40e:	1961      	adds	r1, r4, r5
 800c410:	42a3      	cmp	r3, r4
 800c412:	6025      	str	r5, [r4, #0]
 800c414:	bf18      	it	ne
 800c416:	6059      	strne	r1, [r3, #4]
 800c418:	6863      	ldr	r3, [r4, #4]
 800c41a:	bf08      	it	eq
 800c41c:	f8c8 1000 	streq.w	r1, [r8]
 800c420:	5162      	str	r2, [r4, r5]
 800c422:	604b      	str	r3, [r1, #4]
 800c424:	4630      	mov	r0, r6
 800c426:	f000 f82f 	bl	800c488 <__malloc_unlock>
 800c42a:	f104 000b 	add.w	r0, r4, #11
 800c42e:	1d23      	adds	r3, r4, #4
 800c430:	f020 0007 	bic.w	r0, r0, #7
 800c434:	1ac2      	subs	r2, r0, r3
 800c436:	bf1c      	itt	ne
 800c438:	1a1b      	subne	r3, r3, r0
 800c43a:	50a3      	strne	r3, [r4, r2]
 800c43c:	e7af      	b.n	800c39e <_malloc_r+0x22>
 800c43e:	6862      	ldr	r2, [r4, #4]
 800c440:	42a3      	cmp	r3, r4
 800c442:	bf0c      	ite	eq
 800c444:	f8c8 2000 	streq.w	r2, [r8]
 800c448:	605a      	strne	r2, [r3, #4]
 800c44a:	e7eb      	b.n	800c424 <_malloc_r+0xa8>
 800c44c:	4623      	mov	r3, r4
 800c44e:	6864      	ldr	r4, [r4, #4]
 800c450:	e7ae      	b.n	800c3b0 <_malloc_r+0x34>
 800c452:	463c      	mov	r4, r7
 800c454:	687f      	ldr	r7, [r7, #4]
 800c456:	e7b6      	b.n	800c3c6 <_malloc_r+0x4a>
 800c458:	461a      	mov	r2, r3
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	d1fb      	bne.n	800c458 <_malloc_r+0xdc>
 800c460:	2300      	movs	r3, #0
 800c462:	6053      	str	r3, [r2, #4]
 800c464:	e7de      	b.n	800c424 <_malloc_r+0xa8>
 800c466:	230c      	movs	r3, #12
 800c468:	6033      	str	r3, [r6, #0]
 800c46a:	4630      	mov	r0, r6
 800c46c:	f000 f80c 	bl	800c488 <__malloc_unlock>
 800c470:	e794      	b.n	800c39c <_malloc_r+0x20>
 800c472:	6005      	str	r5, [r0, #0]
 800c474:	e7d6      	b.n	800c424 <_malloc_r+0xa8>
 800c476:	bf00      	nop
 800c478:	20001b70 	.word	0x20001b70

0800c47c <__malloc_lock>:
 800c47c:	4801      	ldr	r0, [pc, #4]	@ (800c484 <__malloc_lock+0x8>)
 800c47e:	f000 b84b 	b.w	800c518 <__retarget_lock_acquire_recursive>
 800c482:	bf00      	nop
 800c484:	20001cb0 	.word	0x20001cb0

0800c488 <__malloc_unlock>:
 800c488:	4801      	ldr	r0, [pc, #4]	@ (800c490 <__malloc_unlock+0x8>)
 800c48a:	f000 b846 	b.w	800c51a <__retarget_lock_release_recursive>
 800c48e:	bf00      	nop
 800c490:	20001cb0 	.word	0x20001cb0

0800c494 <memset>:
 800c494:	4402      	add	r2, r0
 800c496:	4603      	mov	r3, r0
 800c498:	4293      	cmp	r3, r2
 800c49a:	d100      	bne.n	800c49e <memset+0xa>
 800c49c:	4770      	bx	lr
 800c49e:	f803 1b01 	strb.w	r1, [r3], #1
 800c4a2:	e7f9      	b.n	800c498 <memset+0x4>

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	@ (800c4c0 <_sbrk_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f7 f9b4 	bl	800381c <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20001cac 	.word	0x20001cac

0800c4c4 <__errno>:
 800c4c4:	4b01      	ldr	r3, [pc, #4]	@ (800c4cc <__errno+0x8>)
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20000164 	.word	0x20000164

0800c4d0 <__libc_init_array>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	4d0d      	ldr	r5, [pc, #52]	@ (800c508 <__libc_init_array+0x38>)
 800c4d4:	4c0d      	ldr	r4, [pc, #52]	@ (800c50c <__libc_init_array+0x3c>)
 800c4d6:	1b64      	subs	r4, r4, r5
 800c4d8:	10a4      	asrs	r4, r4, #2
 800c4da:	2600      	movs	r6, #0
 800c4dc:	42a6      	cmp	r6, r4
 800c4de:	d109      	bne.n	800c4f4 <__libc_init_array+0x24>
 800c4e0:	4d0b      	ldr	r5, [pc, #44]	@ (800c510 <__libc_init_array+0x40>)
 800c4e2:	4c0c      	ldr	r4, [pc, #48]	@ (800c514 <__libc_init_array+0x44>)
 800c4e4:	f001 f98a 	bl	800d7fc <_init>
 800c4e8:	1b64      	subs	r4, r4, r5
 800c4ea:	10a4      	asrs	r4, r4, #2
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	42a6      	cmp	r6, r4
 800c4f0:	d105      	bne.n	800c4fe <__libc_init_array+0x2e>
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f8:	4798      	blx	r3
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	e7ee      	b.n	800c4dc <__libc_init_array+0xc>
 800c4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c502:	4798      	blx	r3
 800c504:	3601      	adds	r6, #1
 800c506:	e7f2      	b.n	800c4ee <__libc_init_array+0x1e>
 800c508:	0800e490 	.word	0x0800e490
 800c50c:	0800e490 	.word	0x0800e490
 800c510:	0800e490 	.word	0x0800e490
 800c514:	0800e494 	.word	0x0800e494

0800c518 <__retarget_lock_acquire_recursive>:
 800c518:	4770      	bx	lr

0800c51a <__retarget_lock_release_recursive>:
 800c51a:	4770      	bx	lr

0800c51c <fmodf>:
 800c51c:	b508      	push	{r3, lr}
 800c51e:	ed2d 8b02 	vpush	{d8}
 800c522:	eef0 8a40 	vmov.f32	s17, s0
 800c526:	eeb0 8a60 	vmov.f32	s16, s1
 800c52a:	f000 f9cd 	bl	800c8c8 <__ieee754_fmodf>
 800c52e:	eef4 8a48 	vcmp.f32	s17, s16
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	d60c      	bvs.n	800c552 <fmodf+0x36>
 800c538:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c558 <fmodf+0x3c>
 800c53c:	eeb4 8a68 	vcmp.f32	s16, s17
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	d105      	bne.n	800c552 <fmodf+0x36>
 800c546:	f7ff ffbd 	bl	800c4c4 <__errno>
 800c54a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c54e:	2321      	movs	r3, #33	@ 0x21
 800c550:	6003      	str	r3, [r0, #0]
 800c552:	ecbd 8b02 	vpop	{d8}
 800c556:	bd08      	pop	{r3, pc}
 800c558:	00000000 	.word	0x00000000

0800c55c <powf>:
 800c55c:	b508      	push	{r3, lr}
 800c55e:	ed2d 8b04 	vpush	{d8-d9}
 800c562:	eeb0 8a60 	vmov.f32	s16, s1
 800c566:	eeb0 9a40 	vmov.f32	s18, s0
 800c56a:	f000 fa2f 	bl	800c9cc <__ieee754_powf>
 800c56e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c576:	eef0 8a40 	vmov.f32	s17, s0
 800c57a:	d63e      	bvs.n	800c5fa <powf+0x9e>
 800c57c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c584:	d112      	bne.n	800c5ac <powf+0x50>
 800c586:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58e:	d039      	beq.n	800c604 <powf+0xa8>
 800c590:	eeb0 0a48 	vmov.f32	s0, s16
 800c594:	f000 f8c4 	bl	800c720 <finitef>
 800c598:	b378      	cbz	r0, 800c5fa <powf+0x9e>
 800c59a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a2:	d52a      	bpl.n	800c5fa <powf+0x9e>
 800c5a4:	f7ff ff8e 	bl	800c4c4 <__errno>
 800c5a8:	2322      	movs	r3, #34	@ 0x22
 800c5aa:	e014      	b.n	800c5d6 <powf+0x7a>
 800c5ac:	f000 f8b8 	bl	800c720 <finitef>
 800c5b0:	b998      	cbnz	r0, 800c5da <powf+0x7e>
 800c5b2:	eeb0 0a49 	vmov.f32	s0, s18
 800c5b6:	f000 f8b3 	bl	800c720 <finitef>
 800c5ba:	b170      	cbz	r0, 800c5da <powf+0x7e>
 800c5bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c5c0:	f000 f8ae 	bl	800c720 <finitef>
 800c5c4:	b148      	cbz	r0, 800c5da <powf+0x7e>
 800c5c6:	eef4 8a68 	vcmp.f32	s17, s17
 800c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ce:	d7e9      	bvc.n	800c5a4 <powf+0x48>
 800c5d0:	f7ff ff78 	bl	800c4c4 <__errno>
 800c5d4:	2321      	movs	r3, #33	@ 0x21
 800c5d6:	6003      	str	r3, [r0, #0]
 800c5d8:	e00f      	b.n	800c5fa <powf+0x9e>
 800c5da:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e2:	d10a      	bne.n	800c5fa <powf+0x9e>
 800c5e4:	eeb0 0a49 	vmov.f32	s0, s18
 800c5e8:	f000 f89a 	bl	800c720 <finitef>
 800c5ec:	b128      	cbz	r0, 800c5fa <powf+0x9e>
 800c5ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c5f2:	f000 f895 	bl	800c720 <finitef>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d1d4      	bne.n	800c5a4 <powf+0x48>
 800c5fa:	eeb0 0a68 	vmov.f32	s0, s17
 800c5fe:	ecbd 8b04 	vpop	{d8-d9}
 800c602:	bd08      	pop	{r3, pc}
 800c604:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800c608:	e7f7      	b.n	800c5fa <powf+0x9e>
	...

0800c60c <cosf>:
 800c60c:	ee10 3a10 	vmov	r3, s0
 800c610:	b507      	push	{r0, r1, r2, lr}
 800c612:	4a1e      	ldr	r2, [pc, #120]	@ (800c68c <cosf+0x80>)
 800c614:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c618:	4293      	cmp	r3, r2
 800c61a:	d806      	bhi.n	800c62a <cosf+0x1e>
 800c61c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c690 <cosf+0x84>
 800c620:	b003      	add	sp, #12
 800c622:	f85d eb04 	ldr.w	lr, [sp], #4
 800c626:	f000 b8af 	b.w	800c788 <__kernel_cosf>
 800c62a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c62e:	d304      	bcc.n	800c63a <cosf+0x2e>
 800c630:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c634:	b003      	add	sp, #12
 800c636:	f85d fb04 	ldr.w	pc, [sp], #4
 800c63a:	4668      	mov	r0, sp
 800c63c:	f000 fc94 	bl	800cf68 <__ieee754_rem_pio2f>
 800c640:	f000 0003 	and.w	r0, r0, #3
 800c644:	2801      	cmp	r0, #1
 800c646:	d009      	beq.n	800c65c <cosf+0x50>
 800c648:	2802      	cmp	r0, #2
 800c64a:	d010      	beq.n	800c66e <cosf+0x62>
 800c64c:	b9b0      	cbnz	r0, 800c67c <cosf+0x70>
 800c64e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c652:	ed9d 0a00 	vldr	s0, [sp]
 800c656:	f000 f897 	bl	800c788 <__kernel_cosf>
 800c65a:	e7eb      	b.n	800c634 <cosf+0x28>
 800c65c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c660:	ed9d 0a00 	vldr	s0, [sp]
 800c664:	f000 f8e8 	bl	800c838 <__kernel_sinf>
 800c668:	eeb1 0a40 	vneg.f32	s0, s0
 800c66c:	e7e2      	b.n	800c634 <cosf+0x28>
 800c66e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c672:	ed9d 0a00 	vldr	s0, [sp]
 800c676:	f000 f887 	bl	800c788 <__kernel_cosf>
 800c67a:	e7f5      	b.n	800c668 <cosf+0x5c>
 800c67c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c680:	ed9d 0a00 	vldr	s0, [sp]
 800c684:	2001      	movs	r0, #1
 800c686:	f000 f8d7 	bl	800c838 <__kernel_sinf>
 800c68a:	e7d3      	b.n	800c634 <cosf+0x28>
 800c68c:	3f490fd8 	.word	0x3f490fd8
 800c690:	00000000 	.word	0x00000000

0800c694 <sinf>:
 800c694:	ee10 3a10 	vmov	r3, s0
 800c698:	b507      	push	{r0, r1, r2, lr}
 800c69a:	4a1f      	ldr	r2, [pc, #124]	@ (800c718 <sinf+0x84>)
 800c69c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d807      	bhi.n	800c6b4 <sinf+0x20>
 800c6a4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c71c <sinf+0x88>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	b003      	add	sp, #12
 800c6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b0:	f000 b8c2 	b.w	800c838 <__kernel_sinf>
 800c6b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c6b8:	d304      	bcc.n	800c6c4 <sinf+0x30>
 800c6ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c6be:	b003      	add	sp, #12
 800c6c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6c4:	4668      	mov	r0, sp
 800c6c6:	f000 fc4f 	bl	800cf68 <__ieee754_rem_pio2f>
 800c6ca:	f000 0003 	and.w	r0, r0, #3
 800c6ce:	2801      	cmp	r0, #1
 800c6d0:	d00a      	beq.n	800c6e8 <sinf+0x54>
 800c6d2:	2802      	cmp	r0, #2
 800c6d4:	d00f      	beq.n	800c6f6 <sinf+0x62>
 800c6d6:	b9c0      	cbnz	r0, 800c70a <sinf+0x76>
 800c6d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6dc:	ed9d 0a00 	vldr	s0, [sp]
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f000 f8a9 	bl	800c838 <__kernel_sinf>
 800c6e6:	e7ea      	b.n	800c6be <sinf+0x2a>
 800c6e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6ec:	ed9d 0a00 	vldr	s0, [sp]
 800c6f0:	f000 f84a 	bl	800c788 <__kernel_cosf>
 800c6f4:	e7e3      	b.n	800c6be <sinf+0x2a>
 800c6f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6fa:	ed9d 0a00 	vldr	s0, [sp]
 800c6fe:	2001      	movs	r0, #1
 800c700:	f000 f89a 	bl	800c838 <__kernel_sinf>
 800c704:	eeb1 0a40 	vneg.f32	s0, s0
 800c708:	e7d9      	b.n	800c6be <sinf+0x2a>
 800c70a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c70e:	ed9d 0a00 	vldr	s0, [sp]
 800c712:	f000 f839 	bl	800c788 <__kernel_cosf>
 800c716:	e7f5      	b.n	800c704 <sinf+0x70>
 800c718:	3f490fd8 	.word	0x3f490fd8
 800c71c:	00000000 	.word	0x00000000

0800c720 <finitef>:
 800c720:	ee10 3a10 	vmov	r3, s0
 800c724:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c728:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c72c:	bfac      	ite	ge
 800c72e:	2000      	movge	r0, #0
 800c730:	2001      	movlt	r0, #1
 800c732:	4770      	bx	lr

0800c734 <with_errnof>:
 800c734:	b510      	push	{r4, lr}
 800c736:	ed2d 8b02 	vpush	{d8}
 800c73a:	eeb0 8a40 	vmov.f32	s16, s0
 800c73e:	4604      	mov	r4, r0
 800c740:	f7ff fec0 	bl	800c4c4 <__errno>
 800c744:	eeb0 0a48 	vmov.f32	s0, s16
 800c748:	ecbd 8b02 	vpop	{d8}
 800c74c:	6004      	str	r4, [r0, #0]
 800c74e:	bd10      	pop	{r4, pc}

0800c750 <xflowf>:
 800c750:	b130      	cbz	r0, 800c760 <xflowf+0x10>
 800c752:	eef1 7a40 	vneg.f32	s15, s0
 800c756:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c75a:	2022      	movs	r0, #34	@ 0x22
 800c75c:	f7ff bfea 	b.w	800c734 <with_errnof>
 800c760:	eef0 7a40 	vmov.f32	s15, s0
 800c764:	e7f7      	b.n	800c756 <xflowf+0x6>
	...

0800c768 <__math_uflowf>:
 800c768:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c770 <__math_uflowf+0x8>
 800c76c:	f7ff bff0 	b.w	800c750 <xflowf>
 800c770:	10000000 	.word	0x10000000

0800c774 <__math_oflowf>:
 800c774:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c77c <__math_oflowf+0x8>
 800c778:	f7ff bfea 	b.w	800c750 <xflowf>
 800c77c:	70000000 	.word	0x70000000

0800c780 <__ieee754_sqrtf>:
 800c780:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c784:	4770      	bx	lr
	...

0800c788 <__kernel_cosf>:
 800c788:	ee10 3a10 	vmov	r3, s0
 800c78c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c790:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c794:	eef0 6a40 	vmov.f32	s13, s0
 800c798:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c79c:	d204      	bcs.n	800c7a8 <__kernel_cosf+0x20>
 800c79e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c7a2:	ee17 2a90 	vmov	r2, s15
 800c7a6:	b342      	cbz	r2, 800c7fa <__kernel_cosf+0x72>
 800c7a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c7ac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c818 <__kernel_cosf+0x90>
 800c7b0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c81c <__kernel_cosf+0x94>
 800c7b4:	4a1a      	ldr	r2, [pc, #104]	@ (800c820 <__kernel_cosf+0x98>)
 800c7b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c824 <__kernel_cosf+0x9c>
 800c7c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7c4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c828 <__kernel_cosf+0xa0>
 800c7c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c7cc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c82c <__kernel_cosf+0xa4>
 800c7d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7d4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c830 <__kernel_cosf+0xa8>
 800c7d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c7dc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c7e0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c7e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c7e8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f0:	d804      	bhi.n	800c7fc <__kernel_cosf+0x74>
 800c7f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c7f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7fa:	4770      	bx	lr
 800c7fc:	4a0d      	ldr	r2, [pc, #52]	@ (800c834 <__kernel_cosf+0xac>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	bf9a      	itte	ls
 800c802:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c806:	ee07 3a10 	vmovls	s14, r3
 800c80a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c80e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c816:	e7ec      	b.n	800c7f2 <__kernel_cosf+0x6a>
 800c818:	ad47d74e 	.word	0xad47d74e
 800c81c:	310f74f6 	.word	0x310f74f6
 800c820:	3e999999 	.word	0x3e999999
 800c824:	b493f27c 	.word	0xb493f27c
 800c828:	37d00d01 	.word	0x37d00d01
 800c82c:	bab60b61 	.word	0xbab60b61
 800c830:	3d2aaaab 	.word	0x3d2aaaab
 800c834:	3f480000 	.word	0x3f480000

0800c838 <__kernel_sinf>:
 800c838:	ee10 3a10 	vmov	r3, s0
 800c83c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c840:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c844:	d204      	bcs.n	800c850 <__kernel_sinf+0x18>
 800c846:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c84a:	ee17 3a90 	vmov	r3, s15
 800c84e:	b35b      	cbz	r3, 800c8a8 <__kernel_sinf+0x70>
 800c850:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c854:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c8ac <__kernel_sinf+0x74>
 800c858:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c8b0 <__kernel_sinf+0x78>
 800c85c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c860:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c8b4 <__kernel_sinf+0x7c>
 800c864:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c868:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c8b8 <__kernel_sinf+0x80>
 800c86c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c870:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c8bc <__kernel_sinf+0x84>
 800c874:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c878:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c87c:	b930      	cbnz	r0, 800c88c <__kernel_sinf+0x54>
 800c87e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c8c0 <__kernel_sinf+0x88>
 800c882:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c886:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c88a:	4770      	bx	lr
 800c88c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c890:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c894:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c898:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c89c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c8c4 <__kernel_sinf+0x8c>
 800c8a0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c8a4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	2f2ec9d3 	.word	0x2f2ec9d3
 800c8b0:	b2d72f34 	.word	0xb2d72f34
 800c8b4:	3638ef1b 	.word	0x3638ef1b
 800c8b8:	b9500d01 	.word	0xb9500d01
 800c8bc:	3c088889 	.word	0x3c088889
 800c8c0:	be2aaaab 	.word	0xbe2aaaab
 800c8c4:	3e2aaaab 	.word	0x3e2aaaab

0800c8c8 <__ieee754_fmodf>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	ee10 6a90 	vmov	r6, s1
 800c8ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c8d2:	1e5a      	subs	r2, r3, #1
 800c8d4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c8d8:	d206      	bcs.n	800c8e8 <__ieee754_fmodf+0x20>
 800c8da:	ee10 4a10 	vmov	r4, s0
 800c8de:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800c8e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c8e6:	d304      	bcc.n	800c8f2 <__ieee754_fmodf+0x2a>
 800c8e8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c8ec:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c8f0:	bd70      	pop	{r4, r5, r6, pc}
 800c8f2:	4299      	cmp	r1, r3
 800c8f4:	dbfc      	blt.n	800c8f0 <__ieee754_fmodf+0x28>
 800c8f6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800c8fa:	d105      	bne.n	800c908 <__ieee754_fmodf+0x40>
 800c8fc:	4b32      	ldr	r3, [pc, #200]	@ (800c9c8 <__ieee754_fmodf+0x100>)
 800c8fe:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800c902:	ed93 0a00 	vldr	s0, [r3]
 800c906:	e7f3      	b.n	800c8f0 <__ieee754_fmodf+0x28>
 800c908:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c90c:	d146      	bne.n	800c99c <__ieee754_fmodf+0xd4>
 800c90e:	020a      	lsls	r2, r1, #8
 800c910:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800c914:	2a00      	cmp	r2, #0
 800c916:	dc3e      	bgt.n	800c996 <__ieee754_fmodf+0xce>
 800c918:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c91c:	bf01      	itttt	eq
 800c91e:	021a      	lsleq	r2, r3, #8
 800c920:	fab2 f282 	clzeq	r2, r2
 800c924:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800c928:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800c92c:	bf16      	itet	ne
 800c92e:	15da      	asrne	r2, r3, #23
 800c930:	3282      	addeq	r2, #130	@ 0x82
 800c932:	3a7f      	subne	r2, #127	@ 0x7f
 800c934:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800c938:	bfbb      	ittet	lt
 800c93a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c93e:	1a24      	sublt	r4, r4, r0
 800c940:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800c944:	40a1      	lsllt	r1, r4
 800c946:	bfa8      	it	ge
 800c948:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800c94c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c950:	bfb5      	itete	lt
 800c952:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c956:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800c95a:	1aa4      	sublt	r4, r4, r2
 800c95c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800c960:	bfb8      	it	lt
 800c962:	fa03 f404 	lsllt.w	r4, r3, r4
 800c966:	1a80      	subs	r0, r0, r2
 800c968:	1b0b      	subs	r3, r1, r4
 800c96a:	b9d0      	cbnz	r0, 800c9a2 <__ieee754_fmodf+0xda>
 800c96c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800c970:	bf28      	it	cs
 800c972:	460b      	movcs	r3, r1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d0c1      	beq.n	800c8fc <__ieee754_fmodf+0x34>
 800c978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c97c:	db19      	blt.n	800c9b2 <__ieee754_fmodf+0xea>
 800c97e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c982:	db19      	blt.n	800c9b8 <__ieee754_fmodf+0xf0>
 800c984:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c988:	327f      	adds	r2, #127	@ 0x7f
 800c98a:	432b      	orrs	r3, r5
 800c98c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c990:	ee00 3a10 	vmov	s0, r3
 800c994:	e7ac      	b.n	800c8f0 <__ieee754_fmodf+0x28>
 800c996:	3801      	subs	r0, #1
 800c998:	0052      	lsls	r2, r2, #1
 800c99a:	e7bb      	b.n	800c914 <__ieee754_fmodf+0x4c>
 800c99c:	15c8      	asrs	r0, r1, #23
 800c99e:	387f      	subs	r0, #127	@ 0x7f
 800c9a0:	e7ba      	b.n	800c918 <__ieee754_fmodf+0x50>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	da02      	bge.n	800c9ac <__ieee754_fmodf+0xe4>
 800c9a6:	0049      	lsls	r1, r1, #1
 800c9a8:	3801      	subs	r0, #1
 800c9aa:	e7dd      	b.n	800c968 <__ieee754_fmodf+0xa0>
 800c9ac:	d0a6      	beq.n	800c8fc <__ieee754_fmodf+0x34>
 800c9ae:	0059      	lsls	r1, r3, #1
 800c9b0:	e7fa      	b.n	800c9a8 <__ieee754_fmodf+0xe0>
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	3a01      	subs	r2, #1
 800c9b6:	e7df      	b.n	800c978 <__ieee754_fmodf+0xb0>
 800c9b8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c9bc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c9c0:	3282      	adds	r2, #130	@ 0x82
 800c9c2:	4113      	asrs	r3, r2
 800c9c4:	432b      	orrs	r3, r5
 800c9c6:	e7e3      	b.n	800c990 <__ieee754_fmodf+0xc8>
 800c9c8:	0800e098 	.word	0x0800e098

0800c9cc <__ieee754_powf>:
 800c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d0:	ee10 4a90 	vmov	r4, s1
 800c9d4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800c9d8:	ed2d 8b02 	vpush	{d8}
 800c9dc:	ee10 6a10 	vmov	r6, s0
 800c9e0:	eeb0 8a40 	vmov.f32	s16, s0
 800c9e4:	eef0 8a60 	vmov.f32	s17, s1
 800c9e8:	d10c      	bne.n	800ca04 <__ieee754_powf+0x38>
 800c9ea:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800c9ee:	0076      	lsls	r6, r6, #1
 800c9f0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800c9f4:	f240 8274 	bls.w	800cee0 <__ieee754_powf+0x514>
 800c9f8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c9fc:	ecbd 8b02 	vpop	{d8}
 800ca00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca04:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ca08:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ca0c:	d802      	bhi.n	800ca14 <__ieee754_powf+0x48>
 800ca0e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ca12:	d908      	bls.n	800ca26 <__ieee754_powf+0x5a>
 800ca14:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ca18:	d1ee      	bne.n	800c9f8 <__ieee754_powf+0x2c>
 800ca1a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ca1e:	0064      	lsls	r4, r4, #1
 800ca20:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ca24:	e7e6      	b.n	800c9f4 <__ieee754_powf+0x28>
 800ca26:	2e00      	cmp	r6, #0
 800ca28:	da1f      	bge.n	800ca6a <__ieee754_powf+0x9e>
 800ca2a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ca2e:	f080 8260 	bcs.w	800cef2 <__ieee754_powf+0x526>
 800ca32:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ca36:	d32f      	bcc.n	800ca98 <__ieee754_powf+0xcc>
 800ca38:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ca3c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ca40:	fa49 f503 	asr.w	r5, r9, r3
 800ca44:	fa05 f303 	lsl.w	r3, r5, r3
 800ca48:	454b      	cmp	r3, r9
 800ca4a:	d123      	bne.n	800ca94 <__ieee754_powf+0xc8>
 800ca4c:	f005 0501 	and.w	r5, r5, #1
 800ca50:	f1c5 0502 	rsb	r5, r5, #2
 800ca54:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ca58:	d11f      	bne.n	800ca9a <__ieee754_powf+0xce>
 800ca5a:	2c00      	cmp	r4, #0
 800ca5c:	f280 8246 	bge.w	800ceec <__ieee754_powf+0x520>
 800ca60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ca64:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ca68:	e7c8      	b.n	800c9fc <__ieee754_powf+0x30>
 800ca6a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ca6e:	d111      	bne.n	800ca94 <__ieee754_powf+0xc8>
 800ca70:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ca74:	f000 8234 	beq.w	800cee0 <__ieee754_powf+0x514>
 800ca78:	d906      	bls.n	800ca88 <__ieee754_powf+0xbc>
 800ca7a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800cd90 <__ieee754_powf+0x3c4>
 800ca7e:	2c00      	cmp	r4, #0
 800ca80:	bfa8      	it	ge
 800ca82:	eeb0 0a68 	vmovge.f32	s0, s17
 800ca86:	e7b9      	b.n	800c9fc <__ieee754_powf+0x30>
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	f280 822c 	bge.w	800cee6 <__ieee754_powf+0x51a>
 800ca8e:	eeb1 0a68 	vneg.f32	s0, s17
 800ca92:	e7b3      	b.n	800c9fc <__ieee754_powf+0x30>
 800ca94:	2500      	movs	r5, #0
 800ca96:	e7dd      	b.n	800ca54 <__ieee754_powf+0x88>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ca9e:	d102      	bne.n	800caa6 <__ieee754_powf+0xda>
 800caa0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800caa4:	e7aa      	b.n	800c9fc <__ieee754_powf+0x30>
 800caa6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800caaa:	f040 8227 	bne.w	800cefc <__ieee754_powf+0x530>
 800caae:	2e00      	cmp	r6, #0
 800cab0:	f2c0 8224 	blt.w	800cefc <__ieee754_powf+0x530>
 800cab4:	eeb0 0a48 	vmov.f32	s0, s16
 800cab8:	ecbd 8b02 	vpop	{d8}
 800cabc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac0:	f7ff be5e 	b.w	800c780 <__ieee754_sqrtf>
 800cac4:	2d01      	cmp	r5, #1
 800cac6:	d199      	bne.n	800c9fc <__ieee754_powf+0x30>
 800cac8:	eeb1 0a40 	vneg.f32	s0, s0
 800cacc:	e796      	b.n	800c9fc <__ieee754_powf+0x30>
 800cace:	0ff0      	lsrs	r0, r6, #31
 800cad0:	3801      	subs	r0, #1
 800cad2:	ea55 0300 	orrs.w	r3, r5, r0
 800cad6:	d104      	bne.n	800cae2 <__ieee754_powf+0x116>
 800cad8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cadc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cae0:	e78c      	b.n	800c9fc <__ieee754_powf+0x30>
 800cae2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800cae6:	d96d      	bls.n	800cbc4 <__ieee754_powf+0x1f8>
 800cae8:	4baa      	ldr	r3, [pc, #680]	@ (800cd94 <__ieee754_powf+0x3c8>)
 800caea:	4598      	cmp	r8, r3
 800caec:	d808      	bhi.n	800cb00 <__ieee754_powf+0x134>
 800caee:	2c00      	cmp	r4, #0
 800caf0:	da0b      	bge.n	800cb0a <__ieee754_powf+0x13e>
 800caf2:	2000      	movs	r0, #0
 800caf4:	ecbd 8b02 	vpop	{d8}
 800caf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	f7ff be3a 	b.w	800c774 <__math_oflowf>
 800cb00:	4ba5      	ldr	r3, [pc, #660]	@ (800cd98 <__ieee754_powf+0x3cc>)
 800cb02:	4598      	cmp	r8, r3
 800cb04:	d908      	bls.n	800cb18 <__ieee754_powf+0x14c>
 800cb06:	2c00      	cmp	r4, #0
 800cb08:	dcf3      	bgt.n	800caf2 <__ieee754_powf+0x126>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	ecbd 8b02 	vpop	{d8}
 800cb10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	f7ff be28 	b.w	800c768 <__math_uflowf>
 800cb18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb20:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800cd9c <__ieee754_powf+0x3d0>
 800cb24:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800cb28:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cb2c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cb30:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cb34:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb38:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800cda0 <__ieee754_powf+0x3d4>
 800cb3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb40:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800cda4 <__ieee754_powf+0x3d8>
 800cb44:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800cb48:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800cda8 <__ieee754_powf+0x3dc>
 800cb4c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb50:	eeb0 7a67 	vmov.f32	s14, s15
 800cb54:	eea0 7a26 	vfma.f32	s14, s0, s13
 800cb58:	ee17 3a10 	vmov	r3, s14
 800cb5c:	f36f 030b 	bfc	r3, #0, #12
 800cb60:	ee07 3a10 	vmov	s14, r3
 800cb64:	eeb0 6a47 	vmov.f32	s12, s14
 800cb68:	eea0 6a66 	vfms.f32	s12, s0, s13
 800cb6c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cb70:	3d01      	subs	r5, #1
 800cb72:	4305      	orrs	r5, r0
 800cb74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb78:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800cb7c:	f36f 040b 	bfc	r4, #0, #12
 800cb80:	bf18      	it	ne
 800cb82:	eeb0 8a66 	vmovne.f32	s16, s13
 800cb86:	ee06 4a90 	vmov	s13, r4
 800cb8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cb8e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800cb92:	ee67 7a26 	vmul.f32	s15, s14, s13
 800cb96:	eee6 0a07 	vfma.f32	s1, s12, s14
 800cb9a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cb9e:	ee17 1a10 	vmov	r1, s14
 800cba2:	2900      	cmp	r1, #0
 800cba4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cba8:	f340 80dd 	ble.w	800cd66 <__ieee754_powf+0x39a>
 800cbac:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800cbb0:	f240 80ca 	bls.w	800cd48 <__ieee754_powf+0x37c>
 800cbb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbc:	bf4c      	ite	mi
 800cbbe:	2001      	movmi	r0, #1
 800cbc0:	2000      	movpl	r0, #0
 800cbc2:	e797      	b.n	800caf4 <__ieee754_powf+0x128>
 800cbc4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800cbc8:	bf01      	itttt	eq
 800cbca:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800cdac <__ieee754_powf+0x3e0>
 800cbce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cbd2:	f06f 0317 	mvneq.w	r3, #23
 800cbd6:	ee17 7a90 	vmoveq	r7, s15
 800cbda:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800cbde:	bf18      	it	ne
 800cbe0:	2300      	movne	r3, #0
 800cbe2:	3a7f      	subs	r2, #127	@ 0x7f
 800cbe4:	441a      	add	r2, r3
 800cbe6:	4b72      	ldr	r3, [pc, #456]	@ (800cdb0 <__ieee754_powf+0x3e4>)
 800cbe8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800cbec:	429f      	cmp	r7, r3
 800cbee:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800cbf2:	dd06      	ble.n	800cc02 <__ieee754_powf+0x236>
 800cbf4:	4b6f      	ldr	r3, [pc, #444]	@ (800cdb4 <__ieee754_powf+0x3e8>)
 800cbf6:	429f      	cmp	r7, r3
 800cbf8:	f340 80a4 	ble.w	800cd44 <__ieee754_powf+0x378>
 800cbfc:	3201      	adds	r2, #1
 800cbfe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800cc02:	2600      	movs	r6, #0
 800cc04:	4b6c      	ldr	r3, [pc, #432]	@ (800cdb8 <__ieee754_powf+0x3ec>)
 800cc06:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cc0a:	ee07 1a10 	vmov	s14, r1
 800cc0e:	edd3 5a00 	vldr	s11, [r3]
 800cc12:	4b6a      	ldr	r3, [pc, #424]	@ (800cdbc <__ieee754_powf+0x3f0>)
 800cc14:	ee75 7a87 	vadd.f32	s15, s11, s14
 800cc18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc1c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800cc20:	1049      	asrs	r1, r1, #1
 800cc22:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800cc26:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800cc2a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800cc2e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800cc32:	ee07 1a90 	vmov	s15, r1
 800cc36:	ee26 5a24 	vmul.f32	s10, s12, s9
 800cc3a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800cc3e:	ee15 7a10 	vmov	r7, s10
 800cc42:	401f      	ands	r7, r3
 800cc44:	ee06 7a90 	vmov	s13, r7
 800cc48:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800cc4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800cc50:	ee65 7a05 	vmul.f32	s15, s10, s10
 800cc54:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cc58:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cdc0 <__ieee754_powf+0x3f4>
 800cc5c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800cdc4 <__ieee754_powf+0x3f8>
 800cc60:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cc64:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800cdc8 <__ieee754_powf+0x3fc>
 800cc68:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc6c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800cd9c <__ieee754_powf+0x3d0>
 800cc70:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cc74:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800cdcc <__ieee754_powf+0x400>
 800cc78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc7c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800cdd0 <__ieee754_powf+0x404>
 800cc80:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cc84:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cc88:	ee35 7a26 	vadd.f32	s14, s10, s13
 800cc8c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cc90:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc94:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800cc98:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800cc9c:	eef0 5a67 	vmov.f32	s11, s15
 800cca0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800cca4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cca8:	ee15 1a90 	vmov	r1, s11
 800ccac:	4019      	ands	r1, r3
 800ccae:	ee05 1a90 	vmov	s11, r1
 800ccb2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ccb6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ccba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccbe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ccc2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ccc6:	eeb0 6a67 	vmov.f32	s12, s15
 800ccca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ccce:	ee16 1a10 	vmov	r1, s12
 800ccd2:	4019      	ands	r1, r3
 800ccd4:	ee06 1a10 	vmov	s12, r1
 800ccd8:	eeb0 7a46 	vmov.f32	s14, s12
 800ccdc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800cce0:	493c      	ldr	r1, [pc, #240]	@ (800cdd4 <__ieee754_powf+0x408>)
 800cce2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800cce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccea:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800cdd8 <__ieee754_powf+0x40c>
 800ccee:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800cddc <__ieee754_powf+0x410>
 800ccf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccf6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800cde0 <__ieee754_powf+0x414>
 800ccfa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ccfe:	ed91 7a00 	vldr	s14, [r1]
 800cd02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd06:	ee07 2a10 	vmov	s14, r2
 800cd0a:	4a36      	ldr	r2, [pc, #216]	@ (800cde4 <__ieee754_powf+0x418>)
 800cd0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800cd10:	eeb0 7a67 	vmov.f32	s14, s15
 800cd14:	eea6 7a25 	vfma.f32	s14, s12, s11
 800cd18:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cd1c:	ed92 5a00 	vldr	s10, [r2]
 800cd20:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cd24:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cd28:	ee17 2a10 	vmov	r2, s14
 800cd2c:	401a      	ands	r2, r3
 800cd2e:	ee07 2a10 	vmov	s14, r2
 800cd32:	ee77 6a66 	vsub.f32	s13, s14, s13
 800cd36:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800cd3a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cd3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd42:	e715      	b.n	800cb70 <__ieee754_powf+0x1a4>
 800cd44:	2601      	movs	r6, #1
 800cd46:	e75d      	b.n	800cc04 <__ieee754_powf+0x238>
 800cd48:	d152      	bne.n	800cdf0 <__ieee754_powf+0x424>
 800cd4a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cde8 <__ieee754_powf+0x41c>
 800cd4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd52:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cd56:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5e:	f73f af29 	bgt.w	800cbb4 <__ieee754_powf+0x1e8>
 800cd62:	2386      	movs	r3, #134	@ 0x86
 800cd64:	e048      	b.n	800cdf8 <__ieee754_powf+0x42c>
 800cd66:	4a21      	ldr	r2, [pc, #132]	@ (800cdec <__ieee754_powf+0x420>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d907      	bls.n	800cd7c <__ieee754_powf+0x3b0>
 800cd6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd74:	bf4c      	ite	mi
 800cd76:	2001      	movmi	r0, #1
 800cd78:	2000      	movpl	r0, #0
 800cd7a:	e6c7      	b.n	800cb0c <__ieee754_powf+0x140>
 800cd7c:	d138      	bne.n	800cdf0 <__ieee754_powf+0x424>
 800cd7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd82:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8a:	dbea      	blt.n	800cd62 <__ieee754_powf+0x396>
 800cd8c:	e7ee      	b.n	800cd6c <__ieee754_powf+0x3a0>
 800cd8e:	bf00      	nop
 800cd90:	00000000 	.word	0x00000000
 800cd94:	3f7ffff3 	.word	0x3f7ffff3
 800cd98:	3f800007 	.word	0x3f800007
 800cd9c:	3eaaaaab 	.word	0x3eaaaaab
 800cda0:	3fb8aa00 	.word	0x3fb8aa00
 800cda4:	3fb8aa3b 	.word	0x3fb8aa3b
 800cda8:	36eca570 	.word	0x36eca570
 800cdac:	4b800000 	.word	0x4b800000
 800cdb0:	001cc471 	.word	0x001cc471
 800cdb4:	005db3d6 	.word	0x005db3d6
 800cdb8:	0800e0b0 	.word	0x0800e0b0
 800cdbc:	fffff000 	.word	0xfffff000
 800cdc0:	3e6c3255 	.word	0x3e6c3255
 800cdc4:	3e53f142 	.word	0x3e53f142
 800cdc8:	3e8ba305 	.word	0x3e8ba305
 800cdcc:	3edb6db7 	.word	0x3edb6db7
 800cdd0:	3f19999a 	.word	0x3f19999a
 800cdd4:	0800e0a0 	.word	0x0800e0a0
 800cdd8:	3f76384f 	.word	0x3f76384f
 800cddc:	3f763800 	.word	0x3f763800
 800cde0:	369dc3a0 	.word	0x369dc3a0
 800cde4:	0800e0a8 	.word	0x0800e0a8
 800cde8:	3338aa3c 	.word	0x3338aa3c
 800cdec:	43160000 	.word	0x43160000
 800cdf0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800cdf4:	d96f      	bls.n	800ced6 <__ieee754_powf+0x50a>
 800cdf6:	15db      	asrs	r3, r3, #23
 800cdf8:	3b7e      	subs	r3, #126	@ 0x7e
 800cdfa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800cdfe:	4118      	asrs	r0, r3
 800ce00:	4408      	add	r0, r1
 800ce02:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ce06:	4a4e      	ldr	r2, [pc, #312]	@ (800cf40 <__ieee754_powf+0x574>)
 800ce08:	3b7f      	subs	r3, #127	@ 0x7f
 800ce0a:	411a      	asrs	r2, r3
 800ce0c:	4002      	ands	r2, r0
 800ce0e:	ee07 2a10 	vmov	s14, r2
 800ce12:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ce16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ce1a:	f1c3 0317 	rsb	r3, r3, #23
 800ce1e:	4118      	asrs	r0, r3
 800ce20:	2900      	cmp	r1, #0
 800ce22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce26:	bfb8      	it	lt
 800ce28:	4240      	neglt	r0, r0
 800ce2a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800ce2e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800cf44 <__ieee754_powf+0x578>
 800ce32:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800cf48 <__ieee754_powf+0x57c>
 800ce36:	ee16 3a90 	vmov	r3, s13
 800ce3a:	f36f 030b 	bfc	r3, #0, #12
 800ce3e:	ee06 3a90 	vmov	s13, r3
 800ce42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ce46:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ce4a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ce4e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800cf4c <__ieee754_powf+0x580>
 800ce52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce56:	eee0 7a87 	vfma.f32	s15, s1, s14
 800ce5a:	eeb0 7a67 	vmov.f32	s14, s15
 800ce5e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800ce62:	eef0 5a47 	vmov.f32	s11, s14
 800ce66:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800ce6a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800ce6e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ce72:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800cf50 <__ieee754_powf+0x584>
 800ce76:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800cf54 <__ieee754_powf+0x588>
 800ce7a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ce7e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800cf58 <__ieee754_powf+0x58c>
 800ce82:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ce86:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800cf5c <__ieee754_powf+0x590>
 800ce8a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800ce8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cf60 <__ieee754_powf+0x594>
 800ce92:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ce96:	eeb0 6a47 	vmov.f32	s12, s14
 800ce9a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800ce9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cea2:	ee67 5a06 	vmul.f32	s11, s14, s12
 800cea6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ceaa:	eee7 7a27 	vfma.f32	s15, s14, s15
 800ceae:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ceb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ceb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ceba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cebe:	ee10 3a10 	vmov	r3, s0
 800cec2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cec6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ceca:	da06      	bge.n	800ceda <__ieee754_powf+0x50e>
 800cecc:	f000 f984 	bl	800d1d8 <scalbnf>
 800ced0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ced4:	e592      	b.n	800c9fc <__ieee754_powf+0x30>
 800ced6:	2000      	movs	r0, #0
 800ced8:	e7a7      	b.n	800ce2a <__ieee754_powf+0x45e>
 800ceda:	ee00 3a10 	vmov	s0, r3
 800cede:	e7f7      	b.n	800ced0 <__ieee754_powf+0x504>
 800cee0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cee4:	e58a      	b.n	800c9fc <__ieee754_powf+0x30>
 800cee6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800cf64 <__ieee754_powf+0x598>
 800ceea:	e587      	b.n	800c9fc <__ieee754_powf+0x30>
 800ceec:	eeb0 0a48 	vmov.f32	s0, s16
 800cef0:	e584      	b.n	800c9fc <__ieee754_powf+0x30>
 800cef2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cef6:	f43f adbb 	beq.w	800ca70 <__ieee754_powf+0xa4>
 800cefa:	2502      	movs	r5, #2
 800cefc:	eeb0 0a48 	vmov.f32	s0, s16
 800cf00:	f000 f962 	bl	800d1c8 <fabsf>
 800cf04:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800cf08:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800cf0c:	4647      	mov	r7, r8
 800cf0e:	d003      	beq.n	800cf18 <__ieee754_powf+0x54c>
 800cf10:	f1b8 0f00 	cmp.w	r8, #0
 800cf14:	f47f addb 	bne.w	800cace <__ieee754_powf+0x102>
 800cf18:	2c00      	cmp	r4, #0
 800cf1a:	bfbc      	itt	lt
 800cf1c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800cf20:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cf24:	2e00      	cmp	r6, #0
 800cf26:	f6bf ad69 	bge.w	800c9fc <__ieee754_powf+0x30>
 800cf2a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800cf2e:	ea58 0805 	orrs.w	r8, r8, r5
 800cf32:	f47f adc7 	bne.w	800cac4 <__ieee754_powf+0xf8>
 800cf36:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf3a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cf3e:	e55d      	b.n	800c9fc <__ieee754_powf+0x30>
 800cf40:	ff800000 	.word	0xff800000
 800cf44:	3f317218 	.word	0x3f317218
 800cf48:	3f317200 	.word	0x3f317200
 800cf4c:	35bfbe8c 	.word	0x35bfbe8c
 800cf50:	b5ddea0e 	.word	0xb5ddea0e
 800cf54:	3331bb4c 	.word	0x3331bb4c
 800cf58:	388ab355 	.word	0x388ab355
 800cf5c:	bb360b61 	.word	0xbb360b61
 800cf60:	3e2aaaab 	.word	0x3e2aaaab
 800cf64:	00000000 	.word	0x00000000

0800cf68 <__ieee754_rem_pio2f>:
 800cf68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6a:	ee10 6a10 	vmov	r6, s0
 800cf6e:	4b88      	ldr	r3, [pc, #544]	@ (800d190 <__ieee754_rem_pio2f+0x228>)
 800cf70:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cf74:	429d      	cmp	r5, r3
 800cf76:	b087      	sub	sp, #28
 800cf78:	4604      	mov	r4, r0
 800cf7a:	d805      	bhi.n	800cf88 <__ieee754_rem_pio2f+0x20>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	ed80 0a00 	vstr	s0, [r0]
 800cf82:	6043      	str	r3, [r0, #4]
 800cf84:	2000      	movs	r0, #0
 800cf86:	e022      	b.n	800cfce <__ieee754_rem_pio2f+0x66>
 800cf88:	4b82      	ldr	r3, [pc, #520]	@ (800d194 <__ieee754_rem_pio2f+0x22c>)
 800cf8a:	429d      	cmp	r5, r3
 800cf8c:	d83a      	bhi.n	800d004 <__ieee754_rem_pio2f+0x9c>
 800cf8e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d198 <__ieee754_rem_pio2f+0x230>
 800cf98:	4a80      	ldr	r2, [pc, #512]	@ (800d19c <__ieee754_rem_pio2f+0x234>)
 800cf9a:	f023 030f 	bic.w	r3, r3, #15
 800cf9e:	dd18      	ble.n	800cfd2 <__ieee754_rem_pio2f+0x6a>
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cfa6:	bf09      	itett	eq
 800cfa8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d1a0 <__ieee754_rem_pio2f+0x238>
 800cfac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d1a4 <__ieee754_rem_pio2f+0x23c>
 800cfb0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d1a8 <__ieee754_rem_pio2f+0x240>
 800cfb4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cfb8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cfbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfc0:	ed80 7a00 	vstr	s14, [r0]
 800cfc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cfc8:	edc0 7a01 	vstr	s15, [r0, #4]
 800cfcc:	2001      	movs	r0, #1
 800cfce:	b007      	add	sp, #28
 800cfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cfd8:	bf09      	itett	eq
 800cfda:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d1a0 <__ieee754_rem_pio2f+0x238>
 800cfde:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d1a4 <__ieee754_rem_pio2f+0x23c>
 800cfe2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d1a8 <__ieee754_rem_pio2f+0x240>
 800cfe6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cfea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cfee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cff2:	ed80 7a00 	vstr	s14, [r0]
 800cff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffa:	edc0 7a01 	vstr	s15, [r0, #4]
 800cffe:	f04f 30ff 	mov.w	r0, #4294967295
 800d002:	e7e4      	b.n	800cfce <__ieee754_rem_pio2f+0x66>
 800d004:	4b69      	ldr	r3, [pc, #420]	@ (800d1ac <__ieee754_rem_pio2f+0x244>)
 800d006:	429d      	cmp	r5, r3
 800d008:	d873      	bhi.n	800d0f2 <__ieee754_rem_pio2f+0x18a>
 800d00a:	f000 f8dd 	bl	800d1c8 <fabsf>
 800d00e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d1b0 <__ieee754_rem_pio2f+0x248>
 800d012:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d016:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d01a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d01e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d022:	ee17 0a90 	vmov	r0, s15
 800d026:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d198 <__ieee754_rem_pio2f+0x230>
 800d02a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d02e:	281f      	cmp	r0, #31
 800d030:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d1a4 <__ieee754_rem_pio2f+0x23c>
 800d034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d038:	eeb1 6a47 	vneg.f32	s12, s14
 800d03c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d040:	ee16 1a90 	vmov	r1, s13
 800d044:	dc09      	bgt.n	800d05a <__ieee754_rem_pio2f+0xf2>
 800d046:	4a5b      	ldr	r2, [pc, #364]	@ (800d1b4 <__ieee754_rem_pio2f+0x24c>)
 800d048:	1e47      	subs	r7, r0, #1
 800d04a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d04e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d056:	4293      	cmp	r3, r2
 800d058:	d107      	bne.n	800d06a <__ieee754_rem_pio2f+0x102>
 800d05a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d05e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d062:	2a08      	cmp	r2, #8
 800d064:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d068:	dc14      	bgt.n	800d094 <__ieee754_rem_pio2f+0x12c>
 800d06a:	6021      	str	r1, [r4, #0]
 800d06c:	ed94 7a00 	vldr	s14, [r4]
 800d070:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d074:	2e00      	cmp	r6, #0
 800d076:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d07a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d07e:	daa6      	bge.n	800cfce <__ieee754_rem_pio2f+0x66>
 800d080:	eeb1 7a47 	vneg.f32	s14, s14
 800d084:	eeb1 0a40 	vneg.f32	s0, s0
 800d088:	ed84 7a00 	vstr	s14, [r4]
 800d08c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d090:	4240      	negs	r0, r0
 800d092:	e79c      	b.n	800cfce <__ieee754_rem_pio2f+0x66>
 800d094:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d1a0 <__ieee754_rem_pio2f+0x238>
 800d098:	eef0 6a40 	vmov.f32	s13, s0
 800d09c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d0a0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d0a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d0a8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d1a8 <__ieee754_rem_pio2f+0x240>
 800d0ac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d0b0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d0b4:	ee15 2a90 	vmov	r2, s11
 800d0b8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d0bc:	1a5b      	subs	r3, r3, r1
 800d0be:	2b19      	cmp	r3, #25
 800d0c0:	dc04      	bgt.n	800d0cc <__ieee754_rem_pio2f+0x164>
 800d0c2:	edc4 5a00 	vstr	s11, [r4]
 800d0c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d0ca:	e7cf      	b.n	800d06c <__ieee754_rem_pio2f+0x104>
 800d0cc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d1b8 <__ieee754_rem_pio2f+0x250>
 800d0d0:	eeb0 0a66 	vmov.f32	s0, s13
 800d0d4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d0d8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d0dc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d1bc <__ieee754_rem_pio2f+0x254>
 800d0e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d0e4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d0e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d0ec:	ed84 7a00 	vstr	s14, [r4]
 800d0f0:	e7bc      	b.n	800d06c <__ieee754_rem_pio2f+0x104>
 800d0f2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d0f6:	d306      	bcc.n	800d106 <__ieee754_rem_pio2f+0x19e>
 800d0f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d0fc:	edc0 7a01 	vstr	s15, [r0, #4]
 800d100:	edc0 7a00 	vstr	s15, [r0]
 800d104:	e73e      	b.n	800cf84 <__ieee754_rem_pio2f+0x1c>
 800d106:	15ea      	asrs	r2, r5, #23
 800d108:	3a86      	subs	r2, #134	@ 0x86
 800d10a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d116:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d1c0 <__ieee754_rem_pio2f+0x258>
 800d11a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d11e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d122:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d126:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d12a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d12e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d136:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d13a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d13e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d146:	edcd 7a05 	vstr	s15, [sp, #20]
 800d14a:	d11e      	bne.n	800d18a <__ieee754_rem_pio2f+0x222>
 800d14c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	bf0c      	ite	eq
 800d156:	2301      	moveq	r3, #1
 800d158:	2302      	movne	r3, #2
 800d15a:	491a      	ldr	r1, [pc, #104]	@ (800d1c4 <__ieee754_rem_pio2f+0x25c>)
 800d15c:	9101      	str	r1, [sp, #4]
 800d15e:	2102      	movs	r1, #2
 800d160:	9100      	str	r1, [sp, #0]
 800d162:	a803      	add	r0, sp, #12
 800d164:	4621      	mov	r1, r4
 800d166:	f000 f89d 	bl	800d2a4 <__kernel_rem_pio2f>
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	f6bf af2f 	bge.w	800cfce <__ieee754_rem_pio2f+0x66>
 800d170:	edd4 7a00 	vldr	s15, [r4]
 800d174:	eef1 7a67 	vneg.f32	s15, s15
 800d178:	edc4 7a00 	vstr	s15, [r4]
 800d17c:	edd4 7a01 	vldr	s15, [r4, #4]
 800d180:	eef1 7a67 	vneg.f32	s15, s15
 800d184:	edc4 7a01 	vstr	s15, [r4, #4]
 800d188:	e782      	b.n	800d090 <__ieee754_rem_pio2f+0x128>
 800d18a:	2303      	movs	r3, #3
 800d18c:	e7e5      	b.n	800d15a <__ieee754_rem_pio2f+0x1f2>
 800d18e:	bf00      	nop
 800d190:	3f490fd8 	.word	0x3f490fd8
 800d194:	4016cbe3 	.word	0x4016cbe3
 800d198:	3fc90f80 	.word	0x3fc90f80
 800d19c:	3fc90fd0 	.word	0x3fc90fd0
 800d1a0:	37354400 	.word	0x37354400
 800d1a4:	37354443 	.word	0x37354443
 800d1a8:	2e85a308 	.word	0x2e85a308
 800d1ac:	43490f80 	.word	0x43490f80
 800d1b0:	3f22f984 	.word	0x3f22f984
 800d1b4:	0800e0b8 	.word	0x0800e0b8
 800d1b8:	2e85a300 	.word	0x2e85a300
 800d1bc:	248d3132 	.word	0x248d3132
 800d1c0:	43800000 	.word	0x43800000
 800d1c4:	0800e138 	.word	0x0800e138

0800d1c8 <fabsf>:
 800d1c8:	ee10 3a10 	vmov	r3, s0
 800d1cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1d0:	ee00 3a10 	vmov	s0, r3
 800d1d4:	4770      	bx	lr
	...

0800d1d8 <scalbnf>:
 800d1d8:	ee10 3a10 	vmov	r3, s0
 800d1dc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d1e0:	d02b      	beq.n	800d23a <scalbnf+0x62>
 800d1e2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d1e6:	d302      	bcc.n	800d1ee <scalbnf+0x16>
 800d1e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d1ec:	4770      	bx	lr
 800d1ee:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d1f2:	d123      	bne.n	800d23c <scalbnf+0x64>
 800d1f4:	4b24      	ldr	r3, [pc, #144]	@ (800d288 <scalbnf+0xb0>)
 800d1f6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d28c <scalbnf+0xb4>
 800d1fa:	4298      	cmp	r0, r3
 800d1fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d200:	db17      	blt.n	800d232 <scalbnf+0x5a>
 800d202:	ee10 3a10 	vmov	r3, s0
 800d206:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d20a:	3a19      	subs	r2, #25
 800d20c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d210:	4288      	cmp	r0, r1
 800d212:	dd15      	ble.n	800d240 <scalbnf+0x68>
 800d214:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d290 <scalbnf+0xb8>
 800d218:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d294 <scalbnf+0xbc>
 800d21c:	ee10 3a10 	vmov	r3, s0
 800d220:	eeb0 7a67 	vmov.f32	s14, s15
 800d224:	2b00      	cmp	r3, #0
 800d226:	bfb8      	it	lt
 800d228:	eef0 7a66 	vmovlt.f32	s15, s13
 800d22c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d230:	4770      	bx	lr
 800d232:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d298 <scalbnf+0xc0>
 800d236:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d23a:	4770      	bx	lr
 800d23c:	0dd2      	lsrs	r2, r2, #23
 800d23e:	e7e5      	b.n	800d20c <scalbnf+0x34>
 800d240:	4410      	add	r0, r2
 800d242:	28fe      	cmp	r0, #254	@ 0xfe
 800d244:	dce6      	bgt.n	800d214 <scalbnf+0x3c>
 800d246:	2800      	cmp	r0, #0
 800d248:	dd06      	ble.n	800d258 <scalbnf+0x80>
 800d24a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d24e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d252:	ee00 3a10 	vmov	s0, r3
 800d256:	4770      	bx	lr
 800d258:	f110 0f16 	cmn.w	r0, #22
 800d25c:	da09      	bge.n	800d272 <scalbnf+0x9a>
 800d25e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d298 <scalbnf+0xc0>
 800d262:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d29c <scalbnf+0xc4>
 800d266:	ee10 3a10 	vmov	r3, s0
 800d26a:	eeb0 7a67 	vmov.f32	s14, s15
 800d26e:	2b00      	cmp	r3, #0
 800d270:	e7d9      	b.n	800d226 <scalbnf+0x4e>
 800d272:	3019      	adds	r0, #25
 800d274:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d278:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d27c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d2a0 <scalbnf+0xc8>
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	e7d7      	b.n	800d236 <scalbnf+0x5e>
 800d286:	bf00      	nop
 800d288:	ffff3cb0 	.word	0xffff3cb0
 800d28c:	4c000000 	.word	0x4c000000
 800d290:	7149f2ca 	.word	0x7149f2ca
 800d294:	f149f2ca 	.word	0xf149f2ca
 800d298:	0da24260 	.word	0x0da24260
 800d29c:	8da24260 	.word	0x8da24260
 800d2a0:	33000000 	.word	0x33000000

0800d2a4 <__kernel_rem_pio2f>:
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	ed2d 8b04 	vpush	{d8-d9}
 800d2ac:	b0d9      	sub	sp, #356	@ 0x164
 800d2ae:	4690      	mov	r8, r2
 800d2b0:	9001      	str	r0, [sp, #4]
 800d2b2:	4ab6      	ldr	r2, [pc, #728]	@ (800d58c <__kernel_rem_pio2f+0x2e8>)
 800d2b4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d2b6:	f118 0f04 	cmn.w	r8, #4
 800d2ba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d2be:	460f      	mov	r7, r1
 800d2c0:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2c4:	db26      	blt.n	800d314 <__kernel_rem_pio2f+0x70>
 800d2c6:	f1b8 0203 	subs.w	r2, r8, #3
 800d2ca:	bf48      	it	mi
 800d2cc:	f108 0204 	addmi.w	r2, r8, #4
 800d2d0:	10d2      	asrs	r2, r2, #3
 800d2d2:	1c55      	adds	r5, r2, #1
 800d2d4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d2d6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d2da:	00e8      	lsls	r0, r5, #3
 800d2dc:	eba2 060b 	sub.w	r6, r2, fp
 800d2e0:	9002      	str	r0, [sp, #8]
 800d2e2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d2e6:	eb0a 0c0b 	add.w	ip, sl, fp
 800d2ea:	ac1c      	add	r4, sp, #112	@ 0x70
 800d2ec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	4560      	cmp	r0, ip
 800d2f4:	dd10      	ble.n	800d318 <__kernel_rem_pio2f+0x74>
 800d2f6:	a91c      	add	r1, sp, #112	@ 0x70
 800d2f8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d2fc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d300:	2600      	movs	r6, #0
 800d302:	4556      	cmp	r6, sl
 800d304:	dc24      	bgt.n	800d350 <__kernel_rem_pio2f+0xac>
 800d306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d30a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d30e:	4684      	mov	ip, r0
 800d310:	2400      	movs	r4, #0
 800d312:	e016      	b.n	800d342 <__kernel_rem_pio2f+0x9e>
 800d314:	2200      	movs	r2, #0
 800d316:	e7dc      	b.n	800d2d2 <__kernel_rem_pio2f+0x2e>
 800d318:	42c6      	cmn	r6, r0
 800d31a:	bf5d      	ittte	pl
 800d31c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d320:	ee07 1a90 	vmovpl	s15, r1
 800d324:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d328:	eef0 7a47 	vmovmi.f32	s15, s14
 800d32c:	ece4 7a01 	vstmia	r4!, {s15}
 800d330:	3001      	adds	r0, #1
 800d332:	e7de      	b.n	800d2f2 <__kernel_rem_pio2f+0x4e>
 800d334:	ecfe 6a01 	vldmia	lr!, {s13}
 800d338:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d33c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d340:	3401      	adds	r4, #1
 800d342:	455c      	cmp	r4, fp
 800d344:	ddf6      	ble.n	800d334 <__kernel_rem_pio2f+0x90>
 800d346:	ece9 7a01 	vstmia	r9!, {s15}
 800d34a:	3601      	adds	r6, #1
 800d34c:	3004      	adds	r0, #4
 800d34e:	e7d8      	b.n	800d302 <__kernel_rem_pio2f+0x5e>
 800d350:	a908      	add	r1, sp, #32
 800d352:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d356:	9104      	str	r1, [sp, #16]
 800d358:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d35a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d598 <__kernel_rem_pio2f+0x2f4>
 800d35e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d594 <__kernel_rem_pio2f+0x2f0>
 800d362:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d366:	9203      	str	r2, [sp, #12]
 800d368:	4654      	mov	r4, sl
 800d36a:	00a2      	lsls	r2, r4, #2
 800d36c:	9205      	str	r2, [sp, #20]
 800d36e:	aa58      	add	r2, sp, #352	@ 0x160
 800d370:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d374:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d378:	a944      	add	r1, sp, #272	@ 0x110
 800d37a:	aa08      	add	r2, sp, #32
 800d37c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d380:	4694      	mov	ip, r2
 800d382:	4626      	mov	r6, r4
 800d384:	2e00      	cmp	r6, #0
 800d386:	dc4c      	bgt.n	800d422 <__kernel_rem_pio2f+0x17e>
 800d388:	4628      	mov	r0, r5
 800d38a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d38e:	f7ff ff23 	bl	800d1d8 <scalbnf>
 800d392:	eeb0 8a40 	vmov.f32	s16, s0
 800d396:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d39a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d39e:	f000 f9e9 	bl	800d774 <floorf>
 800d3a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d3a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d3aa:	2d00      	cmp	r5, #0
 800d3ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d3b4:	ee17 9a90 	vmov	r9, s15
 800d3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d3c0:	dd41      	ble.n	800d446 <__kernel_rem_pio2f+0x1a2>
 800d3c2:	f104 3cff 	add.w	ip, r4, #4294967295
 800d3c6:	a908      	add	r1, sp, #32
 800d3c8:	f1c5 0e08 	rsb	lr, r5, #8
 800d3cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d3d0:	fa46 f00e 	asr.w	r0, r6, lr
 800d3d4:	4481      	add	r9, r0
 800d3d6:	fa00 f00e 	lsl.w	r0, r0, lr
 800d3da:	1a36      	subs	r6, r6, r0
 800d3dc:	f1c5 0007 	rsb	r0, r5, #7
 800d3e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d3e4:	4106      	asrs	r6, r0
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	dd3c      	ble.n	800d464 <__kernel_rem_pio2f+0x1c0>
 800d3ea:	f04f 0e00 	mov.w	lr, #0
 800d3ee:	f109 0901 	add.w	r9, r9, #1
 800d3f2:	4670      	mov	r0, lr
 800d3f4:	4574      	cmp	r4, lr
 800d3f6:	dc68      	bgt.n	800d4ca <__kernel_rem_pio2f+0x226>
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	dd03      	ble.n	800d404 <__kernel_rem_pio2f+0x160>
 800d3fc:	2d01      	cmp	r5, #1
 800d3fe:	d074      	beq.n	800d4ea <__kernel_rem_pio2f+0x246>
 800d400:	2d02      	cmp	r5, #2
 800d402:	d07d      	beq.n	800d500 <__kernel_rem_pio2f+0x25c>
 800d404:	2e02      	cmp	r6, #2
 800d406:	d12d      	bne.n	800d464 <__kernel_rem_pio2f+0x1c0>
 800d408:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d40c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d410:	b340      	cbz	r0, 800d464 <__kernel_rem_pio2f+0x1c0>
 800d412:	4628      	mov	r0, r5
 800d414:	9306      	str	r3, [sp, #24]
 800d416:	f7ff fedf 	bl	800d1d8 <scalbnf>
 800d41a:	9b06      	ldr	r3, [sp, #24]
 800d41c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d420:	e020      	b.n	800d464 <__kernel_rem_pio2f+0x1c0>
 800d422:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d426:	3e01      	subs	r6, #1
 800d428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d430:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d434:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d438:	ecac 0a01 	vstmia	ip!, {s0}
 800d43c:	ed30 0a01 	vldmdb	r0!, {s0}
 800d440:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d444:	e79e      	b.n	800d384 <__kernel_rem_pio2f+0xe0>
 800d446:	d105      	bne.n	800d454 <__kernel_rem_pio2f+0x1b0>
 800d448:	1e60      	subs	r0, r4, #1
 800d44a:	a908      	add	r1, sp, #32
 800d44c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d450:	11f6      	asrs	r6, r6, #7
 800d452:	e7c8      	b.n	800d3e6 <__kernel_rem_pio2f+0x142>
 800d454:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d458:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d460:	da31      	bge.n	800d4c6 <__kernel_rem_pio2f+0x222>
 800d462:	2600      	movs	r6, #0
 800d464:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46c:	f040 8098 	bne.w	800d5a0 <__kernel_rem_pio2f+0x2fc>
 800d470:	1e60      	subs	r0, r4, #1
 800d472:	2200      	movs	r2, #0
 800d474:	4550      	cmp	r0, sl
 800d476:	da4b      	bge.n	800d510 <__kernel_rem_pio2f+0x26c>
 800d478:	2a00      	cmp	r2, #0
 800d47a:	d065      	beq.n	800d548 <__kernel_rem_pio2f+0x2a4>
 800d47c:	3c01      	subs	r4, #1
 800d47e:	ab08      	add	r3, sp, #32
 800d480:	3d08      	subs	r5, #8
 800d482:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d0f8      	beq.n	800d47c <__kernel_rem_pio2f+0x1d8>
 800d48a:	4628      	mov	r0, r5
 800d48c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d490:	f7ff fea2 	bl	800d1d8 <scalbnf>
 800d494:	1c63      	adds	r3, r4, #1
 800d496:	aa44      	add	r2, sp, #272	@ 0x110
 800d498:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d598 <__kernel_rem_pio2f+0x2f4>
 800d49c:	0099      	lsls	r1, r3, #2
 800d49e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f280 80a9 	bge.w	800d5fc <__kernel_rem_pio2f+0x358>
 800d4aa:	4623      	mov	r3, r4
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f2c0 80c7 	blt.w	800d640 <__kernel_rem_pio2f+0x39c>
 800d4b2:	aa44      	add	r2, sp, #272	@ 0x110
 800d4b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d4b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d590 <__kernel_rem_pio2f+0x2ec>
 800d4bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	1ae2      	subs	r2, r4, r3
 800d4c4:	e0b1      	b.n	800d62a <__kernel_rem_pio2f+0x386>
 800d4c6:	2602      	movs	r6, #2
 800d4c8:	e78f      	b.n	800d3ea <__kernel_rem_pio2f+0x146>
 800d4ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4ce:	b948      	cbnz	r0, 800d4e4 <__kernel_rem_pio2f+0x240>
 800d4d0:	b121      	cbz	r1, 800d4dc <__kernel_rem_pio2f+0x238>
 800d4d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d4d6:	f842 1c04 	str.w	r1, [r2, #-4]
 800d4da:	2101      	movs	r1, #1
 800d4dc:	f10e 0e01 	add.w	lr, lr, #1
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	e787      	b.n	800d3f4 <__kernel_rem_pio2f+0x150>
 800d4e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d4e8:	e7f5      	b.n	800d4d6 <__kernel_rem_pio2f+0x232>
 800d4ea:	f104 3cff 	add.w	ip, r4, #4294967295
 800d4ee:	aa08      	add	r2, sp, #32
 800d4f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d4f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4f8:	a908      	add	r1, sp, #32
 800d4fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d4fe:	e781      	b.n	800d404 <__kernel_rem_pio2f+0x160>
 800d500:	f104 3cff 	add.w	ip, r4, #4294967295
 800d504:	aa08      	add	r2, sp, #32
 800d506:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d50a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d50e:	e7f3      	b.n	800d4f8 <__kernel_rem_pio2f+0x254>
 800d510:	a908      	add	r1, sp, #32
 800d512:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d516:	3801      	subs	r0, #1
 800d518:	430a      	orrs	r2, r1
 800d51a:	e7ab      	b.n	800d474 <__kernel_rem_pio2f+0x1d0>
 800d51c:	3201      	adds	r2, #1
 800d51e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d522:	2e00      	cmp	r6, #0
 800d524:	d0fa      	beq.n	800d51c <__kernel_rem_pio2f+0x278>
 800d526:	9905      	ldr	r1, [sp, #20]
 800d528:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d52c:	eb0d 0001 	add.w	r0, sp, r1
 800d530:	18e6      	adds	r6, r4, r3
 800d532:	a91c      	add	r1, sp, #112	@ 0x70
 800d534:	f104 0c01 	add.w	ip, r4, #1
 800d538:	384c      	subs	r0, #76	@ 0x4c
 800d53a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d53e:	4422      	add	r2, r4
 800d540:	4562      	cmp	r2, ip
 800d542:	da04      	bge.n	800d54e <__kernel_rem_pio2f+0x2aa>
 800d544:	4614      	mov	r4, r2
 800d546:	e710      	b.n	800d36a <__kernel_rem_pio2f+0xc6>
 800d548:	9804      	ldr	r0, [sp, #16]
 800d54a:	2201      	movs	r2, #1
 800d54c:	e7e7      	b.n	800d51e <__kernel_rem_pio2f+0x27a>
 800d54e:	9903      	ldr	r1, [sp, #12]
 800d550:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d554:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d558:	9105      	str	r1, [sp, #20]
 800d55a:	ee07 1a90 	vmov	s15, r1
 800d55e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d562:	2400      	movs	r4, #0
 800d564:	ece6 7a01 	vstmia	r6!, {s15}
 800d568:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d56c:	46b1      	mov	r9, r6
 800d56e:	455c      	cmp	r4, fp
 800d570:	dd04      	ble.n	800d57c <__kernel_rem_pio2f+0x2d8>
 800d572:	ece0 7a01 	vstmia	r0!, {s15}
 800d576:	f10c 0c01 	add.w	ip, ip, #1
 800d57a:	e7e1      	b.n	800d540 <__kernel_rem_pio2f+0x29c>
 800d57c:	ecfe 6a01 	vldmia	lr!, {s13}
 800d580:	ed39 7a01 	vldmdb	r9!, {s14}
 800d584:	3401      	adds	r4, #1
 800d586:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d58a:	e7f0      	b.n	800d56e <__kernel_rem_pio2f+0x2ca>
 800d58c:	0800e47c 	.word	0x0800e47c
 800d590:	0800e450 	.word	0x0800e450
 800d594:	43800000 	.word	0x43800000
 800d598:	3b800000 	.word	0x3b800000
 800d59c:	00000000 	.word	0x00000000
 800d5a0:	9b02      	ldr	r3, [sp, #8]
 800d5a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5a6:	eba3 0008 	sub.w	r0, r3, r8
 800d5aa:	f7ff fe15 	bl	800d1d8 <scalbnf>
 800d5ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d594 <__kernel_rem_pio2f+0x2f0>
 800d5b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ba:	db19      	blt.n	800d5f0 <__kernel_rem_pio2f+0x34c>
 800d5bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d598 <__kernel_rem_pio2f+0x2f4>
 800d5c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d5c4:	aa08      	add	r2, sp, #32
 800d5c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5ca:	3508      	adds	r5, #8
 800d5cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d5d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5dc:	ee10 3a10 	vmov	r3, s0
 800d5e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d5e4:	ee17 3a90 	vmov	r3, s15
 800d5e8:	3401      	adds	r4, #1
 800d5ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d5ee:	e74c      	b.n	800d48a <__kernel_rem_pio2f+0x1e6>
 800d5f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5f4:	aa08      	add	r2, sp, #32
 800d5f6:	ee10 3a10 	vmov	r3, s0
 800d5fa:	e7f6      	b.n	800d5ea <__kernel_rem_pio2f+0x346>
 800d5fc:	a808      	add	r0, sp, #32
 800d5fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d602:	9001      	str	r0, [sp, #4]
 800d604:	ee07 0a90 	vmov	s15, r0
 800d608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d60c:	3b01      	subs	r3, #1
 800d60e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d612:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d616:	ed62 7a01 	vstmdb	r2!, {s15}
 800d61a:	e743      	b.n	800d4a4 <__kernel_rem_pio2f+0x200>
 800d61c:	ecfc 6a01 	vldmia	ip!, {s13}
 800d620:	ecb5 7a01 	vldmia	r5!, {s14}
 800d624:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d628:	3001      	adds	r0, #1
 800d62a:	4550      	cmp	r0, sl
 800d62c:	dc01      	bgt.n	800d632 <__kernel_rem_pio2f+0x38e>
 800d62e:	4290      	cmp	r0, r2
 800d630:	ddf4      	ble.n	800d61c <__kernel_rem_pio2f+0x378>
 800d632:	a858      	add	r0, sp, #352	@ 0x160
 800d634:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d638:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d63c:	3b01      	subs	r3, #1
 800d63e:	e735      	b.n	800d4ac <__kernel_rem_pio2f+0x208>
 800d640:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d642:	2b02      	cmp	r3, #2
 800d644:	dc09      	bgt.n	800d65a <__kernel_rem_pio2f+0x3b6>
 800d646:	2b00      	cmp	r3, #0
 800d648:	dc27      	bgt.n	800d69a <__kernel_rem_pio2f+0x3f6>
 800d64a:	d040      	beq.n	800d6ce <__kernel_rem_pio2f+0x42a>
 800d64c:	f009 0007 	and.w	r0, r9, #7
 800d650:	b059      	add	sp, #356	@ 0x164
 800d652:	ecbd 8b04 	vpop	{d8-d9}
 800d656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d1f5      	bne.n	800d64c <__kernel_rem_pio2f+0x3a8>
 800d660:	aa30      	add	r2, sp, #192	@ 0xc0
 800d662:	1f0b      	subs	r3, r1, #4
 800d664:	4413      	add	r3, r2
 800d666:	461a      	mov	r2, r3
 800d668:	4620      	mov	r0, r4
 800d66a:	2800      	cmp	r0, #0
 800d66c:	dc50      	bgt.n	800d710 <__kernel_rem_pio2f+0x46c>
 800d66e:	4622      	mov	r2, r4
 800d670:	2a01      	cmp	r2, #1
 800d672:	dc5d      	bgt.n	800d730 <__kernel_rem_pio2f+0x48c>
 800d674:	ab30      	add	r3, sp, #192	@ 0xc0
 800d676:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d67a:	440b      	add	r3, r1
 800d67c:	2c01      	cmp	r4, #1
 800d67e:	dc67      	bgt.n	800d750 <__kernel_rem_pio2f+0x4ac>
 800d680:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d684:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d688:	2e00      	cmp	r6, #0
 800d68a:	d167      	bne.n	800d75c <__kernel_rem_pio2f+0x4b8>
 800d68c:	edc7 6a00 	vstr	s13, [r7]
 800d690:	ed87 7a01 	vstr	s14, [r7, #4]
 800d694:	edc7 7a02 	vstr	s15, [r7, #8]
 800d698:	e7d8      	b.n	800d64c <__kernel_rem_pio2f+0x3a8>
 800d69a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d69c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d6a0:	440b      	add	r3, r1
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	da24      	bge.n	800d6f2 <__kernel_rem_pio2f+0x44e>
 800d6a8:	b34e      	cbz	r6, 800d6fe <__kernel_rem_pio2f+0x45a>
 800d6aa:	eef1 7a47 	vneg.f32	s15, s14
 800d6ae:	edc7 7a00 	vstr	s15, [r7]
 800d6b2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d6b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6ba:	aa31      	add	r2, sp, #196	@ 0xc4
 800d6bc:	2301      	movs	r3, #1
 800d6be:	429c      	cmp	r4, r3
 800d6c0:	da20      	bge.n	800d704 <__kernel_rem_pio2f+0x460>
 800d6c2:	b10e      	cbz	r6, 800d6c8 <__kernel_rem_pio2f+0x424>
 800d6c4:	eef1 7a67 	vneg.f32	s15, s15
 800d6c8:	edc7 7a01 	vstr	s15, [r7, #4]
 800d6cc:	e7be      	b.n	800d64c <__kernel_rem_pio2f+0x3a8>
 800d6ce:	ab30      	add	r3, sp, #192	@ 0xc0
 800d6d0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d59c <__kernel_rem_pio2f+0x2f8>
 800d6d4:	440b      	add	r3, r1
 800d6d6:	2c00      	cmp	r4, #0
 800d6d8:	da05      	bge.n	800d6e6 <__kernel_rem_pio2f+0x442>
 800d6da:	b10e      	cbz	r6, 800d6e0 <__kernel_rem_pio2f+0x43c>
 800d6dc:	eef1 7a67 	vneg.f32	s15, s15
 800d6e0:	edc7 7a00 	vstr	s15, [r7]
 800d6e4:	e7b2      	b.n	800d64c <__kernel_rem_pio2f+0x3a8>
 800d6e6:	ed33 7a01 	vldmdb	r3!, {s14}
 800d6ea:	3c01      	subs	r4, #1
 800d6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6f0:	e7f1      	b.n	800d6d6 <__kernel_rem_pio2f+0x432>
 800d6f2:	ed73 7a01 	vldmdb	r3!, {s15}
 800d6f6:	3a01      	subs	r2, #1
 800d6f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6fc:	e7d2      	b.n	800d6a4 <__kernel_rem_pio2f+0x400>
 800d6fe:	eef0 7a47 	vmov.f32	s15, s14
 800d702:	e7d4      	b.n	800d6ae <__kernel_rem_pio2f+0x40a>
 800d704:	ecb2 7a01 	vldmia	r2!, {s14}
 800d708:	3301      	adds	r3, #1
 800d70a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d70e:	e7d6      	b.n	800d6be <__kernel_rem_pio2f+0x41a>
 800d710:	ed72 7a01 	vldmdb	r2!, {s15}
 800d714:	edd2 6a01 	vldr	s13, [r2, #4]
 800d718:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d71c:	3801      	subs	r0, #1
 800d71e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d722:	ed82 7a00 	vstr	s14, [r2]
 800d726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d72a:	edc2 7a01 	vstr	s15, [r2, #4]
 800d72e:	e79c      	b.n	800d66a <__kernel_rem_pio2f+0x3c6>
 800d730:	ed73 7a01 	vldmdb	r3!, {s15}
 800d734:	edd3 6a01 	vldr	s13, [r3, #4]
 800d738:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d73c:	3a01      	subs	r2, #1
 800d73e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d742:	ed83 7a00 	vstr	s14, [r3]
 800d746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74a:	edc3 7a01 	vstr	s15, [r3, #4]
 800d74e:	e78f      	b.n	800d670 <__kernel_rem_pio2f+0x3cc>
 800d750:	ed33 7a01 	vldmdb	r3!, {s14}
 800d754:	3c01      	subs	r4, #1
 800d756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d75a:	e78f      	b.n	800d67c <__kernel_rem_pio2f+0x3d8>
 800d75c:	eef1 6a66 	vneg.f32	s13, s13
 800d760:	eeb1 7a47 	vneg.f32	s14, s14
 800d764:	edc7 6a00 	vstr	s13, [r7]
 800d768:	ed87 7a01 	vstr	s14, [r7, #4]
 800d76c:	eef1 7a67 	vneg.f32	s15, s15
 800d770:	e790      	b.n	800d694 <__kernel_rem_pio2f+0x3f0>
 800d772:	bf00      	nop

0800d774 <floorf>:
 800d774:	ee10 3a10 	vmov	r3, s0
 800d778:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d77c:	3a7f      	subs	r2, #127	@ 0x7f
 800d77e:	2a16      	cmp	r2, #22
 800d780:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d784:	dc2b      	bgt.n	800d7de <floorf+0x6a>
 800d786:	2a00      	cmp	r2, #0
 800d788:	da12      	bge.n	800d7b0 <floorf+0x3c>
 800d78a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d7f0 <floorf+0x7c>
 800d78e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d792:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	dd06      	ble.n	800d7aa <floorf+0x36>
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	da24      	bge.n	800d7ea <floorf+0x76>
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <floorf+0x80>)
 800d7a4:	bf08      	it	eq
 800d7a6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d7aa:	ee00 3a10 	vmov	s0, r3
 800d7ae:	4770      	bx	lr
 800d7b0:	4911      	ldr	r1, [pc, #68]	@ (800d7f8 <floorf+0x84>)
 800d7b2:	4111      	asrs	r1, r2
 800d7b4:	420b      	tst	r3, r1
 800d7b6:	d0fa      	beq.n	800d7ae <floorf+0x3a>
 800d7b8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d7f0 <floorf+0x7c>
 800d7bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d7c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c8:	ddef      	ble.n	800d7aa <floorf+0x36>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bfbe      	ittt	lt
 800d7ce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d7d2:	fa40 f202 	asrlt.w	r2, r0, r2
 800d7d6:	189b      	addlt	r3, r3, r2
 800d7d8:	ea23 0301 	bic.w	r3, r3, r1
 800d7dc:	e7e5      	b.n	800d7aa <floorf+0x36>
 800d7de:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d7e2:	d3e4      	bcc.n	800d7ae <floorf+0x3a>
 800d7e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7e8:	4770      	bx	lr
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e7dd      	b.n	800d7aa <floorf+0x36>
 800d7ee:	bf00      	nop
 800d7f0:	7149f2ca 	.word	0x7149f2ca
 800d7f4:	bf800000 	.word	0xbf800000
 800d7f8:	007fffff 	.word	0x007fffff

0800d7fc <_init>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr

0800d808 <_fini>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	bf00      	nop
 800d80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80e:	bc08      	pop	{r3}
 800d810:	469e      	mov	lr, r3
 800d812:	4770      	bx	lr
