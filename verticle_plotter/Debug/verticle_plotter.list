
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012840  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08012a18  08012a18  00013a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013078  08013078  00015194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013078  08013078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013080  08013080  00015194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013080  08013080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013084  08013084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08013088  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002174  20000194  0801321c  00015194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002308  0801321c  00015308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c0b5  00000000  00000000  000151c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005590  00000000  00000000  00041279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00046810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001664  00000000  00000000  000484d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db72  00000000  00000000  00049b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b5b0  00000000  00000000  000776a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119d0d  00000000  00000000  000a2c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008330  00000000  00000000  001bc9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c4cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08012a00 	.word	0x08012a00

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08012a00 	.word	0x08012a00

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 f930 	bl	800a244 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f008 fa19 	bl	8009428 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe12 	bl	8001d64 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ffd1 	bl	800334c <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8cb 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f8c2 	bl	8003598 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f8ae 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8a5 	bl	8003598 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f893 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f886 	bl	8003598 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f009 fe02 	bl	800b0d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f85d 	bl	8003598 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f009 fde5 	bl	800b0d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f840 	bl	8003598 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f009 fdca 	bl	800b0d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f821 	bl	8003598 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = -30.07e-3,
    .c = -24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb6e 	bl	8001d64 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f00f faca 	bl	8010c98 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f00f fa8d 	bl	8010c98 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fa7f 	bl	8001d64 <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	ed2d 8b02 	vpush	{d8}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b4:	f7fe fe6c 	bl	8000590 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe fe5e 	bl	8000590 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f0:	f7fe ff78 	bl	80007e4 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f92a 	bl	8000b54 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001904:	ed97 7a00 	vldr	s14, [r7]
 8001908:	edd7 7a03 	vldr	s15, [r7, #12]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f918 	bl	8000b54 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb1 8a67 	vneg.f32	s16, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f90b 	bl	8000b54 <__aeabi_d2f>
 800193e:	4604      	mov	r4, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f902 	bl	8000b54 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef1 8a67 	vneg.f32	s17, s15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8f5 	bl	8000b54 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee02 3a10 	vmov	s4, r3
 8001970:	eef0 1a68 	vmov.f32	s3, s17
 8001974:	ee01 4a10 	vmov	s2, r4
 8001978:	eef0 0a48 	vmov.f32	s1, s16
 800197c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001980:	f000 f9f0 	bl	8001d64 <mapf>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ba:	b5b0      	push	{r4, r5, r7, lr}
 80019bc:	ed2d 8b02 	vpush	{d8}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ce:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fd74 	bl	80004e0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f00f f8f6 	bl	8010bf0 <cos>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fdc0 	bl	8000590 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f89c 	bl	8000b54 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ed97 7a00 	vldr	s14, [r7]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd44 	bl	80004e0 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f868 	bl	8000b54 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f852 	bl	8000b54 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb1 8a67 	vneg.f32	s16, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f845 	bl	8000b54 <__aeabi_d2f>
 8001aca:	4604      	mov	r4, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f83c 	bl	8000b54 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef1 8a67 	vneg.f32	s17, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	ee02 3a10 	vmov	s4, r3
 8001afc:	eef0 1a68 	vmov.f32	s3, s17
 8001b00:	ee01 4a10 	vmov	s2, r4
 8001b04:	eef0 0a48 	vmov.f32	s1, s16
 8001b08:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0c:	f000 f92a 	bl	8001d64 <mapf>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	ed2d 8b02 	vpush	{d8}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
 8001b3a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <FIR_init+0x2a>
        numTaps += 1;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00e ff3e 	bl	80109e0 <malloc>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00e ff35 	bl	80109e0 <malloc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e0 	beq.w	8001d48 <FIR_init+0x224>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80db 	beq.w	8001d48 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b96:	e00a      	b.n	8001bae <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f0      	bcc.n	8001b98 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bba:	ed97 7a00 	vldr	s14, [r7]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bd2:	e077      	b.n	8001cc4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10c      	bne.n	8001bfa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
 8001bf8:	e02c      	b.n	8001c54 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <FIR_init+0x230>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f00f f90e 	bl	8010e44 <sinf>
 8001c28:	eef0 6a40 	vmov.f32	s13, s0
 8001c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d58 <FIR_init+0x234>
 8001c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 8a00 	vldr	s16, [r3]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d54 <FIR_init+0x230>
 8001c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	f00f f896 	bl	8010dbc <cosf>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d5c <FIR_init+0x238>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d60 <FIR_init+0x23c>
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	db82      	blt.n	8001bd4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	83fb      	strh	r3, [r7, #30]
 8001cd8:	e00f      	b.n	8001cfa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3eb      	bcc.n	8001cda <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d01b      	beq.n	8001d48 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	e014      	b.n	8001d40 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	8bbb      	ldrh	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	8bba      	ldrh	r2, [r7, #28]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e6      	bcc.n	8001d16 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	ecbd 8b02 	vpop	{d8}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40c90fdb 	.word	0x40c90fdb
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	3eeb851f 	.word	0x3eeb851f
 8001d60:	3f0a3d71 	.word	0x3f0a3d71

08001d64 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d72:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d76:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d7a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	ee07 3a90 	vmov	s15, r3
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200001b0 	.word	0x200001b0

08001e14 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <modbus_3t5_Timeout+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	755a      	strb	r2, [r3, #21]

}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200001b0 	.word	0x200001b0

08001e34 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00d f815 	bl	800ee6c <HAL_UART_GetError>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d101      	bne.n	8001e4c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e48:	f7ff ffc4 	bl	8001dd4 <modbus_1t5_Timeout>

	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e62:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <Modbus_init+0xc4>)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <Modbus_init+0xc4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <Modbus_init+0xc4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <Modbus_init+0xc4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <Modbus_init+0xc4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	7e3a      	ldrb	r2, [r7, #24]
 8001e86:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <Modbus_init+0xc8>)
 8001e96:	210e      	movs	r1, #14
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00b fa8b 	bl	800d3b4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00c ff8b 	bl	800edc0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00c ffa2 	bl	800edf8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <Modbus_init+0xcc>)
 8001eba:	2104      	movs	r1, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00c fac9 	bl	800e454 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <Modbus_init+0xc4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <Modbus_init+0xc4>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <Modbus_init+0xc4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ed4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001ed8:	4413      	add	r3, r2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f00c fb71 	bl	800e5c8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <Modbus_init+0xc4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <Modbus_init+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00a fa35 	bl	800c36c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <Modbus_init+0xc4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00a fc84 	bl	800c818 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200001b0 	.word	0x200001b0
 8001f1c:	08001e15 	.word	0x08001e15
 8001f20:	08001e35 	.word	0x08001e35

08001f24 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f2c:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f30:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f34:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f38:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f3c:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f40:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f44:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f48:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f4c:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00e fddc 	bl	8010b4c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3310      	adds	r3, #16
 8001f98:	2240      	movs	r2, #64	@ 0x40
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00e fdd5 	bl	8010b4c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa6:	e00c      	b.n	8001fc2 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a79      	ldr	r2, [pc, #484]	@ (80021a0 <MotorKalman_Init+0x27c>)
 8001fba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	ddef      	ble.n	8001fa8 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fce:	2240      	movs	r2, #64	@ 0x40
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00e fdba 	bl	8010b4c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fdc:	e00d      	b.n	8001ffa <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe8:	33be      	adds	r3, #190	@ 0xbe
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ff2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	ddee      	ble.n	8001fde <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	33f0      	adds	r3, #240	@ 0xf0
 8002004:	2210      	movs	r2, #16
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00e fd9f 	bl	8010b4c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002014:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800201e:	2210      	movs	r2, #16
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f00e fd92 	bl	8010b4c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800202e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002032:	ed97 0a01 	vldr	s0, [r7, #4]
 8002036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002038:	f000 f922 	bl	8002280 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 800203c:	ed97 0a00 	vldr	s0, [r7]
 8002040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002042:	f000 f94d 	bl	80022e0 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	2201      	movs	r2, #1
 8002050:	2104      	movs	r1, #4
 8002052:	f00e f80a 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	3310      	adds	r3, #16
 8002060:	2204      	movs	r2, #4
 8002062:	2104      	movs	r1, #4
 8002064:	f00e f801 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	f00d fff7 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	f00d ffed 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	f00d ffe3 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80020b0:	2201      	movs	r2, #1
 80020b2:	2101      	movs	r1, #1
 80020b4:	f00d ffd9 	bl	801006a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020c4:	2204      	movs	r2, #4
 80020c6:	2104      	movs	r1, #4
 80020c8:	f00d ffcf 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020d8:	2201      	movs	r2, #1
 80020da:	2104      	movs	r1, #4
 80020dc:	f00d ffc5 	bl	801006a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020ec:	2201      	movs	r2, #1
 80020ee:	2104      	movs	r1, #4
 80020f0:	f00d ffbb 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002100:	2204      	movs	r2, #4
 8002102:	2104      	movs	r1, #4
 8002104:	f00d ffb1 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002114:	2204      	movs	r2, #4
 8002116:	2101      	movs	r1, #1
 8002118:	f00d ffa7 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002128:	2201      	movs	r2, #1
 800212a:	2101      	movs	r1, #1
 800212c:	f00d ff9d 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	f00d ff93 	bl	801006a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002146:	f000 f82d 	bl	80021a4 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	3390      	adds	r3, #144	@ 0x90
 8002154:	2204      	movs	r2, #4
 8002156:	2104      	movs	r1, #4
 8002158:	f00d ff87 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	33e0      	adds	r3, #224	@ 0xe0
 8002166:	2201      	movs	r2, #1
 8002168:	2104      	movs	r1, #4
 800216a:	f00d ff7e 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800217a:	2204      	movs	r2, #4
 800217c:	2104      	movs	r1, #4
 800217e:	f00d ff74 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800218e:	2201      	movs	r2, #1
 8002190:	2104      	movs	r1, #4
 8002192:	f00d ff6a 	bl	801006a <arm_mat_init_f32>
}
 8002196:	bf00      	nop
 8002198:	3730      	adds	r7, #48	@ 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	42c80000 	.word	0x42c80000

080021a4 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	eeb0 3a64 	vmov.f32	s6, s9
 80021e8:	eef0 2a45 	vmov.f32	s5, s10
 80021ec:	eeb0 2a65 	vmov.f32	s4, s11
 80021f0:	eef0 1a46 	vmov.f32	s3, s12
 80021f4:	eeb0 1a66 	vmov.f32	s2, s13
 80021f8:	eef0 0a47 	vmov.f32	s1, s14
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f001 f83c 	bl	800327c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800220a:	2240      	movs	r2, #64	@ 0x40
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f00e fc9c 	bl	8010b4c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002278 <MotorKalman_DiscretizeModel+0xd4>
 800221e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800224e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800227c <MotorKalman_DiscretizeModel+0xd8>
 8002252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002262:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002278 <MotorKalman_DiscretizeModel+0xd4>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	3c23d70a 	.word	0x3c23d70a
 800227c:	3dcccccd 	.word	0x3dcccccd

08002280 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f00e fc58 	bl	8010b4c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 800229c:	edd7 7a00 	vldr	s15, [r7]
 80022a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80022b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	d107      	bne.n	80022d2 <MotorKalman_SetProcessNoise+0x52>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d002      	beq.n	80022d8 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff66 	bl	80021a4 <MotorKalman_DiscretizeModel>
    }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022ec:	ed97 0a00 	vldr	s0, [r7]
 80022f0:	f00e fd46 	bl	8010d80 <sqrtf>
 80022f4:	eef0 7a40 	vmov.f32	s15, s0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800230e:	b580      	push	{r7, lr}
 8002310:	b0b2      	sub	sp, #200	@ 0xc8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002322:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002336:	e041      	b.n	80023bc <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	33c8      	adds	r3, #200	@ 0xc8
 8002340:	443b      	add	r3, r7
 8002342:	3b3c      	subs	r3, #60	@ 0x3c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002350:	e02b      	b.n	80023aa <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	33c8      	adds	r3, #200	@ 0xc8
 800235a:	443b      	add	r3, r7
 800235c:	3b3c      	subs	r3, #60	@ 0x3c
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236c:	4413      	add	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	3324      	adds	r3, #36	@ 0x24
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	edd3 6a00 	vldr	s13, [r3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	33c8      	adds	r3, #200	@ 0xc8
 8002398:	443b      	add	r3, r7
 800239a:	3b3c      	subs	r3, #60	@ 0x3c
 800239c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	ddcf      	ble.n	8002352 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023b6:	3301      	adds	r3, #1
 80023b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	ddb9      	ble.n	8002338 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023ca:	e021      	b.n	8002410 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	33c8      	adds	r3, #200	@ 0xc8
 80023d4:	443b      	add	r3, r7
 80023d6:	3b3c      	subs	r3, #60	@ 0x3c
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e2:	3338      	adds	r3, #56	@ 0x38
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	edd7 7a00 	vldr	s15, [r7]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800240a:	3301      	adds	r3, #1
 800240c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002414:	2b03      	cmp	r3, #3
 8002416:	ddd9      	ble.n	80023cc <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002418:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800241c:	2240      	movs	r2, #64	@ 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00e fb93 	bl	8010b4c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f00e fb8c 	bl	8010b4c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800243a:	e05f      	b.n	80024fc <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002442:	e052      	b.n	80024ea <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	33c8      	adds	r3, #200	@ 0xc8
 8002454:	443b      	add	r3, r7
 8002456:	3b7c      	subs	r3, #124	@ 0x7c
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002464:	e038      	b.n	80024d8 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	33c8      	adds	r3, #200	@ 0xc8
 8002476:	443b      	add	r3, r7
 8002478:	3b7c      	subs	r3, #124	@ 0x7c
 800247a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800247e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002488:	4413      	add	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	3324      	adds	r3, #36	@ 0x24
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	edd3 6a00 	vldr	s13, [r3]
 8002496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	4413      	add	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024bc:	4413      	add	r3, r2
 80024be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	33c8      	adds	r3, #200	@ 0xc8
 80024c6:	443b      	add	r3, r7
 80024c8:	3b7c      	subs	r3, #124	@ 0x7c
 80024ca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024d2:	3301      	adds	r3, #1
 80024d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddc2      	ble.n	8002466 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	dda8      	ble.n	8002444 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f6:	3301      	adds	r3, #1
 80024f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002500:	2b03      	cmp	r3, #3
 8002502:	dd9b      	ble.n	800243c <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800250a:	e05f      	b.n	80025cc <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002512:	e052      	b.n	80025ba <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	33c8      	adds	r3, #200	@ 0xc8
 8002524:	443b      	add	r3, r7
 8002526:	3bbc      	subs	r3, #188	@ 0xbc
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002534:	e038      	b.n	80025a8 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	33c8      	adds	r3, #200	@ 0xc8
 8002546:	443b      	add	r3, r7
 8002548:	3bbc      	subs	r3, #188	@ 0xbc
 800254a:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	33c8      	adds	r3, #200	@ 0xc8
 800255e:	443b      	add	r3, r7
 8002560:	3b7c      	subs	r3, #124	@ 0x7c
 8002562:	edd3 6a00 	vldr	s13, [r3]
 8002566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800256a:	009a      	lsls	r2, r3, #2
 800256c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002570:	4413      	add	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	3324      	adds	r3, #36	@ 0x24
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800258c:	4413      	add	r3, r2
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	33c8      	adds	r3, #200	@ 0xc8
 8002596:	443b      	add	r3, r7
 8002598:	3bbc      	subs	r3, #188	@ 0xbc
 800259a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800259e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a2:	3301      	adds	r3, #1
 80025a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	ddc2      	ble.n	8002536 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025be:	2b03      	cmp	r3, #3
 80025c0:	dda8      	ble.n	8002514 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c6:	3301      	adds	r3, #1
 80025c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	dd9b      	ble.n	800250c <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025da:	e037      	b.n	800264c <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025e2:	e02a      	b.n	800263a <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	33c8      	adds	r3, #200	@ 0xc8
 80025f4:	443b      	add	r3, r7
 80025f6:	3bbc      	subs	r3, #188	@ 0xbc
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002606:	4413      	add	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	3354      	adds	r3, #84	@ 0x54
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800261e:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263e:	2b03      	cmp	r3, #3
 8002640:	ddd0      	ble.n	80025e4 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002646:	3301      	adds	r3, #1
 8002648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800264c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002650:	2b03      	cmp	r3, #3
 8002652:	ddc3      	ble.n	80025dc <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	2104      	movs	r1, #4
 8002688:	f00d fcef 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3310      	adds	r3, #16
 8002696:	2204      	movs	r2, #4
 8002698:	2104      	movs	r1, #4
 800269a:	f00d fce6 	bl	801006a <arm_mat_init_f32>
}
 800269e:	bf00      	nop
 80026a0:	37c8      	adds	r7, #200	@ 0xc8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0d0      	sub	sp, #320	@ 0x140
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026c0:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80026c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80026d2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002700:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800270a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800270e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	edd3 7a01 	vldr	s15, [r3, #4]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002720:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002724:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800272e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002732:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	edd3 7a02 	vldr	s15, [r3, #8]
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002744:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002748:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002752:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002756:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002760:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800276c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002770:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800277c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002780:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002784:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002798:	e04d      	b.n	8002836 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800279a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027a4:	443b      	add	r3, r7
 80027a6:	3b58      	subs	r3, #88	@ 0x58
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027b4:	e036      	b.n	8002824 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80027b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027c0:	443b      	add	r3, r7
 80027c2:	3b58      	subs	r3, #88	@ 0x58
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027d6:	333c      	adds	r3, #60	@ 0x3c
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	edd3 6a00 	vldr	s13, [r3]
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	009a      	lsls	r2, r3, #2
 80027e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ea:	4413      	add	r3, r2
 80027ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027f0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002812:	443b      	add	r3, r7
 8002814:	3b58      	subs	r3, #88	@ 0x58
 8002816:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800281a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800281e:	3301      	adds	r3, #1
 8002820:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002824:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002828:	2b03      	cmp	r3, #3
 800282a:	ddc4      	ble.n	80027b6 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800282c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002830:	3301      	adds	r3, #1
 8002832:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002836:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800283a:	2b03      	cmp	r3, #3
 800283c:	ddad      	ble.n	800279a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284c:	e021      	b.n	8002892 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002858:	443b      	add	r3, r7
 800285a:	3b58      	subs	r3, #88	@ 0x58
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002864:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800286e:	333c      	adds	r3, #60	@ 0x3c
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002884:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002888:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800288c:	3301      	adds	r3, #1
 800288e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002892:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002896:	2b03      	cmp	r3, #3
 8002898:	ddd9      	ble.n	800284e <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800289a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800289e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80028a8:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80028b4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80028c8:	e04d      	b.n	8002966 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80028ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028d4:	443b      	add	r3, r7
 80028d6:	3b68      	subs	r3, #104	@ 0x68
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028e4:	e036      	b.n	8002954 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028f0:	443b      	add	r3, r7
 80028f2:	3b68      	subs	r3, #104	@ 0x68
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002902:	4413      	add	r3, r2
 8002904:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002908:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	3304      	adds	r3, #4
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	edd3 6a00 	vldr	s13, [r3]
 8002918:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800291c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002926:	333c      	adds	r3, #60	@ 0x3c
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002942:	443b      	add	r3, r7
 8002944:	3b68      	subs	r3, #104	@ 0x68
 8002946:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800294a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800294e:	3301      	adds	r3, #1
 8002950:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002954:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002958:	2b03      	cmp	r3, #3
 800295a:	ddc4      	ble.n	80028e6 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800295c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002960:	3301      	adds	r3, #1
 8002962:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002966:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800296a:	2b03      	cmp	r3, #3
 800296c:	ddad      	ble.n	80028ca <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800296e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002982:	e01a      	b.n	80029ba <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002984:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800298e:	443b      	add	r3, r7
 8002990:	3b68      	subs	r3, #104	@ 0x68
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800299a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a8:	443b      	add	r3, r7
 80029aa:	3b78      	subs	r3, #120	@ 0x78
 80029ac:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029be:	2b03      	cmp	r3, #3
 80029c0:	dde0      	ble.n	8002984 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029c8:	e029      	b.n	8002a1e <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 80029ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029ea:	443b      	add	r3, r7
 80029ec:	3b78      	subs	r3, #120	@ 0x78
 80029ee:	edd3 6a00 	vldr	s13, [r3]
 80029f2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	ddd1      	ble.n	80029ca <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a26:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00e f88c 	bl	8010b4c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a3a:	e035      	b.n	8002aa8 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a42:	e028      	b.n	8002a96 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a4e:	443b      	add	r3, r7
 8002a50:	3b78      	subs	r3, #120	@ 0x78
 8002a52:	ed93 7a00 	vldr	s14, [r3]
 8002a56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a5a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a64:	333c      	adds	r3, #60	@ 0x3c
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a78:	4413      	add	r3, r2
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a84:	443b      	add	r3, r7
 8002a86:	3bb8      	subs	r3, #184	@ 0xb8
 8002a88:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	ddd2      	ble.n	8002a44 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	ddc5      	ble.n	8002a3c <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ab0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00e f847 	bl	8010b4c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002ac4:	e038      	b.n	8002b38 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002acc:	e02b      	b.n	8002b26 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002ace:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ad2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d102      	bne.n	8002ae0 <MotorKalman_Update+0x438>
 8002ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ade:	e001      	b.n	8002ae4 <MotorKalman_Update+0x43c>
 8002ae0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cfc <MotorKalman_Update+0x654>
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002af6:	443b      	add	r3, r7
 8002af8:	3bb8      	subs	r3, #184	@ 0xb8
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b08:	4413      	add	r3, r2
 8002b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b14:	443b      	add	r3, r7
 8002b16:	3bf8      	subs	r3, #248	@ 0xf8
 8002b18:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	ddcf      	ble.n	8002ace <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b32:	3301      	adds	r3, #1
 8002b34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	ddc2      	ble.n	8002ac6 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002b40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f103 0110 	add.w	r1, r3, #16
 8002b4e:	f107 0308 	add.w	r3, r7, #8
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00e f83d 	bl	8010bd4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b60:	e06e      	b.n	8002c40 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b68:	e061      	b.n	8002c2e <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b74:	4413      	add	r3, r2
 8002b76:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b7a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	3304      	adds	r3, #4
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b92:	e043      	b.n	8002c1c <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ba4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	3304      	adds	r3, #4
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bb8:	009a      	lsls	r2, r3, #2
 8002bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bc6:	443b      	add	r3, r7
 8002bc8:	3bf8      	subs	r3, #248	@ 0xf8
 8002bca:	edd3 6a00 	vldr	s13, [r3]
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bd8:	4413      	add	r3, r2
 8002bda:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bde:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bf8:	4413      	add	r3, r2
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c02:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	ddb7      	ble.n	8002b94 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	dd99      	ble.n	8002b6a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	dd8c      	ble.n	8002b62 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ca6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f00d f9cd 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ce2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3310      	adds	r3, #16
 8002cea:	2204      	movs	r2, #4
 8002cec:	2104      	movs	r1, #4
 8002cee:	f00d f9bc 	bl	801006a <arm_mat_init_f32>
}
 8002cf2:	bf00      	nop
 8002cf4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00000000 	.word	0x00000000

08002d00 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d0c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002d10:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fafa 	bl	800230e <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002d1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fcc2 	bl	80026a8 <MotorKalman_Update>

    return filter->velocity;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002d2a:	ee07 3a90 	vmov	s15, r3
}
 8002d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e00c      	b.n	8002d64 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	441a      	add	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	440b      	add	r3, r1
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbee      	blt.n	8002d4a <matrix_copy+0x12>
    }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d88:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d8c:	6020      	str	r0, [r4, #0]
 8002d8e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d92:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d96:	6001      	str	r1, [r0, #0]
 8002d98:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d9c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002da0:	ed81 0a00 	vstr	s0, [r1]
 8002da4:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002da8:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002dac:	600a      	str	r2, [r1, #0]
 8002dae:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002db2:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002db6:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002db8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dbc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002dc0:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	2104      	movs	r1, #4
 8002dca:	f00d f94e 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002dce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dd2:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002dd6:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	2104      	movs	r1, #4
 8002de0:	f00d f943 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002de4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002de8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002dec:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	2104      	movs	r1, #4
 8002df6:	f00d f938 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002dfa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dfe:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e02:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	f00d f92d 	bl	801006a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002e10:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e14:	2240      	movs	r2, #64	@ 0x40
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00d fe97 	bl	8010b4c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002e1e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e22:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00d f91e 	bl	801006a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e34:	e011      	b.n	8002e5a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002e36:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e46:	443b      	add	r3, r7
 8002e48:	3b6c      	subs	r3, #108	@ 0x6c
 8002e4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e4e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e50:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e54:	3301      	adds	r3, #1
 8002e56:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e5a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	dde9      	ble.n	8002e36 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e62:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e66:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	f00d f8fc 	bl	801006a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e72:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e76:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e7a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e7e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e82:	ed93 0a00 	vldr	s0, [r3]
 8002e86:	4610      	mov	r0, r2
 8002e88:	f00d fcf8 	bl	801087c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e90:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e94:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e98:	2210      	movs	r2, #16
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	f7ff ff4c 	bl	8002d38 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002ea0:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002ea4:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	2104      	movs	r1, #4
 8002eac:	f00d f8dd 	bl	801006a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002eb0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002eb4:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002eb8:	2204      	movs	r2, #4
 8002eba:	2104      	movs	r1, #4
 8002ebc:	f00d f8d5 	bl	801006a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002ec0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002ec4:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ec8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00d f891 	bl	800fff4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002ed2:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002ed6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002eda:	2210      	movs	r2, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff2b 	bl	8002d38 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002ee2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ee6:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ef0:	e03a      	b.n	8002f68 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002ef2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002f0a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f0e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f12:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00d fc36 	bl	8010788 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002f1c:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f20:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f24:	2210      	movs	r2, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff06 	bl	8002d38 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f30:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f38:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f3c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f40:	4611      	mov	r1, r2
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	4618      	mov	r0, r3
 8002f48:	f00d fc98 	bl	801087c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f4c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f50:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f54:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f00d f84b 	bl	800fff4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f5e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f62:	3301      	adds	r3, #1
 8002f64:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f68:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f6c:	2b0a      	cmp	r3, #10
 8002f6e:	ddc0      	ble.n	8002ef2 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f70:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f78:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f7c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f80:	ed93 0a00 	vldr	s0, [r3]
 8002f84:	4610      	mov	r0, r2
 8002f86:	f00d fc79 	bl	801087c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f8e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	6053      	str	r3, [r2, #4]
 8002f9a:	6093      	str	r3, [r2, #8]
 8002f9c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f9e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002fa2:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2104      	movs	r1, #4
 8002faa:	f00d f85e 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002fae:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002fb2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002fb6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00d fbe4 	bl	8010788 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002fc0:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002fc4:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2104      	movs	r1, #4
 8002fcc:	f00d f84d 	bl	801006a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002fd0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fd4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fe0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fe4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fe8:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fec:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00d fc40 	bl	801087c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002ffc:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003000:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003004:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003008:	4618      	mov	r0, r3
 800300a:	f00c fff3 	bl	800fff4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800300e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003012:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003016:	4618      	mov	r0, r3
 8003018:	2340      	movs	r3, #64	@ 0x40
 800301a:	461a      	mov	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f00d fd95 	bl	8010b4c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003022:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003026:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800302a:	2204      	movs	r2, #4
 800302c:	2104      	movs	r1, #4
 800302e:	f00d f81c 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003032:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003036:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800303a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800303e:	4618      	mov	r0, r3
 8003040:	f00d fba2 	bl	8010788 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003044:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003048:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	6053      	str	r3, [r2, #4]
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003058:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800305c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003060:	2201      	movs	r2, #1
 8003062:	2104      	movs	r1, #4
 8003064:	f00d f801 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003068:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800306c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003070:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003074:	4618      	mov	r0, r3
 8003076:	f00d fb87 	bl	8010788 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800307a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800307e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800308a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800308e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800309e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030a2:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030aa:	4611      	mov	r1, r2
 80030ac:	eeb0 0a47 	vmov.f32	s0, s14
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00d fbe3 	bl	801087c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030b6:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030ba:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030be:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f00c ff96 	bl	800fff4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80030c8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030d0:	4618      	mov	r0, r3
 80030d2:	2340      	movs	r3, #64	@ 0x40
 80030d4:	461a      	mov	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f00d fd38 	bl	8010b4c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80030dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030e0:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030e4:	2204      	movs	r2, #4
 80030e6:	2104      	movs	r1, #4
 80030e8:	f00c ffbf 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030ec:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030f0:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030f4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00d fb45 	bl	8010788 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003102:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	6053      	str	r3, [r2, #4]
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003112:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003116:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800311a:	2201      	movs	r2, #1
 800311c:	2104      	movs	r1, #4
 800311e:	f00c ffa4 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003122:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003126:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800312a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800312e:	4618      	mov	r0, r3
 8003130:	f00d fb2a 	bl	8010788 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003134:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003138:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003144:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003148:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003158:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800316c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003170:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003174:	4611      	mov	r1, r2
 8003176:	eeb0 0a47 	vmov.f32	s0, s14
 800317a:	4618      	mov	r0, r3
 800317c:	f00d fb7e 	bl	801087c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003180:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003184:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003188:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800318c:	4618      	mov	r0, r3
 800318e:	f00c ff31 	bl	800fff4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003192:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003196:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800319a:	4618      	mov	r0, r3
 800319c:	2340      	movs	r3, #64	@ 0x40
 800319e:	461a      	mov	r2, r3
 80031a0:	2100      	movs	r1, #0
 80031a2:	f00d fcd3 	bl	8010b4c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80031a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031aa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80031ae:	2204      	movs	r2, #4
 80031b0:	2104      	movs	r1, #4
 80031b2:	f00c ff5a 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80031b6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80031ba:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031c2:	4618      	mov	r0, r3
 80031c4:	f00d fae0 	bl	8010788 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80031c8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031cc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	6053      	str	r3, [r2, #4]
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80031dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031e0:	f107 001c 	add.w	r0, r7, #28
 80031e4:	2201      	movs	r2, #1
 80031e6:	2104      	movs	r1, #4
 80031e8:	f00c ff3f 	bl	801006a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031ec:	f107 021c 	add.w	r2, r7, #28
 80031f0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00d fac5 	bl	8010788 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003202:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800320e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003212:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003222:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003232:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003278 <discretize_system_with_arm+0x4fc>
 8003242:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003246:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800324a:	f107 031c 	add.w	r3, r7, #28
 800324e:	4611      	mov	r1, r2
 8003250:	eeb0 0a47 	vmov.f32	s0, s14
 8003254:	4618      	mov	r0, r3
 8003256:	f00d fb11 	bl	801087c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800325a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800325e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003262:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003266:	4618      	mov	r0, r3
 8003268:	f00c fec4 	bl	800fff4 <arm_mat_add_f32>
}
 800326c:	bf00      	nop
 800326e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	42f00000 	.word	0x42f00000

0800327c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b09e      	sub	sp, #120	@ 0x78
 8003280:	af00      	add	r7, sp, #0
 8003282:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003286:	edc7 0a08 	vstr	s1, [r7, #32]
 800328a:	ed87 1a07 	vstr	s2, [r7, #28]
 800328e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003292:	ed87 2a05 	vstr	s4, [r7, #20]
 8003296:	edc7 2a04 	vstr	s5, [r7, #16]
 800329a:	ed87 3a03 	vstr	s6, [r7, #12]
 800329e:	60b8      	str	r0, [r7, #8]
 80032a0:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80032a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00d fc4e 	bl	8010b4c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80032b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80032be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80032c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c8:	eef1 6a67 	vneg.f32	s13, s15
 80032cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80032d8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80032dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80032ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032fc:	eef1 6a67 	vneg.f32	s13, s15
 8003300:	ed97 7a08 	vldr	s14, [r7, #32]
 8003304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003308:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 800330c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003310:	eef1 6a67 	vneg.f32	s13, s15
 8003314:	ed97 7a08 	vldr	s14, [r7, #32]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003324:	ed97 7a08 	vldr	s14, [r7, #32]
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003330:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003334:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003340:	f7ff fd1c 	bl	8002d7c <discretize_system_with_arm>
}
 8003344:	bf00      	nop
 8003346:	3778      	adds	r7, #120	@ 0x78
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a0b      	ldr	r2, [pc, #44]	@ (800338c <PWM_init+0x40>)
 800335e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f008 ff8a 	bl	800c28c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	4619      	mov	r1, r3
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f009 f8d1 	bl	800c524 <HAL_TIM_PWM_Start>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	0a21fe80 	.word	0x0a21fe80

08003390 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	ed87 0a02 	vstr	s0, [r7, #8]
 800339c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80033a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	d137      	bne.n	800341e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <PWM_write_duty+0x32>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80033c0:	e0e1      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	889b      	ldrh	r3, [r3, #4]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d105      	bne.n	80033d6 <PWM_write_duty+0x46>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80033d4:	e0d7      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	889b      	ldrh	r3, [r3, #4]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d105      	bne.n	80033ea <PWM_write_duty+0x5a>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033e8:	e0cd      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	889b      	ldrh	r3, [r3, #4]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d105      	bne.n	80033fe <PWM_write_duty+0x6e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fc:	e0c3      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	889b      	ldrh	r3, [r3, #4]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d105      	bne.n	8003412 <PWM_write_duty+0x82>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003410:	e0b9      	b.n	8003586 <PWM_write_duty+0x1f6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800341c:	e0b3      	b.n	8003586 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 7a02 	vldr	s14, [r7, #8]
 800342e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003436:	ee17 2a90 	vmov	r2, s15
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003446:	33fe      	adds	r3, #254	@ 0xfe
 8003448:	4a51      	ldr	r2, [pc, #324]	@ (8003590 <PWM_write_duty+0x200>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0bdb      	lsrs	r3, r3, #15
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	899b      	ldrh	r3, [r3, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003478:	ed97 7a02 	vldr	s14, [r7, #8]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348c:	ee17 3a90 	vmov	r3, s15
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	89db      	ldrh	r3, [r3, #14]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f80e 	bl	80004bc <__aeabi_i2d>
 80034a0:	4604      	mov	r4, r0
 80034a2:	460d      	mov	r5, r1
 80034a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80034a8:	eef0 7ae7 	vabs.f32	s15, s15
 80034ac:	ee17 0a90 	vmov	r0, s15
 80034b0:	f7fd f816 	bl	80004e0 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fd f868 	bl	8000590 <__aeabi_dmul>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <PWM_write_duty+0x204>)
 80034ce:	f7fd f989 	bl	80007e4 <__aeabi_ddiv>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb1b 	bl	8000b14 <__aeabi_d2uiz>
 80034de:	4603      	mov	r3, r0
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	899a      	ldrh	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	89da      	ldrh	r2, [r3, #14]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	89da      	ldrh	r2, [r3, #14]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	889b      	ldrh	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <PWM_write_duty+0x190>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6952      	ldr	r2, [r2, #20]
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800351e:	e032      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	889b      	ldrh	r3, [r3, #4]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d106      	bne.n	8003536 <PWM_write_duty+0x1a6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003534:	e027      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d106      	bne.n	800354c <PWM_write_duty+0x1bc>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800354a:	e01c      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	889b      	ldrh	r3, [r3, #4]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d106      	bne.n	8003562 <PWM_write_duty+0x1d2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003560:	e011      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	889b      	ldrh	r3, [r3, #4]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d106      	bne.n	8003578 <PWM_write_duty+0x1e8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003576:	e006      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003584:	e7ff      	b.n	8003586 <PWM_write_duty+0x1f6>
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	bf00      	nop
 8003590:	80008001 	.word	0x80008001
 8003594:	40590000 	.word	0x40590000

08003598 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035a4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80035a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d137      	bne.n	8003626 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	889b      	ldrh	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <PWM_write_range+0x32>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80035c8:	e0e1      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	889b      	ldrh	r3, [r3, #4]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d105      	bne.n	80035de <PWM_write_range+0x46>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	6393      	str	r3, [r2, #56]	@ 0x38
 80035dc:	e0d7      	b.n	800378e <PWM_write_range+0x1f6>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d105      	bne.n	80035f2 <PWM_write_range+0x5a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035f0:	e0cd      	b.n	800378e <PWM_write_range+0x1f6>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d105      	bne.n	8003606 <PWM_write_range+0x6e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	6413      	str	r3, [r2, #64]	@ 0x40
 8003604:	e0c3      	b.n	800378e <PWM_write_range+0x1f6>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	889b      	ldrh	r3, [r3, #4]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d105      	bne.n	800361a <PWM_write_range+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	6493      	str	r3, [r2, #72]	@ 0x48
 8003618:	e0b9      	b.n	800378e <PWM_write_range+0x1f6>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003624:	e0b3      	b.n	800378e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003632:	ed97 7a02 	vldr	s14, [r7, #8]
 8003636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363e:	ee17 2a90 	vmov	r2, s15
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800364e:	33fe      	adds	r3, #254	@ 0xfe
 8003650:	4a53      	ldr	r2, [pc, #332]	@ (80037a0 <PWM_write_range+0x208>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0bdb      	lsrs	r3, r3, #15
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	899b      	ldrh	r3, [r3, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003680:	ed97 7a02 	vldr	s14, [r7, #8]
 8003684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800368c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003694:	ee17 3a90 	vmov	r3, s15
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	89db      	ldrh	r3, [r3, #14]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc ff0a 	bl	80004bc <__aeabi_i2d>
 80036a8:	4604      	mov	r4, r0
 80036aa:	460d      	mov	r5, r1
 80036ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b0:	eef0 7ae7 	vabs.f32	s15, s15
 80036b4:	ee17 0a90 	vmov	r0, s15
 80036b8:	f7fc ff12 	bl	80004e0 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc ff64 	bl	8000590 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	a331      	add	r3, pc, #196	@ (adr r3, 8003798 <PWM_write_range+0x200>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd f885 	bl	80007e4 <__aeabi_ddiv>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fd fa17 	bl	8000b14 <__aeabi_d2uiz>
 80036e6:	4603      	mov	r3, r0
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	899a      	ldrh	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	89da      	ldrh	r2, [r3, #14]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	89da      	ldrh	r2, [r3, #14]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <PWM_write_range+0x190>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003726:	e032      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d106      	bne.n	800373e <PWM_write_range+0x1a6>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800373c:	e027      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	889b      	ldrh	r3, [r3, #4]
 8003742:	2b08      	cmp	r3, #8
 8003744:	d106      	bne.n	8003754 <PWM_write_range+0x1bc>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003752:	e01c      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d106      	bne.n	800376a <PWM_write_range+0x1d2>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003768:	e011      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	889b      	ldrh	r3, [r3, #4]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d106      	bne.n	8003780 <PWM_write_range+0x1e8>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800377e:	e006      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800378c:	e7ff      	b.n	800378e <PWM_write_range+0x1f6>
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bdb0      	pop	{r4, r5, r7, pc}
 8003796:	bf00      	nop
 8003798:	00000000 	.word	0x00000000
 800379c:	40efffe0 	.word	0x40efffe0
 80037a0:	80008001 	.word	0x80008001

080037a4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6178      	str	r0, [r7, #20]
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003804:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	fb93 f2f2 	sdiv	r2, r3, r2
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	fb01 f202 	mul.w	r2, r1, r2
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003872:	213c      	movs	r1, #60	@ 0x3c
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f009 f911 	bl	800ca9c <HAL_TIM_Encoder_Start>
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	0000      	movs	r0, r0
 8003884:	0000      	movs	r0, r0
	...

08003888 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	0fda      	lsrs	r2, r3, #31
 80038b0:	4413      	add	r3, r2
 80038b2:	105b      	asrs	r3, r3, #1
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	dd05      	ble.n	80038c8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e00e      	b.n	80038e6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	0fda      	lsrs	r2, r3, #31
 80038ce:	4413      	add	r3, r2
 80038d0:	105b      	asrs	r3, r3, #1
 80038d2:	425b      	negs	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4293      	cmp	r3, r2
 80038da:	da04      	bge.n	80038e6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003918:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fdd3 	bl	80004e0 <__aeabi_f2d>
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800395e:	ee17 0a90 	vmov	r0, s15
 8003962:	f7fc fdbd 	bl	80004e0 <__aeabi_f2d>
 8003966:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a58 <QEI_get_diff_count+0x1d0>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe10 	bl	8000590 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4690      	mov	r8, r2
 8003976:	4699      	mov	r9, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fdaf 	bl	80004e0 <__aeabi_f2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fe01 	bl	8000590 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f7fc fc45 	bl	8000224 <__adddf3>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fd f8d7 	bl	8000b54 <__aeabi_d2f>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fd95 	bl	80004e0 <__aeabi_f2d>
 80039b6:	4604      	mov	r4, r0
 80039b8:	460d      	mov	r5, r1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039d6:	ee16 0a90 	vmov	r0, s13
 80039da:	f7fc fd81 	bl	80004e0 <__aeabi_f2d>
 80039de:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a58 <QEI_get_diff_count+0x1d0>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fdd4 	bl	8000590 <__aeabi_dmul>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4690      	mov	r8, r2
 80039ee:	4699      	mov	r9, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fd73 	bl	80004e0 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4640      	mov	r0, r8
 8003a00:	4649      	mov	r1, r9
 8003a02:	f7fc fdc5 	bl	8000590 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fd64 	bl	80004e0 <__aeabi_f2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	4649      	mov	r1, r9
 8003a20:	f7fc fdb6 	bl	8000590 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7fc fbfa 	bl	8000224 <__adddf3>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7fd f88c 	bl	8000b54 <__aeabi_d2f>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	605a      	str	r2, [r3, #4]
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a54:	f3af 8000 	nop.w
 8003a58:	54442d18 	.word	0x54442d18
 8003a5c:	400921fb 	.word	0x400921fb

08003a60 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc fd2a 	bl	80004e0 <__aeabi_f2d>
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	4b83      	ldr	r3, [pc, #524]	@ (8003ca0 <QEI_compute_data+0x240>)
 8003a92:	f7fc fd7d 	bl	8000590 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	ee17 0a90 	vmov	r0, s15
 8003aae:	f7fc fd17 	bl	80004e0 <__aeabi_f2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fc fe93 	bl	80007e4 <__aeabi_ddiv>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4614      	mov	r4, r2
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd08 	bl	80004e0 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fd5a 	bl	8000590 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f836 	bl	8000b54 <__aeabi_d2f>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003af4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fcf0 	bl	80004e0 <__aeabi_f2d>
 8003b00:	a365      	add	r3, pc, #404	@ (adr r3, 8003c98 <QEI_compute_data+0x238>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fd43 	bl	8000590 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4614      	mov	r4, r2
 8003b10:	461d      	mov	r5, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b1e:	ee17 0a90 	vmov	r0, s15
 8003b22:	f7fc fcdd 	bl	80004e0 <__aeabi_f2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc fe59 	bl	80007e4 <__aeabi_ddiv>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	461d      	mov	r5, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fcce 	bl	80004e0 <__aeabi_f2d>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4620      	mov	r0, r4
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7fc fd20 	bl	8000590 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fc fffc 	bl	8000b54 <__aeabi_d2f>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fcba 	bl	80004e0 <__aeabi_f2d>
 8003b6c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c98 <QEI_compute_data+0x238>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fd0d 	bl	8000590 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fcac 	bl	80004e0 <__aeabi_f2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7fc fcfe 	bl	8000590 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4614      	mov	r4, r2
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba8:	ee17 0a90 	vmov	r0, s15
 8003bac:	f7fc fc98 	bl	80004e0 <__aeabi_f2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fe14 	bl	80007e4 <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fc89 	bl	80004e0 <__aeabi_f2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc fcdb 	bl	8000590 <__aeabi_dmul>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fc ffb7 	bl	8000b54 <__aeabi_d2f>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	d00a      	beq.n	8003c34 <QEI_compute_data+0x1d4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	e001      	b.n	8003c38 <QEI_compute_data+0x1d8>
 8003c34:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003ca4 <QEI_compute_data+0x244>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c4e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5e:	d00a      	beq.n	8003c76 <QEI_compute_data+0x216>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	e001      	b.n	8003c7a <QEI_compute_data+0x21a>
 8003c76:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003ca4 <QEI_compute_data+0x244>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	615a      	str	r2, [r3, #20]
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bdb0      	pop	{r4, r5, r7, pc}
 8003c98:	54442d18 	.word	0x54442d18
 8003c9c:	400921fb 	.word	0x400921fb
 8003ca0:	404e0000 	.word	0x404e0000
 8003ca4:	00000000 	.word	0x00000000

08003ca8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	615a      	str	r2, [r3, #20]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08e      	sub	sp, #56	@ 0x38
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6178      	str	r0, [r7, #20]
 8003d1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d20:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d24:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d28:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003d52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5e:	eef0 7ae7 	vabs.f32	s15, s15
 8003d62:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	d503      	bpl.n	8003d84 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	741a      	strb	r2, [r3, #16]
 8003d82:	e002      	b.n	8003d8a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2201      	movs	r2, #1
 8003d88:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003d8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003d8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d006      	beq.n	8003da6 <Trapezoidal_Generator+0x92>
 8003d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d104      	bne.n	8003db0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
        return;
 8003dae:	e06f      	b.n	8003e90 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003db0:	edd7 6a02 	vldr	s13, [r7, #8]
 8003db4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dcc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003de4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003de8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003df4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003df8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	db27      	blt.n	8003e56 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003e06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e0a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e22:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003e2c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003e3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e46:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e54:	e018      	b.n	8003e88 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003e56:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e62:	eeb0 0a66 	vmov.f32	s0, s13
 8003e66:	f00c ff8b 	bl	8010d80 <sqrtf>
 8003e6a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	60da      	str	r2, [r3, #12]
}
 8003e90:	3738      	adds	r7, #56	@ 0x38
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b08d      	sub	sp, #52	@ 0x34
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6178      	str	r0, [r7, #20]
 8003ea0:	6139      	str	r1, [r7, #16]
 8003ea2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ea6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003eaa:	ed87 1a01 	vstr	s2, [r7, #4]
 8003eae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eb8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800413c <Trapezoidal_Evaluated+0x2a4>
 8003ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eda:	f200 811b 	bhi.w	8004114 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	7c1b      	ldrb	r3, [r3, #16]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef2:	ed97 7a00 	vldr	s14, [r7]
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	ed93 7a00 	vldr	s14, [r3]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d109      	bne.n	8003f28 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003f26:	e00c      	b.n	8003f42 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	7c1b      	ldrb	r3, [r3, #16]
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d824      	bhi.n	8003fa2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003fa0:	e0c6      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	d830      	bhi.n	800401a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ff4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	e08a      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	edd3 7a02 	vldr	s15, [r3, #8]
 8004026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	d900      	bls.n	8004032 <Trapezoidal_Evaluated+0x19a>
}
 8004030:	e07e      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004032:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004036:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800403a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004052:	ed97 7a03 	vldr	s14, [r7, #12]
 8004056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	ed93 7a01 	vldr	s14, [r3, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	dd11      	ble.n	800409c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ed93 7a01 	vldr	s14, [r3, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004088:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004098:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	ed93 7a03 	vldr	s14, [r3, #12]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80040b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80040cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80040dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80040ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80040ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004104:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004108:	eef1 7a67 	vneg.f32	s15, s15
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004112:	e00d      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2201      	movs	r2, #1
 8004118:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	3734      	adds	r7, #52	@ 0x34
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	3a83126f 	.word	0x3a83126f

08004140 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	ed87 0a01 	vstr	s0, [r7, #4]
 800414a:	4603      	mov	r3, r0
 800414c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	2b1a      	cmp	r3, #26
 8004152:	d018      	beq.n	8004186 <temperature_to_base+0x46>
 8004154:	2b1a      	cmp	r3, #26
 8004156:	dc1d      	bgt.n	8004194 <temperature_to_base+0x54>
 8004158:	2b18      	cmp	r3, #24
 800415a:	d002      	beq.n	8004162 <temperature_to_base+0x22>
 800415c:	2b19      	cmp	r3, #25
 800415e:	d003      	beq.n	8004168 <temperature_to_base+0x28>
 8004160:	e018      	b.n	8004194 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004162:	edd7 7a01 	vldr	s15, [r7, #4]
 8004166:	e017      	b.n	8004198 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004168:	edd7 7a01 	vldr	s15, [r7, #4]
 800416c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80041a8 <temperature_to_base+0x68>
 8004170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004174:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004178:	ee27 7a87 	vmul.f32	s14, s15, s14
 800417c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004184:	e008      	b.n	8004198 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004186:	edd7 7a01 	vldr	s15, [r7, #4]
 800418a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041ac <temperature_to_base+0x6c>
 800418e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004192:	e001      	b.n	8004198 <temperature_to_base+0x58>
        default:
            return value;
 8004194:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004198:	eeb0 0a67 	vmov.f32	s0, s15
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	42000000 	.word	0x42000000
 80041ac:	43889333 	.word	0x43889333

080041b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ba:	4603      	mov	r3, r0
 80041bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	2b1a      	cmp	r3, #26
 80041c2:	d018      	beq.n	80041f6 <temperature_from_base+0x46>
 80041c4:	2b1a      	cmp	r3, #26
 80041c6:	dc1d      	bgt.n	8004204 <temperature_from_base+0x54>
 80041c8:	2b18      	cmp	r3, #24
 80041ca:	d002      	beq.n	80041d2 <temperature_from_base+0x22>
 80041cc:	2b19      	cmp	r3, #25
 80041ce:	d003      	beq.n	80041d8 <temperature_from_base+0x28>
 80041d0:	e018      	b.n	8004204 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80041d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d6:	e017      	b.n	8004208 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80041d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80041e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004218 <temperature_from_base+0x68>
 80041f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041f4:	e008      	b.n	8004208 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80041f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800421c <temperature_from_base+0x6c>
 80041fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004202:	e001      	b.n	8004208 <temperature_from_base+0x58>
        default:
            return value;
 8004204:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	42000000 	.word	0x42000000
 800421c:	43889333 	.word	0x43889333

08004220 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e00a      	b.n	8004250 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b1a      	cmp	r3, #26
 8004254:	ddf1      	ble.n	800423a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <init_length_converter+0x80>)
 800425a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <init_length_converter+0x84>)
 8004260:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004268:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <init_length_converter+0x88>)
 800426e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a0e      	ldr	r2, [pc, #56]	@ (80042ac <init_length_converter+0x8c>)
 8004274:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <init_length_converter+0x90>)
 800427a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <init_length_converter+0x94>)
 8004280:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <init_length_converter+0x98>)
 8004286:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	3a83126f 	.word	0x3a83126f
 80042a4:	3c23d70a 	.word	0x3c23d70a
 80042a8:	447a0000 	.word	0x447a0000
 80042ac:	3cd013a9 	.word	0x3cd013a9
 80042b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80042b4:	3f6a161e 	.word	0x3f6a161e
 80042b8:	44c92b02 	.word	0x44c92b02

080042bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	220a      	movs	r2, #10
 80042ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e00a      	b.n	80042ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b1a      	cmp	r3, #26
 80042f0:	ddf1      	ble.n	80042d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004330 <init_mass_converter+0x74>)
 80042f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <init_mass_converter+0x78>)
 80042fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0b      	ldr	r2, [pc, #44]	@ (8004338 <init_mass_converter+0x7c>)
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <init_mass_converter+0x80>)
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <init_mass_converter+0x84>)
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	358637bd 	.word	0x358637bd
 8004334:	3a83126f 	.word	0x3a83126f
 8004338:	447a0000 	.word	0x447a0000
 800433c:	3ce83d36 	.word	0x3ce83d36
 8004340:	3ee83d36 	.word	0x3ee83d36

08004344 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	220f      	movs	r2, #15
 8004356:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e00a      	b.n	8004374 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b1a      	cmp	r3, #26
 8004378:	ddf1      	ble.n	800435e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <init_angle_converter+0x64>)
 800437e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <init_angle_converter+0x68>)
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	3c8efa35 	.word	0x3c8efa35
 80043ac:	3c80adfd 	.word	0x3c80adfd

080043b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2203      	movs	r2, #3
 80043bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2214      	movs	r2, #20
 80043c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00a      	b.n	80043e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b1a      	cmp	r3, #26
 80043e4:	ddf1      	ble.n	80043ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a10      	ldr	r2, [pc, #64]	@ (800442c <init_time_converter+0x7c>)
 80043ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <init_time_converter+0x80>)
 80043f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004434 <init_time_converter+0x84>)
 80043f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <init_time_converter+0x88>)
 8004404:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a0c      	ldr	r2, [pc, #48]	@ (800443c <init_time_converter+0x8c>)
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0c      	ldr	r2, [pc, #48]	@ (8004440 <init_time_converter+0x90>)
 8004410:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	3089705f 	.word	0x3089705f
 8004430:	358637bd 	.word	0x358637bd
 8004434:	3a83126f 	.word	0x3a83126f
 8004438:	42700000 	.word	0x42700000
 800443c:	45610000 	.word	0x45610000
 8004440:	47a8c000 	.word	0x47a8c000

08004444 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2218      	movs	r2, #24
 8004456:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e00a      	b.n	8004474 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b1a      	cmp	r3, #26
 8004478:	ddf1      	ble.n	800445e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <init_temperature_converter+0x50>)
 800447e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <init_temperature_converter+0x54>)
 8004484:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	08004141 	.word	0x08004141
 8004498:	080041b1 	.word	0x080041b1

0800449c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff feba 	bl	8004220 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3378      	adds	r3, #120	@ 0x78
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff03 	bl	80042bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	33f0      	adds	r3, #240	@ 0xf0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff42 	bl	8004344 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff72 	bl	80043b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ffb6 	bl	8004444 <init_temperature_converter>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b1a      	cmp	r3, #26
 80044ee:	d803      	bhi.n	80044f8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <UnitConverter_get_unit_type+0x28>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	e000      	b.n	80044fa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000118 	.word	0x20000118

0800450c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	ed87 0a02 	vstr	s0, [r7, #8]
 8004518:	460b      	mov	r3, r1
 800451a:	71fb      	strb	r3, [r7, #7]
 800451c:	4613      	mov	r3, r2
 800451e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ffdc 	bl	80044e0 <UnitConverter_get_unit_type>
 8004528:	4603      	mov	r3, r0
 800452a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 800452c:	79bb      	ldrb	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ffd6 	bl	80044e0 <UnitConverter_get_unit_type>
 8004534:	4603      	mov	r3, r0
 8004536:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004538:	7efa      	ldrb	r2, [r7, #27]
 800453a:	7ebb      	ldrb	r3, [r7, #26]
 800453c:	429a      	cmp	r2, r3
 800453e:	d002      	beq.n	8004546 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004540:	edd7 7a02 	vldr	s15, [r7, #8]
 8004544:	e03b      	b.n	80045be <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004546:	7efa      	ldrb	r2, [r7, #27]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	79fa      	ldrb	r2, [r7, #7]
 8004564:	4610      	mov	r0, r2
 8004566:	ed97 0a02 	vldr	s0, [r7, #8]
 800456a:	4798      	blx	r3
 800456c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004570:	e00c      	b.n	800458c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	ed97 7a02 	vldr	s14, [r7, #8]
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004598:	79ba      	ldrb	r2, [r7, #6]
 800459a:	4610      	mov	r0, r2
 800459c:	ed97 0a07 	vldr	s0, [r7, #28]
 80045a0:	4798      	blx	r3
 80045a2:	eef0 7a40 	vmov.f32	s15, s0
 80045a6:	e00a      	b.n	80045be <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80045a8:	79bb      	ldrb	r3, [r7, #6]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	3304      	adds	r3, #4
 80045b2:	ed93 7a00 	vldr	s14, [r3]
 80045b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80045d4:	460b      	mov	r3, r1
 80045d6:	71fb      	strb	r3, [r7, #7]
 80045d8:	4613      	mov	r3, r2
 80045da:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff7e 	bl	80044e0 <UnitConverter_get_unit_type>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d111      	bne.n	800460e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 80045ea:	79bb      	ldrb	r3, [r7, #6]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff77 	bl	80044e0 <UnitConverter_get_unit_type>
 80045f2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d10a      	bne.n	800460e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80045f8:	79ba      	ldrb	r2, [r7, #6]
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4619      	mov	r1, r3
 80045fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff ff82 	bl	800450c <UnitConverter_convert>
 8004608:	eef0 7a40 	vmov.f32	s15, s0
 800460c:	e001      	b.n	8004612 <UnitConverter_angle+0x4a>
    }
    return value;
 800460e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	2220      	movs	r2, #32
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f00c fa89 	bl	8010b4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800463a:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <MX_ADC1_Init+0x104>)
 800463c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004642:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004644:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800464a:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <MX_ADC1_Init+0x104>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004650:	4b33      	ldr	r3, [pc, #204]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004656:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800465c:	4b30      	ldr	r3, [pc, #192]	@ (8004720 <MX_ADC1_Init+0x104>)
 800465e:	2201      	movs	r2, #1
 8004660:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004664:	2204      	movs	r2, #4
 8004666:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004668:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <MX_ADC1_Init+0x104>)
 800466a:	2200      	movs	r2, #0
 800466c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800466e:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004670:	2201      	movs	r2, #1
 8004672:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004674:	4b2a      	ldr	r3, [pc, #168]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004676:	2202      	movs	r2, #2
 8004678:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800467a:	4b29      	ldr	r3, [pc, #164]	@ (8004720 <MX_ADC1_Init+0x104>)
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004682:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004684:	2200      	movs	r2, #0
 8004686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <MX_ADC1_Init+0x104>)
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004698:	2200      	movs	r2, #0
 800469a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800469c:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <MX_ADC1_Init+0x104>)
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046a4:	481e      	ldr	r0, [pc, #120]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046a6:	f004 fd03 	bl	80090b0 <HAL_ADC_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80046b0:	f002 fd48 	bl	8007144 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80046b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	4818      	ldr	r0, [pc, #96]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046c0:	f005 fe22 	bl	800a308 <HAL_ADCEx_MultiModeConfigChannel>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80046ca:	f002 fd3b 	bl	8007144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <MX_ADC1_Init+0x108>)
 80046d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80046d2:	2306      	movs	r3, #6
 80046d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80046d6:	2307      	movs	r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046da:	237f      	movs	r3, #127	@ 0x7f
 80046dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80046de:	2304      	movs	r3, #4
 80046e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	480d      	ldr	r0, [pc, #52]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046ec:	f004 ff8e 	bl	800960c <HAL_ADC_ConfigChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80046f6:	f002 fd25 	bl	8007144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <MX_ADC1_Init+0x10c>)
 80046fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046fe:	230c      	movs	r3, #12
 8004700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4806      	ldr	r0, [pc, #24]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004708:	f004 ff80 	bl	800960c <HAL_ADC_ConfigChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004712:	f002 fd17 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004716:	bf00      	nop
 8004718:	3730      	adds	r7, #48	@ 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200001b4 	.word	0x200001b4
 8004724:	19200040 	.word	0x19200040
 8004728:	1d500080 	.word	0x1d500080

0800472c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b09e      	sub	sp, #120	@ 0x78
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	2254      	movs	r2, #84	@ 0x54
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f00c f9fd 	bl	8010b4c <memset>
  if(adcHandle->Instance==ADC1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475a:	d15e      	bne.n	800481a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800475c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004762:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004766:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	4618      	mov	r0, r3
 800476e:	f007 fadb 	bl	800bd28 <HAL_RCCEx_PeriphCLKConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004778:	f002 fce4 	bl	8007144 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800477c:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	4a28      	ldr	r2, [pc, #160]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 8004782:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004794:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047a0:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 80047a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047ac:	2303      	movs	r3, #3
 80047ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047b0:	2303      	movs	r3, #3
 80047b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047bc:	4619      	mov	r1, r3
 80047be:	481a      	ldr	r0, [pc, #104]	@ (8004828 <HAL_ADC_MspInit+0xfc>)
 80047c0:	f006 faec 	bl	800ad9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <HAL_ADC_MspInit+0x104>)
 80047c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80047ca:	4b18      	ldr	r3, [pc, #96]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047cc:	2205      	movs	r2, #5
 80047ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047d8:	2200      	movs	r2, #0
 80047da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047de:	2280      	movs	r2, #128	@ 0x80
 80047e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047ea:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047f4:	2220      	movs	r2, #32
 80047f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047fe:	480b      	ldr	r0, [pc, #44]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004800:	f005 ff9a 	bl	800a738 <HAL_DMA_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800480a:	f002 fc9b 	bl	8007144 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a06      	ldr	r2, [pc, #24]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004812:	655a      	str	r2, [r3, #84]	@ 0x54
 8004814:	4a05      	ldr	r2, [pc, #20]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800481a:	bf00      	nop
 800481c:	3778      	adds	r7, #120	@ 0x78
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	48000800 	.word	0x48000800
 800482c:	20000220 	.word	0x20000220
 8004830:	40020008 	.word	0x40020008

08004834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <MX_DMA_Init+0x90>)
 800483c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483e:	4a21      	ldr	r2, [pc, #132]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	6493      	str	r3, [r2, #72]	@ 0x48
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004852:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004856:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6493      	str	r3, [r2, #72]	@ 0x48
 800485e:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	200b      	movs	r0, #11
 8004870:	f005 ff2d 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004874:	200b      	movs	r0, #11
 8004876:	f005 ff44 	bl	800a702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	200c      	movs	r0, #12
 8004880:	f005 ff25 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004884:	200c      	movs	r0, #12
 8004886:	f005 ff3c 	bl	800a702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	200d      	movs	r0, #13
 8004890:	f005 ff1d 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004894:	200d      	movs	r0, #13
 8004896:	f005 ff34 	bl	800a702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	200e      	movs	r0, #14
 80048a0:	f005 ff15 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80048a4:	200e      	movs	r0, #14
 80048a6:	f005 ff2c 	bl	800a702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2100      	movs	r1, #0
 80048ae:	200f      	movs	r0, #15
 80048b0:	f005 ff0d 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80048b4:	200f      	movs	r0, #15
 80048b6:	f005 ff24 	bl	800a702 <HAL_NVIC_EnableIRQ>

}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000

080048c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ce:	f107 0314 	add.w	r3, r7, #20
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048de:	4b75      	ldr	r3, [pc, #468]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e2:	4a74      	ldr	r2, [pc, #464]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ea:	4b72      	ldr	r3, [pc, #456]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048f6:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048fc:	f043 0320 	orr.w	r3, r3, #32
 8004900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004902:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800490e:	4b69      	ldr	r3, [pc, #420]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	4a68      	ldr	r2, [pc, #416]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800491a:	4b66      	ldr	r3, [pc, #408]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004926:	4b63      	ldr	r3, [pc, #396]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004932:	4b60      	ldr	r3, [pc, #384]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800493e:	2200      	movs	r2, #0
 8004940:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004948:	f006 fbc2 	bl	800b0d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004952:	4859      	ldr	r0, [pc, #356]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004954:	f006 fbbc 	bl	800b0d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800495c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800495e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4619      	mov	r1, r3
 800496e:	4852      	ldr	r0, [pc, #328]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004970:	f006 fa14 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004974:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	4619      	mov	r1, r3
 800498c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004990:	f006 fa04 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004994:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800499a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800499e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4619      	mov	r1, r3
 80049aa:	4844      	ldr	r0, [pc, #272]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 80049ac:	f006 f9f6 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80049b0:	2306      	movs	r3, #6
 80049b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049b8:	2302      	movs	r3, #2
 80049ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	4619      	mov	r1, r3
 80049c2:	483e      	ldr	r0, [pc, #248]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 80049c4:	f006 f9ea 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4835      	ldr	r0, [pc, #212]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 80049e2:	f006 f9db 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 80049e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80049ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049f2:	2302      	movs	r3, #2
 80049f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4619      	mov	r1, r3
 80049fc:	482e      	ldr	r0, [pc, #184]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 80049fe:	f006 f9cd 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4619      	mov	r1, r3
 8004a16:	4828      	ldr	r0, [pc, #160]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004a18:	f006 f9c0 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4822      	ldr	r0, [pc, #136]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a32:	f006 f9b3 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004a36:	2340      	movs	r3, #64	@ 0x40
 8004a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a40:	2301      	movs	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	4619      	mov	r1, r3
 8004a4a:	481c      	ldr	r0, [pc, #112]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a4c:	f006 f9a6 	bl	800ad9c <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	4619      	mov	r1, r3
 8004a64:	4815      	ldr	r0, [pc, #84]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a66:	f006 f999 	bl	800ad9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2006      	movs	r0, #6
 8004a70:	f005 fe2d 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004a74:	2006      	movs	r0, #6
 8004a76:	f005 fe44 	bl	800a702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200a      	movs	r0, #10
 8004a80:	f005 fe25 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004a84:	200a      	movs	r0, #10
 8004a86:	f005 fe3c 	bl	800a702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2017      	movs	r0, #23
 8004a90:	f005 fe1d 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a94:	2017      	movs	r0, #23
 8004a96:	f005 fe34 	bl	800a702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2028      	movs	r0, #40	@ 0x28
 8004aa0:	f005 fe15 	bl	800a6ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004aa4:	2028      	movs	r0, #40	@ 0x28
 8004aa6:	f005 fe2c 	bl	800a702 <HAL_NVIC_EnableIRQ>

}
 8004aaa:	bf00      	nop
 8004aac:	3728      	adds	r7, #40	@ 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	48000800 	.word	0x48000800
 8004abc:	48000400 	.word	0x48000400

08004ac0 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b096      	sub	sp, #88	@ 0x58
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004acc:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2101      	movs	r1, #1
 8004adc:	f00b fac5 	bl	801006a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f00b ff35 	bl	801095e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f00b ff2b 	bl	801095e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f00b ff21 	bl	801095e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004b28:	4619      	mov	r1, r3
 8004b2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f00b fea4 	bl	801087c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004b46:	461a      	mov	r2, r3
 8004b48:	f00b fe1e 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f00b fa48 	bl	800fff4 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b76:	461a      	mov	r2, r3
 8004b78:	f00b fe06 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f00b fdfa 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f00b fdee 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f00b fe59 	bl	801087c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f00b fa09 	bl	800fff4 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f00b fdc7 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f00b fdbb 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004c24:	461a      	mov	r2, r3
 8004c26:	f00b f9e5 	bl	800fff4 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f00b fa2e 	bl	801009a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004c50:	461a      	mov	r2, r3
 8004c52:	f00b fd99 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f00b fd8d 	bl	8010788 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004c80:	461a      	mov	r2, r3
 8004c82:	f00b fd81 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f00b fe25 	bl	80108e8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f00b fd69 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f00b f993 	bl	800fff4 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f00b fd51 	bl	8010788 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004ce6:	f107 0310 	add.w	r3, r7, #16
 8004cea:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004cee:	2204      	movs	r2, #4
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	f00b f9ba 	bl	801006a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004d02:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004d06:	4619      	mov	r1, r3
 8004d08:	f00b fd3e 	bl	8010788 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004d12:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004d16:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f00b fde4 	bl	80108e8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004d2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004d30:	4618      	mov	r0, r3
 8004d32:	f00b fd29 	bl	8010788 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d46:	ee07 3a90 	vmov	s15, r3
}
 8004d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4e:	3758      	adds	r7, #88	@ 0x58
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b0a4      	sub	sp, #144	@ 0x90
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6178      	str	r0, [r7, #20]
 8004d5c:	6139      	str	r1, [r7, #16]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d64:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004d78:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004dae:	4bc6      	ldr	r3, [pc, #792]	@ (80050c8 <Kalman_Start+0x374>)
 8004db0:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004db4:	461d      	mov	r5, r3
 8004db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004dca:	f107 031c 	add.w	r3, r7, #28
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004de8:	e028      	b.n	8004e3c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3390      	adds	r3, #144	@ 0x90
 8004e0c:	443b      	add	r3, r7
 8004e0e:	3b64      	subs	r3, #100	@ 0x64
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e18:	3398      	adds	r3, #152	@ 0x98
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e26:	3304      	adds	r3, #4
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e36:	3301      	adds	r3, #1
 8004e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	ddd2      	ble.n	8004dea <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e4a:	e03a      	b.n	8004ec2 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	3390      	adds	r3, #144	@ 0x90
 8004e54:	443b      	add	r3, r7
 8004e56:	3b74      	subs	r3, #116	@ 0x74
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e78:	3324      	adds	r3, #36	@ 0x24
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	3390      	adds	r3, #144	@ 0x90
 8004e88:	443b      	add	r3, r7
 8004e8a:	3b14      	subs	r3, #20
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e94:	3328      	adds	r3, #40	@ 0x28
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	3390      	adds	r3, #144	@ 0x90
 8004ea4:	443b      	add	r3, r7
 8004ea6:	3b24      	subs	r3, #36	@ 0x24
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb0:	332c      	adds	r3, #44	@ 0x2c
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	ddc0      	ble.n	8004e4c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	f00b f8c8 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3310      	adds	r3, #16
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	f00b f8bf 	bl	801006a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3350      	adds	r3, #80	@ 0x50
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	2104      	movs	r1, #4
 8004efa:	f00b f8b6 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3390      	adds	r3, #144	@ 0x90
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	f00b f8ad 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	33a0      	adds	r3, #160	@ 0xa0
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	f00b f8a4 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	33b0      	adds	r3, #176	@ 0xb0
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2104      	movs	r1, #4
 8004f30:	f00b f89b 	bl	801006a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	33c8      	adds	r3, #200	@ 0xc8
 8004f3e:	2204      	movs	r2, #4
 8004f40:	2104      	movs	r1, #4
 8004f42:	f00b f892 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004f52:	2201      	movs	r2, #1
 8004f54:	2104      	movs	r1, #4
 8004f56:	f00b f888 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004f66:	2204      	movs	r2, #4
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f00b f87e 	bl	801006a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f00b f874 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f8e:	2204      	movs	r2, #4
 8004f90:	2104      	movs	r1, #4
 8004f92:	f00b f86a 	bl	801006a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	f00b f860 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2104      	movs	r1, #4
 8004fba:	f00b f856 	bl	801006a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004fca:	2204      	movs	r2, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00b f84c 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	f00b f842 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	f00b f838 	bl	801006a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005006:	2201      	movs	r2, #1
 8005008:	2104      	movs	r1, #4
 800500a:	f00b f82e 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800501a:	2201      	movs	r2, #1
 800501c:	2104      	movs	r1, #4
 800501e:	f00b f824 	bl	801006a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800502e:	2201      	movs	r2, #1
 8005030:	2101      	movs	r1, #1
 8005032:	f00b f81a 	bl	801006a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005042:	2201      	movs	r2, #1
 8005044:	2101      	movs	r1, #1
 8005046:	f00b f810 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005056:	2201      	movs	r2, #1
 8005058:	2101      	movs	r1, #1
 800505a:	f00b f806 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800506a:	2201      	movs	r2, #1
 800506c:	2104      	movs	r1, #4
 800506e:	f00a fffc 	bl	801006a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800507e:	2201      	movs	r2, #1
 8005080:	2101      	movs	r1, #1
 8005082:	f00a fff2 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005092:	2204      	movs	r2, #4
 8005094:	2104      	movs	r1, #4
 8005096:	f00a ffe8 	bl	801006a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	33c4      	adds	r3, #196	@ 0xc4
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	f00a ffdf 	bl	801006a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80050b8:	2201      	movs	r2, #1
 80050ba:	2101      	movs	r1, #1
 80050bc:	f00a ffd5 	bl	801006a <arm_mat_init_f32>
}
 80050c0:	bf00      	nop
 80050c2:	3790      	adds	r7, #144	@ 0x90
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdb0      	pop	{r4, r5, r7, pc}
 80050c8:	08012a18 	.word	0x08012a18

080050cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050d0:	f3bf 8f4f 	dsb	sy
}
 80050d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80050d6:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <__NVIC_SystemReset+0x24>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80050de:	4904      	ldr	r1, [pc, #16]	@ (80050f0 <__NVIC_SystemReset+0x24>)
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <__NVIC_SystemReset+0x28>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050e6:	f3bf 8f4f 	dsb	sy
}
 80050ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <__NVIC_SystemReset+0x20>
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	05fa0004 	.word	0x05fa0004

080050f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050fe:	f003 fd22 	bl	8008b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005102:	f000 f88d 	bl	8005220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005106:	f7ff fbdf 	bl	80048c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800510a:	f7ff fb93 	bl	8004834 <MX_DMA_Init>
  MX_ADC1_Init();
 800510e:	f7ff fa85 	bl	800461c <MX_ADC1_Init>
  MX_TIM2_Init();
 8005112:	f002 ff2d 	bl	8007f70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005116:	f002 ff79 	bl	800800c <MX_TIM3_Init>
  MX_TIM4_Init();
 800511a:	f002 ffcd 	bl	80080b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800511e:	f003 f821 	bl	8008164 <MX_TIM5_Init>
  MX_TIM8_Init();
 8005122:	f003 f875 	bl	8008210 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005126:	f003 fb37 	bl	8008798 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800512a:	f003 f92f 	bl	800838c <MX_TIM16_Init>
  MX_TIM1_Init();
 800512e:	f002 fe8b 	bl	8007e48 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8005132:	f003 fae7 	bl	8008704 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	plotter_begin();
 8005136:	f002 f80b 	bl	8007150 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 800513a:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <main+0xe4>)
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	4a28      	ldr	r2, [pc, #160]	@ (80051e0 <main+0xe8>)
 8005140:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005142:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <main+0xec>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	4a28      	ldr	r2, [pc, #160]	@ (80051e8 <main+0xf0>)
 8005148:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800514a:	4b28      	ldr	r3, [pc, #160]	@ (80051ec <main+0xf4>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005150:	4b27      	ldr	r3, [pc, #156]	@ (80051f0 <main+0xf8>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005156:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <main+0xfc>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800515c:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <main+0x100>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005162:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <main+0x104>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <main+0x108>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d032      	beq.n	80051d6 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005170:	2101      	movs	r1, #1
 8005172:	4824      	ldr	r0, [pc, #144]	@ (8005204 <main+0x10c>)
 8005174:	f005 ff94 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005184:	2140      	movs	r1, #64	@ 0x40
 8005186:	481f      	ldr	r0, [pc, #124]	@ (8005204 <main+0x10c>)
 8005188:	f005 ff8a 	bl	800b0a0 <HAL_GPIO_ReadPin>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <main+0xd8>
 800519e:	79bb      	ldrb	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80051a4:	4b16      	ldr	r3, [pc, #88]	@ (8005200 <main+0x108>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80051aa:	4b17      	ldr	r3, [pc, #92]	@ (8005208 <main+0x110>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <main+0x114>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80051b6:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <main+0x118>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <main+0x11c>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <main+0x120>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <main+0x124>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <main+0xde>

		} else {
			start_homing_sequence(true);
 80051d0:	2001      	movs	r0, #1
 80051d2:	f000 f871 	bl	80052b8 <start_homing_sequence>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <main+0xde>
 80051da:	bf00      	nop
 80051dc:	20000444 	.word	0x20000444
 80051e0:	20000280 	.word	0x20000280
 80051e4:	200004a0 	.word	0x200004a0
 80051e8:	200002c0 	.word	0x200002c0
 80051ec:	20000364 	.word	0x20000364
 80051f0:	2000036d 	.word	0x2000036d
 80051f4:	2000036c 	.word	0x2000036c
 80051f8:	20000368 	.word	0x20000368
 80051fc:	200003a0 	.word	0x200003a0
 8005200:	20000133 	.word	0x20000133
 8005204:	48000400 	.word	0x48000400
 8005208:	20000363 	.word	0x20000363
 800520c:	20000362 	.word	0x20000362
 8005210:	20000360 	.word	0x20000360
 8005214:	20000361 	.word	0x20000361
 8005218:	2000035c 	.word	0x2000035c
 800521c:	20000300 	.word	0x20000300

08005220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b094      	sub	sp, #80	@ 0x50
 8005224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005226:	f107 0318 	add.w	r3, r7, #24
 800522a:	2238      	movs	r2, #56	@ 0x38
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f00b fc8c 	bl	8010b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005242:	2000      	movs	r0, #0
 8005244:	f005 ff8e 	bl	800b164 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800524c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005252:	2340      	movs	r3, #64	@ 0x40
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005256:	2302      	movs	r3, #2
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800525a:	2302      	movs	r3, #2
 800525c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800525e:	2304      	movs	r3, #4
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8005262:	2355      	movs	r3, #85	@ 0x55
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005266:	2302      	movs	r3, #2
 8005268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800526a:	2302      	movs	r3, #2
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800526e:	2302      	movs	r3, #2
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005272:	f107 0318 	add.w	r3, r7, #24
 8005276:	4618      	mov	r0, r3
 8005278:	f006 f828 	bl	800b2cc <HAL_RCC_OscConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005282:	f001 ff5f 	bl	8007144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005286:	230f      	movs	r3, #15
 8005288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800528a:	2303      	movs	r3, #3
 800528c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	2104      	movs	r1, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f006 fb26 	bl	800b8f0 <HAL_RCC_ClockConfig>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80052aa:	f001 ff4b 	bl	8007144 <Error_Handler>
  }
}
 80052ae:	bf00      	nop
 80052b0:	3750      	adds	r7, #80	@ 0x50
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
    if (homing_active)
 80052c2:	4b50      	ldr	r3, [pc, #320]	@ (8005404 <start_homing_sequence+0x14c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 8098 	bne.w	80053fc <start_homing_sequence+0x144>
        return;

    // Check current sensor states
    bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80052cc:	2101      	movs	r1, #1
 80052ce:	484e      	ldr	r0, [pc, #312]	@ (8005408 <start_homing_sequence+0x150>)
 80052d0:	f005 fee6 	bl	800b0a0 <HAL_GPIO_ReadPin>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
    bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80052e0:	2140      	movs	r1, #64	@ 0x40
 80052e2:	4849      	ldr	r0, [pc, #292]	@ (8005408 <start_homing_sequence+0x150>)
 80052e4:	f005 fedc 	bl	800b0a0 <HAL_GPIO_ReadPin>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	73bb      	strb	r3, [r7, #14]

    // Different logic for startup vs manual homing
    if (is_startup || first_startup) {
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <start_homing_sequence+0x4a>
 80052fa:	4b44      	ldr	r3, [pc, #272]	@ (800540c <start_homing_sequence+0x154>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d02e      	beq.n	8005360 <start_homing_sequence+0xa8>
        // STARTUP LOGIC: Skip homing if already at home position
        if (up_photo_detected && prox_detected) {
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d018      	beq.n	800533a <start_homing_sequence+0x82>
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <start_homing_sequence+0x82>
            // Already at home position - no need to home
            homing_active = false;
 800530e:	4b3d      	ldr	r3, [pc, #244]	@ (8005404 <start_homing_sequence+0x14c>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
            homing_state = HOMING_IDLE;
 8005314:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <start_homing_sequence+0x158>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
            first_startup = false;
 800531a:	4b3c      	ldr	r3, [pc, #240]	@ (800540c <start_homing_sequence+0x154>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]

            // Clear sensor flags
            up_photo = false;
 8005320:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <start_homing_sequence+0x15c>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
            low_photo = false;
 8005326:	4b3c      	ldr	r3, [pc, #240]	@ (8005418 <start_homing_sequence+0x160>)
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
            prox_count = 0;
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <start_homing_sequence+0x164>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

            // Set motion to idle
            motion_sequence_state = MOTION_IDLE;
 8005332:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <start_homing_sequence+0x168>)
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
            return;
 8005338:	e061      	b.n	80053fe <start_homing_sequence+0x146>
        }

        // Not at home - start startup homing sequence (skip zero degrees)
        homing_active = true;
 800533a:	4b32      	ldr	r3, [pc, #200]	@ (8005404 <start_homing_sequence+0x14c>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
        motion_sequence_state = MOTION_IDLE;
 8005340:	4b37      	ldr	r3, [pc, #220]	@ (8005420 <start_homing_sequence+0x168>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
        prox_count = 0;
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <start_homing_sequence+0x164>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
        up_photo = false;
 800534c:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <start_homing_sequence+0x15c>)
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
        low_photo = false;
 8005352:	4b31      	ldr	r3, [pc, #196]	@ (8005418 <start_homing_sequence+0x160>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
        homing_state = HOMING_PEN_UP;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <start_homing_sequence+0x158>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e04e      	b.n	80053fe <start_homing_sequence+0x146>

    } else {
        // MANUAL HOMING LOGIC: More sophisticated behavior
        if (up_photo_detected && prox_detected) {
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <start_homing_sequence+0xe0>
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <start_homing_sequence+0xe0>
            // Already perfectly homed - skip homing completely
            homing_active = false;
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <start_homing_sequence+0x14c>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
            homing_state = HOMING_IDLE;
 8005372:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <start_homing_sequence+0x158>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
            first_startup = false;  // ← ADDED THIS LINE
 8005378:	4b24      	ldr	r3, [pc, #144]	@ (800540c <start_homing_sequence+0x154>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
            up_photo = false;
 800537e:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <start_homing_sequence+0x15c>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
            low_photo = false;
 8005384:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <start_homing_sequence+0x160>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
            prox_count = 0;
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <start_homing_sequence+0x164>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
            motion_sequence_state = MOTION_IDLE;
 8005390:	4b23      	ldr	r3, [pc, #140]	@ (8005420 <start_homing_sequence+0x168>)
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
            return;
 8005396:	e032      	b.n	80053fe <start_homing_sequence+0x146>
            up_photo = false;
            low_photo = false;
            homing_state = HOMING_REV_TO_ZERO_DEG;
            rev_to_zero_trajectory_started = false;
            */
        } else if (up_photo_detected && !prox_detected) {
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01b      	beq.n	80053d6 <start_homing_sequence+0x11e>
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	f083 0301 	eor.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <start_homing_sequence+0x11e>
            // At up photo but not at prox - go to zero degrees first
            homing_active = true;
 80053aa:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <start_homing_sequence+0x14c>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
            motion_sequence_state = MOTION_IDLE;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <start_homing_sequence+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
            prox_count = 0;
 80053b6:	4b19      	ldr	r3, [pc, #100]	@ (800541c <start_homing_sequence+0x164>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
            up_photo = false;
 80053bc:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <start_homing_sequence+0x15c>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
            low_photo = false;
 80053c2:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <start_homing_sequence+0x160>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
            homing_state = HOMING_REV_TO_ZERO_DEG;
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <start_homing_sequence+0x158>)
 80053ca:	2207      	movs	r2, #7
 80053cc:	701a      	strb	r2, [r3, #0]
            rev_to_zero_trajectory_started = false;
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <start_homing_sequence+0x16c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e013      	b.n	80053fe <start_homing_sequence+0x146>
        } else {
            // Not at up photo - start full homing sequence
            homing_active = true;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <start_homing_sequence+0x14c>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
            motion_sequence_state = MOTION_IDLE;
 80053dc:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <start_homing_sequence+0x168>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
            prox_count = 0;
 80053e2:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <start_homing_sequence+0x164>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
            up_photo = false;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <start_homing_sequence+0x15c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
            low_photo = false;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <start_homing_sequence+0x160>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
            homing_state = HOMING_PEN_UP;
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <start_homing_sequence+0x158>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e000      	b.n	80053fe <start_homing_sequence+0x146>
        return;
 80053fc:	bf00      	nop
        }
    }
}
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000363 	.word	0x20000363
 8005408:	48000400 	.word	0x48000400
 800540c:	20000133 	.word	0x20000133
 8005410:	20000362 	.word	0x20000362
 8005414:	20000360 	.word	0x20000360
 8005418:	20000361 	.word	0x20000361
 800541c:	2000035c 	.word	0x2000035c
 8005420:	20000300 	.word	0x20000300
 8005424:	2000036e 	.word	0x2000036e

08005428 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b02 	vpush	{d8}
 8005430:	b095      	sub	sp, #84	@ 0x54
 8005432:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005434:	4b97      	ldr	r3, [pc, #604]	@ (8005694 <update_homing_sequence+0x26c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f083 0301 	eor.w	r3, r3, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 851b 	bne.w	8005e7a <update_homing_sequence+0xa52>
		return;

	switch (homing_state) {
 8005444:	4b94      	ldr	r3, [pc, #592]	@ (8005698 <update_homing_sequence+0x270>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	3b01      	subs	r3, #1
 800544a:	2b0a      	cmp	r3, #10
 800544c:	f200 8517 	bhi.w	8005e7e <update_homing_sequence+0xa56>
 8005450:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <update_homing_sequence+0x30>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005485 	.word	0x08005485
 800545c:	080054a9 	.word	0x080054a9
 8005460:	08005519 	.word	0x08005519
 8005464:	08005667 	.word	0x08005667
 8005468:	080056d9 	.word	0x080056d9
 800546c:	0800581f 	.word	0x0800581f
 8005470:	080058e5 	.word	0x080058e5
 8005474:	08005cb1 	.word	0x08005cb1
 8005478:	08005d17 	.word	0x08005d17
 800547c:	08005e4b 	.word	0x08005e4b
 8005480:	08005e77 	.word	0x08005e77
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005484:	f002 facc 	bl	8007a20 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005488:	4b84      	ldr	r3, [pc, #528]	@ (800569c <update_homing_sequence+0x274>)
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005490:	4b83      	ldr	r3, [pc, #524]	@ (80056a0 <update_homing_sequence+0x278>)
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005498:	4b82      	ldr	r3, [pc, #520]	@ (80056a4 <update_homing_sequence+0x27c>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800549e:	4b7e      	ldr	r3, [pc, #504]	@ (8005698 <update_homing_sequence+0x270>)
 80054a0:	2202      	movs	r2, #2
 80054a2:	701a      	strb	r2, [r3, #0]
		break;
 80054a4:	f000 bcfe 	b.w	8005ea4 <update_homing_sequence+0xa7c>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80054a8:	4b7c      	ldr	r3, [pc, #496]	@ (800569c <update_homing_sequence+0x274>)
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80054b0:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <update_homing_sequence+0x278>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80054b8:	4b7a      	ldr	r3, [pc, #488]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a79      	ldr	r2, [pc, #484]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054c0:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80054c2:	4b78      	ldr	r3, [pc, #480]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054ca:	f0c0 84da 	bcc.w	8005e82 <update_homing_sequence+0xa5a>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80054ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054d2:	4875      	ldr	r0, [pc, #468]	@ (80056a8 <update_homing_sequence+0x280>)
 80054d4:	f005 fde4 	bl	800b0a0 <HAL_GPIO_ReadPin>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	4b71      	ldr	r3, [pc, #452]	@ (80056ac <update_homing_sequence+0x284>)
 80054e6:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 80054e8:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <update_homing_sequence+0x284>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <update_homing_sequence+0xe6>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80054f2:	4b6c      	ldr	r3, [pc, #432]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80054f8:	4b67      	ldr	r3, [pc, #412]	@ (8005698 <update_homing_sequence+0x270>)
 80054fa:	2204      	movs	r2, #4
 80054fc:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 80054fe:	4b6b      	ldr	r3, [pc, #428]	@ (80056ac <update_homing_sequence+0x284>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005504:	4b6a      	ldr	r3, [pc, #424]	@ (80056b0 <update_homing_sequence+0x288>)
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 800550a:	f000 bcba 	b.w	8005e82 <update_homing_sequence+0xa5a>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 800550e:	4b62      	ldr	r3, [pc, #392]	@ (8005698 <update_homing_sequence+0x270>)
 8005510:	2203      	movs	r2, #3
 8005512:	701a      	strb	r2, [r3, #0]
		break;
 8005514:	f000 bcb5 	b.w	8005e82 <update_homing_sequence+0xa5a>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005518:	4b60      	ldr	r3, [pc, #384]	@ (800569c <update_homing_sequence+0x274>)
 800551a:	edd3 7a07 	vldr	s15, [r3, #28]
 800551e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80056b4 <update_homing_sequence+0x28c>
 8005522:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005526:	4b5d      	ldr	r3, [pc, #372]	@ (800569c <update_homing_sequence+0x274>)
 8005528:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800552c:	4b5b      	ldr	r3, [pc, #364]	@ (800569c <update_homing_sequence+0x274>)
 800552e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005532:	eeb0 0a67 	vmov.f32	s0, s15
 8005536:	4860      	ldr	r0, [pc, #384]	@ (80056b8 <update_homing_sequence+0x290>)
 8005538:	f7fb fe6e 	bl	8001218 <PID_CONTROLLER_Compute>
 800553c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005540:	4b5e      	ldr	r3, [pc, #376]	@ (80056bc <update_homing_sequence+0x294>)
 8005542:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb fabb 	bl	8000ac4 <__aeabi_d2iz>
 800554e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005550:	4b5a      	ldr	r3, [pc, #360]	@ (80056bc <update_homing_sequence+0x294>)
 8005552:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005556:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005558:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 800555e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005562:	f7fb faaf 	bl	8000ac4 <__aeabi_d2iz>
 8005566:	4603      	mov	r3, r0
 8005568:	4619      	mov	r1, r3
 800556a:	4620      	mov	r0, r4
 800556c:	eeb0 0a48 	vmov.f32	s0, s16
 8005570:	f7fb fdf0 	bl	8001154 <PWM_Satuation>
 8005574:	ee07 0a90 	vmov	s15, r0
 8005578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557c:	4b47      	ldr	r3, [pc, #284]	@ (800569c <update_homing_sequence+0x274>)
 800557e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005582:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005586:	484e      	ldr	r0, [pc, #312]	@ (80056c0 <update_homing_sequence+0x298>)
 8005588:	f7fc f984 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800558c:	eef0 7a40 	vmov.f32	s15, s0
 8005590:	4b42      	ldr	r3, [pc, #264]	@ (800569c <update_homing_sequence+0x274>)
 8005592:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <update_homing_sequence+0x29c>)
 8005598:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800559c:	4b4a      	ldr	r3, [pc, #296]	@ (80056c8 <update_homing_sequence+0x2a0>)
 800559e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80055a2:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80056cc <update_homing_sequence+0x2a4>
 80055a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80055aa:	eeb0 1a66 	vmov.f32	s2, s13
 80055ae:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80056d0 <update_homing_sequence+0x2a8>
 80055b2:	eeb0 0a47 	vmov.f32	s0, s14
 80055b6:	4847      	ldr	r0, [pc, #284]	@ (80056d4 <update_homing_sequence+0x2ac>)
 80055b8:	f7fc f9ff 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80055bc:	eef0 7a40 	vmov.f32	s15, s0
 80055c0:	4b36      	ldr	r3, [pc, #216]	@ (800569c <update_homing_sequence+0x274>)
 80055c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80055c6:	4b35      	ldr	r3, [pc, #212]	@ (800569c <update_homing_sequence+0x274>)
 80055c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80055cc:	4b33      	ldr	r3, [pc, #204]	@ (800569c <update_homing_sequence+0x274>)
 80055ce:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80055d2:	4b32      	ldr	r3, [pc, #200]	@ (800569c <update_homing_sequence+0x274>)
 80055d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e0:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <update_homing_sequence+0x274>)
 80055e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055e6:	4b2d      	ldr	r3, [pc, #180]	@ (800569c <update_homing_sequence+0x274>)
 80055e8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80055ec:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <update_homing_sequence+0x294>)
 80055ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb fa65 	bl	8000ac4 <__aeabi_d2iz>
 80055fa:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80055fc:	4b2f      	ldr	r3, [pc, #188]	@ (80056bc <update_homing_sequence+0x294>)
 80055fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800560a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800560e:	f7fb fa59 	bl	8000ac4 <__aeabi_d2iz>
 8005612:	4603      	mov	r3, r0
 8005614:	4619      	mov	r1, r3
 8005616:	4620      	mov	r0, r4
 8005618:	eeb0 0a48 	vmov.f32	s0, s16
 800561c:	f7fb fd9a 	bl	8001154 <PWM_Satuation>
 8005620:	ee07 0a90 	vmov	s15, r0
 8005624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005628:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <update_homing_sequence+0x274>)
 800562a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 800562e:	4b1f      	ldr	r3, [pc, #124]	@ (80056ac <update_homing_sequence+0x284>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8426 	beq.w	8005e86 <update_homing_sequence+0xa5e>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <update_homing_sequence+0x274>)
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005642:	4b17      	ldr	r3, [pc, #92]	@ (80056a0 <update_homing_sequence+0x278>)
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800564a:	4b16      	ldr	r3, [pc, #88]	@ (80056a4 <update_homing_sequence+0x27c>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005650:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <update_homing_sequence+0x270>)
 8005652:	2204      	movs	r2, #4
 8005654:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <update_homing_sequence+0x284>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 800565c:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <update_homing_sequence+0x288>)
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005662:	f000 bc10 	b.w	8005e86 <update_homing_sequence+0xa5e>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <update_homing_sequence+0x274>)
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <update_homing_sequence+0x278>)
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <update_homing_sequence+0x27c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <update_homing_sequence+0x27c>)
 800567e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005680:	4b08      	ldr	r3, [pc, #32]	@ (80056a4 <update_homing_sequence+0x27c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005688:	f0c0 83ff 	bcc.w	8005e8a <update_homing_sequence+0xa62>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 800568c:	4b02      	ldr	r3, [pc, #8]	@ (8005698 <update_homing_sequence+0x270>)
 800568e:	2205      	movs	r2, #5
 8005690:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005692:	e3fa      	b.n	8005e8a <update_homing_sequence+0xa62>
 8005694:	20000363 	.word	0x20000363
 8005698:	20000362 	.word	0x20000362
 800569c:	20000280 	.word	0x20000280
 80056a0:	200002c0 	.word	0x200002c0
 80056a4:	20000358 	.word	0x20000358
 80056a8:	48000400 	.word	0x48000400
 80056ac:	20000361 	.word	0x20000361
 80056b0:	20000360 	.word	0x20000360
 80056b4:	437a0000 	.word	0x437a0000
 80056b8:	20000524 	.word	0x20000524
 80056bc:	20000080 	.word	0x20000080
 80056c0:	2000059c 	.word	0x2000059c
 80056c4:	200004a0 	.word	0x200004a0
 80056c8:	20000444 	.word	0x20000444
 80056cc:	447a0000 	.word	0x447a0000
 80056d0:	00000000 	.word	0x00000000
 80056d4:	200005a0 	.word	0x200005a0

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80056d8:	4b70      	ldr	r3, [pc, #448]	@ (800589c <update_homing_sequence+0x474>)
 80056da:	edd3 7a07 	vldr	s15, [r3, #28]
 80056de:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80058a0 <update_homing_sequence+0x478>
 80056e2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 80056e6:	4b6d      	ldr	r3, [pc, #436]	@ (800589c <update_homing_sequence+0x474>)
 80056e8:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80056ec:	4b6b      	ldr	r3, [pc, #428]	@ (800589c <update_homing_sequence+0x474>)
 80056ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80056f2:	eeb0 0a67 	vmov.f32	s0, s15
 80056f6:	486b      	ldr	r0, [pc, #428]	@ (80058a4 <update_homing_sequence+0x47c>)
 80056f8:	f7fb fd8e 	bl	8001218 <PID_CONTROLLER_Compute>
 80056fc:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005700:	4b69      	ldr	r3, [pc, #420]	@ (80058a8 <update_homing_sequence+0x480>)
 8005702:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	f7fb f9db 	bl	8000ac4 <__aeabi_d2iz>
 800570e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005710:	4b65      	ldr	r3, [pc, #404]	@ (80058a8 <update_homing_sequence+0x480>)
 8005712:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005716:	61ba      	str	r2, [r7, #24]
 8005718:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800571c:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 800571e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005722:	f7fb f9cf 	bl	8000ac4 <__aeabi_d2iz>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	eeb0 0a48 	vmov.f32	s0, s16
 8005730:	f7fb fd10 	bl	8001154 <PWM_Satuation>
 8005734:	ee07 0a90 	vmov	s15, r0
 8005738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800573c:	4b57      	ldr	r3, [pc, #348]	@ (800589c <update_homing_sequence+0x474>)
 800573e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005742:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005746:	4859      	ldr	r0, [pc, #356]	@ (80058ac <update_homing_sequence+0x484>)
 8005748:	f7fc f8a4 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800574c:	eef0 7a40 	vmov.f32	s15, s0
 8005750:	4b52      	ldr	r3, [pc, #328]	@ (800589c <update_homing_sequence+0x474>)
 8005752:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005756:	4b56      	ldr	r3, [pc, #344]	@ (80058b0 <update_homing_sequence+0x488>)
 8005758:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800575c:	4b55      	ldr	r3, [pc, #340]	@ (80058b4 <update_homing_sequence+0x48c>)
 800575e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005762:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 80058b8 <update_homing_sequence+0x490>
 8005766:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800576a:	eeb0 1a66 	vmov.f32	s2, s13
 800576e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80058bc <update_homing_sequence+0x494>
 8005772:	eeb0 0a47 	vmov.f32	s0, s14
 8005776:	4852      	ldr	r0, [pc, #328]	@ (80058c0 <update_homing_sequence+0x498>)
 8005778:	f7fc f91f 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 800577c:	eef0 7a40 	vmov.f32	s15, s0
 8005780:	4b46      	ldr	r3, [pc, #280]	@ (800589c <update_homing_sequence+0x474>)
 8005782:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005786:	4b45      	ldr	r3, [pc, #276]	@ (800589c <update_homing_sequence+0x474>)
 8005788:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800578c:	4b43      	ldr	r3, [pc, #268]	@ (800589c <update_homing_sequence+0x474>)
 800578e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005792:	4b42      	ldr	r3, [pc, #264]	@ (800589c <update_homing_sequence+0x474>)
 8005794:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a0:	4b3e      	ldr	r3, [pc, #248]	@ (800589c <update_homing_sequence+0x474>)
 80057a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057a6:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <update_homing_sequence+0x474>)
 80057a8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80057ac:	4b3e      	ldr	r3, [pc, #248]	@ (80058a8 <update_homing_sequence+0x480>)
 80057ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fb f985 	bl	8000ac4 <__aeabi_d2iz>
 80057ba:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80057bc:	4b3a      	ldr	r3, [pc, #232]	@ (80058a8 <update_homing_sequence+0x480>)
 80057be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057c2:	613a      	str	r2, [r7, #16]
 80057c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057ce:	f7fb f979 	bl	8000ac4 <__aeabi_d2iz>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4619      	mov	r1, r3
 80057d6:	4620      	mov	r0, r4
 80057d8:	eeb0 0a48 	vmov.f32	s0, s16
 80057dc:	f7fb fcba 	bl	8001154 <PWM_Satuation>
 80057e0:	ee07 0a90 	vmov	s15, r0
 80057e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e8:	4b2c      	ldr	r3, [pc, #176]	@ (800589c <update_homing_sequence+0x474>)
 80057ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80057ee:	4b35      	ldr	r3, [pc, #212]	@ (80058c4 <update_homing_sequence+0x49c>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 834a 	beq.w	8005e8e <update_homing_sequence+0xa66>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80057fa:	4b28      	ldr	r3, [pc, #160]	@ (800589c <update_homing_sequence+0x474>)
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <update_homing_sequence+0x4a0>)
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800580a:	4b30      	ldr	r3, [pc, #192]	@ (80058cc <update_homing_sequence+0x4a4>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005810:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005812:	2206      	movs	r2, #6
 8005814:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <update_homing_sequence+0x49c>)
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800581c:	e337      	b.n	8005e8e <update_homing_sequence+0xa66>

	case HOMING_DELAY_AFTER_UP_PHOTO:
	    // Stop motors and wait before starting backup procedure
	    prismatic_axis.command_pos = 0.0f;
 800581e:	4b1f      	ldr	r3, [pc, #124]	@ (800589c <update_homing_sequence+0x474>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24
	    revolute_axis.command_pos = 0.0f;
 8005826:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <update_homing_sequence+0x4a0>)
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24
	    motion_delay_timer++;
 800582e:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <update_homing_sequence+0x4a4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	4a25      	ldr	r2, [pc, #148]	@ (80058cc <update_homing_sequence+0x4a4>)
 8005836:	6013      	str	r3, [r2, #0]
	    if (motion_delay_timer >= 500) {
 8005838:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <update_homing_sequence+0x4a4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005840:	f0c0 8327 	bcc.w	8005e92 <update_homing_sequence+0xa6a>
	        if (first_startup) {
 8005844:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <update_homing_sequence+0x4ac>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <update_homing_sequence+0x464>
	            // STARTUP: Check if prox is already detected before searching
	            bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800584c:	2140      	movs	r1, #64	@ 0x40
 800584e:	4822      	ldr	r0, [pc, #136]	@ (80058d8 <update_homing_sequence+0x4b0>)
 8005850:	f005 fc26 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	            if (prox_detected) {
 8005862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <update_homing_sequence+0x456>
	                // Already at prox - skip search and go to completion
	                motion_delay_timer = 0;
 800586a:	4b18      	ldr	r3, [pc, #96]	@ (80058cc <update_homing_sequence+0x4a4>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
	                homing_state = HOMING_DELAY_AFTER_PROX;
 8005870:	4b17      	ldr	r3, [pc, #92]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005872:	220a      	movs	r2, #10
 8005874:	701a      	strb	r2, [r3, #0]
	                prox_count = 1; // Set count to indicate prox found
 8005876:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <update_homing_sequence+0x4b4>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
	            homing_state = HOMING_REV_TO_ZERO_DEG;
	            // Initialize trajectory variables for zero degree movement
	            rev_to_zero_trajectory_started = false;
	        }
	    }
	    break;
 800587c:	e309      	b.n	8005e92 <update_homing_sequence+0xa6a>
	                homing_state = HOMING_REV_CW_TO_PROX1;
 800587e:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005880:	2209      	movs	r2, #9
 8005882:	701a      	strb	r2, [r3, #0]
	                prox_count = 0; // Reset prox counter
 8005884:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <update_homing_sequence+0x4b4>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
	    break;
 800588a:	e302      	b.n	8005e92 <update_homing_sequence+0xa6a>
	            homing_state = HOMING_REV_TO_ZERO_DEG;
 800588c:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <update_homing_sequence+0x4a8>)
 800588e:	2207      	movs	r2, #7
 8005890:	701a      	strb	r2, [r3, #0]
	            rev_to_zero_trajectory_started = false;
 8005892:	4b13      	ldr	r3, [pc, #76]	@ (80058e0 <update_homing_sequence+0x4b8>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
	    break;
 8005898:	e2fb      	b.n	8005e92 <update_homing_sequence+0xa6a>
 800589a:	bf00      	nop
 800589c:	20000280 	.word	0x20000280
 80058a0:	c37a0000 	.word	0xc37a0000
 80058a4:	20000524 	.word	0x20000524
 80058a8:	20000080 	.word	0x20000080
 80058ac:	2000059c 	.word	0x2000059c
 80058b0:	200004a0 	.word	0x200004a0
 80058b4:	20000444 	.word	0x20000444
 80058b8:	447a0000 	.word	0x447a0000
 80058bc:	00000000 	.word	0x00000000
 80058c0:	200005a0 	.word	0x200005a0
 80058c4:	20000360 	.word	0x20000360
 80058c8:	200002c0 	.word	0x200002c0
 80058cc:	20000358 	.word	0x20000358
 80058d0:	20000362 	.word	0x20000362
 80058d4:	20000133 	.word	0x20000133
 80058d8:	48000400 	.word	0x48000400
 80058dc:	2000035c 	.word	0x2000035c
 80058e0:	2000036e 	.word	0x2000036e

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 80058e4:	4bc4      	ldr	r3, [pc, #784]	@ (8005bf8 <update_homing_sequence+0x7d0>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f083 0301 	eor.w	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d06c      	beq.n	80059cc <update_homing_sequence+0x5a4>
			// Clear/initialize the static structures
			memset(&revZeroEva, 0, sizeof(Trapezoidal_EvaStruct));
 80058f2:	2214      	movs	r2, #20
 80058f4:	2100      	movs	r1, #0
 80058f6:	48c1      	ldr	r0, [pc, #772]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80058f8:	f00b f928 	bl	8010b4c <memset>
			memset(&revZeroGen, 0, sizeof(Trapezoidal_GenStruct));
 80058fc:	2214      	movs	r2, #20
 80058fe:	2100      	movs	r1, #0
 8005900:	48bf      	ldr	r0, [pc, #764]	@ (8005c00 <update_homing_sequence+0x7d8>)
 8005902:	f00b f923 	bl	8010b4c <memset>

			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 8005906:	4bbf      	ldr	r3, [pc, #764]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
			float normalized_current = normalize_angle(current_rev_pos);
 800590c:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8005910:	f000 faec 	bl	8005eec <normalize_angle>
 8005914:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
			float current_deg = normalized_current * 180.0f / PI;
 8005918:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800591c:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005c08 <update_homing_sequence+0x7e0>
 8005920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005924:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8005c0c <update_homing_sequence+0x7e4>
 8005928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800592c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float movement_deg = calculate_movement_deg(current_deg,
 8005936:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 800593a:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800593e:	f000 fafb 	bl	8005f38 <calculate_movement_deg>
 8005942:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 8005946:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800594a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005c0c <update_homing_sequence+0x7e4>
 800594e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005952:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8005c08 <update_homing_sequence+0x7e0>
 8005956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800595a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 800595e:	4aac      	ldr	r2, [pc, #688]	@ (8005c10 <update_homing_sequence+0x7e8>)
 8005960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005962:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005964:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005968:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800596c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005970:	4ba8      	ldr	r3, [pc, #672]	@ (8005c14 <update_homing_sequence+0x7ec>)
 8005972:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005976:	4ba6      	ldr	r3, [pc, #664]	@ (8005c10 <update_homing_sequence+0x7e8>)
 8005978:	ed93 8a00 	vldr	s16, [r3]
 800597c:	4ba5      	ldr	r3, [pc, #660]	@ (8005c14 <update_homing_sequence+0x7ec>)
 800597e:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005982:	4ba5      	ldr	r3, [pc, #660]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005984:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f8e2 	bl	8000b54 <__aeabi_d2f>
 8005990:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005992:	4ba1      	ldr	r3, [pc, #644]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005994:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f7fb f8da 	bl	8000b54 <__aeabi_d2f>
 80059a0:	4603      	mov	r3, r0
 80059a2:	ee01 3a90 	vmov	s3, r3
 80059a6:	ee01 4a10 	vmov	s2, r4
 80059aa:	eef0 0a68 	vmov.f32	s1, s17
 80059ae:	eeb0 0a48 	vmov.f32	s0, s16
 80059b2:	4893      	ldr	r0, [pc, #588]	@ (8005c00 <update_homing_sequence+0x7d8>)
 80059b4:	f7fe f9ae 	bl	8003d14 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 80059b8:	4b90      	ldr	r3, [pc, #576]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 80059c0:	4b8e      	ldr	r3, [pc, #568]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 80059c6:	4b8c      	ldr	r3, [pc, #560]	@ (8005bf8 <update_homing_sequence+0x7d0>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 80059cc:	4b8b      	ldr	r3, [pc, #556]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059ce:	7c1b      	ldrb	r3, [r3, #16]
 80059d0:	f083 0301 	eor.w	r3, r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 825d 	beq.w	8005e96 <update_homing_sequence+0xa6e>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005c10 <update_homing_sequence+0x7e8>)
 80059de:	ed93 8a00 	vldr	s16, [r3]
 80059e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005c14 <update_homing_sequence+0x7ec>)
 80059e4:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 80059e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005c18 <update_homing_sequence+0x7f0>)
 80059ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fb f8af 	bl	8000b54 <__aeabi_d2f>
 80059f6:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80059f8:	4b87      	ldr	r3, [pc, #540]	@ (8005c18 <update_homing_sequence+0x7f0>)
 80059fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7fb f8a7 	bl	8000b54 <__aeabi_d2f>
 8005a06:	4603      	mov	r3, r0
 8005a08:	ee01 3a90 	vmov	s3, r3
 8005a0c:	ee01 4a10 	vmov	s2, r4
 8005a10:	eef0 0a68 	vmov.f32	s1, s17
 8005a14:	eeb0 0a48 	vmov.f32	s0, s16
 8005a18:	4978      	ldr	r1, [pc, #480]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a1a:	4879      	ldr	r0, [pc, #484]	@ (8005c00 <update_homing_sequence+0x7d8>)
 8005a1c:	f7fe fa3c 	bl	8003e98 <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 8005a20:	4b76      	ldr	r3, [pc, #472]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7d      	ldr	r2, [pc, #500]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a26:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 8005a28:	4b74      	ldr	r3, [pc, #464]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a2e:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 8005a30:	4b7a      	ldr	r3, [pc, #488]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a32:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 8005a36:	4b73      	ldr	r3, [pc, #460]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005a38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	f000 fa54 	bl	8005eec <normalize_angle>
 8005a44:	eef0 7a40 	vmov.f32	s15, s0
 8005a48:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 8005a4c:	4b73      	ldr	r3, [pc, #460]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a4e:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 8005a52:	4b72      	ldr	r3, [pc, #456]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a54:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a58:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005c0c <update_homing_sequence+0x7e4>
 8005a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	dd09      	ble.n	8005a7a <update_homing_sequence+0x652>
				revolute_axis.pos_error -= 2.0f * PI;
 8005a66:	4b6d      	ldr	r3, [pc, #436]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a68:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a6c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005c20 <update_homing_sequence+0x7f8>
 8005a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a74:	4b69      	ldr	r3, [pc, #420]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a76:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 8005a7a:	4b68      	ldr	r3, [pc, #416]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a80:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005c24 <update_homing_sequence+0x7fc>
 8005a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	d509      	bpl.n	8005aa2 <update_homing_sequence+0x67a>
				revolute_axis.pos_error += 2.0f * PI;
 8005a8e:	4b63      	ldr	r3, [pc, #396]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a90:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a94:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8005c20 <update_homing_sequence+0x7f8>
 8005a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a9e:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005aa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8005aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aac:	485e      	ldr	r0, [pc, #376]	@ (8005c28 <update_homing_sequence+0x800>)
 8005aae:	f7fb fbb3 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ab2:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 8005ab6:	4b58      	ldr	r3, [pc, #352]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005ab8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fb f800 	bl	8000ac4 <__aeabi_d2iz>
 8005ac4:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 8005ac6:	4b54      	ldr	r3, [pc, #336]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005ac8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005acc:	60ba      	str	r2, [r7, #8]
 8005ace:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005ad2:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8005ad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ad8:	f7fa fff4 	bl	8000ac4 <__aeabi_d2iz>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ae6:	f7fb fb35 	bl	8001154 <PWM_Satuation>
 8005aea:	ee07 0a90 	vmov	s15, r0
 8005aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005af4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 8005af8:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005afa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8005afe:	4b47      	ldr	r3, [pc, #284]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b08:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 8005b12:	4b42      	ldr	r3, [pc, #264]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b14:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 8005b18:	4b40      	ldr	r3, [pc, #256]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b22:	4842      	ldr	r0, [pc, #264]	@ (8005c2c <update_homing_sequence+0x804>)
 8005b24:	f7fb fb78 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b28:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005b2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	f7fa ffc5 	bl	8000ac4 <__aeabi_d2iz>
 8005b3a:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005b3c:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b42:	603a      	str	r2, [r7, #0]
 8005b44:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b48:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(
 8005b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4e:	f7fa ffb9 	bl	8000ac4 <__aeabi_d2iz>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4619      	mov	r1, r3
 8005b56:	4620      	mov	r0, r4
 8005b58:	eeb0 0a48 	vmov.f32	s0, s16
 8005b5c:	f7fb fafa 	bl	8001154 <PWM_Satuation>
 8005b60:	ee07 0a90 	vmov	s15, r0
 8005b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b68:	4b2c      	ldr	r3, [pc, #176]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b70:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b74:	eeb0 0a67 	vmov.f32	s0, s15
 8005b78:	482d      	ldr	r0, [pc, #180]	@ (8005c30 <update_homing_sequence+0x808>)
 8005b7a:	f7fb fd0d 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005b7e:	eef0 7a40 	vmov.f32	s15, s0
 8005b82:	4b26      	ldr	r3, [pc, #152]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b84:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005b88:	4b1e      	ldr	r3, [pc, #120]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005b8a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005b8e:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <update_homing_sequence+0x80c>)
 8005b90:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005b94:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8005c38 <update_homing_sequence+0x810>
 8005b98:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005b9c:	eef0 0a66 	vmov.f32	s1, s13
 8005ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8005ba4:	4825      	ldr	r0, [pc, #148]	@ (8005c3c <update_homing_sequence+0x814>)
 8005ba6:	f7fb fd8a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8005baa:	eef0 7a40 	vmov.f32	s15, s0
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bb0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bb6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bba:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bbc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bc0:	4b16      	ldr	r3, [pc, #88]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bc2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bce:	4b13      	ldr	r3, [pc, #76]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bd4:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bd6:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8005bda:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005bdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fa ff6e 	bl	8000ac4 <__aeabi_d2iz>
 8005be8:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005bea:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005bec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
 8005bf6:	e023      	b.n	8005c40 <update_homing_sequence+0x818>
 8005bf8:	2000036e 	.word	0x2000036e
 8005bfc:	20000370 	.word	0x20000370
 8005c00:	20000384 	.word	0x20000384
 8005c04:	200004a0 	.word	0x200004a0
 8005c08:	43340000 	.word	0x43340000
 8005c0c:	40490fdb 	.word	0x40490fdb
 8005c10:	20000398 	.word	0x20000398
 8005c14:	2000039c 	.word	0x2000039c
 8005c18:	20000000 	.word	0x20000000
 8005c1c:	200002c0 	.word	0x200002c0
 8005c20:	40c90fdb 	.word	0x40c90fdb
 8005c24:	c0490fdb 	.word	0xc0490fdb
 8005c28:	2000054c 	.word	0x2000054c
 8005c2c:	20000574 	.word	0x20000574
 8005c30:	200005a8 	.word	0x200005a8
 8005c34:	20000444 	.word	0x20000444
 8005c38:	447a0000 	.word	0x447a0000
 8005c3c:	200005ac 	.word	0x200005ac
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c40:	4628      	mov	r0, r5
 8005c42:	4631      	mov	r1, r6
 8005c44:	f7fa ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c52:	f7fb fa7f 	bl	8001154 <PWM_Satuation>
 8005c56:	ee07 0a90 	vmov	s15, r0
 8005c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5e:	4b94      	ldr	r3, [pc, #592]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c60:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 8005c64:	4b93      	ldr	r3, [pc, #588]	@ (8005eb4 <update_homing_sequence+0xa8c>)
 8005c66:	7c1b      	ldrb	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8114 	beq.w	8005e96 <update_homing_sequence+0xa6e>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 8005c6e:	4b90      	ldr	r3, [pc, #576]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 8005c76:	4b90      	ldr	r3, [pc, #576]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 8005c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 8005c86:	4b8a      	ldr	r3, [pc, #552]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 8005c96:	4b89      	ldr	r3, [pc, #548]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005c9c:	4b88      	ldr	r3, [pc, #544]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 8005ca2:	4b88      	ldr	r3, [pc, #544]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 8005ca8:	4b87      	ldr	r3, [pc, #540]	@ (8005ec8 <update_homing_sequence+0xaa0>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8005cae:	e0f2      	b.n	8005e96 <update_homing_sequence+0xa6e>

	case HOMING_DELAY_AFTER_ZERO_DEG:
	    // Stop motors and wait
	    prismatic_axis.command_pos = 0.0f;
 8005cb0:	4b81      	ldr	r3, [pc, #516]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	625a      	str	r2, [r3, #36]	@ 0x24
	    revolute_axis.command_pos = 0.0f;
 8005cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24
	    motion_delay_timer++;
 8005cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cc8:	6013      	str	r3, [r2, #0]
	    if (motion_delay_timer >= 500) {
 8005cca:	4b7c      	ldr	r3, [pc, #496]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd2:	f0c0 80e2 	bcc.w	8005e9a <update_homing_sequence+0xa72>
	        // CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
	        bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005cd6:	2140      	movs	r1, #64	@ 0x40
 8005cd8:	487c      	ldr	r0, [pc, #496]	@ (8005ecc <update_homing_sequence+0xaa4>)
 8005cda:	f005 f9e1 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	        if (prox_detected) {
 8005cec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <update_homing_sequence+0x8e0>
	            // Already at proximity sensor - skip search and go directly to completion
	            motion_delay_timer = 0;
 8005cf4:	4b71      	ldr	r3, [pc, #452]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
	            homing_state = HOMING_DELAY_AFTER_PROX;
 8005cfa:	4b71      	ldr	r3, [pc, #452]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	701a      	strb	r2, [r3, #0]
	            prox_count = 1; // Set count to indicate prox found
 8005d00:	4b70      	ldr	r3, [pc, #448]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
	            // Not at prox - need to search for it
	            homing_state = HOMING_REV_CW_TO_PROX1;
	            prox_count = 0; // Reset counter for search
	        }
	    }
	    break;
 8005d06:	e0c8      	b.n	8005e9a <update_homing_sequence+0xa72>
	            homing_state = HOMING_REV_CW_TO_PROX1;
 8005d08:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005d0a:	2209      	movs	r2, #9
 8005d0c:	701a      	strb	r2, [r3, #0]
	            prox_count = 0; // Reset counter for search
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
	    break;
 8005d14:	e0c1      	b.n	8005e9a <update_homing_sequence+0xa72>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005d16:	4b66      	ldr	r3, [pc, #408]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d18:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d1c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d20:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005d24:	4b62      	ldr	r3, [pc, #392]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d26:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d30:	eeb0 0a67 	vmov.f32	s0, s15
 8005d34:	4866      	ldr	r0, [pc, #408]	@ (8005ed0 <update_homing_sequence+0xaa8>)
 8005d36:	f7fb fa6f 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d3a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005d3e:	4b65      	ldr	r3, [pc, #404]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005d40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7fa febc 	bl	8000ac4 <__aeabi_d2iz>
 8005d4c:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005d4e:	4b61      	ldr	r3, [pc, #388]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005d50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d54:	4692      	mov	sl, r2
 8005d56:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	f7fa feb1 	bl	8000ac4 <__aeabi_d2iz>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4619      	mov	r1, r3
 8005d66:	4620      	mov	r0, r4
 8005d68:	eeb0 0a48 	vmov.f32	s0, s16
 8005d6c:	f7fb f9f2 	bl	8001154 <PWM_Satuation>
 8005d70:	ee07 0a90 	vmov	s15, r0
 8005d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d78:	4b4d      	ldr	r3, [pc, #308]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d7a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005d7e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8005d82:	4855      	ldr	r0, [pc, #340]	@ (8005ed8 <update_homing_sequence+0xab0>)
 8005d84:	f7fb fc08 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005d88:	eef0 7a40 	vmov.f32	s15, s0
 8005d8c:	4b48      	ldr	r3, [pc, #288]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d8e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005d92:	4b52      	ldr	r3, [pc, #328]	@ (8005edc <update_homing_sequence+0xab4>)
 8005d94:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005d98:	4b51      	ldr	r3, [pc, #324]	@ (8005ee0 <update_homing_sequence+0xab8>)
 8005d9a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005d9e:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8005ee4 <update_homing_sequence+0xabc>
 8005da2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005da6:	eef0 0a66 	vmov.f32	s1, s13
 8005daa:	eeb0 0a47 	vmov.f32	s0, s14
 8005dae:	484e      	ldr	r0, [pc, #312]	@ (8005ee8 <update_homing_sequence+0xac0>)
 8005db0:	f7fb fc85 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8005db4:	eef0 7a40 	vmov.f32	s15, s0
 8005db8:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dc0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dc6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dcc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd8:	4b35      	ldr	r3, [pc, #212]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dda:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005de0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005de4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005de6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fa fe69 	bl	8000ac4 <__aeabi_d2iz>
 8005df2:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005df4:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005df6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe5e 	bl	8000ac4 <__aeabi_d2iz>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8005e12:	f7fb f99f 	bl	8001154 <PWM_Satuation>
 8005e16:	ee07 0a90 	vmov	s15, r0
 8005e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e1e:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d038      	beq.n	8005e9e <update_homing_sequence+0xa76>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e34:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005e42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005e44:	220a      	movs	r2, #10
 8005e46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e48:	e029      	b.n	8005e9e <update_homing_sequence+0xa76>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e52:	4b17      	ldr	r3, [pc, #92]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e5a:	4b18      	ldr	r3, [pc, #96]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a16      	ldr	r2, [pc, #88]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e62:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e64:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e6c:	d319      	bcc.n	8005ea2 <update_homing_sequence+0xa7a>
			homing_state = HOMING_COMPLETE;
 8005e6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005e70:	220b      	movs	r2, #11
 8005e72:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e74:	e015      	b.n	8005ea2 <update_homing_sequence+0xa7a>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005e76:	f7ff f929 	bl	80050cc <__NVIC_SystemReset>
		return;
 8005e7a:	bf00      	nop
 8005e7c:	e012      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005e7e:	bf00      	nop
 8005e80:	e010      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e82:	bf00      	nop
 8005e84:	e00e      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e86:	bf00      	nop
 8005e88:	e00c      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e8a:	bf00      	nop
 8005e8c:	e00a      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e8e:	bf00      	nop
 8005e90:	e008      	b.n	8005ea4 <update_homing_sequence+0xa7c>
	    break;
 8005e92:	bf00      	nop
 8005e94:	e006      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <update_homing_sequence+0xa7c>
	    break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005ea2:	bf00      	nop
	}
}
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	ecbd 8b02 	vpop	{d8}
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	200002c0 	.word	0x200002c0
 8005eb4:	20000370 	.word	0x20000370
 8005eb8:	20000280 	.word	0x20000280
 8005ebc:	20000358 	.word	0x20000358
 8005ec0:	20000362 	.word	0x20000362
 8005ec4:	2000035c 	.word	0x2000035c
 8005ec8:	2000036e 	.word	0x2000036e
 8005ecc:	48000400 	.word	0x48000400
 8005ed0:	20000574 	.word	0x20000574
 8005ed4:	20000000 	.word	0x20000000
 8005ed8:	200005a8 	.word	0x200005a8
 8005edc:	200004a0 	.word	0x200004a0
 8005ee0:	20000444 	.word	0x20000444
 8005ee4:	447a0000 	.word	0x447a0000
 8005ee8:	200005ac 	.word	0x200005ac

08005eec <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005ef6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005f34 <normalize_angle+0x48>
 8005efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8005efe:	f00a ff1f 	bl	8010d40 <fmodf>
 8005f02:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	d507      	bpl.n	8005f24 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f18:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f34 <normalize_angle+0x48>
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	ee07 3a90 	vmov	s15, r3
}
 8005f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40c90fdb 	.word	0x40c90fdb

08005f38 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f42:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f50:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	d508      	bpl.n	8005f70 <calculate_movement_deg+0x38>
 8005f5e:	edd7 7a00 	vldr	s15, [r7]
 8005f62:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	d411      	bmi.n	8005f94 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f74:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f80:	db33      	blt.n	8005fea <calculate_movement_deg+0xb2>
 8005f82:	edd7 7a00 	vldr	s15, [r7]
 8005f86:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	db2a      	blt.n	8005fea <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005f94:	ed97 7a00 	vldr	s14, [r7]
 8005f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fa0:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fa8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	dd07      	ble.n	8005fc6 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fba:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80060b8 <calculate_movement_deg+0x180>
 8005fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fc2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fca:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80060bc <calculate_movement_deg+0x184>
 8005fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	d562      	bpl.n	800609e <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fdc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80060b8 <calculate_movement_deg+0x180>
 8005fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe4:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005fe8:	e059      	b.n	800609e <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	d52a      	bpl.n	8006052 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005ffc:	edd7 7a00 	vldr	s15, [r7]
 8006000:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80060b4 <calculate_movement_deg+0x17c>
 8006004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006008:	ed97 7a01 	vldr	s14, [r7, #4]
 800600c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006014:	d50e      	bpl.n	8006034 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006016:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80060b8 <calculate_movement_deg+0x180>
 800601a:	edd7 7a00 	vldr	s15, [r7]
 800601e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006022:	edd7 7a01 	vldr	s15, [r7, #4]
 8006026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800602a:	eef1 7a67 	vneg.f32	s15, s15
 800602e:	edc7 7a03 	vstr	s15, [r7, #12]
 8006032:	e034      	b.n	800609e <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8006034:	ed97 7a01 	vldr	s14, [r7, #4]
 8006038:	edd7 7a00 	vldr	s15, [r7]
 800603c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006040:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80060b8 <calculate_movement_deg+0x180>
 8006044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006048:	eef1 7a67 	vneg.f32	s15, s15
 800604c:	edc7 7a03 	vstr	s15, [r7, #12]
 8006050:	e025      	b.n	800609e <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8006052:	edd7 7a01 	vldr	s15, [r7, #4]
 8006056:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80060b4 <calculate_movement_deg+0x17c>
 800605a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800605e:	ed97 7a00 	vldr	s14, [r7]
 8006062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606a:	d50c      	bpl.n	8006086 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 800606c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80060b8 <calculate_movement_deg+0x180>
 8006070:	edd7 7a01 	vldr	s15, [r7, #4]
 8006074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006078:	ed97 7a00 	vldr	s14, [r7]
 800607c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006080:	edc7 7a03 	vstr	s15, [r7, #12]
 8006084:	e00b      	b.n	800609e <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006086:	ed97 7a00 	vldr	s14, [r7]
 800608a:	edd7 7a01 	vldr	s15, [r7, #4]
 800608e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006092:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80060b8 <calculate_movement_deg+0x180>
 8006096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609a:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	ee07 3a90 	vmov	s15, r3
}
 80060a4:	eeb0 0a67 	vmov.f32	s0, s15
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	43340000 	.word	0x43340000
 80060b8:	43b40000 	.word	0x43b40000
 80060bc:	c3340000 	.word	0xc3340000

080060c0 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	ed2d 8b02 	vpush	{d8}
 80060c6:	b089      	sub	sp, #36	@ 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80060ce:	edc7 0a00 	vstr	s1, [r7]
	if (is_emergency_active() || homing_active) {
 80060d2:	f000 fe97 	bl	8006e04 <is_emergency_active>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 8098 	bne.w	800620e <start_combined_trajectory+0x14e>
 80060de:	4b4f      	ldr	r3, [pc, #316]	@ (800621c <start_combined_trajectory+0x15c>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8093 	bne.w	800620e <start_combined_trajectory+0x14e>
		return; // Don't start trajectory if in emergency or homing
	}

	float pris_current = prismatic_encoder.mm;
 80060e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006220 <start_combined_trajectory+0x160>)
 80060ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ec:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 80060ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <start_combined_trajectory+0x164>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	61bb      	str	r3, [r7, #24]

	prisEva.t = 0.0f;
 80060f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006228 <start_combined_trajectory+0x168>)
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80060fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006228 <start_combined_trajectory+0x168>)
 80060fe:	2200      	movs	r2, #0
 8006100:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8006102:	4b4a      	ldr	r3, [pc, #296]	@ (800622c <start_combined_trajectory+0x16c>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 800610a:	4b48      	ldr	r3, [pc, #288]	@ (800622c <start_combined_trajectory+0x16c>)
 800610c:	2200      	movs	r2, #0
 800610e:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 8006110:	4a47      	ldr	r2, [pc, #284]	@ (8006230 <start_combined_trajectory+0x170>)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006116:	4a47      	ldr	r2, [pc, #284]	@ (8006234 <start_combined_trajectory+0x174>)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	60d3      	str	r3, [r2, #12]
	prismatic_axis.target_pos = fminf(
 800611c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8006238 <start_combined_trajectory+0x178>
 8006120:	ed97 0a01 	vldr	s0, [r7, #4]
 8006124:	f00a fed4 	bl	8010ed0 <fmaxf>
 8006128:	eef0 7a40 	vmov.f32	s15, s0
 800612c:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800623c <start_combined_trajectory+0x17c>
 8006130:	eeb0 0a67 	vmov.f32	s0, s15
 8006134:	f00a fee9 	bl	8010f0a <fminf>
 8006138:	eef0 7a40 	vmov.f32	s15, s0
 800613c:	4b3c      	ldr	r3, [pc, #240]	@ (8006230 <start_combined_trajectory+0x170>)
 800613e:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS),
			PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 8006142:	ed97 0a06 	vldr	s0, [r7, #24]
 8006146:	f7ff fed1 	bl	8005eec <normalize_angle>
 800614a:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_deg = normalized_current * 180.0f / PI;
 800614e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006152:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006240 <start_combined_trajectory+0x180>
 8006156:	ee27 7a87 	vmul.f32	s14, s15, s14
 800615a:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8006244 <start_combined_trajectory+0x184>
 800615e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006162:	edc7 7a04 	vstr	s15, [r7, #16]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006166:	edd7 0a00 	vldr	s1, [r7]
 800616a:	ed97 0a04 	vldr	s0, [r7, #16]
 800616e:	f7ff fee3 	bl	8005f38 <calculate_movement_deg>
 8006172:	eef0 7a40 	vmov.f32	s15, s0
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <start_combined_trajectory+0x188>)
 8006178:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800617c:	4b32      	ldr	r3, [pc, #200]	@ (8006248 <start_combined_trajectory+0x188>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006244 <start_combined_trajectory+0x184>
 8006186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800618a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8006240 <start_combined_trajectory+0x180>
 800618e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006192:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006196:	4b27      	ldr	r3, [pc, #156]	@ (8006234 <start_combined_trajectory+0x174>)
 8006198:	ed93 7a03 	vldr	s14, [r3, #12]
 800619c:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a4:	4b23      	ldr	r3, [pc, #140]	@ (8006234 <start_combined_trajectory+0x174>)
 80061a6:	edc3 7a04 	vstr	s15, [r3, #16]

	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061aa:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <start_combined_trajectory+0x170>)
 80061ac:	ed93 8a03 	vldr	s16, [r3, #12]
 80061b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006230 <start_combined_trajectory+0x170>)
 80061b2:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 80061b6:	4b25      	ldr	r3, [pc, #148]	@ (800624c <start_combined_trajectory+0x18c>)
 80061b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	f7fa fcc8 	bl	8000b54 <__aeabi_d2f>
 80061c4:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80061c6:	4b21      	ldr	r3, [pc, #132]	@ (800624c <start_combined_trajectory+0x18c>)
 80061c8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061cc:	4610      	mov	r0, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	f7fa fcc0 	bl	8000b54 <__aeabi_d2f>
 80061d4:	4603      	mov	r3, r0
 80061d6:	ee01 3a90 	vmov	s3, r3
 80061da:	ee01 4a10 	vmov	s2, r4
 80061de:	eef0 0a68 	vmov.f32	s1, s17
 80061e2:	eeb0 0a48 	vmov.f32	s0, s16
 80061e6:	481a      	ldr	r0, [pc, #104]	@ (8006250 <start_combined_trajectory+0x190>)
 80061e8:	f7fd fd94 	bl	8003d14 <Trapezoidal_Generator>

	prismatic_axis.trajectory_active = false;
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <start_combined_trajectory+0x170>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <start_combined_trajectory+0x174>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	plotter_pen_up();
 80061fc:	f001 fc10 	bl	8007a20 <plotter_pen_up>
	motion_delay_timer = 0;
 8006200:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <start_combined_trajectory+0x194>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006206:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <start_combined_trajectory+0x198>)
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e000      	b.n	8006210 <start_combined_trajectory+0x150>
		return; // Don't start trajectory if in emergency or homing
 800620e:	bf00      	nop
}
 8006210:	3724      	adds	r7, #36	@ 0x24
 8006212:	46bd      	mov	sp, r7
 8006214:	ecbd 8b02 	vpop	{d8}
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	20000363 	.word	0x20000363
 8006220:	20000444 	.word	0x20000444
 8006224:	200004a0 	.word	0x200004a0
 8006228:	2000032c 	.word	0x2000032c
 800622c:	20000340 	.word	0x20000340
 8006230:	20000280 	.word	0x20000280
 8006234:	200002c0 	.word	0x200002c0
 8006238:	00000000 	.word	0x00000000
 800623c:	43960000 	.word	0x43960000
 8006240:	43340000 	.word	0x43340000
 8006244:	40490fdb 	.word	0x40490fdb
 8006248:	200003a8 	.word	0x200003a8
 800624c:	20000080 	.word	0x20000080
 8006250:	20000304 	.word	0x20000304
 8006254:	20000358 	.word	0x20000358
 8006258:	20000300 	.word	0x20000300

0800625c <update_position_control>:

void update_position_control(void) {
 800625c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006260:	ed2d 8b02 	vpush	{d8}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006268:	4b50      	ldr	r3, [pc, #320]	@ (80063ac <update_position_control+0x150>)
 800626a:	ed93 7a00 	vldr	s14, [r3]
 800626e:	4b50      	ldr	r3, [pc, #320]	@ (80063b0 <update_position_control+0x154>)
 8006270:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006278:	4b4c      	ldr	r3, [pc, #304]	@ (80063ac <update_position_control+0x150>)
 800627a:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800627e:	4b4b      	ldr	r3, [pc, #300]	@ (80063ac <update_position_control+0x150>)
 8006280:	edd3 7a05 	vldr	s15, [r3, #20]
 8006284:	eeb0 0a67 	vmov.f32	s0, s15
 8006288:	484a      	ldr	r0, [pc, #296]	@ (80063b4 <update_position_control+0x158>)
 800628a:	f7fa ffc5 	bl	8001218 <PID_CONTROLLER_Compute>
 800628e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006292:	4b49      	ldr	r3, [pc, #292]	@ (80063b8 <update_position_control+0x15c>)
 8006294:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f7fa fc12 	bl	8000ac4 <__aeabi_d2iz>
 80062a0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80062a2:	4b45      	ldr	r3, [pc, #276]	@ (80063b8 <update_position_control+0x15c>)
 80062a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80062a8:	4690      	mov	r8, r2
 80062aa:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fc07 	bl	8000ac4 <__aeabi_d2iz>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4619      	mov	r1, r3
 80062ba:	4630      	mov	r0, r6
 80062bc:	eeb0 0a48 	vmov.f32	s0, s16
 80062c0:	f7fa ff48 	bl	8001154 <PWM_Satuation>
 80062c4:	ee07 0a90 	vmov	s15, r0
 80062c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062cc:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <update_position_control+0x150>)
 80062ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80062d2:	4b3a      	ldr	r3, [pc, #232]	@ (80063bc <update_position_control+0x160>)
 80062d4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80062d8:	eeb0 0a67 	vmov.f32	s0, s15
 80062dc:	f7ff fe06 	bl	8005eec <normalize_angle>
 80062e0:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80062e4:	4b36      	ldr	r3, [pc, #216]	@ (80063c0 <update_position_control+0x164>)
 80062e6:	ed93 7a00 	vldr	s14, [r3]
 80062ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f2:	4b33      	ldr	r3, [pc, #204]	@ (80063c0 <update_position_control+0x164>)
 80062f4:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80062f8:	4b31      	ldr	r3, [pc, #196]	@ (80063c0 <update_position_control+0x164>)
 80062fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80062fe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80063c4 <update_position_control+0x168>
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	dd09      	ble.n	8006320 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 800630c:	4b2c      	ldr	r3, [pc, #176]	@ (80063c0 <update_position_control+0x164>)
 800630e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006312:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80063c8 <update_position_control+0x16c>
 8006316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <update_position_control+0x164>)
 800631c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <update_position_control+0x164>)
 8006322:	edd3 7a05 	vldr	s15, [r3, #20]
 8006326:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80063cc <update_position_control+0x170>
 800632a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006332:	d509      	bpl.n	8006348 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006334:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <update_position_control+0x164>)
 8006336:	edd3 7a05 	vldr	s15, [r3, #20]
 800633a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80063c8 <update_position_control+0x16c>
 800633e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <update_position_control+0x164>)
 8006344:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006348:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <update_position_control+0x164>)
 800634a:	edd3 7a05 	vldr	s15, [r3, #20]
 800634e:	eeb0 0a67 	vmov.f32	s0, s15
 8006352:	481f      	ldr	r0, [pc, #124]	@ (80063d0 <update_position_control+0x174>)
 8006354:	f7fa ff60 	bl	8001218 <PID_CONTROLLER_Compute>
 8006358:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800635c:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <update_position_control+0x178>)
 800635e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	f7fa fbad 	bl	8000ac4 <__aeabi_d2iz>
 800636a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800636c:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <update_position_control+0x178>)
 800636e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006372:	4614      	mov	r4, r2
 8006374:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006378:	4620      	mov	r0, r4
 800637a:	4629      	mov	r1, r5
 800637c:	f7fa fba2 	bl	8000ac4 <__aeabi_d2iz>
 8006380:	4603      	mov	r3, r0
 8006382:	4619      	mov	r1, r3
 8006384:	4630      	mov	r0, r6
 8006386:	eeb0 0a48 	vmov.f32	s0, s16
 800638a:	f7fa fee3 	bl	8001154 <PWM_Satuation>
 800638e:	ee07 0a90 	vmov	s15, r0
 8006392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <update_position_control+0x164>)
 8006398:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	ecbd 8b02 	vpop	{d8}
 80063a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063aa:	bf00      	nop
 80063ac:	20000280 	.word	0x20000280
 80063b0:	20000444 	.word	0x20000444
 80063b4:	200004fc 	.word	0x200004fc
 80063b8:	20000080 	.word	0x20000080
 80063bc:	200004a0 	.word	0x200004a0
 80063c0:	200002c0 	.word	0x200002c0
 80063c4:	40490fdb 	.word	0x40490fdb
 80063c8:	40c90fdb 	.word	0x40c90fdb
 80063cc:	c0490fdb 	.word	0xc0490fdb
 80063d0:	2000054c 	.word	0x2000054c
 80063d4:	20000000 	.word	0x20000000

080063d8 <update_velocity_control>:

void update_velocity_control(void) {
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b02 	vpush	{d8}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 80063e4:	4b96      	ldr	r3, [pc, #600]	@ (8006640 <update_velocity_control+0x268>)
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80063ee:	4b94      	ldr	r3, [pc, #592]	@ (8006640 <update_velocity_control+0x268>)
 80063f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80063f4:	4b92      	ldr	r3, [pc, #584]	@ (8006640 <update_velocity_control+0x268>)
 80063f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80063fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063fe:	4b90      	ldr	r3, [pc, #576]	@ (8006640 <update_velocity_control+0x268>)
 8006400:	edd3 7a07 	vldr	s15, [r3, #28]
 8006404:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006408:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <update_velocity_control+0x268>)
 800640a:	edc3 7a06 	vstr	s15, [r3, #24]
 800640e:	e00a      	b.n	8006426 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006410:	4b8b      	ldr	r3, [pc, #556]	@ (8006640 <update_velocity_control+0x268>)
 8006412:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006416:	4b8a      	ldr	r3, [pc, #552]	@ (8006640 <update_velocity_control+0x268>)
 8006418:	edd3 7a07 	vldr	s15, [r3, #28]
 800641c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006420:	4b87      	ldr	r3, [pc, #540]	@ (8006640 <update_velocity_control+0x268>)
 8006422:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006426:	4b86      	ldr	r3, [pc, #536]	@ (8006640 <update_velocity_control+0x268>)
 8006428:	edd3 7a06 	vldr	s15, [r3, #24]
 800642c:	eeb0 0a67 	vmov.f32	s0, s15
 8006430:	4884      	ldr	r0, [pc, #528]	@ (8006644 <update_velocity_control+0x26c>)
 8006432:	f7fa fef1 	bl	8001218 <PID_CONTROLLER_Compute>
 8006436:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800643a:	4b83      	ldr	r3, [pc, #524]	@ (8006648 <update_velocity_control+0x270>)
 800643c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	f7fa fb3e 	bl	8000ac4 <__aeabi_d2iz>
 8006448:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800644a:	4b7f      	ldr	r3, [pc, #508]	@ (8006648 <update_velocity_control+0x270>)
 800644c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006450:	603a      	str	r2, [r7, #0]
 8006452:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006456:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f7fa fb32 	bl	8000ac4 <__aeabi_d2iz>
 8006460:	4603      	mov	r3, r0
 8006462:	4619      	mov	r1, r3
 8006464:	4630      	mov	r0, r6
 8006466:	eeb0 0a48 	vmov.f32	s0, s16
 800646a:	f7fa fe73 	bl	8001154 <PWM_Satuation>
 800646e:	ee07 0a90 	vmov	s15, r0
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	4b72      	ldr	r3, [pc, #456]	@ (8006640 <update_velocity_control+0x268>)
 8006478:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 800647c:	4b70      	ldr	r3, [pc, #448]	@ (8006640 <update_velocity_control+0x268>)
 800647e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02c      	beq.n	80064e0 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006486:	4b6e      	ldr	r3, [pc, #440]	@ (8006640 <update_velocity_control+0x268>)
 8006488:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800648c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800664c <update_velocity_control+0x274>
 8006490:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006494:	eeb0 0a47 	vmov.f32	s0, s14
 8006498:	486d      	ldr	r0, [pc, #436]	@ (8006650 <update_velocity_control+0x278>)
 800649a:	f7fb f9fb 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800649e:	eef0 7a40 	vmov.f32	s15, s0
 80064a2:	4b67      	ldr	r3, [pc, #412]	@ (8006640 <update_velocity_control+0x268>)
 80064a4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80064a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006654 <update_velocity_control+0x27c>)
 80064aa:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80064ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006658 <update_velocity_control+0x280>)
 80064b0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80064b4:	4b69      	ldr	r3, [pc, #420]	@ (800665c <update_velocity_control+0x284>)
 80064b6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80064ba:	eddf 5a64 	vldr	s11, [pc, #400]	@ 800664c <update_velocity_control+0x274>
 80064be:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80064c2:	eeb0 1a46 	vmov.f32	s2, s12
 80064c6:	eef0 0a66 	vmov.f32	s1, s13
 80064ca:	eeb0 0a47 	vmov.f32	s0, s14
 80064ce:	4864      	ldr	r0, [pc, #400]	@ (8006660 <update_velocity_control+0x288>)
 80064d0:	f7fb fa73 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80064d4:	eef0 7a40 	vmov.f32	s15, s0
 80064d8:	4b59      	ldr	r3, [pc, #356]	@ (8006640 <update_velocity_control+0x268>)
 80064da:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80064de:	e007      	b.n	80064f0 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80064e0:	4b57      	ldr	r3, [pc, #348]	@ (8006640 <update_velocity_control+0x268>)
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80064e8:	4b55      	ldr	r3, [pc, #340]	@ (8006640 <update_velocity_control+0x268>)
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80064f0:	4b53      	ldr	r3, [pc, #332]	@ (8006640 <update_velocity_control+0x268>)
 80064f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80064f6:	4b52      	ldr	r3, [pc, #328]	@ (8006640 <update_velocity_control+0x268>)
 80064f8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80064fc:	4b50      	ldr	r3, [pc, #320]	@ (8006640 <update_velocity_control+0x268>)
 80064fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650a:	4b4d      	ldr	r3, [pc, #308]	@ (8006640 <update_velocity_control+0x268>)
 800650c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006510:	4b4b      	ldr	r3, [pc, #300]	@ (8006640 <update_velocity_control+0x268>)
 8006512:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006516:	4b4c      	ldr	r3, [pc, #304]	@ (8006648 <update_velocity_control+0x270>)
 8006518:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	f7fa fad0 	bl	8000ac4 <__aeabi_d2iz>
 8006524:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006526:	4b48      	ldr	r3, [pc, #288]	@ (8006648 <update_velocity_control+0x270>)
 8006528:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800652c:	4692      	mov	sl, r2
 800652e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006532:	4650      	mov	r0, sl
 8006534:	4659      	mov	r1, fp
 8006536:	f7fa fac5 	bl	8000ac4 <__aeabi_d2iz>
 800653a:	4603      	mov	r3, r0
 800653c:	4619      	mov	r1, r3
 800653e:	4630      	mov	r0, r6
 8006540:	eeb0 0a48 	vmov.f32	s0, s16
 8006544:	f7fa fe06 	bl	8001154 <PWM_Satuation>
 8006548:	ee07 0a90 	vmov	s15, r0
 800654c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <update_velocity_control+0x268>)
 8006552:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006556:	4b40      	ldr	r3, [pc, #256]	@ (8006658 <update_velocity_control+0x280>)
 8006558:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006560:	4b3d      	ldr	r3, [pc, #244]	@ (8006658 <update_velocity_control+0x280>)
 8006562:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006566:	4b3c      	ldr	r3, [pc, #240]	@ (8006658 <update_velocity_control+0x280>)
 8006568:	edd3 7a01 	vldr	s15, [r3, #4]
 800656c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006570:	4b39      	ldr	r3, [pc, #228]	@ (8006658 <update_velocity_control+0x280>)
 8006572:	edd3 7a07 	vldr	s15, [r3, #28]
 8006576:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800657a:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <update_velocity_control+0x280>)
 800657c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006580:	e00a      	b.n	8006598 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006582:	4b35      	ldr	r3, [pc, #212]	@ (8006658 <update_velocity_control+0x280>)
 8006584:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <update_velocity_control+0x280>)
 800658a:	edd3 7a07 	vldr	s15, [r3, #28]
 800658e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006592:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <update_velocity_control+0x280>)
 8006594:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006598:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <update_velocity_control+0x280>)
 800659a:	edd3 7a06 	vldr	s15, [r3, #24]
 800659e:	eeb0 0a67 	vmov.f32	s0, s15
 80065a2:	4830      	ldr	r0, [pc, #192]	@ (8006664 <update_velocity_control+0x28c>)
 80065a4:	f7fa fe38 	bl	8001218 <PID_CONTROLLER_Compute>
 80065a8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80065ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006668 <update_velocity_control+0x290>)
 80065ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	f7fa fa85 	bl	8000ac4 <__aeabi_d2iz>
 80065ba:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80065bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <update_velocity_control+0x290>)
 80065be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80065c2:	4690      	mov	r8, r2
 80065c4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa fa7a 	bl	8000ac4 <__aeabi_d2iz>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4619      	mov	r1, r3
 80065d4:	4630      	mov	r0, r6
 80065d6:	eeb0 0a48 	vmov.f32	s0, s16
 80065da:	f7fa fdbb 	bl	8001154 <PWM_Satuation>
 80065de:	ee07 0a90 	vmov	s15, r0
 80065e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006658 <update_velocity_control+0x280>)
 80065e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80065ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <update_velocity_control+0x280>)
 80065ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03e      	beq.n	8006674 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80065f6:	4b18      	ldr	r3, [pc, #96]	@ (8006658 <update_velocity_control+0x280>)
 80065f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80065fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006600:	481a      	ldr	r0, [pc, #104]	@ (800666c <update_velocity_control+0x294>)
 8006602:	f7fa ffc9 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006606:	eef0 7a40 	vmov.f32	s15, s0
 800660a:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <update_velocity_control+0x280>)
 800660c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <update_velocity_control+0x27c>)
 8006612:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006616:	4b11      	ldr	r3, [pc, #68]	@ (800665c <update_velocity_control+0x284>)
 8006618:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800661c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800664c <update_velocity_control+0x274>
 8006620:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006624:	eef0 0a66 	vmov.f32	s1, s13
 8006628:	eeb0 0a47 	vmov.f32	s0, s14
 800662c:	4810      	ldr	r0, [pc, #64]	@ (8006670 <update_velocity_control+0x298>)
 800662e:	f7fb f846 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006632:	eef0 7a40 	vmov.f32	s15, s0
 8006636:	4b08      	ldr	r3, [pc, #32]	@ (8006658 <update_velocity_control+0x280>)
 8006638:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800663c:	e034      	b.n	80066a8 <update_velocity_control+0x2d0>
 800663e:	bf00      	nop
 8006640:	20000280 	.word	0x20000280
 8006644:	20000524 	.word	0x20000524
 8006648:	20000080 	.word	0x20000080
 800664c:	447a0000 	.word	0x447a0000
 8006650:	2000059c 	.word	0x2000059c
 8006654:	200004a0 	.word	0x200004a0
 8006658:	200002c0 	.word	0x200002c0
 800665c:	20000444 	.word	0x20000444
 8006660:	200005a0 	.word	0x200005a0
 8006664:	20000574 	.word	0x20000574
 8006668:	20000000 	.word	0x20000000
 800666c:	200005a8 	.word	0x200005a8
 8006670:	200005ac 	.word	0x200005ac
	} else {
		revolute_axis.ffd = 0.0f;
 8006674:	4b33      	ldr	r3, [pc, #204]	@ (8006744 <update_velocity_control+0x36c>)
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800667c:	4b32      	ldr	r3, [pc, #200]	@ (8006748 <update_velocity_control+0x370>)
 800667e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006682:	4b32      	ldr	r3, [pc, #200]	@ (800674c <update_velocity_control+0x374>)
 8006684:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006688:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8006750 <update_velocity_control+0x378>
 800668c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006690:	eef0 0a66 	vmov.f32	s1, s13
 8006694:	eeb0 0a47 	vmov.f32	s0, s14
 8006698:	482e      	ldr	r0, [pc, #184]	@ (8006754 <update_velocity_control+0x37c>)
 800669a:	f7fb f810 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800669e:	eef0 7a40 	vmov.f32	s15, s0
 80066a2:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <update_velocity_control+0x36c>)
 80066a4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 80066a8:	4b26      	ldr	r3, [pc, #152]	@ (8006744 <update_velocity_control+0x36c>)
 80066aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <update_velocity_control+0x36c>)
 80066b0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80066b4:	4b23      	ldr	r3, [pc, #140]	@ (8006744 <update_velocity_control+0x36c>)
 80066b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	4b20      	ldr	r3, [pc, #128]	@ (8006744 <update_velocity_control+0x36c>)
 80066c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <update_velocity_control+0x36c>)
 80066ca:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80066ce:	4b22      	ldr	r3, [pc, #136]	@ (8006758 <update_velocity_control+0x380>)
 80066d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	f7fa f9f4 	bl	8000ac4 <__aeabi_d2iz>
 80066dc:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80066de:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <update_velocity_control+0x380>)
 80066e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80066e4:	4614      	mov	r4, r2
 80066e6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa f9e9 	bl	8000ac4 <__aeabi_d2iz>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4619      	mov	r1, r3
 80066f6:	4630      	mov	r0, r6
 80066f8:	eeb0 0a48 	vmov.f32	s0, s16
 80066fc:	f7fa fd2a 	bl	8001154 <PWM_Satuation>
 8006700:	ee07 0a90 	vmov	s15, r0
 8006704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <update_velocity_control+0x36c>)
 800670a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 800670e:	4b13      	ldr	r3, [pc, #76]	@ (800675c <update_velocity_control+0x384>)
 8006710:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006714:	eef0 0a67 	vmov.f32	s1, s15
 8006718:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8006760 <update_velocity_control+0x388>
 800671c:	4811      	ldr	r0, [pc, #68]	@ (8006764 <update_velocity_control+0x38c>)
 800671e:	f7fa fe53 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006722:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <update_velocity_control+0x36c>)
 8006724:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006728:	eef0 0a67 	vmov.f32	s1, s15
 800672c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006760 <update_velocity_control+0x388>
 8006730:	480d      	ldr	r0, [pc, #52]	@ (8006768 <update_velocity_control+0x390>)
 8006732:	f7fa fe49 	bl	80013c8 <MDXX_set_range>
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	ecbd 8b02 	vpop	{d8}
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	200002c0 	.word	0x200002c0
 8006748:	200004a0 	.word	0x200004a0
 800674c:	20000444 	.word	0x20000444
 8006750:	447a0000 	.word	0x447a0000
 8006754:	200005ac 	.word	0x200005ac
 8006758:	20000000 	.word	0x20000000
 800675c:	20000280 	.word	0x20000280
 8006760:	44fa0000 	.word	0x44fa0000
 8006764:	200003ac 	.word	0x200003ac
 8006768:	200003f8 	.word	0x200003f8

0800676c <update_control_loops>:

void update_control_loops(void) {
 800676c:	b598      	push	{r3, r4, r7, lr}
 800676e:	ed2d 8b02 	vpush	{d8}
 8006772:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006774:	4bac      	ldr	r3, [pc, #688]	@ (8006a28 <update_control_loops+0x2bc>)
 8006776:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	f7ff fbb5 	bl	8005eec <normalize_angle>
 8006782:	eef0 7a40 	vmov.f32	s15, s0
 8006786:	4ba9      	ldr	r3, [pc, #676]	@ (8006a2c <update_control_loops+0x2c0>)
 8006788:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 800678c:	f000 fb3a 	bl	8006e04 <is_emergency_active>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <update_control_loops+0x56>
		emergency_stop_all_motors();
 8006796:	f000 fa79 	bl	8006c8c <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 800679a:	4ba5      	ldr	r3, [pc, #660]	@ (8006a30 <update_control_loops+0x2c4>)
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	4aa5      	ldr	r2, [pc, #660]	@ (8006a34 <update_control_loops+0x2c8>)
 80067a0:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 80067a2:	4ba2      	ldr	r3, [pc, #648]	@ (8006a2c <update_control_loops+0x2c0>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	220e      	movs	r2, #14
 80067aa:	210f      	movs	r1, #15
 80067ac:	eeb0 0a67 	vmov.f32	s0, s15
 80067b0:	48a1      	ldr	r0, [pc, #644]	@ (8006a38 <update_control_loops+0x2cc>)
 80067b2:	f7fd ff09 	bl	80045c8 <UnitConverter_angle>
 80067b6:	eef0 7a40 	vmov.f32	s15, s0
 80067ba:	4ba0      	ldr	r3, [pc, #640]	@ (8006a3c <update_control_loops+0x2d0>)
 80067bc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 80067c0:	e16e      	b.n	8006aa0 <update_control_loops+0x334>
	}

	if (homing_active) {
 80067c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006a40 <update_control_loops+0x2d4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d029      	beq.n	800681e <update_control_loops+0xb2>
		update_homing_sequence();
 80067ca:	f7fe fe2d 	bl	8005428 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80067ce:	4b99      	ldr	r3, [pc, #612]	@ (8006a34 <update_control_loops+0x2c8>)
 80067d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80067d4:	eef0 0a67 	vmov.f32	s1, s15
 80067d8:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006a44 <update_control_loops+0x2d8>
 80067dc:	489a      	ldr	r0, [pc, #616]	@ (8006a48 <update_control_loops+0x2dc>)
 80067de:	f7fa fdf3 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80067e2:	4b96      	ldr	r3, [pc, #600]	@ (8006a3c <update_control_loops+0x2d0>)
 80067e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80067e8:	eef0 0a67 	vmov.f32	s1, s15
 80067ec:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8006a44 <update_control_loops+0x2d8>
 80067f0:	4896      	ldr	r0, [pc, #600]	@ (8006a4c <update_control_loops+0x2e0>)
 80067f2:	f7fa fde9 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 80067f6:	4b8e      	ldr	r3, [pc, #568]	@ (8006a30 <update_control_loops+0x2c4>)
 80067f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067fa:	4a8e      	ldr	r2, [pc, #568]	@ (8006a34 <update_control_loops+0x2c8>)
 80067fc:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 80067fe:	4b8b      	ldr	r3, [pc, #556]	@ (8006a2c <update_control_loops+0x2c0>)
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	220e      	movs	r2, #14
 8006806:	210f      	movs	r1, #15
 8006808:	eeb0 0a67 	vmov.f32	s0, s15
 800680c:	488a      	ldr	r0, [pc, #552]	@ (8006a38 <update_control_loops+0x2cc>)
 800680e:	f7fd fedb 	bl	80045c8 <UnitConverter_angle>
 8006812:	eef0 7a40 	vmov.f32	s15, s0
 8006816:	4b89      	ldr	r3, [pc, #548]	@ (8006a3c <update_control_loops+0x2d0>)
 8006818:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 800681c:	e140      	b.n	8006aa0 <update_control_loops+0x334>
	}

	switch (motion_sequence_state) {
 800681e:	4b8c      	ldr	r3, [pc, #560]	@ (8006a50 <update_control_loops+0x2e4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	3b01      	subs	r3, #1
 8006824:	2b04      	cmp	r3, #4
 8006826:	f200 80f7 	bhi.w	8006a18 <update_control_loops+0x2ac>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <update_control_loops+0xc4>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006845 	.word	0x08006845
 8006834:	08006869 	.word	0x08006869
 8006838:	0800694d 	.word	0x0800694d
 800683c:	080069f3 	.word	0x080069f3
 8006840:	08006a11 	.word	0x08006a11
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006844:	4b83      	ldr	r3, [pc, #524]	@ (8006a54 <update_control_loops+0x2e8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a82      	ldr	r2, [pc, #520]	@ (8006a54 <update_control_loops+0x2e8>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006852:	4293      	cmp	r3, r2
 8006854:	f240 80e2 	bls.w	8006a1c <update_control_loops+0x2b0>
			prismatic_axis.trajectory_active = true;
 8006858:	4b76      	ldr	r3, [pc, #472]	@ (8006a34 <update_control_loops+0x2c8>)
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006860:	4b7b      	ldr	r3, [pc, #492]	@ (8006a50 <update_control_loops+0x2e4>)
 8006862:	2202      	movs	r2, #2
 8006864:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006866:	e0d9      	b.n	8006a1c <update_control_loops+0x2b0>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006868:	4b72      	ldr	r3, [pc, #456]	@ (8006a34 <update_control_loops+0x2c8>)
 800686a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80d6 	beq.w	8006a20 <update_control_loops+0x2b4>
 8006874:	4b78      	ldr	r3, [pc, #480]	@ (8006a58 <update_control_loops+0x2ec>)
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	f083 0301 	eor.w	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80ce 	beq.w	8006a20 <update_control_loops+0x2b4>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006884:	4b6b      	ldr	r3, [pc, #428]	@ (8006a34 <update_control_loops+0x2c8>)
 8006886:	ed93 8a03 	vldr	s16, [r3, #12]
 800688a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a34 <update_control_loops+0x2c8>)
 800688c:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006890:	4b72      	ldr	r3, [pc, #456]	@ (8006a5c <update_control_loops+0x2f0>)
 8006892:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f95b 	bl	8000b54 <__aeabi_d2f>
 800689e:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80068a0:	4b6e      	ldr	r3, [pc, #440]	@ (8006a5c <update_control_loops+0x2f0>)
 80068a2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fa f953 	bl	8000b54 <__aeabi_d2f>
 80068ae:	4603      	mov	r3, r0
 80068b0:	ee01 3a90 	vmov	s3, r3
 80068b4:	ee01 4a10 	vmov	s2, r4
 80068b8:	eef0 0a68 	vmov.f32	s1, s17
 80068bc:	eeb0 0a48 	vmov.f32	s0, s16
 80068c0:	4965      	ldr	r1, [pc, #404]	@ (8006a58 <update_control_loops+0x2ec>)
 80068c2:	4867      	ldr	r0, [pc, #412]	@ (8006a60 <update_control_loops+0x2f4>)
 80068c4:	f7fd fae8 	bl	8003e98 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 80068c8:	4b63      	ldr	r3, [pc, #396]	@ (8006a58 <update_control_loops+0x2ec>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a59      	ldr	r2, [pc, #356]	@ (8006a34 <update_control_loops+0x2c8>)
 80068ce:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 80068d0:	4b61      	ldr	r3, [pc, #388]	@ (8006a58 <update_control_loops+0x2ec>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a57      	ldr	r2, [pc, #348]	@ (8006a34 <update_control_loops+0x2c8>)
 80068d6:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 80068d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006a58 <update_control_loops+0x2ec>)
 80068da:	7c1b      	ldrb	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 809f 	beq.w	8006a20 <update_control_loops+0x2b4>
				prismatic_axis.trajectory_active = false;
 80068e2:	4b54      	ldr	r3, [pc, #336]	@ (8006a34 <update_control_loops+0x2c8>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 80068ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006a58 <update_control_loops+0x2ec>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a51      	ldr	r2, [pc, #324]	@ (8006a34 <update_control_loops+0x2c8>)
 80068f0:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80068f2:	4b50      	ldr	r3, [pc, #320]	@ (8006a34 <update_control_loops+0x2c8>)
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80068fa:	4b50      	ldr	r3, [pc, #320]	@ (8006a3c <update_control_loops+0x2d0>)
 80068fc:	ed93 8a03 	vldr	s16, [r3, #12]
 8006900:	4b4e      	ldr	r3, [pc, #312]	@ (8006a3c <update_control_loops+0x2d0>)
 8006902:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006906:	4b57      	ldr	r3, [pc, #348]	@ (8006a64 <update_control_loops+0x2f8>)
 8006908:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f7fa f920 	bl	8000b54 <__aeabi_d2f>
 8006914:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006916:	4b53      	ldr	r3, [pc, #332]	@ (8006a64 <update_control_loops+0x2f8>)
 8006918:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f918 	bl	8000b54 <__aeabi_d2f>
 8006924:	4603      	mov	r3, r0
 8006926:	ee01 3a90 	vmov	s3, r3
 800692a:	ee01 4a10 	vmov	s2, r4
 800692e:	eef0 0a68 	vmov.f32	s1, s17
 8006932:	eeb0 0a48 	vmov.f32	s0, s16
 8006936:	484c      	ldr	r0, [pc, #304]	@ (8006a68 <update_control_loops+0x2fc>)
 8006938:	f7fd f9ec 	bl	8003d14 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 800693c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a3c <update_control_loops+0x2d0>)
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006944:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <update_control_loops+0x2e4>)
 8006946:	2203      	movs	r2, #3
 8006948:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800694a:	e069      	b.n	8006a20 <update_control_loops+0x2b4>

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 800694c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a3c <update_control_loops+0x2d0>)
 800694e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006952:	2b00      	cmp	r3, #0
 8006954:	d066      	beq.n	8006a24 <update_control_loops+0x2b8>
 8006956:	4b45      	ldr	r3, [pc, #276]	@ (8006a6c <update_control_loops+0x300>)
 8006958:	7c1b      	ldrb	r3, [r3, #16]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d05f      	beq.n	8006a24 <update_control_loops+0x2b8>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006964:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <update_control_loops+0x2d0>)
 8006966:	ed93 8a03 	vldr	s16, [r3, #12]
 800696a:	4b34      	ldr	r3, [pc, #208]	@ (8006a3c <update_control_loops+0x2d0>)
 800696c:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006970:	4b3c      	ldr	r3, [pc, #240]	@ (8006a64 <update_control_loops+0x2f8>)
 8006972:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f7fa f8eb 	bl	8000b54 <__aeabi_d2f>
 800697e:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006980:	4b38      	ldr	r3, [pc, #224]	@ (8006a64 <update_control_loops+0x2f8>)
 8006982:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	f7fa f8e3 	bl	8000b54 <__aeabi_d2f>
 800698e:	4603      	mov	r3, r0
 8006990:	ee01 3a90 	vmov	s3, r3
 8006994:	ee01 4a10 	vmov	s2, r4
 8006998:	eef0 0a68 	vmov.f32	s1, s17
 800699c:	eeb0 0a48 	vmov.f32	s0, s16
 80069a0:	4932      	ldr	r1, [pc, #200]	@ (8006a6c <update_control_loops+0x300>)
 80069a2:	4831      	ldr	r0, [pc, #196]	@ (8006a68 <update_control_loops+0x2fc>)
 80069a4:	f7fd fa78 	bl	8003e98 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 80069a8:	4b30      	ldr	r3, [pc, #192]	@ (8006a6c <update_control_loops+0x300>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <update_control_loops+0x2d0>)
 80069ae:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 80069b0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a6c <update_control_loops+0x300>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a21      	ldr	r2, [pc, #132]	@ (8006a3c <update_control_loops+0x2d0>)
 80069b6:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 80069b8:	4b2c      	ldr	r3, [pc, #176]	@ (8006a6c <update_control_loops+0x300>)
 80069ba:	7c1b      	ldrb	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d031      	beq.n	8006a24 <update_control_loops+0x2b8>
				revolute_axis.trajectory_active = false;
 80069c0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a3c <update_control_loops+0x2d0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 80069c8:	4b28      	ldr	r3, [pc, #160]	@ (8006a6c <update_control_loops+0x300>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <update_control_loops+0x2d0>)
 80069ce:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 80069d0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a3c <update_control_loops+0x2d0>)
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 80069d8:	4825      	ldr	r0, [pc, #148]	@ (8006a70 <update_control_loops+0x304>)
 80069da:	f7fa fcaf 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80069de:	4825      	ldr	r0, [pc, #148]	@ (8006a74 <update_control_loops+0x308>)
 80069e0:	f7fa fcac 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a54 <update_control_loops+0x2e8>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80069ea:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <update_control_loops+0x2e4>)
 80069ec:	2204      	movs	r2, #4
 80069ee:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80069f0:	e018      	b.n	8006a24 <update_control_loops+0x2b8>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 80069f2:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <update_control_loops+0x2e8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <update_control_loops+0x2e8>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d939      	bls.n	8006a78 <update_control_loops+0x30c>
			plotter_pen_down();
 8006a04:	f001 f81c 	bl	8007a40 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006a08:	4b11      	ldr	r3, [pc, #68]	@ (8006a50 <update_control_loops+0x2e4>)
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006a0e:	e033      	b.n	8006a78 <update_control_loops+0x30c>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006a10:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <update_control_loops+0x2e4>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
		break;
 8006a16:	e030      	b.n	8006a7a <update_control_loops+0x30e>

	default:
		break;
 8006a18:	bf00      	nop
 8006a1a:	e02e      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a1c:	bf00      	nop
 8006a1e:	e02c      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a20:	bf00      	nop
 8006a22:	e02a      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a24:	bf00      	nop
 8006a26:	e028      	b.n	8006a7a <update_control_loops+0x30e>
 8006a28:	200004a0 	.word	0x200004a0
 8006a2c:	200003a4 	.word	0x200003a4
 8006a30:	20000444 	.word	0x20000444
 8006a34:	20000280 	.word	0x20000280
 8006a38:	20000810 	.word	0x20000810
 8006a3c:	200002c0 	.word	0x200002c0
 8006a40:	20000363 	.word	0x20000363
 8006a44:	44fa0000 	.word	0x44fa0000
 8006a48:	200003ac 	.word	0x200003ac
 8006a4c:	200003f8 	.word	0x200003f8
 8006a50:	20000300 	.word	0x20000300
 8006a54:	20000358 	.word	0x20000358
 8006a58:	2000032c 	.word	0x2000032c
 8006a5c:	20000080 	.word	0x20000080
 8006a60:	20000304 	.word	0x20000304
 8006a64:	20000000 	.word	0x20000000
 8006a68:	20000318 	.word	0x20000318
 8006a6c:	20000340 	.word	0x20000340
 8006a70:	2000054c 	.word	0x2000054c
 8006a74:	20000574 	.word	0x20000574
		break;
 8006a78:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <update_control_loops+0x33c>)
 8006a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8006aac <update_control_loops+0x340>)
 8006a80:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006a82:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <update_control_loops+0x344>)
 8006a84:	edd3 7a00 	vldr	s15, [r3]
 8006a88:	220e      	movs	r2, #14
 8006a8a:	210f      	movs	r1, #15
 8006a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a90:	4808      	ldr	r0, [pc, #32]	@ (8006ab4 <update_control_loops+0x348>)
 8006a92:	f7fd fd99 	bl	80045c8 <UnitConverter_angle>
 8006a96:	eef0 7a40 	vmov.f32	s15, s0
 8006a9a:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <update_control_loops+0x34c>)
 8006a9c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	ecbd 8b02 	vpop	{d8}
 8006aa6:	bd98      	pop	{r3, r4, r7, pc}
 8006aa8:	20000444 	.word	0x20000444
 8006aac:	20000280 	.word	0x20000280
 8006ab0:	200003a4 	.word	0x200003a4
 8006ab4:	20000810 	.word	0x20000810
 8006ab8:	200002c0 	.word	0x200002c0

08006abc <check_emergency_button>:

void check_emergency_button(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
    // Read current state of emergency button
    bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	480c      	ldr	r0, [pc, #48]	@ (8006af8 <check_emergency_button+0x3c>)
 8006ac6:	f004 faeb 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	71fb      	strb	r3, [r7, #7]
    // If emergency button is pressed (assuming active high)
    // Adjust the logic based on your hardware:
    // - If button is active HIGH when pressed: use == GPIO_PIN_SET
    // - If button is active LOW when pressed: use == GPIO_PIN_RESET

    if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f083 0301 	eor.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <check_emergency_button+0x32>
        // Emergency button is pressed - trigger hardware emergency
        if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <check_emergency_button+0x40>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d001      	beq.n	8006aee <check_emergency_button+0x32>
            trigger_hardware_emergency();
 8006aea:	f000 f86f 	bl	8006bcc <trigger_hardware_emergency>
            // Auto-clear emergency when button released (NOT RECOMMENDED)
            // clear_emergency_state();
        }
    }
    */
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	48000400 	.word	0x48000400
 8006afc:	20000364 	.word	0x20000364

08006b00 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006b04:	4b16      	ldr	r3, [pc, #88]	@ (8006b60 <check_safety_conditions+0x60>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d127      	bne.n	8006b5c <check_safety_conditions+0x5c>
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <check_safety_conditions+0x64>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d123      	bne.n	8006b5c <check_safety_conditions+0x5c>
 8006b14:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <check_safety_conditions+0x68>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11f      	bne.n	8006b5c <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <check_safety_conditions+0x6c>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <check_safety_conditions+0x3c>
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <check_safety_conditions+0x70>)
 8006b28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d502      	bpl.n	8006b3c <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006b36:	f000 f81f 	bl	8006b78 <trigger_software_emergency>
		return;
 8006b3a:	e010      	b.n	8006b5e <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <check_safety_conditions+0x74>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <check_safety_conditions+0x5e>
 8006b46:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <check_safety_conditions+0x70>)
 8006b48:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b54:	dd03      	ble.n	8006b5e <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006b56:	f000 f80f 	bl	8006b78 <trigger_software_emergency>
		return;
 8006b5a:	e000      	b.n	8006b5e <check_safety_conditions+0x5e>
		return;
 8006b5c:	bf00      	nop
	}
}
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000134 	.word	0x20000134
 8006b64:	20000364 	.word	0x20000364
 8006b68:	20000363 	.word	0x20000363
 8006b6c:	20000360 	.word	0x20000360
 8006b70:	20000280 	.word	0x20000280
 8006b74:	20000361 	.word	0x20000361

08006b78 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <trigger_software_emergency+0x3c>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d115      	bne.n	8006bb0 <trigger_software_emergency+0x38>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006b84:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <trigger_software_emergency+0x3c>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8006b8a:	f000 f87f 	bl	8006c8c <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <trigger_software_emergency+0x40>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8006b94:	4b09      	ldr	r3, [pc, #36]	@ (8006bbc <trigger_software_emergency+0x44>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8006b9a:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <trigger_software_emergency+0x48>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006ba0:	4b08      	ldr	r3, [pc, #32]	@ (8006bc4 <trigger_software_emergency+0x4c>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006ba8:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <trigger_software_emergency+0x50>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000364 	.word	0x20000364
 8006bb8:	20000368 	.word	0x20000368
 8006bbc:	2000036c 	.word	0x2000036c
 8006bc0:	20000300 	.word	0x20000300
 8006bc4:	20000280 	.word	0x20000280
 8006bc8:	200002c0 	.word	0x200002c0

08006bcc <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006bd0:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <trigger_hardware_emergency+0x48>)
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8006bd6:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <trigger_hardware_emergency+0x4c>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006bdc:	f000 f856 	bl	8006c8c <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006be0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <trigger_hardware_emergency+0x50>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006be6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c20 <trigger_hardware_emergency+0x54>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006bec:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <trigger_hardware_emergency+0x58>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <trigger_hardware_emergency+0x5c>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c2c <trigger_hardware_emergency+0x60>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <trigger_hardware_emergency+0x64>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006c06:	4b0b      	ldr	r3, [pc, #44]	@ (8006c34 <trigger_hardware_emergency+0x68>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000364 	.word	0x20000364
 8006c18:	2000036d 	.word	0x2000036d
 8006c1c:	20000368 	.word	0x20000368
 8006c20:	2000036c 	.word	0x2000036c
 8006c24:	20000363 	.word	0x20000363
 8006c28:	20000362 	.word	0x20000362
 8006c2c:	20000300 	.word	0x20000300
 8006c30:	20000280 	.word	0x20000280
 8006c34:	200002c0 	.word	0x200002c0

08006c38 <clear_emergency_state>:

void clear_emergency_state(void) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <clear_emergency_state+0x3c>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <clear_emergency_state+0x40>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006c48:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <clear_emergency_state+0x44>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <clear_emergency_state+0x48>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006c54:	2200      	movs	r2, #0
 8006c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c5e:	f004 fa37 	bl	800b0d0 <HAL_GPIO_WritePin>
	up_photo = false;
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <clear_emergency_state+0x4c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006c68:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <clear_emergency_state+0x50>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000364 	.word	0x20000364
 8006c78:	2000036d 	.word	0x2000036d
 8006c7c:	20000368 	.word	0x20000368
 8006c80:	2000036c 	.word	0x2000036c
 8006c84:	20000360 	.word	0x20000360
 8006c88:	20000361 	.word	0x20000361

08006c8c <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006c90:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8006ce8 <emergency_stop_all_motors+0x5c>
 8006c94:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8006cec <emergency_stop_all_motors+0x60>
 8006c98:	4815      	ldr	r0, [pc, #84]	@ (8006cf0 <emergency_stop_all_motors+0x64>)
 8006c9a:	f7fa fb95 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006c9e:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8006ce8 <emergency_stop_all_motors+0x5c>
 8006ca2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8006cec <emergency_stop_all_motors+0x60>
 8006ca6:	4813      	ldr	r0, [pc, #76]	@ (8006cf4 <emergency_stop_all_motors+0x68>)
 8006ca8:	f7fa fb8e 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006cac:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <emergency_stop_all_motors+0x6c>)
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006cb4:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <emergency_stop_all_motors+0x70>)
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <emergency_stop_all_motors+0x6c>)
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <emergency_stop_all_motors+0x70>)
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006ccc:	480c      	ldr	r0, [pc, #48]	@ (8006d00 <emergency_stop_all_motors+0x74>)
 8006cce:	f7fa fb35 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006cd2:	480c      	ldr	r0, [pc, #48]	@ (8006d04 <emergency_stop_all_motors+0x78>)
 8006cd4:	f7fa fb32 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006cd8:	480b      	ldr	r0, [pc, #44]	@ (8006d08 <emergency_stop_all_motors+0x7c>)
 8006cda:	f7fa fb2f 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006cde:	480b      	ldr	r0, [pc, #44]	@ (8006d0c <emergency_stop_all_motors+0x80>)
 8006ce0:	f7fa fb2c 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006ce4:	bf00      	nop
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	00000000 	.word	0x00000000
 8006cec:	44fa0000 	.word	0x44fa0000
 8006cf0:	200003ac 	.word	0x200003ac
 8006cf4:	200003f8 	.word	0x200003f8
 8006cf8:	20000280 	.word	0x20000280
 8006cfc:	200002c0 	.word	0x200002c0
 8006d00:	200004fc 	.word	0x200004fc
 8006d04:	20000524 	.word	0x20000524
 8006d08:	2000054c 	.word	0x2000054c
 8006d0c:	20000574 	.word	0x20000574

08006d10 <update_safety_system>:

void update_safety_system(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006d14:	4b37      	ldr	r3, [pc, #220]	@ (8006df4 <update_safety_system+0xe4>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d11f      	bne.n	8006d5c <update_safety_system+0x4c>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006d1c:	4b36      	ldr	r3, [pc, #216]	@ (8006df8 <update_safety_system+0xe8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	4a35      	ldr	r2, [pc, #212]	@ (8006df8 <update_safety_system+0xe8>)
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	2bf9      	cmp	r3, #249	@ 0xf9
 8006d28:	d918      	bls.n	8006d5c <update_safety_system+0x4c>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d32:	f004 f9e5 	bl	800b100 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006d36:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <update_safety_system+0xec>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	bf14      	ite	ne
 8006d40:	2301      	movne	r3, #1
 8006d42:	2300      	moveq	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f083 0301 	eor.w	r3, r3, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4b2a      	ldr	r3, [pc, #168]	@ (8006dfc <update_safety_system+0xec>)
 8006d54:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006d56:	4b28      	ldr	r3, [pc, #160]	@ (8006df8 <update_safety_system+0xe8>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006d5c:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <update_safety_system+0xe4>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d134      	bne.n	8006dce <update_safety_system+0xbe>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006d64:	2110      	movs	r1, #16
 8006d66:	4826      	ldr	r0, [pc, #152]	@ (8006e00 <update_safety_system+0xf0>)
 8006d68:	f004 f99a 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d120      	bne.n	8006db4 <update_safety_system+0xa4>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006d72:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <update_safety_system+0xe8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <update_safety_system+0xe8>)
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	2bf9      	cmp	r3, #249	@ 0xf9
 8006d7e:	d926      	bls.n	8006dce <update_safety_system+0xbe>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006d80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d88:	f004 f9ba 	bl	800b100 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dfc <update_safety_system+0xec>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bf14      	ite	ne
 8006d96:	2301      	movne	r3, #1
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	4b14      	ldr	r3, [pc, #80]	@ (8006dfc <update_safety_system+0xec>)
 8006daa:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8006dac:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <update_safety_system+0xe8>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e00c      	b.n	8006dce <update_safety_system+0xbe>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006dbe:	f004 f987 	bl	800b0d0 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <update_safety_system+0xec>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <update_safety_system+0xe8>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <update_safety_system+0xe4>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <update_safety_system+0xe0>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006de0:	f004 f976 	bl	800b0d0 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <update_safety_system+0xec>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8006dea:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <update_safety_system+0xe8>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
	}
}
 8006df0:	bf00      	nop
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000364 	.word	0x20000364
 8006df8:	20000368 	.word	0x20000368
 8006dfc:	2000036c 	.word	0x2000036c
 8006e00:	48000400 	.word	0x48000400

08006e04 <is_emergency_active>:

bool is_emergency_active(void) {
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <is_emergency_active+0x1c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000364 	.word	0x20000364

08006e24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	d105      	bne.n	8006e40 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_GPIO_EXTI_Callback+0x120>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4a42      	ldr	r2, [pc, #264]	@ (8006f44 <HAL_GPIO_EXTI_Callback+0x120>)
 8006e3c:	6013      	str	r3, [r2, #0]
		return;
 8006e3e:	e07e      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d103      	bne.n	8006e4e <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8006e46:	4b40      	ldr	r3, [pc, #256]	@ (8006f48 <HAL_GPIO_EXTI_Callback+0x124>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
		return;
 8006e4c:	e077      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e54:	d103      	bne.n	8006e5e <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8006e56:	4b3d      	ldr	r3, [pc, #244]	@ (8006f4c <HAL_GPIO_EXTI_Callback+0x128>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
		return;
 8006e5c:	e06f      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
	}

	if (GPIO_Pin == EMER_Pin) {
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d102      	bne.n	8006e6a <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8006e64:	f7ff feb2 	bl	8006bcc <trigger_hardware_emergency>
		return;
 8006e68:	e069      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
	}

	if (GPIO_Pin == J1_Pin) {
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	2b80      	cmp	r3, #128	@ 0x80
 8006e6e:	d13e      	bne.n	8006eee <HAL_GPIO_EXTI_Callback+0xca>
		if (!is_emergency_active() && !homing_active
 8006e70:	f7ff ffc8 	bl	8006e04 <is_emergency_active>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d059      	beq.n	8006f34 <HAL_GPIO_EXTI_Callback+0x110>
 8006e80:	4b33      	ldr	r3, [pc, #204]	@ (8006f50 <HAL_GPIO_EXTI_Callback+0x12c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f083 0301 	eor.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d052      	beq.n	8006f34 <HAL_GPIO_EXTI_Callback+0x110>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8006e8e:	4b31      	ldr	r3, [pc, #196]	@ (8006f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d14e      	bne.n	8006f34 <HAL_GPIO_EXTI_Callback+0x110>
 8006e96:	4b30      	ldr	r3, [pc, #192]	@ (8006f58 <HAL_GPIO_EXTI_Callback+0x134>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f083 0301 	eor.w	r3, r3, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d047      	beq.n	8006f34 <HAL_GPIO_EXTI_Callback+0x110>
			start_combined_trajectory(
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8006eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8006eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f64 <HAL_GPIO_EXTI_Callback+0x140>)
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8006ec0:	eef0 0a47 	vmov.f32	s1, s14
 8006ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec8:	f7ff f8fa 	bl	80060c0 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8006ecc:	4b23      	ldr	r3, [pc, #140]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8006ed2:	4b25      	ldr	r3, [pc, #148]	@ (8006f68 <HAL_GPIO_EXTI_Callback+0x144>)
 8006ed4:	fb83 3102 	smull	r3, r1, r3, r2
 8006ed8:	17d3      	asrs	r3, r2, #31
 8006eda:	1ac9      	subs	r1, r1, r3
 8006edc:	460b      	mov	r3, r1
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	440b      	add	r3, r1
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8006ee6:	b2ca      	uxtb	r2, r1
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8006eea:	701a      	strb	r2, [r3, #0]
		}
		return;
 8006eec:	e022      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x110>
	}

	if (GPIO_Pin == J3_Pin) {
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d10f      	bne.n	8006f16 <HAL_GPIO_EXTI_Callback+0xf2>
		if (!is_emergency_active() && motion_sequence_state == MOTION_IDLE) {
 8006ef6:	f7ff ff85 	bl	8006e04 <is_emergency_active>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f083 0301 	eor.w	r3, r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d018      	beq.n	8006f38 <HAL_GPIO_EXTI_Callback+0x114>
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d114      	bne.n	8006f38 <HAL_GPIO_EXTI_Callback+0x114>
			start_homing_sequence(false);
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f7fe f9d2 	bl	80052b8 <start_homing_sequence>
		}
		return;
 8006f14:	e010      	b.n	8006f38 <HAL_GPIO_EXTI_Callback+0x114>
	}

	if (GPIO_Pin == J4_Pin) {
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1c:	d10f      	bne.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
		if (is_emergency_active()) {
 8006f1e:	f7ff ff71 	bl	8006e04 <is_emergency_active>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_GPIO_EXTI_Callback+0x118>
			clear_emergency_state();
 8006f28:	f7ff fe86 	bl	8006c38 <clear_emergency_state>
			start_homing_sequence(true);
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f7fe f9c3 	bl	80052b8 <start_homing_sequence>
		}
		return;
 8006f32:	e003      	b.n	8006f3c <HAL_GPIO_EXTI_Callback+0x118>
		return;
 8006f34:	bf00      	nop
 8006f36:	e002      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
		return;
 8006f38:	bf00      	nop
 8006f3a:	e000      	b.n	8006f3e <HAL_GPIO_EXTI_Callback+0x11a>
		return;
 8006f3c:	bf00      	nop
	}
}
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	2000035c 	.word	0x2000035c
 8006f48:	20000360 	.word	0x20000360
 8006f4c:	20000361 	.word	0x20000361
 8006f50:	20000363 	.word	0x20000363
 8006f54:	20000300 	.word	0x20000300
 8006f58:	20000133 	.word	0x20000133
 8006f5c:	20000354 	.word	0x20000354
 8006f60:	08012a70 	.word	0x08012a70
 8006f64:	08012a58 	.word	0x08012a58
 8006f68:	2aaaaaab 	.word	0x2aaaaaab

08006f6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a65      	ldr	r2, [pc, #404]	@ (800710c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	f040 80c3 	bne.w	8007104 <HAL_TIM_PeriodElapsedCallback+0x198>
		plotter_update_sensors();
 8006f7e:	f000 fca9 	bl	80078d4 <plotter_update_sensors>

		check_emergency_button();
 8006f82:	f7ff fd9b 	bl	8006abc <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8006f86:	4862      	ldr	r0, [pc, #392]	@ (8007110 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8006f88:	f7fc fc7e 	bl	8003888 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8006f8c:	4860      	ldr	r0, [pc, #384]	@ (8007110 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8006f8e:	f7fc fd67 	bl	8003a60 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8006f92:	4860      	ldr	r0, [pc, #384]	@ (8007114 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006f94:	f7fc fc78 	bl	8003888 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8006f98:	485e      	ldr	r0, [pc, #376]	@ (8007114 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006f9a:	f7fc fd61 	bl	8003a60 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8006f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006fa0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006fa4:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8006fa8:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8006fac:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 800711c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8006fb0:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8007120 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8006fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fb8:	f7fa fed4 	bl	8001d64 <mapf>
 8006fbc:	eef0 7a40 	vmov.f32	s15, s0
 8006fc0:	4b55      	ldr	r3, [pc, #340]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006fc2:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8006fc6:	4b54      	ldr	r3, [pc, #336]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006fc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fcc:	4b51      	ldr	r3, [pc, #324]	@ (8007114 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006fce:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006fd2:	eef0 0a47 	vmov.f32	s1, s14
 8006fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006fda:	4852      	ldr	r0, [pc, #328]	@ (8007124 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006fdc:	f7fd fd70 	bl	8004ac0 <SteadyStateKalmanFilter>
 8006fe0:	eef0 7a40 	vmov.f32	s15, s0
 8006fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006fe6:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8006fea:	4b4b      	ldr	r3, [pc, #300]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006fec:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ff0:	eef4 7a67 	vcmp.f32	s15, s15
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	d703      	bvc.n	8007002 <HAL_TIM_PeriodElapsedCallback+0x96>
			revolute_axis.kalman_velocity = 0.0f;
 8006ffa:	4b47      	ldr	r3, [pc, #284]	@ (8007118 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8007002:	4b49      	ldr	r3, [pc, #292]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007004:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007008:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800700c:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007010:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 800711c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8007014:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8007120 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8007018:	eeb0 0a67 	vmov.f32	s0, s15
 800701c:	f7fa fea2 	bl	8001d64 <mapf>
 8007020:	eef0 7a40 	vmov.f32	s15, s0
 8007024:	4b40      	ldr	r3, [pc, #256]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007026:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 800702a:	4b3f      	ldr	r3, [pc, #252]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800702c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007030:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8007032:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007036:	eef0 0a47 	vmov.f32	s1, s14
 800703a:	eeb0 0a67 	vmov.f32	s0, s15
 800703e:	483b      	ldr	r0, [pc, #236]	@ (800712c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007040:	f7fb fe5e 	bl	8002d00 <MotorKalman_Estimate>
 8007044:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8007048:	4b39      	ldr	r3, [pc, #228]	@ (8007130 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800704a:	edd3 7a04 	vldr	s15, [r3, #16]
 800704e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007052:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007134 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8007056:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 800705a:	4b33      	ldr	r3, [pc, #204]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800705c:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8007060:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007062:	edd3 7a07 	vldr	s15, [r3, #28]
 8007066:	eef4 7a67 	vcmp.f32	s15, s15
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	d703      	bvc.n	8007078 <HAL_TIM_PeriodElapsedCallback+0x10c>
			prismatic_axis.kalman_velocity = 0.0f;
 8007070:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	61da      	str	r2, [r3, #28]
		}

		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007078:	4b2f      	ldr	r3, [pc, #188]	@ (8007138 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	4a2e      	ldr	r2, [pc, #184]	@ (8007138 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	2b09      	cmp	r3, #9
 8007084:	d917      	bls.n	80070b6 <HAL_TIM_PeriodElapsedCallback+0x14a>
			position_control_tick = 0;
 8007086:	4b2c      	ldr	r3, [pc, #176]	@ (8007138 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

			if (!homing_active && (!is_emergency_active() || tuning_mode)) {
 800708c:	4b2b      	ldr	r3, [pc, #172]	@ (800713c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f083 0301 	eor.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00d      	beq.n	80070b6 <HAL_TIM_PeriodElapsedCallback+0x14a>
 800709a:	f7ff feb3 	bl	8006e04 <is_emergency_active>
 800709e:	4603      	mov	r3, r0
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <HAL_TIM_PeriodElapsedCallback+0x146>
 80070aa:	4b25      	ldr	r3, [pc, #148]	@ (8007140 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <HAL_TIM_PeriodElapsedCallback+0x14a>
				update_position_control();
 80070b2:	f7ff f8d3 	bl	800625c <update_position_control>
			}
		}

		if (!homing_active && (!is_emergency_active() || tuning_mode)) {
 80070b6:	4b21      	ldr	r3, [pc, #132]	@ (800713c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f083 0301 	eor.w	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <HAL_TIM_PeriodElapsedCallback+0x174>
 80070c4:	f7ff fe9e 	bl	8006e04 <is_emergency_active>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f083 0301 	eor.w	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <HAL_TIM_PeriodElapsedCallback+0x170>
 80070d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_TIM_PeriodElapsedCallback+0x174>
			update_velocity_control();
 80070dc:	f7ff f97c 	bl	80063d8 <update_velocity_control>
		}

		update_safety_system();
 80070e0:	f7ff fe16 	bl	8006d10 <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 80070e4:	f7ff fe8e 	bl	8006e04 <is_emergency_active>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f083 0301 	eor.w	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d103      	bne.n	80070fc <HAL_TIM_PeriodElapsedCallback+0x190>
 80070f4:	4b12      	ldr	r3, [pc, #72]	@ (8007140 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_TIM_PeriodElapsedCallback+0x194>
			check_safety_conditions();
 80070fc:	f7ff fd00 	bl	8006b00 <check_safety_conditions>
		}

		update_control_loops();
 8007100:	f7ff fb34 	bl	800676c <update_control_loops>
	}
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200019dc 	.word	0x200019dc
 8007110:	20000444 	.word	0x20000444
 8007114:	200004a0 	.word	0x200004a0
 8007118:	200002c0 	.word	0x200002c0
 800711c:	477fff00 	.word	0x477fff00
 8007120:	c77fff00 	.word	0xc77fff00
 8007124:	2000151c 	.word	0x2000151c
 8007128:	20000280 	.word	0x20000280
 800712c:	200011b0 	.word	0x200011b0
 8007130:	20000100 	.word	0x20000100
 8007134:	447a0000 	.word	0x447a0000
 8007138:	200003a0 	.word	0x200003a0
 800713c:	20000363 	.word	0x20000363
 8007140:	20000134 	.word	0x20000134

08007144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007148:	b672      	cpsid	i
}
 800714a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800714c:	bf00      	nop
 800714e:	e7fd      	b.n	800714c <Error_Handler+0x8>

08007150 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8007150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007154:	ed2d 8b02 	vpush	{d8}
 8007158:	b083      	sub	sp, #12
 800715a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max * Disturbance_Constant.prismatic_pulley_radius * 1000;
 800715c:	4bc4      	ldr	r3, [pc, #784]	@ (8007470 <plotter_begin+0x320>)
 800715e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007162:	4bc4      	ldr	r3, [pc, #784]	@ (8007474 <plotter_begin+0x324>)
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 f9ba 	bl	80004e0 <__aeabi_f2d>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fa0c 	bl	8000590 <__aeabi_dmul>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4610      	mov	r0, r2
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	4bbc      	ldr	r3, [pc, #752]	@ (8007478 <plotter_begin+0x328>)
 8007186:	f7f9 fa03 	bl	8000590 <__aeabi_dmul>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	49b8      	ldr	r1, [pc, #736]	@ (8007470 <plotter_begin+0x320>)
 8007190:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8007194:	4bb6      	ldr	r3, [pc, #728]	@ (8007470 <plotter_begin+0x320>)
 8007196:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	f7f9 f841 	bl	8000224 <__adddf3>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	49b2      	ldr	r1, [pc, #712]	@ (8007470 <plotter_begin+0x320>)
 80071a8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 80071ac:	49b0      	ldr	r1, [pc, #704]	@ (8007470 <plotter_begin+0x320>)
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	4bb2      	ldr	r3, [pc, #712]	@ (800747c <plotter_begin+0x32c>)
 80071b4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000;
 80071b8:	49ad      	ldr	r1, [pc, #692]	@ (8007470 <plotter_begin+0x320>)
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	4bae      	ldr	r3, [pc, #696]	@ (8007478 <plotter_begin+0x328>)
 80071c0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80071c4:	4bae      	ldr	r3, [pc, #696]	@ (8007480 <plotter_begin+0x330>)
 80071c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 80071ca:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007468 <plotter_begin+0x318>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f9de 	bl	8000590 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80071d8:	49a9      	ldr	r1, [pc, #676]	@ (8007480 <plotter_begin+0x330>)
 80071da:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 80071de:	49a8      	ldr	r1, [pc, #672]	@ (8007480 <plotter_begin+0x330>)
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	4ba7      	ldr	r3, [pc, #668]	@ (8007484 <plotter_begin+0x334>)
 80071e6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 10.0;
 80071ea:	49a5      	ldr	r1, [pc, #660]	@ (8007480 <plotter_begin+0x330>)
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	4ba5      	ldr	r3, [pc, #660]	@ (8007488 <plotter_begin+0x338>)
 80071f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80071f6:	2100      	movs	r1, #0
 80071f8:	48a4      	ldr	r0, [pc, #656]	@ (800748c <plotter_begin+0x33c>)
 80071fa:	f000 fc31 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80071fe:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8007490 <plotter_begin+0x340>
 8007202:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8007494 <plotter_begin+0x344>
 8007206:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80074cc <plotter_begin+0x37c>
 800720a:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80074cc <plotter_begin+0x37c>
 800720e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8007498 <plotter_begin+0x348>
 8007212:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8007490 <plotter_begin+0x340>
 8007216:	489d      	ldr	r0, [pc, #628]	@ (800748c <plotter_begin+0x33c>)
 8007218:	f000 fc80 	bl	8007b1c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800721c:	2102      	movs	r1, #2
 800721e:	489f      	ldr	r0, [pc, #636]	@ (800749c <plotter_begin+0x34c>)
 8007220:	f000 fc1e 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8007224:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 8007490 <plotter_begin+0x340>
 8007228:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8007494 <plotter_begin+0x344>
 800722c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 80074cc <plotter_begin+0x37c>
 8007230:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80074cc <plotter_begin+0x37c>
 8007234:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007238:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8007498 <plotter_begin+0x348>
 800723c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8007490 <plotter_begin+0x340>
 8007240:	4896      	ldr	r0, [pc, #600]	@ (800749c <plotter_begin+0x34c>)
 8007242:	f000 fc96 	bl	8007b72 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8007246:	2100      	movs	r1, #0
 8007248:	4895      	ldr	r0, [pc, #596]	@ (80074a0 <plotter_begin+0x350>)
 800724a:	f000 fc09 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800724e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80074a4 <plotter_begin+0x354>
 8007252:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80074a8 <plotter_begin+0x358>
 8007256:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80074cc <plotter_begin+0x37c>
 800725a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80074cc <plotter_begin+0x37c>
 800725e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8007498 <plotter_begin+0x348>
 8007262:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80074a4 <plotter_begin+0x354>
 8007266:	488e      	ldr	r0, [pc, #568]	@ (80074a0 <plotter_begin+0x350>)
 8007268:	f000 fc58 	bl	8007b1c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800726c:	2102      	movs	r1, #2
 800726e:	488f      	ldr	r0, [pc, #572]	@ (80074ac <plotter_begin+0x35c>)
 8007270:	f000 fbf6 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8007274:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8007278:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 800727c:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80074cc <plotter_begin+0x37c>
 8007280:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80074cc <plotter_begin+0x37c>
 8007284:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007288:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8007498 <plotter_begin+0x348>
 800728c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8007290:	4886      	ldr	r0, [pc, #536]	@ (80074ac <plotter_begin+0x35c>)
 8007292:	f000 fc6e 	bl	8007b72 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8007296:	2100      	movs	r1, #0
 8007298:	4885      	ldr	r0, [pc, #532]	@ (80074b0 <plotter_begin+0x360>)
 800729a:	f000 fbe1 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800729e:	4b74      	ldr	r3, [pc, #464]	@ (8007470 <plotter_begin+0x320>)
 80072a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80072a4:	4610      	mov	r0, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	f7f9 fc54 	bl	8000b54 <__aeabi_d2f>
 80072ac:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80072ae:	4b70      	ldr	r3, [pc, #448]	@ (8007470 <plotter_begin+0x320>)
 80072b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	f7f9 fc4c 	bl	8000b54 <__aeabi_d2f>
 80072bc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80072c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007470 <plotter_begin+0x320>)
 80072c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	f7f9 fc40 	bl	8000b54 <__aeabi_d2f>
 80072d4:	4603      	mov	r3, r0
 80072d6:	ee02 3a90 	vmov	s5, r3
 80072da:	eeb0 2a48 	vmov.f32	s4, s16
 80072de:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80074cc <plotter_begin+0x37c>
 80072e2:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80074cc <plotter_begin+0x37c>
 80072e6:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8007498 <plotter_begin+0x348>
 80072ea:	ee00 4a10 	vmov	s0, r4
 80072ee:	4870      	ldr	r0, [pc, #448]	@ (80074b0 <plotter_begin+0x360>)
 80072f0:	f000 fc14 	bl	8007b1c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 80072f4:	2102      	movs	r1, #2
 80072f6:	486f      	ldr	r0, [pc, #444]	@ (80074b4 <plotter_begin+0x364>)
 80072f8:	f000 fbb2 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80072fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007470 <plotter_begin+0x320>)
 80072fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	f7f9 fc25 	bl	8000b54 <__aeabi_d2f>
 800730a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800730c:	4b58      	ldr	r3, [pc, #352]	@ (8007470 <plotter_begin+0x320>)
 800730e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007312:	4610      	mov	r0, r2
 8007314:	4619      	mov	r1, r3
 8007316:	f7f9 fc1d 	bl	8000b54 <__aeabi_d2f>
 800731a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8007324:	4b52      	ldr	r3, [pc, #328]	@ (8007470 <plotter_begin+0x320>)
 8007326:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f7f9 fc11 	bl	8000b54 <__aeabi_d2f>
 8007332:	4603      	mov	r3, r0
 8007334:	ee03 3a10 	vmov	s6, r3
 8007338:	eef0 2a48 	vmov.f32	s5, s16
 800733c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80074cc <plotter_begin+0x37c>
 8007340:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80074cc <plotter_begin+0x37c>
 8007344:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007348:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8007498 <plotter_begin+0x348>
 800734c:	ee00 4a10 	vmov	s0, r4
 8007350:	4858      	ldr	r0, [pc, #352]	@ (80074b4 <plotter_begin+0x364>)
 8007352:	f000 fc0e 	bl	8007b72 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8007356:	2100      	movs	r1, #0
 8007358:	4857      	ldr	r0, [pc, #348]	@ (80074b8 <plotter_begin+0x368>)
 800735a:	f000 fb81 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800735e:	4b48      	ldr	r3, [pc, #288]	@ (8007480 <plotter_begin+0x330>)
 8007360:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	f7f9 fbf4 	bl	8000b54 <__aeabi_d2f>
 800736c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800736e:	4b44      	ldr	r3, [pc, #272]	@ (8007480 <plotter_begin+0x330>)
 8007370:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007374:	4610      	mov	r0, r2
 8007376:	4619      	mov	r1, r3
 8007378:	f7f9 fbec 	bl	8000b54 <__aeabi_d2f>
 800737c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8007386:	4b3e      	ldr	r3, [pc, #248]	@ (8007480 <plotter_begin+0x330>)
 8007388:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	f7f9 fbe0 	bl	8000b54 <__aeabi_d2f>
 8007394:	4603      	mov	r3, r0
 8007396:	ee02 3a90 	vmov	s5, r3
 800739a:	eeb0 2a48 	vmov.f32	s4, s16
 800739e:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80074cc <plotter_begin+0x37c>
 80073a2:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80074cc <plotter_begin+0x37c>
 80073a6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8007498 <plotter_begin+0x348>
 80073aa:	ee00 4a10 	vmov	s0, r4
 80073ae:	4842      	ldr	r0, [pc, #264]	@ (80074b8 <plotter_begin+0x368>)
 80073b0:	f000 fbb4 	bl	8007b1c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80073b4:	2102      	movs	r1, #2
 80073b6:	4841      	ldr	r0, [pc, #260]	@ (80074bc <plotter_begin+0x36c>)
 80073b8:	f000 fb52 	bl	8007a60 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80073bc:	4b30      	ldr	r3, [pc, #192]	@ (8007480 <plotter_begin+0x330>)
 80073be:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7f9 fbc5 	bl	8000b54 <__aeabi_d2f>
 80073ca:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80073cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007480 <plotter_begin+0x330>)
 80073ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	f7f9 fbbd 	bl	8000b54 <__aeabi_d2f>
 80073da:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80073e4:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <plotter_begin+0x330>)
 80073e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80073ea:	4610      	mov	r0, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	f7f9 fbb1 	bl	8000b54 <__aeabi_d2f>
 80073f2:	4603      	mov	r3, r0
 80073f4:	ee03 3a10 	vmov	s6, r3
 80073f8:	eef0 2a48 	vmov.f32	s5, s16
 80073fc:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 80074cc <plotter_begin+0x37c>
 8007400:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80074cc <plotter_begin+0x37c>
 8007404:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007408:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8007498 <plotter_begin+0x348>
 800740c:	ee00 4a10 	vmov	s0, r4
 8007410:	482a      	ldr	r0, [pc, #168]	@ (80074bc <plotter_begin+0x36c>)
 8007412:	f000 fbae 	bl	8007b72 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8007416:	482a      	ldr	r0, [pc, #168]	@ (80074c0 <plotter_begin+0x370>)
 8007418:	f7fd f840 	bl	800449c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800741c:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <plotter_begin+0x324>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	4618      	mov	r0, r3
 8007422:	f7f9 f85d 	bl	80004e0 <__aeabi_f2d>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	f7f8 fefb 	bl	8000224 <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	4b0f      	ldr	r3, [pc, #60]	@ (8007478 <plotter_begin+0x328>)
 800743c:	f7f9 f8a8 	bl	8000590 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f7f9 fb84 	bl	8000b54 <__aeabi_d2f>
 800744c:	4603      	mov	r3, r0
 800744e:	ee00 3a90 	vmov	s1, r3
 8007452:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800745a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800745e:	4919      	ldr	r1, [pc, #100]	@ (80074c4 <plotter_begin+0x374>)
 8007460:	4819      	ldr	r0, [pc, #100]	@ (80074c8 <plotter_begin+0x378>)
 8007462:	f7fc f99f 	bl	80037a4 <QEI_init>
 8007466:	e033      	b.n	80074d0 <plotter_begin+0x380>
 8007468:	55555555 	.word	0x55555555
 800746c:	3fe55555 	.word	0x3fe55555
 8007470:	20000080 	.word	0x20000080
 8007474:	20000100 	.word	0x20000100
 8007478:	408f4000 	.word	0x408f4000
 800747c:	407f4000 	.word	0x407f4000
 8007480:	20000000 	.word	0x20000000
 8007484:	40140000 	.word	0x40140000
 8007488:	40240000 	.word	0x40240000
 800748c:	200005f0 	.word	0x200005f0
 8007490:	477fff00 	.word	0x477fff00
 8007494:	c77fff00 	.word	0xc77fff00
 8007498:	3dcccccd 	.word	0x3dcccccd
 800749c:	20000634 	.word	0x20000634
 80074a0:	20000678 	.word	0x20000678
 80074a4:	43480000 	.word	0x43480000
 80074a8:	c3480000 	.word	0xc3480000
 80074ac:	200006bc 	.word	0x200006bc
 80074b0:	20000700 	.word	0x20000700
 80074b4:	20000744 	.word	0x20000744
 80074b8:	20000788 	.word	0x20000788
 80074bc:	200007cc 	.word	0x200007cc
 80074c0:	20000810 	.word	0x20000810
 80074c4:	20001c40 	.word	0x20001c40
 80074c8:	20000444 	.word	0x20000444
 80074cc:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80074d0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80074cc <plotter_begin+0x37c>
 80074d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80074d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80074e0:	49af      	ldr	r1, [pc, #700]	@ (80077a0 <plotter_begin+0x650>)
 80074e2:	48b0      	ldr	r0, [pc, #704]	@ (80077a4 <plotter_begin+0x654>)
 80074e4:	f7fc f95e 	bl	80037a4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80074e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074f2:	2204      	movs	r2, #4
 80074f4:	49ac      	ldr	r1, [pc, #688]	@ (80077a8 <plotter_begin+0x658>)
 80074f6:	48ad      	ldr	r0, [pc, #692]	@ (80077ac <plotter_begin+0x65c>)
 80074f8:	f7f9 ff42 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80074fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4bab      	ldr	r3, [pc, #684]	@ (80077b0 <plotter_begin+0x660>)
 8007504:	2200      	movs	r2, #0
 8007506:	49a8      	ldr	r1, [pc, #672]	@ (80077a8 <plotter_begin+0x658>)
 8007508:	48aa      	ldr	r0, [pc, #680]	@ (80077b4 <plotter_begin+0x664>)
 800750a:	f7f9 ff39 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800750e:	220c      	movs	r2, #12
 8007510:	49a9      	ldr	r1, [pc, #676]	@ (80077b8 <plotter_begin+0x668>)
 8007512:	48aa      	ldr	r0, [pc, #680]	@ (80077bc <plotter_begin+0x66c>)
 8007514:	f7fb ff1a 	bl	800334c <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007518:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80077c0 <plotter_begin+0x670>
 800751c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80077c4 <plotter_begin+0x674>
 8007520:	48a2      	ldr	r0, [pc, #648]	@ (80077ac <plotter_begin+0x65c>)
 8007522:	f7f9 ff51 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007526:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 80077c0 <plotter_begin+0x670>
 800752a:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80077c4 <plotter_begin+0x674>
 800752e:	48a1      	ldr	r0, [pc, #644]	@ (80077b4 <plotter_begin+0x664>)
 8007530:	f7f9 ff4a 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8007534:	4ba4      	ldr	r3, [pc, #656]	@ (80077c8 <plotter_begin+0x678>)
 8007536:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 800753a:	4610      	mov	r0, r2
 800753c:	4619      	mov	r1, r3
 800753e:	f7f9 fb09 	bl	8000b54 <__aeabi_d2f>
 8007542:	4603      	mov	r3, r0
 8007544:	ee01 3a90 	vmov	s3, r3
 8007548:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 80077cc <plotter_begin+0x67c>
 800754c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 80077d0 <plotter_begin+0x680>
 8007550:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 80077d4 <plotter_begin+0x684>
 8007554:	48a0      	ldr	r0, [pc, #640]	@ (80077d8 <plotter_begin+0x688>)
 8007556:	f7f9 fe2c 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800755a:	4b9b      	ldr	r3, [pc, #620]	@ (80077c8 <plotter_begin+0x678>)
 800755c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8007560:	4610      	mov	r0, r2
 8007562:	4619      	mov	r1, r3
 8007564:	f7f9 faf6 	bl	8000b54 <__aeabi_d2f>
 8007568:	4603      	mov	r3, r0
 800756a:	ee01 3a90 	vmov	s3, r3
 800756e:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 80077c0 <plotter_begin+0x670>
 8007572:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 80077dc <plotter_begin+0x68c>
 8007576:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80077e0 <plotter_begin+0x690>
 800757a:	489a      	ldr	r0, [pc, #616]	@ (80077e4 <plotter_begin+0x694>)
 800757c:	f7f9 fe19 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 1, 1e-10, 1,
			ZGX45RGG_150RPM_Constant.qd_max);
 8007580:	4b99      	ldr	r3, [pc, #612]	@ (80077e8 <plotter_begin+0x698>)
 8007582:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 1, 1e-10, 1,
 8007586:	4610      	mov	r0, r2
 8007588:	4619      	mov	r1, r3
 800758a:	f7f9 fae3 	bl	8000b54 <__aeabi_d2f>
 800758e:	4603      	mov	r3, r0
 8007590:	ee01 3a90 	vmov	s3, r3
 8007594:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8007598:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 80077d0 <plotter_begin+0x680>
 800759c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80075a0:	4892      	ldr	r0, [pc, #584]	@ (80077ec <plotter_begin+0x69c>)
 80075a2:	f7f9 fe06 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
			ZGX45RGG_150RPM_Constant.U_max);
 80075a6:	4b90      	ldr	r3, [pc, #576]	@ (80077e8 <plotter_begin+0x698>)
 80075a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
 80075ac:	4610      	mov	r0, r2
 80075ae:	4619      	mov	r1, r3
 80075b0:	f7f9 fad0 	bl	8000b54 <__aeabi_d2f>
 80075b4:	4603      	mov	r3, r0
 80075b6:	ee01 3a90 	vmov	s3, r3
 80075ba:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 80077f0 <plotter_begin+0x6a0>
 80075be:	eddf 0a88 	vldr	s1, [pc, #544]	@ 80077e0 <plotter_begin+0x690>
 80075c2:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 80077f4 <plotter_begin+0x6a4>
 80075c6:	488c      	ldr	r0, [pc, #560]	@ (80077f8 <plotter_begin+0x6a8>)
 80075c8:	f7f9 fdf3 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80075cc:	4986      	ldr	r1, [pc, #536]	@ (80077e8 <plotter_begin+0x698>)
 80075ce:	488b      	ldr	r0, [pc, #556]	@ (80077fc <plotter_begin+0x6ac>)
 80075d0:	f7f9 ffd4 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80075d4:	497c      	ldr	r1, [pc, #496]	@ (80077c8 <plotter_begin+0x678>)
 80075d6:	488a      	ldr	r0, [pc, #552]	@ (8007800 <plotter_begin+0x6b0>)
 80075d8:	f7fa f94e 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80075dc:	4a89      	ldr	r2, [pc, #548]	@ (8007804 <plotter_begin+0x6b4>)
 80075de:	4982      	ldr	r1, [pc, #520]	@ (80077e8 <plotter_begin+0x698>)
 80075e0:	4889      	ldr	r0, [pc, #548]	@ (8007808 <plotter_begin+0x6b8>)
 80075e2:	f7fa f85a 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80075e6:	4a87      	ldr	r2, [pc, #540]	@ (8007804 <plotter_begin+0x6b4>)
 80075e8:	4977      	ldr	r1, [pc, #476]	@ (80077c8 <plotter_begin+0x678>)
 80075ea:	4888      	ldr	r0, [pc, #544]	@ (800780c <plotter_begin+0x6bc>)
 80075ec:	f7fa f9d3 	bl	8001996 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80075f0:	2302      	movs	r3, #2
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8007810 <plotter_begin+0x6c0>
 80075f8:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8007814 <plotter_begin+0x6c4>
 80075fc:	2364      	movs	r3, #100	@ 0x64
 80075fe:	4a86      	ldr	r2, [pc, #536]	@ (8007818 <plotter_begin+0x6c8>)
 8007600:	4986      	ldr	r1, [pc, #536]	@ (800781c <plotter_begin+0x6cc>)
 8007602:	4887      	ldr	r0, [pc, #540]	@ (8007820 <plotter_begin+0x6d0>)
 8007604:	f7f9 fc8c 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8007608:	2105      	movs	r1, #5
 800760a:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8007824 <plotter_begin+0x6d4>
 800760e:	4884      	ldr	r0, [pc, #528]	@ (8007820 <plotter_begin+0x6d0>)
 8007610:	f7f9 fd38 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8007614:	4882      	ldr	r0, [pc, #520]	@ (8007820 <plotter_begin+0x6d0>)
 8007616:	f7f9 fcdb 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800761a:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8007828 <plotter_begin+0x6d8>
 800761e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8007622:	211f      	movs	r1, #31
 8007624:	4881      	ldr	r0, [pc, #516]	@ (800782c <plotter_begin+0x6dc>)
 8007626:	f7fa fa7d 	bl	8001b24 <FIR_init>
	FIR_init(&acceleration_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800762a:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8007828 <plotter_begin+0x6d8>
 800762e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8007632:	211f      	movs	r1, #31
 8007634:	487e      	ldr	r0, [pc, #504]	@ (8007830 <plotter_begin+0x6e0>)
 8007636:	f7fa fa75 	bl	8001b24 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800763a:	4b63      	ldr	r3, [pc, #396]	@ (80077c8 <plotter_begin+0x678>)
 800763c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007640:	4610      	mov	r0, r2
 8007642:	4619      	mov	r1, r3
 8007644:	f7f9 fa86 	bl	8000b54 <__aeabi_d2f>
 8007648:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800764a:	4b5f      	ldr	r3, [pc, #380]	@ (80077c8 <plotter_begin+0x678>)
 800764c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007650:	4610      	mov	r0, r2
 8007652:	4619      	mov	r1, r3
 8007654:	f7f9 fa7e 	bl	8000b54 <__aeabi_d2f>
 8007658:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800765a:	4b5b      	ldr	r3, [pc, #364]	@ (80077c8 <plotter_begin+0x678>)
 800765c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	f7f9 fa76 	bl	8000b54 <__aeabi_d2f>
 8007668:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800766a:	4b57      	ldr	r3, [pc, #348]	@ (80077c8 <plotter_begin+0x678>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
 8007674:	f7f9 fa6e 	bl	8000b54 <__aeabi_d2f>
 8007678:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800767a:	4b53      	ldr	r3, [pc, #332]	@ (80077c8 <plotter_begin+0x678>)
 800767c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f7f9 fa66 	bl	8000b54 <__aeabi_d2f>
 8007688:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800768a:	4b4f      	ldr	r3, [pc, #316]	@ (80077c8 <plotter_begin+0x678>)
 800768c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007690:	4610      	mov	r0, r2
 8007692:	4619      	mov	r1, r3
 8007694:	f7f9 fa5e 	bl	8000b54 <__aeabi_d2f>
 8007698:	4603      	mov	r3, r0
 800769a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800769e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80076a2:	ee03 3a10 	vmov	s6, r3
 80076a6:	ee02 9a90 	vmov	s5, r9
 80076aa:	ee02 8a10 	vmov	s4, r8
 80076ae:	ee01 6a90 	vmov	s3, r6
 80076b2:	ee01 5a10 	vmov	s2, r5
 80076b6:	ee00 4a90 	vmov	s1, r4
 80076ba:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8007834 <plotter_begin+0x6e4>
 80076be:	485e      	ldr	r0, [pc, #376]	@ (8007838 <plotter_begin+0x6e8>)
 80076c0:	f7fa fc30 	bl	8001f24 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80076c4:	4b48      	ldr	r3, [pc, #288]	@ (80077e8 <plotter_begin+0x698>)
 80076c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f7f9 fa41 	bl	8000b54 <__aeabi_d2f>
 80076d2:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 80076d4:	4b44      	ldr	r3, [pc, #272]	@ (80077e8 <plotter_begin+0x698>)
 80076d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80076da:	4610      	mov	r0, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f7f9 fa39 	bl	8000b54 <__aeabi_d2f>
 80076e2:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 80076e4:	4b40      	ldr	r3, [pc, #256]	@ (80077e8 <plotter_begin+0x698>)
 80076e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	f7f9 fa31 	bl	8000b54 <__aeabi_d2f>
 80076f2:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 80076f4:	4b3c      	ldr	r3, [pc, #240]	@ (80077e8 <plotter_begin+0x698>)
 80076f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80076fa:	a327      	add	r3, pc, #156	@ (adr r3, 8007798 <plotter_begin+0x648>)
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f8 ff46 	bl	8000590 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007708:	4610      	mov	r0, r2
 800770a:	4619      	mov	r1, r3
 800770c:	f7f9 fa22 	bl	8000b54 <__aeabi_d2f>
 8007710:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 8007712:	4b35      	ldr	r3, [pc, #212]	@ (80077e8 <plotter_begin+0x698>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007718:	4610      	mov	r0, r2
 800771a:	4619      	mov	r1, r3
 800771c:	f7f9 fa1a 	bl	8000b54 <__aeabi_d2f>
 8007720:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <plotter_begin+0x698>)
 8007724:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007728:	4610      	mov	r0, r2
 800772a:	4619      	mov	r1, r3
 800772c:	f7f9 fa12 	bl	8000b54 <__aeabi_d2f>
 8007730:	4603      	mov	r3, r0
 8007732:	4942      	ldr	r1, [pc, #264]	@ (800783c <plotter_begin+0x6ec>)
 8007734:	4842      	ldr	r0, [pc, #264]	@ (8007840 <plotter_begin+0x6f0>)
 8007736:	ed9f 3a3f 	vldr	s6, [pc, #252]	@ 8007834 <plotter_begin+0x6e4>
 800773a:	ee02 3a90 	vmov	s5, r3
 800773e:	ee02 9a10 	vmov	s4, r9
 8007742:	ee01 8a90 	vmov	s3, r8
 8007746:	ee01 6a10 	vmov	s2, r6
 800774a:	ee00 5a90 	vmov	s1, r5
 800774e:	ee00 4a10 	vmov	s0, r4
 8007752:	f7fb fd93 	bl	800327c <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8007756:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007844 <plotter_begin+0x6f4>
 800775a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800775e:	4a37      	ldr	r2, [pc, #220]	@ (800783c <plotter_begin+0x6ec>)
 8007760:	4937      	ldr	r1, [pc, #220]	@ (8007840 <plotter_begin+0x6f0>)
 8007762:	4839      	ldr	r0, [pc, #228]	@ (8007848 <plotter_begin+0x6f8>)
 8007764:	f7fd faf6 	bl	8004d54 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8007768:	23c8      	movs	r3, #200	@ 0xc8
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	2315      	movs	r3, #21
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	4b36      	ldr	r3, [pc, #216]	@ (800784c <plotter_begin+0x6fc>)
 8007772:	4a37      	ldr	r2, [pc, #220]	@ (8007850 <plotter_begin+0x700>)
 8007774:	4937      	ldr	r1, [pc, #220]	@ (8007854 <plotter_begin+0x704>)
 8007776:	4838      	ldr	r0, [pc, #224]	@ (8007858 <plotter_begin+0x708>)
 8007778:	f7fa fb6c 	bl	8001e54 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800777c:	4837      	ldr	r0, [pc, #220]	@ (800785c <plotter_begin+0x70c>)
 800777e:	f004 fdf5 	bl	800c36c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8007782:	f000 f86d 	bl	8007860 <plotter_reset>
}
 8007786:	bf00      	nop
 8007788:	3704      	adds	r7, #4
 800778a:	46bd      	mov	sp, r7
 800778c:	ecbd 8b02 	vpop	{d8}
 8007790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007794:	f3af 8000 	nop.w
 8007798:	9999999a 	.word	0x9999999a
 800779c:	40019999 	.word	0x40019999
 80077a0:	20001b74 	.word	0x20001b74
 80077a4:	200004a0 	.word	0x200004a0
 80077a8:	20001d0c 	.word	0x20001d0c
 80077ac:	200003ac 	.word	0x200003ac
 80077b0:	48000800 	.word	0x48000800
 80077b4:	200003f8 	.word	0x200003f8
 80077b8:	20001910 	.word	0x20001910
 80077bc:	200005b4 	.word	0x200005b4
 80077c0:	00000000 	.word	0x00000000
 80077c4:	44fa0000 	.word	0x44fa0000
 80077c8:	20000080 	.word	0x20000080
 80077cc:	42f00000 	.word	0x42f00000
 80077d0:	2edbe6ff 	.word	0x2edbe6ff
 80077d4:	42960000 	.word	0x42960000
 80077d8:	200004fc 	.word	0x200004fc
 80077dc:	3727c5ac 	.word	0x3727c5ac
 80077e0:	43160000 	.word	0x43160000
 80077e4:	20000524 	.word	0x20000524
 80077e8:	20000000 	.word	0x20000000
 80077ec:	2000054c 	.word	0x2000054c
 80077f0:	42a00000 	.word	0x42a00000
 80077f4:	45fa0000 	.word	0x45fa0000
 80077f8:	20000574 	.word	0x20000574
 80077fc:	200005a8 	.word	0x200005a8
 8007800:	2000059c 	.word	0x2000059c
 8007804:	20000100 	.word	0x20000100
 8007808:	200005ac 	.word	0x200005ac
 800780c:	200005a0 	.word	0x200005a0
 8007810:	457ff000 	.word	0x457ff000
 8007814:	40533333 	.word	0x40533333
 8007818:	20000a80 	.word	0x20000a80
 800781c:	200001b4 	.word	0x200001b4
 8007820:	200005cc 	.word	0x200005cc
 8007824:	45000000 	.word	0x45000000
 8007828:	447a0000 	.word	0x447a0000
 800782c:	20000a68 	.word	0x20000a68
 8007830:	20000a74 	.word	0x20000a74
 8007834:	3a83126f 	.word	0x3a83126f
 8007838:	200011b0 	.word	0x200011b0
 800783c:	200018dc 	.word	0x200018dc
 8007840:	2000189c 	.word	0x2000189c
 8007844:	3d4ccccd 	.word	0x3d4ccccd
 8007848:	2000151c 	.word	0x2000151c
 800784c:	20001020 	.word	0x20001020
 8007850:	20001dd8 	.word	0x20001dd8
 8007854:	20001f70 	.word	0x20001f70
 8007858:	20000b48 	.word	0x20000b48
 800785c:	200019dc 	.word	0x200019dc

08007860 <plotter_reset>:

void plotter_reset() {
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8007864:	4819      	ldr	r0, [pc, #100]	@ (80078cc <plotter_reset+0x6c>)
 8007866:	f7fc fa1f 	bl	8003ca8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 800786a:	4818      	ldr	r0, [pc, #96]	@ (80078cc <plotter_reset+0x6c>)
 800786c:	f7fc fa1c 	bl	8003ca8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8007870:	4b16      	ldr	r3, [pc, #88]	@ (80078cc <plotter_reset+0x6c>)
 8007872:	2200      	movs	r2, #0
 8007874:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8007876:	4b15      	ldr	r3, [pc, #84]	@ (80078cc <plotter_reset+0x6c>)
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800787e:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <plotter_reset+0x6c>)
 8007880:	2200      	movs	r2, #0
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <plotter_reset+0x6c>)
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 800788c:	4b0f      	ldr	r3, [pc, #60]	@ (80078cc <plotter_reset+0x6c>)
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8007894:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <plotter_reset+0x6c>)
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 800789c:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <plotter_reset+0x70>)
 800789e:	2200      	movs	r2, #0
 80078a0:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <plotter_reset+0x70>)
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80078aa:	4b09      	ldr	r3, [pc, #36]	@ (80078d0 <plotter_reset+0x70>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80078b0:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <plotter_reset+0x70>)
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80078b8:	4b05      	ldr	r3, [pc, #20]	@ (80078d0 <plotter_reset+0x70>)
 80078ba:	f04f 0200 	mov.w	r2, #0
 80078be:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80078c0:	4b03      	ldr	r3, [pc, #12]	@ (80078d0 <plotter_reset+0x70>)
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80078c8:	bf00      	nop
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000444 	.word	0x20000444
 80078d0:	200004a0 	.word	0x200004a0

080078d4 <plotter_update_sensors>:

void plotter_update_sensors() {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 80078d8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80079e0 <plotter_update_sensors+0x10c>
 80078dc:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80079e4 <plotter_update_sensors+0x110>
 80078e0:	2106      	movs	r1, #6
 80078e2:	4841      	ldr	r0, [pc, #260]	@ (80079e8 <plotter_update_sensors+0x114>)
 80078e4:	f7f9 fbf8 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80078e8:	eef0 7a40 	vmov.f32	s15, s0
 80078ec:	4b3f      	ldr	r3, [pc, #252]	@ (80079ec <plotter_update_sensors+0x118>)
 80078ee:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 80078f2:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80079e0 <plotter_update_sensors+0x10c>
 80078f6:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80079e4 <plotter_update_sensors+0x110>
 80078fa:	2107      	movs	r1, #7
 80078fc:	483a      	ldr	r0, [pc, #232]	@ (80079e8 <plotter_update_sensors+0x114>)
 80078fe:	f7f9 fbeb 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8007902:	eef0 7a40 	vmov.f32	s15, s0
 8007906:	4b3a      	ldr	r3, [pc, #232]	@ (80079f0 <plotter_update_sensors+0x11c>)
 8007908:	edc3 7a00 	vstr	s15, [r3]

    b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 800790c:	2180      	movs	r1, #128	@ 0x80
 800790e:	4839      	ldr	r0, [pc, #228]	@ (80079f4 <plotter_update_sensors+0x120>)
 8007910:	f003 fbc6 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	4b35      	ldr	r3, [pc, #212]	@ (80079f8 <plotter_update_sensors+0x124>)
 8007924:	601a      	str	r2, [r3, #0]
    b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800792a:	4834      	ldr	r0, [pc, #208]	@ (80079fc <plotter_update_sensors+0x128>)
 800792c:	f003 fbb8 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	4b30      	ldr	r3, [pc, #192]	@ (8007a00 <plotter_update_sensors+0x12c>)
 8007940:	601a      	str	r2, [r3, #0]
    b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8007942:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007946:	482d      	ldr	r0, [pc, #180]	@ (80079fc <plotter_update_sensors+0x128>)
 8007948:	f003 fbaa 	bl	800b0a0 <HAL_GPIO_ReadPin>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a04 <plotter_update_sensors+0x130>)
 800795c:	601a      	str	r2, [r3, #0]
    b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800795e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007962:	4826      	ldr	r0, [pc, #152]	@ (80079fc <plotter_update_sensors+0x128>)
 8007964:	f003 fb9c 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	4b24      	ldr	r3, [pc, #144]	@ (8007a08 <plotter_update_sensors+0x134>)
 8007978:	601a      	str	r2, [r3, #0]

    up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 800797a:	2104      	movs	r1, #4
 800797c:	481d      	ldr	r0, [pc, #116]	@ (80079f4 <plotter_update_sensors+0x120>)
 800797e:	f003 fb8f 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	4b21      	ldr	r3, [pc, #132]	@ (8007a0c <plotter_update_sensors+0x138>)
 8007988:	601a      	str	r2, [r3, #0]
    low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 800798a:	2102      	movs	r1, #2
 800798c:	4819      	ldr	r0, [pc, #100]	@ (80079f4 <plotter_update_sensors+0x120>)
 800798e:	f003 fb87 	bl	800b0a0 <HAL_GPIO_ReadPin>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	4b1e      	ldr	r3, [pc, #120]	@ (8007a10 <plotter_update_sensors+0x13c>)
 8007998:	601a      	str	r2, [r3, #0]

    extern bool homing_active;
    if (!homing_active) {
 800799a:	4b1e      	ldr	r3, [pc, #120]	@ (8007a14 <plotter_update_sensors+0x140>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f083 0301 	eor.w	r3, r3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d018      	beq.n	80079da <plotter_update_sensors+0x106>
        extern volatile bool up_photo, low_photo;
        up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80079a8:	2101      	movs	r1, #1
 80079aa:	4812      	ldr	r0, [pc, #72]	@ (80079f4 <plotter_update_sensors+0x120>)
 80079ac:	f003 fb78 	bl	800b0a0 <HAL_GPIO_ReadPin>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	4b16      	ldr	r3, [pc, #88]	@ (8007a18 <plotter_update_sensors+0x144>)
 80079be:	701a      	strb	r2, [r3, #0]
        low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80079c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80079c4:	480b      	ldr	r0, [pc, #44]	@ (80079f4 <plotter_update_sensors+0x120>)
 80079c6:	f003 fb6b 	bl	800b0a0 <HAL_GPIO_ReadPin>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bf14      	ite	ne
 80079d0:	2301      	movne	r3, #1
 80079d2:	2300      	moveq	r3, #0
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <plotter_update_sensors+0x148>)
 80079d8:	701a      	strb	r2, [r3, #0]
    }
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	42480000 	.word	0x42480000
 80079e4:	c2480000 	.word	0xc2480000
 80079e8:	200005cc 	.word	0x200005cc
 80079ec:	200018ec 	.word	0x200018ec
 80079f0:	200018f0 	.word	0x200018f0
 80079f4:	48000400 	.word	0x48000400
 80079f8:	200018fc 	.word	0x200018fc
 80079fc:	48000800 	.word	0x48000800
 8007a00:	20001900 	.word	0x20001900
 8007a04:	20001904 	.word	0x20001904
 8007a08:	20001908 	.word	0x20001908
 8007a0c:	200018f4 	.word	0x200018f4
 8007a10:	200018f8 	.word	0x200018f8
 8007a14:	20000363 	.word	0x20000363
 8007a18:	20000360 	.word	0x20000360
 8007a1c:	20000361 	.word	0x20000361

08007a20 <plotter_pen_up>:

void plotter_pen_up() {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8007a24:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8007a28:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007a38 <plotter_pen_up+0x18>
 8007a2c:	4803      	ldr	r0, [pc, #12]	@ (8007a3c <plotter_pen_up+0x1c>)
 8007a2e:	f7fb fcaf 	bl	8003390 <PWM_write_duty>
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	42480000 	.word	0x42480000
 8007a3c:	200005b4 	.word	0x200005b4

08007a40 <plotter_pen_down>:

void plotter_pen_down() {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8007a44:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8007a48:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007a58 <plotter_pen_down+0x18>
 8007a4c:	4803      	ldr	r0, [pc, #12]	@ (8007a5c <plotter_pen_down+0x1c>)
 8007a4e:	f7fb fc9f 	bl	8003390 <PWM_write_duty>
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	42480000 	.word	0x42480000
 8007a5c:	200005b4 	.word	0x200005b4

08007a60 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007a78:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007a80:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b14 <SIGNAL_init+0xb4>)
 8007aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007aae:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d828      	bhi.n	8007b08 <SIGNAL_init+0xa8>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <SIGNAL_init+0x5c>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b07 	.word	0x08007b07
 8007ac0:	08007acd 	.word	0x08007acd
 8007ac4:	08007aeb 	.word	0x08007aeb
 8007ac8:	08007af5 	.word	0x08007af5
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007ad8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a0e      	ldr	r2, [pc, #56]	@ (8007b18 <SIGNAL_init+0xb8>)
 8007ade:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007ae6:	621a      	str	r2, [r3, #32]
            break;
 8007ae8:	e00e      	b.n	8007b08 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8007af0:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8007af2:	e009      	b.n	8007b08 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007b02:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8007b04:	e000      	b.n	8007b08 <SIGNAL_init+0xa8>
            break;
 8007b06:	bf00      	nop
    }
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	bf800000 	.word	0xbf800000
 8007b18:	41200000 	.word	0x41200000

08007b1c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	@ 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	61f8      	str	r0, [r7, #28]
 8007b24:	ed87 0a06 	vstr	s0, [r7, #24]
 8007b28:	edc7 0a05 	vstr	s1, [r7, #20]
 8007b2c:	ed87 1a04 	vstr	s2, [r7, #16]
 8007b30:	edc7 1a03 	vstr	s3, [r7, #12]
 8007b34:	ed87 2a02 	vstr	s4, [r7, #8]
 8007b38:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007b66:	bf00      	nop
 8007b68:	3724      	adds	r7, #36	@ 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8007b72:	b480      	push	{r7}
 8007b74:	b089      	sub	sp, #36	@ 0x24
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	61f8      	str	r0, [r7, #28]
 8007b7a:	ed87 0a06 	vstr	s0, [r7, #24]
 8007b7e:	edc7 0a05 	vstr	s1, [r7, #20]
 8007b82:	ed87 1a04 	vstr	s2, [r7, #16]
 8007b86:	edc7 1a03 	vstr	s3, [r7, #12]
 8007b8a:	ed87 2a02 	vstr	s4, [r7, #8]
 8007b8e:	edc7 2a01 	vstr	s5, [r7, #4]
 8007b92:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007bc6:	bf00      	nop
 8007bc8:	3724      	adds	r7, #36	@ 0x24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bda:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <HAL_MspInit+0x44>)
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bde:	4a0e      	ldr	r2, [pc, #56]	@ (8007c18 <HAL_MspInit+0x44>)
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8007be6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c18 <HAL_MspInit+0x44>)
 8007be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bf2:	4b09      	ldr	r3, [pc, #36]	@ (8007c18 <HAL_MspInit+0x44>)
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf6:	4a08      	ldr	r2, [pc, #32]	@ (8007c18 <HAL_MspInit+0x44>)
 8007bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bfe:	4b06      	ldr	r3, [pc, #24]	@ (8007c18 <HAL_MspInit+0x44>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007c0a:	f003 fb4f 	bl	800b2ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40021000 	.word	0x40021000

08007c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <NMI_Handler+0x4>

08007c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <HardFault_Handler+0x4>

08007c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <MemManage_Handler+0x4>

08007c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <BusFault_Handler+0x4>

08007c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <UsageFault_Handler+0x4>

08007c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c48:	bf00      	nop
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c52:	b480      	push	{r7}
 8007c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c56:	bf00      	nop
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c72:	f000 ffbb 	bl	8008bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8007c7e:	2001      	movs	r0, #1
 8007c80:	f003 fa58 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007c84:	bf00      	nop
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f003 fa51 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007c92:	bf00      	nop
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007c9c:	4802      	ldr	r0, [pc, #8]	@ (8007ca8 <DMA1_Channel1_IRQHandler+0x10>)
 8007c9e:	f002 ff2e 	bl	800aafe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000220 	.word	0x20000220

08007cac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007cb0:	4802      	ldr	r0, [pc, #8]	@ (8007cbc <DMA1_Channel2_IRQHandler+0x10>)
 8007cb2:	f002 ff24 	bl	800aafe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007cb6:	bf00      	nop
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200020fc 	.word	0x200020fc

08007cc0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007cc4:	4802      	ldr	r0, [pc, #8]	@ (8007cd0 <DMA1_Channel3_IRQHandler+0x10>)
 8007cc6:	f002 ff1a 	bl	800aafe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007cca:	bf00      	nop
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	2000215c 	.word	0x2000215c

08007cd4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8007cd8:	4802      	ldr	r0, [pc, #8]	@ (8007ce4 <DMA1_Channel4_IRQHandler+0x10>)
 8007cda:	f002 ff10 	bl	800aafe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007cde:	bf00      	nop
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000203c 	.word	0x2000203c

08007ce8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8007cec:	4802      	ldr	r0, [pc, #8]	@ (8007cf8 <DMA1_Channel5_IRQHandler+0x10>)
 8007cee:	f002 ff06 	bl	800aafe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007cf2:	bf00      	nop
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000209c 	.word	0x2000209c

08007cfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8007d00:	2040      	movs	r0, #64	@ 0x40
 8007d02:	f003 fa17 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8007d06:	2080      	movs	r0, #128	@ 0x80
 8007d08:	f003 fa14 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007d0c:	bf00      	nop
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d14:	4803      	ldr	r0, [pc, #12]	@ (8007d24 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007d16:	f004 ff4f 	bl	800cbb8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8007d1a:	4803      	ldr	r0, [pc, #12]	@ (8007d28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8007d1c:	f004 ff4c 	bl	800cbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20001910 	.word	0x20001910
 8007d28:	20001dd8 	.word	0x20001dd8

08007d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007d30:	4802      	ldr	r0, [pc, #8]	@ (8007d3c <TIM2_IRQHandler+0x10>)
 8007d32:	f004 ff41 	bl	800cbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200019dc 	.word	0x200019dc

08007d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d44:	4802      	ldr	r0, [pc, #8]	@ (8007d50 <TIM3_IRQHandler+0x10>)
 8007d46:	f004 ff37 	bl	800cbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20001aa8 	.word	0x20001aa8

08007d54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007d58:	4802      	ldr	r0, [pc, #8]	@ (8007d64 <TIM4_IRQHandler+0x10>)
 8007d5a:	f004 ff2d 	bl	800cbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20001b74 	.word	0x20001b74

08007d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007d6c:	4802      	ldr	r0, [pc, #8]	@ (8007d78 <USART2_IRQHandler+0x10>)
 8007d6e:	f006 fc77 	bl	800e660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20001f70 	.word	0x20001f70

08007d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8007d80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007d84:	f003 f9d6 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8007d88:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007d8c:	f003 f9d2 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8007d90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007d94:	f003 f9ce 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007d98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007d9c:	f003 f9ca 	bl	800b134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007da0:	bf00      	nop
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007da8:	4802      	ldr	r0, [pc, #8]	@ (8007db4 <LPUART1_IRQHandler+0x10>)
 8007daa:	f006 fc59 	bl	800e660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20001ea4 	.word	0x20001ea4

08007db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007dc0:	4a14      	ldr	r2, [pc, #80]	@ (8007e14 <_sbrk+0x5c>)
 8007dc2:	4b15      	ldr	r3, [pc, #84]	@ (8007e18 <_sbrk+0x60>)
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007dcc:	4b13      	ldr	r3, [pc, #76]	@ (8007e1c <_sbrk+0x64>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007dd4:	4b11      	ldr	r3, [pc, #68]	@ (8007e1c <_sbrk+0x64>)
 8007dd6:	4a12      	ldr	r2, [pc, #72]	@ (8007e20 <_sbrk+0x68>)
 8007dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007dda:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <_sbrk+0x64>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4413      	add	r3, r2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d207      	bcs.n	8007df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007de8:	f008 fec8 	bl	8010b7c <__errno>
 8007dec:	4603      	mov	r3, r0
 8007dee:	220c      	movs	r2, #12
 8007df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007df2:	f04f 33ff 	mov.w	r3, #4294967295
 8007df6:	e009      	b.n	8007e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007df8:	4b08      	ldr	r3, [pc, #32]	@ (8007e1c <_sbrk+0x64>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007dfe:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <_sbrk+0x64>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	4a05      	ldr	r2, [pc, #20]	@ (8007e1c <_sbrk+0x64>)
 8007e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20020000 	.word	0x20020000
 8007e18:	00000400 	.word	0x00000400
 8007e1c:	2000190c 	.word	0x2000190c
 8007e20:	20002308 	.word	0x20002308

08007e24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007e28:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <SystemInit+0x20>)
 8007e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2e:	4a05      	ldr	r2, [pc, #20]	@ (8007e44 <SystemInit+0x20>)
 8007e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	e000ed00 	.word	0xe000ed00

08007e48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b098      	sub	sp, #96	@ 0x60
 8007e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	605a      	str	r2, [r3, #4]
 8007e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007e5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	605a      	str	r2, [r3, #4]
 8007e64:	609a      	str	r2, [r3, #8]
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	611a      	str	r2, [r3, #16]
 8007e6a:	615a      	str	r2, [r3, #20]
 8007e6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007e6e:	1d3b      	adds	r3, r7, #4
 8007e70:	2234      	movs	r2, #52	@ 0x34
 8007e72:	2100      	movs	r1, #0
 8007e74:	4618      	mov	r0, r3
 8007e76:	f008 fe69 	bl	8010b4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8007f6c <MX_TIM1_Init+0x124>)
 8007e7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007e80:	4b39      	ldr	r3, [pc, #228]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e86:	4b38      	ldr	r3, [pc, #224]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007e8c:	4b36      	ldr	r3, [pc, #216]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e94:	4b34      	ldr	r3, [pc, #208]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e9a:	4b33      	ldr	r3, [pc, #204]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ea0:	4b31      	ldr	r3, [pc, #196]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007ea6:	4830      	ldr	r0, [pc, #192]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007ea8:	f004 fad8 	bl	800c45c <HAL_TIM_PWM_Init>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8007eb2:	f7ff f947 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007ec2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4827      	ldr	r0, [pc, #156]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007eca:	f006 f8e9 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8007ed4:	f7ff f936 	bl	8007144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ed8:	2360      	movs	r3, #96	@ 0x60
 8007eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007eec:	2300      	movs	r3, #0
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007ef4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007ef8:	220c      	movs	r2, #12
 8007efa:	4619      	mov	r1, r3
 8007efc:	481a      	ldr	r0, [pc, #104]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007efe:	f004 ffd5 	bl	800ceac <HAL_TIM_PWM_ConfigChannel>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007f08:	f7ff f91c 	bl	8007144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	4807      	ldr	r0, [pc, #28]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007f4a:	f006 f93f 	bl	800e1cc <HAL_TIMEx_ConfigBreakDeadTime>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007f54:	f7ff f8f6 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007f58:	4803      	ldr	r0, [pc, #12]	@ (8007f68 <MX_TIM1_Init+0x120>)
 8007f5a:	f000 fb77 	bl	800864c <HAL_TIM_MspPostInit>

}
 8007f5e:	bf00      	nop
 8007f60:	3760      	adds	r7, #96	@ 0x60
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20001910 	.word	0x20001910
 8007f6c:	40012c00 	.word	0x40012c00

08007f70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f76:	f107 0310 	add.w	r3, r7, #16
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
 8007f80:	609a      	str	r2, [r3, #8]
 8007f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f84:	1d3b      	adds	r3, r7, #4
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	605a      	str	r2, [r3, #4]
 8007f8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8007f96:	4b1c      	ldr	r3, [pc, #112]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007f98:	22a9      	movs	r2, #169	@ 0xa9
 8007f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007fa2:	4b19      	ldr	r3, [pc, #100]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007fa4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007fa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007faa:	4b17      	ldr	r3, [pc, #92]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fb0:	4b15      	ldr	r3, [pc, #84]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007fb6:	4814      	ldr	r0, [pc, #80]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007fb8:	f004 f904 	bl	800c1c4 <HAL_TIM_Base_Init>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007fc2:	f7ff f8bf 	bl	8007144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	480d      	ldr	r0, [pc, #52]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007fd4:	f005 f87e 	bl	800d0d4 <HAL_TIM_ConfigClockSource>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007fde:	f7ff f8b1 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007fea:	1d3b      	adds	r3, r7, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4806      	ldr	r0, [pc, #24]	@ (8008008 <MX_TIM2_Init+0x98>)
 8007ff0:	f006 f856 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007ffa:	f7ff f8a3 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007ffe:	bf00      	nop
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200019dc 	.word	0x200019dc

0800800c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08c      	sub	sp, #48	@ 0x30
 8008010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008012:	f107 030c 	add.w	r3, r7, #12
 8008016:	2224      	movs	r2, #36	@ 0x24
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f008 fd96 	bl	8010b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008020:	463b      	mov	r3, r7
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	605a      	str	r2, [r3, #4]
 8008028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800802a:	4b21      	ldr	r3, [pc, #132]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 800802c:	4a21      	ldr	r2, [pc, #132]	@ (80080b4 <MX_TIM3_Init+0xa8>)
 800802e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008030:	4b1f      	ldr	r3, [pc, #124]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 8008032:	2200      	movs	r2, #0
 8008034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008036:	4b1e      	ldr	r3, [pc, #120]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 8008038:	2200      	movs	r2, #0
 800803a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800803c:	4b1c      	ldr	r3, [pc, #112]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 800803e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008044:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800804a:	4b19      	ldr	r3, [pc, #100]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 800804c:	2200      	movs	r2, #0
 800804e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008050:	2303      	movs	r3, #3
 8008052:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008058:	2301      	movs	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008064:	2300      	movs	r3, #0
 8008066:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008068:	2301      	movs	r3, #1
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800806c:	2300      	movs	r3, #0
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	4619      	mov	r1, r3
 800807a:	480d      	ldr	r0, [pc, #52]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 800807c:	f004 fc5a 	bl	800c934 <HAL_TIM_Encoder_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8008086:	f7ff f85d 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800808a:	2300      	movs	r3, #0
 800808c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800808e:	2300      	movs	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008092:	463b      	mov	r3, r7
 8008094:	4619      	mov	r1, r3
 8008096:	4806      	ldr	r0, [pc, #24]	@ (80080b0 <MX_TIM3_Init+0xa4>)
 8008098:	f006 f802 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80080a2:	f7ff f84f 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80080a6:	bf00      	nop
 80080a8:	3730      	adds	r7, #48	@ 0x30
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001aa8 	.word	0x20001aa8
 80080b4:	40000400 	.word	0x40000400

080080b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08c      	sub	sp, #48	@ 0x30
 80080bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80080be:	f107 030c 	add.w	r3, r7, #12
 80080c2:	2224      	movs	r2, #36	@ 0x24
 80080c4:	2100      	movs	r1, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f008 fd40 	bl	8010b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080cc:	463b      	mov	r3, r7
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80080d6:	4b21      	ldr	r3, [pc, #132]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080d8:	4a21      	ldr	r2, [pc, #132]	@ (8008160 <MX_TIM4_Init+0xa8>)
 80080da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80080dc:	4b1f      	ldr	r3, [pc, #124]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080de:	2200      	movs	r2, #0
 80080e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080e2:	4b1e      	ldr	r3, [pc, #120]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80080e8:	4b1c      	ldr	r3, [pc, #112]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080f0:	4b1a      	ldr	r3, [pc, #104]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080f6:	4b19      	ldr	r3, [pc, #100]	@ (800815c <MX_TIM4_Init+0xa4>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80080fc:	2303      	movs	r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008108:	2300      	movs	r3, #0
 800810a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008110:	2300      	movs	r3, #0
 8008112:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008114:	2301      	movs	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008118:	2300      	movs	r3, #0
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4619      	mov	r1, r3
 8008126:	480d      	ldr	r0, [pc, #52]	@ (800815c <MX_TIM4_Init+0xa4>)
 8008128:	f004 fc04 	bl	800c934 <HAL_TIM_Encoder_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8008132:	f7ff f807 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008136:	2300      	movs	r3, #0
 8008138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800813e:	463b      	mov	r3, r7
 8008140:	4619      	mov	r1, r3
 8008142:	4806      	ldr	r0, [pc, #24]	@ (800815c <MX_TIM4_Init+0xa4>)
 8008144:	f005 ffac 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800814e:	f7fe fff9 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8008152:	bf00      	nop
 8008154:	3730      	adds	r7, #48	@ 0x30
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20001b74 	.word	0x20001b74
 8008160:	40000800 	.word	0x40000800

08008164 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	@ 0x30
 8008168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800816a:	f107 030c 	add.w	r3, r7, #12
 800816e:	2224      	movs	r2, #36	@ 0x24
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f008 fcea 	bl	8010b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008178:	463b      	mov	r3, r7
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	605a      	str	r2, [r3, #4]
 8008180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008182:	4b21      	ldr	r3, [pc, #132]	@ (8008208 <MX_TIM5_Init+0xa4>)
 8008184:	4a21      	ldr	r2, [pc, #132]	@ (800820c <MX_TIM5_Init+0xa8>)
 8008186:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008188:	4b1f      	ldr	r3, [pc, #124]	@ (8008208 <MX_TIM5_Init+0xa4>)
 800818a:	2200      	movs	r2, #0
 800818c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800818e:	4b1e      	ldr	r3, [pc, #120]	@ (8008208 <MX_TIM5_Init+0xa4>)
 8008190:	2200      	movs	r2, #0
 8008192:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8008194:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <MX_TIM5_Init+0xa4>)
 8008196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800819a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800819c:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <MX_TIM5_Init+0xa4>)
 800819e:	2200      	movs	r2, #0
 80081a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081a2:	4b19      	ldr	r3, [pc, #100]	@ (8008208 <MX_TIM5_Init+0xa4>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80081a8:	2303      	movs	r3, #3
 80081aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80081bc:	2300      	movs	r3, #0
 80081be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80081c0:	2301      	movs	r3, #1
 80081c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80081c4:	2300      	movs	r3, #0
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	4619      	mov	r1, r3
 80081d2:	480d      	ldr	r0, [pc, #52]	@ (8008208 <MX_TIM5_Init+0xa4>)
 80081d4:	f004 fbae 	bl	800c934 <HAL_TIM_Encoder_Init>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80081de:	f7fe ffb1 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081e2:	2300      	movs	r3, #0
 80081e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80081ea:	463b      	mov	r3, r7
 80081ec:	4619      	mov	r1, r3
 80081ee:	4806      	ldr	r0, [pc, #24]	@ (8008208 <MX_TIM5_Init+0xa4>)
 80081f0:	f005 ff56 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80081fa:	f7fe ffa3 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80081fe:	bf00      	nop
 8008200:	3730      	adds	r7, #48	@ 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20001c40 	.word	0x20001c40
 800820c:	40000c00 	.word	0x40000c00

08008210 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b09c      	sub	sp, #112	@ 0x70
 8008214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008216:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	605a      	str	r2, [r3, #4]
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008230:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	609a      	str	r2, [r3, #8]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	611a      	str	r2, [r3, #16]
 8008240:	615a      	str	r2, [r3, #20]
 8008242:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008244:	1d3b      	adds	r3, r7, #4
 8008246:	2234      	movs	r2, #52	@ 0x34
 8008248:	2100      	movs	r1, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f008 fc7e 	bl	8010b4c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008250:	4b4c      	ldr	r3, [pc, #304]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008252:	4a4d      	ldr	r2, [pc, #308]	@ (8008388 <MX_TIM8_Init+0x178>)
 8008254:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008256:	4b4b      	ldr	r3, [pc, #300]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008258:	2200      	movs	r2, #0
 800825a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800825c:	4b49      	ldr	r3, [pc, #292]	@ (8008384 <MX_TIM8_Init+0x174>)
 800825e:	2200      	movs	r2, #0
 8008260:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8008262:	4b48      	ldr	r3, [pc, #288]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008268:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800826a:	4b46      	ldr	r3, [pc, #280]	@ (8008384 <MX_TIM8_Init+0x174>)
 800826c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008270:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008272:	4b44      	ldr	r3, [pc, #272]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008274:	2200      	movs	r2, #0
 8008276:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008278:	4b42      	ldr	r3, [pc, #264]	@ (8008384 <MX_TIM8_Init+0x174>)
 800827a:	2200      	movs	r2, #0
 800827c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800827e:	4841      	ldr	r0, [pc, #260]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008280:	f003 ffa0 	bl	800c1c4 <HAL_TIM_Base_Init>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800828a:	f7fe ff5b 	bl	8007144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800828e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008292:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008294:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008298:	4619      	mov	r1, r3
 800829a:	483a      	ldr	r0, [pc, #232]	@ (8008384 <MX_TIM8_Init+0x174>)
 800829c:	f004 ff1a 	bl	800d0d4 <HAL_TIM_ConfigClockSource>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80082a6:	f7fe ff4d 	bl	8007144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80082aa:	4836      	ldr	r0, [pc, #216]	@ (8008384 <MX_TIM8_Init+0x174>)
 80082ac:	f004 f8d6 	bl	800c45c <HAL_TIM_PWM_Init>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80082b6:	f7fe ff45 	bl	8007144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082ba:	2300      	movs	r3, #0
 80082bc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80082be:	2300      	movs	r3, #0
 80082c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80082c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80082ca:	4619      	mov	r1, r3
 80082cc:	482d      	ldr	r0, [pc, #180]	@ (8008384 <MX_TIM8_Init+0x174>)
 80082ce:	f005 fee7 	bl	800e0a0 <HAL_TIMEx_MasterConfigSynchronization>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80082d8:	f7fe ff34 	bl	8007144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082dc:	2360      	movs	r3, #96	@ 0x60
 80082de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082e4:	2300      	movs	r3, #0
 80082e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80082e8:	2300      	movs	r3, #0
 80082ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80082f0:	2300      	movs	r3, #0
 80082f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80082f4:	2300      	movs	r3, #0
 80082f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082fc:	2200      	movs	r2, #0
 80082fe:	4619      	mov	r1, r3
 8008300:	4820      	ldr	r0, [pc, #128]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008302:	f004 fdd3 	bl	800ceac <HAL_TIM_PWM_ConfigChannel>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800830c:	f7fe ff1a 	bl	8007144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008310:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008314:	2204      	movs	r2, #4
 8008316:	4619      	mov	r1, r3
 8008318:	481a      	ldr	r0, [pc, #104]	@ (8008384 <MX_TIM8_Init+0x174>)
 800831a:	f004 fdc7 	bl	800ceac <HAL_TIM_PWM_ConfigChannel>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8008324:	f7fe ff0e 	bl	8007144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008328:	2300      	movs	r3, #0
 800832a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800832c:	2300      	movs	r3, #0
 800832e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800833c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008340:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008346:	2300      	movs	r3, #0
 8008348:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800834e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008358:	2300      	movs	r3, #0
 800835a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	4619      	mov	r1, r3
 8008364:	4807      	ldr	r0, [pc, #28]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008366:	f005 ff31 	bl	800e1cc <HAL_TIMEx_ConfigBreakDeadTime>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8008370:	f7fe fee8 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8008374:	4803      	ldr	r0, [pc, #12]	@ (8008384 <MX_TIM8_Init+0x174>)
 8008376:	f000 f969 	bl	800864c <HAL_TIM_MspPostInit>

}
 800837a:	bf00      	nop
 800837c:	3770      	adds	r7, #112	@ 0x70
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20001d0c 	.word	0x20001d0c
 8008388:	40013400 	.word	0x40013400

0800838c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008390:	4b14      	ldr	r3, [pc, #80]	@ (80083e4 <MX_TIM16_Init+0x58>)
 8008392:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <MX_TIM16_Init+0x5c>)
 8008394:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8008396:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <MX_TIM16_Init+0x58>)
 8008398:	22a9      	movs	r2, #169	@ 0xa9
 800839a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800839c:	4b11      	ldr	r3, [pc, #68]	@ (80083e4 <MX_TIM16_Init+0x58>)
 800839e:	2200      	movs	r2, #0
 80083a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80083a2:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083a4:	f240 4279 	movw	r2, #1145	@ 0x479
 80083a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083aa:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80083bc:	4809      	ldr	r0, [pc, #36]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083be:	f003 ff01 	bl	800c1c4 <HAL_TIM_Base_Init>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80083c8:	f7fe febc 	bl	8007144 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80083cc:	2108      	movs	r1, #8
 80083ce:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <MX_TIM16_Init+0x58>)
 80083d0:	f004 f9ba 	bl	800c748 <HAL_TIM_OnePulse_Init>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80083da:	f7fe feb3 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80083de:	bf00      	nop
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20001dd8 	.word	0x20001dd8
 80083e8:	40014400 	.word	0x40014400

080083ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008430 <HAL_TIM_PWM_MspInit+0x44>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d113      	bne.n	8008426 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <HAL_TIM_PWM_MspInit+0x48>)
 8008400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008402:	4a0c      	ldr	r2, [pc, #48]	@ (8008434 <HAL_TIM_PWM_MspInit+0x48>)
 8008404:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008408:	6613      	str	r3, [r2, #96]	@ 0x60
 800840a:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <HAL_TIM_PWM_MspInit+0x48>)
 800840c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800840e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	2019      	movs	r0, #25
 800841c:	f002 f957 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008420:	2019      	movs	r0, #25
 8008422:	f002 f96e 	bl	800a702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40021000 	.word	0x40021000

08008438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008448:	d114      	bne.n	8008474 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800844a:	4b22      	ldr	r3, [pc, #136]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800844e:	4a21      	ldr	r2, [pc, #132]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 8008450:	f043 0301 	orr.w	r3, r3, #1
 8008454:	6593      	str	r3, [r2, #88]	@ 0x58
 8008456:	4b1f      	ldr	r3, [pc, #124]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 8008458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008462:	2200      	movs	r2, #0
 8008464:	2100      	movs	r1, #0
 8008466:	201c      	movs	r0, #28
 8008468:	f002 f931 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800846c:	201c      	movs	r0, #28
 800846e:	f002 f948 	bl	800a702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8008472:	e02a      	b.n	80084ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a17      	ldr	r2, [pc, #92]	@ (80084d8 <HAL_TIM_Base_MspInit+0xa0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d10c      	bne.n	8008498 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800847e:	4b15      	ldr	r3, [pc, #84]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 8008480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008482:	4a14      	ldr	r2, [pc, #80]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 8008484:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008488:	6613      	str	r3, [r2, #96]	@ 0x60
 800848a:	4b12      	ldr	r3, [pc, #72]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 800848c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	693b      	ldr	r3, [r7, #16]
}
 8008496:	e018      	b.n	80084ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0f      	ldr	r2, [pc, #60]	@ (80084dc <HAL_TIM_Base_MspInit+0xa4>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d113      	bne.n	80084ca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80084a2:	4b0c      	ldr	r3, [pc, #48]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 80084a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a6:	4a0b      	ldr	r2, [pc, #44]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80084ae:	4b09      	ldr	r3, [pc, #36]	@ (80084d4 <HAL_TIM_Base_MspInit+0x9c>)
 80084b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	2019      	movs	r0, #25
 80084c0:	f002 f905 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80084c4:	2019      	movs	r0, #25
 80084c6:	f002 f91c 	bl	800a702 <HAL_NVIC_EnableIRQ>
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40013400 	.word	0x40013400
 80084dc:	40014400 	.word	0x40014400

080084e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	@ 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	609a      	str	r2, [r3, #8]
 80084f4:	60da      	str	r2, [r3, #12]
 80084f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a4f      	ldr	r2, [pc, #316]	@ (800863c <HAL_TIM_Encoder_MspInit+0x15c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d131      	bne.n	8008566 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008502:	4b4f      	ldr	r3, [pc, #316]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008506:	4a4e      	ldr	r2, [pc, #312]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008508:	f043 0302 	orr.w	r3, r3, #2
 800850c:	6593      	str	r3, [r2, #88]	@ 0x58
 800850e:	4b4c      	ldr	r3, [pc, #304]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	623b      	str	r3, [r7, #32]
 8008518:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800851a:	4b49      	ldr	r3, [pc, #292]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 800851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851e:	4a48      	ldr	r2, [pc, #288]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008526:	4b46      	ldr	r3, [pc, #280]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008532:	23c0      	movs	r3, #192	@ 0xc0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008536:	2302      	movs	r3, #2
 8008538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853a:	2300      	movs	r3, #0
 800853c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800853e:	2300      	movs	r3, #0
 8008540:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008542:	2302      	movs	r3, #2
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008550:	f002 fc24 	bl	800ad9c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008554:	2200      	movs	r2, #0
 8008556:	2100      	movs	r1, #0
 8008558:	201d      	movs	r0, #29
 800855a:	f002 f8b8 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800855e:	201d      	movs	r0, #29
 8008560:	f002 f8cf 	bl	800a702 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8008564:	e065      	b.n	8008632 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a36      	ldr	r2, [pc, #216]	@ (8008644 <HAL_TIM_Encoder_MspInit+0x164>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d132      	bne.n	80085d6 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008570:	4b33      	ldr	r3, [pc, #204]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008574:	4a32      	ldr	r2, [pc, #200]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008576:	f043 0304 	orr.w	r3, r3, #4
 800857a:	6593      	str	r3, [r2, #88]	@ 0x58
 800857c:	4b30      	ldr	r3, [pc, #192]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 800857e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008588:	4b2d      	ldr	r3, [pc, #180]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 800858a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800858c:	4a2c      	ldr	r2, [pc, #176]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008594:	4b2a      	ldr	r3, [pc, #168]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a6:	2302      	movs	r3, #2
 80085a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ae:	2300      	movs	r3, #0
 80085b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80085b2:	230a      	movs	r3, #10
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ba:	4619      	mov	r1, r3
 80085bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80085c0:	f002 fbec 	bl	800ad9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	201e      	movs	r0, #30
 80085ca:	f002 f880 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80085ce:	201e      	movs	r0, #30
 80085d0:	f002 f897 	bl	800a702 <HAL_NVIC_EnableIRQ>
}
 80085d4:	e02d      	b.n	8008632 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <HAL_TIM_Encoder_MspInit+0x168>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d128      	bne.n	8008632 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085e0:	4b17      	ldr	r3, [pc, #92]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 80085e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e4:	4a16      	ldr	r2, [pc, #88]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 80085e6:	f043 0308 	orr.w	r3, r3, #8
 80085ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80085ec:	4b14      	ldr	r3, [pc, #80]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 80085ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085f8:	4b11      	ldr	r3, [pc, #68]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 80085fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fc:	4a10      	ldr	r2, [pc, #64]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 80085fe:	f043 0301 	orr.w	r3, r3, #1
 8008602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008604:	4b0e      	ldr	r3, [pc, #56]	@ (8008640 <HAL_TIM_Encoder_MspInit+0x160>)
 8008606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008610:	2303      	movs	r3, #3
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008614:	2302      	movs	r3, #2
 8008616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008618:	2300      	movs	r3, #0
 800861a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861c:	2300      	movs	r3, #0
 800861e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008620:	2302      	movs	r3, #2
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008628:	4619      	mov	r1, r3
 800862a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800862e:	f002 fbb5 	bl	800ad9c <HAL_GPIO_Init>
}
 8008632:	bf00      	nop
 8008634:	3738      	adds	r7, #56	@ 0x38
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40000400 	.word	0x40000400
 8008640:	40021000 	.word	0x40021000
 8008644:	40000800 	.word	0x40000800
 8008648:	40000c00 	.word	0x40000c00

0800864c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	@ 0x28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	609a      	str	r2, [r3, #8]
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a22      	ldr	r2, [pc, #136]	@ (80086f4 <HAL_TIM_MspPostInit+0xa8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d11c      	bne.n	80086a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800866e:	4b22      	ldr	r3, [pc, #136]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 8008670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008672:	4a21      	ldr	r2, [pc, #132]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 8008674:	f043 0304 	orr.w	r3, r3, #4
 8008678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800867a:	4b1f      	ldr	r3, [pc, #124]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 800867c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008686:	2308      	movs	r3, #8
 8008688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800868a:	2302      	movs	r3, #2
 800868c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008692:	2300      	movs	r3, #0
 8008694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008696:	2302      	movs	r3, #2
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800869a:	f107 0314 	add.w	r3, r7, #20
 800869e:	4619      	mov	r1, r3
 80086a0:	4816      	ldr	r0, [pc, #88]	@ (80086fc <HAL_TIM_MspPostInit+0xb0>)
 80086a2:	f002 fb7b 	bl	800ad9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80086a6:	e020      	b.n	80086ea <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a14      	ldr	r2, [pc, #80]	@ (8008700 <HAL_TIM_MspPostInit+0xb4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d11b      	bne.n	80086ea <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086b2:	4b11      	ldr	r3, [pc, #68]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 80086b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b6:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 80086b8:	f043 0304 	orr.w	r3, r3, #4
 80086bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086be:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <HAL_TIM_MspPostInit+0xac>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80086ca:	23c0      	movs	r3, #192	@ 0xc0
 80086cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ce:	2302      	movs	r3, #2
 80086d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d6:	2300      	movs	r3, #0
 80086d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80086da:	2304      	movs	r3, #4
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086de:	f107 0314 	add.w	r3, r7, #20
 80086e2:	4619      	mov	r1, r3
 80086e4:	4805      	ldr	r0, [pc, #20]	@ (80086fc <HAL_TIM_MspPostInit+0xb0>)
 80086e6:	f002 fb59 	bl	800ad9c <HAL_GPIO_Init>
}
 80086ea:	bf00      	nop
 80086ec:	3728      	adds	r7, #40	@ 0x28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40012c00 	.word	0x40012c00
 80086f8:	40021000 	.word	0x40021000
 80086fc:	48000800 	.word	0x48000800
 8008700:	40013400 	.word	0x40013400

08008704 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008708:	4b20      	ldr	r3, [pc, #128]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800870a:	4a21      	ldr	r2, [pc, #132]	@ (8008790 <MX_LPUART1_UART_Init+0x8c>)
 800870c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800870e:	4b1f      	ldr	r3, [pc, #124]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008710:	4a20      	ldr	r2, [pc, #128]	@ (8008794 <MX_LPUART1_UART_Init+0x90>)
 8008712:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008714:	4b1d      	ldr	r3, [pc, #116]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008716:	2200      	movs	r2, #0
 8008718:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800871a:	4b1c      	ldr	r3, [pc, #112]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800871c:	2200      	movs	r2, #0
 800871e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008720:	4b1a      	ldr	r3, [pc, #104]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008726:	4b19      	ldr	r3, [pc, #100]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008728:	220c      	movs	r2, #12
 800872a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800872c:	4b17      	ldr	r3, [pc, #92]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800872e:	2200      	movs	r2, #0
 8008730:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008732:	4b16      	ldr	r3, [pc, #88]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008734:	2200      	movs	r2, #0
 8008736:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008738:	4b14      	ldr	r3, [pc, #80]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800873a:	2200      	movs	r2, #0
 800873c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800873e:	4b13      	ldr	r3, [pc, #76]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008740:	2200      	movs	r2, #0
 8008742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008744:	4811      	ldr	r0, [pc, #68]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008746:	f005 fe25 	bl	800e394 <HAL_UART_Init>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8008750:	f7fe fcf8 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008754:	2100      	movs	r1, #0
 8008756:	480d      	ldr	r0, [pc, #52]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 8008758:	f007 fb82 	bl	800fe60 <HAL_UARTEx_SetTxFifoThreshold>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8008762:	f7fe fcef 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008766:	2100      	movs	r1, #0
 8008768:	4808      	ldr	r0, [pc, #32]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800876a:	f007 fbb7 	bl	800fedc <HAL_UARTEx_SetRxFifoThreshold>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8008774:	f7fe fce6 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008778:	4804      	ldr	r0, [pc, #16]	@ (800878c <MX_LPUART1_UART_Init+0x88>)
 800877a:	f007 fb38 	bl	800fdee <HAL_UARTEx_DisableFifoMode>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8008784:	f7fe fcde 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20001ea4 	.word	0x20001ea4
 8008790:	40008000 	.word	0x40008000
 8008794:	001e8480 	.word	0x001e8480

08008798 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800879c:	4b23      	ldr	r3, [pc, #140]	@ (800882c <MX_USART2_UART_Init+0x94>)
 800879e:	4a24      	ldr	r2, [pc, #144]	@ (8008830 <MX_USART2_UART_Init+0x98>)
 80087a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80087a2:	4b22      	ldr	r3, [pc, #136]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087a4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80087a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80087aa:	4b20      	ldr	r3, [pc, #128]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80087b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80087b2:	4b1e      	ldr	r3, [pc, #120]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80087b8:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80087c0:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087c2:	220c      	movs	r2, #12
 80087c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087c6:	4b19      	ldr	r3, [pc, #100]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80087cc:	4b17      	ldr	r3, [pc, #92]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087d2:	4b16      	ldr	r3, [pc, #88]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80087d8:	4b14      	ldr	r3, [pc, #80]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087da:	2200      	movs	r2, #0
 80087dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087de:	4b13      	ldr	r3, [pc, #76]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80087e4:	4811      	ldr	r0, [pc, #68]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087e6:	f005 fdd5 	bl	800e394 <HAL_UART_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80087f0:	f7fe fca8 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80087f4:	2100      	movs	r1, #0
 80087f6:	480d      	ldr	r0, [pc, #52]	@ (800882c <MX_USART2_UART_Init+0x94>)
 80087f8:	f007 fb32 	bl	800fe60 <HAL_UARTEx_SetTxFifoThreshold>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8008802:	f7fe fc9f 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008806:	2100      	movs	r1, #0
 8008808:	4808      	ldr	r0, [pc, #32]	@ (800882c <MX_USART2_UART_Init+0x94>)
 800880a:	f007 fb67 	bl	800fedc <HAL_UARTEx_SetRxFifoThreshold>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8008814:	f7fe fc96 	bl	8007144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008818:	4804      	ldr	r0, [pc, #16]	@ (800882c <MX_USART2_UART_Init+0x94>)
 800881a:	f007 fae8 	bl	800fdee <HAL_UARTEx_DisableFifoMode>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8008824:	f7fe fc8e 	bl	8007144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008828:	bf00      	nop
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20001f70 	.word	0x20001f70
 8008830:	40004400 	.word	0x40004400

08008834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b0a0      	sub	sp, #128	@ 0x80
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800883c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800884c:	f107 0318 	add.w	r3, r7, #24
 8008850:	2254      	movs	r2, #84	@ 0x54
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f008 f979 	bl	8010b4c <memset>
  if(uartHandle->Instance==LPUART1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a99      	ldr	r2, [pc, #612]	@ (8008ac4 <HAL_UART_MspInit+0x290>)
 8008860:	4293      	cmp	r3, r2
 8008862:	f040 8093 	bne.w	800898c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008866:	2320      	movs	r3, #32
 8008868:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800886a:	2300      	movs	r3, #0
 800886c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800886e:	f107 0318 	add.w	r3, r7, #24
 8008872:	4618      	mov	r0, r3
 8008874:	f003 fa58 	bl	800bd28 <HAL_RCCEx_PeriphCLKConfig>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800887e:	f7fe fc61 	bl	8007144 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008882:	4b91      	ldr	r3, [pc, #580]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 8008884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008886:	4a90      	ldr	r2, [pc, #576]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800888e:	4b8e      	ldr	r3, [pc, #568]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 8008890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800889a:	4b8b      	ldr	r3, [pc, #556]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 800889c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889e:	4a8a      	ldr	r2, [pc, #552]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80088a0:	f043 0302 	orr.w	r3, r3, #2
 80088a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088a6:	4b88      	ldr	r3, [pc, #544]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80088a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80088b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80088b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b8:	2302      	movs	r3, #2
 80088ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088c0:	2300      	movs	r3, #0
 80088c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80088c4:	2308      	movs	r3, #8
 80088c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80088cc:	4619      	mov	r1, r3
 80088ce:	487f      	ldr	r0, [pc, #508]	@ (8008acc <HAL_UART_MspInit+0x298>)
 80088d0:	f002 fa64 	bl	800ad9c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80088d4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088d6:	4a7f      	ldr	r2, [pc, #508]	@ (8008ad4 <HAL_UART_MspInit+0x2a0>)
 80088d8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80088da:	4b7d      	ldr	r3, [pc, #500]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088dc:	2222      	movs	r2, #34	@ 0x22
 80088de:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088e0:	4b7b      	ldr	r3, [pc, #492]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088e6:	4b7a      	ldr	r3, [pc, #488]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088ec:	4b78      	ldr	r3, [pc, #480]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088ee:	2280      	movs	r2, #128	@ 0x80
 80088f0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088f2:	4b77      	ldr	r3, [pc, #476]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088f8:	4b75      	ldr	r3, [pc, #468]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80088fe:	4b74      	ldr	r3, [pc, #464]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 8008900:	2200      	movs	r2, #0
 8008902:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008904:	4b72      	ldr	r3, [pc, #456]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 8008906:	2200      	movs	r2, #0
 8008908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800890a:	4871      	ldr	r0, [pc, #452]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 800890c:	f001 ff14 	bl	800a738 <HAL_DMA_Init>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8008916:	f7fe fc15 	bl	8007144 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a6c      	ldr	r2, [pc, #432]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 800891e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008922:	4a6b      	ldr	r2, [pc, #428]	@ (8008ad0 <HAL_UART_MspInit+0x29c>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8008928:	4b6b      	ldr	r3, [pc, #428]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 800892a:	4a6c      	ldr	r2, [pc, #432]	@ (8008adc <HAL_UART_MspInit+0x2a8>)
 800892c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800892e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008930:	2223      	movs	r2, #35	@ 0x23
 8008932:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008934:	4b68      	ldr	r3, [pc, #416]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008936:	2210      	movs	r2, #16
 8008938:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800893a:	4b67      	ldr	r3, [pc, #412]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 800893c:	2200      	movs	r2, #0
 800893e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008940:	4b65      	ldr	r3, [pc, #404]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008942:	2280      	movs	r2, #128	@ 0x80
 8008944:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008946:	4b64      	ldr	r3, [pc, #400]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008948:	2200      	movs	r2, #0
 800894a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800894c:	4b62      	ldr	r3, [pc, #392]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 800894e:	2200      	movs	r2, #0
 8008950:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8008952:	4b61      	ldr	r3, [pc, #388]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008954:	2200      	movs	r2, #0
 8008956:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008958:	4b5f      	ldr	r3, [pc, #380]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 800895a:	2200      	movs	r2, #0
 800895c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800895e:	485e      	ldr	r0, [pc, #376]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008960:	f001 feea 	bl	800a738 <HAL_DMA_Init>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800896a:	f7fe fbeb 	bl	8007144 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a59      	ldr	r2, [pc, #356]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008972:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008974:	4a58      	ldr	r2, [pc, #352]	@ (8008ad8 <HAL_UART_MspInit+0x2a4>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	205b      	movs	r0, #91	@ 0x5b
 8008980:	f001 fea5 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8008984:	205b      	movs	r0, #91	@ 0x5b
 8008986:	f001 febc 	bl	800a702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800898a:	e097      	b.n	8008abc <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a53      	ldr	r2, [pc, #332]	@ (8008ae0 <HAL_UART_MspInit+0x2ac>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f040 8092 	bne.w	8008abc <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008998:	2302      	movs	r3, #2
 800899a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800899c:	2300      	movs	r3, #0
 800899e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089a0:	f107 0318 	add.w	r3, r7, #24
 80089a4:	4618      	mov	r0, r3
 80089a6:	f003 f9bf 	bl	800bd28 <HAL_RCCEx_PeriphCLKConfig>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80089b0:	f7fe fbc8 	bl	8007144 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80089b4:	4b44      	ldr	r3, [pc, #272]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b8:	4a43      	ldr	r2, [pc, #268]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089be:	6593      	str	r3, [r2, #88]	@ 0x58
 80089c0:	4b41      	ldr	r3, [pc, #260]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089cc:	4b3e      	ldr	r3, [pc, #248]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d0:	4a3d      	ldr	r2, [pc, #244]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80089d8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ac8 <HAL_UART_MspInit+0x294>)
 80089da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	60bb      	str	r3, [r7, #8]
 80089e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80089e4:	230c      	movs	r3, #12
 80089e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e8:	2302      	movs	r3, #2
 80089ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f0:	2300      	movs	r3, #0
 80089f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80089f4:	2307      	movs	r3, #7
 80089f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80089fc:	4619      	mov	r1, r3
 80089fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a02:	f002 f9cb 	bl	800ad9c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008a06:	4b37      	ldr	r3, [pc, #220]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a08:	4a37      	ldr	r2, [pc, #220]	@ (8008ae8 <HAL_UART_MspInit+0x2b4>)
 8008a0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008a0c:	4b35      	ldr	r3, [pc, #212]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a0e:	221a      	movs	r2, #26
 8008a10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a12:	4b34      	ldr	r3, [pc, #208]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a18:	4b32      	ldr	r3, [pc, #200]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a20:	2280      	movs	r2, #128	@ 0x80
 8008a22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a24:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008a30:	4b2c      	ldr	r3, [pc, #176]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008a36:	4b2b      	ldr	r3, [pc, #172]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008a3c:	4829      	ldr	r0, [pc, #164]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a3e:	f001 fe7b 	bl	800a738 <HAL_DMA_Init>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8008a48:	f7fe fb7c 	bl	8007144 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a25      	ldr	r2, [pc, #148]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008a54:	4a23      	ldr	r2, [pc, #140]	@ (8008ae4 <HAL_UART_MspInit+0x2b0>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8008a5a:	4b24      	ldr	r3, [pc, #144]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a5c:	4a24      	ldr	r2, [pc, #144]	@ (8008af0 <HAL_UART_MspInit+0x2bc>)
 8008a5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008a60:	4b22      	ldr	r3, [pc, #136]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a62:	221b      	movs	r2, #27
 8008a64:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a66:	4b21      	ldr	r3, [pc, #132]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a68:	2210      	movs	r2, #16
 8008a6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a72:	4b1e      	ldr	r3, [pc, #120]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a74:	2280      	movs	r2, #128	@ 0x80
 8008a76:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a78:	4b1c      	ldr	r3, [pc, #112]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008a84:	4b19      	ldr	r3, [pc, #100]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a8a:	4b18      	ldr	r3, [pc, #96]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008a90:	4816      	ldr	r0, [pc, #88]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008a92:	f001 fe51 	bl	800a738 <HAL_DMA_Init>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8008a9c:	f7fe fb52 	bl	8007144 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a12      	ldr	r2, [pc, #72]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008aa4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008aa6:	4a11      	ldr	r2, [pc, #68]	@ (8008aec <HAL_UART_MspInit+0x2b8>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008aac:	2200      	movs	r2, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	2026      	movs	r0, #38	@ 0x26
 8008ab2:	f001 fe0c 	bl	800a6ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008ab6:	2026      	movs	r0, #38	@ 0x26
 8008ab8:	f001 fe23 	bl	800a702 <HAL_NVIC_EnableIRQ>
}
 8008abc:	bf00      	nop
 8008abe:	3780      	adds	r7, #128	@ 0x80
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40008000 	.word	0x40008000
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	48000400 	.word	0x48000400
 8008ad0:	2000203c 	.word	0x2000203c
 8008ad4:	40020044 	.word	0x40020044
 8008ad8:	2000209c 	.word	0x2000209c
 8008adc:	40020058 	.word	0x40020058
 8008ae0:	40004400 	.word	0x40004400
 8008ae4:	200020fc 	.word	0x200020fc
 8008ae8:	4002001c 	.word	0x4002001c
 8008aec:	2000215c 	.word	0x2000215c
 8008af0:	40020030 	.word	0x40020030

08008af4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8008af4:	480d      	ldr	r0, [pc, #52]	@ (8008b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008af6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8008af8:	f7ff f994 	bl	8007e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008afc:	480c      	ldr	r0, [pc, #48]	@ (8008b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8008afe:	490d      	ldr	r1, [pc, #52]	@ (8008b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b00:	4a0d      	ldr	r2, [pc, #52]	@ (8008b38 <LoopForever+0xe>)
  movs r3, #0
 8008b02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008b04:	e002      	b.n	8008b0c <LoopCopyDataInit>

08008b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b0a:	3304      	adds	r3, #4

08008b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b10:	d3f9      	bcc.n	8008b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b12:	4a0a      	ldr	r2, [pc, #40]	@ (8008b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b14:	4c0a      	ldr	r4, [pc, #40]	@ (8008b40 <LoopForever+0x16>)
  movs r3, #0
 8008b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b18:	e001      	b.n	8008b1e <LoopFillZerobss>

08008b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b1c:	3204      	adds	r2, #4

08008b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b20:	d3fb      	bcc.n	8008b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b22:	f008 f831 	bl	8010b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b26:	f7fc fae7 	bl	80050f8 <main>

08008b2a <LoopForever>:

LoopForever:
    b LoopForever
 8008b2a:	e7fe      	b.n	8008b2a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8008b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b34:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8008b38:	08013088 	.word	0x08013088
  ldr r2, =_sbss
 8008b3c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8008b40:	20002308 	.word	0x20002308

08008b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b44:	e7fe      	b.n	8008b44 <ADC1_2_IRQHandler>

08008b46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b50:	2003      	movs	r0, #3
 8008b52:	f001 fdb1 	bl	800a6b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b56:	2000      	movs	r0, #0
 8008b58:	f000 f80e 	bl	8008b78 <HAL_InitTick>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	71fb      	strb	r3, [r7, #7]
 8008b66:	e001      	b.n	8008b6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008b68:	f7ff f834 	bl	8007bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b6c:	79fb      	ldrb	r3, [r7, #7]

}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008b84:	4b16      	ldr	r3, [pc, #88]	@ (8008be0 <HAL_InitTick+0x68>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d022      	beq.n	8008bd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008b8c:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <HAL_InitTick+0x6c>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	4b13      	ldr	r3, [pc, #76]	@ (8008be0 <HAL_InitTick+0x68>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 fdbc 	bl	800a71e <HAL_SYSTICK_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10f      	bne.n	8008bcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b0f      	cmp	r3, #15
 8008bb0:	d809      	bhi.n	8008bc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	f001 fd88 	bl	800a6ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008be8 <HAL_InitTick+0x70>)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	e007      	b.n	8008bd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
 8008bca:	e004      	b.n	8008bd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	73fb      	strb	r3, [r7, #15]
 8008bd0:	e001      	b.n	8008bd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000140 	.word	0x20000140
 8008be4:	20000138 	.word	0x20000138
 8008be8:	2000013c 	.word	0x2000013c

08008bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bf0:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <HAL_IncTick+0x1c>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <HAL_IncTick+0x20>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	4a03      	ldr	r2, [pc, #12]	@ (8008c08 <HAL_IncTick+0x1c>)
 8008bfc:	6013      	str	r3, [r2, #0]
}
 8008bfe:	bf00      	nop
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	200021bc 	.word	0x200021bc
 8008c0c:	20000140 	.word	0x20000140

08008c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
  return uwTick;
 8008c14:	4b03      	ldr	r3, [pc, #12]	@ (8008c24 <HAL_GetTick+0x14>)
 8008c16:	681b      	ldr	r3, [r3, #0]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	200021bc 	.word	0x200021bc

08008c28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	609a      	str	r2, [r3, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3360      	adds	r3, #96	@ 0x60
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <LL_ADC_SetOffset+0x44>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008cc8:	bf00      	nop
 8008cca:	371c      	adds	r7, #28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	03fff000 	.word	0x03fff000

08008cd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3360      	adds	r3, #96	@ 0x60
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3360      	adds	r3, #96	@ 0x60
 8008d14:	461a      	mov	r2, r3
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3360      	adds	r3, #96	@ 0x60
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3360      	adds	r3, #96	@ 0x60
 8008d80:	461a      	mov	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	615a      	str	r2, [r3, #20]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b087      	sub	sp, #28
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3330      	adds	r3, #48	@ 0x30
 8008e02:	461a      	mov	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	4413      	add	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	211f      	movs	r1, #31
 8008e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e22:	43db      	mvns	r3, r3
 8008e24:	401a      	ands	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	0e9b      	lsrs	r3, r3, #26
 8008e2a:	f003 011f 	and.w	r1, r3, #31
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	fa01 f303 	lsl.w	r3, r1, r3
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3314      	adds	r3, #20
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	0e5b      	lsrs	r3, r3, #25
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	4413      	add	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	0d1b      	lsrs	r3, r3, #20
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2107      	movs	r1, #7
 8008e78:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	401a      	ands	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	0d1b      	lsrs	r3, r3, #20
 8008e84:	f003 031f 	and.w	r3, r3, #31
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008e94:	bf00      	nop
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	401a      	ands	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f003 0318 	and.w	r3, r3, #24
 8008ec2:	4908      	ldr	r1, [pc, #32]	@ (8008ee4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008ec4:	40d9      	lsrs	r1, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	400b      	ands	r3, r1
 8008eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	0007ffff 	.word	0x0007ffff

08008ee8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 031f 	and.w	r3, r3, #31
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6093      	str	r3, [r2, #8]
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f3c:	d101      	bne.n	8008f42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f8c:	d101      	bne.n	8008f92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008fb4:	f043 0201 	orr.w	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008fdc:	f043 0202 	orr.w	r2, r3, #2
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <LL_ADC_IsEnabled+0x18>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <LL_ADC_IsEnabled+0x1a>
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b02      	cmp	r3, #2
 8009028:	d101      	bne.n	800902e <LL_ADC_IsDisableOngoing+0x18>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <LL_ADC_IsDisableOngoing+0x1a>
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800904c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009050:	f043 0204 	orr.w	r2, r3, #4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b04      	cmp	r3, #4
 8009076:	d101      	bne.n	800907c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009078:	2301      	movs	r3, #1
 800907a:	e000      	b.n	800907e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b08      	cmp	r3, #8
 800909c:	d101      	bne.n	80090a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e1a9      	b.n	800941e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fb fb27 	bl	800472c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff ff19 	bl	8008f28 <LL_ADC_IsDeepPowerDownEnabled>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff feff 	bl	8008f04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff ff34 	bl	8008f78 <LL_ADC_IsInternalRegulatorEnabled>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d115      	bne.n	8009142 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff ff18 	bl	8008f50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009120:	4b9c      	ldr	r3, [pc, #624]	@ (8009394 <HAL_ADC_Init+0x2e4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	099b      	lsrs	r3, r3, #6
 8009126:	4a9c      	ldr	r2, [pc, #624]	@ (8009398 <HAL_ADC_Init+0x2e8>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	099b      	lsrs	r3, r3, #6
 800912e:	3301      	adds	r3, #1
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009134:	e002      	b.n	800913c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3b01      	subs	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1f9      	bne.n	8009136 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff ff16 	bl	8008f78 <LL_ADC_IsInternalRegulatorEnabled>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009156:	f043 0210 	orr.w	r2, r3, #16
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009162:	f043 0201 	orr.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff ff76 	bl	8009064 <LL_ADC_REG_IsConversionOngoing>
 8009178:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 8142 	bne.w	800940c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f040 813e 	bne.w	800940c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009194:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009198:	f043 0202 	orr.w	r2, r3, #2
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff ff23 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d141      	bne.n	8009234 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091b8:	d004      	beq.n	80091c4 <HAL_ADC_Init+0x114>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a77      	ldr	r2, [pc, #476]	@ (800939c <HAL_ADC_Init+0x2ec>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d10f      	bne.n	80091e4 <HAL_ADC_Init+0x134>
 80091c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80091c8:	f7ff ff12 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091cc:	4604      	mov	r4, r0
 80091ce:	4873      	ldr	r0, [pc, #460]	@ (800939c <HAL_ADC_Init+0x2ec>)
 80091d0:	f7ff ff0e 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091d4:	4603      	mov	r3, r0
 80091d6:	4323      	orrs	r3, r4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e012      	b.n	800920a <HAL_ADC_Init+0x15a>
 80091e4:	486e      	ldr	r0, [pc, #440]	@ (80093a0 <HAL_ADC_Init+0x2f0>)
 80091e6:	f7ff ff03 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091ea:	4604      	mov	r4, r0
 80091ec:	486d      	ldr	r0, [pc, #436]	@ (80093a4 <HAL_ADC_Init+0x2f4>)
 80091ee:	f7ff feff 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091f2:	4603      	mov	r3, r0
 80091f4:	431c      	orrs	r4, r3
 80091f6:	486c      	ldr	r0, [pc, #432]	@ (80093a8 <HAL_ADC_Init+0x2f8>)
 80091f8:	f7ff fefa 	bl	8008ff0 <LL_ADC_IsEnabled>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4323      	orrs	r3, r4
 8009200:	2b00      	cmp	r3, #0
 8009202:	bf0c      	ite	eq
 8009204:	2301      	moveq	r3, #1
 8009206:	2300      	movne	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009216:	d004      	beq.n	8009222 <HAL_ADC_Init+0x172>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a5f      	ldr	r2, [pc, #380]	@ (800939c <HAL_ADC_Init+0x2ec>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d101      	bne.n	8009226 <HAL_ADC_Init+0x176>
 8009222:	4a62      	ldr	r2, [pc, #392]	@ (80093ac <HAL_ADC_Init+0x2fc>)
 8009224:	e000      	b.n	8009228 <HAL_ADC_Init+0x178>
 8009226:	4a62      	ldr	r2, [pc, #392]	@ (80093b0 <HAL_ADC_Init+0x300>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f7ff fcfa 	bl	8008c28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7f5b      	ldrb	r3, [r3, #29]
 8009238:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800923e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009244:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800924a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009252:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009254:	4313      	orrs	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800925e:	2b01      	cmp	r3, #1
 8009260:	d106      	bne.n	8009270 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	3b01      	subs	r3, #1
 8009268:	045b      	lsls	r3, r3, #17
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4313      	orrs	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009284:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	4313      	orrs	r3, r2
 800928a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	4b48      	ldr	r3, [pc, #288]	@ (80093b4 <HAL_ADC_Init+0x304>)
 8009294:	4013      	ands	r3, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6812      	ldr	r2, [r2, #0]
 800929a:	69b9      	ldr	r1, [r7, #24]
 800929c:	430b      	orrs	r3, r1
 800929e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fee5 	bl	800908a <LL_ADC_INJ_IsConversionOngoing>
 80092c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d17f      	bne.n	80093c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d17c      	bne.n	80093c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80092d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80092da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80092dc:	4313      	orrs	r3, r2
 80092de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ea:	f023 0302 	bic.w	r3, r3, #2
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	69b9      	ldr	r1, [r7, #24]
 80092f4:	430b      	orrs	r3, r1
 80092f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800930e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009318:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800931c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6911      	ldr	r1, [r2, #16]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	430b      	orrs	r3, r1
 800932a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800932e:	e013      	b.n	8009358 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691a      	ldr	r2, [r3, #16]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800933e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009354:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800935e:	2b01      	cmp	r3, #1
 8009360:	d12a      	bne.n	80093b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800936c:	f023 0304 	bic.w	r3, r3, #4
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009378:	4311      	orrs	r1, r2
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800937e:	4311      	orrs	r1, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009384:	430a      	orrs	r2, r1
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f042 0201 	orr.w	r2, r2, #1
 8009390:	611a      	str	r2, [r3, #16]
 8009392:	e019      	b.n	80093c8 <HAL_ADC_Init+0x318>
 8009394:	20000138 	.word	0x20000138
 8009398:	053e2d63 	.word	0x053e2d63
 800939c:	50000100 	.word	0x50000100
 80093a0:	50000400 	.word	0x50000400
 80093a4:	50000500 	.word	0x50000500
 80093a8:	50000600 	.word	0x50000600
 80093ac:	50000300 	.word	0x50000300
 80093b0:	50000700 	.word	0x50000700
 80093b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0201 	bic.w	r2, r2, #1
 80093c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10c      	bne.n	80093ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d6:	f023 010f 	bic.w	r1, r3, #15
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80093e8:	e007      	b.n	80093fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 020f 	bic.w	r2, r2, #15
 80093f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093fe:	f023 0303 	bic.w	r3, r3, #3
 8009402:	f043 0201 	orr.w	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	65da      	str	r2, [r3, #92]	@ 0x5c
 800940a:	e007      	b.n	800941c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009410:	f043 0210 	orr.w	r2, r3, #16
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800941c:	7ffb      	ldrb	r3, [r7, #31]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3724      	adds	r7, #36	@ 0x24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	bf00      	nop

08009428 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800943c:	d004      	beq.n	8009448 <HAL_ADC_Start_DMA+0x20>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a5a      	ldr	r2, [pc, #360]	@ (80095ac <HAL_ADC_Start_DMA+0x184>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d101      	bne.n	800944c <HAL_ADC_Start_DMA+0x24>
 8009448:	4b59      	ldr	r3, [pc, #356]	@ (80095b0 <HAL_ADC_Start_DMA+0x188>)
 800944a:	e000      	b.n	800944e <HAL_ADC_Start_DMA+0x26>
 800944c:	4b59      	ldr	r3, [pc, #356]	@ (80095b4 <HAL_ADC_Start_DMA+0x18c>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff fd4a 	bl	8008ee8 <LL_ADC_GetMultimode>
 8009454:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fe02 	bl	8009064 <LL_ADC_REG_IsConversionOngoing>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 809b 	bne.w	800959e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_ADC_Start_DMA+0x4e>
 8009472:	2302      	movs	r3, #2
 8009474:	e096      	b.n	80095a4 <HAL_ADC_Start_DMA+0x17c>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a4d      	ldr	r2, [pc, #308]	@ (80095b8 <HAL_ADC_Start_DMA+0x190>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d008      	beq.n	800949a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b05      	cmp	r3, #5
 8009492:	d002      	beq.n	800949a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b09      	cmp	r3, #9
 8009498:	d17a      	bne.n	8009590 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fcf6 	bl	8009e8c <ADC_Enable>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d16d      	bne.n	8009586 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a3a      	ldr	r2, [pc, #232]	@ (80095ac <HAL_ADC_Start_DMA+0x184>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d009      	beq.n	80094dc <HAL_ADC_Start_DMA+0xb4>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a3b      	ldr	r2, [pc, #236]	@ (80095bc <HAL_ADC_Start_DMA+0x194>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d002      	beq.n	80094d8 <HAL_ADC_Start_DMA+0xb0>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	e003      	b.n	80094e0 <HAL_ADC_Start_DMA+0xb8>
 80094d8:	4b39      	ldr	r3, [pc, #228]	@ (80095c0 <HAL_ADC_Start_DMA+0x198>)
 80094da:	e001      	b.n	80094e0 <HAL_ADC_Start_DMA+0xb8>
 80094dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d002      	beq.n	80094ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d006      	beq.n	8009514 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950a:	f023 0206 	bic.w	r2, r3, #6
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	661a      	str	r2, [r3, #96]	@ 0x60
 8009512:	e002      	b.n	800951a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951e:	4a29      	ldr	r2, [pc, #164]	@ (80095c4 <HAL_ADC_Start_DMA+0x19c>)
 8009520:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009526:	4a28      	ldr	r2, [pc, #160]	@ (80095c8 <HAL_ADC_Start_DMA+0x1a0>)
 8009528:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952e:	4a27      	ldr	r2, [pc, #156]	@ (80095cc <HAL_ADC_Start_DMA+0x1a4>)
 8009530:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	221c      	movs	r2, #28
 8009538:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0210 	orr.w	r2, r2, #16
 8009550:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0201 	orr.w	r2, r2, #1
 8009560:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3340      	adds	r3, #64	@ 0x40
 800956c:	4619      	mov	r1, r3
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f001 f989 	bl	800a888 <HAL_DMA_Start_IT>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fd5c 	bl	800903c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009584:	e00d      	b.n	80095a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800958e:	e008      	b.n	80095a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800959c:	e001      	b.n	80095a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800959e:	2302      	movs	r3, #2
 80095a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	50000100 	.word	0x50000100
 80095b0:	50000300 	.word	0x50000300
 80095b4:	50000700 	.word	0x50000700
 80095b8:	50000600 	.word	0x50000600
 80095bc:	50000500 	.word	0x50000500
 80095c0:	50000400 	.word	0x50000400
 80095c4:	0800a077 	.word	0x0800a077
 80095c8:	0800a14f 	.word	0x0800a14f
 80095cc:	0800a16b 	.word	0x0800a16b

080095d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b0b6      	sub	sp, #216	@ 0xd8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009626:	2b01      	cmp	r3, #1
 8009628:	d102      	bne.n	8009630 <HAL_ADC_ConfigChannel+0x24>
 800962a:	2302      	movs	r3, #2
 800962c:	f000 bc13 	b.w	8009e56 <HAL_ADC_ConfigChannel+0x84a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fd11 	bl	8009064 <LL_ADC_REG_IsConversionOngoing>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 83f3 	bne.w	8009e30 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6859      	ldr	r1, [r3, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f7ff fbcb 	bl	8008df2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fcff 	bl	8009064 <LL_ADC_REG_IsConversionOngoing>
 8009666:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fd0b 	bl	800908a <LL_ADC_INJ_IsConversionOngoing>
 8009674:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009678:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800967c:	2b00      	cmp	r3, #0
 800967e:	f040 81d9 	bne.w	8009a34 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 81d4 	bne.w	8009a34 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009694:	d10f      	bne.n	80096b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	4619      	mov	r1, r3
 80096a2:	f7ff fbd2 	bl	8008e4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fb79 	bl	8008da6 <LL_ADC_SetSamplingTimeCommonConfig>
 80096b4:	e00e      	b.n	80096d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6819      	ldr	r1, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7ff fbc1 	bl	8008e4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fb69 	bl	8008da6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	695a      	ldr	r2, [r3, #20]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	08db      	lsrs	r3, r3, #3
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d022      	beq.n	800973c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6919      	ldr	r1, [r3, #16]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009706:	f7ff fac3 	bl	8008c90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	6919      	ldr	r1, [r3, #16]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	461a      	mov	r2, r3
 8009718:	f7ff fb0f 	bl	8008d3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009728:	2b01      	cmp	r3, #1
 800972a:	d102      	bne.n	8009732 <HAL_ADC_ConfigChannel+0x126>
 800972c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009730:	e000      	b.n	8009734 <HAL_ADC_ConfigChannel+0x128>
 8009732:	2300      	movs	r3, #0
 8009734:	461a      	mov	r2, r3
 8009736:	f7ff fb1b 	bl	8008d70 <LL_ADC_SetOffsetSaturation>
 800973a:	e17b      	b.n	8009a34 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fac8 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 8009748:	4603      	mov	r3, r0
 800974a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <HAL_ADC_ConfigChannel+0x15c>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2100      	movs	r1, #0
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fabd 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 800975e:	4603      	mov	r3, r0
 8009760:	0e9b      	lsrs	r3, r3, #26
 8009762:	f003 021f 	and.w	r2, r3, #31
 8009766:	e01e      	b.n	80097a6 <HAL_ADC_ConfigChannel+0x19a>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff fab2 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 8009774:	4603      	mov	r3, r0
 8009776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800977a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800977e:	fa93 f3a3 	rbit	r3, r3
 8009782:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800978a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800978e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8009796:	2320      	movs	r3, #32
 8009798:	e004      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800979a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800979e:	fab3 f383 	clz	r3, r3
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <HAL_ADC_ConfigChannel+0x1b2>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	0e9b      	lsrs	r3, r3, #26
 80097b8:	f003 031f 	and.w	r3, r3, #31
 80097bc:	e018      	b.n	80097f0 <HAL_ADC_ConfigChannel+0x1e4>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80097ca:	fa93 f3a3 	rbit	r3, r3
 80097ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80097d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80097da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80097e2:	2320      	movs	r3, #32
 80097e4:	e004      	b.n	80097f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80097e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097ea:	fab3 f383 	clz	r3, r3
 80097ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d106      	bne.n	8009802 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fa81 	bl	8008d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2101      	movs	r1, #1
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fa65 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 800980e:	4603      	mov	r3, r0
 8009810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <HAL_ADC_ConfigChannel+0x222>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2101      	movs	r1, #1
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fa5a 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 8009824:	4603      	mov	r3, r0
 8009826:	0e9b      	lsrs	r3, r3, #26
 8009828:	f003 021f 	and.w	r2, r3, #31
 800982c:	e01e      	b.n	800986c <HAL_ADC_ConfigChannel+0x260>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2101      	movs	r1, #1
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fa4f 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 800983a:	4603      	mov	r3, r0
 800983c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009840:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009844:	fa93 f3a3 	rbit	r3, r3
 8009848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800984c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800985c:	2320      	movs	r3, #32
 800985e:	e004      	b.n	800986a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8009860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009864:	fab3 f383 	clz	r3, r3
 8009868:	b2db      	uxtb	r3, r3
 800986a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009874:	2b00      	cmp	r3, #0
 8009876:	d105      	bne.n	8009884 <HAL_ADC_ConfigChannel+0x278>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	0e9b      	lsrs	r3, r3, #26
 800987e:	f003 031f 	and.w	r3, r3, #31
 8009882:	e018      	b.n	80098b6 <HAL_ADC_ConfigChannel+0x2aa>
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800988c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009890:	fa93 f3a3 	rbit	r3, r3
 8009894:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009898:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800989c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80098a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80098a8:	2320      	movs	r3, #32
 80098aa:	e004      	b.n	80098b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80098ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098b0:	fab3 f383 	clz	r3, r3
 80098b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d106      	bne.n	80098c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	2101      	movs	r1, #1
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff fa1e 	bl	8008d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2102      	movs	r1, #2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fa02 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 80098d4:	4603      	mov	r3, r0
 80098d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <HAL_ADC_ConfigChannel+0x2e8>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2102      	movs	r1, #2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff f9f7 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 80098ea:	4603      	mov	r3, r0
 80098ec:	0e9b      	lsrs	r3, r3, #26
 80098ee:	f003 021f 	and.w	r2, r3, #31
 80098f2:	e01e      	b.n	8009932 <HAL_ADC_ConfigChannel+0x326>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2102      	movs	r1, #2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f9ec 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 8009900:	4603      	mov	r3, r0
 8009902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800990a:	fa93 f3a3 	rbit	r3, r3
 800990e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009912:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800991a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8009922:	2320      	movs	r3, #32
 8009924:	e004      	b.n	8009930 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8009926:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800992a:	fab3 f383 	clz	r3, r3
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800993a:	2b00      	cmp	r3, #0
 800993c:	d105      	bne.n	800994a <HAL_ADC_ConfigChannel+0x33e>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	0e9b      	lsrs	r3, r3, #26
 8009944:	f003 031f 	and.w	r3, r3, #31
 8009948:	e016      	b.n	8009978 <HAL_ADC_ConfigChannel+0x36c>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009952:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009956:	fa93 f3a3 	rbit	r3, r3
 800995a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800995c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800995e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800996a:	2320      	movs	r3, #32
 800996c:	e004      	b.n	8009978 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800996e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009978:	429a      	cmp	r2, r3
 800997a:	d106      	bne.n	800998a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2200      	movs	r2, #0
 8009982:	2102      	movs	r1, #2
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff f9bd 	bl	8008d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2103      	movs	r1, #3
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff f9a1 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 8009996:	4603      	mov	r3, r0
 8009998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <HAL_ADC_ConfigChannel+0x3aa>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2103      	movs	r1, #3
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff f996 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 80099ac:	4603      	mov	r3, r0
 80099ae:	0e9b      	lsrs	r3, r3, #26
 80099b0:	f003 021f 	and.w	r2, r3, #31
 80099b4:	e017      	b.n	80099e6 <HAL_ADC_ConfigChannel+0x3da>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2103      	movs	r1, #3
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff f98b 	bl	8008cd8 <LL_ADC_GetOffsetChannel>
 80099c2:	4603      	mov	r3, r0
 80099c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099c8:	fa93 f3a3 	rbit	r3, r3
 80099cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80099ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80099d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80099d8:	2320      	movs	r3, #32
 80099da:	e003      	b.n	80099e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80099dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099de:	fab3 f383 	clz	r3, r3
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <HAL_ADC_ConfigChannel+0x3f2>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	0e9b      	lsrs	r3, r3, #26
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	e011      	b.n	8009a22 <HAL_ADC_ConfigChannel+0x416>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a06:	fa93 f3a3 	rbit	r3, r3
 8009a0a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8009a16:	2320      	movs	r3, #32
 8009a18:	e003      	b.n	8009a22 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8009a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a1c:	fab3 f383 	clz	r3, r3
 8009a20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d106      	bne.n	8009a34 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2103      	movs	r1, #3
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff f968 	bl	8008d04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fad9 	bl	8008ff0 <LL_ADC_IsEnabled>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 813d 	bne.w	8009cc0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6819      	ldr	r1, [r3, #0]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7ff fa24 	bl	8008ea0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	4aa2      	ldr	r2, [pc, #648]	@ (8009ce8 <HAL_ADC_ConfigChannel+0x6dc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f040 812e 	bne.w	8009cc0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10b      	bne.n	8009a8c <HAL_ADC_ConfigChannel+0x480>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	0e9b      	lsrs	r3, r3, #26
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	2b09      	cmp	r3, #9
 8009a82:	bf94      	ite	ls
 8009a84:	2301      	movls	r3, #1
 8009a86:	2300      	movhi	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	e019      	b.n	8009ac0 <HAL_ADC_ConfigChannel+0x4b4>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a94:	fa93 f3a3 	rbit	r3, r3
 8009a98:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a9c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	e003      	b.n	8009ab0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aaa:	fab3 f383 	clz	r3, r3
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	f003 031f 	and.w	r3, r3, #31
 8009ab6:	2b09      	cmp	r3, #9
 8009ab8:	bf94      	ite	ls
 8009aba:	2301      	movls	r3, #1
 8009abc:	2300      	movhi	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d079      	beq.n	8009bb8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d107      	bne.n	8009ae0 <HAL_ADC_ConfigChannel+0x4d4>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	0e9b      	lsrs	r3, r3, #26
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	069b      	lsls	r3, r3, #26
 8009ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009ade:	e015      	b.n	8009b0c <HAL_ADC_ConfigChannel+0x500>
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ae8:	fa93 f3a3 	rbit	r3, r3
 8009aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8009af8:	2320      	movs	r3, #32
 8009afa:	e003      	b.n	8009b04 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8009afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009afe:	fab3 f383 	clz	r3, r3
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	3301      	adds	r3, #1
 8009b06:	069b      	lsls	r3, r3, #26
 8009b08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d109      	bne.n	8009b2c <HAL_ADC_ConfigChannel+0x520>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	0e9b      	lsrs	r3, r3, #26
 8009b1e:	3301      	adds	r3, #1
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	2101      	movs	r1, #1
 8009b26:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2a:	e017      	b.n	8009b5c <HAL_ADC_ConfigChannel+0x550>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b34:	fa93 f3a3 	rbit	r3, r3
 8009b38:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009b44:	2320      	movs	r3, #32
 8009b46:	e003      	b.n	8009b50 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8009b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b4a:	fab3 f383 	clz	r3, r3
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	3301      	adds	r3, #1
 8009b52:	f003 031f 	and.w	r3, r3, #31
 8009b56:	2101      	movs	r1, #1
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	ea42 0103 	orr.w	r1, r2, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <HAL_ADC_ConfigChannel+0x576>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	0e9b      	lsrs	r3, r3, #26
 8009b72:	3301      	adds	r3, #1
 8009b74:	f003 021f 	and.w	r2, r3, #31
 8009b78:	4613      	mov	r3, r2
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	4413      	add	r3, r2
 8009b7e:	051b      	lsls	r3, r3, #20
 8009b80:	e018      	b.n	8009bb4 <HAL_ADC_ConfigChannel+0x5a8>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	fa93 f3a3 	rbit	r3, r3
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8009b9a:	2320      	movs	r3, #32
 8009b9c:	e003      	b.n	8009ba6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba0:	fab3 f383 	clz	r3, r3
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f003 021f 	and.w	r2, r3, #31
 8009bac:	4613      	mov	r3, r2
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	4413      	add	r3, r2
 8009bb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	e07e      	b.n	8009cb6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d107      	bne.n	8009bd4 <HAL_ADC_ConfigChannel+0x5c8>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	0e9b      	lsrs	r3, r3, #26
 8009bca:	3301      	adds	r3, #1
 8009bcc:	069b      	lsls	r3, r3, #26
 8009bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009bd2:	e015      	b.n	8009c00 <HAL_ADC_ConfigChannel+0x5f4>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bdc:	fa93 f3a3 	rbit	r3, r3
 8009be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8009bec:	2320      	movs	r3, #32
 8009bee:	e003      	b.n	8009bf8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	fab3 f383 	clz	r3, r3
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	069b      	lsls	r3, r3, #26
 8009bfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <HAL_ADC_ConfigChannel+0x614>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	0e9b      	lsrs	r3, r3, #26
 8009c12:	3301      	adds	r3, #1
 8009c14:	f003 031f 	and.w	r3, r3, #31
 8009c18:	2101      	movs	r1, #1
 8009c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1e:	e017      	b.n	8009c50 <HAL_ADC_ConfigChannel+0x644>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	fa93 f3a3 	rbit	r3, r3
 8009c2c:	61fb      	str	r3, [r7, #28]
  return result;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8009c38:	2320      	movs	r3, #32
 8009c3a:	e003      	b.n	8009c44 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	fab3 f383 	clz	r3, r3
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	3301      	adds	r3, #1
 8009c46:	f003 031f 	and.w	r3, r3, #31
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c50:	ea42 0103 	orr.w	r1, r2, r3
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10d      	bne.n	8009c7c <HAL_ADC_ConfigChannel+0x670>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	0e9b      	lsrs	r3, r3, #26
 8009c66:	3301      	adds	r3, #1
 8009c68:	f003 021f 	and.w	r2, r3, #31
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	4413      	add	r3, r2
 8009c72:	3b1e      	subs	r3, #30
 8009c74:	051b      	lsls	r3, r3, #20
 8009c76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009c7a:	e01b      	b.n	8009cb4 <HAL_ADC_ConfigChannel+0x6a8>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	fa93 f3a3 	rbit	r3, r3
 8009c88:	613b      	str	r3, [r7, #16]
  return result;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009c94:	2320      	movs	r3, #32
 8009c96:	e003      	b.n	8009ca0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	fab3 f383 	clz	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	f003 021f 	and.w	r2, r3, #31
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	4413      	add	r3, r2
 8009cac:	3b1e      	subs	r3, #30
 8009cae:	051b      	lsls	r3, r3, #20
 8009cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009cb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009cba:	4619      	mov	r1, r3
 8009cbc:	f7ff f8c5 	bl	8008e4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <HAL_ADC_ConfigChannel+0x6e0>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80be 	beq.w	8009e4a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cd6:	d004      	beq.n	8009ce2 <HAL_ADC_ConfigChannel+0x6d6>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a04      	ldr	r2, [pc, #16]	@ (8009cf0 <HAL_ADC_ConfigChannel+0x6e4>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d10a      	bne.n	8009cf8 <HAL_ADC_ConfigChannel+0x6ec>
 8009ce2:	4b04      	ldr	r3, [pc, #16]	@ (8009cf4 <HAL_ADC_ConfigChannel+0x6e8>)
 8009ce4:	e009      	b.n	8009cfa <HAL_ADC_ConfigChannel+0x6ee>
 8009ce6:	bf00      	nop
 8009ce8:	407f0000 	.word	0x407f0000
 8009cec:	80080000 	.word	0x80080000
 8009cf0:	50000100 	.word	0x50000100
 8009cf4:	50000300 	.word	0x50000300
 8009cf8:	4b59      	ldr	r3, [pc, #356]	@ (8009e60 <HAL_ADC_ConfigChannel+0x854>)
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe ffba 	bl	8008c74 <LL_ADC_GetCommonPathInternalCh>
 8009d00:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a56      	ldr	r2, [pc, #344]	@ (8009e64 <HAL_ADC_ConfigChannel+0x858>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <HAL_ADC_ConfigChannel+0x70c>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a55      	ldr	r2, [pc, #340]	@ (8009e68 <HAL_ADC_ConfigChannel+0x85c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d13a      	bne.n	8009d8e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d134      	bne.n	8009d8e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d2c:	d005      	beq.n	8009d3a <HAL_ADC_ConfigChannel+0x72e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4e      	ldr	r2, [pc, #312]	@ (8009e6c <HAL_ADC_ConfigChannel+0x860>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	f040 8085 	bne.w	8009e44 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d42:	d004      	beq.n	8009d4e <HAL_ADC_ConfigChannel+0x742>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a49      	ldr	r2, [pc, #292]	@ (8009e70 <HAL_ADC_ConfigChannel+0x864>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d101      	bne.n	8009d52 <HAL_ADC_ConfigChannel+0x746>
 8009d4e:	4a49      	ldr	r2, [pc, #292]	@ (8009e74 <HAL_ADC_ConfigChannel+0x868>)
 8009d50:	e000      	b.n	8009d54 <HAL_ADC_ConfigChannel+0x748>
 8009d52:	4a43      	ldr	r2, [pc, #268]	@ (8009e60 <HAL_ADC_ConfigChannel+0x854>)
 8009d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe ff75 	bl	8008c4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009d64:	4b44      	ldr	r3, [pc, #272]	@ (8009e78 <HAL_ADC_ConfigChannel+0x86c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	099b      	lsrs	r3, r3, #6
 8009d6a:	4a44      	ldr	r2, [pc, #272]	@ (8009e7c <HAL_ADC_ConfigChannel+0x870>)
 8009d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d70:	099b      	lsrs	r3, r3, #6
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	4613      	mov	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009d7e:	e002      	b.n	8009d86 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f9      	bne.n	8009d80 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d8c:	e05a      	b.n	8009e44 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a3b      	ldr	r2, [pc, #236]	@ (8009e80 <HAL_ADC_ConfigChannel+0x874>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d125      	bne.n	8009de4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d11f      	bne.n	8009de4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a31      	ldr	r2, [pc, #196]	@ (8009e70 <HAL_ADC_ConfigChannel+0x864>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d104      	bne.n	8009db8 <HAL_ADC_ConfigChannel+0x7ac>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a34      	ldr	r2, [pc, #208]	@ (8009e84 <HAL_ADC_ConfigChannel+0x878>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d047      	beq.n	8009e48 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dc0:	d004      	beq.n	8009dcc <HAL_ADC_ConfigChannel+0x7c0>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8009e70 <HAL_ADC_ConfigChannel+0x864>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d101      	bne.n	8009dd0 <HAL_ADC_ConfigChannel+0x7c4>
 8009dcc:	4a29      	ldr	r2, [pc, #164]	@ (8009e74 <HAL_ADC_ConfigChannel+0x868>)
 8009dce:	e000      	b.n	8009dd2 <HAL_ADC_ConfigChannel+0x7c6>
 8009dd0:	4a23      	ldr	r2, [pc, #140]	@ (8009e60 <HAL_ADC_ConfigChannel+0x854>)
 8009dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7fe ff36 	bl	8008c4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009de2:	e031      	b.n	8009e48 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a27      	ldr	r2, [pc, #156]	@ (8009e88 <HAL_ADC_ConfigChannel+0x87c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d12d      	bne.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d127      	bne.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8009e70 <HAL_ADC_ConfigChannel+0x864>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d022      	beq.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e0c:	d004      	beq.n	8009e18 <HAL_ADC_ConfigChannel+0x80c>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a17      	ldr	r2, [pc, #92]	@ (8009e70 <HAL_ADC_ConfigChannel+0x864>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d101      	bne.n	8009e1c <HAL_ADC_ConfigChannel+0x810>
 8009e18:	4a16      	ldr	r2, [pc, #88]	@ (8009e74 <HAL_ADC_ConfigChannel+0x868>)
 8009e1a:	e000      	b.n	8009e1e <HAL_ADC_ConfigChannel+0x812>
 8009e1c:	4a10      	ldr	r2, [pc, #64]	@ (8009e60 <HAL_ADC_ConfigChannel+0x854>)
 8009e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009e22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fe ff10 	bl	8008c4e <LL_ADC_SetCommonPathInternalCh>
 8009e2e:	e00c      	b.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e34:	f043 0220 	orr.w	r2, r3, #32
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009e42:	e002      	b.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009e44:	bf00      	nop
 8009e46:	e000      	b.n	8009e4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009e48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009e52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	37d8      	adds	r7, #216	@ 0xd8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	50000700 	.word	0x50000700
 8009e64:	c3210000 	.word	0xc3210000
 8009e68:	90c00010 	.word	0x90c00010
 8009e6c:	50000600 	.word	0x50000600
 8009e70:	50000100 	.word	0x50000100
 8009e74:	50000300 	.word	0x50000300
 8009e78:	20000138 	.word	0x20000138
 8009e7c:	053e2d63 	.word	0x053e2d63
 8009e80:	c7520000 	.word	0xc7520000
 8009e84:	50000500 	.word	0x50000500
 8009e88:	cb840000 	.word	0xcb840000

08009e8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff f8a7 	bl	8008ff0 <LL_ADC_IsEnabled>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d176      	bne.n	8009f96 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	4b3c      	ldr	r3, [pc, #240]	@ (8009fa0 <ADC_Enable+0x114>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00d      	beq.n	8009ed2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eba:	f043 0210 	orr.w	r2, r3, #16
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ec6:	f043 0201 	orr.w	r2, r3, #1
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e062      	b.n	8009f98 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff f862 	bl	8008fa0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee4:	d004      	beq.n	8009ef0 <ADC_Enable+0x64>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a2e      	ldr	r2, [pc, #184]	@ (8009fa4 <ADC_Enable+0x118>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d101      	bne.n	8009ef4 <ADC_Enable+0x68>
 8009ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8009fa8 <ADC_Enable+0x11c>)
 8009ef2:	e000      	b.n	8009ef6 <ADC_Enable+0x6a>
 8009ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8009fac <ADC_Enable+0x120>)
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe febc 	bl	8008c74 <LL_ADC_GetCommonPathInternalCh>
 8009efc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d013      	beq.n	8009f2e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009f06:	4b2a      	ldr	r3, [pc, #168]	@ (8009fb0 <ADC_Enable+0x124>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	099b      	lsrs	r3, r3, #6
 8009f0c:	4a29      	ldr	r2, [pc, #164]	@ (8009fb4 <ADC_Enable+0x128>)
 8009f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f12:	099b      	lsrs	r3, r3, #6
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	4613      	mov	r3, r2
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009f20:	e002      	b.n	8009f28 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f9      	bne.n	8009f22 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009f2e:	f7fe fe6f 	bl	8008c10 <HAL_GetTick>
 8009f32:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009f34:	e028      	b.n	8009f88 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff f858 	bl	8008ff0 <LL_ADC_IsEnabled>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d104      	bne.n	8009f50 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff f828 	bl	8008fa0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009f50:	f7fe fe5e 	bl	8008c10 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d914      	bls.n	8009f88 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d00d      	beq.n	8009f88 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f70:	f043 0210 	orr.w	r2, r3, #16
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f7c:	f043 0201 	orr.w	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e007      	b.n	8009f98 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d1cf      	bne.n	8009f36 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	8000003f 	.word	0x8000003f
 8009fa4:	50000100 	.word	0x50000100
 8009fa8:	50000300 	.word	0x50000300
 8009fac:	50000700 	.word	0x50000700
 8009fb0:	20000138 	.word	0x20000138
 8009fb4:	053e2d63 	.word	0x053e2d63

08009fb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff f826 	bl	8009016 <LL_ADC_IsDisableOngoing>
 8009fca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff f80d 	bl	8008ff0 <LL_ADC_IsEnabled>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d047      	beq.n	800a06c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d144      	bne.n	800a06c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f003 030d 	and.w	r3, r3, #13
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10c      	bne.n	800a00a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe ffe7 	bl	8008fc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2203      	movs	r2, #3
 800a000:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a002:	f7fe fe05 	bl	8008c10 <HAL_GetTick>
 800a006:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a008:	e029      	b.n	800a05e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a00e:	f043 0210 	orr.w	r2, r3, #16
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a01a:	f043 0201 	orr.w	r2, r3, #1
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e023      	b.n	800a06e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a026:	f7fe fdf3 	bl	8008c10 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	d914      	bls.n	800a05e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00d      	beq.n	800a05e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a046:	f043 0210 	orr.w	r2, r3, #16
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a052:	f043 0201 	orr.w	r2, r3, #1
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e007      	b.n	800a06e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1dc      	bne.n	800a026 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a082:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d14b      	bne.n	800a128 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a094:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d021      	beq.n	800a0ee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fe8c 	bl	8008dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d032      	beq.n	800a120 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d12b      	bne.n	800a120 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d11f      	bne.n	800a120 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0e4:	f043 0201 	orr.w	r2, r3, #1
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0ec:	e018      	b.n	800a120 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d111      	bne.n	800a120 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a118:	f043 0201 	orr.w	r2, r3, #1
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff fa55 	bl	80095d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a126:	e00e      	b.n	800a146 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fa5f 	bl	80095f8 <HAL_ADC_ErrorCallback>
}
 800a13a:	e004      	b.n	800a146 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
}
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7ff fa41 	bl	80095e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a176:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a17c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff fa31 	bl	80095f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a196:	bf00      	nop
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <LL_ADC_IsEnabled>:
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <LL_ADC_IsEnabled+0x18>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <LL_ADC_IsEnabled+0x1a>
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <LL_ADC_StartCalibration>:
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a1d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	609a      	str	r2, [r3, #8]
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <LL_ADC_IsCalibrationOnGoing>:
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a20a:	d101      	bne.n	800a210 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a20c:	2301      	movs	r3, #1
 800a20e:	e000      	b.n	800a212 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <LL_ADC_REG_IsConversionOngoing>:
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d101      	bne.n	800a236 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a24e:	2300      	movs	r3, #0
 800a250:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_ADCEx_Calibration_Start+0x1c>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e04d      	b.n	800a2fc <HAL_ADCEx_Calibration_Start+0xb8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff fea5 	bl	8009fb8 <ADC_Disable>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d136      	bne.n	800a2e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a27c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a280:	f023 0302 	bic.w	r3, r3, #2
 800a284:	f043 0202 	orr.w	r2, r3, #2
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff ff96 	bl	800a1c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a298:	e014      	b.n	800a2c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	3301      	adds	r3, #1
 800a29e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	4a18      	ldr	r2, [pc, #96]	@ (800a304 <HAL_ADCEx_Calibration_Start+0xc0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d90d      	bls.n	800a2c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ac:	f023 0312 	bic.w	r3, r3, #18
 800a2b0:	f043 0210 	orr.w	r2, r3, #16
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e01b      	b.n	800a2fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff ff94 	bl	800a1f6 <LL_ADC_IsCalibrationOnGoing>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e2      	bne.n	800a29a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	f043 0201 	orr.w	r2, r3, #1
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a2e4:	e005      	b.n	800a2f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ea:	f043 0210 	orr.w	r2, r3, #16
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0004de01 	.word	0x0004de01

0800a308 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b0a1      	sub	sp, #132	@ 0x84
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a322:	2302      	movs	r3, #2
 800a324:	e0e7      	b.n	800a4f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800a32e:	2300      	movs	r3, #0
 800a330:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800a332:	2300      	movs	r3, #0
 800a334:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a33e:	d102      	bne.n	800a346 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a340:	4b6f      	ldr	r3, [pc, #444]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a342:	60bb      	str	r3, [r7, #8]
 800a344:	e009      	b.n	800a35a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a6e      	ldr	r2, [pc, #440]	@ (800a504 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d102      	bne.n	800a356 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800a350:	4b6d      	ldr	r3, [pc, #436]	@ (800a508 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a352:	60bb      	str	r3, [r7, #8]
 800a354:	e001      	b.n	800a35a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a356:	2300      	movs	r3, #0
 800a358:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a364:	f043 0220 	orr.w	r2, r3, #32
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e0be      	b.n	800a4f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff ff4f 	bl	800a21e <LL_ADC_REG_IsConversionOngoing>
 800a380:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff ff49 	bl	800a21e <LL_ADC_REG_IsConversionOngoing>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 80a0 	bne.w	800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800a394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a396:	2b00      	cmp	r3, #0
 800a398:	f040 809c 	bne.w	800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3a4:	d004      	beq.n	800a3b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a55      	ldr	r2, [pc, #340]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d101      	bne.n	800a3b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800a3b0:	4b56      	ldr	r3, [pc, #344]	@ (800a50c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a3b2:	e000      	b.n	800a3b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800a3b4:	4b56      	ldr	r3, [pc, #344]	@ (800a510 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800a3b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d04b      	beq.n	800a458 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a3c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	6859      	ldr	r1, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a3d2:	035b      	lsls	r3, r3, #13
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3e4:	d004      	beq.n	800a3f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a45      	ldr	r2, [pc, #276]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d10f      	bne.n	800a410 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800a3f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a3f4:	f7ff fed3 	bl	800a19e <LL_ADC_IsEnabled>
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	4841      	ldr	r0, [pc, #260]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3fc:	f7ff fecf 	bl	800a19e <LL_ADC_IsEnabled>
 800a400:	4603      	mov	r3, r0
 800a402:	4323      	orrs	r3, r4
 800a404:	2b00      	cmp	r3, #0
 800a406:	bf0c      	ite	eq
 800a408:	2301      	moveq	r3, #1
 800a40a:	2300      	movne	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	e012      	b.n	800a436 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800a410:	483c      	ldr	r0, [pc, #240]	@ (800a504 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a412:	f7ff fec4 	bl	800a19e <LL_ADC_IsEnabled>
 800a416:	4604      	mov	r4, r0
 800a418:	483b      	ldr	r0, [pc, #236]	@ (800a508 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a41a:	f7ff fec0 	bl	800a19e <LL_ADC_IsEnabled>
 800a41e:	4603      	mov	r3, r0
 800a420:	431c      	orrs	r4, r3
 800a422:	483c      	ldr	r0, [pc, #240]	@ (800a514 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a424:	f7ff febb 	bl	800a19e <LL_ADC_IsEnabled>
 800a428:	4603      	mov	r3, r0
 800a42a:	4323      	orrs	r3, r4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d056      	beq.n	800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a43a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a442:	f023 030f 	bic.w	r3, r3, #15
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	6892      	ldr	r2, [r2, #8]
 800a44e:	430a      	orrs	r2, r1
 800a450:	431a      	orrs	r2, r3
 800a452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a454:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a456:	e047      	b.n	800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a462:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a46c:	d004      	beq.n	800a478 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a23      	ldr	r2, [pc, #140]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d10f      	bne.n	800a498 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800a478:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a47c:	f7ff fe8f 	bl	800a19e <LL_ADC_IsEnabled>
 800a480:	4604      	mov	r4, r0
 800a482:	481f      	ldr	r0, [pc, #124]	@ (800a500 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a484:	f7ff fe8b 	bl	800a19e <LL_ADC_IsEnabled>
 800a488:	4603      	mov	r3, r0
 800a48a:	4323      	orrs	r3, r4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bf0c      	ite	eq
 800a490:	2301      	moveq	r3, #1
 800a492:	2300      	movne	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	e012      	b.n	800a4be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800a498:	481a      	ldr	r0, [pc, #104]	@ (800a504 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a49a:	f7ff fe80 	bl	800a19e <LL_ADC_IsEnabled>
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4819      	ldr	r0, [pc, #100]	@ (800a508 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a4a2:	f7ff fe7c 	bl	800a19e <LL_ADC_IsEnabled>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	431c      	orrs	r4, r3
 800a4aa:	481a      	ldr	r0, [pc, #104]	@ (800a514 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a4ac:	f7ff fe77 	bl	800a19e <LL_ADC_IsEnabled>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	4323      	orrs	r3, r4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bf0c      	ite	eq
 800a4b8:	2301      	moveq	r3, #1
 800a4ba:	2300      	movne	r3, #0
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d012      	beq.n	800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a4c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a4ca:	f023 030f 	bic.w	r3, r3, #15
 800a4ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a4d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a4d2:	e009      	b.n	800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800a4e6:	e000      	b.n	800a4ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a4e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a4f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3784      	adds	r7, #132	@ 0x84
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd90      	pop	{r4, r7, pc}
 800a4fe:	bf00      	nop
 800a500:	50000100 	.word	0x50000100
 800a504:	50000400 	.word	0x50000400
 800a508:	50000500 	.word	0x50000500
 800a50c:	50000300 	.word	0x50000300
 800a510:	50000700 	.word	0x50000700
 800a514:	50000600 	.word	0x50000600

0800a518 <__NVIC_SetPriorityGrouping>:
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <__NVIC_SetPriorityGrouping+0x44>)
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a534:	4013      	ands	r3, r2
 800a536:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a54a:	4a04      	ldr	r2, [pc, #16]	@ (800a55c <__NVIC_SetPriorityGrouping+0x44>)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	60d3      	str	r3, [r2, #12]
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	e000ed00 	.word	0xe000ed00

0800a560 <__NVIC_GetPriorityGrouping>:
{
 800a560:	b480      	push	{r7}
 800a562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a564:	4b04      	ldr	r3, [pc, #16]	@ (800a578 <__NVIC_GetPriorityGrouping+0x18>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	f003 0307 	and.w	r3, r3, #7
}
 800a56e:	4618      	mov	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	e000ed00 	.word	0xe000ed00

0800a57c <__NVIC_EnableIRQ>:
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	db0b      	blt.n	800a5a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	f003 021f 	and.w	r2, r3, #31
 800a594:	4907      	ldr	r1, [pc, #28]	@ (800a5b4 <__NVIC_EnableIRQ+0x38>)
 800a596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	2001      	movs	r0, #1
 800a59e:	fa00 f202 	lsl.w	r2, r0, r2
 800a5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a5a6:	bf00      	nop
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	e000e100 	.word	0xe000e100

0800a5b8 <__NVIC_SetPriority>:
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	6039      	str	r1, [r7, #0]
 800a5c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	db0a      	blt.n	800a5e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	490c      	ldr	r1, [pc, #48]	@ (800a604 <__NVIC_SetPriority+0x4c>)
 800a5d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5d6:	0112      	lsls	r2, r2, #4
 800a5d8:	b2d2      	uxtb	r2, r2
 800a5da:	440b      	add	r3, r1
 800a5dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a5e0:	e00a      	b.n	800a5f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	4908      	ldr	r1, [pc, #32]	@ (800a608 <__NVIC_SetPriority+0x50>)
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	f003 030f 	and.w	r3, r3, #15
 800a5ee:	3b04      	subs	r3, #4
 800a5f0:	0112      	lsls	r2, r2, #4
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	440b      	add	r3, r1
 800a5f6:	761a      	strb	r2, [r3, #24]
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	e000e100 	.word	0xe000e100
 800a608:	e000ed00 	.word	0xe000ed00

0800a60c <NVIC_EncodePriority>:
{
 800a60c:	b480      	push	{r7}
 800a60e:	b089      	sub	sp, #36	@ 0x24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f1c3 0307 	rsb	r3, r3, #7
 800a626:	2b04      	cmp	r3, #4
 800a628:	bf28      	it	cs
 800a62a:	2304      	movcs	r3, #4
 800a62c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	3304      	adds	r3, #4
 800a632:	2b06      	cmp	r3, #6
 800a634:	d902      	bls.n	800a63c <NVIC_EncodePriority+0x30>
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	3b03      	subs	r3, #3
 800a63a:	e000      	b.n	800a63e <NVIC_EncodePriority+0x32>
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	fa02 f303 	lsl.w	r3, r2, r3
 800a64a:	43da      	mvns	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	401a      	ands	r2, r3
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a654:	f04f 31ff 	mov.w	r1, #4294967295
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	fa01 f303 	lsl.w	r3, r1, r3
 800a65e:	43d9      	mvns	r1, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a664:	4313      	orrs	r3, r2
}
 800a666:	4618      	mov	r0, r3
 800a668:	3724      	adds	r7, #36	@ 0x24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
	...

0800a674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3b01      	subs	r3, #1
 800a680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a684:	d301      	bcc.n	800a68a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a686:	2301      	movs	r3, #1
 800a688:	e00f      	b.n	800a6aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a68a:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b4 <SysTick_Config+0x40>)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3b01      	subs	r3, #1
 800a690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a692:	210f      	movs	r1, #15
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	f7ff ff8e 	bl	800a5b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a69c:	4b05      	ldr	r3, [pc, #20]	@ (800a6b4 <SysTick_Config+0x40>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a6a2:	4b04      	ldr	r3, [pc, #16]	@ (800a6b4 <SysTick_Config+0x40>)
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	e000e010 	.word	0xe000e010

0800a6b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff ff29 	bl	800a518 <__NVIC_SetPriorityGrouping>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b086      	sub	sp, #24
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
 800a6da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a6dc:	f7ff ff40 	bl	800a560 <__NVIC_GetPriorityGrouping>
 800a6e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	6978      	ldr	r0, [r7, #20]
 800a6e8:	f7ff ff90 	bl	800a60c <NVIC_EncodePriority>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff ff5f 	bl	800a5b8 <__NVIC_SetPriority>
}
 800a6fa:	bf00      	nop
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	4603      	mov	r3, r0
 800a70a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a70c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff ff33 	bl	800a57c <__NVIC_EnableIRQ>
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff ffa4 	bl	800a674 <SysTick_Config>
 800a72c:	4603      	mov	r3, r0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e08d      	b.n	800a866 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	4b47      	ldr	r3, [pc, #284]	@ (800a870 <HAL_DMA_Init+0x138>)
 800a752:	429a      	cmp	r2, r3
 800a754:	d80f      	bhi.n	800a776 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b45      	ldr	r3, [pc, #276]	@ (800a874 <HAL_DMA_Init+0x13c>)
 800a75e:	4413      	add	r3, r2
 800a760:	4a45      	ldr	r2, [pc, #276]	@ (800a878 <HAL_DMA_Init+0x140>)
 800a762:	fba2 2303 	umull	r2, r3, r2, r3
 800a766:	091b      	lsrs	r3, r3, #4
 800a768:	009a      	lsls	r2, r3, #2
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a42      	ldr	r2, [pc, #264]	@ (800a87c <HAL_DMA_Init+0x144>)
 800a772:	641a      	str	r2, [r3, #64]	@ 0x40
 800a774:	e00e      	b.n	800a794 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	4b40      	ldr	r3, [pc, #256]	@ (800a880 <HAL_DMA_Init+0x148>)
 800a77e:	4413      	add	r3, r2
 800a780:	4a3d      	ldr	r2, [pc, #244]	@ (800a878 <HAL_DMA_Init+0x140>)
 800a782:	fba2 2303 	umull	r2, r3, r2, r3
 800a786:	091b      	lsrs	r3, r3, #4
 800a788:	009a      	lsls	r2, r3, #2
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a3c      	ldr	r2, [pc, #240]	@ (800a884 <HAL_DMA_Init+0x14c>)
 800a792:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a7b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa76 	bl	800acd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7f4:	d102      	bne.n	800a7fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a810:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d010      	beq.n	800a83c <HAL_DMA_Init+0x104>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d80c      	bhi.n	800a83c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa96 	bl	800ad54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	e008      	b.n	800a84e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	40020407 	.word	0x40020407
 800a874:	bffdfff8 	.word	0xbffdfff8
 800a878:	cccccccd 	.word	0xcccccccd
 800a87c:	40020000 	.word	0x40020000
 800a880:	bffdfbf8 	.word	0xbffdfbf8
 800a884:	40020400 	.word	0x40020400

0800a888 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <HAL_DMA_Start_IT+0x20>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e066      	b.n	800a976 <HAL_DMA_Start_IT+0xee>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d155      	bne.n	800a968 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f022 0201 	bic.w	r2, r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f9bb 	bl	800ac5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d008      	beq.n	800a900 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f042 020e 	orr.w	r2, r2, #14
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e00f      	b.n	800a920 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0204 	bic.w	r2, r2, #4
 800a90e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 020a 	orr.w	r2, r2, #10
 800a91e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a938:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a93c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a954:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f042 0201 	orr.w	r2, r2, #1
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e005      	b.n	800a974 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a970:	2302      	movs	r3, #2
 800a972:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a974:	7dfb      	ldrb	r3, [r7, #23]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b02      	cmp	r3, #2
 800a994:	d005      	beq.n	800a9a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2204      	movs	r2, #4
 800a99a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	e037      	b.n	800aa12 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 020e 	bic.w	r2, r2, #14
 800a9b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a9c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 0201 	bic.w	r2, r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d6:	f003 021f 	and.w	r2, r3, #31
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	2101      	movs	r1, #1
 800a9e0:	fa01 f202 	lsl.w	r2, r1, r2
 800a9e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a9ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00c      	beq.n	800aa12 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa06:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aa10:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d00d      	beq.n	800aa64 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	73fb      	strb	r3, [r7, #15]
 800aa62:	e047      	b.n	800aaf4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 020e 	bic.w	r2, r2, #14
 800aa72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa98:	f003 021f 	and.w	r2, r3, #31
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	fa01 f202 	lsl.w	r2, r1, r2
 800aaa6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aab0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aac8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aad2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
    }
  }
  return status;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab1a:	f003 031f 	and.w	r3, r3, #31
 800ab1e:	2204      	movs	r2, #4
 800ab20:	409a      	lsls	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4013      	ands	r3, r2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d026      	beq.n	800ab78 <HAL_DMA_IRQHandler+0x7a>
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d021      	beq.n	800ab78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d107      	bne.n	800ab52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0204 	bic.w	r2, r2, #4
 800ab50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab56:	f003 021f 	and.w	r2, r3, #31
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab5e:	2104      	movs	r1, #4
 800ab60:	fa01 f202 	lsl.w	r2, r1, r2
 800ab64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d071      	beq.n	800ac52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ab76:	e06c      	b.n	800ac52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	2202      	movs	r2, #2
 800ab82:	409a      	lsls	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4013      	ands	r3, r2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d02e      	beq.n	800abea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d029      	beq.n	800abea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0320 	and.w	r3, r3, #32
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10b      	bne.n	800abbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 020a 	bic.w	r2, r2, #10
 800abb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc0:	f003 021f 	and.w	r2, r3, #31
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc8:	2102      	movs	r1, #2
 800abca:	fa01 f202 	lsl.w	r2, r1, r2
 800abce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d038      	beq.n	800ac52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800abe8:	e033      	b.n	800ac52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abee:	f003 031f 	and.w	r3, r3, #31
 800abf2:	2208      	movs	r2, #8
 800abf4:	409a      	lsls	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4013      	ands	r3, r2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d02a      	beq.n	800ac54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d025      	beq.n	800ac54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 020e 	bic.w	r2, r2, #14
 800ac16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1c:	f003 021f 	and.w	r2, r3, #31
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac24:	2101      	movs	r1, #1
 800ac26:	fa01 f202 	lsl.w	r2, r1, r2
 800ac2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
}
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ac72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ac84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8a:	f003 021f 	and.w	r2, r3, #31
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac92:	2101      	movs	r1, #1
 800ac94:	fa01 f202 	lsl.w	r2, r1, r2
 800ac98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b10      	cmp	r3, #16
 800aca8:	d108      	bne.n	800acbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800acba:	e007      	b.n	800accc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	60da      	str	r2, [r3, #12]
}
 800accc:	bf00      	nop
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b16      	ldr	r3, [pc, #88]	@ (800ad40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ace8:	429a      	cmp	r2, r3
 800acea:	d802      	bhi.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800acec:	4b15      	ldr	r3, [pc, #84]	@ (800ad44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	e001      	b.n	800acf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800acf2:	4b15      	ldr	r3, [pc, #84]	@ (800ad48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800acf4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	3b08      	subs	r3, #8
 800ad02:	4a12      	ldr	r2, [pc, #72]	@ (800ad4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ad04:	fba2 2303 	umull	r2, r3, r2, r3
 800ad08:	091b      	lsrs	r3, r3, #4
 800ad0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad10:	089b      	lsrs	r3, r3, #2
 800ad12:	009a      	lsls	r2, r3, #2
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	4413      	add	r3, r2
 800ad18:	461a      	mov	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a0b      	ldr	r2, [pc, #44]	@ (800ad50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ad22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f003 031f 	and.w	r3, r3, #31
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	409a      	lsls	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ad32:	bf00      	nop
 800ad34:	371c      	adds	r7, #28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	40020407 	.word	0x40020407
 800ad44:	40020800 	.word	0x40020800
 800ad48:	40020820 	.word	0x40020820
 800ad4c:	cccccccd 	.word	0xcccccccd
 800ad50:	40020880 	.word	0x40020880

0800ad54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a08      	ldr	r2, [pc, #32]	@ (800ad98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ad76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	f003 031f 	and.w	r3, r3, #31
 800ad80:	2201      	movs	r2, #1
 800ad82:	409a      	lsls	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800ad88:	bf00      	nop
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	1000823f 	.word	0x1000823f
 800ad98:	40020940 	.word	0x40020940

0800ad9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b087      	sub	sp, #28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800adaa:	e15a      	b.n	800b062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	2101      	movs	r1, #1
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	fa01 f303 	lsl.w	r3, r1, r3
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 814c 	beq.w	800b05c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d005      	beq.n	800addc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800add8:	2b02      	cmp	r3, #2
 800adda:	d130      	bne.n	800ae3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	2203      	movs	r2, #3
 800ade8:	fa02 f303 	lsl.w	r3, r2, r3
 800adec:	43db      	mvns	r3, r3
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	4013      	ands	r3, r2
 800adf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae12:	2201      	movs	r2, #1
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	43db      	mvns	r3, r3
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4013      	ands	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	091b      	lsrs	r3, r3, #4
 800ae28:	f003 0201 	and.w	r2, r3, #1
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d017      	beq.n	800ae7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	2203      	movs	r2, #3
 800ae56:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5a:	43db      	mvns	r3, r3
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d123      	bne.n	800aece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	08da      	lsrs	r2, r3, #3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3208      	adds	r2, #8
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f003 0307 	and.w	r3, r3, #7
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	220f      	movs	r2, #15
 800ae9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aea2:	43db      	mvns	r3, r3
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	4013      	ands	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	691a      	ldr	r2, [r3, #16]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	08da      	lsrs	r2, r3, #3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3208      	adds	r2, #8
 800aec8:	6939      	ldr	r1, [r7, #16]
 800aeca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	2203      	movs	r2, #3
 800aeda:	fa02 f303 	lsl.w	r3, r2, r3
 800aede:	43db      	mvns	r3, r3
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	4013      	ands	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	f003 0203 	and.w	r2, r3, #3
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	fa02 f303 	lsl.w	r3, r2, r3
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80a6 	beq.w	800b05c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af10:	4b5b      	ldr	r3, [pc, #364]	@ (800b080 <HAL_GPIO_Init+0x2e4>)
 800af12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af14:	4a5a      	ldr	r2, [pc, #360]	@ (800b080 <HAL_GPIO_Init+0x2e4>)
 800af16:	f043 0301 	orr.w	r3, r3, #1
 800af1a:	6613      	str	r3, [r2, #96]	@ 0x60
 800af1c:	4b58      	ldr	r3, [pc, #352]	@ (800b080 <HAL_GPIO_Init+0x2e4>)
 800af1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	60bb      	str	r3, [r7, #8]
 800af26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af28:	4a56      	ldr	r2, [pc, #344]	@ (800b084 <HAL_GPIO_Init+0x2e8>)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	089b      	lsrs	r3, r3, #2
 800af2e:	3302      	adds	r3, #2
 800af30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f003 0303 	and.w	r3, r3, #3
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	220f      	movs	r2, #15
 800af40:	fa02 f303 	lsl.w	r3, r2, r3
 800af44:	43db      	mvns	r3, r3
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	4013      	ands	r3, r2
 800af4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800af52:	d01f      	beq.n	800af94 <HAL_GPIO_Init+0x1f8>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a4c      	ldr	r2, [pc, #304]	@ (800b088 <HAL_GPIO_Init+0x2ec>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d019      	beq.n	800af90 <HAL_GPIO_Init+0x1f4>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a4b      	ldr	r2, [pc, #300]	@ (800b08c <HAL_GPIO_Init+0x2f0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d013      	beq.n	800af8c <HAL_GPIO_Init+0x1f0>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a4a      	ldr	r2, [pc, #296]	@ (800b090 <HAL_GPIO_Init+0x2f4>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d00d      	beq.n	800af88 <HAL_GPIO_Init+0x1ec>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a49      	ldr	r2, [pc, #292]	@ (800b094 <HAL_GPIO_Init+0x2f8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d007      	beq.n	800af84 <HAL_GPIO_Init+0x1e8>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a48      	ldr	r2, [pc, #288]	@ (800b098 <HAL_GPIO_Init+0x2fc>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d101      	bne.n	800af80 <HAL_GPIO_Init+0x1e4>
 800af7c:	2305      	movs	r3, #5
 800af7e:	e00a      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af80:	2306      	movs	r3, #6
 800af82:	e008      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af84:	2304      	movs	r3, #4
 800af86:	e006      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af88:	2303      	movs	r3, #3
 800af8a:	e004      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e002      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <HAL_GPIO_Init+0x1fa>
 800af94:	2300      	movs	r3, #0
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	f002 0203 	and.w	r2, r2, #3
 800af9c:	0092      	lsls	r2, r2, #2
 800af9e:	4093      	lsls	r3, r2
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800afa6:	4937      	ldr	r1, [pc, #220]	@ (800b084 <HAL_GPIO_Init+0x2e8>)
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	089b      	lsrs	r3, r3, #2
 800afac:	3302      	adds	r3, #2
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800afb4:	4b39      	ldr	r3, [pc, #228]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	43db      	mvns	r3, r3
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	4013      	ands	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800afd8:	4a30      	ldr	r2, [pc, #192]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800afde:	4b2f      	ldr	r3, [pc, #188]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	43db      	mvns	r3, r3
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4013      	ands	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4313      	orrs	r3, r2
 800b000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b002:	4a26      	ldr	r2, [pc, #152]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b008:	4b24      	ldr	r3, [pc, #144]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	43db      	mvns	r3, r3
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	4013      	ands	r3, r2
 800b016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b02c:	4a1b      	ldr	r2, [pc, #108]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b032:	4b1a      	ldr	r3, [pc, #104]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	43db      	mvns	r3, r3
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4013      	ands	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b056:	4a11      	ldr	r2, [pc, #68]	@ (800b09c <HAL_GPIO_Init+0x300>)
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	3301      	adds	r3, #1
 800b060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	fa22 f303 	lsr.w	r3, r2, r3
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f ae9d 	bne.w	800adac <HAL_GPIO_Init+0x10>
  }
}
 800b072:	bf00      	nop
 800b074:	bf00      	nop
 800b076:	371c      	adds	r7, #28
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	40021000 	.word	0x40021000
 800b084:	40010000 	.word	0x40010000
 800b088:	48000400 	.word	0x48000400
 800b08c:	48000800 	.word	0x48000800
 800b090:	48000c00 	.word	0x48000c00
 800b094:	48001000 	.word	0x48001000
 800b098:	48001400 	.word	0x48001400
 800b09c:	40010400 	.word	0x40010400

0800b0a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	887b      	ldrh	r3, [r7, #2]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e001      	b.n	800b0c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	807b      	strh	r3, [r7, #2]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b0e0:	787b      	ldrb	r3, [r7, #1]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b0e6:	887a      	ldrh	r2, [r7, #2]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b0ec:	e002      	b.n	800b0f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b0ee:	887a      	ldrh	r2, [r7, #2]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4013      	ands	r3, r2
 800b118:	041a      	lsls	r2, r3, #16
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	43d9      	mvns	r1, r3
 800b11e:	887b      	ldrh	r3, [r7, #2]
 800b120:	400b      	ands	r3, r1
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	619a      	str	r2, [r3, #24]
}
 800b128:	bf00      	nop
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b13e:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b140:	695a      	ldr	r2, [r3, #20]
 800b142:	88fb      	ldrh	r3, [r7, #6]
 800b144:	4013      	ands	r3, r2
 800b146:	2b00      	cmp	r3, #0
 800b148:	d006      	beq.n	800b158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b14a:	4a05      	ldr	r2, [pc, #20]	@ (800b160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b150:	88fb      	ldrh	r3, [r7, #6]
 800b152:	4618      	mov	r0, r3
 800b154:	f7fb fe66 	bl	8006e24 <HAL_GPIO_EXTI_Callback>
  }
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	40010400 	.word	0x40010400

0800b164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d141      	bne.n	800b1f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b172:	4b4b      	ldr	r3, [pc, #300]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b17a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b17e:	d131      	bne.n	800b1e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b180:	4b47      	ldr	r3, [pc, #284]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b186:	4a46      	ldr	r2, [pc, #280]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b18c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b190:	4b43      	ldr	r3, [pc, #268]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b198:	4a41      	ldr	r2, [pc, #260]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b19a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b19e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b1a0:	4b40      	ldr	r3, [pc, #256]	@ (800b2a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2232      	movs	r2, #50	@ 0x32
 800b1a6:	fb02 f303 	mul.w	r3, r2, r3
 800b1aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b0:	0c9b      	lsrs	r3, r3, #18
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b1b6:	e002      	b.n	800b1be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b1be:	4b38      	ldr	r3, [pc, #224]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1ca:	d102      	bne.n	800b1d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f2      	bne.n	800b1b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1d2:	4b33      	ldr	r3, [pc, #204]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1de:	d158      	bne.n	800b292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e057      	b.n	800b294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ea:	4a2d      	ldr	r2, [pc, #180]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b1f4:	e04d      	b.n	800b292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1fc:	d141      	bne.n	800b282 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b1fe:	4b28      	ldr	r3, [pc, #160]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b20a:	d131      	bne.n	800b270 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b20c:	4b24      	ldr	r3, [pc, #144]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b212:	4a23      	ldr	r2, [pc, #140]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b21c:	4b20      	ldr	r3, [pc, #128]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b224:	4a1e      	ldr	r2, [pc, #120]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b22a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b22c:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2232      	movs	r2, #50	@ 0x32
 800b232:	fb02 f303 	mul.w	r3, r2, r3
 800b236:	4a1c      	ldr	r2, [pc, #112]	@ (800b2a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b238:	fba2 2303 	umull	r2, r3, r2, r3
 800b23c:	0c9b      	lsrs	r3, r3, #18
 800b23e:	3301      	adds	r3, #1
 800b240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b242:	e002      	b.n	800b24a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3b01      	subs	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b24a:	4b15      	ldr	r3, [pc, #84]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b256:	d102      	bne.n	800b25e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1f2      	bne.n	800b244 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b25e:	4b10      	ldr	r3, [pc, #64]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b26a:	d112      	bne.n	800b292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e011      	b.n	800b294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b270:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b276:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b27c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b280:	e007      	b.n	800b292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b282:	4b07      	ldr	r3, [pc, #28]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b28a:	4a05      	ldr	r2, [pc, #20]	@ (800b2a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b28c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b290:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	40007000 	.word	0x40007000
 800b2a4:	20000138 	.word	0x20000138
 800b2a8:	431bde83 	.word	0x431bde83

0800b2ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b2b0:	4b05      	ldr	r3, [pc, #20]	@ (800b2c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	4a04      	ldr	r2, [pc, #16]	@ (800b2c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b2b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b2ba:	6093      	str	r3, [r2, #8]
}
 800b2bc:	bf00      	nop
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	40007000 	.word	0x40007000

0800b2cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e2fe      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d075      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2ea:	4b97      	ldr	r3, [pc, #604]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f003 030c 	and.w	r3, r3, #12
 800b2f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2f4:	4b94      	ldr	r3, [pc, #592]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b0c      	cmp	r3, #12
 800b302:	d102      	bne.n	800b30a <HAL_RCC_OscConfig+0x3e>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d002      	beq.n	800b310 <HAL_RCC_OscConfig+0x44>
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d10b      	bne.n	800b328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b310:	4b8d      	ldr	r3, [pc, #564]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d05b      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x108>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d157      	bne.n	800b3d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e2d9      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b330:	d106      	bne.n	800b340 <HAL_RCC_OscConfig+0x74>
 800b332:	4b85      	ldr	r3, [pc, #532]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a84      	ldr	r2, [pc, #528]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	e01d      	b.n	800b37c <HAL_RCC_OscConfig+0xb0>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b348:	d10c      	bne.n	800b364 <HAL_RCC_OscConfig+0x98>
 800b34a:	4b7f      	ldr	r3, [pc, #508]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a7e      	ldr	r2, [pc, #504]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4b7c      	ldr	r3, [pc, #496]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a7b      	ldr	r2, [pc, #492]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b35c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	e00b      	b.n	800b37c <HAL_RCC_OscConfig+0xb0>
 800b364:	4b78      	ldr	r3, [pc, #480]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a77      	ldr	r2, [pc, #476]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b36a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	4b75      	ldr	r3, [pc, #468]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a74      	ldr	r2, [pc, #464]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b37a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d013      	beq.n	800b3ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b384:	f7fd fc44 	bl	8008c10 <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b38c:	f7fd fc40 	bl	8008c10 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b64      	cmp	r3, #100	@ 0x64
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e29e      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b39e:	4b6a      	ldr	r3, [pc, #424]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0f0      	beq.n	800b38c <HAL_RCC_OscConfig+0xc0>
 800b3aa:	e014      	b.n	800b3d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ac:	f7fd fc30 	bl	8008c10 <HAL_GetTick>
 800b3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3b2:	e008      	b.n	800b3c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3b4:	f7fd fc2c 	bl	8008c10 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b64      	cmp	r3, #100	@ 0x64
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e28a      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3c6:	4b60      	ldr	r3, [pc, #384]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f0      	bne.n	800b3b4 <HAL_RCC_OscConfig+0xe8>
 800b3d2:	e000      	b.n	800b3d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 0302 	and.w	r3, r3, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d075      	beq.n	800b4ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3e2:	4b59      	ldr	r3, [pc, #356]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f003 030c 	and.w	r3, r3, #12
 800b3ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b3ec:	4b56      	ldr	r3, [pc, #344]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2b0c      	cmp	r3, #12
 800b3fa:	d102      	bne.n	800b402 <HAL_RCC_OscConfig+0x136>
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d002      	beq.n	800b408 <HAL_RCC_OscConfig+0x13c>
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2b04      	cmp	r3, #4
 800b406:	d11f      	bne.n	800b448 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b408:	4b4f      	ldr	r3, [pc, #316]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <HAL_RCC_OscConfig+0x154>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e25d      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b420:	4b49      	ldr	r3, [pc, #292]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	061b      	lsls	r3, r3, #24
 800b42e:	4946      	ldr	r1, [pc, #280]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b430:	4313      	orrs	r3, r2
 800b432:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b434:	4b45      	ldr	r3, [pc, #276]	@ (800b54c <HAL_RCC_OscConfig+0x280>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fd fb9d 	bl	8008b78 <HAL_InitTick>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d043      	beq.n	800b4cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e249      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d023      	beq.n	800b498 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b450:	4b3d      	ldr	r3, [pc, #244]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a3c      	ldr	r2, [pc, #240]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b45a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b45c:	f7fd fbd8 	bl	8008c10 <HAL_GetTick>
 800b460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b464:	f7fd fbd4 	bl	8008c10 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e232      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b476:	4b34      	ldr	r3, [pc, #208]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0f0      	beq.n	800b464 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b482:	4b31      	ldr	r3, [pc, #196]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	061b      	lsls	r3, r3, #24
 800b490:	492d      	ldr	r1, [pc, #180]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b492:	4313      	orrs	r3, r2
 800b494:	604b      	str	r3, [r1, #4]
 800b496:	e01a      	b.n	800b4ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b498:	4b2b      	ldr	r3, [pc, #172]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a2a      	ldr	r2, [pc, #168]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b49e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a4:	f7fd fbb4 	bl	8008c10 <HAL_GetTick>
 800b4a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4aa:	e008      	b.n	800b4be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4ac:	f7fd fbb0 	bl	8008c10 <HAL_GetTick>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d901      	bls.n	800b4be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e20e      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4be:	4b22      	ldr	r3, [pc, #136]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f0      	bne.n	800b4ac <HAL_RCC_OscConfig+0x1e0>
 800b4ca:	e000      	b.n	800b4ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d041      	beq.n	800b55e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d01c      	beq.n	800b51c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4e2:	4b19      	ldr	r3, [pc, #100]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b4e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4e8:	4a17      	ldr	r2, [pc, #92]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b4ea:	f043 0301 	orr.w	r3, r3, #1
 800b4ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4f2:	f7fd fb8d 	bl	8008c10 <HAL_GetTick>
 800b4f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4f8:	e008      	b.n	800b50c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4fa:	f7fd fb89 	bl	8008c10 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d901      	bls.n	800b50c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e1e7      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b50c:	4b0e      	ldr	r3, [pc, #56]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0ef      	beq.n	800b4fa <HAL_RCC_OscConfig+0x22e>
 800b51a:	e020      	b.n	800b55e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b51c:	4b0a      	ldr	r3, [pc, #40]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b51e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b522:	4a09      	ldr	r2, [pc, #36]	@ (800b548 <HAL_RCC_OscConfig+0x27c>)
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b52c:	f7fd fb70 	bl	8008c10 <HAL_GetTick>
 800b530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b532:	e00d      	b.n	800b550 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b534:	f7fd fb6c 	bl	8008c10 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d906      	bls.n	800b550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e1ca      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
 800b546:	bf00      	nop
 800b548:	40021000 	.word	0x40021000
 800b54c:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b550:	4b8c      	ldr	r3, [pc, #560]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1ea      	bne.n	800b534 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 80a6 	beq.w	800b6b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b56c:	2300      	movs	r3, #0
 800b56e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b570:	4b84      	ldr	r3, [pc, #528]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_RCC_OscConfig+0x2b4>
 800b57c:	2301      	movs	r3, #1
 800b57e:	e000      	b.n	800b582 <HAL_RCC_OscConfig+0x2b6>
 800b580:	2300      	movs	r3, #0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00d      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b586:	4b7f      	ldr	r3, [pc, #508]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b58a:	4a7e      	ldr	r2, [pc, #504]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b58c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b590:	6593      	str	r3, [r2, #88]	@ 0x58
 800b592:	4b7c      	ldr	r3, [pc, #496]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5a2:	4b79      	ldr	r3, [pc, #484]	@ (800b788 <HAL_RCC_OscConfig+0x4bc>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d118      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5ae:	4b76      	ldr	r3, [pc, #472]	@ (800b788 <HAL_RCC_OscConfig+0x4bc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a75      	ldr	r2, [pc, #468]	@ (800b788 <HAL_RCC_OscConfig+0x4bc>)
 800b5b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5ba:	f7fd fb29 	bl	8008c10 <HAL_GetTick>
 800b5be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5c0:	e008      	b.n	800b5d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5c2:	f7fd fb25 	bl	8008c10 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d901      	bls.n	800b5d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e183      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5d4:	4b6c      	ldr	r3, [pc, #432]	@ (800b788 <HAL_RCC_OscConfig+0x4bc>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f0      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d108      	bne.n	800b5fa <HAL_RCC_OscConfig+0x32e>
 800b5e8:	4b66      	ldr	r3, [pc, #408]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ee:	4a65      	ldr	r2, [pc, #404]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b5f0:	f043 0301 	orr.w	r3, r3, #1
 800b5f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b5f8:	e024      	b.n	800b644 <HAL_RCC_OscConfig+0x378>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	2b05      	cmp	r3, #5
 800b600:	d110      	bne.n	800b624 <HAL_RCC_OscConfig+0x358>
 800b602:	4b60      	ldr	r3, [pc, #384]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b608:	4a5e      	ldr	r2, [pc, #376]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b60a:	f043 0304 	orr.w	r3, r3, #4
 800b60e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b612:	4b5c      	ldr	r3, [pc, #368]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b618:	4a5a      	ldr	r2, [pc, #360]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b622:	e00f      	b.n	800b644 <HAL_RCC_OscConfig+0x378>
 800b624:	4b57      	ldr	r3, [pc, #348]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b62a:	4a56      	ldr	r2, [pc, #344]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b634:	4b53      	ldr	r3, [pc, #332]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b63a:	4a52      	ldr	r2, [pc, #328]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b63c:	f023 0304 	bic.w	r3, r3, #4
 800b640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d016      	beq.n	800b67a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b64c:	f7fd fae0 	bl	8008c10 <HAL_GetTick>
 800b650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b652:	e00a      	b.n	800b66a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b654:	f7fd fadc 	bl	8008c10 <HAL_GetTick>
 800b658:	4602      	mov	r2, r0
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b662:	4293      	cmp	r3, r2
 800b664:	d901      	bls.n	800b66a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e138      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b66a:	4b46      	ldr	r3, [pc, #280]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0ed      	beq.n	800b654 <HAL_RCC_OscConfig+0x388>
 800b678:	e015      	b.n	800b6a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b67a:	f7fd fac9 	bl	8008c10 <HAL_GetTick>
 800b67e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b680:	e00a      	b.n	800b698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b682:	f7fd fac5 	bl	8008c10 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b690:	4293      	cmp	r3, r2
 800b692:	d901      	bls.n	800b698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e121      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b698:	4b3a      	ldr	r3, [pc, #232]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1ed      	bne.n	800b682 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6a6:	7ffb      	ldrb	r3, [r7, #31]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d105      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6ac:	4b35      	ldr	r3, [pc, #212]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6b0:	4a34      	ldr	r2, [pc, #208]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b6b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d03c      	beq.n	800b73e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d01c      	beq.n	800b706 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6cc:	4b2d      	ldr	r3, [pc, #180]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b6ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6d2:	4a2c      	ldr	r2, [pc, #176]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b6d4:	f043 0301 	orr.w	r3, r3, #1
 800b6d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6dc:	f7fd fa98 	bl	8008c10 <HAL_GetTick>
 800b6e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6e2:	e008      	b.n	800b6f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6e4:	f7fd fa94 	bl	8008c10 <HAL_GetTick>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e0f2      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6f6:	4b23      	ldr	r3, [pc, #140]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b6f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6fc:	f003 0302 	and.w	r3, r3, #2
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0ef      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x418>
 800b704:	e01b      	b.n	800b73e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b706:	4b1f      	ldr	r3, [pc, #124]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b70c:	4a1d      	ldr	r2, [pc, #116]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b70e:	f023 0301 	bic.w	r3, r3, #1
 800b712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b716:	f7fd fa7b 	bl	8008c10 <HAL_GetTick>
 800b71a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b71c:	e008      	b.n	800b730 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b71e:	f7fd fa77 	bl	8008c10 <HAL_GetTick>
 800b722:	4602      	mov	r2, r0
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d901      	bls.n	800b730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e0d5      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b730:	4b14      	ldr	r3, [pc, #80]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ef      	bne.n	800b71e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80c9 	beq.w	800b8da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b748:	4b0e      	ldr	r3, [pc, #56]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f003 030c 	and.w	r3, r3, #12
 800b750:	2b0c      	cmp	r3, #12
 800b752:	f000 8083 	beq.w	800b85c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	69db      	ldr	r3, [r3, #28]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d15e      	bne.n	800b81c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b75e:	4b09      	ldr	r3, [pc, #36]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a08      	ldr	r2, [pc, #32]	@ (800b784 <HAL_RCC_OscConfig+0x4b8>)
 800b764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b76a:	f7fd fa51 	bl	8008c10 <HAL_GetTick>
 800b76e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b770:	e00c      	b.n	800b78c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b772:	f7fd fa4d 	bl	8008c10 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d905      	bls.n	800b78c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e0ab      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
 800b784:	40021000 	.word	0x40021000
 800b788:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b78c:	4b55      	ldr	r3, [pc, #340]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1ec      	bne.n	800b772 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b798:	4b52      	ldr	r3, [pc, #328]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	4b52      	ldr	r3, [pc, #328]	@ (800b8e8 <HAL_RCC_OscConfig+0x61c>)
 800b79e:	4013      	ands	r3, r2
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	6a11      	ldr	r1, [r2, #32]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b7a8:	3a01      	subs	r2, #1
 800b7aa:	0112      	lsls	r2, r2, #4
 800b7ac:	4311      	orrs	r1, r2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b7b2:	0212      	lsls	r2, r2, #8
 800b7b4:	4311      	orrs	r1, r2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b7ba:	0852      	lsrs	r2, r2, #1
 800b7bc:	3a01      	subs	r2, #1
 800b7be:	0552      	lsls	r2, r2, #21
 800b7c0:	4311      	orrs	r1, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b7c6:	0852      	lsrs	r2, r2, #1
 800b7c8:	3a01      	subs	r2, #1
 800b7ca:	0652      	lsls	r2, r2, #25
 800b7cc:	4311      	orrs	r1, r2
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b7d2:	06d2      	lsls	r2, r2, #27
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	4943      	ldr	r1, [pc, #268]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7dc:	4b41      	ldr	r3, [pc, #260]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a40      	ldr	r2, [pc, #256]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b7e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	4a3d      	ldr	r2, [pc, #244]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b7ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f4:	f7fd fa0c 	bl	8008c10 <HAL_GetTick>
 800b7f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7fa:	e008      	b.n	800b80e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7fc:	f7fd fa08 	bl	8008c10 <HAL_GetTick>
 800b800:	4602      	mov	r2, r0
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b02      	cmp	r3, #2
 800b808:	d901      	bls.n	800b80e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e066      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b80e:	4b35      	ldr	r3, [pc, #212]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0f0      	beq.n	800b7fc <HAL_RCC_OscConfig+0x530>
 800b81a:	e05e      	b.n	800b8da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b81c:	4b31      	ldr	r3, [pc, #196]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a30      	ldr	r2, [pc, #192]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b828:	f7fd f9f2 	bl	8008c10 <HAL_GetTick>
 800b82c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b82e:	e008      	b.n	800b842 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b830:	f7fd f9ee 	bl	8008c10 <HAL_GetTick>
 800b834:	4602      	mov	r2, r0
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d901      	bls.n	800b842 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	e04c      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b842:	4b28      	ldr	r3, [pc, #160]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1f0      	bne.n	800b830 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b84e:	4b25      	ldr	r3, [pc, #148]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	4924      	ldr	r1, [pc, #144]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b854:	4b25      	ldr	r3, [pc, #148]	@ (800b8ec <HAL_RCC_OscConfig+0x620>)
 800b856:	4013      	ands	r3, r2
 800b858:	60cb      	str	r3, [r1, #12]
 800b85a:	e03e      	b.n	800b8da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e039      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b868:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e4 <HAL_RCC_OscConfig+0x618>)
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f003 0203 	and.w	r2, r3, #3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d12c      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b886:	3b01      	subs	r3, #1
 800b888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d123      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b898:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d11b      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d113      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b8:	085b      	lsrs	r3, r3, #1
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d109      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8cc:	085b      	lsrs	r3, r3, #1
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d001      	beq.n	800b8da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	40021000 	.word	0x40021000
 800b8e8:	019f800c 	.word	0x019f800c
 800b8ec:	feeefffc 	.word	0xfeeefffc

0800b8f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e11e      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b908:	4b91      	ldr	r3, [pc, #580]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d910      	bls.n	800b938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b916:	4b8e      	ldr	r3, [pc, #568]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f023 020f 	bic.w	r2, r3, #15
 800b91e:	498c      	ldr	r1, [pc, #560]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	4313      	orrs	r3, r2
 800b924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b926:	4b8a      	ldr	r3, [pc, #552]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d001      	beq.n	800b938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e106      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d073      	beq.n	800ba2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d129      	bne.n	800b9a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b94c:	4b81      	ldr	r3, [pc, #516]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e0f4      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b95c:	f000 f99e 	bl	800bc9c <RCC_GetSysClockFreqFromPLLSource>
 800b960:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	4a7c      	ldr	r2, [pc, #496]	@ (800bb58 <HAL_RCC_ClockConfig+0x268>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d93f      	bls.n	800b9ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b96a:	4b7a      	ldr	r3, [pc, #488]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d033      	beq.n	800b9ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b986:	2b00      	cmp	r3, #0
 800b988:	d12f      	bne.n	800b9ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b98a:	4b72      	ldr	r3, [pc, #456]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b992:	4a70      	ldr	r2, [pc, #448]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b998:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b99a:	2380      	movs	r3, #128	@ 0x80
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	e024      	b.n	800b9ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d107      	bne.n	800b9b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b9a8:	4b6a      	ldr	r3, [pc, #424]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d109      	bne.n	800b9c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e0c6      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9b8:	4b66      	ldr	r3, [pc, #408]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e0be      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b9c8:	f000 f8ce 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800b9cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	4a61      	ldr	r2, [pc, #388]	@ (800bb58 <HAL_RCC_ClockConfig+0x268>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d909      	bls.n	800b9ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b9d6:	4b5f      	ldr	r3, [pc, #380]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b9de:	4a5d      	ldr	r2, [pc, #372]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b9e6:	2380      	movs	r3, #128	@ 0x80
 800b9e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b9ea:	4b5a      	ldr	r3, [pc, #360]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	f023 0203 	bic.w	r2, r3, #3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	4957      	ldr	r1, [pc, #348]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fc:	f7fd f908 	bl	8008c10 <HAL_GetTick>
 800ba00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba02:	e00a      	b.n	800ba1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba04:	f7fd f904 	bl	8008c10 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d901      	bls.n	800ba1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e095      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba1a:	4b4e      	ldr	r3, [pc, #312]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f003 020c 	and.w	r2, r3, #12
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d1eb      	bne.n	800ba04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d023      	beq.n	800ba80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d005      	beq.n	800ba50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba44:	4b43      	ldr	r3, [pc, #268]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	4a42      	ldr	r2, [pc, #264]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ba4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ba5c:	4b3d      	ldr	r3, [pc, #244]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ba64:	4a3b      	ldr	r2, [pc, #236]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ba6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba6c:	4b39      	ldr	r3, [pc, #228]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	4936      	ldr	r1, [pc, #216]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	608b      	str	r3, [r1, #8]
 800ba7e:	e008      	b.n	800ba92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b80      	cmp	r3, #128	@ 0x80
 800ba84:	d105      	bne.n	800ba92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ba86:	4b33      	ldr	r3, [pc, #204]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	4a32      	ldr	r2, [pc, #200]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800ba8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba92:	4b2f      	ldr	r3, [pc, #188]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 030f 	and.w	r3, r3, #15
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d21d      	bcs.n	800badc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baa0:	4b2b      	ldr	r3, [pc, #172]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f023 020f 	bic.w	r2, r3, #15
 800baa8:	4929      	ldr	r1, [pc, #164]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	4313      	orrs	r3, r2
 800baae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bab0:	f7fd f8ae 	bl	8008c10 <HAL_GetTick>
 800bab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bab6:	e00a      	b.n	800bace <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bab8:	f7fd f8aa 	bl	8008c10 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d901      	bls.n	800bace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e03b      	b.n	800bb46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bace:	4b20      	ldr	r3, [pc, #128]	@ (800bb50 <HAL_RCC_ClockConfig+0x260>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d1ed      	bne.n	800bab8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d008      	beq.n	800bafa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bae8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4917      	ldr	r1, [pc, #92]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0308 	and.w	r3, r3, #8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb06:	4b13      	ldr	r3, [pc, #76]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	490f      	ldr	r1, [pc, #60]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb1a:	f000 f825 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	4b0c      	ldr	r3, [pc, #48]	@ (800bb54 <HAL_RCC_ClockConfig+0x264>)
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	091b      	lsrs	r3, r3, #4
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	490c      	ldr	r1, [pc, #48]	@ (800bb5c <HAL_RCC_ClockConfig+0x26c>)
 800bb2c:	5ccb      	ldrb	r3, [r1, r3]
 800bb2e:	f003 031f 	and.w	r3, r3, #31
 800bb32:	fa22 f303 	lsr.w	r3, r2, r3
 800bb36:	4a0a      	ldr	r2, [pc, #40]	@ (800bb60 <HAL_RCC_ClockConfig+0x270>)
 800bb38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb64 <HAL_RCC_ClockConfig+0x274>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fd f81a 	bl	8008b78 <HAL_InitTick>
 800bb44:	4603      	mov	r3, r0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	40022000 	.word	0x40022000
 800bb54:	40021000 	.word	0x40021000
 800bb58:	04c4b400 	.word	0x04c4b400
 800bb5c:	08012a88 	.word	0x08012a88
 800bb60:	20000138 	.word	0x20000138
 800bb64:	2000013c 	.word	0x2000013c

0800bb68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bb6e:	4b2c      	ldr	r3, [pc, #176]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f003 030c 	and.w	r3, r3, #12
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d102      	bne.n	800bb80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bb7a:	4b2a      	ldr	r3, [pc, #168]	@ (800bc24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	e047      	b.n	800bc10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bb80:	4b27      	ldr	r3, [pc, #156]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f003 030c 	and.w	r3, r3, #12
 800bb88:	2b08      	cmp	r3, #8
 800bb8a:	d102      	bne.n	800bb92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bb8c:	4b26      	ldr	r3, [pc, #152]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	e03e      	b.n	800bc10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bb92:	4b23      	ldr	r3, [pc, #140]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f003 030c 	and.w	r3, r3, #12
 800bb9a:	2b0c      	cmp	r3, #12
 800bb9c:	d136      	bne.n	800bc0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb9e:	4b20      	ldr	r3, [pc, #128]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bba8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	091b      	lsrs	r3, r3, #4
 800bbae:	f003 030f 	and.w	r3, r3, #15
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d10c      	bne.n	800bbd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bbbc:	4a1a      	ldr	r2, [pc, #104]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc4:	4a16      	ldr	r2, [pc, #88]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbc6:	68d2      	ldr	r2, [r2, #12]
 800bbc8:	0a12      	lsrs	r2, r2, #8
 800bbca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bbce:	fb02 f303 	mul.w	r3, r2, r3
 800bbd2:	617b      	str	r3, [r7, #20]
      break;
 800bbd4:	e00c      	b.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bbd6:	4a13      	ldr	r2, [pc, #76]	@ (800bc24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbde:	4a10      	ldr	r2, [pc, #64]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbe0:	68d2      	ldr	r2, [r2, #12]
 800bbe2:	0a12      	lsrs	r2, r2, #8
 800bbe4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	617b      	str	r3, [r7, #20]
      break;
 800bbee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	0e5b      	lsrs	r3, r3, #25
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	e001      	b.n	800bc10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bc10:	693b      	ldr	r3, [r7, #16]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	40021000 	.word	0x40021000
 800bc24:	00f42400 	.word	0x00f42400
 800bc28:	016e3600 	.word	0x016e3600

0800bc2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc30:	4b03      	ldr	r3, [pc, #12]	@ (800bc40 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc32:	681b      	ldr	r3, [r3, #0]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	20000138 	.word	0x20000138

0800bc44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bc48:	f7ff fff0 	bl	800bc2c <HAL_RCC_GetHCLKFreq>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	4b06      	ldr	r3, [pc, #24]	@ (800bc68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	0a1b      	lsrs	r3, r3, #8
 800bc54:	f003 0307 	and.w	r3, r3, #7
 800bc58:	4904      	ldr	r1, [pc, #16]	@ (800bc6c <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc5a:	5ccb      	ldrb	r3, [r1, r3]
 800bc5c:	f003 031f 	and.w	r3, r3, #31
 800bc60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40021000 	.word	0x40021000
 800bc6c:	08012a98 	.word	0x08012a98

0800bc70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bc74:	f7ff ffda 	bl	800bc2c <HAL_RCC_GetHCLKFreq>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	4b06      	ldr	r3, [pc, #24]	@ (800bc94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	0adb      	lsrs	r3, r3, #11
 800bc80:	f003 0307 	and.w	r3, r3, #7
 800bc84:	4904      	ldr	r1, [pc, #16]	@ (800bc98 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bc86:	5ccb      	ldrb	r3, [r1, r3]
 800bc88:	f003 031f 	and.w	r3, r3, #31
 800bc8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	40021000 	.word	0x40021000
 800bc98:	08012a98 	.word	0x08012a98

0800bc9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bca2:	4b1e      	ldr	r3, [pc, #120]	@ (800bd1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	f003 0303 	and.w	r3, r3, #3
 800bcaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bcac:	4b1b      	ldr	r3, [pc, #108]	@ (800bd1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	091b      	lsrs	r3, r3, #4
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d10c      	bne.n	800bcda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bcc0:	4a17      	ldr	r2, [pc, #92]	@ (800bd20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc8:	4a14      	ldr	r2, [pc, #80]	@ (800bd1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcca:	68d2      	ldr	r2, [r2, #12]
 800bccc:	0a12      	lsrs	r2, r2, #8
 800bcce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	617b      	str	r3, [r7, #20]
    break;
 800bcd8:	e00c      	b.n	800bcf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bcda:	4a12      	ldr	r2, [pc, #72]	@ (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce2:	4a0e      	ldr	r2, [pc, #56]	@ (800bd1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bce4:	68d2      	ldr	r2, [r2, #12]
 800bce6:	0a12      	lsrs	r2, r2, #8
 800bce8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bcec:	fb02 f303 	mul.w	r3, r2, r3
 800bcf0:	617b      	str	r3, [r7, #20]
    break;
 800bcf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bcf4:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	0e5b      	lsrs	r3, r3, #25
 800bcfa:	f003 0303 	and.w	r3, r3, #3
 800bcfe:	3301      	adds	r3, #1
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bd0e:	687b      	ldr	r3, [r7, #4]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	371c      	adds	r7, #28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	40021000 	.word	0x40021000
 800bd20:	016e3600 	.word	0x016e3600
 800bd24:	00f42400 	.word	0x00f42400

0800bd28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd30:	2300      	movs	r3, #0
 800bd32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd34:	2300      	movs	r3, #0
 800bd36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 8098 	beq.w	800be76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd46:	2300      	movs	r3, #0
 800bd48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd4a:	4b43      	ldr	r3, [pc, #268]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10d      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd56:	4b40      	ldr	r3, [pc, #256]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd5a:	4a3f      	ldr	r2, [pc, #252]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd60:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd62:	4b3d      	ldr	r3, [pc, #244]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd6a:	60bb      	str	r3, [r7, #8]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd72:	4b3a      	ldr	r3, [pc, #232]	@ (800be5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a39      	ldr	r2, [pc, #228]	@ (800be5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bd78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd7e:	f7fc ff47 	bl	8008c10 <HAL_GetTick>
 800bd82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd84:	e009      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd86:	f7fc ff43 	bl	8008c10 <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d902      	bls.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	74fb      	strb	r3, [r7, #19]
        break;
 800bd98:	e005      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd9a:	4b30      	ldr	r3, [pc, #192]	@ (800be5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0ef      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bda6:	7cfb      	ldrb	r3, [r7, #19]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d159      	bne.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bdac:	4b2a      	ldr	r3, [pc, #168]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d01e      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d019      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bdc8:	4b23      	ldr	r3, [pc, #140]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdd4:	4b20      	ldr	r3, [pc, #128]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdda:	4a1f      	ldr	r2, [pc, #124]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bde0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bde4:	4b1c      	ldr	r3, [pc, #112]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdea:	4a1b      	ldr	r2, [pc, #108]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bdf4:	4a18      	ldr	r2, [pc, #96]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d016      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be06:	f7fc ff03 	bl	8008c10 <HAL_GetTick>
 800be0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be0c:	e00b      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be0e:	f7fc feff 	bl	8008c10 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d902      	bls.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	74fb      	strb	r3, [r7, #19]
            break;
 800be24:	e006      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be26:	4b0c      	ldr	r3, [pc, #48]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0ec      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800be34:	7cfb      	ldrb	r3, [r7, #19]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10b      	bne.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be3a:	4b07      	ldr	r3, [pc, #28]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be48:	4903      	ldr	r1, [pc, #12]	@ (800be58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800be50:	e008      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be52:	7cfb      	ldrb	r3, [r7, #19]
 800be54:	74bb      	strb	r3, [r7, #18]
 800be56:	e005      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800be58:	40021000 	.word	0x40021000
 800be5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be60:	7cfb      	ldrb	r3, [r7, #19]
 800be62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be64:	7c7b      	ldrb	r3, [r7, #17]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d105      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be6a:	4ba7      	ldr	r3, [pc, #668]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be6e:	4aa6      	ldr	r2, [pc, #664]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be82:	4ba1      	ldr	r3, [pc, #644]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be88:	f023 0203 	bic.w	r2, r3, #3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	499d      	ldr	r1, [pc, #628]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be92:	4313      	orrs	r3, r2
 800be94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00a      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bea4:	4b98      	ldr	r3, [pc, #608]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beaa:	f023 020c 	bic.w	r2, r3, #12
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	4995      	ldr	r1, [pc, #596]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0304 	and.w	r3, r3, #4
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bec6:	4b90      	ldr	r3, [pc, #576]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800becc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	498c      	ldr	r1, [pc, #560]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0308 	and.w	r3, r3, #8
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00a      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bee8:	4b87      	ldr	r3, [pc, #540]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	4984      	ldr	r1, [pc, #528]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bef8:	4313      	orrs	r3, r2
 800befa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0310 	and.w	r3, r3, #16
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf0a:	4b7f      	ldr	r3, [pc, #508]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	497b      	ldr	r1, [pc, #492]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0320 	and.w	r3, r3, #32
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf2c:	4b76      	ldr	r3, [pc, #472]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	4973      	ldr	r1, [pc, #460]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf4e:	4b6e      	ldr	r3, [pc, #440]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	496a      	ldr	r1, [pc, #424]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf70:	4b65      	ldr	r3, [pc, #404]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	4962      	ldr	r1, [pc, #392]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf80:	4313      	orrs	r3, r2
 800bf82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf92:	4b5d      	ldr	r3, [pc, #372]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa0:	4959      	ldr	r1, [pc, #356]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00a      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bfb4:	4b54      	ldr	r3, [pc, #336]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bfba:	f023 0203 	bic.w	r2, r3, #3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc2:	4951      	ldr	r1, [pc, #324]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00a      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfd6:	4b4c      	ldr	r3, [pc, #304]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe4:	4948      	ldr	r1, [pc, #288]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d015      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bff8:	4b43      	ldr	r3, [pc, #268]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c006:	4940      	ldr	r1, [pc, #256]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c008:	4313      	orrs	r3, r2
 800c00a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c016:	d105      	bne.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c018:	4b3b      	ldr	r3, [pc, #236]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	4a3a      	ldr	r2, [pc, #232]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c01e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c022:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d015      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c030:	4b35      	ldr	r3, [pc, #212]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c036:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c03e:	4932      	ldr	r1, [pc, #200]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c040:	4313      	orrs	r3, r2
 800c042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c04a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c04e:	d105      	bne.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c050:	4b2d      	ldr	r3, [pc, #180]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	4a2c      	ldr	r2, [pc, #176]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c05a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d015      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c068:	4b27      	ldr	r3, [pc, #156]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c06e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c076:	4924      	ldr	r1, [pc, #144]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c078:	4313      	orrs	r3, r2
 800c07a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c086:	d105      	bne.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c088:	4b1f      	ldr	r3, [pc, #124]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	4a1e      	ldr	r2, [pc, #120]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c08e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d015      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c0a0:	4b19      	ldr	r3, [pc, #100]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ae:	4916      	ldr	r1, [pc, #88]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0be:	d105      	bne.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0c0:	4b11      	ldr	r3, [pc, #68]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	4a10      	ldr	r2, [pc, #64]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d019      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e6:	4908      	ldr	r1, [pc, #32]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0f6:	d109      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0f8:	4b03      	ldr	r3, [pc, #12]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	4a02      	ldr	r2, [pc, #8]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c102:	60d3      	str	r3, [r2, #12]
 800c104:	e002      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c106:	bf00      	nop
 800c108:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d015      	beq.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c118:	4b29      	ldr	r3, [pc, #164]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c11e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c126:	4926      	ldr	r1, [pc, #152]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c136:	d105      	bne.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c138:	4b21      	ldr	r3, [pc, #132]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	4a20      	ldr	r2, [pc, #128]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c13e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c142:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d015      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c150:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c156:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c15e:	4918      	ldr	r1, [pc, #96]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c160:	4313      	orrs	r3, r2
 800c162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c16e:	d105      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c170:	4b13      	ldr	r3, [pc, #76]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	4a12      	ldr	r2, [pc, #72]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c17a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d015      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c188:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c18a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c18e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c196:	490a      	ldr	r1, [pc, #40]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c198:	4313      	orrs	r3, r2
 800c19a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c1a6:	d105      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	4a04      	ldr	r2, [pc, #16]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c1ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c1b4:	7cbb      	ldrb	r3, [r7, #18]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	40021000 	.word	0x40021000

0800c1c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e054      	b.n	800c280 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d111      	bne.n	800c206 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 fee2 	bl	800dfb4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a23      	ldr	r2, [pc, #140]	@ (800c288 <HAL_TIM_Base_Init+0xc4>)
 800c1fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2202      	movs	r2, #2
 800c20a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3304      	adds	r3, #4
 800c216:	4619      	mov	r1, r3
 800c218:	4610      	mov	r0, r2
 800c21a:	f001 fa2b 	bl	800d674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	08008439 	.word	0x08008439

0800c28c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d001      	beq.n	800c2a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e04c      	b.n	800c33e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a26      	ldr	r2, [pc, #152]	@ (800c34c <HAL_TIM_Base_Start+0xc0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d022      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2be:	d01d      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a22      	ldr	r2, [pc, #136]	@ (800c350 <HAL_TIM_Base_Start+0xc4>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d018      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a21      	ldr	r2, [pc, #132]	@ (800c354 <HAL_TIM_Base_Start+0xc8>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d013      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c358 <HAL_TIM_Base_Start+0xcc>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00e      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c35c <HAL_TIM_Base_Start+0xd0>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d009      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c360 <HAL_TIM_Base_Start+0xd4>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d004      	beq.n	800c2fc <HAL_TIM_Base_Start+0x70>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a1b      	ldr	r2, [pc, #108]	@ (800c364 <HAL_TIM_Base_Start+0xd8>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d115      	bne.n	800c328 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	4b19      	ldr	r3, [pc, #100]	@ (800c368 <HAL_TIM_Base_Start+0xdc>)
 800c304:	4013      	ands	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b06      	cmp	r3, #6
 800c30c:	d015      	beq.n	800c33a <HAL_TIM_Base_Start+0xae>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c314:	d011      	beq.n	800c33a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 0201 	orr.w	r2, r2, #1
 800c324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c326:	e008      	b.n	800c33a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f042 0201 	orr.w	r2, r2, #1
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	e000      	b.n	800c33c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c33a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	40012c00 	.word	0x40012c00
 800c350:	40000400 	.word	0x40000400
 800c354:	40000800 	.word	0x40000800
 800c358:	40000c00 	.word	0x40000c00
 800c35c:	40013400 	.word	0x40013400
 800c360:	40014000 	.word	0x40014000
 800c364:	40015000 	.word	0x40015000
 800c368:	00010007 	.word	0x00010007

0800c36c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d001      	beq.n	800c384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e054      	b.n	800c42e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68da      	ldr	r2, [r3, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0201 	orr.w	r2, r2, #1
 800c39a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a26      	ldr	r2, [pc, #152]	@ (800c43c <HAL_TIM_Base_Start_IT+0xd0>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d022      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ae:	d01d      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a22      	ldr	r2, [pc, #136]	@ (800c440 <HAL_TIM_Base_Start_IT+0xd4>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d018      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a21      	ldr	r2, [pc, #132]	@ (800c444 <HAL_TIM_Base_Start_IT+0xd8>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d013      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a1f      	ldr	r2, [pc, #124]	@ (800c448 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00e      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c44c <HAL_TIM_Base_Start_IT+0xe0>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d009      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c450 <HAL_TIM_Base_Start_IT+0xe4>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x80>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a1b      	ldr	r2, [pc, #108]	@ (800c454 <HAL_TIM_Base_Start_IT+0xe8>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d115      	bne.n	800c418 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	4b19      	ldr	r3, [pc, #100]	@ (800c458 <HAL_TIM_Base_Start_IT+0xec>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b06      	cmp	r3, #6
 800c3fc:	d015      	beq.n	800c42a <HAL_TIM_Base_Start_IT+0xbe>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c404:	d011      	beq.n	800c42a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f042 0201 	orr.w	r2, r2, #1
 800c414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c416:	e008      	b.n	800c42a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f042 0201 	orr.w	r2, r2, #1
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	e000      	b.n	800c42c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c42a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	40012c00 	.word	0x40012c00
 800c440:	40000400 	.word	0x40000400
 800c444:	40000800 	.word	0x40000800
 800c448:	40000c00 	.word	0x40000c00
 800c44c:	40013400 	.word	0x40013400
 800c450:	40014000 	.word	0x40014000
 800c454:	40015000 	.word	0x40015000
 800c458:	00010007 	.word	0x00010007

0800c45c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e054      	b.n	800c518 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	d111      	bne.n	800c49e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 fd96 	bl	800dfb4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a23      	ldr	r2, [pc, #140]	@ (800c520 <HAL_TIM_PWM_Init+0xc4>)
 800c494:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	f001 f8df 	bl	800d674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	080083ed 	.word	0x080083ed

0800c524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d109      	bne.n	800c548 <HAL_TIM_PWM_Start+0x24>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	bf14      	ite	ne
 800c540:	2301      	movne	r3, #1
 800c542:	2300      	moveq	r3, #0
 800c544:	b2db      	uxtb	r3, r3
 800c546:	e03c      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x9e>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d109      	bne.n	800c562 <HAL_TIM_PWM_Start+0x3e>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b01      	cmp	r3, #1
 800c558:	bf14      	ite	ne
 800c55a:	2301      	movne	r3, #1
 800c55c:	2300      	moveq	r3, #0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	e02f      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x9e>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b08      	cmp	r3, #8
 800c566:	d109      	bne.n	800c57c <HAL_TIM_PWM_Start+0x58>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b01      	cmp	r3, #1
 800c572:	bf14      	ite	ne
 800c574:	2301      	movne	r3, #1
 800c576:	2300      	moveq	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	e022      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x9e>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b0c      	cmp	r3, #12
 800c580:	d109      	bne.n	800c596 <HAL_TIM_PWM_Start+0x72>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	bf14      	ite	ne
 800c58e:	2301      	movne	r3, #1
 800c590:	2300      	moveq	r3, #0
 800c592:	b2db      	uxtb	r3, r3
 800c594:	e015      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x9e>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b10      	cmp	r3, #16
 800c59a:	d109      	bne.n	800c5b0 <HAL_TIM_PWM_Start+0x8c>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	bf14      	ite	ne
 800c5a8:	2301      	movne	r3, #1
 800c5aa:	2300      	moveq	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	e008      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x9e>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	bf14      	ite	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	2300      	moveq	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e0a6      	b.n	800c718 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d104      	bne.n	800c5da <HAL_TIM_PWM_Start+0xb6>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5d8:	e023      	b.n	800c622 <HAL_TIM_PWM_Start+0xfe>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d104      	bne.n	800c5ea <HAL_TIM_PWM_Start+0xc6>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5e8:	e01b      	b.n	800c622 <HAL_TIM_PWM_Start+0xfe>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d104      	bne.n	800c5fa <HAL_TIM_PWM_Start+0xd6>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5f8:	e013      	b.n	800c622 <HAL_TIM_PWM_Start+0xfe>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b0c      	cmp	r3, #12
 800c5fe:	d104      	bne.n	800c60a <HAL_TIM_PWM_Start+0xe6>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c608:	e00b      	b.n	800c622 <HAL_TIM_PWM_Start+0xfe>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b10      	cmp	r3, #16
 800c60e:	d104      	bne.n	800c61a <HAL_TIM_PWM_Start+0xf6>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c618:	e003      	b.n	800c622 <HAL_TIM_PWM_Start+0xfe>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2202      	movs	r2, #2
 800c61e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2201      	movs	r2, #1
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 fc9c 	bl	800df68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a3a      	ldr	r2, [pc, #232]	@ (800c720 <HAL_TIM_PWM_Start+0x1fc>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d018      	beq.n	800c66c <HAL_TIM_PWM_Start+0x148>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a39      	ldr	r2, [pc, #228]	@ (800c724 <HAL_TIM_PWM_Start+0x200>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d013      	beq.n	800c66c <HAL_TIM_PWM_Start+0x148>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a37      	ldr	r2, [pc, #220]	@ (800c728 <HAL_TIM_PWM_Start+0x204>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d00e      	beq.n	800c66c <HAL_TIM_PWM_Start+0x148>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a36      	ldr	r2, [pc, #216]	@ (800c72c <HAL_TIM_PWM_Start+0x208>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d009      	beq.n	800c66c <HAL_TIM_PWM_Start+0x148>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a34      	ldr	r2, [pc, #208]	@ (800c730 <HAL_TIM_PWM_Start+0x20c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d004      	beq.n	800c66c <HAL_TIM_PWM_Start+0x148>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a33      	ldr	r2, [pc, #204]	@ (800c734 <HAL_TIM_PWM_Start+0x210>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d101      	bne.n	800c670 <HAL_TIM_PWM_Start+0x14c>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <HAL_TIM_PWM_Start+0x14e>
 800c670:	2300      	movs	r3, #0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d007      	beq.n	800c686 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a25      	ldr	r2, [pc, #148]	@ (800c720 <HAL_TIM_PWM_Start+0x1fc>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d022      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c698:	d01d      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a26      	ldr	r2, [pc, #152]	@ (800c738 <HAL_TIM_PWM_Start+0x214>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d018      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a24      	ldr	r2, [pc, #144]	@ (800c73c <HAL_TIM_PWM_Start+0x218>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d013      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a23      	ldr	r2, [pc, #140]	@ (800c740 <HAL_TIM_PWM_Start+0x21c>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d00e      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a19      	ldr	r2, [pc, #100]	@ (800c724 <HAL_TIM_PWM_Start+0x200>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d009      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a18      	ldr	r2, [pc, #96]	@ (800c728 <HAL_TIM_PWM_Start+0x204>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d004      	beq.n	800c6d6 <HAL_TIM_PWM_Start+0x1b2>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a18      	ldr	r2, [pc, #96]	@ (800c734 <HAL_TIM_PWM_Start+0x210>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d115      	bne.n	800c702 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	689a      	ldr	r2, [r3, #8]
 800c6dc:	4b19      	ldr	r3, [pc, #100]	@ (800c744 <HAL_TIM_PWM_Start+0x220>)
 800c6de:	4013      	ands	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b06      	cmp	r3, #6
 800c6e6:	d015      	beq.n	800c714 <HAL_TIM_PWM_Start+0x1f0>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6ee:	d011      	beq.n	800c714 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f042 0201 	orr.w	r2, r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c700:	e008      	b.n	800c714 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f042 0201 	orr.w	r2, r2, #1
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	e000      	b.n	800c716 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	40012c00 	.word	0x40012c00
 800c724:	40013400 	.word	0x40013400
 800c728:	40014000 	.word	0x40014000
 800c72c:	40014400 	.word	0x40014400
 800c730:	40014800 	.word	0x40014800
 800c734:	40015000 	.word	0x40015000
 800c738:	40000400 	.word	0x40000400
 800c73c:	40000800 	.word	0x40000800
 800c740:	40000c00 	.word	0x40000c00
 800c744:	00010007 	.word	0x00010007

0800c748 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e04c      	b.n	800c7f6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	d111      	bne.n	800c78c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 fc1f 	bl	800dfb4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d102      	bne.n	800c784 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a1f      	ldr	r2, [pc, #124]	@ (800c800 <HAL_TIM_OnePulse_Init+0xb8>)
 800c782:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3304      	adds	r3, #4
 800c79c:	4619      	mov	r1, r3
 800c79e:	4610      	mov	r0, r2
 800c7a0:	f000 ff68 	bl	800d674 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0208 	bic.w	r2, r2, #8
 800c7b2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	0800c805 	.word	0x0800c805

0800c804 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c840:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c842:	7bfb      	ldrb	r3, [r7, #15]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d108      	bne.n	800c85a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c848:	7bbb      	ldrb	r3, [r7, #14]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d105      	bne.n	800c85a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c84e:	7b7b      	ldrb	r3, [r7, #13]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d102      	bne.n	800c85a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c854:	7b3b      	ldrb	r3, [r7, #12]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d001      	beq.n	800c85e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e059      	b.n	800c912 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2202      	movs	r2, #2
 800c862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2202      	movs	r2, #2
 800c86a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2202      	movs	r2, #2
 800c872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2202      	movs	r2, #2
 800c87a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0202 	orr.w	r2, r2, #2
 800c88c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f042 0204 	orr.w	r2, r2, #4
 800c89c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 fb5e 	bl	800df68 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	2104      	movs	r1, #4
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f001 fb57 	bl	800df68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a17      	ldr	r2, [pc, #92]	@ (800c91c <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d018      	beq.n	800c8f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a15      	ldr	r2, [pc, #84]	@ (800c920 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d013      	beq.n	800c8f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a14      	ldr	r2, [pc, #80]	@ (800c924 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00e      	beq.n	800c8f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a12      	ldr	r2, [pc, #72]	@ (800c928 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d009      	beq.n	800c8f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a11      	ldr	r2, [pc, #68]	@ (800c92c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d004      	beq.n	800c8f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c930 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d101      	bne.n	800c8fa <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d007      	beq.n	800c910 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c90e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	40012c00 	.word	0x40012c00
 800c920:	40013400 	.word	0x40013400
 800c924:	40014000 	.word	0x40014000
 800c928:	40014400 	.word	0x40014400
 800c92c:	40014800 	.word	0x40014800
 800c930:	40015000 	.word	0x40015000

0800c934 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e0a2      	b.n	800ca8e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d111      	bne.n	800c978 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fb29 	bl	800dfb4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a4a      	ldr	r2, [pc, #296]	@ (800ca98 <HAL_TIM_Encoder_Init+0x164>)
 800c96e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c98e:	f023 0307 	bic.w	r3, r3, #7
 800c992:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f000 fe68 	bl	800d674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c9ea:	f023 030c 	bic.w	r3, r3, #12
 800c9ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	68da      	ldr	r2, [r3, #12]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	4313      	orrs	r3, r2
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	011a      	lsls	r2, r3, #4
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	031b      	lsls	r3, r3, #12
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ca28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ca30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	080084e1 	.word	0x080084e1

0800ca9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800caac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cab4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cabc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cac4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d110      	bne.n	800caee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d102      	bne.n	800cad8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cad2:	7b7b      	ldrb	r3, [r7, #13]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d001      	beq.n	800cadc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e069      	b.n	800cbb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2202      	movs	r2, #2
 800cae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caec:	e031      	b.n	800cb52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d110      	bne.n	800cb16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d102      	bne.n	800cb00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cafa:	7b3b      	ldrb	r3, [r7, #12]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d001      	beq.n	800cb04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e055      	b.n	800cbb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb14:	e01d      	b.n	800cb52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d108      	bne.n	800cb2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d105      	bne.n	800cb2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb22:	7b7b      	ldrb	r3, [r7, #13]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d102      	bne.n	800cb2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb28:	7b3b      	ldrb	r3, [r7, #12]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d001      	beq.n	800cb32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e03e      	b.n	800cbb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2202      	movs	r2, #2
 800cb36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2202      	movs	r2, #2
 800cb46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d003      	beq.n	800cb60 <HAL_TIM_Encoder_Start+0xc4>
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	d008      	beq.n	800cb70 <HAL_TIM_Encoder_Start+0xd4>
 800cb5e:	e00f      	b.n	800cb80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2201      	movs	r2, #1
 800cb66:	2100      	movs	r1, #0
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f001 f9fd 	bl	800df68 <TIM_CCxChannelCmd>
      break;
 800cb6e:	e016      	b.n	800cb9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2201      	movs	r2, #1
 800cb76:	2104      	movs	r1, #4
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f001 f9f5 	bl	800df68 <TIM_CCxChannelCmd>
      break;
 800cb7e:	e00e      	b.n	800cb9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2201      	movs	r2, #1
 800cb86:	2100      	movs	r1, #0
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f001 f9ed 	bl	800df68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2201      	movs	r2, #1
 800cb94:	2104      	movs	r1, #4
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 f9e6 	bl	800df68 <TIM_CCxChannelCmd>
      break;
 800cb9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f042 0201 	orr.w	r2, r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d026      	beq.n	800cc28 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d021      	beq.n	800cc28 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f06f 0202 	mvn.w	r2, #2
 800cbec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	f003 0303 	and.w	r3, r3, #3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d005      	beq.n	800cc0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	4798      	blx	r3
 800cc0c:	e009      	b.n	800cc22 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f003 0304 	and.w	r3, r3, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d026      	beq.n	800cc80 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d021      	beq.n	800cc80 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f06f 0204 	mvn.w	r2, #4
 800cc44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2202      	movs	r2, #2
 800cc4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	699b      	ldr	r3, [r3, #24]
 800cc52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	4798      	blx	r3
 800cc64:	e009      	b.n	800cc7a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d026      	beq.n	800ccd8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d021      	beq.n	800ccd8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f06f 0208 	mvn.w	r2, #8
 800cc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2204      	movs	r2, #4
 800cca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d005      	beq.n	800ccbe <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
 800ccbc:	e009      	b.n	800ccd2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f003 0310 	and.w	r3, r3, #16
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d026      	beq.n	800cd30 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f003 0310 	and.w	r3, r3, #16
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d021      	beq.n	800cd30 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f06f 0210 	mvn.w	r2, #16
 800ccf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d005      	beq.n	800cd16 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	4798      	blx	r3
 800cd14:	e009      	b.n	800cd2a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00e      	beq.n	800cd58 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d009      	beq.n	800cd58 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f06f 0201 	mvn.w	r2, #1
 800cd4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d104      	bne.n	800cd6c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00e      	beq.n	800cd8a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d009      	beq.n	800cd8a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cd7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00e      	beq.n	800cdb2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cda6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00e      	beq.n	800cdda <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d009      	beq.n	800cdda <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cdce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f003 0320 	and.w	r3, r3, #32
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00e      	beq.n	800ce02 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f003 0320 	and.w	r3, r3, #32
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d009      	beq.n	800ce02 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f06f 0220 	mvn.w	r2, #32
 800cdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00e      	beq.n	800ce2a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ce1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00e      	beq.n	800ce52 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d009      	beq.n	800ce52 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ce46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00e      	beq.n	800ce7a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d009      	beq.n	800ce7a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ce6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00e      	beq.n	800cea2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ce96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cea2:	bf00      	nop
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
	...

0800ceac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d101      	bne.n	800ceca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cec6:	2302      	movs	r3, #2
 800cec8:	e0ff      	b.n	800d0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b14      	cmp	r3, #20
 800ced6:	f200 80f0 	bhi.w	800d0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ceda:	a201      	add	r2, pc, #4	@ (adr r2, 800cee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee0:	0800cf35 	.word	0x0800cf35
 800cee4:	0800d0bb 	.word	0x0800d0bb
 800cee8:	0800d0bb 	.word	0x0800d0bb
 800ceec:	0800d0bb 	.word	0x0800d0bb
 800cef0:	0800cf75 	.word	0x0800cf75
 800cef4:	0800d0bb 	.word	0x0800d0bb
 800cef8:	0800d0bb 	.word	0x0800d0bb
 800cefc:	0800d0bb 	.word	0x0800d0bb
 800cf00:	0800cfb7 	.word	0x0800cfb7
 800cf04:	0800d0bb 	.word	0x0800d0bb
 800cf08:	0800d0bb 	.word	0x0800d0bb
 800cf0c:	0800d0bb 	.word	0x0800d0bb
 800cf10:	0800cff7 	.word	0x0800cff7
 800cf14:	0800d0bb 	.word	0x0800d0bb
 800cf18:	0800d0bb 	.word	0x0800d0bb
 800cf1c:	0800d0bb 	.word	0x0800d0bb
 800cf20:	0800d039 	.word	0x0800d039
 800cf24:	0800d0bb 	.word	0x0800d0bb
 800cf28:	0800d0bb 	.word	0x0800d0bb
 800cf2c:	0800d0bb 	.word	0x0800d0bb
 800cf30:	0800d079 	.word	0x0800d079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 fc4e 	bl	800d7dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	699a      	ldr	r2, [r3, #24]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f042 0208 	orr.w	r2, r2, #8
 800cf4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	699a      	ldr	r2, [r3, #24]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f022 0204 	bic.w	r2, r2, #4
 800cf5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6999      	ldr	r1, [r3, #24]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	691a      	ldr	r2, [r3, #16]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	619a      	str	r2, [r3, #24]
      break;
 800cf72:	e0a5      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fcc8 	bl	800d910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	699a      	ldr	r2, [r3, #24]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	699a      	ldr	r2, [r3, #24]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6999      	ldr	r1, [r3, #24]
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	021a      	lsls	r2, r3, #8
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	619a      	str	r2, [r3, #24]
      break;
 800cfb4:	e084      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68b9      	ldr	r1, [r7, #8]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fd3b 	bl	800da38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	69da      	ldr	r2, [r3, #28]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f042 0208 	orr.w	r2, r2, #8
 800cfd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69da      	ldr	r2, [r3, #28]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f022 0204 	bic.w	r2, r2, #4
 800cfe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69d9      	ldr	r1, [r3, #28]
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	61da      	str	r2, [r3, #28]
      break;
 800cff4:	e064      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f000 fdad 	bl	800db5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	69da      	ldr	r2, [r3, #28]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69da      	ldr	r2, [r3, #28]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	69d9      	ldr	r1, [r3, #28]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	021a      	lsls	r2, r3, #8
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	61da      	str	r2, [r3, #28]
      break;
 800d036:	e043      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68b9      	ldr	r1, [r7, #8]
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fe20 	bl	800dc84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f042 0208 	orr.w	r2, r2, #8
 800d052:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0204 	bic.w	r2, r2, #4
 800d062:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	691a      	ldr	r2, [r3, #16]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	430a      	orrs	r2, r1
 800d074:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d076:	e023      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68b9      	ldr	r1, [r7, #8]
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fe6a 	bl	800dd58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d092:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	021a      	lsls	r2, r3, #8
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	430a      	orrs	r2, r1
 800d0b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d0b8:	e002      	b.n	800d0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop

0800d0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e0f6      	b.n	800d2de <HAL_TIM_ConfigClockSource+0x20a>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800d10e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d11a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a6f      	ldr	r2, [pc, #444]	@ (800d2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	f000 80c1 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d130:	4a6d      	ldr	r2, [pc, #436]	@ (800d2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800d132:	4293      	cmp	r3, r2
 800d134:	f200 80c6 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d138:	4a6c      	ldr	r2, [pc, #432]	@ (800d2ec <HAL_TIM_ConfigClockSource+0x218>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	f000 80b9 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d140:	4a6a      	ldr	r2, [pc, #424]	@ (800d2ec <HAL_TIM_ConfigClockSource+0x218>)
 800d142:	4293      	cmp	r3, r2
 800d144:	f200 80be 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d148:	4a69      	ldr	r2, [pc, #420]	@ (800d2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	f000 80b1 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d150:	4a67      	ldr	r2, [pc, #412]	@ (800d2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800d152:	4293      	cmp	r3, r2
 800d154:	f200 80b6 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d158:	4a66      	ldr	r2, [pc, #408]	@ (800d2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	f000 80a9 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d160:	4a64      	ldr	r2, [pc, #400]	@ (800d2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800d162:	4293      	cmp	r3, r2
 800d164:	f200 80ae 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d168:	4a63      	ldr	r2, [pc, #396]	@ (800d2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	f000 80a1 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d170:	4a61      	ldr	r2, [pc, #388]	@ (800d2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800d172:	4293      	cmp	r3, r2
 800d174:	f200 80a6 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d178:	4a60      	ldr	r2, [pc, #384]	@ (800d2fc <HAL_TIM_ConfigClockSource+0x228>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	f000 8099 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d180:	4a5e      	ldr	r2, [pc, #376]	@ (800d2fc <HAL_TIM_ConfigClockSource+0x228>)
 800d182:	4293      	cmp	r3, r2
 800d184:	f200 809e 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d188:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d18c:	f000 8091 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d190:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d194:	f200 8096 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d19c:	f000 8089 	beq.w	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d1a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1a4:	f200 808e 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1ac:	d03e      	beq.n	800d22c <HAL_TIM_ConfigClockSource+0x158>
 800d1ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1b2:	f200 8087 	bhi.w	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ba:	f000 8086 	beq.w	800d2ca <HAL_TIM_ConfigClockSource+0x1f6>
 800d1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1c2:	d87f      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1c4:	2b70      	cmp	r3, #112	@ 0x70
 800d1c6:	d01a      	beq.n	800d1fe <HAL_TIM_ConfigClockSource+0x12a>
 800d1c8:	2b70      	cmp	r3, #112	@ 0x70
 800d1ca:	d87b      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1cc:	2b60      	cmp	r3, #96	@ 0x60
 800d1ce:	d050      	beq.n	800d272 <HAL_TIM_ConfigClockSource+0x19e>
 800d1d0:	2b60      	cmp	r3, #96	@ 0x60
 800d1d2:	d877      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1d4:	2b50      	cmp	r3, #80	@ 0x50
 800d1d6:	d03c      	beq.n	800d252 <HAL_TIM_ConfigClockSource+0x17e>
 800d1d8:	2b50      	cmp	r3, #80	@ 0x50
 800d1da:	d873      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1dc:	2b40      	cmp	r3, #64	@ 0x40
 800d1de:	d058      	beq.n	800d292 <HAL_TIM_ConfigClockSource+0x1be>
 800d1e0:	2b40      	cmp	r3, #64	@ 0x40
 800d1e2:	d86f      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1e4:	2b30      	cmp	r3, #48	@ 0x30
 800d1e6:	d064      	beq.n	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d1e8:	2b30      	cmp	r3, #48	@ 0x30
 800d1ea:	d86b      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	d060      	beq.n	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d1f0:	2b20      	cmp	r3, #32
 800d1f2:	d867      	bhi.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d05c      	beq.n	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d1f8:	2b10      	cmp	r3, #16
 800d1fa:	d05a      	beq.n	800d2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800d1fc:	e062      	b.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d20e:	f000 fe8b 	bl	800df28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	609a      	str	r2, [r3, #8]
      break;
 800d22a:	e04f      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d23c:	f000 fe74 	bl	800df28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d24e:	609a      	str	r2, [r3, #8]
      break;
 800d250:	e03c      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d25e:	461a      	mov	r2, r3
 800d260:	f000 fde6 	bl	800de30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2150      	movs	r1, #80	@ 0x50
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 fe3f 	bl	800deee <TIM_ITRx_SetConfig>
      break;
 800d270:	e02c      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d27e:	461a      	mov	r2, r3
 800d280:	f000 fe05 	bl	800de8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2160      	movs	r1, #96	@ 0x60
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 fe2f 	bl	800deee <TIM_ITRx_SetConfig>
      break;
 800d290:	e01c      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f000 fdc6 	bl	800de30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2140      	movs	r1, #64	@ 0x40
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 fe1f 	bl	800deee <TIM_ITRx_SetConfig>
      break;
 800d2b0:	e00c      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f000 fe16 	bl	800deee <TIM_ITRx_SetConfig>
      break;
 800d2c2:	e003      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d2c8:	e000      	b.n	800d2cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800d2ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	00100070 	.word	0x00100070
 800d2ec:	00100060 	.word	0x00100060
 800d2f0:	00100050 	.word	0x00100050
 800d2f4:	00100040 	.word	0x00100040
 800d2f8:	00100030 	.word	0x00100030
 800d2fc:	00100020 	.word	0x00100020

0800d300 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e14a      	b.n	800d666 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f040 80dd 	bne.w	800d598 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	2b1f      	cmp	r3, #31
 800d3e2:	f200 80d6 	bhi.w	800d592 <HAL_TIM_RegisterCallback+0x1de>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <HAL_TIM_RegisterCallback+0x38>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d46d 	.word	0x0800d46d
 800d3f0:	0800d475 	.word	0x0800d475
 800d3f4:	0800d47d 	.word	0x0800d47d
 800d3f8:	0800d485 	.word	0x0800d485
 800d3fc:	0800d48d 	.word	0x0800d48d
 800d400:	0800d495 	.word	0x0800d495
 800d404:	0800d49d 	.word	0x0800d49d
 800d408:	0800d4a5 	.word	0x0800d4a5
 800d40c:	0800d4ad 	.word	0x0800d4ad
 800d410:	0800d4b5 	.word	0x0800d4b5
 800d414:	0800d4bd 	.word	0x0800d4bd
 800d418:	0800d4c5 	.word	0x0800d4c5
 800d41c:	0800d4cd 	.word	0x0800d4cd
 800d420:	0800d4d5 	.word	0x0800d4d5
 800d424:	0800d4df 	.word	0x0800d4df
 800d428:	0800d4e9 	.word	0x0800d4e9
 800d42c:	0800d4f3 	.word	0x0800d4f3
 800d430:	0800d4fd 	.word	0x0800d4fd
 800d434:	0800d507 	.word	0x0800d507
 800d438:	0800d511 	.word	0x0800d511
 800d43c:	0800d51b 	.word	0x0800d51b
 800d440:	0800d525 	.word	0x0800d525
 800d444:	0800d52f 	.word	0x0800d52f
 800d448:	0800d539 	.word	0x0800d539
 800d44c:	0800d543 	.word	0x0800d543
 800d450:	0800d54d 	.word	0x0800d54d
 800d454:	0800d557 	.word	0x0800d557
 800d458:	0800d561 	.word	0x0800d561
 800d45c:	0800d56b 	.word	0x0800d56b
 800d460:	0800d575 	.word	0x0800d575
 800d464:	0800d57f 	.word	0x0800d57f
 800d468:	0800d589 	.word	0x0800d589
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d472:	e0f7      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d47a:	e0f3      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d482:	e0ef      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d48a:	e0eb      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d492:	e0e7      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d49a:	e0e3      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d4a2:	e0df      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d4aa:	e0db      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d4b2:	e0d7      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d4ba:	e0d3      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d4c2:	e0cf      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d4ca:	e0cb      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d4d2:	e0c7      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d4dc:	e0c2      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800d4e6:	e0bd      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800d4f0:	e0b8      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800d4fa:	e0b3      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800d504:	e0ae      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d50e:	e0a9      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d518:	e0a4      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d522:	e09f      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d52c:	e09a      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d536:	e095      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d540:	e090      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d54a:	e08b      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d554:	e086      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d55e:	e081      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d568:	e07c      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d572:	e077      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800d57c:	e072      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d586:	e06d      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d590:	e068      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
        break;
 800d596:	e065      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d15d      	bne.n	800d660 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800d5a4:	7afb      	ldrb	r3, [r7, #11]
 800d5a6:	2b0d      	cmp	r3, #13
 800d5a8:	d857      	bhi.n	800d65a <HAL_TIM_RegisterCallback+0x2a6>
 800d5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b0 <HAL_TIM_RegisterCallback+0x1fc>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d5e9 	.word	0x0800d5e9
 800d5b4:	0800d5f1 	.word	0x0800d5f1
 800d5b8:	0800d5f9 	.word	0x0800d5f9
 800d5bc:	0800d601 	.word	0x0800d601
 800d5c0:	0800d609 	.word	0x0800d609
 800d5c4:	0800d611 	.word	0x0800d611
 800d5c8:	0800d619 	.word	0x0800d619
 800d5cc:	0800d621 	.word	0x0800d621
 800d5d0:	0800d629 	.word	0x0800d629
 800d5d4:	0800d631 	.word	0x0800d631
 800d5d8:	0800d639 	.word	0x0800d639
 800d5dc:	0800d641 	.word	0x0800d641
 800d5e0:	0800d649 	.word	0x0800d649
 800d5e4:	0800d651 	.word	0x0800d651
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d5ee:	e039      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d5f6:	e035      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d5fe:	e031      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d606:	e02d      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d60e:	e029      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d616:	e025      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d61e:	e021      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d626:	e01d      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d62e:	e019      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d636:	e015      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d63e:	e011      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d646:	e00d      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d64e:	e009      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d658:	e004      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	75fb      	strb	r3, [r7, #23]
        break;
 800d65e:	e001      	b.n	800d664 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d664:	7dfb      	ldrb	r3, [r7, #23]
}
 800d666:	4618      	mov	r0, r3
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop

0800d674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a4c      	ldr	r2, [pc, #304]	@ (800d7b8 <TIM_Base_SetConfig+0x144>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d017      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d692:	d013      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a49      	ldr	r2, [pc, #292]	@ (800d7bc <TIM_Base_SetConfig+0x148>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d00f      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a48      	ldr	r2, [pc, #288]	@ (800d7c0 <TIM_Base_SetConfig+0x14c>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d00b      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a47      	ldr	r2, [pc, #284]	@ (800d7c4 <TIM_Base_SetConfig+0x150>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d007      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a46      	ldr	r2, [pc, #280]	@ (800d7c8 <TIM_Base_SetConfig+0x154>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d003      	beq.n	800d6bc <TIM_Base_SetConfig+0x48>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a45      	ldr	r2, [pc, #276]	@ (800d7cc <TIM_Base_SetConfig+0x158>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d108      	bne.n	800d6ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a39      	ldr	r2, [pc, #228]	@ (800d7b8 <TIM_Base_SetConfig+0x144>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d023      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6dc:	d01f      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a36      	ldr	r2, [pc, #216]	@ (800d7bc <TIM_Base_SetConfig+0x148>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d01b      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4a35      	ldr	r2, [pc, #212]	@ (800d7c0 <TIM_Base_SetConfig+0x14c>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d017      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a34      	ldr	r2, [pc, #208]	@ (800d7c4 <TIM_Base_SetConfig+0x150>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d013      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a33      	ldr	r2, [pc, #204]	@ (800d7c8 <TIM_Base_SetConfig+0x154>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d00f      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a33      	ldr	r2, [pc, #204]	@ (800d7d0 <TIM_Base_SetConfig+0x15c>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d00b      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a32      	ldr	r2, [pc, #200]	@ (800d7d4 <TIM_Base_SetConfig+0x160>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d007      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a31      	ldr	r2, [pc, #196]	@ (800d7d8 <TIM_Base_SetConfig+0x164>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d003      	beq.n	800d71e <TIM_Base_SetConfig+0xaa>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a2c      	ldr	r2, [pc, #176]	@ (800d7cc <TIM_Base_SetConfig+0x158>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d108      	bne.n	800d730 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	4313      	orrs	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a18      	ldr	r2, [pc, #96]	@ (800d7b8 <TIM_Base_SetConfig+0x144>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d013      	beq.n	800d784 <TIM_Base_SetConfig+0x110>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a1a      	ldr	r2, [pc, #104]	@ (800d7c8 <TIM_Base_SetConfig+0x154>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d00f      	beq.n	800d784 <TIM_Base_SetConfig+0x110>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a1a      	ldr	r2, [pc, #104]	@ (800d7d0 <TIM_Base_SetConfig+0x15c>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d00b      	beq.n	800d784 <TIM_Base_SetConfig+0x110>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a19      	ldr	r2, [pc, #100]	@ (800d7d4 <TIM_Base_SetConfig+0x160>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d007      	beq.n	800d784 <TIM_Base_SetConfig+0x110>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a18      	ldr	r2, [pc, #96]	@ (800d7d8 <TIM_Base_SetConfig+0x164>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d003      	beq.n	800d784 <TIM_Base_SetConfig+0x110>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a13      	ldr	r2, [pc, #76]	@ (800d7cc <TIM_Base_SetConfig+0x158>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d103      	bne.n	800d78c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	691a      	ldr	r2, [r3, #16]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d105      	bne.n	800d7aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f023 0201 	bic.w	r2, r3, #1
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	611a      	str	r2, [r3, #16]
  }
}
 800d7aa:	bf00      	nop
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	40012c00 	.word	0x40012c00
 800d7bc:	40000400 	.word	0x40000400
 800d7c0:	40000800 	.word	0x40000800
 800d7c4:	40000c00 	.word	0x40000c00
 800d7c8:	40013400 	.word	0x40013400
 800d7cc:	40015000 	.word	0x40015000
 800d7d0:	40014000 	.word	0x40014000
 800d7d4:	40014400 	.word	0x40014400
 800d7d8:	40014800 	.word	0x40014800

0800d7dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	f023 0201 	bic.w	r2, r3, #1
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d80a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f023 0303 	bic.w	r3, r3, #3
 800d816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f023 0302 	bic.w	r3, r3, #2
 800d828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	4313      	orrs	r3, r2
 800d832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a30      	ldr	r2, [pc, #192]	@ (800d8f8 <TIM_OC1_SetConfig+0x11c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d013      	beq.n	800d864 <TIM_OC1_SetConfig+0x88>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a2f      	ldr	r2, [pc, #188]	@ (800d8fc <TIM_OC1_SetConfig+0x120>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d00f      	beq.n	800d864 <TIM_OC1_SetConfig+0x88>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a2e      	ldr	r2, [pc, #184]	@ (800d900 <TIM_OC1_SetConfig+0x124>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d00b      	beq.n	800d864 <TIM_OC1_SetConfig+0x88>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a2d      	ldr	r2, [pc, #180]	@ (800d904 <TIM_OC1_SetConfig+0x128>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d007      	beq.n	800d864 <TIM_OC1_SetConfig+0x88>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a2c      	ldr	r2, [pc, #176]	@ (800d908 <TIM_OC1_SetConfig+0x12c>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d003      	beq.n	800d864 <TIM_OC1_SetConfig+0x88>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a2b      	ldr	r2, [pc, #172]	@ (800d90c <TIM_OC1_SetConfig+0x130>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d10c      	bne.n	800d87e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f023 0308 	bic.w	r3, r3, #8
 800d86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	4313      	orrs	r3, r2
 800d874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f023 0304 	bic.w	r3, r3, #4
 800d87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a1d      	ldr	r2, [pc, #116]	@ (800d8f8 <TIM_OC1_SetConfig+0x11c>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d013      	beq.n	800d8ae <TIM_OC1_SetConfig+0xd2>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a1c      	ldr	r2, [pc, #112]	@ (800d8fc <TIM_OC1_SetConfig+0x120>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d00f      	beq.n	800d8ae <TIM_OC1_SetConfig+0xd2>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a1b      	ldr	r2, [pc, #108]	@ (800d900 <TIM_OC1_SetConfig+0x124>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d00b      	beq.n	800d8ae <TIM_OC1_SetConfig+0xd2>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a1a      	ldr	r2, [pc, #104]	@ (800d904 <TIM_OC1_SetConfig+0x128>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d007      	beq.n	800d8ae <TIM_OC1_SetConfig+0xd2>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a19      	ldr	r2, [pc, #100]	@ (800d908 <TIM_OC1_SetConfig+0x12c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d003      	beq.n	800d8ae <TIM_OC1_SetConfig+0xd2>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a18      	ldr	r2, [pc, #96]	@ (800d90c <TIM_OC1_SetConfig+0x130>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d111      	bne.n	800d8d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	693a      	ldr	r2, [r7, #16]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	693a      	ldr	r2, [r7, #16]
 800d8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	621a      	str	r2, [r3, #32]
}
 800d8ec:	bf00      	nop
 800d8ee:	371c      	adds	r7, #28
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	40012c00 	.word	0x40012c00
 800d8fc:	40013400 	.word	0x40013400
 800d900:	40014000 	.word	0x40014000
 800d904:	40014400 	.word	0x40014400
 800d908:	40014800 	.word	0x40014800
 800d90c:	40015000 	.word	0x40015000

0800d910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d910:	b480      	push	{r7}
 800d912:	b087      	sub	sp, #28
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	f023 0210 	bic.w	r2, r3, #16
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d93e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d94a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	021b      	lsls	r3, r3, #8
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	4313      	orrs	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	f023 0320 	bic.w	r3, r3, #32
 800d95e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	011b      	lsls	r3, r3, #4
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	4313      	orrs	r3, r2
 800d96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a2c      	ldr	r2, [pc, #176]	@ (800da20 <TIM_OC2_SetConfig+0x110>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d007      	beq.n	800d984 <TIM_OC2_SetConfig+0x74>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a2b      	ldr	r2, [pc, #172]	@ (800da24 <TIM_OC2_SetConfig+0x114>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d003      	beq.n	800d984 <TIM_OC2_SetConfig+0x74>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a2a      	ldr	r2, [pc, #168]	@ (800da28 <TIM_OC2_SetConfig+0x118>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d10d      	bne.n	800d9a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d98a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	011b      	lsls	r3, r3, #4
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	4313      	orrs	r3, r2
 800d996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d99e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a1f      	ldr	r2, [pc, #124]	@ (800da20 <TIM_OC2_SetConfig+0x110>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d013      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xc0>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a1e      	ldr	r2, [pc, #120]	@ (800da24 <TIM_OC2_SetConfig+0x114>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xc0>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a1e      	ldr	r2, [pc, #120]	@ (800da2c <TIM_OC2_SetConfig+0x11c>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xc0>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a1d      	ldr	r2, [pc, #116]	@ (800da30 <TIM_OC2_SetConfig+0x120>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d007      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xc0>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a1c      	ldr	r2, [pc, #112]	@ (800da34 <TIM_OC2_SetConfig+0x124>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xc0>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a17      	ldr	r2, [pc, #92]	@ (800da28 <TIM_OC2_SetConfig+0x118>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d113      	bne.n	800d9f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	621a      	str	r2, [r3, #32]
}
 800da12:	bf00      	nop
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	40012c00 	.word	0x40012c00
 800da24:	40013400 	.word	0x40013400
 800da28:	40015000 	.word	0x40015000
 800da2c:	40014000 	.word	0x40014000
 800da30:	40014400 	.word	0x40014400
 800da34:	40014800 	.word	0x40014800

0800da38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da38:	b480      	push	{r7}
 800da3a:	b087      	sub	sp, #28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a1b      	ldr	r3, [r3, #32]
 800da4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f023 0303 	bic.w	r3, r3, #3
 800da72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800da84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	021b      	lsls	r3, r3, #8
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	4313      	orrs	r3, r2
 800da90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a2b      	ldr	r2, [pc, #172]	@ (800db44 <TIM_OC3_SetConfig+0x10c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d007      	beq.n	800daaa <TIM_OC3_SetConfig+0x72>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a2a      	ldr	r2, [pc, #168]	@ (800db48 <TIM_OC3_SetConfig+0x110>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d003      	beq.n	800daaa <TIM_OC3_SetConfig+0x72>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a29      	ldr	r2, [pc, #164]	@ (800db4c <TIM_OC3_SetConfig+0x114>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d10d      	bne.n	800dac6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	021b      	lsls	r3, r3, #8
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	4313      	orrs	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a1e      	ldr	r2, [pc, #120]	@ (800db44 <TIM_OC3_SetConfig+0x10c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d013      	beq.n	800daf6 <TIM_OC3_SetConfig+0xbe>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a1d      	ldr	r2, [pc, #116]	@ (800db48 <TIM_OC3_SetConfig+0x110>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d00f      	beq.n	800daf6 <TIM_OC3_SetConfig+0xbe>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a1d      	ldr	r2, [pc, #116]	@ (800db50 <TIM_OC3_SetConfig+0x118>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00b      	beq.n	800daf6 <TIM_OC3_SetConfig+0xbe>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a1c      	ldr	r2, [pc, #112]	@ (800db54 <TIM_OC3_SetConfig+0x11c>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d007      	beq.n	800daf6 <TIM_OC3_SetConfig+0xbe>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a1b      	ldr	r2, [pc, #108]	@ (800db58 <TIM_OC3_SetConfig+0x120>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d003      	beq.n	800daf6 <TIM_OC3_SetConfig+0xbe>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a16      	ldr	r2, [pc, #88]	@ (800db4c <TIM_OC3_SetConfig+0x114>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d113      	bne.n	800db1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	4313      	orrs	r3, r2
 800db10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	011b      	lsls	r3, r3, #4
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	621a      	str	r2, [r3, #32]
}
 800db38:	bf00      	nop
 800db3a:	371c      	adds	r7, #28
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	40012c00 	.word	0x40012c00
 800db48:	40013400 	.word	0x40013400
 800db4c:	40015000 	.word	0x40015000
 800db50:	40014000 	.word	0x40014000
 800db54:	40014400 	.word	0x40014400
 800db58:	40014800 	.word	0x40014800

0800db5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a1b      	ldr	r3, [r3, #32]
 800db6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	021b      	lsls	r3, r3, #8
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dbaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	031b      	lsls	r3, r3, #12
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a2c      	ldr	r2, [pc, #176]	@ (800dc6c <TIM_OC4_SetConfig+0x110>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d007      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x74>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a2b      	ldr	r2, [pc, #172]	@ (800dc70 <TIM_OC4_SetConfig+0x114>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x74>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a2a      	ldr	r2, [pc, #168]	@ (800dc74 <TIM_OC4_SetConfig+0x118>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10d      	bne.n	800dbec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	031b      	lsls	r3, r3, #12
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dbea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4a1f      	ldr	r2, [pc, #124]	@ (800dc6c <TIM_OC4_SetConfig+0x110>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d013      	beq.n	800dc1c <TIM_OC4_SetConfig+0xc0>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a1e      	ldr	r2, [pc, #120]	@ (800dc70 <TIM_OC4_SetConfig+0x114>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d00f      	beq.n	800dc1c <TIM_OC4_SetConfig+0xc0>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a1e      	ldr	r2, [pc, #120]	@ (800dc78 <TIM_OC4_SetConfig+0x11c>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d00b      	beq.n	800dc1c <TIM_OC4_SetConfig+0xc0>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a1d      	ldr	r2, [pc, #116]	@ (800dc7c <TIM_OC4_SetConfig+0x120>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d007      	beq.n	800dc1c <TIM_OC4_SetConfig+0xc0>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a1c      	ldr	r2, [pc, #112]	@ (800dc80 <TIM_OC4_SetConfig+0x124>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d003      	beq.n	800dc1c <TIM_OC4_SetConfig+0xc0>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a17      	ldr	r2, [pc, #92]	@ (800dc74 <TIM_OC4_SetConfig+0x118>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d113      	bne.n	800dc44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dc22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dc2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	695b      	ldr	r3, [r3, #20]
 800dc30:	019b      	lsls	r3, r3, #6
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	019b      	lsls	r3, r3, #6
 800dc3e:	693a      	ldr	r2, [r7, #16]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	621a      	str	r2, [r3, #32]
}
 800dc5e:	bf00      	nop
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	40012c00 	.word	0x40012c00
 800dc70:	40013400 	.word	0x40013400
 800dc74:	40015000 	.word	0x40015000
 800dc78:	40014000 	.word	0x40014000
 800dc7c:	40014400 	.word	0x40014400
 800dc80:	40014800 	.word	0x40014800

0800dc84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dcc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	041b      	lsls	r3, r3, #16
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a19      	ldr	r2, [pc, #100]	@ (800dd40 <TIM_OC5_SetConfig+0xbc>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d013      	beq.n	800dd06 <TIM_OC5_SetConfig+0x82>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a18      	ldr	r2, [pc, #96]	@ (800dd44 <TIM_OC5_SetConfig+0xc0>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00f      	beq.n	800dd06 <TIM_OC5_SetConfig+0x82>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a17      	ldr	r2, [pc, #92]	@ (800dd48 <TIM_OC5_SetConfig+0xc4>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d00b      	beq.n	800dd06 <TIM_OC5_SetConfig+0x82>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a16      	ldr	r2, [pc, #88]	@ (800dd4c <TIM_OC5_SetConfig+0xc8>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d007      	beq.n	800dd06 <TIM_OC5_SetConfig+0x82>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a15      	ldr	r2, [pc, #84]	@ (800dd50 <TIM_OC5_SetConfig+0xcc>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d003      	beq.n	800dd06 <TIM_OC5_SetConfig+0x82>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a14      	ldr	r2, [pc, #80]	@ (800dd54 <TIM_OC5_SetConfig+0xd0>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d109      	bne.n	800dd1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	621a      	str	r2, [r3, #32]
}
 800dd34:	bf00      	nop
 800dd36:	371c      	adds	r7, #28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	40012c00 	.word	0x40012c00
 800dd44:	40013400 	.word	0x40013400
 800dd48:	40014000 	.word	0x40014000
 800dd4c:	40014400 	.word	0x40014400
 800dd50:	40014800 	.word	0x40014800
 800dd54:	40015000 	.word	0x40015000

0800dd58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6a1b      	ldr	r3, [r3, #32]
 800dd6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dd86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	021b      	lsls	r3, r3, #8
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	051b      	lsls	r3, r3, #20
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a1a      	ldr	r2, [pc, #104]	@ (800de18 <TIM_OC6_SetConfig+0xc0>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d013      	beq.n	800dddc <TIM_OC6_SetConfig+0x84>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a19      	ldr	r2, [pc, #100]	@ (800de1c <TIM_OC6_SetConfig+0xc4>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d00f      	beq.n	800dddc <TIM_OC6_SetConfig+0x84>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a18      	ldr	r2, [pc, #96]	@ (800de20 <TIM_OC6_SetConfig+0xc8>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d00b      	beq.n	800dddc <TIM_OC6_SetConfig+0x84>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a17      	ldr	r2, [pc, #92]	@ (800de24 <TIM_OC6_SetConfig+0xcc>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d007      	beq.n	800dddc <TIM_OC6_SetConfig+0x84>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a16      	ldr	r2, [pc, #88]	@ (800de28 <TIM_OC6_SetConfig+0xd0>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d003      	beq.n	800dddc <TIM_OC6_SetConfig+0x84>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a15      	ldr	r2, [pc, #84]	@ (800de2c <TIM_OC6_SetConfig+0xd4>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d109      	bne.n	800ddf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dde2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	029b      	lsls	r3, r3, #10
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	697a      	ldr	r2, [r7, #20]
 800ddf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	621a      	str	r2, [r3, #32]
}
 800de0a:	bf00      	nop
 800de0c:	371c      	adds	r7, #28
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	40012c00 	.word	0x40012c00
 800de1c:	40013400 	.word	0x40013400
 800de20:	40014000 	.word	0x40014000
 800de24:	40014400 	.word	0x40014400
 800de28:	40014800 	.word	0x40014800
 800de2c:	40015000 	.word	0x40015000

0800de30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	f023 0201 	bic.w	r2, r3, #1
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	4313      	orrs	r3, r2
 800de64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f023 030a 	bic.w	r3, r3, #10
 800de6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4313      	orrs	r3, r2
 800de74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	693a      	ldr	r2, [r7, #16]
 800de7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	621a      	str	r2, [r3, #32]
}
 800de82:	bf00      	nop
 800de84:	371c      	adds	r7, #28
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de8e:	b480      	push	{r7}
 800de90:	b087      	sub	sp, #28
 800de92:	af00      	add	r7, sp, #0
 800de94:	60f8      	str	r0, [r7, #12]
 800de96:	60b9      	str	r1, [r7, #8]
 800de98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6a1b      	ldr	r3, [r3, #32]
 800dea4:	f023 0210 	bic.w	r2, r3, #16
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800deb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	031b      	lsls	r3, r3, #12
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800deca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	621a      	str	r2, [r3, #32]
}
 800dee2:	bf00      	nop
 800dee4:	371c      	adds	r7, #28
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800deee:	b480      	push	{r7}
 800def0:	b085      	sub	sp, #20
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800df04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	4313      	orrs	r3, r2
 800df10:	f043 0307 	orr.w	r3, r3, #7
 800df14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	609a      	str	r2, [r3, #8]
}
 800df1c:	bf00      	nop
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	021a      	lsls	r2, r3, #8
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	4313      	orrs	r3, r2
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	4313      	orrs	r3, r2
 800df54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	697a      	ldr	r2, [r7, #20]
 800df5a:	609a      	str	r2, [r3, #8]
}
 800df5c:	bf00      	nop
 800df5e:	371c      	adds	r7, #28
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df68:	b480      	push	{r7}
 800df6a:	b087      	sub	sp, #28
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	f003 031f 	and.w	r3, r3, #31
 800df7a:	2201      	movs	r2, #1
 800df7c:	fa02 f303 	lsl.w	r3, r2, r3
 800df80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6a1a      	ldr	r2, [r3, #32]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	43db      	mvns	r3, r3
 800df8a:	401a      	ands	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6a1a      	ldr	r2, [r3, #32]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f003 031f 	and.w	r3, r3, #31
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa0:	431a      	orrs	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	621a      	str	r2, [r3, #32]
}
 800dfa6:	bf00      	nop
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a26      	ldr	r2, [pc, #152]	@ (800e058 <TIM_ResetCallback+0xa4>)
 800dfc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a25      	ldr	r2, [pc, #148]	@ (800e05c <TIM_ResetCallback+0xa8>)
 800dfc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a24      	ldr	r2, [pc, #144]	@ (800e060 <TIM_ResetCallback+0xac>)
 800dfd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a23      	ldr	r2, [pc, #140]	@ (800e064 <TIM_ResetCallback+0xb0>)
 800dfd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a22      	ldr	r2, [pc, #136]	@ (800e068 <TIM_ResetCallback+0xb4>)
 800dfe0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a21      	ldr	r2, [pc, #132]	@ (800e06c <TIM_ResetCallback+0xb8>)
 800dfe8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a20      	ldr	r2, [pc, #128]	@ (800e070 <TIM_ResetCallback+0xbc>)
 800dff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a1f      	ldr	r2, [pc, #124]	@ (800e074 <TIM_ResetCallback+0xc0>)
 800dff8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a1e      	ldr	r2, [pc, #120]	@ (800e078 <TIM_ResetCallback+0xc4>)
 800e000:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a1d      	ldr	r2, [pc, #116]	@ (800e07c <TIM_ResetCallback+0xc8>)
 800e008:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a1c      	ldr	r2, [pc, #112]	@ (800e080 <TIM_ResetCallback+0xcc>)
 800e010:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a1b      	ldr	r2, [pc, #108]	@ (800e084 <TIM_ResetCallback+0xd0>)
 800e018:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a1a      	ldr	r2, [pc, #104]	@ (800e088 <TIM_ResetCallback+0xd4>)
 800e020:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a19      	ldr	r2, [pc, #100]	@ (800e08c <TIM_ResetCallback+0xd8>)
 800e028:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a18      	ldr	r2, [pc, #96]	@ (800e090 <TIM_ResetCallback+0xdc>)
 800e030:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a17      	ldr	r2, [pc, #92]	@ (800e094 <TIM_ResetCallback+0xe0>)
 800e038:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a16      	ldr	r2, [pc, #88]	@ (800e098 <TIM_ResetCallback+0xe4>)
 800e040:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a15      	ldr	r2, [pc, #84]	@ (800e09c <TIM_ResetCallback+0xe8>)
 800e048:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	08006f6d 	.word	0x08006f6d
 800e05c:	0800d301 	.word	0x0800d301
 800e060:	0800d379 	.word	0x0800d379
 800e064:	0800d38d 	.word	0x0800d38d
 800e068:	0800d329 	.word	0x0800d329
 800e06c:	0800d33d 	.word	0x0800d33d
 800e070:	0800d315 	.word	0x0800d315
 800e074:	0800d351 	.word	0x0800d351
 800e078:	0800d365 	.word	0x0800d365
 800e07c:	0800d3a1 	.word	0x0800d3a1
 800e080:	0800e2f5 	.word	0x0800e2f5
 800e084:	0800e309 	.word	0x0800e309
 800e088:	0800e31d 	.word	0x0800e31d
 800e08c:	0800e331 	.word	0x0800e331
 800e090:	0800e345 	.word	0x0800e345
 800e094:	0800e359 	.word	0x0800e359
 800e098:	0800e36d 	.word	0x0800e36d
 800e09c:	0800e381 	.word	0x0800e381

0800e0a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d101      	bne.n	800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e074      	b.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a34      	ldr	r2, [pc, #208]	@ (800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d009      	beq.n	800e0f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a33      	ldr	r2, [pc, #204]	@ (800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d004      	beq.n	800e0f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a31      	ldr	r2, [pc, #196]	@ (800e1b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d108      	bne.n	800e108 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e0fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	4313      	orrs	r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a21      	ldr	r2, [pc, #132]	@ (800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d022      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e138:	d01d      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a1f      	ldr	r2, [pc, #124]	@ (800e1bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d018      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a1d      	ldr	r2, [pc, #116]	@ (800e1c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d013      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a1c      	ldr	r2, [pc, #112]	@ (800e1c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d00e      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a15      	ldr	r2, [pc, #84]	@ (800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d009      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a18      	ldr	r2, [pc, #96]	@ (800e1c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d004      	beq.n	800e176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a11      	ldr	r2, [pc, #68]	@ (800e1b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d10c      	bne.n	800e190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e17c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	4313      	orrs	r3, r2
 800e186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	40012c00 	.word	0x40012c00
 800e1b4:	40013400 	.word	0x40013400
 800e1b8:	40015000 	.word	0x40015000
 800e1bc:	40000400 	.word	0x40000400
 800e1c0:	40000800 	.word	0x40000800
 800e1c4:	40000c00 	.word	0x40000c00
 800e1c8:	40014000 	.word	0x40014000

0800e1cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d101      	bne.n	800e1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e078      	b.n	800e2da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	4313      	orrs	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	4313      	orrs	r3, r2
 800e218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4313      	orrs	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	4313      	orrs	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	4313      	orrs	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e24e:	4313      	orrs	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	041b      	lsls	r3, r3, #16
 800e25e:	4313      	orrs	r3, r2
 800e260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	69db      	ldr	r3, [r3, #28]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a1c      	ldr	r2, [pc, #112]	@ (800e2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d009      	beq.n	800e28e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a1b      	ldr	r2, [pc, #108]	@ (800e2ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d004      	beq.n	800e28e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a19      	ldr	r2, [pc, #100]	@ (800e2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d11c      	bne.n	800e2c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e298:	051b      	lsls	r3, r3, #20
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	40012c00 	.word	0x40012c00
 800e2ec:	40013400 	.word	0x40013400
 800e2f0:	40015000 	.word	0x40015000

0800e2f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e050      	b.n	800e448 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d114      	bne.n	800e3da <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fd65 	bl	800ee88 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d103      	bne.n	800e3d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4a21      	ldr	r2, [pc, #132]	@ (800e450 <HAL_UART_Init+0xbc>)
 800e3cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2224      	movs	r2, #36	@ 0x24
 800e3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f022 0201 	bic.w	r2, r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d002      	beq.n	800e400 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f001 f892 	bl	800f524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fd93 	bl	800ef2c <UART_SetConfig>
 800e406:	4603      	mov	r3, r0
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d101      	bne.n	800e410 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e01b      	b.n	800e448 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e41e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	689a      	ldr	r2, [r3, #8]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e42e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 0201 	orr.w	r2, r2, #1
 800e43e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f001 f911 	bl	800f668 <UART_CheckIdleState>
 800e446:	4603      	mov	r3, r0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	08008835 	.word	0x08008835

0800e454 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	460b      	mov	r3, r1
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d109      	bne.n	800e480 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	e09c      	b.n	800e5ba <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e486:	2b20      	cmp	r3, #32
 800e488:	d16c      	bne.n	800e564 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800e48a:	7afb      	ldrb	r3, [r7, #11]
 800e48c:	2b0c      	cmp	r3, #12
 800e48e:	d85e      	bhi.n	800e54e <HAL_UART_RegisterCallback+0xfa>
 800e490:	a201      	add	r2, pc, #4	@ (adr r2, 800e498 <HAL_UART_RegisterCallback+0x44>)
 800e492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e496:	bf00      	nop
 800e498:	0800e4cd 	.word	0x0800e4cd
 800e49c:	0800e4d7 	.word	0x0800e4d7
 800e4a0:	0800e4e1 	.word	0x0800e4e1
 800e4a4:	0800e4eb 	.word	0x0800e4eb
 800e4a8:	0800e4f5 	.word	0x0800e4f5
 800e4ac:	0800e4ff 	.word	0x0800e4ff
 800e4b0:	0800e509 	.word	0x0800e509
 800e4b4:	0800e513 	.word	0x0800e513
 800e4b8:	0800e51d 	.word	0x0800e51d
 800e4bc:	0800e527 	.word	0x0800e527
 800e4c0:	0800e531 	.word	0x0800e531
 800e4c4:	0800e53b 	.word	0x0800e53b
 800e4c8:	0800e545 	.word	0x0800e545
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e4d4:	e070      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e4de:	e06b      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e4e8:	e066      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e4f2:	e061      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e4fc:	e05c      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e506:	e057      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e510:	e052      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e51a:	e04d      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e524:	e048      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e52e:	e043      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e538:	e03e      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e542:	e039      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e54c:	e034      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e554:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e55e:	2301      	movs	r3, #1
 800e560:	75fb      	strb	r3, [r7, #23]
        break;
 800e562:	e029      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d11a      	bne.n	800e5a4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800e56e:	7afb      	ldrb	r3, [r7, #11]
 800e570:	2b0b      	cmp	r3, #11
 800e572:	d002      	beq.n	800e57a <HAL_UART_RegisterCallback+0x126>
 800e574:	2b0c      	cmp	r3, #12
 800e576:	d005      	beq.n	800e584 <HAL_UART_RegisterCallback+0x130>
 800e578:	e009      	b.n	800e58e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e582:	e019      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e58c:	e014      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	75fb      	strb	r3, [r7, #23]
        break;
 800e5a2:	e009      	b.n	800e5b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	371c      	adds	r7, #28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08a      	sub	sp, #40	@ 0x28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5dc:	2b20      	cmp	r3, #32
 800e5de:	d137      	bne.n	800e650 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <HAL_UART_Receive_DMA+0x24>
 800e5e6:	88fb      	ldrh	r3, [r7, #6]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e030      	b.n	800e652 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a18      	ldr	r2, [pc, #96]	@ (800e65c <HAL_UART_Receive_DMA+0x94>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d01f      	beq.n	800e640 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d018      	beq.n	800e640 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	e853 3f00 	ldrex	r3, [r3]
 800e61a:	613b      	str	r3, [r7, #16]
   return(result);
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e622:	627b      	str	r3, [r7, #36]	@ 0x24
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	461a      	mov	r2, r3
 800e62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62c:	623b      	str	r3, [r7, #32]
 800e62e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e630:	69f9      	ldr	r1, [r7, #28]
 800e632:	6a3a      	ldr	r2, [r7, #32]
 800e634:	e841 2300 	strex	r3, r2, [r1]
 800e638:	61bb      	str	r3, [r7, #24]
   return(result);
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1e6      	bne.n	800e60e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e640:	88fb      	ldrh	r3, [r7, #6]
 800e642:	461a      	mov	r2, r3
 800e644:	68b9      	ldr	r1, [r7, #8]
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f001 f926 	bl	800f898 <UART_Start_Receive_DMA>
 800e64c:	4603      	mov	r3, r0
 800e64e:	e000      	b.n	800e652 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e650:	2302      	movs	r3, #2
  }
}
 800e652:	4618      	mov	r0, r3
 800e654:	3728      	adds	r7, #40	@ 0x28
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	40008000 	.word	0x40008000

0800e660 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b0ba      	sub	sp, #232	@ 0xe8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e686:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e68a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e68e:	4013      	ands	r3, r2
 800e690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d11b      	bne.n	800e6d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6a0:	f003 0320 	and.w	r3, r3, #32
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d015      	beq.n	800e6d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6ac:	f003 0320 	and.w	r3, r3, #32
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d105      	bne.n	800e6c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d009      	beq.n	800e6d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f000 8312 	beq.w	800ecee <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	4798      	blx	r3
      }
      return;
 800e6d2:	e30c      	b.n	800ecee <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e6d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 8129 	beq.w	800e930 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e6de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e6e2:	4b90      	ldr	r3, [pc, #576]	@ (800e924 <HAL_UART_IRQHandler+0x2c4>)
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d106      	bne.n	800e6f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e6ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e6ee:	4b8e      	ldr	r3, [pc, #568]	@ (800e928 <HAL_UART_IRQHandler+0x2c8>)
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f000 811c 	beq.w	800e930 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b00      	cmp	r3, #0
 800e702:	d011      	beq.n	800e728 <HAL_UART_IRQHandler+0xc8>
 800e704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2201      	movs	r2, #1
 800e716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e71e:	f043 0201 	orr.w	r2, r3, #1
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e72c:	f003 0302 	and.w	r3, r3, #2
 800e730:	2b00      	cmp	r3, #0
 800e732:	d011      	beq.n	800e758 <HAL_UART_IRQHandler+0xf8>
 800e734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00b      	beq.n	800e758 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2202      	movs	r2, #2
 800e746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e74e:	f043 0204 	orr.w	r2, r3, #4
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e75c:	f003 0304 	and.w	r3, r3, #4
 800e760:	2b00      	cmp	r3, #0
 800e762:	d011      	beq.n	800e788 <HAL_UART_IRQHandler+0x128>
 800e764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e768:	f003 0301 	and.w	r3, r3, #1
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00b      	beq.n	800e788 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2204      	movs	r2, #4
 800e776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e77e:	f043 0202 	orr.w	r2, r3, #2
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e78c:	f003 0308 	and.w	r3, r3, #8
 800e790:	2b00      	cmp	r3, #0
 800e792:	d017      	beq.n	800e7c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d105      	bne.n	800e7ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e7a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e7a4:	4b5f      	ldr	r3, [pc, #380]	@ (800e924 <HAL_UART_IRQHandler+0x2c4>)
 800e7a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00b      	beq.n	800e7c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2208      	movs	r2, #8
 800e7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7ba:	f043 0208 	orr.w	r2, r3, #8
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d012      	beq.n	800e7f6 <HAL_UART_IRQHandler+0x196>
 800e7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00c      	beq.n	800e7f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7ec:	f043 0220 	orr.w	r2, r3, #32
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 8278 	beq.w	800ecf2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e806:	f003 0320 	and.w	r3, r3, #32
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d013      	beq.n	800e836 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e812:	f003 0320 	and.w	r3, r3, #32
 800e816:	2b00      	cmp	r3, #0
 800e818:	d105      	bne.n	800e826 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e81a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e81e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e83c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e84a:	2b40      	cmp	r3, #64	@ 0x40
 800e84c:	d005      	beq.n	800e85a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e84e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e856:	2b00      	cmp	r3, #0
 800e858:	d058      	beq.n	800e90c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f001 f903 	bl	800fa66 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e86a:	2b40      	cmp	r3, #64	@ 0x40
 800e86c:	d148      	bne.n	800e900 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3308      	adds	r3, #8
 800e874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e87c:	e853 3f00 	ldrex	r3, [r3]
 800e880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e88c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3308      	adds	r3, #8
 800e896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e89a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e89e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e8a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e8aa:	e841 2300 	strex	r3, r2, [r1]
 800e8ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e8b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1d9      	bne.n	800e86e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d017      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ca:	4a18      	ldr	r2, [pc, #96]	@ (800e92c <HAL_UART_IRQHandler+0x2cc>)
 800e8cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fc f8ab 	bl	800aa30 <HAL_DMA_Abort_IT>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d01f      	beq.n	800e920 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8f2:	e015      	b.n	800e920 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8fe:	e00f      	b.n	800e920 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e90a:	e009      	b.n	800e920 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e91e:	e1e8      	b.n	800ecf2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e920:	bf00      	nop
    return;
 800e922:	e1e6      	b.n	800ecf2 <HAL_UART_IRQHandler+0x692>
 800e924:	10000001 	.word	0x10000001
 800e928:	04000120 	.word	0x04000120
 800e92c:	0800fd31 	.word	0x0800fd31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e934:	2b01      	cmp	r3, #1
 800e936:	f040 8176 	bne.w	800ec26 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e93e:	f003 0310 	and.w	r3, r3, #16
 800e942:	2b00      	cmp	r3, #0
 800e944:	f000 816f 	beq.w	800ec26 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e94c:	f003 0310 	and.w	r3, r3, #16
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 8168 	beq.w	800ec26 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2210      	movs	r2, #16
 800e95c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e968:	2b40      	cmp	r3, #64	@ 0x40
 800e96a:	f040 80dc 	bne.w	800eb26 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e97c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e980:	2b00      	cmp	r3, #0
 800e982:	f000 80b1 	beq.w	800eae8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e98c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e990:	429a      	cmp	r2, r3
 800e992:	f080 80a9 	bcs.w	800eae8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e99c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 0320 	and.w	r3, r3, #32
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f040 8087 	bne.w	800eac2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e9c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e9cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e9de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e9e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e9ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e9ee:	e841 2300 	strex	r3, r2, [r1]
 800e9f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e9f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1da      	bne.n	800e9b4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3308      	adds	r3, #8
 800ea04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ea0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea10:	f023 0301 	bic.w	r3, r3, #1
 800ea14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ea22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ea26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ea2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ea2e:	e841 2300 	strex	r3, r2, [r1]
 800ea32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ea34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e1      	bne.n	800e9fe <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ea4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3308      	adds	r3, #8
 800ea5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ea5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ea60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ea64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ea6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e3      	bne.n	800ea3a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2220      	movs	r2, #32
 800ea76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea90:	f023 0310 	bic.w	r3, r3, #16
 800ea94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eaa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eaa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e4      	bne.n	800ea80 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fb ff5e 	bl	800a97e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2202      	movs	r2, #2
 800eac6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800eada:	b292      	uxth	r2, r2
 800eadc:	1a8a      	subs	r2, r1, r2
 800eade:	b292      	uxth	r2, r2
 800eae0:	4611      	mov	r1, r2
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800eae6:	e106      	b.n	800ecf6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eaee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	f040 80ff 	bne.w	800ecf6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f003 0320 	and.w	r3, r3, #32
 800eb06:	2b20      	cmp	r3, #32
 800eb08:	f040 80f5 	bne.w	800ecf6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2202      	movs	r2, #2
 800eb10:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800eb1e:	4611      	mov	r1, r2
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	4798      	blx	r3
      return;
 800eb24:	e0e7      	b.n	800ecf6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f000 80d9 	beq.w	800ecfa <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800eb48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f000 80d4 	beq.w	800ecfa <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5a:	e853 3f00 	ldrex	r3, [r3]
 800eb5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb74:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e4      	bne.n	800eb52 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb92:	e853 3f00 	ldrex	r3, [r3]
 800eb96:	623b      	str	r3, [r7, #32]
   return(result);
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb9e:	f023 0301 	bic.w	r3, r3, #1
 800eba2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ebb0:	633a      	str	r2, [r7, #48]	@ 0x30
 800ebb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb8:	e841 2300 	strex	r3, r2, [r1]
 800ebbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1e1      	bne.n	800eb88 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2220      	movs	r2, #32
 800ebc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	e853 3f00 	ldrex	r3, [r3]
 800ebe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f023 0310 	bic.w	r3, r3, #16
 800ebec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfe:	69b9      	ldr	r1, [r7, #24]
 800ec00:	69fa      	ldr	r2, [r7, #28]
 800ec02:	e841 2300 	strex	r3, r2, [r1]
 800ec06:	617b      	str	r3, [r7, #20]
   return(result);
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1e4      	bne.n	800ebd8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2202      	movs	r2, #2
 800ec12:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ec1a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ec1e:	4611      	mov	r1, r2
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec24:	e069      	b.n	800ecfa <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d010      	beq.n	800ec54 <HAL_UART_IRQHandler+0x5f4>
 800ec32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00a      	beq.n	800ec54 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ec46:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec52:	e055      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d014      	beq.n	800ec8a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d105      	bne.n	800ec78 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d008      	beq.n	800ec8a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d03e      	beq.n	800ecfe <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	4798      	blx	r3
    }
    return;
 800ec88:	e039      	b.n	800ecfe <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d009      	beq.n	800ecaa <HAL_UART_IRQHandler+0x64a>
 800ec96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d003      	beq.n	800ecaa <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f001 f858 	bl	800fd58 <UART_EndTransmit_IT>
    return;
 800eca8:	e02a      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ecaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00b      	beq.n	800ecce <HAL_UART_IRQHandler+0x66e>
 800ecb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d005      	beq.n	800ecce <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eccc:	e018      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ecce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d012      	beq.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
 800ecda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	da0e      	bge.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ecec:	e008      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ecee:	bf00      	nop
 800ecf0:	e006      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ecf2:	bf00      	nop
 800ecf4:	e004      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ecf6:	bf00      	nop
 800ecf8:	e002      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ecfa:	bf00      	nop
 800ecfc:	e000      	b.n	800ed00 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ecfe:	bf00      	nop
  }
}
 800ed00:	37e8      	adds	r7, #232	@ 0xe8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop

0800ed08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ed4c:	bf00      	nop
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800edb4:	bf00      	nop
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a09      	ldr	r2, [pc, #36]	@ (800edf4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d009      	beq.n	800ede8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	430a      	orrs	r2, r1
 800ede6:	615a      	str	r2, [r3, #20]
  }
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	40008000 	.word	0x40008000

0800edf8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a18      	ldr	r2, [pc, #96]	@ (800ee68 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d027      	beq.n	800ee5a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee10:	2b20      	cmp	r3, #32
 800ee12:	d120      	bne.n	800ee56 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e01c      	b.n	800ee5c <HAL_UART_EnableReceiverTimeout+0x64>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2224      	movs	r2, #36	@ 0x24
 800ee2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ee40:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2220      	movs	r2, #32
 800ee46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	e002      	b.n	800ee5c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ee56:	2302      	movs	r3, #2
 800ee58:	e000      	b.n	800ee5c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
  }
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	40008000 	.word	0x40008000

0800ee6c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a1a      	ldr	r2, [pc, #104]	@ (800eefc <UART_InitCallbacksToDefault+0x74>)
 800ee94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a19      	ldr	r2, [pc, #100]	@ (800ef00 <UART_InitCallbacksToDefault+0x78>)
 800ee9c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a18      	ldr	r2, [pc, #96]	@ (800ef04 <UART_InitCallbacksToDefault+0x7c>)
 800eea4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a17      	ldr	r2, [pc, #92]	@ (800ef08 <UART_InitCallbacksToDefault+0x80>)
 800eeac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a16      	ldr	r2, [pc, #88]	@ (800ef0c <UART_InitCallbacksToDefault+0x84>)
 800eeb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a15      	ldr	r2, [pc, #84]	@ (800ef10 <UART_InitCallbacksToDefault+0x88>)
 800eebc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a14      	ldr	r2, [pc, #80]	@ (800ef14 <UART_InitCallbacksToDefault+0x8c>)
 800eec4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a13      	ldr	r2, [pc, #76]	@ (800ef18 <UART_InitCallbacksToDefault+0x90>)
 800eecc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a12      	ldr	r2, [pc, #72]	@ (800ef1c <UART_InitCallbacksToDefault+0x94>)
 800eed4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a11      	ldr	r2, [pc, #68]	@ (800ef20 <UART_InitCallbacksToDefault+0x98>)
 800eedc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a10      	ldr	r2, [pc, #64]	@ (800ef24 <UART_InitCallbacksToDefault+0x9c>)
 800eee4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a0f      	ldr	r2, [pc, #60]	@ (800ef28 <UART_InitCallbacksToDefault+0xa0>)
 800eeec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	0800ed1d 	.word	0x0800ed1d
 800ef00:	0800ed09 	.word	0x0800ed09
 800ef04:	0800ed45 	.word	0x0800ed45
 800ef08:	0800ed31 	.word	0x0800ed31
 800ef0c:	0800ed59 	.word	0x0800ed59
 800ef10:	0800ed6d 	.word	0x0800ed6d
 800ef14:	0800ed81 	.word	0x0800ed81
 800ef18:	0800ed95 	.word	0x0800ed95
 800ef1c:	0800fdb3 	.word	0x0800fdb3
 800ef20:	0800fdc7 	.word	0x0800fdc7
 800ef24:	0800fddb 	.word	0x0800fddb
 800ef28:	0800eda9 	.word	0x0800eda9

0800ef2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef30:	b08c      	sub	sp, #48	@ 0x30
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	689a      	ldr	r2, [r3, #8]
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	431a      	orrs	r2, r3
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	695b      	ldr	r3, [r3, #20]
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	4313      	orrs	r3, r2
 800ef52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	4baa      	ldr	r3, [pc, #680]	@ (800f204 <UART_SetConfig+0x2d8>)
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	6812      	ldr	r2, [r2, #0]
 800ef62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef64:	430b      	orrs	r3, r1
 800ef66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	68da      	ldr	r2, [r3, #12]
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	430a      	orrs	r2, r1
 800ef7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a9f      	ldr	r2, [pc, #636]	@ (800f208 <UART_SetConfig+0x2dc>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d004      	beq.n	800ef98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef94:	4313      	orrs	r3, r2
 800ef96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800efa2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	6812      	ldr	r2, [r2, #0]
 800efaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efac:	430b      	orrs	r3, r1
 800efae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb6:	f023 010f 	bic.w	r1, r3, #15
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	430a      	orrs	r2, r1
 800efc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a90      	ldr	r2, [pc, #576]	@ (800f20c <UART_SetConfig+0x2e0>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d125      	bne.n	800f01c <UART_SetConfig+0xf0>
 800efd0:	4b8f      	ldr	r3, [pc, #572]	@ (800f210 <UART_SetConfig+0x2e4>)
 800efd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efd6:	f003 0303 	and.w	r3, r3, #3
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d81a      	bhi.n	800f014 <UART_SetConfig+0xe8>
 800efde:	a201      	add	r2, pc, #4	@ (adr r2, 800efe4 <UART_SetConfig+0xb8>)
 800efe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe4:	0800eff5 	.word	0x0800eff5
 800efe8:	0800f005 	.word	0x0800f005
 800efec:	0800effd 	.word	0x0800effd
 800eff0:	0800f00d 	.word	0x0800f00d
 800eff4:	2301      	movs	r3, #1
 800eff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800effa:	e116      	b.n	800f22a <UART_SetConfig+0x2fe>
 800effc:	2302      	movs	r3, #2
 800effe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f002:	e112      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f004:	2304      	movs	r3, #4
 800f006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f00a:	e10e      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f00c:	2308      	movs	r3, #8
 800f00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f012:	e10a      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f014:	2310      	movs	r3, #16
 800f016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f01a:	e106      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a7c      	ldr	r2, [pc, #496]	@ (800f214 <UART_SetConfig+0x2e8>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d138      	bne.n	800f098 <UART_SetConfig+0x16c>
 800f026:	4b7a      	ldr	r3, [pc, #488]	@ (800f210 <UART_SetConfig+0x2e4>)
 800f028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f02c:	f003 030c 	and.w	r3, r3, #12
 800f030:	2b0c      	cmp	r3, #12
 800f032:	d82d      	bhi.n	800f090 <UART_SetConfig+0x164>
 800f034:	a201      	add	r2, pc, #4	@ (adr r2, 800f03c <UART_SetConfig+0x110>)
 800f036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03a:	bf00      	nop
 800f03c:	0800f071 	.word	0x0800f071
 800f040:	0800f091 	.word	0x0800f091
 800f044:	0800f091 	.word	0x0800f091
 800f048:	0800f091 	.word	0x0800f091
 800f04c:	0800f081 	.word	0x0800f081
 800f050:	0800f091 	.word	0x0800f091
 800f054:	0800f091 	.word	0x0800f091
 800f058:	0800f091 	.word	0x0800f091
 800f05c:	0800f079 	.word	0x0800f079
 800f060:	0800f091 	.word	0x0800f091
 800f064:	0800f091 	.word	0x0800f091
 800f068:	0800f091 	.word	0x0800f091
 800f06c:	0800f089 	.word	0x0800f089
 800f070:	2300      	movs	r3, #0
 800f072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f076:	e0d8      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f078:	2302      	movs	r3, #2
 800f07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f07e:	e0d4      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f080:	2304      	movs	r3, #4
 800f082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f086:	e0d0      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f088:	2308      	movs	r3, #8
 800f08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f08e:	e0cc      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f090:	2310      	movs	r3, #16
 800f092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f096:	e0c8      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a5e      	ldr	r2, [pc, #376]	@ (800f218 <UART_SetConfig+0x2ec>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d125      	bne.n	800f0ee <UART_SetConfig+0x1c2>
 800f0a2:	4b5b      	ldr	r3, [pc, #364]	@ (800f210 <UART_SetConfig+0x2e4>)
 800f0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f0ac:	2b30      	cmp	r3, #48	@ 0x30
 800f0ae:	d016      	beq.n	800f0de <UART_SetConfig+0x1b2>
 800f0b0:	2b30      	cmp	r3, #48	@ 0x30
 800f0b2:	d818      	bhi.n	800f0e6 <UART_SetConfig+0x1ba>
 800f0b4:	2b20      	cmp	r3, #32
 800f0b6:	d00a      	beq.n	800f0ce <UART_SetConfig+0x1a2>
 800f0b8:	2b20      	cmp	r3, #32
 800f0ba:	d814      	bhi.n	800f0e6 <UART_SetConfig+0x1ba>
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <UART_SetConfig+0x19a>
 800f0c0:	2b10      	cmp	r3, #16
 800f0c2:	d008      	beq.n	800f0d6 <UART_SetConfig+0x1aa>
 800f0c4:	e00f      	b.n	800f0e6 <UART_SetConfig+0x1ba>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0cc:	e0ad      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0d4:	e0a9      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f0d6:	2304      	movs	r3, #4
 800f0d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0dc:	e0a5      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f0de:	2308      	movs	r3, #8
 800f0e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0e4:	e0a1      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f0e6:	2310      	movs	r3, #16
 800f0e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ec:	e09d      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a4a      	ldr	r2, [pc, #296]	@ (800f21c <UART_SetConfig+0x2f0>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d125      	bne.n	800f144 <UART_SetConfig+0x218>
 800f0f8:	4b45      	ldr	r3, [pc, #276]	@ (800f210 <UART_SetConfig+0x2e4>)
 800f0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f102:	2bc0      	cmp	r3, #192	@ 0xc0
 800f104:	d016      	beq.n	800f134 <UART_SetConfig+0x208>
 800f106:	2bc0      	cmp	r3, #192	@ 0xc0
 800f108:	d818      	bhi.n	800f13c <UART_SetConfig+0x210>
 800f10a:	2b80      	cmp	r3, #128	@ 0x80
 800f10c:	d00a      	beq.n	800f124 <UART_SetConfig+0x1f8>
 800f10e:	2b80      	cmp	r3, #128	@ 0x80
 800f110:	d814      	bhi.n	800f13c <UART_SetConfig+0x210>
 800f112:	2b00      	cmp	r3, #0
 800f114:	d002      	beq.n	800f11c <UART_SetConfig+0x1f0>
 800f116:	2b40      	cmp	r3, #64	@ 0x40
 800f118:	d008      	beq.n	800f12c <UART_SetConfig+0x200>
 800f11a:	e00f      	b.n	800f13c <UART_SetConfig+0x210>
 800f11c:	2300      	movs	r3, #0
 800f11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f122:	e082      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f124:	2302      	movs	r3, #2
 800f126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f12a:	e07e      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f12c:	2304      	movs	r3, #4
 800f12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f132:	e07a      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f134:	2308      	movs	r3, #8
 800f136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f13a:	e076      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f13c:	2310      	movs	r3, #16
 800f13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f142:	e072      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a35      	ldr	r2, [pc, #212]	@ (800f220 <UART_SetConfig+0x2f4>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d12a      	bne.n	800f1a4 <UART_SetConfig+0x278>
 800f14e:	4b30      	ldr	r3, [pc, #192]	@ (800f210 <UART_SetConfig+0x2e4>)
 800f150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f15c:	d01a      	beq.n	800f194 <UART_SetConfig+0x268>
 800f15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f162:	d81b      	bhi.n	800f19c <UART_SetConfig+0x270>
 800f164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f168:	d00c      	beq.n	800f184 <UART_SetConfig+0x258>
 800f16a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f16e:	d815      	bhi.n	800f19c <UART_SetConfig+0x270>
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <UART_SetConfig+0x250>
 800f174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f178:	d008      	beq.n	800f18c <UART_SetConfig+0x260>
 800f17a:	e00f      	b.n	800f19c <UART_SetConfig+0x270>
 800f17c:	2300      	movs	r3, #0
 800f17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f182:	e052      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f184:	2302      	movs	r3, #2
 800f186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f18a:	e04e      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f18c:	2304      	movs	r3, #4
 800f18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f192:	e04a      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f194:	2308      	movs	r3, #8
 800f196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f19a:	e046      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f19c:	2310      	movs	r3, #16
 800f19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1a2:	e042      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a17      	ldr	r2, [pc, #92]	@ (800f208 <UART_SetConfig+0x2dc>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d13a      	bne.n	800f224 <UART_SetConfig+0x2f8>
 800f1ae:	4b18      	ldr	r3, [pc, #96]	@ (800f210 <UART_SetConfig+0x2e4>)
 800f1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f1b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f1bc:	d01a      	beq.n	800f1f4 <UART_SetConfig+0x2c8>
 800f1be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f1c2:	d81b      	bhi.n	800f1fc <UART_SetConfig+0x2d0>
 800f1c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f1c8:	d00c      	beq.n	800f1e4 <UART_SetConfig+0x2b8>
 800f1ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f1ce:	d815      	bhi.n	800f1fc <UART_SetConfig+0x2d0>
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d003      	beq.n	800f1dc <UART_SetConfig+0x2b0>
 800f1d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1d8:	d008      	beq.n	800f1ec <UART_SetConfig+0x2c0>
 800f1da:	e00f      	b.n	800f1fc <UART_SetConfig+0x2d0>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1e2:	e022      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1ea:	e01e      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f1ec:	2304      	movs	r3, #4
 800f1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1f2:	e01a      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f1f4:	2308      	movs	r3, #8
 800f1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1fa:	e016      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f1fc:	2310      	movs	r3, #16
 800f1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f202:	e012      	b.n	800f22a <UART_SetConfig+0x2fe>
 800f204:	cfff69f3 	.word	0xcfff69f3
 800f208:	40008000 	.word	0x40008000
 800f20c:	40013800 	.word	0x40013800
 800f210:	40021000 	.word	0x40021000
 800f214:	40004400 	.word	0x40004400
 800f218:	40004800 	.word	0x40004800
 800f21c:	40004c00 	.word	0x40004c00
 800f220:	40005000 	.word	0x40005000
 800f224:	2310      	movs	r3, #16
 800f226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4aae      	ldr	r2, [pc, #696]	@ (800f4e8 <UART_SetConfig+0x5bc>)
 800f230:	4293      	cmp	r3, r2
 800f232:	f040 8097 	bne.w	800f364 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f236:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f23a:	2b08      	cmp	r3, #8
 800f23c:	d823      	bhi.n	800f286 <UART_SetConfig+0x35a>
 800f23e:	a201      	add	r2, pc, #4	@ (adr r2, 800f244 <UART_SetConfig+0x318>)
 800f240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f244:	0800f269 	.word	0x0800f269
 800f248:	0800f287 	.word	0x0800f287
 800f24c:	0800f271 	.word	0x0800f271
 800f250:	0800f287 	.word	0x0800f287
 800f254:	0800f277 	.word	0x0800f277
 800f258:	0800f287 	.word	0x0800f287
 800f25c:	0800f287 	.word	0x0800f287
 800f260:	0800f287 	.word	0x0800f287
 800f264:	0800f27f 	.word	0x0800f27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f268:	f7fc fcec 	bl	800bc44 <HAL_RCC_GetPCLK1Freq>
 800f26c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f26e:	e010      	b.n	800f292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f270:	4b9e      	ldr	r3, [pc, #632]	@ (800f4ec <UART_SetConfig+0x5c0>)
 800f272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f274:	e00d      	b.n	800f292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f276:	f7fc fc77 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800f27a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f27c:	e009      	b.n	800f292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f27e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f284:	e005      	b.n	800f292 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f286:	2300      	movs	r3, #0
 800f288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 8130 	beq.w	800f4fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f29e:	4a94      	ldr	r2, [pc, #592]	@ (800f4f0 <UART_SetConfig+0x5c4>)
 800f2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4413      	add	r3, r2
 800f2b8:	69ba      	ldr	r2, [r7, #24]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d305      	bcc.n	800f2ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c4:	69ba      	ldr	r2, [r7, #24]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d903      	bls.n	800f2d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f2d0:	e113      	b.n	800f4fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	60bb      	str	r3, [r7, #8]
 800f2d8:	60fa      	str	r2, [r7, #12]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2de:	4a84      	ldr	r2, [pc, #528]	@ (800f4f0 <UART_SetConfig+0x5c4>)
 800f2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	603b      	str	r3, [r7, #0]
 800f2ea:	607a      	str	r2, [r7, #4]
 800f2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2f4:	f7f1 fc7e 	bl	8000bf4 <__aeabi_uldivmod>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	4619      	mov	r1, r3
 800f300:	f04f 0200 	mov.w	r2, #0
 800f304:	f04f 0300 	mov.w	r3, #0
 800f308:	020b      	lsls	r3, r1, #8
 800f30a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f30e:	0202      	lsls	r2, r0, #8
 800f310:	6979      	ldr	r1, [r7, #20]
 800f312:	6849      	ldr	r1, [r1, #4]
 800f314:	0849      	lsrs	r1, r1, #1
 800f316:	2000      	movs	r0, #0
 800f318:	460c      	mov	r4, r1
 800f31a:	4605      	mov	r5, r0
 800f31c:	eb12 0804 	adds.w	r8, r2, r4
 800f320:	eb43 0905 	adc.w	r9, r3, r5
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	469a      	mov	sl, r3
 800f32c:	4693      	mov	fp, r2
 800f32e:	4652      	mov	r2, sl
 800f330:	465b      	mov	r3, fp
 800f332:	4640      	mov	r0, r8
 800f334:	4649      	mov	r1, r9
 800f336:	f7f1 fc5d 	bl	8000bf4 <__aeabi_uldivmod>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4613      	mov	r3, r2
 800f340:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f348:	d308      	bcc.n	800f35c <UART_SetConfig+0x430>
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f350:	d204      	bcs.n	800f35c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	6a3a      	ldr	r2, [r7, #32]
 800f358:	60da      	str	r2, [r3, #12]
 800f35a:	e0ce      	b.n	800f4fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f35c:	2301      	movs	r3, #1
 800f35e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f362:	e0ca      	b.n	800f4fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	69db      	ldr	r3, [r3, #28]
 800f368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f36c:	d166      	bne.n	800f43c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f36e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f372:	2b08      	cmp	r3, #8
 800f374:	d827      	bhi.n	800f3c6 <UART_SetConfig+0x49a>
 800f376:	a201      	add	r2, pc, #4	@ (adr r2, 800f37c <UART_SetConfig+0x450>)
 800f378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37c:	0800f3a1 	.word	0x0800f3a1
 800f380:	0800f3a9 	.word	0x0800f3a9
 800f384:	0800f3b1 	.word	0x0800f3b1
 800f388:	0800f3c7 	.word	0x0800f3c7
 800f38c:	0800f3b7 	.word	0x0800f3b7
 800f390:	0800f3c7 	.word	0x0800f3c7
 800f394:	0800f3c7 	.word	0x0800f3c7
 800f398:	0800f3c7 	.word	0x0800f3c7
 800f39c:	0800f3bf 	.word	0x0800f3bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3a0:	f7fc fc50 	bl	800bc44 <HAL_RCC_GetPCLK1Freq>
 800f3a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3a6:	e014      	b.n	800f3d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3a8:	f7fc fc62 	bl	800bc70 <HAL_RCC_GetPCLK2Freq>
 800f3ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3ae:	e010      	b.n	800f3d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3b0:	4b4e      	ldr	r3, [pc, #312]	@ (800f4ec <UART_SetConfig+0x5c0>)
 800f3b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3b4:	e00d      	b.n	800f3d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3b6:	f7fc fbd7 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800f3ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3bc:	e009      	b.n	800f3d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3c4:	e005      	b.n	800f3d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f3d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 8090 	beq.w	800f4fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3de:	4a44      	ldr	r2, [pc, #272]	@ (800f4f0 <UART_SetConfig+0x5c4>)
 800f3e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3ec:	005a      	lsls	r2, r3, #1
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	085b      	lsrs	r3, r3, #1
 800f3f4:	441a      	add	r2, r3
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	2b0f      	cmp	r3, #15
 800f404:	d916      	bls.n	800f434 <UART_SetConfig+0x508>
 800f406:	6a3b      	ldr	r3, [r7, #32]
 800f408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f40c:	d212      	bcs.n	800f434 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	b29b      	uxth	r3, r3
 800f412:	f023 030f 	bic.w	r3, r3, #15
 800f416:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f418:	6a3b      	ldr	r3, [r7, #32]
 800f41a:	085b      	lsrs	r3, r3, #1
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	f003 0307 	and.w	r3, r3, #7
 800f422:	b29a      	uxth	r2, r3
 800f424:	8bfb      	ldrh	r3, [r7, #30]
 800f426:	4313      	orrs	r3, r2
 800f428:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	8bfa      	ldrh	r2, [r7, #30]
 800f430:	60da      	str	r2, [r3, #12]
 800f432:	e062      	b.n	800f4fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f43a:	e05e      	b.n	800f4fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f43c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f440:	2b08      	cmp	r3, #8
 800f442:	d828      	bhi.n	800f496 <UART_SetConfig+0x56a>
 800f444:	a201      	add	r2, pc, #4	@ (adr r2, 800f44c <UART_SetConfig+0x520>)
 800f446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44a:	bf00      	nop
 800f44c:	0800f471 	.word	0x0800f471
 800f450:	0800f479 	.word	0x0800f479
 800f454:	0800f481 	.word	0x0800f481
 800f458:	0800f497 	.word	0x0800f497
 800f45c:	0800f487 	.word	0x0800f487
 800f460:	0800f497 	.word	0x0800f497
 800f464:	0800f497 	.word	0x0800f497
 800f468:	0800f497 	.word	0x0800f497
 800f46c:	0800f48f 	.word	0x0800f48f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f470:	f7fc fbe8 	bl	800bc44 <HAL_RCC_GetPCLK1Freq>
 800f474:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f476:	e014      	b.n	800f4a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f478:	f7fc fbfa 	bl	800bc70 <HAL_RCC_GetPCLK2Freq>
 800f47c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f47e:	e010      	b.n	800f4a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f480:	4b1a      	ldr	r3, [pc, #104]	@ (800f4ec <UART_SetConfig+0x5c0>)
 800f482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f484:	e00d      	b.n	800f4a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f486:	f7fc fb6f 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800f48a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f48c:	e009      	b.n	800f4a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f48e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f494:	e005      	b.n	800f4a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f496:	2300      	movs	r3, #0
 800f498:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f49a:	2301      	movs	r3, #1
 800f49c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f4a0:	bf00      	nop
    }

    if (pclk != 0U)
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d028      	beq.n	800f4fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ac:	4a10      	ldr	r2, [pc, #64]	@ (800f4f0 <UART_SetConfig+0x5c4>)
 800f4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	085b      	lsrs	r3, r3, #1
 800f4c0:	441a      	add	r2, r3
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	2b0f      	cmp	r3, #15
 800f4d0:	d910      	bls.n	800f4f4 <UART_SetConfig+0x5c8>
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4d8:	d20c      	bcs.n	800f4f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60da      	str	r2, [r3, #12]
 800f4e4:	e009      	b.n	800f4fa <UART_SetConfig+0x5ce>
 800f4e6:	bf00      	nop
 800f4e8:	40008000 	.word	0x40008000
 800f4ec:	00f42400 	.word	0x00f42400
 800f4f0:	08012aa0 	.word	0x08012aa0
      }
      else
      {
        ret = HAL_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2201      	movs	r2, #1
 800f506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2200      	movs	r2, #0
 800f50e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	2200      	movs	r2, #0
 800f514:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f516:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3730      	adds	r7, #48	@ 0x30
 800f51e:	46bd      	mov	sp, r7
 800f520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f530:	f003 0308 	and.w	r3, r3, #8
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00a      	beq.n	800f54e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	430a      	orrs	r2, r1
 800f54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00a      	beq.n	800f570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	430a      	orrs	r2, r1
 800f56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f574:	f003 0302 	and.w	r3, r3, #2
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00a      	beq.n	800f592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	430a      	orrs	r2, r1
 800f590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00a      	beq.n	800f5b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	430a      	orrs	r2, r1
 800f5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b8:	f003 0310 	and.w	r3, r3, #16
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00a      	beq.n	800f5d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	430a      	orrs	r2, r1
 800f5d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5da:	f003 0320 	and.w	r3, r3, #32
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	430a      	orrs	r2, r1
 800f5f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f600:	2b00      	cmp	r3, #0
 800f602:	d01a      	beq.n	800f63a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	430a      	orrs	r2, r1
 800f618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f61e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f622:	d10a      	bne.n	800f63a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	430a      	orrs	r2, r1
 800f638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00a      	beq.n	800f65c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	430a      	orrs	r2, r1
 800f65a:	605a      	str	r2, [r3, #4]
  }
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b098      	sub	sp, #96	@ 0x60
 800f66c:	af02      	add	r7, sp, #8
 800f66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f678:	f7f9 faca 	bl	8008c10 <HAL_GetTick>
 800f67c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f003 0308 	and.w	r3, r3, #8
 800f688:	2b08      	cmp	r3, #8
 800f68a:	d12f      	bne.n	800f6ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f68c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f694:	2200      	movs	r2, #0
 800f696:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f88e 	bl	800f7bc <UART_WaitOnFlagUntilTimeout>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d022      	beq.n	800f6ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ae:	e853 3f00 	ldrex	r3, [r3]
 800f6b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6cc:	e841 2300 	strex	r3, r2, [r1]
 800f6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e6      	bne.n	800f6a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2220      	movs	r2, #32
 800f6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e063      	b.n	800f7b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f003 0304 	and.w	r3, r3, #4
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	d149      	bne.n	800f78e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f702:	2200      	movs	r2, #0
 800f704:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f857 	bl	800f7bc <UART_WaitOnFlagUntilTimeout>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d03c      	beq.n	800f78e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	623b      	str	r3, [r7, #32]
   return(result);
 800f722:	6a3b      	ldr	r3, [r7, #32]
 800f724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	461a      	mov	r2, r3
 800f730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f732:	633b      	str	r3, [r7, #48]	@ 0x30
 800f734:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f73a:	e841 2300 	strex	r3, r2, [r1]
 800f73e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1e6      	bne.n	800f714 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	3308      	adds	r3, #8
 800f74c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	e853 3f00 	ldrex	r3, [r3]
 800f754:	60fb      	str	r3, [r7, #12]
   return(result);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f023 0301 	bic.w	r3, r3, #1
 800f75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	3308      	adds	r3, #8
 800f764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f766:	61fa      	str	r2, [r7, #28]
 800f768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f76a:	69b9      	ldr	r1, [r7, #24]
 800f76c:	69fa      	ldr	r2, [r7, #28]
 800f76e:	e841 2300 	strex	r3, r2, [r1]
 800f772:	617b      	str	r3, [r7, #20]
   return(result);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1e5      	bne.n	800f746 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2220      	movs	r2, #32
 800f77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f78a:	2303      	movs	r3, #3
 800f78c:	e012      	b.n	800f7b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2220      	movs	r2, #32
 800f792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2220      	movs	r2, #32
 800f79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3758      	adds	r7, #88	@ 0x58
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	603b      	str	r3, [r7, #0]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7cc:	e04f      	b.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d4:	d04b      	beq.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7d6:	f7f9 fa1b 	bl	8008c10 <HAL_GetTick>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	69ba      	ldr	r2, [r7, #24]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d302      	bcc.n	800f7ec <UART_WaitOnFlagUntilTimeout+0x30>
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	e04e      	b.n	800f88e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 0304 	and.w	r3, r3, #4
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d037      	beq.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b80      	cmp	r3, #128	@ 0x80
 800f802:	d034      	beq.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2b40      	cmp	r3, #64	@ 0x40
 800f808:	d031      	beq.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	69db      	ldr	r3, [r3, #28]
 800f810:	f003 0308 	and.w	r3, r3, #8
 800f814:	2b08      	cmp	r3, #8
 800f816:	d110      	bne.n	800f83a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2208      	movs	r2, #8
 800f81e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f920 	bl	800fa66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2208      	movs	r2, #8
 800f82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	e029      	b.n	800f88e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	69db      	ldr	r3, [r3, #28]
 800f840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f848:	d111      	bne.n	800f86e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f000 f906 	bl	800fa66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2220      	movs	r2, #32
 800f85e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2200      	movs	r2, #0
 800f866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f86a:	2303      	movs	r3, #3
 800f86c:	e00f      	b.n	800f88e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	69da      	ldr	r2, [r3, #28]
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	4013      	ands	r3, r2
 800f878:	68ba      	ldr	r2, [r7, #8]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	bf0c      	ite	eq
 800f87e:	2301      	moveq	r3, #1
 800f880:	2300      	movne	r3, #0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	461a      	mov	r2, r3
 800f886:	79fb      	ldrb	r3, [r7, #7]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d0a0      	beq.n	800f7ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
	...

0800f898 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b096      	sub	sp, #88	@ 0x58
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	88fa      	ldrh	r2, [r7, #6]
 800f8b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2222      	movs	r2, #34	@ 0x22
 800f8c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d02d      	beq.n	800f92a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8d4:	4a40      	ldr	r2, [pc, #256]	@ (800f9d8 <UART_Start_Receive_DMA+0x140>)
 800f8d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8de:	4a3f      	ldr	r2, [pc, #252]	@ (800f9dc <UART_Start_Receive_DMA+0x144>)
 800f8e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8e8:	4a3d      	ldr	r2, [pc, #244]	@ (800f9e0 <UART_Start_Receive_DMA+0x148>)
 800f8ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3324      	adds	r3, #36	@ 0x24
 800f902:	4619      	mov	r1, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f908:	461a      	mov	r2, r3
 800f90a:	88fb      	ldrh	r3, [r7, #6]
 800f90c:	f7fa ffbc 	bl	800a888 <HAL_DMA_Start_IT>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2210      	movs	r2, #16
 800f91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2220      	movs	r2, #32
 800f922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f926:	2301      	movs	r3, #1
 800f928:	e051      	b.n	800f9ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d018      	beq.n	800f964 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f93a:	e853 3f00 	ldrex	r3, [r3]
 800f93e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f946:	657b      	str	r3, [r7, #84]	@ 0x54
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	461a      	mov	r2, r3
 800f94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f952:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f954:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f958:	e841 2300 	strex	r3, r2, [r1]
 800f95c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1e6      	bne.n	800f932 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	3308      	adds	r3, #8
 800f96a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96e:	e853 3f00 	ldrex	r3, [r3]
 800f972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f976:	f043 0301 	orr.w	r3, r3, #1
 800f97a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	3308      	adds	r3, #8
 800f982:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f984:	637a      	str	r2, [r7, #52]	@ 0x34
 800f986:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f98c:	e841 2300 	strex	r3, r2, [r1]
 800f990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1e5      	bne.n	800f964 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3308      	adds	r3, #8
 800f99e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	e853 3f00 	ldrex	r3, [r3]
 800f9a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	3308      	adds	r3, #8
 800f9b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9b8:	623a      	str	r2, [r7, #32]
 800f9ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9bc:	69f9      	ldr	r1, [r7, #28]
 800f9be:	6a3a      	ldr	r2, [r7, #32]
 800f9c0:	e841 2300 	strex	r3, r2, [r1]
 800f9c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1e5      	bne.n	800f998 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3758      	adds	r7, #88	@ 0x58
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	0800fb33 	.word	0x0800fb33
 800f9dc:	0800fc67 	.word	0x0800fc67
 800f9e0:	0800fcad 	.word	0x0800fcad

0800f9e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b08f      	sub	sp, #60	@ 0x3c
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	e853 3f00 	ldrex	r3, [r3]
 800f9f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fa00:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	461a      	mov	r2, r3
 800fa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fa0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa12:	e841 2300 	strex	r3, r2, [r1]
 800fa16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1e6      	bne.n	800f9ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	3308      	adds	r3, #8
 800fa24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	e853 3f00 	ldrex	r3, [r3]
 800fa2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fa34:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa3e:	61ba      	str	r2, [r7, #24]
 800fa40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa42:	6979      	ldr	r1, [r7, #20]
 800fa44:	69ba      	ldr	r2, [r7, #24]
 800fa46:	e841 2300 	strex	r3, r2, [r1]
 800fa4a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1e5      	bne.n	800fa1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2220      	movs	r2, #32
 800fa56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800fa5a:	bf00      	nop
 800fa5c:	373c      	adds	r7, #60	@ 0x3c
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b095      	sub	sp, #84	@ 0x54
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa76:	e853 3f00 	ldrex	r3, [r3]
 800fa7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa94:	e841 2300 	strex	r3, r2, [r1]
 800fa98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1e6      	bne.n	800fa6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	3308      	adds	r3, #8
 800faa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa8:	6a3b      	ldr	r3, [r7, #32]
 800faaa:	e853 3f00 	ldrex	r3, [r3]
 800faae:	61fb      	str	r3, [r7, #28]
   return(result);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fab6:	f023 0301 	bic.w	r3, r3, #1
 800faba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3308      	adds	r3, #8
 800fac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800faca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800facc:	e841 2300 	strex	r3, r2, [r1]
 800fad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1e3      	bne.n	800faa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d118      	bne.n	800fb12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	e853 3f00 	ldrex	r3, [r3]
 800faec:	60bb      	str	r3, [r7, #8]
   return(result);
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	f023 0310 	bic.w	r3, r3, #16
 800faf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fafe:	61bb      	str	r3, [r7, #24]
 800fb00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb02:	6979      	ldr	r1, [r7, #20]
 800fb04:	69ba      	ldr	r2, [r7, #24]
 800fb06:	e841 2300 	strex	r3, r2, [r1]
 800fb0a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1e6      	bne.n	800fae0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2220      	movs	r2, #32
 800fb16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fb26:	bf00      	nop
 800fb28:	3754      	adds	r7, #84	@ 0x54
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b09c      	sub	sp, #112	@ 0x70
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f003 0320 	and.w	r3, r3, #32
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d171      	bne.n	800fc32 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800fb4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb50:	2200      	movs	r2, #0
 800fb52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb5e:	e853 3f00 	ldrex	r3, [r3]
 800fb62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	461a      	mov	r2, r3
 800fb72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb76:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb7c:	e841 2300 	strex	r3, r2, [r1]
 800fb80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fb82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1e6      	bne.n	800fb56 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb92:	e853 3f00 	ldrex	r3, [r3]
 800fb96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb9a:	f023 0301 	bic.w	r3, r3, #1
 800fb9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800fba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3308      	adds	r3, #8
 800fba6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fba8:	647a      	str	r2, [r7, #68]	@ 0x44
 800fbaa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fbae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fbb0:	e841 2300 	strex	r3, r2, [r1]
 800fbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d1e5      	bne.n	800fb88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	623b      	str	r3, [r7, #32]
   return(result);
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbd2:	663b      	str	r3, [r7, #96]	@ 0x60
 800fbd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3308      	adds	r3, #8
 800fbda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fbdc:	633a      	str	r2, [r7, #48]	@ 0x30
 800fbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e5      	bne.n	800fbbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbf2:	2220      	movs	r2, #32
 800fbf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d118      	bne.n	800fc32 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	e853 3f00 	ldrex	r3, [r3]
 800fc0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f023 0310 	bic.w	r3, r3, #16
 800fc14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc1e:	61fb      	str	r3, [r7, #28]
 800fc20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc22:	69b9      	ldr	r1, [r7, #24]
 800fc24:	69fa      	ldr	r2, [r7, #28]
 800fc26:	e841 2300 	strex	r3, r2, [r1]
 800fc2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1e6      	bne.n	800fc00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc34:	2200      	movs	r2, #0
 800fc36:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d109      	bne.n	800fc54 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800fc40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fc46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fc48:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc50:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc52:	e004      	b.n	800fc5e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800fc54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc5c:	4798      	blx	r3
}
 800fc5e:	bf00      	nop
 800fc60:	3770      	adds	r7, #112	@ 0x70
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2201      	movs	r2, #1
 800fc78:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d10b      	bne.n	800fc9a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fc8e:	0852      	lsrs	r2, r2, #1
 800fc90:	b292      	uxth	r2, r2
 800fc92:	4611      	mov	r1, r2
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc98:	e004      	b.n	800fca4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	4798      	blx	r3
}
 800fca4:	bf00      	nop
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fcc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fcc8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcd4:	2b80      	cmp	r3, #128	@ 0x80
 800fcd6:	d109      	bne.n	800fcec <UART_DMAError+0x40>
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	2b21      	cmp	r3, #33	@ 0x21
 800fcdc:	d106      	bne.n	800fcec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800fce6:	6978      	ldr	r0, [r7, #20]
 800fce8:	f7ff fe7c 	bl	800f9e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcf6:	2b40      	cmp	r3, #64	@ 0x40
 800fcf8:	d109      	bne.n	800fd0e <UART_DMAError+0x62>
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b22      	cmp	r3, #34	@ 0x22
 800fcfe:	d106      	bne.n	800fd0e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f7ff feac 	bl	800fa66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd14:	f043 0210 	orr.w	r2, r3, #16
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fd24:	6978      	ldr	r0, [r7, #20]
 800fd26:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd28:	bf00      	nop
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	e853 3f00 	ldrex	r3, [r3]
 800fd6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd74:	61fb      	str	r3, [r7, #28]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	61bb      	str	r3, [r7, #24]
 800fd80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd82:	6979      	ldr	r1, [r7, #20]
 800fd84:	69ba      	ldr	r2, [r7, #24]
 800fd86:	e841 2300 	strex	r3, r2, [r1]
 800fd8a:	613b      	str	r3, [r7, #16]
   return(result);
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e6      	bne.n	800fd60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2220      	movs	r2, #32
 800fd96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdaa:	bf00      	nop
 800fdac:	3720      	adds	r7, #32
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b083      	sub	sp, #12
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fdba:	bf00      	nop
 800fdbc:	370c      	adds	r7, #12
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr

0800fdc6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fdc6:	b480      	push	{r7}
 800fdc8:	b083      	sub	sp, #12
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fdce:	bf00      	nop
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fdda:	b480      	push	{r7}
 800fddc:	b083      	sub	sp, #12
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fde2:	bf00      	nop
 800fde4:	370c      	adds	r7, #12
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fdee:	b480      	push	{r7}
 800fdf0:	b085      	sub	sp, #20
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d101      	bne.n	800fe04 <HAL_UARTEx_DisableFifoMode+0x16>
 800fe00:	2302      	movs	r3, #2
 800fe02:	e027      	b.n	800fe54 <HAL_UARTEx_DisableFifoMode+0x66>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2224      	movs	r2, #36	@ 0x24
 800fe10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f022 0201 	bic.w	r2, r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fe32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2220      	movs	r2, #32
 800fe46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d101      	bne.n	800fe78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe74:	2302      	movs	r3, #2
 800fe76:	e02d      	b.n	800fed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2224      	movs	r2, #36	@ 0x24
 800fe84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f022 0201 	bic.w	r2, r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f84f 	bl	800ff58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2220      	movs	r2, #32
 800fec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800feec:	2b01      	cmp	r3, #1
 800feee:	d101      	bne.n	800fef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fef0:	2302      	movs	r3, #2
 800fef2:	e02d      	b.n	800ff50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2224      	movs	r2, #36	@ 0x24
 800ff00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f022 0201 	bic.w	r2, r2, #1
 800ff1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	683a      	ldr	r2, [r7, #0]
 800ff2c:	430a      	orrs	r2, r1
 800ff2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f811 	bl	800ff58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2220      	movs	r2, #32
 800ff42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d108      	bne.n	800ff7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff78:	e031      	b.n	800ffde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff7a:	2308      	movs	r3, #8
 800ff7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff7e:	2308      	movs	r3, #8
 800ff80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	0e5b      	lsrs	r3, r3, #25
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	f003 0307 	and.w	r3, r3, #7
 800ff90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	0f5b      	lsrs	r3, r3, #29
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	f003 0307 	and.w	r3, r3, #7
 800ffa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffa2:	7bbb      	ldrb	r3, [r7, #14]
 800ffa4:	7b3a      	ldrb	r2, [r7, #12]
 800ffa6:	4911      	ldr	r1, [pc, #68]	@ (800ffec <UARTEx_SetNbDataToProcess+0x94>)
 800ffa8:	5c8a      	ldrb	r2, [r1, r2]
 800ffaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ffae:	7b3a      	ldrb	r2, [r7, #12]
 800ffb0:	490f      	ldr	r1, [pc, #60]	@ (800fff0 <UARTEx_SetNbDataToProcess+0x98>)
 800ffb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffc0:	7bfb      	ldrb	r3, [r7, #15]
 800ffc2:	7b7a      	ldrb	r2, [r7, #13]
 800ffc4:	4909      	ldr	r1, [pc, #36]	@ (800ffec <UARTEx_SetNbDataToProcess+0x94>)
 800ffc6:	5c8a      	ldrb	r2, [r1, r2]
 800ffc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ffcc:	7b7a      	ldrb	r2, [r7, #13]
 800ffce:	4908      	ldr	r1, [pc, #32]	@ (800fff0 <UARTEx_SetNbDataToProcess+0x98>)
 800ffd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ffde:	bf00      	nop
 800ffe0:	3714      	adds	r7, #20
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	08012ab8 	.word	0x08012ab8
 800fff0:	08012ac0 	.word	0x08012ac0

0800fff4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b08b      	sub	sp, #44	@ 0x2c
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	885b      	ldrh	r3, [r3, #2]
 801001c:	fb02 f303 	mul.w	r3, r2, r3
 8010020:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010026:	e013      	b.n	8010050 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8010028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002a:	1d1a      	adds	r2, r3, #4
 801002c:	627a      	str	r2, [r7, #36]	@ 0x24
 801002e:	ed93 7a00 	vldr	s14, [r3]
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	1d1a      	adds	r2, r3, #4
 8010036:	623a      	str	r2, [r7, #32]
 8010038:	edd3 7a00 	vldr	s15, [r3]
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	1d1a      	adds	r2, r3, #4
 8010040:	61fa      	str	r2, [r7, #28]
 8010042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010046:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	3b01      	subs	r3, #1
 801004e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1e8      	bne.n	8010028 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010056:	2300      	movs	r3, #0
 8010058:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801005a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801005e:	4618      	mov	r0, r3
 8010060:	372c      	adds	r7, #44	@ 0x2c
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr

0801006a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 801006a:	b480      	push	{r7}
 801006c:	b085      	sub	sp, #20
 801006e:	af00      	add	r7, sp, #0
 8010070:	60f8      	str	r0, [r7, #12]
 8010072:	607b      	str	r3, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	817b      	strh	r3, [r7, #10]
 8010078:	4613      	mov	r3, r2
 801007a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	897a      	ldrh	r2, [r7, #10]
 8010080:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	893a      	ldrh	r2, [r7, #8]
 8010086:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	605a      	str	r2, [r3, #4]
}
 801008e:	bf00      	nop
 8010090:	3714      	adds	r7, #20
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr

0801009a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801009a:	b480      	push	{r7}
 801009c:	b0bb      	sub	sp, #236	@ 0xec
 801009e:	af00      	add	r7, sp, #0
 80100a0:	6078      	str	r0, [r7, #4]
 80100a2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	885b      	ldrh	r3, [r3, #2]
 80100ba:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80100bc:	f04f 0300 	mov.w	r3, #0
 80100c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80100c4:	f04f 0300 	mov.w	r3, #0
 80100c8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80100ca:	2300      	movs	r3, #0
 80100cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80100d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80100d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80100dc:	e03b      	b.n	8010156 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80100de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80100e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80100e4:	1ad3      	subs	r3, r2, r3
 80100e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80100ea:	e00c      	b.n	8010106 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80100ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100f0:	1d1a      	adds	r2, r3, #4
 80100f2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80100f6:	f04f 0200 	mov.w	r2, #0
 80100fa:	601a      	str	r2, [r3, #0]
        j--;
 80100fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010100:	3b01      	subs	r3, #1
 8010102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8010106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1ee      	bne.n	80100ec <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 801010e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010112:	1d1a      	adds	r2, r3, #4
 8010114:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8010118:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801011c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 801011e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010122:	3b01      	subs	r3, #1
 8010124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8010128:	e00c      	b.n	8010144 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801012a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801012e:	1d1a      	adds	r2, r3, #4
 8010130:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8010134:	f04f 0200 	mov.w	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
        j--;
 801013a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801013e:	3b01      	subs	r3, #1
 8010140:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8010144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1ee      	bne.n	801012a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 801014c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010150:	3b01      	subs	r3, #1
 8010152:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8010156:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1bf      	bne.n	80100de <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801015e:	2300      	movs	r3, #0
 8010160:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010164:	e2c7      	b.n	80106f6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8010166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801016a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685a      	ldr	r2, [r3, #4]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	885b      	ldrh	r3, [r3, #2]
 8010174:	3301      	adds	r3, #1
 8010176:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 801017a:	fb01 f303 	mul.w	r3, r1, r3
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	4413      	add	r3, r2
 8010182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8010186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8010190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010194:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8010198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801019c:	3301      	adds	r3, #1
 801019e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80101a2:	e02c      	b.n	80101fe <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	885b      	ldrh	r3, [r3, #2]
 80101ac:	4619      	mov	r1, r3
 80101ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101b2:	fb03 f101 	mul.w	r1, r3, r1
 80101b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80101ba:	440b      	add	r3, r1
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80101c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80101cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80101d0:	eeb0 7ae7 	vabs.f32	s14, s15
 80101d4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80101d8:	eef0 7ae7 	vabs.f32	s15, s15
 80101dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e4:	dd06      	ble.n	80101f4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80101e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 80101ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80101f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101f8:	3301      	adds	r3, #1
 80101fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80101fe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010204:	429a      	cmp	r2, r3
 8010206:	d3cd      	bcc.n	80101a4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8010208:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801020c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010214:	f000 809b 	beq.w	801034e <arm_mat_inverse_f32+0x2b4>
 8010218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801021c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010220:	429a      	cmp	r2, r3
 8010222:	f000 8094 	beq.w	801034e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	885b      	ldrh	r3, [r3, #2]
 801023a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801023c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801023e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010248:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801024a:	fb03 f202 	mul.w	r2, r3, r2
 801024e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010252:	4413      	add	r3, r2
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801025a:	4413      	add	r3, r2
 801025c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010262:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010266:	fb03 f202 	mul.w	r2, r3, r2
 801026a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801026e:	4413      	add	r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010276:	4413      	add	r3, r2
 8010278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801027c:	2300      	movs	r3, #0
 801027e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010282:	e018      	b.n	80102b6 <arm_mat_inverse_f32+0x21c>
 8010284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801028c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010290:	1d1a      	adds	r2, r3, #4
 8010292:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8010296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801029a:	6812      	ldr	r2, [r2, #0]
 801029c:	601a      	str	r2, [r3, #0]
 801029e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80102a2:	1d1a      	adds	r2, r3, #4
 80102a4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80102a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80102b0:	3301      	adds	r3, #1
 80102b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80102b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80102ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102bc:	429a      	cmp	r2, r3
 80102be:	dbe1      	blt.n	8010284 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	885b      	ldrh	r3, [r3, #2]
 80102d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80102d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80102da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80102de:	fb02 f303 	mul.w	r3, r2, r3
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80102e8:	4413      	add	r3, r2
 80102ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80102ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102f4:	fb02 f303 	mul.w	r3, r2, r3
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80102fe:	4413      	add	r3, r2
 8010300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010304:	2300      	movs	r3, #0
 8010306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801030a:	e018      	b.n	801033e <arm_mat_inverse_f32+0x2a4>
 801030c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010318:	1d1a      	adds	r2, r3, #4
 801031a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801031e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010322:	6812      	ldr	r2, [r2, #0]
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801032a:	1d1a      	adds	r2, r3, #4
 801032c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010338:	3301      	adds	r3, #1
 801033a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801033e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010344:	429a      	cmp	r2, r3
 8010346:	dbe1      	blt.n	801030c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8010348:	2301      	movs	r3, #1
 801034a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801034e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010352:	2b01      	cmp	r3, #1
 8010354:	d009      	beq.n	801036a <arm_mat_inverse_f32+0x2d0>
 8010356:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801035a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010362:	d102      	bne.n	801036a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8010364:	f06f 0304 	mvn.w	r3, #4
 8010368:	e208      	b.n	801077c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801036a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801036e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8010372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010376:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	885b      	ldrh	r3, [r3, #2]
 8010386:	637b      	str	r3, [r7, #52]	@ 0x34
 8010388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801038a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	633b      	str	r3, [r7, #48]	@ 0x30
 8010392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010394:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010396:	fb03 f202 	mul.w	r2, r3, r2
 801039a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801039e:	4413      	add	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80103a6:	4413      	add	r3, r2
 80103a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80103ac:	2300      	movs	r3, #0
 80103ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80103b2:	e011      	b.n	80103d8 <arm_mat_inverse_f32+0x33e>
 80103b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80103b8:	1d1a      	adds	r2, r3, #4
 80103ba:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80103be:	ed93 7a00 	vldr	s14, [r3]
 80103c2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80103c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103ca:	edc3 7a00 	vstr	s15, [r3]
 80103ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80103d2:	3301      	adds	r3, #1
 80103d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80103d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80103dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103de:	429a      	cmp	r2, r3
 80103e0:	dbe8      	blt.n	80103b4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80103f8:	fb02 f303 	mul.w	r3, r2, r3
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010402:	4413      	add	r3, r2
 8010404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010408:	2300      	movs	r3, #0
 801040a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801040e:	e011      	b.n	8010434 <arm_mat_inverse_f32+0x39a>
 8010410:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010414:	1d1a      	adds	r2, r3, #4
 8010416:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801041a:	ed93 7a00 	vldr	s14, [r3]
 801041e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010426:	edc3 7a00 	vstr	s15, [r3]
 801042a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801042e:	3301      	adds	r3, #1
 8010430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010434:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8010438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043a:	429a      	cmp	r2, r3
 801043c:	dbe8      	blt.n	8010410 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8010444:	e0ae      	b.n	80105a4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	885b      	ldrh	r3, [r3, #2]
 801044e:	4619      	mov	r1, r3
 8010450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010454:	fb03 f101 	mul.w	r1, r3, r1
 8010458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801045c:	440b      	add	r3, r1
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8010466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	885b      	ldrh	r3, [r3, #2]
 8010484:	617b      	str	r3, [r7, #20]
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	613b      	str	r3, [r7, #16]
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010496:	fb03 f202 	mul.w	r2, r3, r2
 801049a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801049e:	4413      	add	r3, r2
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80104a6:	4413      	add	r3, r2
 80104a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104b0:	fb03 f202 	mul.w	r2, r3, r2
 80104b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80104b8:	4413      	add	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80104c0:	4413      	add	r3, r2
 80104c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80104c6:	2300      	movs	r3, #0
 80104c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80104cc:	e01a      	b.n	8010504 <arm_mat_inverse_f32+0x46a>
 80104ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80104d2:	1d1a      	adds	r2, r3, #4
 80104d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80104d8:	ed93 7a00 	vldr	s14, [r3]
 80104dc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80104e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80104e8:	1d1a      	adds	r2, r3, #4
 80104ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80104ee:	ed93 7a00 	vldr	s14, [r3]
 80104f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104f6:	edc3 7a00 	vstr	s15, [r3]
 80104fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80104fe:	3301      	adds	r3, #1
 8010500:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010504:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	429a      	cmp	r2, r3
 801050c:	dbdf      	blt.n	80104ce <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	885b      	ldrh	r3, [r3, #2]
 8010522:	60fb      	str	r3, [r7, #12]
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	60bb      	str	r3, [r7, #8]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801052e:	fb02 f303 	mul.w	r3, r2, r3
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010538:	4413      	add	r3, r2
 801053a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010542:	fb02 f303 	mul.w	r3, r2, r3
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801054c:	4413      	add	r3, r2
 801054e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010552:	2300      	movs	r3, #0
 8010554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010558:	e01a      	b.n	8010590 <arm_mat_inverse_f32+0x4f6>
 801055a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801055e:	1d1a      	adds	r2, r3, #4
 8010560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010564:	ed93 7a00 	vldr	s14, [r3]
 8010568:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801056c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010574:	1d1a      	adds	r2, r3, #4
 8010576:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801057a:	ed93 7a00 	vldr	s14, [r3]
 801057e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010582:	edc3 7a00 	vstr	s15, [r3]
 8010586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801058a:	3301      	adds	r3, #1
 801058c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010590:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	429a      	cmp	r2, r3
 8010598:	dbdf      	blt.n	801055a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 801059a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801059e:	3301      	adds	r3, #1
 80105a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80105a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80105a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105aa:	429a      	cmp	r2, r3
 80105ac:	f4ff af4b 	bcc.w	8010446 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80105b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105b2:	3301      	adds	r3, #1
 80105b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80105b8:	e092      	b.n	80106e0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	885b      	ldrh	r3, [r3, #2]
 80105c2:	4619      	mov	r1, r3
 80105c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80105c8:	fb03 f101 	mul.w	r1, r3, r1
 80105cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80105d0:	440b      	add	r3, r1
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80105da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	885b      	ldrh	r3, [r3, #2]
 80105f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80105f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	623b      	str	r3, [r7, #32]
 8010600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010602:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010606:	fb03 f202 	mul.w	r2, r3, r2
 801060a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801060e:	4413      	add	r3, r2
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010614:	4413      	add	r3, r2
 8010616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801061c:	fb03 f202 	mul.w	r2, r3, r2
 8010620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010624:	4413      	add	r3, r2
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801062a:	4413      	add	r3, r2
 801062c:	677b      	str	r3, [r7, #116]	@ 0x74
 801062e:	2300      	movs	r3, #0
 8010630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010632:	e014      	b.n	801065e <arm_mat_inverse_f32+0x5c4>
 8010634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010636:	1d1a      	adds	r2, r3, #4
 8010638:	677a      	str	r2, [r7, #116]	@ 0x74
 801063a:	ed93 7a00 	vldr	s14, [r3]
 801063e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010648:	1d1a      	adds	r2, r3, #4
 801064a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801064c:	ed93 7a00 	vldr	s14, [r3]
 8010650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010654:	edc3 7a00 	vstr	s15, [r3]
 8010658:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801065a:	3301      	adds	r3, #1
 801065c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801065e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	429a      	cmp	r2, r3
 8010664:	dbe6      	blt.n	8010634 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	885b      	ldrh	r3, [r3, #2]
 8010676:	61fb      	str	r3, [r7, #28]
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	61bb      	str	r3, [r7, #24]
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010682:	fb02 f303 	mul.w	r3, r2, r3
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801068a:	4413      	add	r3, r2
 801068c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010692:	fb02 f303 	mul.w	r3, r2, r3
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801069a:	4413      	add	r3, r2
 801069c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801069e:	2300      	movs	r3, #0
 80106a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80106a2:	e014      	b.n	80106ce <arm_mat_inverse_f32+0x634>
 80106a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80106a6:	1d1a      	adds	r2, r3, #4
 80106a8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80106aa:	ed93 7a00 	vldr	s14, [r3]
 80106ae:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80106b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106b8:	1d1a      	adds	r2, r3, #4
 80106ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80106bc:	ed93 7a00 	vldr	s14, [r3]
 80106c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106c4:	edc3 7a00 	vstr	s15, [r3]
 80106c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106ca:	3301      	adds	r3, #1
 80106cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80106ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	dbe6      	blt.n	80106a4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80106d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80106da:	3301      	adds	r3, #1
 80106dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80106e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80106e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106e6:	429a      	cmp	r2, r3
 80106e8:	f4ff af67 	bcc.w	80105ba <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80106ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80106f0:	3301      	adds	r3, #1
 80106f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80106f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80106fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106fc:	429a      	cmp	r2, r3
 80106fe:	f4ff ad32 	bcc.w	8010166 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010702:	2300      	movs	r3, #0
 8010704:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8010708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801070c:	2b01      	cmp	r3, #1
 801070e:	d033      	beq.n	8010778 <arm_mat_inverse_f32+0x6de>
 8010710:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	d12c      	bne.n	8010778 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8010724:	2300      	movs	r3, #0
 8010726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801072a:	e010      	b.n	801074e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 801072c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010734:	4413      	add	r3, r2
 8010736:	edd3 7a00 	vldr	s15, [r3]
 801073a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	d10d      	bne.n	8010760 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8010744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010748:	3301      	adds	r3, #1
 801074a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801074e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010752:	fb02 f303 	mul.w	r3, r2, r3
 8010756:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801075a:	429a      	cmp	r2, r3
 801075c:	d3e6      	bcc.n	801072c <arm_mat_inverse_f32+0x692>
 801075e:	e000      	b.n	8010762 <arm_mat_inverse_f32+0x6c8>
            break;
 8010760:	bf00      	nop
      }

      if (i == numRows * numCols)
 8010762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010766:	fb02 f303 	mul.w	r3, r2, r3
 801076a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801076e:	429a      	cmp	r2, r3
 8010770:	d102      	bne.n	8010778 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8010772:	23fb      	movs	r3, #251	@ 0xfb
 8010774:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8010778:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 801077c:	4618      	mov	r0, r3
 801077e:	37ec      	adds	r7, #236	@ 0xec
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010788:	b480      	push	{r7}
 801078a:	b093      	sub	sp, #76	@ 0x4c
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	885b      	ldrh	r3, [r3, #2]
 80107bc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	885b      	ldrh	r3, [r3, #2]
 80107c2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80107c4:	2300      	movs	r3, #0
 80107c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107c8:	8b7b      	ldrh	r3, [r7, #26]
 80107ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80107cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ce:	009b      	lsls	r3, r3, #2
 80107d0:	69fa      	ldr	r2, [r7, #28]
 80107d2:	4413      	add	r3, r2
 80107d4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80107d6:	8b3b      	ldrh	r3, [r7, #24]
 80107d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80107e0:	f04f 0300 	mov.w	r3, #0
 80107e4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80107e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107e8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80107ea:	8afb      	ldrh	r3, [r7, #22]
 80107ec:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80107ee:	e017      	b.n	8010820 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80107f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107f2:	1d1a      	adds	r2, r3, #4
 80107f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80107f6:	ed93 7a00 	vldr	s14, [r3]
 80107fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107fc:	edd3 7a00 	vldr	s15, [r3]
 8010800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010804:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010808:	ee77 7a27 	vadd.f32	s15, s14, s15
 801080c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8010810:	8b3b      	ldrh	r3, [r7, #24]
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010816:	4413      	add	r3, r2
 8010818:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 801081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081c:	3b01      	subs	r3, #1
 801081e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1e4      	bne.n	80107f0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8010826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010828:	1d1a      	adds	r2, r3, #4
 801082a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801082c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801082e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8010830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010832:	3b01      	subs	r3, #1
 8010834:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8010836:	8b3a      	ldrh	r2, [r7, #24]
 8010838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	009b      	lsls	r3, r3, #2
 801083e:	6a3a      	ldr	r2, [r7, #32]
 8010840:	4413      	add	r3, r2
 8010842:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8010844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1ca      	bne.n	80107e0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 801084a:	8b3b      	ldrh	r3, [r7, #24]
 801084c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801084e:	4413      	add	r3, r2
 8010850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8010852:	8afb      	ldrh	r3, [r7, #22]
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010858:	4413      	add	r3, r2
 801085a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 801085c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085e:	3b01      	subs	r3, #1
 8010860:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8010862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1b1      	bne.n	80107cc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010868:	2300      	movs	r3, #0
 801086a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 801086c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8010870:	4618      	mov	r0, r3
 8010872:	374c      	adds	r7, #76	@ 0x4c
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801087c:	b480      	push	{r7}
 801087e:	b08b      	sub	sp, #44	@ 0x2c
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	ed87 0a02 	vstr	s0, [r7, #8]
 8010888:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	885b      	ldrh	r3, [r3, #2]
 80108a0:	fb02 f303 	mul.w	r3, r2, r3
 80108a4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80108aa:	e010      	b.n	80108ce <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80108ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ae:	1d1a      	adds	r2, r3, #4
 80108b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80108b2:	ed93 7a00 	vldr	s14, [r3]
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	1d1a      	adds	r2, r3, #4
 80108ba:	623a      	str	r2, [r7, #32]
 80108bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80108c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108c4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1eb      	bne.n	80108ac <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80108d4:	2300      	movs	r3, #0
 80108d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80108d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	372c      	adds	r7, #44	@ 0x2c
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b08b      	sub	sp, #44	@ 0x2c
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	461a      	mov	r2, r3
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	885b      	ldrh	r3, [r3, #2]
 8010910:	fb02 f303 	mul.w	r3, r2, r3
 8010914:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801091a:	e013      	b.n	8010944 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 801091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091e:	1d1a      	adds	r2, r3, #4
 8010920:	627a      	str	r2, [r7, #36]	@ 0x24
 8010922:	ed93 7a00 	vldr	s14, [r3]
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	1d1a      	adds	r2, r3, #4
 801092a:	623a      	str	r2, [r7, #32]
 801092c:	edd3 7a00 	vldr	s15, [r3]
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	1d1a      	adds	r2, r3, #4
 8010934:	61fa      	str	r2, [r7, #28]
 8010936:	ee77 7a67 	vsub.f32	s15, s14, s15
 801093a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	3b01      	subs	r3, #1
 8010942:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1e8      	bne.n	801091c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801094a:	2300      	movs	r3, #0
 801094c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801094e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010952:	4618      	mov	r0, r3
 8010954:	372c      	adds	r7, #44	@ 0x2c
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801095e:	b480      	push	{r7}
 8010960:	b08b      	sub	sp, #44	@ 0x2c
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
 8010966:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	885b      	ldrh	r3, [r3, #2]
 801097e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8010980:	89fb      	ldrh	r3, [r7, #14]
 8010982:	61bb      	str	r3, [r7, #24]
 8010984:	2300      	movs	r3, #0
 8010986:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	693a      	ldr	r2, [r7, #16]
 801098e:	4413      	add	r3, r2
 8010990:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8010992:	89bb      	ldrh	r3, [r7, #12]
 8010994:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8010996:	e00d      	b.n	80109b4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8010998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099a:	1d1a      	adds	r2, r3, #4
 801099c:	627a      	str	r2, [r7, #36]	@ 0x24
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80109a4:	89fb      	ldrh	r3, [r7, #14]
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	6a3a      	ldr	r2, [r7, #32]
 80109aa:	4413      	add	r3, r2
 80109ac:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	3b01      	subs	r3, #1
 80109b2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1ee      	bne.n	8010998 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	3301      	adds	r3, #1
 80109be:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	3b01      	subs	r3, #1
 80109c4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1dd      	bne.n	8010988 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80109cc:	2300      	movs	r3, #0
 80109ce:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80109d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	372c      	adds	r7, #44	@ 0x2c
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr

080109e0 <malloc>:
 80109e0:	4b02      	ldr	r3, [pc, #8]	@ (80109ec <malloc+0xc>)
 80109e2:	4601      	mov	r1, r0
 80109e4:	6818      	ldr	r0, [r3, #0]
 80109e6:	f000 b825 	b.w	8010a34 <_malloc_r>
 80109ea:	bf00      	nop
 80109ec:	20000144 	.word	0x20000144

080109f0 <sbrk_aligned>:
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	4e0f      	ldr	r6, [pc, #60]	@ (8010a30 <sbrk_aligned+0x40>)
 80109f4:	460c      	mov	r4, r1
 80109f6:	6831      	ldr	r1, [r6, #0]
 80109f8:	4605      	mov	r5, r0
 80109fa:	b911      	cbnz	r1, 8010a02 <sbrk_aligned+0x12>
 80109fc:	f000 f8ae 	bl	8010b5c <_sbrk_r>
 8010a00:	6030      	str	r0, [r6, #0]
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	f000 f8a9 	bl	8010b5c <_sbrk_r>
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	d103      	bne.n	8010a16 <sbrk_aligned+0x26>
 8010a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8010a12:	4620      	mov	r0, r4
 8010a14:	bd70      	pop	{r4, r5, r6, pc}
 8010a16:	1cc4      	adds	r4, r0, #3
 8010a18:	f024 0403 	bic.w	r4, r4, #3
 8010a1c:	42a0      	cmp	r0, r4
 8010a1e:	d0f8      	beq.n	8010a12 <sbrk_aligned+0x22>
 8010a20:	1a21      	subs	r1, r4, r0
 8010a22:	4628      	mov	r0, r5
 8010a24:	f000 f89a 	bl	8010b5c <_sbrk_r>
 8010a28:	3001      	adds	r0, #1
 8010a2a:	d1f2      	bne.n	8010a12 <sbrk_aligned+0x22>
 8010a2c:	e7ef      	b.n	8010a0e <sbrk_aligned+0x1e>
 8010a2e:	bf00      	nop
 8010a30:	200021c0 	.word	0x200021c0

08010a34 <_malloc_r>:
 8010a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a38:	1ccd      	adds	r5, r1, #3
 8010a3a:	f025 0503 	bic.w	r5, r5, #3
 8010a3e:	3508      	adds	r5, #8
 8010a40:	2d0c      	cmp	r5, #12
 8010a42:	bf38      	it	cc
 8010a44:	250c      	movcc	r5, #12
 8010a46:	2d00      	cmp	r5, #0
 8010a48:	4606      	mov	r6, r0
 8010a4a:	db01      	blt.n	8010a50 <_malloc_r+0x1c>
 8010a4c:	42a9      	cmp	r1, r5
 8010a4e:	d904      	bls.n	8010a5a <_malloc_r+0x26>
 8010a50:	230c      	movs	r3, #12
 8010a52:	6033      	str	r3, [r6, #0]
 8010a54:	2000      	movs	r0, #0
 8010a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b30 <_malloc_r+0xfc>
 8010a5e:	f000 f869 	bl	8010b34 <__malloc_lock>
 8010a62:	f8d8 3000 	ldr.w	r3, [r8]
 8010a66:	461c      	mov	r4, r3
 8010a68:	bb44      	cbnz	r4, 8010abc <_malloc_r+0x88>
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f7ff ffbf 	bl	80109f0 <sbrk_aligned>
 8010a72:	1c43      	adds	r3, r0, #1
 8010a74:	4604      	mov	r4, r0
 8010a76:	d158      	bne.n	8010b2a <_malloc_r+0xf6>
 8010a78:	f8d8 4000 	ldr.w	r4, [r8]
 8010a7c:	4627      	mov	r7, r4
 8010a7e:	2f00      	cmp	r7, #0
 8010a80:	d143      	bne.n	8010b0a <_malloc_r+0xd6>
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	d04b      	beq.n	8010b1e <_malloc_r+0xea>
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	4639      	mov	r1, r7
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	eb04 0903 	add.w	r9, r4, r3
 8010a90:	f000 f864 	bl	8010b5c <_sbrk_r>
 8010a94:	4581      	cmp	r9, r0
 8010a96:	d142      	bne.n	8010b1e <_malloc_r+0xea>
 8010a98:	6821      	ldr	r1, [r4, #0]
 8010a9a:	1a6d      	subs	r5, r5, r1
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7ff ffa6 	bl	80109f0 <sbrk_aligned>
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d03a      	beq.n	8010b1e <_malloc_r+0xea>
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	442b      	add	r3, r5
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	f8d8 3000 	ldr.w	r3, [r8]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	bb62      	cbnz	r2, 8010b10 <_malloc_r+0xdc>
 8010ab6:	f8c8 7000 	str.w	r7, [r8]
 8010aba:	e00f      	b.n	8010adc <_malloc_r+0xa8>
 8010abc:	6822      	ldr	r2, [r4, #0]
 8010abe:	1b52      	subs	r2, r2, r5
 8010ac0:	d420      	bmi.n	8010b04 <_malloc_r+0xd0>
 8010ac2:	2a0b      	cmp	r2, #11
 8010ac4:	d917      	bls.n	8010af6 <_malloc_r+0xc2>
 8010ac6:	1961      	adds	r1, r4, r5
 8010ac8:	42a3      	cmp	r3, r4
 8010aca:	6025      	str	r5, [r4, #0]
 8010acc:	bf18      	it	ne
 8010ace:	6059      	strne	r1, [r3, #4]
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	bf08      	it	eq
 8010ad4:	f8c8 1000 	streq.w	r1, [r8]
 8010ad8:	5162      	str	r2, [r4, r5]
 8010ada:	604b      	str	r3, [r1, #4]
 8010adc:	4630      	mov	r0, r6
 8010ade:	f000 f82f 	bl	8010b40 <__malloc_unlock>
 8010ae2:	f104 000b 	add.w	r0, r4, #11
 8010ae6:	1d23      	adds	r3, r4, #4
 8010ae8:	f020 0007 	bic.w	r0, r0, #7
 8010aec:	1ac2      	subs	r2, r0, r3
 8010aee:	bf1c      	itt	ne
 8010af0:	1a1b      	subne	r3, r3, r0
 8010af2:	50a3      	strne	r3, [r4, r2]
 8010af4:	e7af      	b.n	8010a56 <_malloc_r+0x22>
 8010af6:	6862      	ldr	r2, [r4, #4]
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	bf0c      	ite	eq
 8010afc:	f8c8 2000 	streq.w	r2, [r8]
 8010b00:	605a      	strne	r2, [r3, #4]
 8010b02:	e7eb      	b.n	8010adc <_malloc_r+0xa8>
 8010b04:	4623      	mov	r3, r4
 8010b06:	6864      	ldr	r4, [r4, #4]
 8010b08:	e7ae      	b.n	8010a68 <_malloc_r+0x34>
 8010b0a:	463c      	mov	r4, r7
 8010b0c:	687f      	ldr	r7, [r7, #4]
 8010b0e:	e7b6      	b.n	8010a7e <_malloc_r+0x4a>
 8010b10:	461a      	mov	r2, r3
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	d1fb      	bne.n	8010b10 <_malloc_r+0xdc>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	6053      	str	r3, [r2, #4]
 8010b1c:	e7de      	b.n	8010adc <_malloc_r+0xa8>
 8010b1e:	230c      	movs	r3, #12
 8010b20:	6033      	str	r3, [r6, #0]
 8010b22:	4630      	mov	r0, r6
 8010b24:	f000 f80c 	bl	8010b40 <__malloc_unlock>
 8010b28:	e794      	b.n	8010a54 <_malloc_r+0x20>
 8010b2a:	6005      	str	r5, [r0, #0]
 8010b2c:	e7d6      	b.n	8010adc <_malloc_r+0xa8>
 8010b2e:	bf00      	nop
 8010b30:	200021c4 	.word	0x200021c4

08010b34 <__malloc_lock>:
 8010b34:	4801      	ldr	r0, [pc, #4]	@ (8010b3c <__malloc_lock+0x8>)
 8010b36:	f000 b84b 	b.w	8010bd0 <__retarget_lock_acquire_recursive>
 8010b3a:	bf00      	nop
 8010b3c:	20002304 	.word	0x20002304

08010b40 <__malloc_unlock>:
 8010b40:	4801      	ldr	r0, [pc, #4]	@ (8010b48 <__malloc_unlock+0x8>)
 8010b42:	f000 b846 	b.w	8010bd2 <__retarget_lock_release_recursive>
 8010b46:	bf00      	nop
 8010b48:	20002304 	.word	0x20002304

08010b4c <memset>:
 8010b4c:	4402      	add	r2, r0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d100      	bne.n	8010b56 <memset+0xa>
 8010b54:	4770      	bx	lr
 8010b56:	f803 1b01 	strb.w	r1, [r3], #1
 8010b5a:	e7f9      	b.n	8010b50 <memset+0x4>

08010b5c <_sbrk_r>:
 8010b5c:	b538      	push	{r3, r4, r5, lr}
 8010b5e:	4d06      	ldr	r5, [pc, #24]	@ (8010b78 <_sbrk_r+0x1c>)
 8010b60:	2300      	movs	r3, #0
 8010b62:	4604      	mov	r4, r0
 8010b64:	4608      	mov	r0, r1
 8010b66:	602b      	str	r3, [r5, #0]
 8010b68:	f7f7 f926 	bl	8007db8 <_sbrk>
 8010b6c:	1c43      	adds	r3, r0, #1
 8010b6e:	d102      	bne.n	8010b76 <_sbrk_r+0x1a>
 8010b70:	682b      	ldr	r3, [r5, #0]
 8010b72:	b103      	cbz	r3, 8010b76 <_sbrk_r+0x1a>
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	bd38      	pop	{r3, r4, r5, pc}
 8010b78:	20002300 	.word	0x20002300

08010b7c <__errno>:
 8010b7c:	4b01      	ldr	r3, [pc, #4]	@ (8010b84 <__errno+0x8>)
 8010b7e:	6818      	ldr	r0, [r3, #0]
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	20000144 	.word	0x20000144

08010b88 <__libc_init_array>:
 8010b88:	b570      	push	{r4, r5, r6, lr}
 8010b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8010bc0 <__libc_init_array+0x38>)
 8010b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8010bc4 <__libc_init_array+0x3c>)
 8010b8e:	1b64      	subs	r4, r4, r5
 8010b90:	10a4      	asrs	r4, r4, #2
 8010b92:	2600      	movs	r6, #0
 8010b94:	42a6      	cmp	r6, r4
 8010b96:	d109      	bne.n	8010bac <__libc_init_array+0x24>
 8010b98:	4d0b      	ldr	r5, [pc, #44]	@ (8010bc8 <__libc_init_array+0x40>)
 8010b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8010bcc <__libc_init_array+0x44>)
 8010b9c:	f001 ff30 	bl	8012a00 <_init>
 8010ba0:	1b64      	subs	r4, r4, r5
 8010ba2:	10a4      	asrs	r4, r4, #2
 8010ba4:	2600      	movs	r6, #0
 8010ba6:	42a6      	cmp	r6, r4
 8010ba8:	d105      	bne.n	8010bb6 <__libc_init_array+0x2e>
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bb0:	4798      	blx	r3
 8010bb2:	3601      	adds	r6, #1
 8010bb4:	e7ee      	b.n	8010b94 <__libc_init_array+0xc>
 8010bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bba:	4798      	blx	r3
 8010bbc:	3601      	adds	r6, #1
 8010bbe:	e7f2      	b.n	8010ba6 <__libc_init_array+0x1e>
 8010bc0:	08013080 	.word	0x08013080
 8010bc4:	08013080 	.word	0x08013080
 8010bc8:	08013080 	.word	0x08013080
 8010bcc:	08013084 	.word	0x08013084

08010bd0 <__retarget_lock_acquire_recursive>:
 8010bd0:	4770      	bx	lr

08010bd2 <__retarget_lock_release_recursive>:
 8010bd2:	4770      	bx	lr

08010bd4 <memcpy>:
 8010bd4:	440a      	add	r2, r1
 8010bd6:	4291      	cmp	r1, r2
 8010bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bdc:	d100      	bne.n	8010be0 <memcpy+0xc>
 8010bde:	4770      	bx	lr
 8010be0:	b510      	push	{r4, lr}
 8010be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bea:	4291      	cmp	r1, r2
 8010bec:	d1f9      	bne.n	8010be2 <memcpy+0xe>
 8010bee:	bd10      	pop	{r4, pc}

08010bf0 <cos>:
 8010bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bf2:	ec53 2b10 	vmov	r2, r3, d0
 8010bf6:	4826      	ldr	r0, [pc, #152]	@ (8010c90 <cos+0xa0>)
 8010bf8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010bfc:	4281      	cmp	r1, r0
 8010bfe:	d806      	bhi.n	8010c0e <cos+0x1e>
 8010c00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010c88 <cos+0x98>
 8010c04:	b005      	add	sp, #20
 8010c06:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c0a:	f000 b9bd 	b.w	8010f88 <__kernel_cos>
 8010c0e:	4821      	ldr	r0, [pc, #132]	@ (8010c94 <cos+0xa4>)
 8010c10:	4281      	cmp	r1, r0
 8010c12:	d908      	bls.n	8010c26 <cos+0x36>
 8010c14:	4610      	mov	r0, r2
 8010c16:	4619      	mov	r1, r3
 8010c18:	f7ef fb02 	bl	8000220 <__aeabi_dsub>
 8010c1c:	ec41 0b10 	vmov	d0, r0, r1
 8010c20:	b005      	add	sp, #20
 8010c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c26:	4668      	mov	r0, sp
 8010c28:	f000 fb32 	bl	8011290 <__ieee754_rem_pio2>
 8010c2c:	f000 0003 	and.w	r0, r0, #3
 8010c30:	2801      	cmp	r0, #1
 8010c32:	d00b      	beq.n	8010c4c <cos+0x5c>
 8010c34:	2802      	cmp	r0, #2
 8010c36:	d015      	beq.n	8010c64 <cos+0x74>
 8010c38:	b9d8      	cbnz	r0, 8010c72 <cos+0x82>
 8010c3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c3e:	ed9d 0b00 	vldr	d0, [sp]
 8010c42:	f000 f9a1 	bl	8010f88 <__kernel_cos>
 8010c46:	ec51 0b10 	vmov	r0, r1, d0
 8010c4a:	e7e7      	b.n	8010c1c <cos+0x2c>
 8010c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c50:	ed9d 0b00 	vldr	d0, [sp]
 8010c54:	f000 fa60 	bl	8011118 <__kernel_sin>
 8010c58:	ec53 2b10 	vmov	r2, r3, d0
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010c62:	e7db      	b.n	8010c1c <cos+0x2c>
 8010c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c68:	ed9d 0b00 	vldr	d0, [sp]
 8010c6c:	f000 f98c 	bl	8010f88 <__kernel_cos>
 8010c70:	e7f2      	b.n	8010c58 <cos+0x68>
 8010c72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c76:	ed9d 0b00 	vldr	d0, [sp]
 8010c7a:	2001      	movs	r0, #1
 8010c7c:	f000 fa4c 	bl	8011118 <__kernel_sin>
 8010c80:	e7e1      	b.n	8010c46 <cos+0x56>
 8010c82:	bf00      	nop
 8010c84:	f3af 8000 	nop.w
	...
 8010c90:	3fe921fb 	.word	0x3fe921fb
 8010c94:	7fefffff 	.word	0x7fefffff

08010c98 <sin>:
 8010c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c9a:	ec53 2b10 	vmov	r2, r3, d0
 8010c9e:	4826      	ldr	r0, [pc, #152]	@ (8010d38 <sin+0xa0>)
 8010ca0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010ca4:	4281      	cmp	r1, r0
 8010ca6:	d807      	bhi.n	8010cb8 <sin+0x20>
 8010ca8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010d30 <sin+0x98>
 8010cac:	2000      	movs	r0, #0
 8010cae:	b005      	add	sp, #20
 8010cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cb4:	f000 ba30 	b.w	8011118 <__kernel_sin>
 8010cb8:	4820      	ldr	r0, [pc, #128]	@ (8010d3c <sin+0xa4>)
 8010cba:	4281      	cmp	r1, r0
 8010cbc:	d908      	bls.n	8010cd0 <sin+0x38>
 8010cbe:	4610      	mov	r0, r2
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	f7ef faad 	bl	8000220 <__aeabi_dsub>
 8010cc6:	ec41 0b10 	vmov	d0, r0, r1
 8010cca:	b005      	add	sp, #20
 8010ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cd0:	4668      	mov	r0, sp
 8010cd2:	f000 fadd 	bl	8011290 <__ieee754_rem_pio2>
 8010cd6:	f000 0003 	and.w	r0, r0, #3
 8010cda:	2801      	cmp	r0, #1
 8010cdc:	d00c      	beq.n	8010cf8 <sin+0x60>
 8010cde:	2802      	cmp	r0, #2
 8010ce0:	d011      	beq.n	8010d06 <sin+0x6e>
 8010ce2:	b9e8      	cbnz	r0, 8010d20 <sin+0x88>
 8010ce4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ce8:	ed9d 0b00 	vldr	d0, [sp]
 8010cec:	2001      	movs	r0, #1
 8010cee:	f000 fa13 	bl	8011118 <__kernel_sin>
 8010cf2:	ec51 0b10 	vmov	r0, r1, d0
 8010cf6:	e7e6      	b.n	8010cc6 <sin+0x2e>
 8010cf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010cfc:	ed9d 0b00 	vldr	d0, [sp]
 8010d00:	f000 f942 	bl	8010f88 <__kernel_cos>
 8010d04:	e7f5      	b.n	8010cf2 <sin+0x5a>
 8010d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d0a:	ed9d 0b00 	vldr	d0, [sp]
 8010d0e:	2001      	movs	r0, #1
 8010d10:	f000 fa02 	bl	8011118 <__kernel_sin>
 8010d14:	ec53 2b10 	vmov	r2, r3, d0
 8010d18:	4610      	mov	r0, r2
 8010d1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d1e:	e7d2      	b.n	8010cc6 <sin+0x2e>
 8010d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d24:	ed9d 0b00 	vldr	d0, [sp]
 8010d28:	f000 f92e 	bl	8010f88 <__kernel_cos>
 8010d2c:	e7f2      	b.n	8010d14 <sin+0x7c>
 8010d2e:	bf00      	nop
	...
 8010d38:	3fe921fb 	.word	0x3fe921fb
 8010d3c:	7fefffff 	.word	0x7fefffff

08010d40 <fmodf>:
 8010d40:	b508      	push	{r3, lr}
 8010d42:	ed2d 8b02 	vpush	{d8}
 8010d46:	eef0 8a40 	vmov.f32	s17, s0
 8010d4a:	eeb0 8a60 	vmov.f32	s16, s1
 8010d4e:	f000 fd43 	bl	80117d8 <__ieee754_fmodf>
 8010d52:	eef4 8a48 	vcmp.f32	s17, s16
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	d60c      	bvs.n	8010d76 <fmodf+0x36>
 8010d5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010d7c <fmodf+0x3c>
 8010d60:	eeb4 8a68 	vcmp.f32	s16, s17
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	d105      	bne.n	8010d76 <fmodf+0x36>
 8010d6a:	f7ff ff07 	bl	8010b7c <__errno>
 8010d6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010d72:	2321      	movs	r3, #33	@ 0x21
 8010d74:	6003      	str	r3, [r0, #0]
 8010d76:	ecbd 8b02 	vpop	{d8}
 8010d7a:	bd08      	pop	{r3, pc}
 8010d7c:	00000000 	.word	0x00000000

08010d80 <sqrtf>:
 8010d80:	b508      	push	{r3, lr}
 8010d82:	ed2d 8b02 	vpush	{d8}
 8010d86:	eeb0 8a40 	vmov.f32	s16, s0
 8010d8a:	f000 f8f7 	bl	8010f7c <__ieee754_sqrtf>
 8010d8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d96:	d60c      	bvs.n	8010db2 <sqrtf+0x32>
 8010d98:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010db8 <sqrtf+0x38>
 8010d9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da4:	d505      	bpl.n	8010db2 <sqrtf+0x32>
 8010da6:	f7ff fee9 	bl	8010b7c <__errno>
 8010daa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010dae:	2321      	movs	r3, #33	@ 0x21
 8010db0:	6003      	str	r3, [r0, #0]
 8010db2:	ecbd 8b02 	vpop	{d8}
 8010db6:	bd08      	pop	{r3, pc}
 8010db8:	00000000 	.word	0x00000000

08010dbc <cosf>:
 8010dbc:	ee10 3a10 	vmov	r3, s0
 8010dc0:	b507      	push	{r0, r1, r2, lr}
 8010dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8010e3c <cosf+0x80>)
 8010dc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d806      	bhi.n	8010dda <cosf+0x1e>
 8010dcc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010e40 <cosf+0x84>
 8010dd0:	b003      	add	sp, #12
 8010dd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dd6:	f000 bc5f 	b.w	8011698 <__kernel_cosf>
 8010dda:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010dde:	d304      	bcc.n	8010dea <cosf+0x2e>
 8010de0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010de4:	b003      	add	sp, #12
 8010de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dea:	4668      	mov	r0, sp
 8010dec:	f000 fd76 	bl	80118dc <__ieee754_rem_pio2f>
 8010df0:	f000 0003 	and.w	r0, r0, #3
 8010df4:	2801      	cmp	r0, #1
 8010df6:	d009      	beq.n	8010e0c <cosf+0x50>
 8010df8:	2802      	cmp	r0, #2
 8010dfa:	d010      	beq.n	8010e1e <cosf+0x62>
 8010dfc:	b9b0      	cbnz	r0, 8010e2c <cosf+0x70>
 8010dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e02:	ed9d 0a00 	vldr	s0, [sp]
 8010e06:	f000 fc47 	bl	8011698 <__kernel_cosf>
 8010e0a:	e7eb      	b.n	8010de4 <cosf+0x28>
 8010e0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e10:	ed9d 0a00 	vldr	s0, [sp]
 8010e14:	f000 fc98 	bl	8011748 <__kernel_sinf>
 8010e18:	eeb1 0a40 	vneg.f32	s0, s0
 8010e1c:	e7e2      	b.n	8010de4 <cosf+0x28>
 8010e1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e22:	ed9d 0a00 	vldr	s0, [sp]
 8010e26:	f000 fc37 	bl	8011698 <__kernel_cosf>
 8010e2a:	e7f5      	b.n	8010e18 <cosf+0x5c>
 8010e2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e30:	ed9d 0a00 	vldr	s0, [sp]
 8010e34:	2001      	movs	r0, #1
 8010e36:	f000 fc87 	bl	8011748 <__kernel_sinf>
 8010e3a:	e7d3      	b.n	8010de4 <cosf+0x28>
 8010e3c:	3f490fd8 	.word	0x3f490fd8
 8010e40:	00000000 	.word	0x00000000

08010e44 <sinf>:
 8010e44:	ee10 3a10 	vmov	r3, s0
 8010e48:	b507      	push	{r0, r1, r2, lr}
 8010e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ec8 <sinf+0x84>)
 8010e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d807      	bhi.n	8010e64 <sinf+0x20>
 8010e54:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010ecc <sinf+0x88>
 8010e58:	2000      	movs	r0, #0
 8010e5a:	b003      	add	sp, #12
 8010e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e60:	f000 bc72 	b.w	8011748 <__kernel_sinf>
 8010e64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e68:	d304      	bcc.n	8010e74 <sinf+0x30>
 8010e6a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e6e:	b003      	add	sp, #12
 8010e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e74:	4668      	mov	r0, sp
 8010e76:	f000 fd31 	bl	80118dc <__ieee754_rem_pio2f>
 8010e7a:	f000 0003 	and.w	r0, r0, #3
 8010e7e:	2801      	cmp	r0, #1
 8010e80:	d00a      	beq.n	8010e98 <sinf+0x54>
 8010e82:	2802      	cmp	r0, #2
 8010e84:	d00f      	beq.n	8010ea6 <sinf+0x62>
 8010e86:	b9c0      	cbnz	r0, 8010eba <sinf+0x76>
 8010e88:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e8c:	ed9d 0a00 	vldr	s0, [sp]
 8010e90:	2001      	movs	r0, #1
 8010e92:	f000 fc59 	bl	8011748 <__kernel_sinf>
 8010e96:	e7ea      	b.n	8010e6e <sinf+0x2a>
 8010e98:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e9c:	ed9d 0a00 	vldr	s0, [sp]
 8010ea0:	f000 fbfa 	bl	8011698 <__kernel_cosf>
 8010ea4:	e7e3      	b.n	8010e6e <sinf+0x2a>
 8010ea6:	eddd 0a01 	vldr	s1, [sp, #4]
 8010eaa:	ed9d 0a00 	vldr	s0, [sp]
 8010eae:	2001      	movs	r0, #1
 8010eb0:	f000 fc4a 	bl	8011748 <__kernel_sinf>
 8010eb4:	eeb1 0a40 	vneg.f32	s0, s0
 8010eb8:	e7d9      	b.n	8010e6e <sinf+0x2a>
 8010eba:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ebe:	ed9d 0a00 	vldr	s0, [sp]
 8010ec2:	f000 fbe9 	bl	8011698 <__kernel_cosf>
 8010ec6:	e7f5      	b.n	8010eb4 <sinf+0x70>
 8010ec8:	3f490fd8 	.word	0x3f490fd8
 8010ecc:	00000000 	.word	0x00000000

08010ed0 <fmaxf>:
 8010ed0:	b508      	push	{r3, lr}
 8010ed2:	ed2d 8b02 	vpush	{d8}
 8010ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8010eda:	eef0 8a60 	vmov.f32	s17, s1
 8010ede:	f000 f831 	bl	8010f44 <__fpclassifyf>
 8010ee2:	b930      	cbnz	r0, 8010ef2 <fmaxf+0x22>
 8010ee4:	eeb0 8a68 	vmov.f32	s16, s17
 8010ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8010eec:	ecbd 8b02 	vpop	{d8}
 8010ef0:	bd08      	pop	{r3, pc}
 8010ef2:	eeb0 0a68 	vmov.f32	s0, s17
 8010ef6:	f000 f825 	bl	8010f44 <__fpclassifyf>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d0f4      	beq.n	8010ee8 <fmaxf+0x18>
 8010efe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f06:	dded      	ble.n	8010ee4 <fmaxf+0x14>
 8010f08:	e7ee      	b.n	8010ee8 <fmaxf+0x18>

08010f0a <fminf>:
 8010f0a:	b508      	push	{r3, lr}
 8010f0c:	ed2d 8b02 	vpush	{d8}
 8010f10:	eeb0 8a40 	vmov.f32	s16, s0
 8010f14:	eef0 8a60 	vmov.f32	s17, s1
 8010f18:	f000 f814 	bl	8010f44 <__fpclassifyf>
 8010f1c:	b930      	cbnz	r0, 8010f2c <fminf+0x22>
 8010f1e:	eeb0 8a68 	vmov.f32	s16, s17
 8010f22:	eeb0 0a48 	vmov.f32	s0, s16
 8010f26:	ecbd 8b02 	vpop	{d8}
 8010f2a:	bd08      	pop	{r3, pc}
 8010f2c:	eeb0 0a68 	vmov.f32	s0, s17
 8010f30:	f000 f808 	bl	8010f44 <__fpclassifyf>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d0f4      	beq.n	8010f22 <fminf+0x18>
 8010f38:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f40:	d5ed      	bpl.n	8010f1e <fminf+0x14>
 8010f42:	e7ee      	b.n	8010f22 <fminf+0x18>

08010f44 <__fpclassifyf>:
 8010f44:	ee10 3a10 	vmov	r3, s0
 8010f48:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010f4c:	d00d      	beq.n	8010f6a <__fpclassifyf+0x26>
 8010f4e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010f52:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010f56:	d30a      	bcc.n	8010f6e <__fpclassifyf+0x2a>
 8010f58:	4b07      	ldr	r3, [pc, #28]	@ (8010f78 <__fpclassifyf+0x34>)
 8010f5a:	1e42      	subs	r2, r0, #1
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d908      	bls.n	8010f72 <__fpclassifyf+0x2e>
 8010f60:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010f64:	4258      	negs	r0, r3
 8010f66:	4158      	adcs	r0, r3
 8010f68:	4770      	bx	lr
 8010f6a:	2002      	movs	r0, #2
 8010f6c:	4770      	bx	lr
 8010f6e:	2004      	movs	r0, #4
 8010f70:	4770      	bx	lr
 8010f72:	2003      	movs	r0, #3
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	007ffffe 	.word	0x007ffffe

08010f7c <__ieee754_sqrtf>:
 8010f7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f80:	4770      	bx	lr
 8010f82:	0000      	movs	r0, r0
 8010f84:	0000      	movs	r0, r0
	...

08010f88 <__kernel_cos>:
 8010f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8c:	ec57 6b10 	vmov	r6, r7, d0
 8010f90:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010f94:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010f98:	ed8d 1b00 	vstr	d1, [sp]
 8010f9c:	d206      	bcs.n	8010fac <__kernel_cos+0x24>
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	f7ef fd8f 	bl	8000ac4 <__aeabi_d2iz>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f000 8088 	beq.w	80110bc <__kernel_cos+0x134>
 8010fac:	4632      	mov	r2, r6
 8010fae:	463b      	mov	r3, r7
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	f7ef faec 	bl	8000590 <__aeabi_dmul>
 8010fb8:	4b51      	ldr	r3, [pc, #324]	@ (8011100 <__kernel_cos+0x178>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	f7ef fae6 	bl	8000590 <__aeabi_dmul>
 8010fc4:	a340      	add	r3, pc, #256	@ (adr r3, 80110c8 <__kernel_cos+0x140>)
 8010fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fca:	4682      	mov	sl, r0
 8010fcc:	468b      	mov	fp, r1
 8010fce:	4620      	mov	r0, r4
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	f7ef fadd 	bl	8000590 <__aeabi_dmul>
 8010fd6:	a33e      	add	r3, pc, #248	@ (adr r3, 80110d0 <__kernel_cos+0x148>)
 8010fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fdc:	f7ef f922 	bl	8000224 <__adddf3>
 8010fe0:	4622      	mov	r2, r4
 8010fe2:	462b      	mov	r3, r5
 8010fe4:	f7ef fad4 	bl	8000590 <__aeabi_dmul>
 8010fe8:	a33b      	add	r3, pc, #236	@ (adr r3, 80110d8 <__kernel_cos+0x150>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	f7ef f917 	bl	8000220 <__aeabi_dsub>
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	f7ef facb 	bl	8000590 <__aeabi_dmul>
 8010ffa:	a339      	add	r3, pc, #228	@ (adr r3, 80110e0 <__kernel_cos+0x158>)
 8010ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011000:	f7ef f910 	bl	8000224 <__adddf3>
 8011004:	4622      	mov	r2, r4
 8011006:	462b      	mov	r3, r5
 8011008:	f7ef fac2 	bl	8000590 <__aeabi_dmul>
 801100c:	a336      	add	r3, pc, #216	@ (adr r3, 80110e8 <__kernel_cos+0x160>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	f7ef f905 	bl	8000220 <__aeabi_dsub>
 8011016:	4622      	mov	r2, r4
 8011018:	462b      	mov	r3, r5
 801101a:	f7ef fab9 	bl	8000590 <__aeabi_dmul>
 801101e:	a334      	add	r3, pc, #208	@ (adr r3, 80110f0 <__kernel_cos+0x168>)
 8011020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011024:	f7ef f8fe 	bl	8000224 <__adddf3>
 8011028:	4622      	mov	r2, r4
 801102a:	462b      	mov	r3, r5
 801102c:	f7ef fab0 	bl	8000590 <__aeabi_dmul>
 8011030:	4622      	mov	r2, r4
 8011032:	462b      	mov	r3, r5
 8011034:	f7ef faac 	bl	8000590 <__aeabi_dmul>
 8011038:	e9dd 2300 	ldrd	r2, r3, [sp]
 801103c:	4604      	mov	r4, r0
 801103e:	460d      	mov	r5, r1
 8011040:	4630      	mov	r0, r6
 8011042:	4639      	mov	r1, r7
 8011044:	f7ef faa4 	bl	8000590 <__aeabi_dmul>
 8011048:	460b      	mov	r3, r1
 801104a:	4602      	mov	r2, r0
 801104c:	4629      	mov	r1, r5
 801104e:	4620      	mov	r0, r4
 8011050:	f7ef f8e6 	bl	8000220 <__aeabi_dsub>
 8011054:	4b2b      	ldr	r3, [pc, #172]	@ (8011104 <__kernel_cos+0x17c>)
 8011056:	4598      	cmp	r8, r3
 8011058:	4606      	mov	r6, r0
 801105a:	460f      	mov	r7, r1
 801105c:	d810      	bhi.n	8011080 <__kernel_cos+0xf8>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	4650      	mov	r0, sl
 8011064:	4659      	mov	r1, fp
 8011066:	f7ef f8db 	bl	8000220 <__aeabi_dsub>
 801106a:	460b      	mov	r3, r1
 801106c:	4926      	ldr	r1, [pc, #152]	@ (8011108 <__kernel_cos+0x180>)
 801106e:	4602      	mov	r2, r0
 8011070:	2000      	movs	r0, #0
 8011072:	f7ef f8d5 	bl	8000220 <__aeabi_dsub>
 8011076:	ec41 0b10 	vmov	d0, r0, r1
 801107a:	b003      	add	sp, #12
 801107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011080:	4b22      	ldr	r3, [pc, #136]	@ (801110c <__kernel_cos+0x184>)
 8011082:	4921      	ldr	r1, [pc, #132]	@ (8011108 <__kernel_cos+0x180>)
 8011084:	4598      	cmp	r8, r3
 8011086:	bf8c      	ite	hi
 8011088:	4d21      	ldrhi	r5, [pc, #132]	@ (8011110 <__kernel_cos+0x188>)
 801108a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801108e:	2400      	movs	r4, #0
 8011090:	4622      	mov	r2, r4
 8011092:	462b      	mov	r3, r5
 8011094:	2000      	movs	r0, #0
 8011096:	f7ef f8c3 	bl	8000220 <__aeabi_dsub>
 801109a:	4622      	mov	r2, r4
 801109c:	4680      	mov	r8, r0
 801109e:	4689      	mov	r9, r1
 80110a0:	462b      	mov	r3, r5
 80110a2:	4650      	mov	r0, sl
 80110a4:	4659      	mov	r1, fp
 80110a6:	f7ef f8bb 	bl	8000220 <__aeabi_dsub>
 80110aa:	4632      	mov	r2, r6
 80110ac:	463b      	mov	r3, r7
 80110ae:	f7ef f8b7 	bl	8000220 <__aeabi_dsub>
 80110b2:	4602      	mov	r2, r0
 80110b4:	460b      	mov	r3, r1
 80110b6:	4640      	mov	r0, r8
 80110b8:	4649      	mov	r1, r9
 80110ba:	e7da      	b.n	8011072 <__kernel_cos+0xea>
 80110bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80110f8 <__kernel_cos+0x170>
 80110c0:	e7db      	b.n	801107a <__kernel_cos+0xf2>
 80110c2:	bf00      	nop
 80110c4:	f3af 8000 	nop.w
 80110c8:	be8838d4 	.word	0xbe8838d4
 80110cc:	bda8fae9 	.word	0xbda8fae9
 80110d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80110d4:	3e21ee9e 	.word	0x3e21ee9e
 80110d8:	809c52ad 	.word	0x809c52ad
 80110dc:	3e927e4f 	.word	0x3e927e4f
 80110e0:	19cb1590 	.word	0x19cb1590
 80110e4:	3efa01a0 	.word	0x3efa01a0
 80110e8:	16c15177 	.word	0x16c15177
 80110ec:	3f56c16c 	.word	0x3f56c16c
 80110f0:	5555554c 	.word	0x5555554c
 80110f4:	3fa55555 	.word	0x3fa55555
 80110f8:	00000000 	.word	0x00000000
 80110fc:	3ff00000 	.word	0x3ff00000
 8011100:	3fe00000 	.word	0x3fe00000
 8011104:	3fd33332 	.word	0x3fd33332
 8011108:	3ff00000 	.word	0x3ff00000
 801110c:	3fe90000 	.word	0x3fe90000
 8011110:	3fd20000 	.word	0x3fd20000
 8011114:	00000000 	.word	0x00000000

08011118 <__kernel_sin>:
 8011118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	ec55 4b10 	vmov	r4, r5, d0
 8011120:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011124:	b085      	sub	sp, #20
 8011126:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801112a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801112e:	4680      	mov	r8, r0
 8011130:	d205      	bcs.n	801113e <__kernel_sin+0x26>
 8011132:	4620      	mov	r0, r4
 8011134:	4629      	mov	r1, r5
 8011136:	f7ef fcc5 	bl	8000ac4 <__aeabi_d2iz>
 801113a:	2800      	cmp	r0, #0
 801113c:	d052      	beq.n	80111e4 <__kernel_sin+0xcc>
 801113e:	4622      	mov	r2, r4
 8011140:	462b      	mov	r3, r5
 8011142:	4620      	mov	r0, r4
 8011144:	4629      	mov	r1, r5
 8011146:	f7ef fa23 	bl	8000590 <__aeabi_dmul>
 801114a:	4682      	mov	sl, r0
 801114c:	468b      	mov	fp, r1
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4620      	mov	r0, r4
 8011154:	4629      	mov	r1, r5
 8011156:	f7ef fa1b 	bl	8000590 <__aeabi_dmul>
 801115a:	a342      	add	r3, pc, #264	@ (adr r3, 8011264 <__kernel_sin+0x14c>)
 801115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011160:	e9cd 0100 	strd	r0, r1, [sp]
 8011164:	4650      	mov	r0, sl
 8011166:	4659      	mov	r1, fp
 8011168:	f7ef fa12 	bl	8000590 <__aeabi_dmul>
 801116c:	a33f      	add	r3, pc, #252	@ (adr r3, 801126c <__kernel_sin+0x154>)
 801116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011172:	f7ef f855 	bl	8000220 <__aeabi_dsub>
 8011176:	4652      	mov	r2, sl
 8011178:	465b      	mov	r3, fp
 801117a:	f7ef fa09 	bl	8000590 <__aeabi_dmul>
 801117e:	a33d      	add	r3, pc, #244	@ (adr r3, 8011274 <__kernel_sin+0x15c>)
 8011180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011184:	f7ef f84e 	bl	8000224 <__adddf3>
 8011188:	4652      	mov	r2, sl
 801118a:	465b      	mov	r3, fp
 801118c:	f7ef fa00 	bl	8000590 <__aeabi_dmul>
 8011190:	a33a      	add	r3, pc, #232	@ (adr r3, 801127c <__kernel_sin+0x164>)
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	f7ef f843 	bl	8000220 <__aeabi_dsub>
 801119a:	4652      	mov	r2, sl
 801119c:	465b      	mov	r3, fp
 801119e:	f7ef f9f7 	bl	8000590 <__aeabi_dmul>
 80111a2:	a338      	add	r3, pc, #224	@ (adr r3, 8011284 <__kernel_sin+0x16c>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	f7ef f83c 	bl	8000224 <__adddf3>
 80111ac:	4606      	mov	r6, r0
 80111ae:	460f      	mov	r7, r1
 80111b0:	f1b8 0f00 	cmp.w	r8, #0
 80111b4:	d11b      	bne.n	80111ee <__kernel_sin+0xd6>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	4650      	mov	r0, sl
 80111bc:	4659      	mov	r1, fp
 80111be:	f7ef f9e7 	bl	8000590 <__aeabi_dmul>
 80111c2:	a325      	add	r3, pc, #148	@ (adr r3, 8011258 <__kernel_sin+0x140>)
 80111c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c8:	f7ef f82a 	bl	8000220 <__aeabi_dsub>
 80111cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111d0:	f7ef f9de 	bl	8000590 <__aeabi_dmul>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4620      	mov	r0, r4
 80111da:	4629      	mov	r1, r5
 80111dc:	f7ef f822 	bl	8000224 <__adddf3>
 80111e0:	4604      	mov	r4, r0
 80111e2:	460d      	mov	r5, r1
 80111e4:	ec45 4b10 	vmov	d0, r4, r5
 80111e8:	b005      	add	sp, #20
 80111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011260 <__kernel_sin+0x148>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	f7ef f9cb 	bl	8000590 <__aeabi_dmul>
 80111fa:	4632      	mov	r2, r6
 80111fc:	4680      	mov	r8, r0
 80111fe:	4689      	mov	r9, r1
 8011200:	463b      	mov	r3, r7
 8011202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011206:	f7ef f9c3 	bl	8000590 <__aeabi_dmul>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	4640      	mov	r0, r8
 8011210:	4649      	mov	r1, r9
 8011212:	f7ef f805 	bl	8000220 <__aeabi_dsub>
 8011216:	4652      	mov	r2, sl
 8011218:	465b      	mov	r3, fp
 801121a:	f7ef f9b9 	bl	8000590 <__aeabi_dmul>
 801121e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011222:	f7ee fffd 	bl	8000220 <__aeabi_dsub>
 8011226:	a30c      	add	r3, pc, #48	@ (adr r3, 8011258 <__kernel_sin+0x140>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	4606      	mov	r6, r0
 801122e:	460f      	mov	r7, r1
 8011230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011234:	f7ef f9ac 	bl	8000590 <__aeabi_dmul>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4630      	mov	r0, r6
 801123e:	4639      	mov	r1, r7
 8011240:	f7ee fff0 	bl	8000224 <__adddf3>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	4620      	mov	r0, r4
 801124a:	4629      	mov	r1, r5
 801124c:	f7ee ffe8 	bl	8000220 <__aeabi_dsub>
 8011250:	e7c6      	b.n	80111e0 <__kernel_sin+0xc8>
 8011252:	bf00      	nop
 8011254:	f3af 8000 	nop.w
 8011258:	55555549 	.word	0x55555549
 801125c:	3fc55555 	.word	0x3fc55555
 8011260:	3fe00000 	.word	0x3fe00000
 8011264:	5acfd57c 	.word	0x5acfd57c
 8011268:	3de5d93a 	.word	0x3de5d93a
 801126c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011270:	3e5ae5e6 	.word	0x3e5ae5e6
 8011274:	57b1fe7d 	.word	0x57b1fe7d
 8011278:	3ec71de3 	.word	0x3ec71de3
 801127c:	19c161d5 	.word	0x19c161d5
 8011280:	3f2a01a0 	.word	0x3f2a01a0
 8011284:	1110f8a6 	.word	0x1110f8a6
 8011288:	3f811111 	.word	0x3f811111
 801128c:	00000000 	.word	0x00000000

08011290 <__ieee754_rem_pio2>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	ec57 6b10 	vmov	r6, r7, d0
 8011298:	4bc5      	ldr	r3, [pc, #788]	@ (80115b0 <__ieee754_rem_pio2+0x320>)
 801129a:	b08d      	sub	sp, #52	@ 0x34
 801129c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80112a0:	4598      	cmp	r8, r3
 80112a2:	4604      	mov	r4, r0
 80112a4:	9704      	str	r7, [sp, #16]
 80112a6:	d807      	bhi.n	80112b8 <__ieee754_rem_pio2+0x28>
 80112a8:	2200      	movs	r2, #0
 80112aa:	2300      	movs	r3, #0
 80112ac:	ed80 0b00 	vstr	d0, [r0]
 80112b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80112b4:	2500      	movs	r5, #0
 80112b6:	e028      	b.n	801130a <__ieee754_rem_pio2+0x7a>
 80112b8:	4bbe      	ldr	r3, [pc, #760]	@ (80115b4 <__ieee754_rem_pio2+0x324>)
 80112ba:	4598      	cmp	r8, r3
 80112bc:	d878      	bhi.n	80113b0 <__ieee754_rem_pio2+0x120>
 80112be:	9b04      	ldr	r3, [sp, #16]
 80112c0:	4dbd      	ldr	r5, [pc, #756]	@ (80115b8 <__ieee754_rem_pio2+0x328>)
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	4630      	mov	r0, r6
 80112c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011578 <__ieee754_rem_pio2+0x2e8>)
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	4639      	mov	r1, r7
 80112ce:	dd38      	ble.n	8011342 <__ieee754_rem_pio2+0xb2>
 80112d0:	f7ee ffa6 	bl	8000220 <__aeabi_dsub>
 80112d4:	45a8      	cmp	r8, r5
 80112d6:	4606      	mov	r6, r0
 80112d8:	460f      	mov	r7, r1
 80112da:	d01a      	beq.n	8011312 <__ieee754_rem_pio2+0x82>
 80112dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x2f0>)
 80112de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e2:	f7ee ff9d 	bl	8000220 <__aeabi_dsub>
 80112e6:	4602      	mov	r2, r0
 80112e8:	460b      	mov	r3, r1
 80112ea:	4680      	mov	r8, r0
 80112ec:	4689      	mov	r9, r1
 80112ee:	4630      	mov	r0, r6
 80112f0:	4639      	mov	r1, r7
 80112f2:	f7ee ff95 	bl	8000220 <__aeabi_dsub>
 80112f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x2f0>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ff90 	bl	8000220 <__aeabi_dsub>
 8011300:	e9c4 8900 	strd	r8, r9, [r4]
 8011304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011308:	2501      	movs	r5, #1
 801130a:	4628      	mov	r0, r5
 801130c:	b00d      	add	sp, #52	@ 0x34
 801130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011312:	a39d      	add	r3, pc, #628	@ (adr r3, 8011588 <__ieee754_rem_pio2+0x2f8>)
 8011314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011318:	f7ee ff82 	bl	8000220 <__aeabi_dsub>
 801131c:	a39c      	add	r3, pc, #624	@ (adr r3, 8011590 <__ieee754_rem_pio2+0x300>)
 801131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011322:	4606      	mov	r6, r0
 8011324:	460f      	mov	r7, r1
 8011326:	f7ee ff7b 	bl	8000220 <__aeabi_dsub>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4680      	mov	r8, r0
 8011330:	4689      	mov	r9, r1
 8011332:	4630      	mov	r0, r6
 8011334:	4639      	mov	r1, r7
 8011336:	f7ee ff73 	bl	8000220 <__aeabi_dsub>
 801133a:	a395      	add	r3, pc, #596	@ (adr r3, 8011590 <__ieee754_rem_pio2+0x300>)
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	e7dc      	b.n	80112fc <__ieee754_rem_pio2+0x6c>
 8011342:	f7ee ff6f 	bl	8000224 <__adddf3>
 8011346:	45a8      	cmp	r8, r5
 8011348:	4606      	mov	r6, r0
 801134a:	460f      	mov	r7, r1
 801134c:	d018      	beq.n	8011380 <__ieee754_rem_pio2+0xf0>
 801134e:	a38c      	add	r3, pc, #560	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x2f0>)
 8011350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011354:	f7ee ff66 	bl	8000224 <__adddf3>
 8011358:	4602      	mov	r2, r0
 801135a:	460b      	mov	r3, r1
 801135c:	4680      	mov	r8, r0
 801135e:	4689      	mov	r9, r1
 8011360:	4630      	mov	r0, r6
 8011362:	4639      	mov	r1, r7
 8011364:	f7ee ff5c 	bl	8000220 <__aeabi_dsub>
 8011368:	a385      	add	r3, pc, #532	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x2f0>)
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	f7ee ff59 	bl	8000224 <__adddf3>
 8011372:	f04f 35ff 	mov.w	r5, #4294967295
 8011376:	e9c4 8900 	strd	r8, r9, [r4]
 801137a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801137e:	e7c4      	b.n	801130a <__ieee754_rem_pio2+0x7a>
 8011380:	a381      	add	r3, pc, #516	@ (adr r3, 8011588 <__ieee754_rem_pio2+0x2f8>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	f7ee ff4d 	bl	8000224 <__adddf3>
 801138a:	a381      	add	r3, pc, #516	@ (adr r3, 8011590 <__ieee754_rem_pio2+0x300>)
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	4606      	mov	r6, r0
 8011392:	460f      	mov	r7, r1
 8011394:	f7ee ff46 	bl	8000224 <__adddf3>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4680      	mov	r8, r0
 801139e:	4689      	mov	r9, r1
 80113a0:	4630      	mov	r0, r6
 80113a2:	4639      	mov	r1, r7
 80113a4:	f7ee ff3c 	bl	8000220 <__aeabi_dsub>
 80113a8:	a379      	add	r3, pc, #484	@ (adr r3, 8011590 <__ieee754_rem_pio2+0x300>)
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	e7de      	b.n	801136e <__ieee754_rem_pio2+0xde>
 80113b0:	4b82      	ldr	r3, [pc, #520]	@ (80115bc <__ieee754_rem_pio2+0x32c>)
 80113b2:	4598      	cmp	r8, r3
 80113b4:	f200 80d1 	bhi.w	801155a <__ieee754_rem_pio2+0x2ca>
 80113b8:	f000 f966 	bl	8011688 <fabs>
 80113bc:	ec57 6b10 	vmov	r6, r7, d0
 80113c0:	a375      	add	r3, pc, #468	@ (adr r3, 8011598 <__ieee754_rem_pio2+0x308>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	4630      	mov	r0, r6
 80113c8:	4639      	mov	r1, r7
 80113ca:	f7ef f8e1 	bl	8000590 <__aeabi_dmul>
 80113ce:	4b7c      	ldr	r3, [pc, #496]	@ (80115c0 <__ieee754_rem_pio2+0x330>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	f7ee ff27 	bl	8000224 <__adddf3>
 80113d6:	f7ef fb75 	bl	8000ac4 <__aeabi_d2iz>
 80113da:	4605      	mov	r5, r0
 80113dc:	f7ef f86e 	bl	80004bc <__aeabi_i2d>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113e8:	a363      	add	r3, pc, #396	@ (adr r3, 8011578 <__ieee754_rem_pio2+0x2e8>)
 80113ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ee:	f7ef f8cf 	bl	8000590 <__aeabi_dmul>
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	4630      	mov	r0, r6
 80113f8:	4639      	mov	r1, r7
 80113fa:	f7ee ff11 	bl	8000220 <__aeabi_dsub>
 80113fe:	a360      	add	r3, pc, #384	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x2f0>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	4682      	mov	sl, r0
 8011406:	468b      	mov	fp, r1
 8011408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801140c:	f7ef f8c0 	bl	8000590 <__aeabi_dmul>
 8011410:	2d1f      	cmp	r5, #31
 8011412:	4606      	mov	r6, r0
 8011414:	460f      	mov	r7, r1
 8011416:	dc0c      	bgt.n	8011432 <__ieee754_rem_pio2+0x1a2>
 8011418:	4b6a      	ldr	r3, [pc, #424]	@ (80115c4 <__ieee754_rem_pio2+0x334>)
 801141a:	1e6a      	subs	r2, r5, #1
 801141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011420:	4543      	cmp	r3, r8
 8011422:	d006      	beq.n	8011432 <__ieee754_rem_pio2+0x1a2>
 8011424:	4632      	mov	r2, r6
 8011426:	463b      	mov	r3, r7
 8011428:	4650      	mov	r0, sl
 801142a:	4659      	mov	r1, fp
 801142c:	f7ee fef8 	bl	8000220 <__aeabi_dsub>
 8011430:	e00e      	b.n	8011450 <__ieee754_rem_pio2+0x1c0>
 8011432:	463b      	mov	r3, r7
 8011434:	4632      	mov	r2, r6
 8011436:	4650      	mov	r0, sl
 8011438:	4659      	mov	r1, fp
 801143a:	f7ee fef1 	bl	8000220 <__aeabi_dsub>
 801143e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011442:	9305      	str	r3, [sp, #20]
 8011444:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011448:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801144c:	2b10      	cmp	r3, #16
 801144e:	dc02      	bgt.n	8011456 <__ieee754_rem_pio2+0x1c6>
 8011450:	e9c4 0100 	strd	r0, r1, [r4]
 8011454:	e039      	b.n	80114ca <__ieee754_rem_pio2+0x23a>
 8011456:	a34c      	add	r3, pc, #304	@ (adr r3, 8011588 <__ieee754_rem_pio2+0x2f8>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011460:	f7ef f896 	bl	8000590 <__aeabi_dmul>
 8011464:	4606      	mov	r6, r0
 8011466:	460f      	mov	r7, r1
 8011468:	4602      	mov	r2, r0
 801146a:	460b      	mov	r3, r1
 801146c:	4650      	mov	r0, sl
 801146e:	4659      	mov	r1, fp
 8011470:	f7ee fed6 	bl	8000220 <__aeabi_dsub>
 8011474:	4602      	mov	r2, r0
 8011476:	460b      	mov	r3, r1
 8011478:	4680      	mov	r8, r0
 801147a:	4689      	mov	r9, r1
 801147c:	4650      	mov	r0, sl
 801147e:	4659      	mov	r1, fp
 8011480:	f7ee fece 	bl	8000220 <__aeabi_dsub>
 8011484:	4632      	mov	r2, r6
 8011486:	463b      	mov	r3, r7
 8011488:	f7ee feca 	bl	8000220 <__aeabi_dsub>
 801148c:	a340      	add	r3, pc, #256	@ (adr r3, 8011590 <__ieee754_rem_pio2+0x300>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	4606      	mov	r6, r0
 8011494:	460f      	mov	r7, r1
 8011496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801149a:	f7ef f879 	bl	8000590 <__aeabi_dmul>
 801149e:	4632      	mov	r2, r6
 80114a0:	463b      	mov	r3, r7
 80114a2:	f7ee febd 	bl	8000220 <__aeabi_dsub>
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	4606      	mov	r6, r0
 80114ac:	460f      	mov	r7, r1
 80114ae:	4640      	mov	r0, r8
 80114b0:	4649      	mov	r1, r9
 80114b2:	f7ee feb5 	bl	8000220 <__aeabi_dsub>
 80114b6:	9a05      	ldr	r2, [sp, #20]
 80114b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	2b31      	cmp	r3, #49	@ 0x31
 80114c0:	dc20      	bgt.n	8011504 <__ieee754_rem_pio2+0x274>
 80114c2:	e9c4 0100 	strd	r0, r1, [r4]
 80114c6:	46c2      	mov	sl, r8
 80114c8:	46cb      	mov	fp, r9
 80114ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80114ce:	4650      	mov	r0, sl
 80114d0:	4642      	mov	r2, r8
 80114d2:	464b      	mov	r3, r9
 80114d4:	4659      	mov	r1, fp
 80114d6:	f7ee fea3 	bl	8000220 <__aeabi_dsub>
 80114da:	463b      	mov	r3, r7
 80114dc:	4632      	mov	r2, r6
 80114de:	f7ee fe9f 	bl	8000220 <__aeabi_dsub>
 80114e2:	9b04      	ldr	r3, [sp, #16]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114ea:	f6bf af0e 	bge.w	801130a <__ieee754_rem_pio2+0x7a>
 80114ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80114f2:	6063      	str	r3, [r4, #4]
 80114f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114f8:	f8c4 8000 	str.w	r8, [r4]
 80114fc:	60a0      	str	r0, [r4, #8]
 80114fe:	60e3      	str	r3, [r4, #12]
 8011500:	426d      	negs	r5, r5
 8011502:	e702      	b.n	801130a <__ieee754_rem_pio2+0x7a>
 8011504:	a326      	add	r3, pc, #152	@ (adr r3, 80115a0 <__ieee754_rem_pio2+0x310>)
 8011506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801150e:	f7ef f83f 	bl	8000590 <__aeabi_dmul>
 8011512:	4606      	mov	r6, r0
 8011514:	460f      	mov	r7, r1
 8011516:	4602      	mov	r2, r0
 8011518:	460b      	mov	r3, r1
 801151a:	4640      	mov	r0, r8
 801151c:	4649      	mov	r1, r9
 801151e:	f7ee fe7f 	bl	8000220 <__aeabi_dsub>
 8011522:	4602      	mov	r2, r0
 8011524:	460b      	mov	r3, r1
 8011526:	4682      	mov	sl, r0
 8011528:	468b      	mov	fp, r1
 801152a:	4640      	mov	r0, r8
 801152c:	4649      	mov	r1, r9
 801152e:	f7ee fe77 	bl	8000220 <__aeabi_dsub>
 8011532:	4632      	mov	r2, r6
 8011534:	463b      	mov	r3, r7
 8011536:	f7ee fe73 	bl	8000220 <__aeabi_dsub>
 801153a:	a31b      	add	r3, pc, #108	@ (adr r3, 80115a8 <__ieee754_rem_pio2+0x318>)
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	4606      	mov	r6, r0
 8011542:	460f      	mov	r7, r1
 8011544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011548:	f7ef f822 	bl	8000590 <__aeabi_dmul>
 801154c:	4632      	mov	r2, r6
 801154e:	463b      	mov	r3, r7
 8011550:	f7ee fe66 	bl	8000220 <__aeabi_dsub>
 8011554:	4606      	mov	r6, r0
 8011556:	460f      	mov	r7, r1
 8011558:	e764      	b.n	8011424 <__ieee754_rem_pio2+0x194>
 801155a:	4b1b      	ldr	r3, [pc, #108]	@ (80115c8 <__ieee754_rem_pio2+0x338>)
 801155c:	4598      	cmp	r8, r3
 801155e:	d935      	bls.n	80115cc <__ieee754_rem_pio2+0x33c>
 8011560:	4632      	mov	r2, r6
 8011562:	463b      	mov	r3, r7
 8011564:	4630      	mov	r0, r6
 8011566:	4639      	mov	r1, r7
 8011568:	f7ee fe5a 	bl	8000220 <__aeabi_dsub>
 801156c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011570:	e9c4 0100 	strd	r0, r1, [r4]
 8011574:	e69e      	b.n	80112b4 <__ieee754_rem_pio2+0x24>
 8011576:	bf00      	nop
 8011578:	54400000 	.word	0x54400000
 801157c:	3ff921fb 	.word	0x3ff921fb
 8011580:	1a626331 	.word	0x1a626331
 8011584:	3dd0b461 	.word	0x3dd0b461
 8011588:	1a600000 	.word	0x1a600000
 801158c:	3dd0b461 	.word	0x3dd0b461
 8011590:	2e037073 	.word	0x2e037073
 8011594:	3ba3198a 	.word	0x3ba3198a
 8011598:	6dc9c883 	.word	0x6dc9c883
 801159c:	3fe45f30 	.word	0x3fe45f30
 80115a0:	2e000000 	.word	0x2e000000
 80115a4:	3ba3198a 	.word	0x3ba3198a
 80115a8:	252049c1 	.word	0x252049c1
 80115ac:	397b839a 	.word	0x397b839a
 80115b0:	3fe921fb 	.word	0x3fe921fb
 80115b4:	4002d97b 	.word	0x4002d97b
 80115b8:	3ff921fb 	.word	0x3ff921fb
 80115bc:	413921fb 	.word	0x413921fb
 80115c0:	3fe00000 	.word	0x3fe00000
 80115c4:	08012ac8 	.word	0x08012ac8
 80115c8:	7fefffff 	.word	0x7fefffff
 80115cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80115d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80115d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80115d8:	4630      	mov	r0, r6
 80115da:	460f      	mov	r7, r1
 80115dc:	f7ef fa72 	bl	8000ac4 <__aeabi_d2iz>
 80115e0:	f7ee ff6c 	bl	80004bc <__aeabi_i2d>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	4630      	mov	r0, r6
 80115ea:	4639      	mov	r1, r7
 80115ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115f0:	f7ee fe16 	bl	8000220 <__aeabi_dsub>
 80115f4:	4b22      	ldr	r3, [pc, #136]	@ (8011680 <__ieee754_rem_pio2+0x3f0>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	f7ee ffca 	bl	8000590 <__aeabi_dmul>
 80115fc:	460f      	mov	r7, r1
 80115fe:	4606      	mov	r6, r0
 8011600:	f7ef fa60 	bl	8000ac4 <__aeabi_d2iz>
 8011604:	f7ee ff5a 	bl	80004bc <__aeabi_i2d>
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011614:	f7ee fe04 	bl	8000220 <__aeabi_dsub>
 8011618:	4b19      	ldr	r3, [pc, #100]	@ (8011680 <__ieee754_rem_pio2+0x3f0>)
 801161a:	2200      	movs	r2, #0
 801161c:	f7ee ffb8 	bl	8000590 <__aeabi_dmul>
 8011620:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011624:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011628:	f04f 0803 	mov.w	r8, #3
 801162c:	2600      	movs	r6, #0
 801162e:	2700      	movs	r7, #0
 8011630:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011634:	4632      	mov	r2, r6
 8011636:	463b      	mov	r3, r7
 8011638:	46c2      	mov	sl, r8
 801163a:	f108 38ff 	add.w	r8, r8, #4294967295
 801163e:	f7ef fa0f 	bl	8000a60 <__aeabi_dcmpeq>
 8011642:	2800      	cmp	r0, #0
 8011644:	d1f4      	bne.n	8011630 <__ieee754_rem_pio2+0x3a0>
 8011646:	4b0f      	ldr	r3, [pc, #60]	@ (8011684 <__ieee754_rem_pio2+0x3f4>)
 8011648:	9301      	str	r3, [sp, #4]
 801164a:	2302      	movs	r3, #2
 801164c:	9300      	str	r3, [sp, #0]
 801164e:	462a      	mov	r2, r5
 8011650:	4653      	mov	r3, sl
 8011652:	4621      	mov	r1, r4
 8011654:	a806      	add	r0, sp, #24
 8011656:	f000 fb5b 	bl	8011d10 <__kernel_rem_pio2>
 801165a:	9b04      	ldr	r3, [sp, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	4605      	mov	r5, r0
 8011660:	f6bf ae53 	bge.w	801130a <__ieee754_rem_pio2+0x7a>
 8011664:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011668:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801166c:	e9c4 2300 	strd	r2, r3, [r4]
 8011670:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011678:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801167c:	e740      	b.n	8011500 <__ieee754_rem_pio2+0x270>
 801167e:	bf00      	nop
 8011680:	41700000 	.word	0x41700000
 8011684:	08012b48 	.word	0x08012b48

08011688 <fabs>:
 8011688:	ec51 0b10 	vmov	r0, r1, d0
 801168c:	4602      	mov	r2, r0
 801168e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011692:	ec43 2b10 	vmov	d0, r2, r3
 8011696:	4770      	bx	lr

08011698 <__kernel_cosf>:
 8011698:	ee10 3a10 	vmov	r3, s0
 801169c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80116a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80116a4:	eef0 6a40 	vmov.f32	s13, s0
 80116a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80116ac:	d204      	bcs.n	80116b8 <__kernel_cosf+0x20>
 80116ae:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80116b2:	ee17 2a90 	vmov	r2, s15
 80116b6:	b342      	cbz	r2, 801170a <__kernel_cosf+0x72>
 80116b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80116bc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011728 <__kernel_cosf+0x90>
 80116c0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801172c <__kernel_cosf+0x94>
 80116c4:	4a1a      	ldr	r2, [pc, #104]	@ (8011730 <__kernel_cosf+0x98>)
 80116c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80116ca:	4293      	cmp	r3, r2
 80116cc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011734 <__kernel_cosf+0x9c>
 80116d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80116d4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011738 <__kernel_cosf+0xa0>
 80116d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80116dc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801173c <__kernel_cosf+0xa4>
 80116e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80116e4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011740 <__kernel_cosf+0xa8>
 80116e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80116ec:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80116f0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80116f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80116f8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80116fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011700:	d804      	bhi.n	801170c <__kernel_cosf+0x74>
 8011702:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011706:	ee30 0a67 	vsub.f32	s0, s0, s15
 801170a:	4770      	bx	lr
 801170c:	4a0d      	ldr	r2, [pc, #52]	@ (8011744 <__kernel_cosf+0xac>)
 801170e:	4293      	cmp	r3, r2
 8011710:	bf9a      	itte	ls
 8011712:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011716:	ee07 3a10 	vmovls	s14, r3
 801171a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801171e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011726:	e7ec      	b.n	8011702 <__kernel_cosf+0x6a>
 8011728:	ad47d74e 	.word	0xad47d74e
 801172c:	310f74f6 	.word	0x310f74f6
 8011730:	3e999999 	.word	0x3e999999
 8011734:	b493f27c 	.word	0xb493f27c
 8011738:	37d00d01 	.word	0x37d00d01
 801173c:	bab60b61 	.word	0xbab60b61
 8011740:	3d2aaaab 	.word	0x3d2aaaab
 8011744:	3f480000 	.word	0x3f480000

08011748 <__kernel_sinf>:
 8011748:	ee10 3a10 	vmov	r3, s0
 801174c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011750:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011754:	d204      	bcs.n	8011760 <__kernel_sinf+0x18>
 8011756:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801175a:	ee17 3a90 	vmov	r3, s15
 801175e:	b35b      	cbz	r3, 80117b8 <__kernel_sinf+0x70>
 8011760:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011764:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80117bc <__kernel_sinf+0x74>
 8011768:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80117c0 <__kernel_sinf+0x78>
 801176c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011770:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80117c4 <__kernel_sinf+0x7c>
 8011774:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011778:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80117c8 <__kernel_sinf+0x80>
 801177c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011780:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80117cc <__kernel_sinf+0x84>
 8011784:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011788:	eee6 7a07 	vfma.f32	s15, s12, s14
 801178c:	b930      	cbnz	r0, 801179c <__kernel_sinf+0x54>
 801178e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80117d0 <__kernel_sinf+0x88>
 8011792:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011796:	eea6 0a26 	vfma.f32	s0, s12, s13
 801179a:	4770      	bx	lr
 801179c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80117a0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80117a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80117a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80117ac:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80117d4 <__kernel_sinf+0x8c>
 80117b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80117b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80117c0:	b2d72f34 	.word	0xb2d72f34
 80117c4:	3638ef1b 	.word	0x3638ef1b
 80117c8:	b9500d01 	.word	0xb9500d01
 80117cc:	3c088889 	.word	0x3c088889
 80117d0:	be2aaaab 	.word	0xbe2aaaab
 80117d4:	3e2aaaab 	.word	0x3e2aaaab

080117d8 <__ieee754_fmodf>:
 80117d8:	b570      	push	{r4, r5, r6, lr}
 80117da:	ee10 6a90 	vmov	r6, s1
 80117de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80117e2:	1e5a      	subs	r2, r3, #1
 80117e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80117e8:	d206      	bcs.n	80117f8 <__ieee754_fmodf+0x20>
 80117ea:	ee10 4a10 	vmov	r4, s0
 80117ee:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80117f2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80117f6:	d304      	bcc.n	8011802 <__ieee754_fmodf+0x2a>
 80117f8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80117fc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011800:	bd70      	pop	{r4, r5, r6, pc}
 8011802:	4299      	cmp	r1, r3
 8011804:	dbfc      	blt.n	8011800 <__ieee754_fmodf+0x28>
 8011806:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801180a:	d105      	bne.n	8011818 <__ieee754_fmodf+0x40>
 801180c:	4b32      	ldr	r3, [pc, #200]	@ (80118d8 <__ieee754_fmodf+0x100>)
 801180e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8011812:	ed93 0a00 	vldr	s0, [r3]
 8011816:	e7f3      	b.n	8011800 <__ieee754_fmodf+0x28>
 8011818:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801181c:	d146      	bne.n	80118ac <__ieee754_fmodf+0xd4>
 801181e:	020a      	lsls	r2, r1, #8
 8011820:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8011824:	2a00      	cmp	r2, #0
 8011826:	dc3e      	bgt.n	80118a6 <__ieee754_fmodf+0xce>
 8011828:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801182c:	bf01      	itttt	eq
 801182e:	021a      	lsleq	r2, r3, #8
 8011830:	fab2 f282 	clzeq	r2, r2
 8011834:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8011838:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801183c:	bf16      	itet	ne
 801183e:	15da      	asrne	r2, r3, #23
 8011840:	3282      	addeq	r2, #130	@ 0x82
 8011842:	3a7f      	subne	r2, #127	@ 0x7f
 8011844:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8011848:	bfbb      	ittet	lt
 801184a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801184e:	1a24      	sublt	r4, r4, r0
 8011850:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8011854:	40a1      	lsllt	r1, r4
 8011856:	bfa8      	it	ge
 8011858:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801185c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8011860:	bfb5      	itete	lt
 8011862:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8011866:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801186a:	1aa4      	sublt	r4, r4, r2
 801186c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8011870:	bfb8      	it	lt
 8011872:	fa03 f404 	lsllt.w	r4, r3, r4
 8011876:	1a80      	subs	r0, r0, r2
 8011878:	1b0b      	subs	r3, r1, r4
 801187a:	b9d0      	cbnz	r0, 80118b2 <__ieee754_fmodf+0xda>
 801187c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8011880:	bf28      	it	cs
 8011882:	460b      	movcs	r3, r1
 8011884:	2b00      	cmp	r3, #0
 8011886:	d0c1      	beq.n	801180c <__ieee754_fmodf+0x34>
 8011888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801188c:	db19      	blt.n	80118c2 <__ieee754_fmodf+0xea>
 801188e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8011892:	db19      	blt.n	80118c8 <__ieee754_fmodf+0xf0>
 8011894:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8011898:	327f      	adds	r2, #127	@ 0x7f
 801189a:	432b      	orrs	r3, r5
 801189c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80118a0:	ee00 3a10 	vmov	s0, r3
 80118a4:	e7ac      	b.n	8011800 <__ieee754_fmodf+0x28>
 80118a6:	3801      	subs	r0, #1
 80118a8:	0052      	lsls	r2, r2, #1
 80118aa:	e7bb      	b.n	8011824 <__ieee754_fmodf+0x4c>
 80118ac:	15c8      	asrs	r0, r1, #23
 80118ae:	387f      	subs	r0, #127	@ 0x7f
 80118b0:	e7ba      	b.n	8011828 <__ieee754_fmodf+0x50>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	da02      	bge.n	80118bc <__ieee754_fmodf+0xe4>
 80118b6:	0049      	lsls	r1, r1, #1
 80118b8:	3801      	subs	r0, #1
 80118ba:	e7dd      	b.n	8011878 <__ieee754_fmodf+0xa0>
 80118bc:	d0a6      	beq.n	801180c <__ieee754_fmodf+0x34>
 80118be:	0059      	lsls	r1, r3, #1
 80118c0:	e7fa      	b.n	80118b8 <__ieee754_fmodf+0xe0>
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	3a01      	subs	r2, #1
 80118c6:	e7df      	b.n	8011888 <__ieee754_fmodf+0xb0>
 80118c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80118cc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80118d0:	3282      	adds	r2, #130	@ 0x82
 80118d2:	4113      	asrs	r3, r2
 80118d4:	432b      	orrs	r3, r5
 80118d6:	e7e3      	b.n	80118a0 <__ieee754_fmodf+0xc8>
 80118d8:	08012c50 	.word	0x08012c50

080118dc <__ieee754_rem_pio2f>:
 80118dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118de:	ee10 6a10 	vmov	r6, s0
 80118e2:	4b88      	ldr	r3, [pc, #544]	@ (8011b04 <__ieee754_rem_pio2f+0x228>)
 80118e4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80118e8:	429d      	cmp	r5, r3
 80118ea:	b087      	sub	sp, #28
 80118ec:	4604      	mov	r4, r0
 80118ee:	d805      	bhi.n	80118fc <__ieee754_rem_pio2f+0x20>
 80118f0:	2300      	movs	r3, #0
 80118f2:	ed80 0a00 	vstr	s0, [r0]
 80118f6:	6043      	str	r3, [r0, #4]
 80118f8:	2000      	movs	r0, #0
 80118fa:	e022      	b.n	8011942 <__ieee754_rem_pio2f+0x66>
 80118fc:	4b82      	ldr	r3, [pc, #520]	@ (8011b08 <__ieee754_rem_pio2f+0x22c>)
 80118fe:	429d      	cmp	r5, r3
 8011900:	d83a      	bhi.n	8011978 <__ieee754_rem_pio2f+0x9c>
 8011902:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011906:	2e00      	cmp	r6, #0
 8011908:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011b0c <__ieee754_rem_pio2f+0x230>
 801190c:	4a80      	ldr	r2, [pc, #512]	@ (8011b10 <__ieee754_rem_pio2f+0x234>)
 801190e:	f023 030f 	bic.w	r3, r3, #15
 8011912:	dd18      	ble.n	8011946 <__ieee754_rem_pio2f+0x6a>
 8011914:	4293      	cmp	r3, r2
 8011916:	ee70 7a47 	vsub.f32	s15, s0, s14
 801191a:	bf09      	itett	eq
 801191c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011b14 <__ieee754_rem_pio2f+0x238>
 8011920:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011b18 <__ieee754_rem_pio2f+0x23c>
 8011924:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011b1c <__ieee754_rem_pio2f+0x240>
 8011928:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801192c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011934:	ed80 7a00 	vstr	s14, [r0]
 8011938:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801193c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011940:	2001      	movs	r0, #1
 8011942:	b007      	add	sp, #28
 8011944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011946:	4293      	cmp	r3, r2
 8011948:	ee70 7a07 	vadd.f32	s15, s0, s14
 801194c:	bf09      	itett	eq
 801194e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011b14 <__ieee754_rem_pio2f+0x238>
 8011952:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011b18 <__ieee754_rem_pio2f+0x23c>
 8011956:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011b1c <__ieee754_rem_pio2f+0x240>
 801195a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801195e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011966:	ed80 7a00 	vstr	s14, [r0]
 801196a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801196e:	edc0 7a01 	vstr	s15, [r0, #4]
 8011972:	f04f 30ff 	mov.w	r0, #4294967295
 8011976:	e7e4      	b.n	8011942 <__ieee754_rem_pio2f+0x66>
 8011978:	4b69      	ldr	r3, [pc, #420]	@ (8011b20 <__ieee754_rem_pio2f+0x244>)
 801197a:	429d      	cmp	r5, r3
 801197c:	d873      	bhi.n	8011a66 <__ieee754_rem_pio2f+0x18a>
 801197e:	f000 f8dd 	bl	8011b3c <fabsf>
 8011982:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011b24 <__ieee754_rem_pio2f+0x248>
 8011986:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801198a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801198e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011996:	ee17 0a90 	vmov	r0, s15
 801199a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011b0c <__ieee754_rem_pio2f+0x230>
 801199e:	eea7 0a67 	vfms.f32	s0, s14, s15
 80119a2:	281f      	cmp	r0, #31
 80119a4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011b18 <__ieee754_rem_pio2f+0x23c>
 80119a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ac:	eeb1 6a47 	vneg.f32	s12, s14
 80119b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80119b4:	ee16 1a90 	vmov	r1, s13
 80119b8:	dc09      	bgt.n	80119ce <__ieee754_rem_pio2f+0xf2>
 80119ba:	4a5b      	ldr	r2, [pc, #364]	@ (8011b28 <__ieee754_rem_pio2f+0x24c>)
 80119bc:	1e47      	subs	r7, r0, #1
 80119be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80119c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80119c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d107      	bne.n	80119de <__ieee754_rem_pio2f+0x102>
 80119ce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80119d2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80119d6:	2a08      	cmp	r2, #8
 80119d8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80119dc:	dc14      	bgt.n	8011a08 <__ieee754_rem_pio2f+0x12c>
 80119de:	6021      	str	r1, [r4, #0]
 80119e0:	ed94 7a00 	vldr	s14, [r4]
 80119e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80119e8:	2e00      	cmp	r6, #0
 80119ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80119f2:	daa6      	bge.n	8011942 <__ieee754_rem_pio2f+0x66>
 80119f4:	eeb1 7a47 	vneg.f32	s14, s14
 80119f8:	eeb1 0a40 	vneg.f32	s0, s0
 80119fc:	ed84 7a00 	vstr	s14, [r4]
 8011a00:	ed84 0a01 	vstr	s0, [r4, #4]
 8011a04:	4240      	negs	r0, r0
 8011a06:	e79c      	b.n	8011942 <__ieee754_rem_pio2f+0x66>
 8011a08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011b14 <__ieee754_rem_pio2f+0x238>
 8011a0c:	eef0 6a40 	vmov.f32	s13, s0
 8011a10:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011a14:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011a18:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011a1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011b1c <__ieee754_rem_pio2f+0x240>
 8011a20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011a24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011a28:	ee15 2a90 	vmov	r2, s11
 8011a2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011a30:	1a5b      	subs	r3, r3, r1
 8011a32:	2b19      	cmp	r3, #25
 8011a34:	dc04      	bgt.n	8011a40 <__ieee754_rem_pio2f+0x164>
 8011a36:	edc4 5a00 	vstr	s11, [r4]
 8011a3a:	eeb0 0a66 	vmov.f32	s0, s13
 8011a3e:	e7cf      	b.n	80119e0 <__ieee754_rem_pio2f+0x104>
 8011a40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011b2c <__ieee754_rem_pio2f+0x250>
 8011a44:	eeb0 0a66 	vmov.f32	s0, s13
 8011a48:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011a4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011a50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011b30 <__ieee754_rem_pio2f+0x254>
 8011a54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011a58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011a5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011a60:	ed84 7a00 	vstr	s14, [r4]
 8011a64:	e7bc      	b.n	80119e0 <__ieee754_rem_pio2f+0x104>
 8011a66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011a6a:	d306      	bcc.n	8011a7a <__ieee754_rem_pio2f+0x19e>
 8011a6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a70:	edc0 7a01 	vstr	s15, [r0, #4]
 8011a74:	edc0 7a00 	vstr	s15, [r0]
 8011a78:	e73e      	b.n	80118f8 <__ieee754_rem_pio2f+0x1c>
 8011a7a:	15ea      	asrs	r2, r5, #23
 8011a7c:	3a86      	subs	r2, #134	@ 0x86
 8011a7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011a82:	ee07 3a90 	vmov	s15, r3
 8011a86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011a8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011b34 <__ieee754_rem_pio2f+0x258>
 8011a8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a96:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011aa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011aaa:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011aae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aba:	edcd 7a05 	vstr	s15, [sp, #20]
 8011abe:	d11e      	bne.n	8011afe <__ieee754_rem_pio2f+0x222>
 8011ac0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac8:	bf0c      	ite	eq
 8011aca:	2301      	moveq	r3, #1
 8011acc:	2302      	movne	r3, #2
 8011ace:	491a      	ldr	r1, [pc, #104]	@ (8011b38 <__ieee754_rem_pio2f+0x25c>)
 8011ad0:	9101      	str	r1, [sp, #4]
 8011ad2:	2102      	movs	r1, #2
 8011ad4:	9100      	str	r1, [sp, #0]
 8011ad6:	a803      	add	r0, sp, #12
 8011ad8:	4621      	mov	r1, r4
 8011ada:	f000 fc69 	bl	80123b0 <__kernel_rem_pio2f>
 8011ade:	2e00      	cmp	r6, #0
 8011ae0:	f6bf af2f 	bge.w	8011942 <__ieee754_rem_pio2f+0x66>
 8011ae4:	edd4 7a00 	vldr	s15, [r4]
 8011ae8:	eef1 7a67 	vneg.f32	s15, s15
 8011aec:	edc4 7a00 	vstr	s15, [r4]
 8011af0:	edd4 7a01 	vldr	s15, [r4, #4]
 8011af4:	eef1 7a67 	vneg.f32	s15, s15
 8011af8:	edc4 7a01 	vstr	s15, [r4, #4]
 8011afc:	e782      	b.n	8011a04 <__ieee754_rem_pio2f+0x128>
 8011afe:	2303      	movs	r3, #3
 8011b00:	e7e5      	b.n	8011ace <__ieee754_rem_pio2f+0x1f2>
 8011b02:	bf00      	nop
 8011b04:	3f490fd8 	.word	0x3f490fd8
 8011b08:	4016cbe3 	.word	0x4016cbe3
 8011b0c:	3fc90f80 	.word	0x3fc90f80
 8011b10:	3fc90fd0 	.word	0x3fc90fd0
 8011b14:	37354400 	.word	0x37354400
 8011b18:	37354443 	.word	0x37354443
 8011b1c:	2e85a308 	.word	0x2e85a308
 8011b20:	43490f80 	.word	0x43490f80
 8011b24:	3f22f984 	.word	0x3f22f984
 8011b28:	08012c58 	.word	0x08012c58
 8011b2c:	2e85a300 	.word	0x2e85a300
 8011b30:	248d3132 	.word	0x248d3132
 8011b34:	43800000 	.word	0x43800000
 8011b38:	08012cd8 	.word	0x08012cd8

08011b3c <fabsf>:
 8011b3c:	ee10 3a10 	vmov	r3, s0
 8011b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b44:	ee00 3a10 	vmov	s0, r3
 8011b48:	4770      	bx	lr
 8011b4a:	0000      	movs	r0, r0
 8011b4c:	0000      	movs	r0, r0
	...

08011b50 <scalbn>:
 8011b50:	b570      	push	{r4, r5, r6, lr}
 8011b52:	ec55 4b10 	vmov	r4, r5, d0
 8011b56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	b991      	cbnz	r1, 8011b86 <scalbn+0x36>
 8011b60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011b64:	4323      	orrs	r3, r4
 8011b66:	d03b      	beq.n	8011be0 <scalbn+0x90>
 8011b68:	4b33      	ldr	r3, [pc, #204]	@ (8011c38 <scalbn+0xe8>)
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f7ee fd0e 	bl	8000590 <__aeabi_dmul>
 8011b74:	4b31      	ldr	r3, [pc, #196]	@ (8011c3c <scalbn+0xec>)
 8011b76:	429e      	cmp	r6, r3
 8011b78:	4604      	mov	r4, r0
 8011b7a:	460d      	mov	r5, r1
 8011b7c:	da0f      	bge.n	8011b9e <scalbn+0x4e>
 8011b7e:	a326      	add	r3, pc, #152	@ (adr r3, 8011c18 <scalbn+0xc8>)
 8011b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b84:	e01e      	b.n	8011bc4 <scalbn+0x74>
 8011b86:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011b8a:	4291      	cmp	r1, r2
 8011b8c:	d10b      	bne.n	8011ba6 <scalbn+0x56>
 8011b8e:	4622      	mov	r2, r4
 8011b90:	4620      	mov	r0, r4
 8011b92:	4629      	mov	r1, r5
 8011b94:	f7ee fb46 	bl	8000224 <__adddf3>
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	e020      	b.n	8011be0 <scalbn+0x90>
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011ba4:	3936      	subs	r1, #54	@ 0x36
 8011ba6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011baa:	4296      	cmp	r6, r2
 8011bac:	dd0d      	ble.n	8011bca <scalbn+0x7a>
 8011bae:	2d00      	cmp	r5, #0
 8011bb0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011c20 <scalbn+0xd0>)
 8011bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bb6:	da02      	bge.n	8011bbe <scalbn+0x6e>
 8011bb8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011c28 <scalbn+0xd8>)
 8011bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bbe:	a318      	add	r3, pc, #96	@ (adr r3, 8011c20 <scalbn+0xd0>)
 8011bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc4:	f7ee fce4 	bl	8000590 <__aeabi_dmul>
 8011bc8:	e7e6      	b.n	8011b98 <scalbn+0x48>
 8011bca:	1872      	adds	r2, r6, r1
 8011bcc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011bd0:	428a      	cmp	r2, r1
 8011bd2:	dcec      	bgt.n	8011bae <scalbn+0x5e>
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	dd06      	ble.n	8011be6 <scalbn+0x96>
 8011bd8:	f36f 531e 	bfc	r3, #20, #11
 8011bdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011be0:	ec45 4b10 	vmov	d0, r4, r5
 8011be4:	bd70      	pop	{r4, r5, r6, pc}
 8011be6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011bea:	da08      	bge.n	8011bfe <scalbn+0xae>
 8011bec:	2d00      	cmp	r5, #0
 8011bee:	a10a      	add	r1, pc, #40	@ (adr r1, 8011c18 <scalbn+0xc8>)
 8011bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bf4:	dac3      	bge.n	8011b7e <scalbn+0x2e>
 8011bf6:	a10e      	add	r1, pc, #56	@ (adr r1, 8011c30 <scalbn+0xe0>)
 8011bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bfc:	e7bf      	b.n	8011b7e <scalbn+0x2e>
 8011bfe:	3236      	adds	r2, #54	@ 0x36
 8011c00:	f36f 531e 	bfc	r3, #20, #11
 8011c04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011c08:	4620      	mov	r0, r4
 8011c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c40 <scalbn+0xf0>)
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	2200      	movs	r2, #0
 8011c10:	e7d8      	b.n	8011bc4 <scalbn+0x74>
 8011c12:	bf00      	nop
 8011c14:	f3af 8000 	nop.w
 8011c18:	c2f8f359 	.word	0xc2f8f359
 8011c1c:	01a56e1f 	.word	0x01a56e1f
 8011c20:	8800759c 	.word	0x8800759c
 8011c24:	7e37e43c 	.word	0x7e37e43c
 8011c28:	8800759c 	.word	0x8800759c
 8011c2c:	fe37e43c 	.word	0xfe37e43c
 8011c30:	c2f8f359 	.word	0xc2f8f359
 8011c34:	81a56e1f 	.word	0x81a56e1f
 8011c38:	43500000 	.word	0x43500000
 8011c3c:	ffff3cb0 	.word	0xffff3cb0
 8011c40:	3c900000 	.word	0x3c900000

08011c44 <scalbnf>:
 8011c44:	ee10 3a10 	vmov	r3, s0
 8011c48:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011c4c:	d02b      	beq.n	8011ca6 <scalbnf+0x62>
 8011c4e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011c52:	d302      	bcc.n	8011c5a <scalbnf+0x16>
 8011c54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c58:	4770      	bx	lr
 8011c5a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011c5e:	d123      	bne.n	8011ca8 <scalbnf+0x64>
 8011c60:	4b24      	ldr	r3, [pc, #144]	@ (8011cf4 <scalbnf+0xb0>)
 8011c62:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011cf8 <scalbnf+0xb4>
 8011c66:	4298      	cmp	r0, r3
 8011c68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011c6c:	db17      	blt.n	8011c9e <scalbnf+0x5a>
 8011c6e:	ee10 3a10 	vmov	r3, s0
 8011c72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011c76:	3a19      	subs	r2, #25
 8011c78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011c7c:	4288      	cmp	r0, r1
 8011c7e:	dd15      	ble.n	8011cac <scalbnf+0x68>
 8011c80:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011cfc <scalbnf+0xb8>
 8011c84:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011d00 <scalbnf+0xbc>
 8011c88:	ee10 3a10 	vmov	r3, s0
 8011c8c:	eeb0 7a67 	vmov.f32	s14, s15
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	bfb8      	it	lt
 8011c94:	eef0 7a66 	vmovlt.f32	s15, s13
 8011c98:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011c9c:	4770      	bx	lr
 8011c9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011d04 <scalbnf+0xc0>
 8011ca2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011ca6:	4770      	bx	lr
 8011ca8:	0dd2      	lsrs	r2, r2, #23
 8011caa:	e7e5      	b.n	8011c78 <scalbnf+0x34>
 8011cac:	4410      	add	r0, r2
 8011cae:	28fe      	cmp	r0, #254	@ 0xfe
 8011cb0:	dce6      	bgt.n	8011c80 <scalbnf+0x3c>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	dd06      	ble.n	8011cc4 <scalbnf+0x80>
 8011cb6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011cba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011cbe:	ee00 3a10 	vmov	s0, r3
 8011cc2:	4770      	bx	lr
 8011cc4:	f110 0f16 	cmn.w	r0, #22
 8011cc8:	da09      	bge.n	8011cde <scalbnf+0x9a>
 8011cca:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011d04 <scalbnf+0xc0>
 8011cce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011d08 <scalbnf+0xc4>
 8011cd2:	ee10 3a10 	vmov	r3, s0
 8011cd6:	eeb0 7a67 	vmov.f32	s14, s15
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	e7d9      	b.n	8011c92 <scalbnf+0x4e>
 8011cde:	3019      	adds	r0, #25
 8011ce0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ce4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011ce8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011d0c <scalbnf+0xc8>
 8011cec:	ee07 3a90 	vmov	s15, r3
 8011cf0:	e7d7      	b.n	8011ca2 <scalbnf+0x5e>
 8011cf2:	bf00      	nop
 8011cf4:	ffff3cb0 	.word	0xffff3cb0
 8011cf8:	4c000000 	.word	0x4c000000
 8011cfc:	7149f2ca 	.word	0x7149f2ca
 8011d00:	f149f2ca 	.word	0xf149f2ca
 8011d04:	0da24260 	.word	0x0da24260
 8011d08:	8da24260 	.word	0x8da24260
 8011d0c:	33000000 	.word	0x33000000

08011d10 <__kernel_rem_pio2>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	ed2d 8b02 	vpush	{d8}
 8011d18:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011d1c:	f112 0f14 	cmn.w	r2, #20
 8011d20:	9306      	str	r3, [sp, #24]
 8011d22:	9104      	str	r1, [sp, #16]
 8011d24:	4bc2      	ldr	r3, [pc, #776]	@ (8012030 <__kernel_rem_pio2+0x320>)
 8011d26:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011d28:	9008      	str	r0, [sp, #32]
 8011d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	9b06      	ldr	r3, [sp, #24]
 8011d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d36:	bfa8      	it	ge
 8011d38:	1ed4      	subge	r4, r2, #3
 8011d3a:	9305      	str	r3, [sp, #20]
 8011d3c:	bfb2      	itee	lt
 8011d3e:	2400      	movlt	r4, #0
 8011d40:	2318      	movge	r3, #24
 8011d42:	fb94 f4f3 	sdivge	r4, r4, r3
 8011d46:	f06f 0317 	mvn.w	r3, #23
 8011d4a:	fb04 3303 	mla	r3, r4, r3, r3
 8011d4e:	eb03 0b02 	add.w	fp, r3, r2
 8011d52:	9b00      	ldr	r3, [sp, #0]
 8011d54:	9a05      	ldr	r2, [sp, #20]
 8011d56:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8012020 <__kernel_rem_pio2+0x310>
 8011d5a:	eb03 0802 	add.w	r8, r3, r2
 8011d5e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011d60:	1aa7      	subs	r7, r4, r2
 8011d62:	ae20      	add	r6, sp, #128	@ 0x80
 8011d64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d68:	2500      	movs	r5, #0
 8011d6a:	4545      	cmp	r5, r8
 8011d6c:	dd12      	ble.n	8011d94 <__kernel_rem_pio2+0x84>
 8011d6e:	9b06      	ldr	r3, [sp, #24]
 8011d70:	aa20      	add	r2, sp, #128	@ 0x80
 8011d72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011d76:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011d7a:	2700      	movs	r7, #0
 8011d7c:	9b00      	ldr	r3, [sp, #0]
 8011d7e:	429f      	cmp	r7, r3
 8011d80:	dc2e      	bgt.n	8011de0 <__kernel_rem_pio2+0xd0>
 8011d82:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8012020 <__kernel_rem_pio2+0x310>
 8011d86:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d8e:	46a8      	mov	r8, r5
 8011d90:	2600      	movs	r6, #0
 8011d92:	e01b      	b.n	8011dcc <__kernel_rem_pio2+0xbc>
 8011d94:	42ef      	cmn	r7, r5
 8011d96:	d407      	bmi.n	8011da8 <__kernel_rem_pio2+0x98>
 8011d98:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011d9c:	f7ee fb8e 	bl	80004bc <__aeabi_i2d>
 8011da0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011da4:	3501      	adds	r5, #1
 8011da6:	e7e0      	b.n	8011d6a <__kernel_rem_pio2+0x5a>
 8011da8:	ec51 0b18 	vmov	r0, r1, d8
 8011dac:	e7f8      	b.n	8011da0 <__kernel_rem_pio2+0x90>
 8011dae:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011db2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011db6:	f7ee fbeb 	bl	8000590 <__aeabi_dmul>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dc2:	f7ee fa2f 	bl	8000224 <__adddf3>
 8011dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dca:	3601      	adds	r6, #1
 8011dcc:	9b05      	ldr	r3, [sp, #20]
 8011dce:	429e      	cmp	r6, r3
 8011dd0:	dded      	ble.n	8011dae <__kernel_rem_pio2+0x9e>
 8011dd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dd6:	3701      	adds	r7, #1
 8011dd8:	ecaa 7b02 	vstmia	sl!, {d7}
 8011ddc:	3508      	adds	r5, #8
 8011dde:	e7cd      	b.n	8011d7c <__kernel_rem_pio2+0x6c>
 8011de0:	9b00      	ldr	r3, [sp, #0]
 8011de2:	f8dd 8000 	ldr.w	r8, [sp]
 8011de6:	aa0c      	add	r2, sp, #48	@ 0x30
 8011de8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dec:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011df0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011df6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dfc:	ab98      	add	r3, sp, #608	@ 0x260
 8011dfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011e02:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011e06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e0a:	ac0c      	add	r4, sp, #48	@ 0x30
 8011e0c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011e0e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011e12:	46a1      	mov	r9, r4
 8011e14:	46c2      	mov	sl, r8
 8011e16:	f1ba 0f00 	cmp.w	sl, #0
 8011e1a:	dc77      	bgt.n	8011f0c <__kernel_rem_pio2+0x1fc>
 8011e1c:	4658      	mov	r0, fp
 8011e1e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011e22:	f7ff fe95 	bl	8011b50 <scalbn>
 8011e26:	ec57 6b10 	vmov	r6, r7, d0
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011e30:	4630      	mov	r0, r6
 8011e32:	4639      	mov	r1, r7
 8011e34:	f7ee fbac 	bl	8000590 <__aeabi_dmul>
 8011e38:	ec41 0b10 	vmov	d0, r0, r1
 8011e3c:	f000 fd20 	bl	8012880 <floor>
 8011e40:	4b7c      	ldr	r3, [pc, #496]	@ (8012034 <__kernel_rem_pio2+0x324>)
 8011e42:	ec51 0b10 	vmov	r0, r1, d0
 8011e46:	2200      	movs	r2, #0
 8011e48:	f7ee fba2 	bl	8000590 <__aeabi_dmul>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	460b      	mov	r3, r1
 8011e50:	4630      	mov	r0, r6
 8011e52:	4639      	mov	r1, r7
 8011e54:	f7ee f9e4 	bl	8000220 <__aeabi_dsub>
 8011e58:	460f      	mov	r7, r1
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	f7ee fe32 	bl	8000ac4 <__aeabi_d2iz>
 8011e60:	9002      	str	r0, [sp, #8]
 8011e62:	f7ee fb2b 	bl	80004bc <__aeabi_i2d>
 8011e66:	4602      	mov	r2, r0
 8011e68:	460b      	mov	r3, r1
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	4639      	mov	r1, r7
 8011e6e:	f7ee f9d7 	bl	8000220 <__aeabi_dsub>
 8011e72:	f1bb 0f00 	cmp.w	fp, #0
 8011e76:	4606      	mov	r6, r0
 8011e78:	460f      	mov	r7, r1
 8011e7a:	dd6c      	ble.n	8011f56 <__kernel_rem_pio2+0x246>
 8011e7c:	f108 31ff 	add.w	r1, r8, #4294967295
 8011e80:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e82:	9d02      	ldr	r5, [sp, #8]
 8011e84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e88:	f1cb 0018 	rsb	r0, fp, #24
 8011e8c:	fa43 f200 	asr.w	r2, r3, r0
 8011e90:	4415      	add	r5, r2
 8011e92:	4082      	lsls	r2, r0
 8011e94:	1a9b      	subs	r3, r3, r2
 8011e96:	aa0c      	add	r2, sp, #48	@ 0x30
 8011e98:	9502      	str	r5, [sp, #8]
 8011e9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011e9e:	f1cb 0217 	rsb	r2, fp, #23
 8011ea2:	fa43 f902 	asr.w	r9, r3, r2
 8011ea6:	f1b9 0f00 	cmp.w	r9, #0
 8011eaa:	dd64      	ble.n	8011f76 <__kernel_rem_pio2+0x266>
 8011eac:	9b02      	ldr	r3, [sp, #8]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	9302      	str	r3, [sp, #8]
 8011eb4:	4615      	mov	r5, r2
 8011eb6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011eba:	4590      	cmp	r8, r2
 8011ebc:	f300 80a1 	bgt.w	8012002 <__kernel_rem_pio2+0x2f2>
 8011ec0:	f1bb 0f00 	cmp.w	fp, #0
 8011ec4:	dd07      	ble.n	8011ed6 <__kernel_rem_pio2+0x1c6>
 8011ec6:	f1bb 0f01 	cmp.w	fp, #1
 8011eca:	f000 80c1 	beq.w	8012050 <__kernel_rem_pio2+0x340>
 8011ece:	f1bb 0f02 	cmp.w	fp, #2
 8011ed2:	f000 80c8 	beq.w	8012066 <__kernel_rem_pio2+0x356>
 8011ed6:	f1b9 0f02 	cmp.w	r9, #2
 8011eda:	d14c      	bne.n	8011f76 <__kernel_rem_pio2+0x266>
 8011edc:	4632      	mov	r2, r6
 8011ede:	463b      	mov	r3, r7
 8011ee0:	4955      	ldr	r1, [pc, #340]	@ (8012038 <__kernel_rem_pio2+0x328>)
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f7ee f99c 	bl	8000220 <__aeabi_dsub>
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	2d00      	cmp	r5, #0
 8011eee:	d042      	beq.n	8011f76 <__kernel_rem_pio2+0x266>
 8011ef0:	4658      	mov	r0, fp
 8011ef2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8012028 <__kernel_rem_pio2+0x318>
 8011ef6:	f7ff fe2b 	bl	8011b50 <scalbn>
 8011efa:	4630      	mov	r0, r6
 8011efc:	4639      	mov	r1, r7
 8011efe:	ec53 2b10 	vmov	r2, r3, d0
 8011f02:	f7ee f98d 	bl	8000220 <__aeabi_dsub>
 8011f06:	4606      	mov	r6, r0
 8011f08:	460f      	mov	r7, r1
 8011f0a:	e034      	b.n	8011f76 <__kernel_rem_pio2+0x266>
 8011f0c:	4b4b      	ldr	r3, [pc, #300]	@ (801203c <__kernel_rem_pio2+0x32c>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f14:	f7ee fb3c 	bl	8000590 <__aeabi_dmul>
 8011f18:	f7ee fdd4 	bl	8000ac4 <__aeabi_d2iz>
 8011f1c:	f7ee face 	bl	80004bc <__aeabi_i2d>
 8011f20:	4b47      	ldr	r3, [pc, #284]	@ (8012040 <__kernel_rem_pio2+0x330>)
 8011f22:	2200      	movs	r2, #0
 8011f24:	4606      	mov	r6, r0
 8011f26:	460f      	mov	r7, r1
 8011f28:	f7ee fb32 	bl	8000590 <__aeabi_dmul>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f34:	f7ee f974 	bl	8000220 <__aeabi_dsub>
 8011f38:	f7ee fdc4 	bl	8000ac4 <__aeabi_d2iz>
 8011f3c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011f40:	f849 0b04 	str.w	r0, [r9], #4
 8011f44:	4639      	mov	r1, r7
 8011f46:	4630      	mov	r0, r6
 8011f48:	f7ee f96c 	bl	8000224 <__adddf3>
 8011f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f54:	e75f      	b.n	8011e16 <__kernel_rem_pio2+0x106>
 8011f56:	d107      	bne.n	8011f68 <__kernel_rem_pio2+0x258>
 8011f58:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f5c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f62:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011f66:	e79e      	b.n	8011ea6 <__kernel_rem_pio2+0x196>
 8011f68:	4b36      	ldr	r3, [pc, #216]	@ (8012044 <__kernel_rem_pio2+0x334>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f7ee fd96 	bl	8000a9c <__aeabi_dcmpge>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d143      	bne.n	8011ffc <__kernel_rem_pio2+0x2ec>
 8011f74:	4681      	mov	r9, r0
 8011f76:	2200      	movs	r2, #0
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	4639      	mov	r1, r7
 8011f7e:	f7ee fd6f 	bl	8000a60 <__aeabi_dcmpeq>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	f000 80c1 	beq.w	801210a <__kernel_rem_pio2+0x3fa>
 8011f88:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	9900      	ldr	r1, [sp, #0]
 8011f90:	428b      	cmp	r3, r1
 8011f92:	da70      	bge.n	8012076 <__kernel_rem_pio2+0x366>
 8011f94:	2a00      	cmp	r2, #0
 8011f96:	f000 808b 	beq.w	80120b0 <__kernel_rem_pio2+0x3a0>
 8011f9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011fa0:	f1ab 0b18 	sub.w	fp, fp, #24
 8011fa4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d0f6      	beq.n	8011f9a <__kernel_rem_pio2+0x28a>
 8011fac:	4658      	mov	r0, fp
 8011fae:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8012028 <__kernel_rem_pio2+0x318>
 8011fb2:	f7ff fdcd 	bl	8011b50 <scalbn>
 8011fb6:	f108 0301 	add.w	r3, r8, #1
 8011fba:	00da      	lsls	r2, r3, #3
 8011fbc:	9205      	str	r2, [sp, #20]
 8011fbe:	ec55 4b10 	vmov	r4, r5, d0
 8011fc2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011fc4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801203c <__kernel_rem_pio2+0x32c>
 8011fc8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011fcc:	4646      	mov	r6, r8
 8011fce:	f04f 0a00 	mov.w	sl, #0
 8011fd2:	2e00      	cmp	r6, #0
 8011fd4:	f280 80d1 	bge.w	801217a <__kernel_rem_pio2+0x46a>
 8011fd8:	4644      	mov	r4, r8
 8011fda:	2c00      	cmp	r4, #0
 8011fdc:	f2c0 80ff 	blt.w	80121de <__kernel_rem_pio2+0x4ce>
 8011fe0:	4b19      	ldr	r3, [pc, #100]	@ (8012048 <__kernel_rem_pio2+0x338>)
 8011fe2:	461f      	mov	r7, r3
 8011fe4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011fe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011fea:	9306      	str	r3, [sp, #24]
 8011fec:	f04f 0a00 	mov.w	sl, #0
 8011ff0:	f04f 0b00 	mov.w	fp, #0
 8011ff4:	2600      	movs	r6, #0
 8011ff6:	eba8 0504 	sub.w	r5, r8, r4
 8011ffa:	e0e4      	b.n	80121c6 <__kernel_rem_pio2+0x4b6>
 8011ffc:	f04f 0902 	mov.w	r9, #2
 8012000:	e754      	b.n	8011eac <__kernel_rem_pio2+0x19c>
 8012002:	f854 3b04 	ldr.w	r3, [r4], #4
 8012006:	bb0d      	cbnz	r5, 801204c <__kernel_rem_pio2+0x33c>
 8012008:	b123      	cbz	r3, 8012014 <__kernel_rem_pio2+0x304>
 801200a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801200e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012012:	2301      	movs	r3, #1
 8012014:	3201      	adds	r2, #1
 8012016:	461d      	mov	r5, r3
 8012018:	e74f      	b.n	8011eba <__kernel_rem_pio2+0x1aa>
 801201a:	bf00      	nop
 801201c:	f3af 8000 	nop.w
	...
 801202c:	3ff00000 	.word	0x3ff00000
 8012030:	08013030 	.word	0x08013030
 8012034:	40200000 	.word	0x40200000
 8012038:	3ff00000 	.word	0x3ff00000
 801203c:	3e700000 	.word	0x3e700000
 8012040:	41700000 	.word	0x41700000
 8012044:	3fe00000 	.word	0x3fe00000
 8012048:	08012ff0 	.word	0x08012ff0
 801204c:	1acb      	subs	r3, r1, r3
 801204e:	e7de      	b.n	801200e <__kernel_rem_pio2+0x2fe>
 8012050:	f108 32ff 	add.w	r2, r8, #4294967295
 8012054:	ab0c      	add	r3, sp, #48	@ 0x30
 8012056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801205e:	a90c      	add	r1, sp, #48	@ 0x30
 8012060:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012064:	e737      	b.n	8011ed6 <__kernel_rem_pio2+0x1c6>
 8012066:	f108 32ff 	add.w	r2, r8, #4294967295
 801206a:	ab0c      	add	r3, sp, #48	@ 0x30
 801206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012070:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012074:	e7f3      	b.n	801205e <__kernel_rem_pio2+0x34e>
 8012076:	a90c      	add	r1, sp, #48	@ 0x30
 8012078:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801207c:	3b01      	subs	r3, #1
 801207e:	430a      	orrs	r2, r1
 8012080:	e785      	b.n	8011f8e <__kernel_rem_pio2+0x27e>
 8012082:	3401      	adds	r4, #1
 8012084:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012088:	2a00      	cmp	r2, #0
 801208a:	d0fa      	beq.n	8012082 <__kernel_rem_pio2+0x372>
 801208c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801208e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012092:	eb0d 0503 	add.w	r5, sp, r3
 8012096:	9b06      	ldr	r3, [sp, #24]
 8012098:	aa20      	add	r2, sp, #128	@ 0x80
 801209a:	4443      	add	r3, r8
 801209c:	f108 0701 	add.w	r7, r8, #1
 80120a0:	3d98      	subs	r5, #152	@ 0x98
 80120a2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80120a6:	4444      	add	r4, r8
 80120a8:	42bc      	cmp	r4, r7
 80120aa:	da04      	bge.n	80120b6 <__kernel_rem_pio2+0x3a6>
 80120ac:	46a0      	mov	r8, r4
 80120ae:	e6a2      	b.n	8011df6 <__kernel_rem_pio2+0xe6>
 80120b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120b2:	2401      	movs	r4, #1
 80120b4:	e7e6      	b.n	8012084 <__kernel_rem_pio2+0x374>
 80120b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80120bc:	f7ee f9fe 	bl	80004bc <__aeabi_i2d>
 80120c0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8012380 <__kernel_rem_pio2+0x670>
 80120c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80120c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80120cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80120d0:	46b2      	mov	sl, r6
 80120d2:	f04f 0800 	mov.w	r8, #0
 80120d6:	9b05      	ldr	r3, [sp, #20]
 80120d8:	4598      	cmp	r8, r3
 80120da:	dd05      	ble.n	80120e8 <__kernel_rem_pio2+0x3d8>
 80120dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120e0:	3701      	adds	r7, #1
 80120e2:	eca5 7b02 	vstmia	r5!, {d7}
 80120e6:	e7df      	b.n	80120a8 <__kernel_rem_pio2+0x398>
 80120e8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80120ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80120f0:	f7ee fa4e 	bl	8000590 <__aeabi_dmul>
 80120f4:	4602      	mov	r2, r0
 80120f6:	460b      	mov	r3, r1
 80120f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120fc:	f7ee f892 	bl	8000224 <__adddf3>
 8012100:	f108 0801 	add.w	r8, r8, #1
 8012104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012108:	e7e5      	b.n	80120d6 <__kernel_rem_pio2+0x3c6>
 801210a:	f1cb 0000 	rsb	r0, fp, #0
 801210e:	ec47 6b10 	vmov	d0, r6, r7
 8012112:	f7ff fd1d 	bl	8011b50 <scalbn>
 8012116:	ec55 4b10 	vmov	r4, r5, d0
 801211a:	4b9b      	ldr	r3, [pc, #620]	@ (8012388 <__kernel_rem_pio2+0x678>)
 801211c:	2200      	movs	r2, #0
 801211e:	4620      	mov	r0, r4
 8012120:	4629      	mov	r1, r5
 8012122:	f7ee fcbb 	bl	8000a9c <__aeabi_dcmpge>
 8012126:	b300      	cbz	r0, 801216a <__kernel_rem_pio2+0x45a>
 8012128:	4b98      	ldr	r3, [pc, #608]	@ (801238c <__kernel_rem_pio2+0x67c>)
 801212a:	2200      	movs	r2, #0
 801212c:	4620      	mov	r0, r4
 801212e:	4629      	mov	r1, r5
 8012130:	f7ee fa2e 	bl	8000590 <__aeabi_dmul>
 8012134:	f7ee fcc6 	bl	8000ac4 <__aeabi_d2iz>
 8012138:	4606      	mov	r6, r0
 801213a:	f7ee f9bf 	bl	80004bc <__aeabi_i2d>
 801213e:	4b92      	ldr	r3, [pc, #584]	@ (8012388 <__kernel_rem_pio2+0x678>)
 8012140:	2200      	movs	r2, #0
 8012142:	f7ee fa25 	bl	8000590 <__aeabi_dmul>
 8012146:	460b      	mov	r3, r1
 8012148:	4602      	mov	r2, r0
 801214a:	4629      	mov	r1, r5
 801214c:	4620      	mov	r0, r4
 801214e:	f7ee f867 	bl	8000220 <__aeabi_dsub>
 8012152:	f7ee fcb7 	bl	8000ac4 <__aeabi_d2iz>
 8012156:	ab0c      	add	r3, sp, #48	@ 0x30
 8012158:	f10b 0b18 	add.w	fp, fp, #24
 801215c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012160:	f108 0801 	add.w	r8, r8, #1
 8012164:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012168:	e720      	b.n	8011fac <__kernel_rem_pio2+0x29c>
 801216a:	4620      	mov	r0, r4
 801216c:	4629      	mov	r1, r5
 801216e:	f7ee fca9 	bl	8000ac4 <__aeabi_d2iz>
 8012172:	ab0c      	add	r3, sp, #48	@ 0x30
 8012174:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012178:	e718      	b.n	8011fac <__kernel_rem_pio2+0x29c>
 801217a:	ab0c      	add	r3, sp, #48	@ 0x30
 801217c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012180:	f7ee f99c 	bl	80004bc <__aeabi_i2d>
 8012184:	4622      	mov	r2, r4
 8012186:	462b      	mov	r3, r5
 8012188:	f7ee fa02 	bl	8000590 <__aeabi_dmul>
 801218c:	4652      	mov	r2, sl
 801218e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012192:	465b      	mov	r3, fp
 8012194:	4620      	mov	r0, r4
 8012196:	4629      	mov	r1, r5
 8012198:	f7ee f9fa 	bl	8000590 <__aeabi_dmul>
 801219c:	3e01      	subs	r6, #1
 801219e:	4604      	mov	r4, r0
 80121a0:	460d      	mov	r5, r1
 80121a2:	e716      	b.n	8011fd2 <__kernel_rem_pio2+0x2c2>
 80121a4:	9906      	ldr	r1, [sp, #24]
 80121a6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80121aa:	9106      	str	r1, [sp, #24]
 80121ac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80121b0:	f7ee f9ee 	bl	8000590 <__aeabi_dmul>
 80121b4:	4602      	mov	r2, r0
 80121b6:	460b      	mov	r3, r1
 80121b8:	4650      	mov	r0, sl
 80121ba:	4659      	mov	r1, fp
 80121bc:	f7ee f832 	bl	8000224 <__adddf3>
 80121c0:	3601      	adds	r6, #1
 80121c2:	4682      	mov	sl, r0
 80121c4:	468b      	mov	fp, r1
 80121c6:	9b00      	ldr	r3, [sp, #0]
 80121c8:	429e      	cmp	r6, r3
 80121ca:	dc01      	bgt.n	80121d0 <__kernel_rem_pio2+0x4c0>
 80121cc:	42ae      	cmp	r6, r5
 80121ce:	dde9      	ble.n	80121a4 <__kernel_rem_pio2+0x494>
 80121d0:	ab48      	add	r3, sp, #288	@ 0x120
 80121d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80121d6:	e9c5 ab00 	strd	sl, fp, [r5]
 80121da:	3c01      	subs	r4, #1
 80121dc:	e6fd      	b.n	8011fda <__kernel_rem_pio2+0x2ca>
 80121de:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80121e0:	2b02      	cmp	r3, #2
 80121e2:	dc0b      	bgt.n	80121fc <__kernel_rem_pio2+0x4ec>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	dc35      	bgt.n	8012254 <__kernel_rem_pio2+0x544>
 80121e8:	d059      	beq.n	801229e <__kernel_rem_pio2+0x58e>
 80121ea:	9b02      	ldr	r3, [sp, #8]
 80121ec:	f003 0007 	and.w	r0, r3, #7
 80121f0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80121f4:	ecbd 8b02 	vpop	{d8}
 80121f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80121fe:	2b03      	cmp	r3, #3
 8012200:	d1f3      	bne.n	80121ea <__kernel_rem_pio2+0x4da>
 8012202:	9b05      	ldr	r3, [sp, #20]
 8012204:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012208:	eb0d 0403 	add.w	r4, sp, r3
 801220c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012210:	4625      	mov	r5, r4
 8012212:	46c2      	mov	sl, r8
 8012214:	f1ba 0f00 	cmp.w	sl, #0
 8012218:	dc69      	bgt.n	80122ee <__kernel_rem_pio2+0x5de>
 801221a:	4645      	mov	r5, r8
 801221c:	2d01      	cmp	r5, #1
 801221e:	f300 8087 	bgt.w	8012330 <__kernel_rem_pio2+0x620>
 8012222:	9c05      	ldr	r4, [sp, #20]
 8012224:	ab48      	add	r3, sp, #288	@ 0x120
 8012226:	441c      	add	r4, r3
 8012228:	2000      	movs	r0, #0
 801222a:	2100      	movs	r1, #0
 801222c:	f1b8 0f01 	cmp.w	r8, #1
 8012230:	f300 809c 	bgt.w	801236c <__kernel_rem_pio2+0x65c>
 8012234:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8012238:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801223c:	f1b9 0f00 	cmp.w	r9, #0
 8012240:	f040 80a6 	bne.w	8012390 <__kernel_rem_pio2+0x680>
 8012244:	9b04      	ldr	r3, [sp, #16]
 8012246:	e9c3 5600 	strd	r5, r6, [r3]
 801224a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801224e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012252:	e7ca      	b.n	80121ea <__kernel_rem_pio2+0x4da>
 8012254:	9d05      	ldr	r5, [sp, #20]
 8012256:	ab48      	add	r3, sp, #288	@ 0x120
 8012258:	441d      	add	r5, r3
 801225a:	4644      	mov	r4, r8
 801225c:	2000      	movs	r0, #0
 801225e:	2100      	movs	r1, #0
 8012260:	2c00      	cmp	r4, #0
 8012262:	da35      	bge.n	80122d0 <__kernel_rem_pio2+0x5c0>
 8012264:	f1b9 0f00 	cmp.w	r9, #0
 8012268:	d038      	beq.n	80122dc <__kernel_rem_pio2+0x5cc>
 801226a:	4602      	mov	r2, r0
 801226c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012270:	9c04      	ldr	r4, [sp, #16]
 8012272:	e9c4 2300 	strd	r2, r3, [r4]
 8012276:	4602      	mov	r2, r0
 8012278:	460b      	mov	r3, r1
 801227a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801227e:	f7ed ffcf 	bl	8000220 <__aeabi_dsub>
 8012282:	ad4a      	add	r5, sp, #296	@ 0x128
 8012284:	2401      	movs	r4, #1
 8012286:	45a0      	cmp	r8, r4
 8012288:	da2b      	bge.n	80122e2 <__kernel_rem_pio2+0x5d2>
 801228a:	f1b9 0f00 	cmp.w	r9, #0
 801228e:	d002      	beq.n	8012296 <__kernel_rem_pio2+0x586>
 8012290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012294:	4619      	mov	r1, r3
 8012296:	9b04      	ldr	r3, [sp, #16]
 8012298:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801229c:	e7a5      	b.n	80121ea <__kernel_rem_pio2+0x4da>
 801229e:	9c05      	ldr	r4, [sp, #20]
 80122a0:	ab48      	add	r3, sp, #288	@ 0x120
 80122a2:	441c      	add	r4, r3
 80122a4:	2000      	movs	r0, #0
 80122a6:	2100      	movs	r1, #0
 80122a8:	f1b8 0f00 	cmp.w	r8, #0
 80122ac:	da09      	bge.n	80122c2 <__kernel_rem_pio2+0x5b2>
 80122ae:	f1b9 0f00 	cmp.w	r9, #0
 80122b2:	d002      	beq.n	80122ba <__kernel_rem_pio2+0x5aa>
 80122b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80122b8:	4619      	mov	r1, r3
 80122ba:	9b04      	ldr	r3, [sp, #16]
 80122bc:	e9c3 0100 	strd	r0, r1, [r3]
 80122c0:	e793      	b.n	80121ea <__kernel_rem_pio2+0x4da>
 80122c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122c6:	f7ed ffad 	bl	8000224 <__adddf3>
 80122ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80122ce:	e7eb      	b.n	80122a8 <__kernel_rem_pio2+0x598>
 80122d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80122d4:	f7ed ffa6 	bl	8000224 <__adddf3>
 80122d8:	3c01      	subs	r4, #1
 80122da:	e7c1      	b.n	8012260 <__kernel_rem_pio2+0x550>
 80122dc:	4602      	mov	r2, r0
 80122de:	460b      	mov	r3, r1
 80122e0:	e7c6      	b.n	8012270 <__kernel_rem_pio2+0x560>
 80122e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80122e6:	f7ed ff9d 	bl	8000224 <__adddf3>
 80122ea:	3401      	adds	r4, #1
 80122ec:	e7cb      	b.n	8012286 <__kernel_rem_pio2+0x576>
 80122ee:	ed35 7b02 	vldmdb	r5!, {d7}
 80122f2:	ed8d 7b00 	vstr	d7, [sp]
 80122f6:	ed95 7b02 	vldr	d7, [r5, #8]
 80122fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122fe:	ec53 2b17 	vmov	r2, r3, d7
 8012302:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012306:	f7ed ff8d 	bl	8000224 <__adddf3>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4606      	mov	r6, r0
 8012310:	460f      	mov	r7, r1
 8012312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012316:	f7ed ff83 	bl	8000220 <__aeabi_dsub>
 801231a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801231e:	f7ed ff81 	bl	8000224 <__adddf3>
 8012322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012326:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801232a:	e9c5 6700 	strd	r6, r7, [r5]
 801232e:	e771      	b.n	8012214 <__kernel_rem_pio2+0x504>
 8012330:	ed34 7b02 	vldmdb	r4!, {d7}
 8012334:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012338:	ec51 0b17 	vmov	r0, r1, d7
 801233c:	4652      	mov	r2, sl
 801233e:	465b      	mov	r3, fp
 8012340:	ed8d 7b00 	vstr	d7, [sp]
 8012344:	f7ed ff6e 	bl	8000224 <__adddf3>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4606      	mov	r6, r0
 801234e:	460f      	mov	r7, r1
 8012350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012354:	f7ed ff64 	bl	8000220 <__aeabi_dsub>
 8012358:	4652      	mov	r2, sl
 801235a:	465b      	mov	r3, fp
 801235c:	f7ed ff62 	bl	8000224 <__adddf3>
 8012360:	3d01      	subs	r5, #1
 8012362:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012366:	e9c4 6700 	strd	r6, r7, [r4]
 801236a:	e757      	b.n	801221c <__kernel_rem_pio2+0x50c>
 801236c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012370:	f7ed ff58 	bl	8000224 <__adddf3>
 8012374:	f108 38ff 	add.w	r8, r8, #4294967295
 8012378:	e758      	b.n	801222c <__kernel_rem_pio2+0x51c>
 801237a:	bf00      	nop
 801237c:	f3af 8000 	nop.w
	...
 8012388:	41700000 	.word	0x41700000
 801238c:	3e700000 	.word	0x3e700000
 8012390:	9b04      	ldr	r3, [sp, #16]
 8012392:	9a04      	ldr	r2, [sp, #16]
 8012394:	601d      	str	r5, [r3, #0]
 8012396:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801239a:	605c      	str	r4, [r3, #4]
 801239c:	609f      	str	r7, [r3, #8]
 801239e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80123a2:	60d3      	str	r3, [r2, #12]
 80123a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80123a8:	6110      	str	r0, [r2, #16]
 80123aa:	6153      	str	r3, [r2, #20]
 80123ac:	e71d      	b.n	80121ea <__kernel_rem_pio2+0x4da>
 80123ae:	bf00      	nop

080123b0 <__kernel_rem_pio2f>:
 80123b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b4:	ed2d 8b04 	vpush	{d8-d9}
 80123b8:	b0d9      	sub	sp, #356	@ 0x164
 80123ba:	4690      	mov	r8, r2
 80123bc:	9001      	str	r0, [sp, #4]
 80123be:	4ab6      	ldr	r2, [pc, #728]	@ (8012698 <__kernel_rem_pio2f+0x2e8>)
 80123c0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80123c2:	f118 0f04 	cmn.w	r8, #4
 80123c6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80123ca:	460f      	mov	r7, r1
 80123cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80123d0:	db26      	blt.n	8012420 <__kernel_rem_pio2f+0x70>
 80123d2:	f1b8 0203 	subs.w	r2, r8, #3
 80123d6:	bf48      	it	mi
 80123d8:	f108 0204 	addmi.w	r2, r8, #4
 80123dc:	10d2      	asrs	r2, r2, #3
 80123de:	1c55      	adds	r5, r2, #1
 80123e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80123e2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 80123e6:	00e8      	lsls	r0, r5, #3
 80123e8:	eba2 060b 	sub.w	r6, r2, fp
 80123ec:	9002      	str	r0, [sp, #8]
 80123ee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80123f2:	eb0a 0c0b 	add.w	ip, sl, fp
 80123f6:	ac1c      	add	r4, sp, #112	@ 0x70
 80123f8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80123fc:	2000      	movs	r0, #0
 80123fe:	4560      	cmp	r0, ip
 8012400:	dd10      	ble.n	8012424 <__kernel_rem_pio2f+0x74>
 8012402:	a91c      	add	r1, sp, #112	@ 0x70
 8012404:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012408:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801240c:	2600      	movs	r6, #0
 801240e:	4556      	cmp	r6, sl
 8012410:	dc24      	bgt.n	801245c <__kernel_rem_pio2f+0xac>
 8012412:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012416:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 801241a:	4684      	mov	ip, r0
 801241c:	2400      	movs	r4, #0
 801241e:	e016      	b.n	801244e <__kernel_rem_pio2f+0x9e>
 8012420:	2200      	movs	r2, #0
 8012422:	e7dc      	b.n	80123de <__kernel_rem_pio2f+0x2e>
 8012424:	42c6      	cmn	r6, r0
 8012426:	bf5d      	ittte	pl
 8012428:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801242c:	ee07 1a90 	vmovpl	s15, r1
 8012430:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012434:	eef0 7a47 	vmovmi.f32	s15, s14
 8012438:	ece4 7a01 	vstmia	r4!, {s15}
 801243c:	3001      	adds	r0, #1
 801243e:	e7de      	b.n	80123fe <__kernel_rem_pio2f+0x4e>
 8012440:	ecfe 6a01 	vldmia	lr!, {s13}
 8012444:	ed3c 7a01 	vldmdb	ip!, {s14}
 8012448:	eee6 7a87 	vfma.f32	s15, s13, s14
 801244c:	3401      	adds	r4, #1
 801244e:	455c      	cmp	r4, fp
 8012450:	ddf6      	ble.n	8012440 <__kernel_rem_pio2f+0x90>
 8012452:	ece9 7a01 	vstmia	r9!, {s15}
 8012456:	3601      	adds	r6, #1
 8012458:	3004      	adds	r0, #4
 801245a:	e7d8      	b.n	801240e <__kernel_rem_pio2f+0x5e>
 801245c:	a908      	add	r1, sp, #32
 801245e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012462:	9104      	str	r1, [sp, #16]
 8012464:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012466:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80126a4 <__kernel_rem_pio2f+0x2f4>
 801246a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80126a0 <__kernel_rem_pio2f+0x2f0>
 801246e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012472:	9203      	str	r2, [sp, #12]
 8012474:	4654      	mov	r4, sl
 8012476:	00a2      	lsls	r2, r4, #2
 8012478:	9205      	str	r2, [sp, #20]
 801247a:	aa58      	add	r2, sp, #352	@ 0x160
 801247c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012480:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012484:	a944      	add	r1, sp, #272	@ 0x110
 8012486:	aa08      	add	r2, sp, #32
 8012488:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801248c:	4694      	mov	ip, r2
 801248e:	4626      	mov	r6, r4
 8012490:	2e00      	cmp	r6, #0
 8012492:	dc4c      	bgt.n	801252e <__kernel_rem_pio2f+0x17e>
 8012494:	4628      	mov	r0, r5
 8012496:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801249a:	f7ff fbd3 	bl	8011c44 <scalbnf>
 801249e:	eeb0 8a40 	vmov.f32	s16, s0
 80124a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80124a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80124aa:	f000 fa65 	bl	8012978 <floorf>
 80124ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80124b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80124b6:	2d00      	cmp	r5, #0
 80124b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80124c0:	ee17 9a90 	vmov	r9, s15
 80124c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80124cc:	dd41      	ble.n	8012552 <__kernel_rem_pio2f+0x1a2>
 80124ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80124d2:	a908      	add	r1, sp, #32
 80124d4:	f1c5 0e08 	rsb	lr, r5, #8
 80124d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80124dc:	fa46 f00e 	asr.w	r0, r6, lr
 80124e0:	4481      	add	r9, r0
 80124e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80124e6:	1a36      	subs	r6, r6, r0
 80124e8:	f1c5 0007 	rsb	r0, r5, #7
 80124ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80124f0:	4106      	asrs	r6, r0
 80124f2:	2e00      	cmp	r6, #0
 80124f4:	dd3c      	ble.n	8012570 <__kernel_rem_pio2f+0x1c0>
 80124f6:	f04f 0e00 	mov.w	lr, #0
 80124fa:	f109 0901 	add.w	r9, r9, #1
 80124fe:	4670      	mov	r0, lr
 8012500:	4574      	cmp	r4, lr
 8012502:	dc68      	bgt.n	80125d6 <__kernel_rem_pio2f+0x226>
 8012504:	2d00      	cmp	r5, #0
 8012506:	dd03      	ble.n	8012510 <__kernel_rem_pio2f+0x160>
 8012508:	2d01      	cmp	r5, #1
 801250a:	d074      	beq.n	80125f6 <__kernel_rem_pio2f+0x246>
 801250c:	2d02      	cmp	r5, #2
 801250e:	d07d      	beq.n	801260c <__kernel_rem_pio2f+0x25c>
 8012510:	2e02      	cmp	r6, #2
 8012512:	d12d      	bne.n	8012570 <__kernel_rem_pio2f+0x1c0>
 8012514:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012518:	ee30 8a48 	vsub.f32	s16, s0, s16
 801251c:	b340      	cbz	r0, 8012570 <__kernel_rem_pio2f+0x1c0>
 801251e:	4628      	mov	r0, r5
 8012520:	9306      	str	r3, [sp, #24]
 8012522:	f7ff fb8f 	bl	8011c44 <scalbnf>
 8012526:	9b06      	ldr	r3, [sp, #24]
 8012528:	ee38 8a40 	vsub.f32	s16, s16, s0
 801252c:	e020      	b.n	8012570 <__kernel_rem_pio2f+0x1c0>
 801252e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012532:	3e01      	subs	r6, #1
 8012534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801253c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012540:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012544:	ecac 0a01 	vstmia	ip!, {s0}
 8012548:	ed30 0a01 	vldmdb	r0!, {s0}
 801254c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012550:	e79e      	b.n	8012490 <__kernel_rem_pio2f+0xe0>
 8012552:	d105      	bne.n	8012560 <__kernel_rem_pio2f+0x1b0>
 8012554:	1e60      	subs	r0, r4, #1
 8012556:	a908      	add	r1, sp, #32
 8012558:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801255c:	11f6      	asrs	r6, r6, #7
 801255e:	e7c8      	b.n	80124f2 <__kernel_rem_pio2f+0x142>
 8012560:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012564:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256c:	da31      	bge.n	80125d2 <__kernel_rem_pio2f+0x222>
 801256e:	2600      	movs	r6, #0
 8012570:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012578:	f040 8098 	bne.w	80126ac <__kernel_rem_pio2f+0x2fc>
 801257c:	1e60      	subs	r0, r4, #1
 801257e:	2200      	movs	r2, #0
 8012580:	4550      	cmp	r0, sl
 8012582:	da4b      	bge.n	801261c <__kernel_rem_pio2f+0x26c>
 8012584:	2a00      	cmp	r2, #0
 8012586:	d065      	beq.n	8012654 <__kernel_rem_pio2f+0x2a4>
 8012588:	3c01      	subs	r4, #1
 801258a:	ab08      	add	r3, sp, #32
 801258c:	3d08      	subs	r5, #8
 801258e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0f8      	beq.n	8012588 <__kernel_rem_pio2f+0x1d8>
 8012596:	4628      	mov	r0, r5
 8012598:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801259c:	f7ff fb52 	bl	8011c44 <scalbnf>
 80125a0:	1c63      	adds	r3, r4, #1
 80125a2:	aa44      	add	r2, sp, #272	@ 0x110
 80125a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80126a4 <__kernel_rem_pio2f+0x2f4>
 80125a8:	0099      	lsls	r1, r3, #2
 80125aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80125ae:	4623      	mov	r3, r4
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f280 80a9 	bge.w	8012708 <__kernel_rem_pio2f+0x358>
 80125b6:	4623      	mov	r3, r4
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	f2c0 80c7 	blt.w	801274c <__kernel_rem_pio2f+0x39c>
 80125be:	aa44      	add	r2, sp, #272	@ 0x110
 80125c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80125c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801269c <__kernel_rem_pio2f+0x2ec>
 80125c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 80125cc:	2000      	movs	r0, #0
 80125ce:	1ae2      	subs	r2, r4, r3
 80125d0:	e0b1      	b.n	8012736 <__kernel_rem_pio2f+0x386>
 80125d2:	2602      	movs	r6, #2
 80125d4:	e78f      	b.n	80124f6 <__kernel_rem_pio2f+0x146>
 80125d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80125da:	b948      	cbnz	r0, 80125f0 <__kernel_rem_pio2f+0x240>
 80125dc:	b121      	cbz	r1, 80125e8 <__kernel_rem_pio2f+0x238>
 80125de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80125e2:	f842 1c04 	str.w	r1, [r2, #-4]
 80125e6:	2101      	movs	r1, #1
 80125e8:	f10e 0e01 	add.w	lr, lr, #1
 80125ec:	4608      	mov	r0, r1
 80125ee:	e787      	b.n	8012500 <__kernel_rem_pio2f+0x150>
 80125f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80125f4:	e7f5      	b.n	80125e2 <__kernel_rem_pio2f+0x232>
 80125f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80125fa:	aa08      	add	r2, sp, #32
 80125fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012604:	a908      	add	r1, sp, #32
 8012606:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801260a:	e781      	b.n	8012510 <__kernel_rem_pio2f+0x160>
 801260c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012610:	aa08      	add	r2, sp, #32
 8012612:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012616:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801261a:	e7f3      	b.n	8012604 <__kernel_rem_pio2f+0x254>
 801261c:	a908      	add	r1, sp, #32
 801261e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012622:	3801      	subs	r0, #1
 8012624:	430a      	orrs	r2, r1
 8012626:	e7ab      	b.n	8012580 <__kernel_rem_pio2f+0x1d0>
 8012628:	3201      	adds	r2, #1
 801262a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801262e:	2e00      	cmp	r6, #0
 8012630:	d0fa      	beq.n	8012628 <__kernel_rem_pio2f+0x278>
 8012632:	9905      	ldr	r1, [sp, #20]
 8012634:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012638:	eb0d 0001 	add.w	r0, sp, r1
 801263c:	18e6      	adds	r6, r4, r3
 801263e:	a91c      	add	r1, sp, #112	@ 0x70
 8012640:	f104 0c01 	add.w	ip, r4, #1
 8012644:	384c      	subs	r0, #76	@ 0x4c
 8012646:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801264a:	4422      	add	r2, r4
 801264c:	4562      	cmp	r2, ip
 801264e:	da04      	bge.n	801265a <__kernel_rem_pio2f+0x2aa>
 8012650:	4614      	mov	r4, r2
 8012652:	e710      	b.n	8012476 <__kernel_rem_pio2f+0xc6>
 8012654:	9804      	ldr	r0, [sp, #16]
 8012656:	2201      	movs	r2, #1
 8012658:	e7e7      	b.n	801262a <__kernel_rem_pio2f+0x27a>
 801265a:	9903      	ldr	r1, [sp, #12]
 801265c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012660:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012664:	9105      	str	r1, [sp, #20]
 8012666:	ee07 1a90 	vmov	s15, r1
 801266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801266e:	2400      	movs	r4, #0
 8012670:	ece6 7a01 	vstmia	r6!, {s15}
 8012674:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 8012678:	46b1      	mov	r9, r6
 801267a:	455c      	cmp	r4, fp
 801267c:	dd04      	ble.n	8012688 <__kernel_rem_pio2f+0x2d8>
 801267e:	ece0 7a01 	vstmia	r0!, {s15}
 8012682:	f10c 0c01 	add.w	ip, ip, #1
 8012686:	e7e1      	b.n	801264c <__kernel_rem_pio2f+0x29c>
 8012688:	ecfe 6a01 	vldmia	lr!, {s13}
 801268c:	ed39 7a01 	vldmdb	r9!, {s14}
 8012690:	3401      	adds	r4, #1
 8012692:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012696:	e7f0      	b.n	801267a <__kernel_rem_pio2f+0x2ca>
 8012698:	0801306c 	.word	0x0801306c
 801269c:	08013040 	.word	0x08013040
 80126a0:	43800000 	.word	0x43800000
 80126a4:	3b800000 	.word	0x3b800000
 80126a8:	00000000 	.word	0x00000000
 80126ac:	9b02      	ldr	r3, [sp, #8]
 80126ae:	eeb0 0a48 	vmov.f32	s0, s16
 80126b2:	eba3 0008 	sub.w	r0, r3, r8
 80126b6:	f7ff fac5 	bl	8011c44 <scalbnf>
 80126ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80126a0 <__kernel_rem_pio2f+0x2f0>
 80126be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80126c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c6:	db19      	blt.n	80126fc <__kernel_rem_pio2f+0x34c>
 80126c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80126a4 <__kernel_rem_pio2f+0x2f4>
 80126cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80126d0:	aa08      	add	r2, sp, #32
 80126d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126d6:	3508      	adds	r5, #8
 80126d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80126e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80126e8:	ee10 3a10 	vmov	r3, s0
 80126ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80126f0:	ee17 3a90 	vmov	r3, s15
 80126f4:	3401      	adds	r4, #1
 80126f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80126fa:	e74c      	b.n	8012596 <__kernel_rem_pio2f+0x1e6>
 80126fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012700:	aa08      	add	r2, sp, #32
 8012702:	ee10 3a10 	vmov	r3, s0
 8012706:	e7f6      	b.n	80126f6 <__kernel_rem_pio2f+0x346>
 8012708:	a808      	add	r0, sp, #32
 801270a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801270e:	9001      	str	r0, [sp, #4]
 8012710:	ee07 0a90 	vmov	s15, r0
 8012714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012718:	3b01      	subs	r3, #1
 801271a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801271e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012722:	ed62 7a01 	vstmdb	r2!, {s15}
 8012726:	e743      	b.n	80125b0 <__kernel_rem_pio2f+0x200>
 8012728:	ecfc 6a01 	vldmia	ip!, {s13}
 801272c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012730:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012734:	3001      	adds	r0, #1
 8012736:	4550      	cmp	r0, sl
 8012738:	dc01      	bgt.n	801273e <__kernel_rem_pio2f+0x38e>
 801273a:	4290      	cmp	r0, r2
 801273c:	ddf4      	ble.n	8012728 <__kernel_rem_pio2f+0x378>
 801273e:	a858      	add	r0, sp, #352	@ 0x160
 8012740:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012744:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012748:	3b01      	subs	r3, #1
 801274a:	e735      	b.n	80125b8 <__kernel_rem_pio2f+0x208>
 801274c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801274e:	2b02      	cmp	r3, #2
 8012750:	dc09      	bgt.n	8012766 <__kernel_rem_pio2f+0x3b6>
 8012752:	2b00      	cmp	r3, #0
 8012754:	dc27      	bgt.n	80127a6 <__kernel_rem_pio2f+0x3f6>
 8012756:	d040      	beq.n	80127da <__kernel_rem_pio2f+0x42a>
 8012758:	f009 0007 	and.w	r0, r9, #7
 801275c:	b059      	add	sp, #356	@ 0x164
 801275e:	ecbd 8b04 	vpop	{d8-d9}
 8012762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012766:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012768:	2b03      	cmp	r3, #3
 801276a:	d1f5      	bne.n	8012758 <__kernel_rem_pio2f+0x3a8>
 801276c:	aa30      	add	r2, sp, #192	@ 0xc0
 801276e:	1f0b      	subs	r3, r1, #4
 8012770:	4413      	add	r3, r2
 8012772:	461a      	mov	r2, r3
 8012774:	4620      	mov	r0, r4
 8012776:	2800      	cmp	r0, #0
 8012778:	dc50      	bgt.n	801281c <__kernel_rem_pio2f+0x46c>
 801277a:	4622      	mov	r2, r4
 801277c:	2a01      	cmp	r2, #1
 801277e:	dc5d      	bgt.n	801283c <__kernel_rem_pio2f+0x48c>
 8012780:	ab30      	add	r3, sp, #192	@ 0xc0
 8012782:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 8012786:	440b      	add	r3, r1
 8012788:	2c01      	cmp	r4, #1
 801278a:	dc67      	bgt.n	801285c <__kernel_rem_pio2f+0x4ac>
 801278c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012790:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012794:	2e00      	cmp	r6, #0
 8012796:	d167      	bne.n	8012868 <__kernel_rem_pio2f+0x4b8>
 8012798:	edc7 6a00 	vstr	s13, [r7]
 801279c:	ed87 7a01 	vstr	s14, [r7, #4]
 80127a0:	edc7 7a02 	vstr	s15, [r7, #8]
 80127a4:	e7d8      	b.n	8012758 <__kernel_rem_pio2f+0x3a8>
 80127a6:	ab30      	add	r3, sp, #192	@ 0xc0
 80127a8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 80127ac:	440b      	add	r3, r1
 80127ae:	4622      	mov	r2, r4
 80127b0:	2a00      	cmp	r2, #0
 80127b2:	da24      	bge.n	80127fe <__kernel_rem_pio2f+0x44e>
 80127b4:	b34e      	cbz	r6, 801280a <__kernel_rem_pio2f+0x45a>
 80127b6:	eef1 7a47 	vneg.f32	s15, s14
 80127ba:	edc7 7a00 	vstr	s15, [r7]
 80127be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80127c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127c6:	aa31      	add	r2, sp, #196	@ 0xc4
 80127c8:	2301      	movs	r3, #1
 80127ca:	429c      	cmp	r4, r3
 80127cc:	da20      	bge.n	8012810 <__kernel_rem_pio2f+0x460>
 80127ce:	b10e      	cbz	r6, 80127d4 <__kernel_rem_pio2f+0x424>
 80127d0:	eef1 7a67 	vneg.f32	s15, s15
 80127d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80127d8:	e7be      	b.n	8012758 <__kernel_rem_pio2f+0x3a8>
 80127da:	ab30      	add	r3, sp, #192	@ 0xc0
 80127dc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80126a8 <__kernel_rem_pio2f+0x2f8>
 80127e0:	440b      	add	r3, r1
 80127e2:	2c00      	cmp	r4, #0
 80127e4:	da05      	bge.n	80127f2 <__kernel_rem_pio2f+0x442>
 80127e6:	b10e      	cbz	r6, 80127ec <__kernel_rem_pio2f+0x43c>
 80127e8:	eef1 7a67 	vneg.f32	s15, s15
 80127ec:	edc7 7a00 	vstr	s15, [r7]
 80127f0:	e7b2      	b.n	8012758 <__kernel_rem_pio2f+0x3a8>
 80127f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80127f6:	3c01      	subs	r4, #1
 80127f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127fc:	e7f1      	b.n	80127e2 <__kernel_rem_pio2f+0x432>
 80127fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8012802:	3a01      	subs	r2, #1
 8012804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012808:	e7d2      	b.n	80127b0 <__kernel_rem_pio2f+0x400>
 801280a:	eef0 7a47 	vmov.f32	s15, s14
 801280e:	e7d4      	b.n	80127ba <__kernel_rem_pio2f+0x40a>
 8012810:	ecb2 7a01 	vldmia	r2!, {s14}
 8012814:	3301      	adds	r3, #1
 8012816:	ee77 7a87 	vadd.f32	s15, s15, s14
 801281a:	e7d6      	b.n	80127ca <__kernel_rem_pio2f+0x41a>
 801281c:	ed72 7a01 	vldmdb	r2!, {s15}
 8012820:	edd2 6a01 	vldr	s13, [r2, #4]
 8012824:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012828:	3801      	subs	r0, #1
 801282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801282e:	ed82 7a00 	vstr	s14, [r2]
 8012832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012836:	edc2 7a01 	vstr	s15, [r2, #4]
 801283a:	e79c      	b.n	8012776 <__kernel_rem_pio2f+0x3c6>
 801283c:	ed73 7a01 	vldmdb	r3!, {s15}
 8012840:	edd3 6a01 	vldr	s13, [r3, #4]
 8012844:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012848:	3a01      	subs	r2, #1
 801284a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801284e:	ed83 7a00 	vstr	s14, [r3]
 8012852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012856:	edc3 7a01 	vstr	s15, [r3, #4]
 801285a:	e78f      	b.n	801277c <__kernel_rem_pio2f+0x3cc>
 801285c:	ed33 7a01 	vldmdb	r3!, {s14}
 8012860:	3c01      	subs	r4, #1
 8012862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012866:	e78f      	b.n	8012788 <__kernel_rem_pio2f+0x3d8>
 8012868:	eef1 6a66 	vneg.f32	s13, s13
 801286c:	eeb1 7a47 	vneg.f32	s14, s14
 8012870:	edc7 6a00 	vstr	s13, [r7]
 8012874:	ed87 7a01 	vstr	s14, [r7, #4]
 8012878:	eef1 7a67 	vneg.f32	s15, s15
 801287c:	e790      	b.n	80127a0 <__kernel_rem_pio2f+0x3f0>
 801287e:	bf00      	nop

08012880 <floor>:
 8012880:	ec51 0b10 	vmov	r0, r1, d0
 8012884:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801288c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012890:	2e13      	cmp	r6, #19
 8012892:	460c      	mov	r4, r1
 8012894:	4605      	mov	r5, r0
 8012896:	4680      	mov	r8, r0
 8012898:	dc34      	bgt.n	8012904 <floor+0x84>
 801289a:	2e00      	cmp	r6, #0
 801289c:	da17      	bge.n	80128ce <floor+0x4e>
 801289e:	a332      	add	r3, pc, #200	@ (adr r3, 8012968 <floor+0xe8>)
 80128a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a4:	f7ed fcbe 	bl	8000224 <__adddf3>
 80128a8:	2200      	movs	r2, #0
 80128aa:	2300      	movs	r3, #0
 80128ac:	f7ee f900 	bl	8000ab0 <__aeabi_dcmpgt>
 80128b0:	b150      	cbz	r0, 80128c8 <floor+0x48>
 80128b2:	2c00      	cmp	r4, #0
 80128b4:	da55      	bge.n	8012962 <floor+0xe2>
 80128b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80128ba:	432c      	orrs	r4, r5
 80128bc:	2500      	movs	r5, #0
 80128be:	42ac      	cmp	r4, r5
 80128c0:	4c2b      	ldr	r4, [pc, #172]	@ (8012970 <floor+0xf0>)
 80128c2:	bf08      	it	eq
 80128c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80128c8:	4621      	mov	r1, r4
 80128ca:	4628      	mov	r0, r5
 80128cc:	e023      	b.n	8012916 <floor+0x96>
 80128ce:	4f29      	ldr	r7, [pc, #164]	@ (8012974 <floor+0xf4>)
 80128d0:	4137      	asrs	r7, r6
 80128d2:	ea01 0307 	and.w	r3, r1, r7
 80128d6:	4303      	orrs	r3, r0
 80128d8:	d01d      	beq.n	8012916 <floor+0x96>
 80128da:	a323      	add	r3, pc, #140	@ (adr r3, 8012968 <floor+0xe8>)
 80128dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e0:	f7ed fca0 	bl	8000224 <__adddf3>
 80128e4:	2200      	movs	r2, #0
 80128e6:	2300      	movs	r3, #0
 80128e8:	f7ee f8e2 	bl	8000ab0 <__aeabi_dcmpgt>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d0eb      	beq.n	80128c8 <floor+0x48>
 80128f0:	2c00      	cmp	r4, #0
 80128f2:	bfbe      	ittt	lt
 80128f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80128f8:	4133      	asrlt	r3, r6
 80128fa:	18e4      	addlt	r4, r4, r3
 80128fc:	ea24 0407 	bic.w	r4, r4, r7
 8012900:	2500      	movs	r5, #0
 8012902:	e7e1      	b.n	80128c8 <floor+0x48>
 8012904:	2e33      	cmp	r6, #51	@ 0x33
 8012906:	dd0a      	ble.n	801291e <floor+0x9e>
 8012908:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801290c:	d103      	bne.n	8012916 <floor+0x96>
 801290e:	4602      	mov	r2, r0
 8012910:	460b      	mov	r3, r1
 8012912:	f7ed fc87 	bl	8000224 <__adddf3>
 8012916:	ec41 0b10 	vmov	d0, r0, r1
 801291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012922:	f04f 37ff 	mov.w	r7, #4294967295
 8012926:	40df      	lsrs	r7, r3
 8012928:	4207      	tst	r7, r0
 801292a:	d0f4      	beq.n	8012916 <floor+0x96>
 801292c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012968 <floor+0xe8>)
 801292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012932:	f7ed fc77 	bl	8000224 <__adddf3>
 8012936:	2200      	movs	r2, #0
 8012938:	2300      	movs	r3, #0
 801293a:	f7ee f8b9 	bl	8000ab0 <__aeabi_dcmpgt>
 801293e:	2800      	cmp	r0, #0
 8012940:	d0c2      	beq.n	80128c8 <floor+0x48>
 8012942:	2c00      	cmp	r4, #0
 8012944:	da0a      	bge.n	801295c <floor+0xdc>
 8012946:	2e14      	cmp	r6, #20
 8012948:	d101      	bne.n	801294e <floor+0xce>
 801294a:	3401      	adds	r4, #1
 801294c:	e006      	b.n	801295c <floor+0xdc>
 801294e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012952:	2301      	movs	r3, #1
 8012954:	40b3      	lsls	r3, r6
 8012956:	441d      	add	r5, r3
 8012958:	4545      	cmp	r5, r8
 801295a:	d3f6      	bcc.n	801294a <floor+0xca>
 801295c:	ea25 0507 	bic.w	r5, r5, r7
 8012960:	e7b2      	b.n	80128c8 <floor+0x48>
 8012962:	2500      	movs	r5, #0
 8012964:	462c      	mov	r4, r5
 8012966:	e7af      	b.n	80128c8 <floor+0x48>
 8012968:	8800759c 	.word	0x8800759c
 801296c:	7e37e43c 	.word	0x7e37e43c
 8012970:	bff00000 	.word	0xbff00000
 8012974:	000fffff 	.word	0x000fffff

08012978 <floorf>:
 8012978:	ee10 3a10 	vmov	r3, s0
 801297c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012980:	3a7f      	subs	r2, #127	@ 0x7f
 8012982:	2a16      	cmp	r2, #22
 8012984:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012988:	dc2b      	bgt.n	80129e2 <floorf+0x6a>
 801298a:	2a00      	cmp	r2, #0
 801298c:	da12      	bge.n	80129b4 <floorf+0x3c>
 801298e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80129f4 <floorf+0x7c>
 8012992:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012996:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299e:	dd06      	ble.n	80129ae <floorf+0x36>
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	da24      	bge.n	80129ee <floorf+0x76>
 80129a4:	2900      	cmp	r1, #0
 80129a6:	4b14      	ldr	r3, [pc, #80]	@ (80129f8 <floorf+0x80>)
 80129a8:	bf08      	it	eq
 80129aa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80129ae:	ee00 3a10 	vmov	s0, r3
 80129b2:	4770      	bx	lr
 80129b4:	4911      	ldr	r1, [pc, #68]	@ (80129fc <floorf+0x84>)
 80129b6:	4111      	asrs	r1, r2
 80129b8:	420b      	tst	r3, r1
 80129ba:	d0fa      	beq.n	80129b2 <floorf+0x3a>
 80129bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80129f4 <floorf+0x7c>
 80129c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80129c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80129c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129cc:	ddef      	ble.n	80129ae <floorf+0x36>
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	bfbe      	ittt	lt
 80129d2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80129d6:	fa40 f202 	asrlt.w	r2, r0, r2
 80129da:	189b      	addlt	r3, r3, r2
 80129dc:	ea23 0301 	bic.w	r3, r3, r1
 80129e0:	e7e5      	b.n	80129ae <floorf+0x36>
 80129e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80129e6:	d3e4      	bcc.n	80129b2 <floorf+0x3a>
 80129e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80129ec:	4770      	bx	lr
 80129ee:	2300      	movs	r3, #0
 80129f0:	e7dd      	b.n	80129ae <floorf+0x36>
 80129f2:	bf00      	nop
 80129f4:	7149f2ca 	.word	0x7149f2ca
 80129f8:	bf800000 	.word	0xbf800000
 80129fc:	007fffff 	.word	0x007fffff

08012a00 <_init>:
 8012a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a02:	bf00      	nop
 8012a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a06:	bc08      	pop	{r3}
 8012a08:	469e      	mov	lr, r3
 8012a0a:	4770      	bx	lr

08012a0c <_fini>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	bf00      	nop
 8012a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a12:	bc08      	pop	{r3}
 8012a14:	469e      	mov	lr, r3
 8012a16:	4770      	bx	lr
