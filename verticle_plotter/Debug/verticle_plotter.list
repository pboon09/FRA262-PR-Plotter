
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012670  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08012848  08012848  00013848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ea8  08012ea8  00014190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ea8  08012ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012eb0  08012eb0  00014190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012eb0  08012eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012eb4  08012eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08012eb8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002174  20000190  08013048  00014190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002304  08013048  00014304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c027  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000558c  00000000  00000000  000401e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00045778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001646  00000000  00000000  00047430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db72  00000000  00000000  00048a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4c0  00000000  00000000  000765e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119cea  00000000  00000000  000a1aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bb792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008310  00000000  00000000  001bb7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c3ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08012830 	.word	0x08012830

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08012830 	.word	0x08012830

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 f846 	bl	800a070 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f008 f92f 	bl	8009254 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe18 	bl	8001d70 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ffd7 	bl	8003358 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8d3 	bl	80035a8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f8ca 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f8b6 	bl	80035a8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8ad 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f89b 	bl	80035a8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f88e 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f009 fd18 	bl	800aefc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f865 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f009 fcfb 	bl	800aefc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f848 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f009 fce0 	bl	800aefc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f829 	bl	80035a8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.slide_rail_mass = 4.24,
    .c = -24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb74 	bl	8001d70 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	ed2d 8b02 	vpush	{d8}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80016d0:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s - 0.05);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e8:	ee17 0a90 	vmov	r0, s15
 80016ec:	f7fe fef8 	bl	80004e0 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f7fe fef3 	bl	80004e0 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ec43 2b10 	vmov	d0, r2, r3
 8001702:	f00f f9e1 	bl	8010ac8 <sin>
 8001706:	ec53 2b10 	vmov	r2, r3, d0
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe ff3f 	bl	8000590 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	461d      	mov	r5, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe fee0 	bl	80004e0 <__aeabi_f2d>
 8001720:	a356      	add	r3, pc, #344	@ (adr r3, 800187c <REVOLUTE_MOTOR_DFD_Compute+0x1bc>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe fd7b 	bl	8000220 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe ff2d 	bl	8000590 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff fa09 	bl	8000b54 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	ed93 7a02 	vldr	s14, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175a:	ee17 0a90 	vmov	r0, s15
 800175e:	f7fe febf 	bl	80004e0 <__aeabi_f2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7fe feba 	bl	80004e0 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b10 	vmov	d0, r2, r3
 8001774:	f00f f9a8 	bl	8010ac8 <sin>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ff06 	bl	8000590 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fea4 	bl	80004e0 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fef6 	bl	8000590 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9d2 	bl	8000b54 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017c4:	f7ff f80e 	bl	80007e4 <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9c0 	bl	8000b54 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + 0) * transfer_function;
 80017d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80017dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001878 <REVOLUTE_MOTOR_DFD_Compute+0x1b8>
 80017e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9aa 	bl	8000b54 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb1 8a67 	vneg.f32	s16, s15
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f99d 	bl	8000b54 <__aeabi_d2f>
 800181a:	4604      	mov	r4, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f994 	bl	8000b54 <__aeabi_d2f>
 800182c:	4603      	mov	r3, r0
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef1 8a67 	vneg.f32	s17, s15
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f987 	bl	8000b54 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	ee02 3a10 	vmov	s4, r3
 800184c:	eef0 1a68 	vmov.f32	s3, s17
 8001850:	ee01 4a10 	vmov	s2, r4
 8001854:	eef0 0a48 	vmov.f32	s1, s16
 8001858:	ed97 0a04 	vldr	s0, [r7, #16]
 800185c:	f000 fa88 	bl	8001d70 <mapf>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
}
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	ecbd 8b02 	vpop	{d8}
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	9999999a 	.word	0x9999999a
 8001880:	3fa99999 	.word	0x3fa99999

08001884 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	ed2d 8b02 	vpush	{d8}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c0:	f7fe fe66 	bl	8000590 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018dc:	f7fe fe58 	bl	8000590 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fc9c 	bl	8000224 <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018fc:	f7fe ff72 	bl	80007e4 <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001910:	ed97 7a00 	vldr	s14, [r7]
 8001914:	edd7 7a03 	vldr	s15, [r7, #12]
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f912 	bl	8000b54 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb1 8a67 	vneg.f32	s16, s15
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f905 	bl	8000b54 <__aeabi_d2f>
 800194a:	4604      	mov	r4, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f8fc 	bl	8000b54 <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef1 8a67 	vneg.f32	s17, s15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8ef 	bl	8000b54 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	ee02 3a10 	vmov	s4, r3
 800197c:	eef0 1a68 	vmov.f32	s3, s17
 8001980:	ee01 4a10 	vmov	s2, r4
 8001984:	eef0 0a48 	vmov.f32	s1, s16
 8001988:	ed97 0a02 	vldr	s0, [r7, #8]
 800198c:	f000 f9f0 	bl	8001d70 <mapf>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
}
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	ecbd 8b02 	vpop	{d8}
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}

080019a2 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019c6:	b5b0      	push	{r4, r5, r7, lr}
 80019c8:	ed2d 8b02 	vpush	{d8}
 80019cc:	b088      	sub	sp, #32
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d6:	edc7 0a01 	vstr	s1, [r7, #4]
 80019da:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fd73 	bl	80004e0 <__aeabi_f2d>
 80019fa:	4604      	mov	r4, r0
 80019fc:	460d      	mov	r5, r1
 80019fe:	68b8      	ldr	r0, [r7, #8]
 8001a00:	f7fe fd6e 	bl	80004e0 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f00f f808 	bl	8010a20 <cos>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fdba 	bl	8000590 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f896 	bl	8000b54 <__aeabi_d2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	ed97 7a00 	vldr	s14, [r7]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd3e 	bl	80004e0 <__aeabi_f2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fd90 	bl	8000590 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a80:	f7fe feb0 	bl	80007e4 <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f862 	bl	8000b54 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f84c 	bl	8000b54 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb1 8a67 	vneg.f32	s16, s15
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f83f 	bl	8000b54 <__aeabi_d2f>
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f836 	bl	8000b54 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef1 8a67 	vneg.f32	s17, s15
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f829 	bl	8000b54 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	ee02 3a10 	vmov	s4, r3
 8001b08:	eef0 1a68 	vmov.f32	s3, s17
 8001b0c:	ee01 4a10 	vmov	s2, r4
 8001b10:	eef0 0a48 	vmov.f32	s1, s16
 8001b14:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b18:	f000 f92a 	bl	8001d70 <mapf>
 8001b1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b20:	eeb0 0a67 	vmov.f32	s0, s15
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	ecbd 8b02 	vpop	{d8}
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b30 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	ed2d 8b02 	vpush	{d8}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	edc7 0a00 	vstr	s1, [r7]
 8001b46:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <FIR_init+0x2a>
        numTaps += 1;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	3301      	adds	r3, #1
 8001b58:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00e fe4e 	bl	801080c <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00e fe45 	bl	801080c <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e0 	beq.w	8001d54 <FIR_init+0x224>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80db 	beq.w	8001d54 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ba2:	e00a      	b.n	8001bba <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a00 	vldr	s14, [r7]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bde:	e077      	b.n	8001cd0 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
 8001c04:	e02c      	b.n	8001c60 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	8afb      	ldrh	r3, [r7, #22]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d60 <FIR_init+0x230>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f00f f820 	bl	8010c74 <sinf>
 8001c34:	eef0 6a40 	vmov.f32	s13, s0
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d64 <FIR_init+0x234>
 8001c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ed93 8a00 	vldr	s16, [r3]
 8001c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d60 <FIR_init+0x230>
 8001c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	eeb0 0a66 	vmov.f32	s0, s13
 8001c98:	f00e ffa8 	bl	8010bec <cosf>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d68 <FIR_init+0x238>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d6c <FIR_init+0x23c>
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	db82      	blt.n	8001be0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	83fb      	strh	r3, [r7, #30]
 8001ce4:	e00f      	b.n	8001d06 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3eb      	bcc.n	8001ce6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d01b      	beq.n	8001d54 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e014      	b.n	8001d4c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	8bbb      	ldrh	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	8bba      	ldrh	r2, [r7, #28]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e6      	bcc.n	8001d22 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40c90fdb 	.word	0x40c90fdb
 8001d64:	40490fdb 	.word	0x40490fdb
 8001d68:	3eeb851f 	.word	0x3eeb851f
 8001d6c:	3f0a3d71 	.word	0x3f0a3d71

08001d70 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d7e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d82:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d86:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d96:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da6:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001daa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	ee07 3a90 	vmov	s15, r3
}
 8001dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd4:	3724      	adds	r7, #36	@ 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001de4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <modbus_1t5_Timeout+0x3c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <modbus_1t5_Timeout+0x3c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <modbus_1t5_Timeout+0x3c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200001ac 	.word	0x200001ac

08001e20 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <modbus_3t5_Timeout+0x1c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	755a      	strb	r2, [r3, #21]

}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	200001ac 	.word	0x200001ac

08001e40 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f00c ff25 	bl	800ec98 <HAL_UART_GetError>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d101      	bne.n	8001e58 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e54:	f7ff ffc4 	bl	8001de0 <modbus_1t5_Timeout>

	}
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <Modbus_init+0xc4>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e74:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <Modbus_init+0xc4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <Modbus_init+0xc4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <Modbus_init+0xc4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <Modbus_init+0xc4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	7e3a      	ldrb	r2, [r7, #24]
 8001e92:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e94:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <Modbus_init+0xc4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <Modbus_init+0xc8>)
 8001ea2:	210e      	movs	r1, #14
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00b f99b 	bl	800d1e0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2110      	movs	r1, #16
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00c fe9b 	bl	800ebec <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00c feb2 	bl	800ec24 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <Modbus_init+0xcc>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00c f9d9 	bl	800e280 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <Modbus_init+0xc4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <Modbus_init+0xc4>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <Modbus_init+0xc4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ee0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001eec:	4619      	mov	r1, r3
 8001eee:	f00c fa81 	bl	800e3f4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <Modbus_init+0xc4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10c      	bne.n	8001f1c <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <Modbus_init+0xc4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00a f945 	bl	800c198 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <Modbus_init+0xc4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00a fb94 	bl	800c644 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200001ac 	.word	0x200001ac
 8001f28:	08001e21 	.word	0x08001e21
 8001f2c:	08001e41 	.word	0x08001e41

08001f30 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f38:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f3c:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f40:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f44:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f48:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f4c:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f50:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f54:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f58:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	6a3a      	ldr	r2, [r7, #32]
 8001f60:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	2210      	movs	r2, #16
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00e fcec 	bl	8010978 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	3310      	adds	r3, #16
 8001fa4:	2240      	movs	r2, #64	@ 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00e fce5 	bl	8010978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fb2:	e00c      	b.n	8001fce <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a79      	ldr	r2, [pc, #484]	@ (80021ac <MotorKalman_Init+0x27c>)
 8001fc6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fca:	3301      	adds	r3, #1
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	ddef      	ble.n	8001fb4 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00e fcca 	bl	8010978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe8:	e00d      	b.n	8002006 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff4:	33be      	adds	r3, #190	@ 0xbe
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ffe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	3301      	adds	r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	2b03      	cmp	r3, #3
 800200a:	ddee      	ble.n	8001fea <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	33f0      	adds	r3, #240	@ 0xf0
 8002010:	2210      	movs	r2, #16
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00e fcaf 	bl	8010978 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002020:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800202a:	2210      	movs	r2, #16
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f00e fca2 	bl	8010978 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800203a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 800203e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002044:	f000 f922 	bl	800228c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002048:	ed97 0a00 	vldr	s0, [r7]
 800204c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204e:	f000 f94d 	bl	80022ec <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	2201      	movs	r2, #1
 800205c:	2104      	movs	r1, #4
 800205e:	f00d ff1a 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	3310      	adds	r3, #16
 800206c:	2204      	movs	r2, #4
 800206e:	2104      	movs	r1, #4
 8002070:	f00d ff11 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002080:	2204      	movs	r2, #4
 8002082:	2104      	movs	r1, #4
 8002084:	f00d ff07 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002094:	2201      	movs	r2, #1
 8002096:	2101      	movs	r1, #1
 8002098:	f00d fefd 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80020a8:	2201      	movs	r2, #1
 80020aa:	2101      	movs	r1, #1
 80020ac:	f00d fef3 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80020bc:	2201      	movs	r2, #1
 80020be:	2101      	movs	r1, #1
 80020c0:	f00d fee9 	bl	800fe96 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020d0:	2204      	movs	r2, #4
 80020d2:	2104      	movs	r1, #4
 80020d4:	f00d fedf 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020e4:	2201      	movs	r2, #1
 80020e6:	2104      	movs	r1, #4
 80020e8:	f00d fed5 	bl	800fe96 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f00d fecb 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 800210c:	2204      	movs	r2, #4
 800210e:	2104      	movs	r1, #4
 8002110:	f00d fec1 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002120:	2204      	movs	r2, #4
 8002122:	2101      	movs	r1, #1
 8002124:	f00d feb7 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002134:	2201      	movs	r2, #1
 8002136:	2101      	movs	r1, #1
 8002138:	f00d fead 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002148:	2201      	movs	r2, #1
 800214a:	2104      	movs	r1, #4
 800214c:	f00d fea3 	bl	800fe96 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002150:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002152:	f000 f82d 	bl	80021b0 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	3390      	adds	r3, #144	@ 0x90
 8002160:	2204      	movs	r2, #4
 8002162:	2104      	movs	r1, #4
 8002164:	f00d fe97 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	33e0      	adds	r3, #224	@ 0xe0
 8002172:	2201      	movs	r2, #1
 8002174:	2104      	movs	r1, #4
 8002176:	f00d fe8e 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002186:	2204      	movs	r2, #4
 8002188:	2104      	movs	r1, #4
 800218a:	f00d fe84 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800219a:	2201      	movs	r2, #1
 800219c:	2104      	movs	r1, #4
 800219e:	f00d fe7a 	bl	800fe96 <arm_mat_init_f32>
}
 80021a2:	bf00      	nop
 80021a4:	3730      	adds	r7, #48	@ 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	42c80000 	.word	0x42c80000

080021b0 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	eeb0 3a64 	vmov.f32	s6, s9
 80021f4:	eef0 2a45 	vmov.f32	s5, s10
 80021f8:	eeb0 2a65 	vmov.f32	s4, s11
 80021fc:	eef0 1a46 	vmov.f32	s3, s12
 8002200:	eeb0 1a66 	vmov.f32	s2, s13
 8002204:	eef0 0a47 	vmov.f32	s1, s14
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	f001 f83c 	bl	8003288 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002216:	2240      	movs	r2, #64	@ 0x40
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f00e fbac 	bl	8010978 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002226:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002284 <MotorKalman_DiscretizeModel+0xd4>
 800222a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800225a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002288 <MotorKalman_DiscretizeModel+0xd8>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800226e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002284 <MotorKalman_DiscretizeModel+0xd4>
 8002272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	3c23d70a 	.word	0x3c23d70a
 8002288:	3dcccccd 	.word	0x3dcccccd

0800228c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00e fb68 	bl	8010978 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80022a8:	edd7 7a00 	vldr	s15, [r7]
 80022ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80022c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	d107      	bne.n	80022de <MotorKalman_SetProcessNoise+0x52>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	d002      	beq.n	80022e4 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff66 	bl	80021b0 <MotorKalman_DiscretizeModel>
    }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022f8:	ed97 0a00 	vldr	s0, [r7]
 80022fc:	f00e fc58 	bl	8010bb0 <sqrtf>
 8002300:	eef0 7a40 	vmov.f32	s15, s0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800231a:	b580      	push	{r7, lr}
 800231c:	b0b2      	sub	sp, #200	@ 0xc8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800232e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002342:	e041      	b.n	80023c8 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	33c8      	adds	r3, #200	@ 0xc8
 800234c:	443b      	add	r3, r7
 800234e:	3b3c      	subs	r3, #60	@ 0x3c
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800235c:	e02b      	b.n	80023b6 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800235e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	33c8      	adds	r3, #200	@ 0xc8
 8002366:	443b      	add	r3, r7
 8002368:	3b3c      	subs	r3, #60	@ 0x3c
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	009a      	lsls	r2, r3, #2
 8002374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002378:	4413      	add	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	3324      	adds	r3, #36	@ 0x24
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	edd3 6a00 	vldr	s13, [r3]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	33c8      	adds	r3, #200	@ 0xc8
 80023a4:	443b      	add	r3, r7
 80023a6:	3b3c      	subs	r3, #60	@ 0x3c
 80023a8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023b0:	3301      	adds	r3, #1
 80023b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	ddcf      	ble.n	800235e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c2:	3301      	adds	r3, #1
 80023c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	ddb9      	ble.n	8002344 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023d6:	e021      	b.n	800241c <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80023d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	33c8      	adds	r3, #200	@ 0xc8
 80023e0:	443b      	add	r3, r7
 80023e2:	3b3c      	subs	r3, #60	@ 0x3c
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ee:	3338      	adds	r3, #56	@ 0x38
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	edd3 6a00 	vldr	s13, [r3]
 80023f8:	edd7 7a00 	vldr	s15, [r7]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002416:	3301      	adds	r3, #1
 8002418:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800241c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002420:	2b03      	cmp	r3, #3
 8002422:	ddd9      	ble.n	80023d8 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002424:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f00e faa3 	bl	8010978 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f00e fa9c 	bl	8010978 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002446:	e05f      	b.n	8002508 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800244e:	e052      	b.n	80024f6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	33c8      	adds	r3, #200	@ 0xc8
 8002460:	443b      	add	r3, r7
 8002462:	3b7c      	subs	r3, #124	@ 0x7c
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002470:	e038      	b.n	80024e4 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	33c8      	adds	r3, #200	@ 0xc8
 8002482:	443b      	add	r3, r7
 8002484:	3b7c      	subs	r3, #124	@ 0x7c
 8002486:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800248a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800248e:	009a      	lsls	r2, r3, #2
 8002490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002494:	4413      	add	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	3324      	adds	r3, #36	@ 0x24
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	edd3 6a00 	vldr	s13, [r3]
 80024a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024a6:	009a      	lsls	r2, r3, #2
 80024a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ac:	4413      	add	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024c8:	4413      	add	r3, r2
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	33c8      	adds	r3, #200	@ 0xc8
 80024d2:	443b      	add	r3, r7
 80024d4:	3b7c      	subs	r3, #124	@ 0x7c
 80024d6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024de:	3301      	adds	r3, #1
 80024e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	ddc2      	ble.n	8002472 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024f0:	3301      	adds	r3, #1
 80024f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	dda8      	ble.n	8002450 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002502:	3301      	adds	r3, #1
 8002504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800250c:	2b03      	cmp	r3, #3
 800250e:	dd9b      	ble.n	8002448 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002516:	e05f      	b.n	80025d8 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800251e:	e052      	b.n	80025c6 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	33c8      	adds	r3, #200	@ 0xc8
 8002530:	443b      	add	r3, r7
 8002532:	3bbc      	subs	r3, #188	@ 0xbc
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002540:	e038      	b.n	80025b4 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	33c8      	adds	r3, #200	@ 0xc8
 8002552:	443b      	add	r3, r7
 8002554:	3bbc      	subs	r3, #188	@ 0xbc
 8002556:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800255a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800255e:	009a      	lsls	r2, r3, #2
 8002560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	33c8      	adds	r3, #200	@ 0xc8
 800256a:	443b      	add	r3, r7
 800256c:	3b7c      	subs	r3, #124	@ 0x7c
 800256e:	edd3 6a00 	vldr	s13, [r3]
 8002572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800257c:	4413      	add	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	3324      	adds	r3, #36	@ 0x24
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800258e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002598:	4413      	add	r3, r2
 800259a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	33c8      	adds	r3, #200	@ 0xc8
 80025a2:	443b      	add	r3, r7
 80025a4:	3bbc      	subs	r3, #188	@ 0xbc
 80025a6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	ddc2      	ble.n	8002542 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	dda8      	ble.n	8002520 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d2:	3301      	adds	r3, #1
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025dc:	2b03      	cmp	r3, #3
 80025de:	dd9b      	ble.n	8002518 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025e6:	e037      	b.n	8002658 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ee:	e02a      	b.n	8002646 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	33c8      	adds	r3, #200	@ 0xc8
 8002600:	443b      	add	r3, r7
 8002602:	3bbc      	subs	r3, #188	@ 0xbc
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002612:	4413      	add	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	3354      	adds	r3, #84	@ 0x54
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800262a:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800263c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002640:	3301      	adds	r3, #1
 8002642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002646:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800264a:	2b03      	cmp	r3, #3
 800264c:	ddd0      	ble.n	80025f0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800264e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002652:	3301      	adds	r3, #1
 8002654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800265c:	2b03      	cmp	r3, #3
 800265e:	ddc3      	ble.n	80025e8 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	2104      	movs	r1, #4
 8002694:	f00d fbff 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3310      	adds	r3, #16
 80026a2:	2204      	movs	r2, #4
 80026a4:	2104      	movs	r1, #4
 80026a6:	f00d fbf6 	bl	800fe96 <arm_mat_init_f32>
}
 80026aa:	bf00      	nop
 80026ac:	37c8      	adds	r7, #200	@ 0xc8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0d0      	sub	sp, #320	@ 0x140
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c2:	6018      	str	r0, [r3, #0]
 80026c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026cc:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80026d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80026de:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800270c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002716:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800271a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	edd3 7a01 	vldr	s15, [r3, #4]
 8002724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002728:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 800272c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002730:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800273a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800273e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	edd3 7a02 	vldr	s15, [r3, #8]
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002750:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002754:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 800275e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002762:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	edd3 7a03 	vldr	s15, [r3, #12]
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002778:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800277c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002790:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027a4:	e04d      	b.n	8002842 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 80027a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027b0:	443b      	add	r3, r7
 80027b2:	3b58      	subs	r3, #88	@ 0x58
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027c0:	e036      	b.n	8002830 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80027c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027cc:	443b      	add	r3, r7
 80027ce:	3b58      	subs	r3, #88	@ 0x58
 80027d0:	ed93 7a00 	vldr	s14, [r3]
 80027d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e2:	333c      	adds	r3, #60	@ 0x3c
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	edd3 6a00 	vldr	s13, [r3]
 80027ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027f0:	009a      	lsls	r2, r3, #2
 80027f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027f6:	4413      	add	r3, r2
 80027f8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027fc:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	3304      	adds	r3, #4
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002814:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800281e:	443b      	add	r3, r7
 8002820:	3b58      	subs	r3, #88	@ 0x58
 8002822:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002826:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800282a:	3301      	adds	r3, #1
 800282c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002830:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002834:	2b03      	cmp	r3, #3
 8002836:	ddc4      	ble.n	80027c2 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002838:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800283c:	3301      	adds	r3, #1
 800283e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002842:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002846:	2b03      	cmp	r3, #3
 8002848:	ddad      	ble.n	80027a6 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002858:	e021      	b.n	800289e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800285a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002864:	443b      	add	r3, r7
 8002866:	3b58      	subs	r3, #88	@ 0x58
 8002868:	ed93 7a00 	vldr	s14, [r3]
 800286c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002870:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800287a:	333c      	adds	r3, #60	@ 0x3c
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002888:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002894:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002898:	3301      	adds	r3, #1
 800289a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800289e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	ddd9      	ble.n	800285a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 80028a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80028b4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80028b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028bc:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80028c0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80028d4:	e04d      	b.n	8002972 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80028d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028e0:	443b      	add	r3, r7
 80028e2:	3b68      	subs	r3, #104	@ 0x68
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028f0:	e036      	b.n	8002960 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fc:	443b      	add	r3, r7
 80028fe:	3b68      	subs	r3, #104	@ 0x68
 8002900:	ed93 7a00 	vldr	s14, [r3]
 8002904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800290e:	4413      	add	r3, r2
 8002910:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002914:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	3304      	adds	r3, #4
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	edd3 6a00 	vldr	s13, [r3]
 8002924:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002928:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002932:	333c      	adds	r3, #60	@ 0x3c
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800294e:	443b      	add	r3, r7
 8002950:	3b68      	subs	r3, #104	@ 0x68
 8002952:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800295a:	3301      	adds	r3, #1
 800295c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002960:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002964:	2b03      	cmp	r3, #3
 8002966:	ddc4      	ble.n	80028f2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002968:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800296c:	3301      	adds	r3, #1
 800296e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002972:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002976:	2b03      	cmp	r3, #3
 8002978:	ddad      	ble.n	80028d6 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800297a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800298e:	e01a      	b.n	80029c6 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002990:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800299a:	443b      	add	r3, r7
 800299c:	3b68      	subs	r3, #104	@ 0x68
 800299e:	edd3 6a00 	vldr	s13, [r3]
 80029a2:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80029a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029b4:	443b      	add	r3, r7
 80029b6:	3b78      	subs	r3, #120	@ 0x78
 80029b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029c0:	3301      	adds	r3, #1
 80029c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	dde0      	ble.n	8002990 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029d4:	e029      	b.n	8002a2a <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 80029d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	ed93 7a00 	vldr	s14, [r3]
 80029ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029f6:	443b      	add	r3, r7
 80029f8:	3b78      	subs	r3, #120	@ 0x78
 80029fa:	edd3 6a00 	vldr	s13, [r3]
 80029fe:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a24:	3301      	adds	r3, #1
 8002a26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	ddd1      	ble.n	80029d6 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a32:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a36:	2240      	movs	r2, #64	@ 0x40
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00d ff9c 	bl	8010978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a46:	e035      	b.n	8002ab4 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a4e:	e028      	b.n	8002aa2 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a5a:	443b      	add	r3, r7
 8002a5c:	3b78      	subs	r3, #120	@ 0x78
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a70:	333c      	adds	r3, #60	@ 0x3c
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a84:	4413      	add	r3, r2
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a90:	443b      	add	r3, r7
 8002a92:	3bb8      	subs	r3, #184	@ 0xb8
 8002a94:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002aa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	ddd2      	ble.n	8002a50 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	ddc5      	ble.n	8002a48 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002abc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ac0:	2240      	movs	r2, #64	@ 0x40
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00d ff57 	bl	8010978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002ad0:	e038      	b.n	8002b44 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ad8:	e02b      	b.n	8002b32 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002ada:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ade:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d102      	bne.n	8002aec <MotorKalman_Update+0x438>
 8002ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002aea:	e001      	b.n	8002af0 <MotorKalman_Update+0x43c>
 8002aec:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002d08 <MotorKalman_Update+0x654>
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af4:	009a      	lsls	r2, r3, #2
 8002af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b02:	443b      	add	r3, r7
 8002b04:	3bb8      	subs	r3, #184	@ 0xb8
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0e:	009a      	lsls	r2, r3, #2
 8002b10:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b14:	4413      	add	r3, r2
 8002b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b20:	443b      	add	r3, r7
 8002b22:	3bf8      	subs	r3, #248	@ 0xf8
 8002b24:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b28:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	ddcf      	ble.n	8002ada <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	ddc2      	ble.n	8002ad2 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002b4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f103 0110 	add.w	r1, r3, #16
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2240      	movs	r2, #64	@ 0x40
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00d ff4d 	bl	8010a00 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b6c:	e06e      	b.n	8002c4c <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b74:	e061      	b.n	8002c3a <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b80:	4413      	add	r3, r2
 8002b82:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b86:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b9e:	e043      	b.n	8002c28 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ba4:	009a      	lsls	r2, r3, #2
 8002ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002baa:	4413      	add	r3, r2
 8002bac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bb0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bc4:	009a      	lsls	r2, r3, #2
 8002bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bd2:	443b      	add	r3, r7
 8002bd4:	3bf8      	subs	r3, #248	@ 0xf8
 8002bd6:	edd3 6a00 	vldr	s13, [r3]
 8002bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be4:	4413      	add	r3, r2
 8002be6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bea:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c04:	4413      	add	r3, r2
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c0e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	3304      	adds	r3, #4
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c22:	3301      	adds	r3, #1
 8002c24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	ddb7      	ble.n	8002ba0 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c34:	3301      	adds	r3, #1
 8002c36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	dd99      	ble.n	8002b76 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c46:	3301      	adds	r3, #1
 8002c48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	dd8c      	ble.n	8002b6e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002ca2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ca6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	f00d f8dd 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cdc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ce0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	f00d f8cc 	bl	800fe96 <arm_mat_init_f32>
}
 8002cfe:	bf00      	nop
 8002d00:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	00000000 	.word	0x00000000

08002d0c <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d18:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002d1c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fafa 	bl	800231a <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002d26:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fcc2 	bl	80026b4 <MotorKalman_Update>

    return filter->velocity;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002d36:	ee07 3a90 	vmov	s15, r3
}
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00c      	b.n	8002d70 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	440b      	add	r3, r1
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbee      	blt.n	8002d56 <matrix_copy+0x12>
    }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d94:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d98:	6020      	str	r0, [r4, #0]
 8002d9a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d9e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002da2:	6001      	str	r1, [r0, #0]
 8002da4:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002da8:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002dac:	ed81 0a00 	vstr	s0, [r1]
 8002db0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002db4:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002db8:	600a      	str	r2, [r1, #0]
 8002dba:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002dbe:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002dc2:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002dc4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dc8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002dcc:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	f00d f85e 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002dda:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dde:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002de2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2204      	movs	r2, #4
 8002dea:	2104      	movs	r1, #4
 8002dec:	f00d f853 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002df0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002df4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002df8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2104      	movs	r1, #4
 8002e02:	f00d f848 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002e06:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e0a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e0e:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2201      	movs	r2, #1
 8002e16:	2104      	movs	r1, #4
 8002e18:	f00d f83d 	bl	800fe96 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002e1c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e20:	2240      	movs	r2, #64	@ 0x40
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00d fda7 	bl	8010978 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002e2a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e2e:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002e32:	2204      	movs	r2, #4
 8002e34:	2104      	movs	r1, #4
 8002e36:	f00d f82e 	bl	800fe96 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e40:	e011      	b.n	8002e66 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002e42:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e52:	443b      	add	r3, r7
 8002e54:	3b6c      	subs	r3, #108	@ 0x6c
 8002e56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e5c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e66:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	dde9      	ble.n	8002e42 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e6e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e72:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e76:	2204      	movs	r2, #4
 8002e78:	2104      	movs	r1, #4
 8002e7a:	f00d f80c 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e7e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e86:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e8a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e8e:	ed93 0a00 	vldr	s0, [r3]
 8002e92:	4610      	mov	r0, r2
 8002e94:	f00d fc08 	bl	80106a8 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e98:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e9c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002ea0:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	f7ff ff4c 	bl	8002d44 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002eac:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002eb0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	f00c ffed 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002ebc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ec0:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	f00c ffe5 	bl	800fe96 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002ecc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002ed0:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ed4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00c ffa1 	bl	800fe20 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002ede:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002ee2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff2b 	bl	8002d44 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002eee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ef2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002efc:	e03a      	b.n	8002f74 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002efe:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0a:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002f16:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f1a:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f1e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f22:	4618      	mov	r0, r3
 8002f24:	f00d fb46 	bl	80105b4 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002f28:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f2c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f30:	2210      	movs	r2, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff06 	bl	8002d44 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3c:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f44:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f48:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f52:	4618      	mov	r0, r3
 8002f54:	f00d fba8 	bl	80106a8 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f58:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f5c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f60:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00c ff5b 	bl	800fe20 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f6a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f74:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	ddc0      	ble.n	8002efe <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f7c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f80:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f84:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f88:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f8c:	ed93 0a00 	vldr	s0, [r3]
 8002f90:	4610      	mov	r0, r2
 8002f92:	f00d fb89 	bl	80106a8 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f96:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f9a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	6053      	str	r3, [r2, #4]
 8002fa6:	6093      	str	r3, [r2, #8]
 8002fa8:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002faa:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002fae:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	f00c ff6e 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002fba:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002fbe:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002fc2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f00d faf4 	bl	80105b4 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002fcc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002fd0:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	f00c ff5d 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002fdc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fe0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ff0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ff4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002ff8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8003002:	4618      	mov	r0, r3
 8003004:	f00d fb50 	bl	80106a8 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003008:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800300c:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003010:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003014:	4618      	mov	r0, r3
 8003016:	f00c ff03 	bl	800fe20 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800301a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800301e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003022:	4618      	mov	r0, r3
 8003024:	2340      	movs	r3, #64	@ 0x40
 8003026:	461a      	mov	r2, r3
 8003028:	2100      	movs	r1, #0
 800302a:	f00d fca5 	bl	8010978 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800302e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003032:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8003036:	2204      	movs	r2, #4
 8003038:	2104      	movs	r1, #4
 800303a:	f00c ff2c 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800303e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003042:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003046:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800304a:	4618      	mov	r0, r3
 800304c:	f00d fab2 	bl	80105b4 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003050:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003054:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	6053      	str	r3, [r2, #4]
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003064:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003068:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800306c:	2201      	movs	r2, #1
 800306e:	2104      	movs	r1, #4
 8003070:	f00c ff11 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003074:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003078:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800307c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003080:	4618      	mov	r0, r3
 8003082:	f00d fa97 	bl	80105b4 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003086:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800308a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003096:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800309a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80030aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030ae:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030b6:	4611      	mov	r1, r2
 80030b8:	eeb0 0a47 	vmov.f32	s0, s14
 80030bc:	4618      	mov	r0, r3
 80030be:	f00d faf3 	bl	80106a8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030c2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030c6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030ca:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00c fea6 	bl	800fe20 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80030d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030d8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030dc:	4618      	mov	r0, r3
 80030de:	2340      	movs	r3, #64	@ 0x40
 80030e0:	461a      	mov	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f00d fc48 	bl	8010978 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80030e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030ec:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030f0:	2204      	movs	r2, #4
 80030f2:	2104      	movs	r1, #4
 80030f4:	f00c fecf 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030f8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030fc:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003100:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003104:	4618      	mov	r0, r3
 8003106:	f00d fa55 	bl	80105b4 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 800310a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800310e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	6053      	str	r3, [r2, #4]
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800311e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003122:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003126:	2201      	movs	r2, #1
 8003128:	2104      	movs	r1, #4
 800312a:	f00c feb4 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800312e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003132:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003136:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800313a:	4618      	mov	r0, r3
 800313c:	f00d fa3a 	bl	80105b4 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003140:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003144:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003150:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003154:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003160:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003164:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003178:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800317c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003180:	4611      	mov	r1, r2
 8003182:	eeb0 0a47 	vmov.f32	s0, s14
 8003186:	4618      	mov	r0, r3
 8003188:	f00d fa8e 	bl	80106a8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800318c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003190:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003194:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003198:	4618      	mov	r0, r3
 800319a:	f00c fe41 	bl	800fe20 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800319e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031a2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80031a6:	4618      	mov	r0, r3
 80031a8:	2340      	movs	r3, #64	@ 0x40
 80031aa:	461a      	mov	r2, r3
 80031ac:	2100      	movs	r1, #0
 80031ae:	f00d fbe3 	bl	8010978 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80031b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031b6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80031ba:	2204      	movs	r2, #4
 80031bc:	2104      	movs	r1, #4
 80031be:	f00c fe6a 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80031c2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80031c6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031ca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00d f9f0 	bl	80105b4 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80031d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031d8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80031dc:	461a      	mov	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	6053      	str	r3, [r2, #4]
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80031e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ec:	f107 001c 	add.w	r0, r7, #28
 80031f0:	2201      	movs	r2, #1
 80031f2:	2104      	movs	r1, #4
 80031f4:	f00c fe4f 	bl	800fe96 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031f8:	f107 021c 	add.w	r2, r7, #28
 80031fc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003200:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003204:	4618      	mov	r0, r3
 8003206:	f00d f9d5 	bl	80105b4 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 800320a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800320e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800321a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800321e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800322e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800323e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003284 <discretize_system_with_arm+0x4fc>
 800324e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003252:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	4611      	mov	r1, r2
 800325c:	eeb0 0a47 	vmov.f32	s0, s14
 8003260:	4618      	mov	r0, r3
 8003262:	f00d fa21 	bl	80106a8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003266:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800326a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800326e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003272:	4618      	mov	r0, r3
 8003274:	f00c fdd4 	bl	800fe20 <arm_mat_add_f32>
}
 8003278:	bf00      	nop
 800327a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop
 8003284:	42f00000 	.word	0x42f00000

08003288 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b09e      	sub	sp, #120	@ 0x78
 800328c:	af00      	add	r7, sp, #0
 800328e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003292:	edc7 0a08 	vstr	s1, [r7, #32]
 8003296:	ed87 1a07 	vstr	s2, [r7, #28]
 800329a:	edc7 1a06 	vstr	s3, [r7, #24]
 800329e:	ed87 2a05 	vstr	s4, [r7, #20]
 80032a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80032a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80032aa:	60b8      	str	r0, [r7, #8]
 80032ac:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80032ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f00d fb5e 	bl	8010978 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80032bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80032ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80032d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80032d4:	eef1 6a67 	vneg.f32	s13, s15
 80032d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80032e4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80032e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032f4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003300:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8003304:	edd7 7a05 	vldr	s15, [r7, #20]
 8003308:	eef1 6a67 	vneg.f32	s13, s15
 800330c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003314:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003318:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800331c:	eef1 6a67 	vneg.f32	s13, s15
 8003320:	ed97 7a08 	vldr	s14, [r7, #32]
 8003324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003328:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 800332c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003330:	ed97 7a08 	vldr	s14, [r7, #32]
 8003334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003338:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 800333c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003340:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	ed97 0a03 	vldr	s0, [r7, #12]
 800334c:	f7ff fd1c 	bl	8002d88 <discretize_system_with_arm>
}
 8003350:	bf00      	nop
 8003352:	3778      	adds	r7, #120	@ 0x78
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a0b      	ldr	r2, [pc, #44]	@ (8003398 <PWM_init+0x40>)
 800336a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800337e:	68b8      	ldr	r0, [r7, #8]
 8003380:	f008 fe9a 	bl	800c0b8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	4619      	mov	r1, r3
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f008 ffe1 	bl	800c350 <HAL_TIM_PWM_Start>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0a21fe80 	.word	0x0a21fe80

0800339c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a8:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80033ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b8:	d137      	bne.n	800342a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <PWM_write_duty+0x32>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80033cc:	e0e1      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	889b      	ldrh	r3, [r3, #4]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d105      	bne.n	80033e2 <PWM_write_duty+0x46>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2300      	movs	r3, #0
 80033de:	6393      	str	r3, [r2, #56]	@ 0x38
 80033e0:	e0d7      	b.n	8003592 <PWM_write_duty+0x1f6>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	889b      	ldrh	r3, [r3, #4]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d105      	bne.n	80033f6 <PWM_write_duty+0x5a>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2300      	movs	r3, #0
 80033f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033f4:	e0cd      	b.n	8003592 <PWM_write_duty+0x1f6>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d105      	bne.n	800340a <PWM_write_duty+0x6e>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	6413      	str	r3, [r2, #64]	@ 0x40
 8003408:	e0c3      	b.n	8003592 <PWM_write_duty+0x1f6>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	889b      	ldrh	r3, [r3, #4]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d105      	bne.n	800341e <PWM_write_duty+0x82>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	6493      	str	r3, [r2, #72]	@ 0x48
 800341c:	e0b9      	b.n	8003592 <PWM_write_duty+0x1f6>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003428:	e0b3      	b.n	8003592 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003436:	ed97 7a02 	vldr	s14, [r7, #8]
 800343a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003452:	33fe      	adds	r3, #254	@ 0xfe
 8003454:	4a51      	ldr	r2, [pc, #324]	@ (800359c <PWM_write_duty+0x200>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0bdb      	lsrs	r3, r3, #15
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	899b      	ldrh	r3, [r3, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003480:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003484:	ed97 7a02 	vldr	s14, [r7, #8]
 8003488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003498:	ee17 3a90 	vmov	r3, s15
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	89db      	ldrh	r3, [r3, #14]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f808 	bl	80004bc <__aeabi_i2d>
 80034ac:	4604      	mov	r4, r0
 80034ae:	460d      	mov	r5, r1
 80034b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034b4:	eef0 7ae7 	vabs.f32	s15, s15
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fd f810 	bl	80004e0 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4620      	mov	r0, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	f7fd f862 	bl	8000590 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <PWM_write_duty+0x204>)
 80034da:	f7fd f983 	bl	80007e4 <__aeabi_ddiv>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fd fb15 	bl	8000b14 <__aeabi_d2uiz>
 80034ea:	4603      	mov	r3, r0
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	899a      	ldrh	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	89da      	ldrh	r2, [r3, #14]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	89da      	ldrh	r2, [r3, #14]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	889b      	ldrh	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <PWM_write_duty+0x190>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	6952      	ldr	r2, [r2, #20]
 8003528:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800352a:	e032      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	889b      	ldrh	r3, [r3, #4]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d106      	bne.n	8003542 <PWM_write_duty+0x1a6>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003540:	e027      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	889b      	ldrh	r3, [r3, #4]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d106      	bne.n	8003558 <PWM_write_duty+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003556:	e01c      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	889b      	ldrh	r3, [r3, #4]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d106      	bne.n	800356e <PWM_write_duty+0x1d2>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800356c:	e011      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	889b      	ldrh	r3, [r3, #4]
 8003572:	2b10      	cmp	r3, #16
 8003574:	d106      	bne.n	8003584 <PWM_write_duty+0x1e8>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003582:	e006      	b.n	8003592 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003590:	e7ff      	b.n	8003592 <PWM_write_duty+0x1f6>
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bdb0      	pop	{r4, r5, r7, pc}
 800359a:	bf00      	nop
 800359c:	80008001 	.word	0x80008001
 80035a0:	40590000 	.word	0x40590000
 80035a4:	00000000 	.word	0x00000000

080035a8 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035b4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80035b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	d137      	bne.n	8003636 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <PWM_write_range+0x32>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80035d8:	e0e1      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	889b      	ldrh	r3, [r3, #4]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d105      	bne.n	80035ee <PWM_write_range+0x46>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	6393      	str	r3, [r2, #56]	@ 0x38
 80035ec:	e0d7      	b.n	800379e <PWM_write_range+0x1f6>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	889b      	ldrh	r3, [r3, #4]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d105      	bne.n	8003602 <PWM_write_range+0x5a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003600:	e0cd      	b.n	800379e <PWM_write_range+0x1f6>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	889b      	ldrh	r3, [r3, #4]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d105      	bne.n	8003616 <PWM_write_range+0x6e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	6413      	str	r3, [r2, #64]	@ 0x40
 8003614:	e0c3      	b.n	800379e <PWM_write_range+0x1f6>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	889b      	ldrh	r3, [r3, #4]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d105      	bne.n	800362a <PWM_write_range+0x82>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	6493      	str	r3, [r2, #72]	@ 0x48
 8003628:	e0b9      	b.n	800379e <PWM_write_range+0x1f6>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003634:	e0b3      	b.n	800379e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003642:	ed97 7a02 	vldr	s14, [r7, #8]
 8003646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364e:	ee17 2a90 	vmov	r2, s15
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800365e:	33fe      	adds	r3, #254	@ 0xfe
 8003660:	4a53      	ldr	r2, [pc, #332]	@ (80037b0 <PWM_write_range+0x208>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0bdb      	lsrs	r3, r3, #15
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	899b      	ldrh	r3, [r3, #12]
 8003682:	3301      	adds	r3, #1
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800368c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003690:	ed97 7a02 	vldr	s14, [r7, #8]
 8003694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800369c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	89db      	ldrh	r3, [r3, #14]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff02 	bl	80004bc <__aeabi_i2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c0:	eef0 7ae7 	vabs.f32	s15, s15
 80036c4:	ee17 0a90 	vmov	r0, s15
 80036c8:	f7fc ff0a 	bl	80004e0 <__aeabi_f2d>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7fc ff5c 	bl	8000590 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	a331      	add	r3, pc, #196	@ (adr r3, 80037a8 <PWM_write_range+0x200>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fd f87d 	bl	80007e4 <__aeabi_ddiv>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fd fa0f 	bl	8000b14 <__aeabi_d2uiz>
 80036f6:	4603      	mov	r3, r0
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	899a      	ldrh	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	89da      	ldrh	r2, [r3, #14]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	89da      	ldrh	r2, [r3, #14]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	889b      	ldrh	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <PWM_write_range+0x190>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	6952      	ldr	r2, [r2, #20]
 8003734:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003736:	e032      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	889b      	ldrh	r3, [r3, #4]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d106      	bne.n	800374e <PWM_write_range+0x1a6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800374c:	e027      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	889b      	ldrh	r3, [r3, #4]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d106      	bne.n	8003764 <PWM_write_range+0x1bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003762:	e01c      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	889b      	ldrh	r3, [r3, #4]
 8003768:	2b0c      	cmp	r3, #12
 800376a:	d106      	bne.n	800377a <PWM_write_range+0x1d2>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003778:	e011      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	889b      	ldrh	r3, [r3, #4]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d106      	bne.n	8003790 <PWM_write_range+0x1e8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800378e:	e006      	b.n	800379e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800379c:	e7ff      	b.n	800379e <PWM_write_range+0x1f6>
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bdb0      	pop	{r4, r5, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40efffe0 	.word	0x40efffe0
 80037b0:	80008001 	.word	0x80008001

080037b4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6178      	str	r0, [r7, #20]
 80037bc:	6139      	str	r1, [r7, #16]
 80037be:	60fa      	str	r2, [r7, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037c6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	fb93 f2f2 	sdiv	r2, r3, r2
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	fb01 f202 	mul.w	r2, r1, r2
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003882:	213c      	movs	r1, #60	@ 0x3c
 8003884:	6938      	ldr	r0, [r7, #16]
 8003886:	f009 f81f 	bl	800c8c8 <HAL_TIM_Encoder_Start>
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	0000      	movs	r0, r0
 8003894:	0000      	movs	r0, r0
	...

08003898 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	0fda      	lsrs	r2, r3, #31
 80038c0:	4413      	add	r3, r2
 80038c2:	105b      	asrs	r3, r3, #1
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4293      	cmp	r3, r2
 80038ca:	dd05      	ble.n	80038d8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e00e      	b.n	80038f6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	0fda      	lsrs	r2, r3, #31
 80038de:	4413      	add	r3, r2
 80038e0:	105b      	asrs	r3, r3, #1
 80038e2:	425b      	negs	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	da04      	bge.n	80038f6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	ee07 3a90 	vmov	s15, r3
 8003924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003928:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fdcb 	bl	80004e0 <__aeabi_f2d>
 800394a:	4604      	mov	r4, r0
 800394c:	460d      	mov	r5, r1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800396a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800396e:	ee17 0a90 	vmov	r0, s15
 8003972:	f7fc fdb5 	bl	80004e0 <__aeabi_f2d>
 8003976:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a68 <QEI_get_diff_count+0x1d0>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f7fc fe08 	bl	8000590 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4690      	mov	r8, r2
 8003986:	4699      	mov	r9, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fda7 	bl	80004e0 <__aeabi_f2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4640      	mov	r0, r8
 8003998:	4649      	mov	r1, r9
 800399a:	f7fc fdf9 	bl	8000590 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7fc fc3d 	bl	8000224 <__adddf3>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f8cf 	bl	8000b54 <__aeabi_d2f>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fc fd8d 	bl	80004e0 <__aeabi_f2d>
 80039c6:	4604      	mov	r4, r0
 80039c8:	460d      	mov	r5, r1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039e6:	ee16 0a90 	vmov	r0, s13
 80039ea:	f7fc fd79 	bl	80004e0 <__aeabi_f2d>
 80039ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a68 <QEI_get_diff_count+0x1d0>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fdcc 	bl	8000590 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4690      	mov	r8, r2
 80039fe:	4699      	mov	r9, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc fd6b 	bl	80004e0 <__aeabi_f2d>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4640      	mov	r0, r8
 8003a10:	4649      	mov	r1, r9
 8003a12:	f7fc fdbd 	bl	8000590 <__aeabi_dmul>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fd5c 	bl	80004e0 <__aeabi_f2d>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	4649      	mov	r1, r9
 8003a30:	f7fc fdae 	bl	8000590 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f7fc fbf2 	bl	8000224 <__adddf3>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fd f884 	bl	8000b54 <__aeabi_d2f>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a64:	f3af 8000 	nop.w
 8003a68:	54442d18 	.word	0x54442d18
 8003a6c:	400921fb 	.word	0x400921fb

08003a70 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd22 	bl	80004e0 <__aeabi_f2d>
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	4b83      	ldr	r3, [pc, #524]	@ (8003cb0 <QEI_compute_data+0x240>)
 8003aa2:	f7fc fd75 	bl	8000590 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4614      	mov	r4, r2
 8003aac:	461d      	mov	r5, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aba:	ee17 0a90 	vmov	r0, s15
 8003abe:	f7fc fd0f 	bl	80004e0 <__aeabi_f2d>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7fc fe8b 	bl	80007e4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd00 	bl	80004e0 <__aeabi_f2d>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	f7fc fd52 	bl	8000590 <__aeabi_dmul>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fd f82e 	bl	8000b54 <__aeabi_d2f>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003b04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b08:	ee17 0a90 	vmov	r0, s15
 8003b0c:	f7fc fce8 	bl	80004e0 <__aeabi_f2d>
 8003b10:	a365      	add	r3, pc, #404	@ (adr r3, 8003ca8 <QEI_compute_data+0x238>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fd3b 	bl	8000590 <__aeabi_dmul>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	461d      	mov	r5, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2e:	ee17 0a90 	vmov	r0, s15
 8003b32:	f7fc fcd5 	bl	80004e0 <__aeabi_f2d>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	f7fc fe51 	bl	80007e4 <__aeabi_ddiv>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4614      	mov	r4, r2
 8003b48:	461d      	mov	r5, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fcc6 	bl	80004e0 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fd18 	bl	8000590 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fc fff4 	bl	8000b54 <__aeabi_d2f>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fcb2 	bl	80004e0 <__aeabi_f2d>
 8003b7c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003ca8 <QEI_compute_data+0x238>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fd05 	bl	8000590 <__aeabi_dmul>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fca4 	bl	80004e0 <__aeabi_f2d>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc fcf6 	bl	8000590 <__aeabi_dmul>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb8:	ee17 0a90 	vmov	r0, s15
 8003bbc:	f7fc fc90 	bl	80004e0 <__aeabi_f2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc fe0c 	bl	80007e4 <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc81 	bl	80004e0 <__aeabi_f2d>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4620      	mov	r0, r4
 8003be4:	4629      	mov	r1, r5
 8003be6:	f7fc fcd3 	bl	8000590 <__aeabi_dmul>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fc ffaf 	bl	8000b54 <__aeabi_d2f>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	d00a      	beq.n	8003c44 <QEI_compute_data+0x1d4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	e001      	b.n	8003c48 <QEI_compute_data+0x1d8>
 8003c44:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003cb4 <QEI_compute_data+0x244>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	d00a      	beq.n	8003c86 <QEI_compute_data+0x216>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c84:	e001      	b.n	8003c8a <QEI_compute_data+0x21a>
 8003c86:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003cb4 <QEI_compute_data+0x244>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	615a      	str	r2, [r3, #20]
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca8:	54442d18 	.word	0x54442d18
 8003cac:	400921fb 	.word	0x400921fb
 8003cb0:	404e0000 	.word	0x404e0000
 8003cb4:	00000000 	.word	0x00000000

08003cb8 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6178      	str	r0, [r7, #20]
 8003cc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8003cc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8003cc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ccc:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003cf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d02:	eef0 7ae7 	vabs.f32	s15, s15
 8003d06:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d503      	bpl.n	8003d28 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	22ff      	movs	r2, #255	@ 0xff
 8003d24:	741a      	strb	r2, [r3, #16]
 8003d26:	e002      	b.n	8003d2e <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003d2e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003d32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	d006      	beq.n	8003d4a <Trapezoidal_Generator+0x92>
 8003d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d104      	bne.n	8003d54 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
        return;
 8003d52:	e06f      	b.n	8003e34 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003d54:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d58:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d60:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003d88:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d8c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003d98:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	db27      	blt.n	8003dfa <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003daa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003dae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db6:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc6:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003dd0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003dd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003de2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003de6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	edc3 7a02 	vstr	s15, [r3, #8]
 8003df8:	e018      	b.n	8003e2c <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003dfa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003dfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e06:	eeb0 0a66 	vmov.f32	s0, s13
 8003e0a:	f00c fed1 	bl	8010bb0 <sqrtf>
 8003e0e:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	6a3a      	ldr	r2, [r7, #32]
 8003e1c:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	60da      	str	r2, [r3, #12]
}
 8003e34:	3738      	adds	r7, #56	@ 0x38
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b08d      	sub	sp, #52	@ 0x34
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6178      	str	r0, [r7, #20]
 8003e44:	6139      	str	r1, [r7, #16]
 8003e46:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e4e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003e52:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e5c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80040e0 <Trapezoidal_Evaluated+0x2a4>
 8003e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7e:	f200 811b 	bhi.w	80040b8 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2200      	movs	r2, #0
 8003e86:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	7c1b      	ldrb	r3, [r3, #16]
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	ed97 7a00 	vldr	s14, [r7]
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	ed93 7a00 	vldr	s14, [r3]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eae:	eeb4 7a67 	vcmp.f32	s14, s15
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	d109      	bne.n	8003ecc <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003eca:	e00c      	b.n	8003ee6 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	7c1b      	ldrb	r3, [r3, #16]
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efa:	d824      	bhi.n	8003f46 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003efc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f42:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003f44:	e0c6      	b.n	80040d4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	d830      	bhi.n	8003fbe <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	edd3 7a00 	vldr	s15, [r3]
 8003f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	edd3 7a00 	vldr	s15, [r3]
 8003f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f98:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb2:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	e08a      	b.n	80040d4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd2:	d900      	bls.n	8003fd6 <Trapezoidal_Evaluated+0x19a>
}
 8003fd4:	e07e      	b.n	80040d4 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fd6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	edd3 7a00 	vldr	s15, [r3]
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffe:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	ed93 7a01 	vldr	s14, [r3, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	dd11      	ble.n	8004040 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee37 7a67 	vsub.f32	s14, s14, s15
 800402c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004034:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800403c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	ed93 7a03 	vldr	s14, [r3, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	edd3 7a01 	vldr	s15, [r3, #4]
 800404c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004050:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004054:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004058:	edd7 7a07 	vldr	s15, [r7, #28]
 800405c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004060:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004068:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800406c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004070:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004074:	edd7 7a07 	vldr	s15, [r7, #28]
 8004078:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800407c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800408e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004092:	edd7 7a07 	vldr	s15, [r7, #28]
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800409e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80040a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040ac:	eef1 7a67 	vneg.f32	s15, s15
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80040b6:	e00d      	b.n	80040d4 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2201      	movs	r2, #1
 80040bc:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3734      	adds	r7, #52	@ 0x34
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	3a83126f 	.word	0x3a83126f

080040e4 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80040ee:	4603      	mov	r3, r0
 80040f0:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	2b1a      	cmp	r3, #26
 80040f6:	d018      	beq.n	800412a <temperature_to_base+0x46>
 80040f8:	2b1a      	cmp	r3, #26
 80040fa:	dc1d      	bgt.n	8004138 <temperature_to_base+0x54>
 80040fc:	2b18      	cmp	r3, #24
 80040fe:	d002      	beq.n	8004106 <temperature_to_base+0x22>
 8004100:	2b19      	cmp	r3, #25
 8004102:	d003      	beq.n	800410c <temperature_to_base+0x28>
 8004104:	e018      	b.n	8004138 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004106:	edd7 7a01 	vldr	s15, [r7, #4]
 800410a:	e017      	b.n	800413c <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 800410c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004110:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800414c <temperature_to_base+0x68>
 8004114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004118:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800411c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004120:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004128:	e008      	b.n	800413c <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 800412a:	edd7 7a01 	vldr	s15, [r7, #4]
 800412e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004150 <temperature_to_base+0x6c>
 8004132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004136:	e001      	b.n	800413c <temperature_to_base+0x58>
        default:
            return value;
 8004138:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800413c:	eeb0 0a67 	vmov.f32	s0, s15
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	42000000 	.word	0x42000000
 8004150:	43889333 	.word	0x43889333

08004154 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	ed87 0a01 	vstr	s0, [r7, #4]
 800415e:	4603      	mov	r3, r0
 8004160:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b1a      	cmp	r3, #26
 8004166:	d018      	beq.n	800419a <temperature_from_base+0x46>
 8004168:	2b1a      	cmp	r3, #26
 800416a:	dc1d      	bgt.n	80041a8 <temperature_from_base+0x54>
 800416c:	2b18      	cmp	r3, #24
 800416e:	d002      	beq.n	8004176 <temperature_from_base+0x22>
 8004170:	2b19      	cmp	r3, #25
 8004172:	d003      	beq.n	800417c <temperature_from_base+0x28>
 8004174:	e018      	b.n	80041a8 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004176:	edd7 7a01 	vldr	s15, [r7, #4]
 800417a:	e017      	b.n	80041ac <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 800417c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004180:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004184:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004188:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800418c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004190:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80041bc <temperature_from_base+0x68>
 8004194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004198:	e008      	b.n	80041ac <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800419a:	edd7 7a01 	vldr	s15, [r7, #4]
 800419e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041c0 <temperature_from_base+0x6c>
 80041a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041a6:	e001      	b.n	80041ac <temperature_from_base+0x58>
        default:
            return value;
 80041a8:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80041ac:	eeb0 0a67 	vmov.f32	s0, s15
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	42000000 	.word	0x42000000
 80041c0:	43889333 	.word	0x43889333

080041c4 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e00a      	b.n	80041f4 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	3304      	adds	r3, #4
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b1a      	cmp	r3, #26
 80041f8:	ddf1      	ble.n	80041de <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <init_length_converter+0x80>)
 80041fe:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a11      	ldr	r2, [pc, #68]	@ (8004248 <init_length_converter+0x84>)
 8004204:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800420c:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <init_length_converter+0x88>)
 8004212:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0e      	ldr	r2, [pc, #56]	@ (8004250 <init_length_converter+0x8c>)
 8004218:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a0d      	ldr	r2, [pc, #52]	@ (8004254 <init_length_converter+0x90>)
 800421e:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <init_length_converter+0x94>)
 8004224:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <init_length_converter+0x98>)
 800422a:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	3a83126f 	.word	0x3a83126f
 8004248:	3c23d70a 	.word	0x3c23d70a
 800424c:	447a0000 	.word	0x447a0000
 8004250:	3cd013a9 	.word	0x3cd013a9
 8004254:	3e9c0ebf 	.word	0x3e9c0ebf
 8004258:	3f6a161e 	.word	0x3f6a161e
 800425c:	44c92b02 	.word	0x44c92b02

08004260 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	220a      	movs	r2, #10
 8004272:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e00a      	b.n	8004290 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b1a      	cmp	r3, #26
 8004294:	ddf1      	ble.n	800427a <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0e      	ldr	r2, [pc, #56]	@ (80042d4 <init_mass_converter+0x74>)
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <init_mass_converter+0x78>)
 80042a0:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a0b      	ldr	r2, [pc, #44]	@ (80042dc <init_mass_converter+0x7c>)
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0b      	ldr	r2, [pc, #44]	@ (80042e0 <init_mass_converter+0x80>)
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <init_mass_converter+0x84>)
 80042ba:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	358637bd 	.word	0x358637bd
 80042d8:	3a83126f 	.word	0x3a83126f
 80042dc:	447a0000 	.word	0x447a0000
 80042e0:	3ce83d36 	.word	0x3ce83d36
 80042e4:	3ee83d36 	.word	0x3ee83d36

080042e8 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	220f      	movs	r2, #15
 80042fa:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e00a      	b.n	8004318 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b1a      	cmp	r3, #26
 800431c:	ddf1      	ble.n	8004302 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <init_angle_converter+0x64>)
 8004322:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800432a:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <init_angle_converter+0x68>)
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	3c8efa35 	.word	0x3c8efa35
 8004350:	3c80adfd 	.word	0x3c80adfd

08004354 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2203      	movs	r2, #3
 8004360:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2214      	movs	r2, #20
 8004366:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e00a      	b.n	8004384 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b1a      	cmp	r3, #26
 8004388:	ddf1      	ble.n	800436e <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a10      	ldr	r2, [pc, #64]	@ (80043d0 <init_time_converter+0x7c>)
 800438e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <init_time_converter+0x80>)
 8004394:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a0f      	ldr	r2, [pc, #60]	@ (80043d8 <init_time_converter+0x84>)
 800439a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a0d      	ldr	r2, [pc, #52]	@ (80043dc <init_time_converter+0x88>)
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <init_time_converter+0x8c>)
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <init_time_converter+0x90>)
 80043b4:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	3089705f 	.word	0x3089705f
 80043d4:	358637bd 	.word	0x358637bd
 80043d8:	3a83126f 	.word	0x3a83126f
 80043dc:	42700000 	.word	0x42700000
 80043e0:	45610000 	.word	0x45610000
 80043e4:	47a8c000 	.word	0x47a8c000

080043e8 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2204      	movs	r2, #4
 80043f4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2218      	movs	r2, #24
 80043fa:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e00a      	b.n	8004418 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	3304      	adds	r3, #4
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b1a      	cmp	r3, #26
 800441c:	ddf1      	ble.n	8004402 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a05      	ldr	r2, [pc, #20]	@ (8004438 <init_temperature_converter+0x50>)
 8004422:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a05      	ldr	r2, [pc, #20]	@ (800443c <init_temperature_converter+0x54>)
 8004428:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	080040e5 	.word	0x080040e5
 800443c:	08004155 	.word	0x08004155

08004440 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff feba 	bl	80041c4 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3378      	adds	r3, #120	@ 0x78
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff03 	bl	8004260 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	33f0      	adds	r3, #240	@ 0xf0
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff42 	bl	80042e8 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ff72 	bl	8004354 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffb6 	bl	80043e8 <init_temperature_converter>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b1a      	cmp	r3, #26
 8004492:	d803      	bhi.n	800449c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <UnitConverter_get_unit_type+0x28>)
 8004498:	5cd3      	ldrb	r3, [r2, r3]
 800449a:	e000      	b.n	800449e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000114 	.word	0x20000114

080044b0 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80044bc:	460b      	mov	r3, r1
 80044be:	71fb      	strb	r3, [r7, #7]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ffdc 	bl	8004484 <UnitConverter_get_unit_type>
 80044cc:	4603      	mov	r3, r0
 80044ce:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ffd6 	bl	8004484 <UnitConverter_get_unit_type>
 80044d8:	4603      	mov	r3, r0
 80044da:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80044dc:	7efa      	ldrb	r2, [r7, #27]
 80044de:	7ebb      	ldrb	r3, [r7, #26]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d002      	beq.n	80044ea <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80044e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80044e8:	e03b      	b.n	8004562 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80044ea:	7efa      	ldrb	r2, [r7, #27]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	79fa      	ldrb	r2, [r7, #7]
 8004508:	4610      	mov	r0, r2
 800450a:	ed97 0a02 	vldr	s0, [r7, #8]
 800450e:	4798      	blx	r3
 8004510:	ed87 0a07 	vstr	s0, [r7, #28]
 8004514:	e00c      	b.n	8004530 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	ed97 7a02 	vldr	s14, [r7, #8]
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453c:	79ba      	ldrb	r2, [r7, #6]
 800453e:	4610      	mov	r0, r2
 8004540:	ed97 0a07 	vldr	s0, [r7, #28]
 8004544:	4798      	blx	r3
 8004546:	eef0 7a40 	vmov.f32	s15, s0
 800454a:	e00a      	b.n	8004562 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 800454c:	79bb      	ldrb	r3, [r7, #6]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	3304      	adds	r3, #4
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	edd7 6a07 	vldr	s13, [r7, #28]
 800455e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	ed87 0a02 	vstr	s0, [r7, #8]
 8004578:	460b      	mov	r3, r1
 800457a:	71fb      	strb	r3, [r7, #7]
 800457c:	4613      	mov	r3, r2
 800457e:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff7e 	bl	8004484 <UnitConverter_get_unit_type>
 8004588:	4603      	mov	r3, r0
 800458a:	2b02      	cmp	r3, #2
 800458c:	d111      	bne.n	80045b2 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff77 	bl	8004484 <UnitConverter_get_unit_type>
 8004596:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004598:	2b02      	cmp	r3, #2
 800459a:	d10a      	bne.n	80045b2 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800459c:	79ba      	ldrb	r2, [r7, #6]
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4619      	mov	r1, r3
 80045a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff ff82 	bl	80044b0 <UnitConverter_convert>
 80045ac:	eef0 7a40 	vmov.f32	s15, s0
 80045b0:	e001      	b.n	80045b6 <UnitConverter_angle+0x4a>
    }
    return value;
 80045b2:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80045b6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	@ 0x30
 80045c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80045c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	2220      	movs	r2, #32
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f00c f9cd 	bl	8010978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80045de:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80045e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80045e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045e6:	4b37      	ldr	r3, [pc, #220]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80045e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80045ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045f4:	4b33      	ldr	r3, [pc, #204]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80045fa:	4b32      	ldr	r3, [pc, #200]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004600:	4b30      	ldr	r3, [pc, #192]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004602:	2201      	movs	r2, #1
 8004604:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004606:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004608:	2204      	movs	r2, #4
 800460a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800460c:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <MX_ADC1_Init+0x104>)
 800460e:	2200      	movs	r2, #0
 8004610:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004614:	2201      	movs	r2, #1
 8004616:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004618:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <MX_ADC1_Init+0x104>)
 800461a:	2202      	movs	r2, #2
 800461c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004628:	2200      	movs	r2, #0
 800462a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800462c:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <MX_ADC1_Init+0x104>)
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <MX_ADC1_Init+0x104>)
 800463c:	2200      	movs	r2, #0
 800463e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004640:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004648:	481e      	ldr	r0, [pc, #120]	@ (80046c4 <MX_ADC1_Init+0x104>)
 800464a:	f004 fc47 	bl	8008edc <HAL_ADC_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004654:	f002 fc8c 	bl	8006f70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004658:	2300      	movs	r3, #0
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800465c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004660:	4619      	mov	r1, r3
 8004662:	4818      	ldr	r0, [pc, #96]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004664:	f005 fd66 	bl	800a134 <HAL_ADCEx_MultiModeConfigChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800466e:	f002 fc7f 	bl	8006f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004672:	4b15      	ldr	r3, [pc, #84]	@ (80046c8 <MX_ADC1_Init+0x108>)
 8004674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004676:	2306      	movs	r3, #6
 8004678:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800467a:	2307      	movs	r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800467e:	237f      	movs	r3, #127	@ 0x7f
 8004680:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004682:	2304      	movs	r3, #4
 8004684:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	4619      	mov	r1, r3
 800468e:	480d      	ldr	r0, [pc, #52]	@ (80046c4 <MX_ADC1_Init+0x104>)
 8004690:	f004 fed2 	bl	8009438 <HAL_ADC_ConfigChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800469a:	f002 fc69 	bl	8006f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <MX_ADC1_Init+0x10c>)
 80046a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046a2:	230c      	movs	r3, #12
 80046a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4806      	ldr	r0, [pc, #24]	@ (80046c4 <MX_ADC1_Init+0x104>)
 80046ac:	f004 fec4 	bl	8009438 <HAL_ADC_ConfigChannel>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80046b6:	f002 fc5b 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	3730      	adds	r7, #48	@ 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200001b0 	.word	0x200001b0
 80046c8:	19200040 	.word	0x19200040
 80046cc:	1d500080 	.word	0x1d500080

080046d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b09e      	sub	sp, #120	@ 0x78
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	2254      	movs	r2, #84	@ 0x54
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f00c f941 	bl	8010978 <memset>
  if(adcHandle->Instance==ADC1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046fe:	d15e      	bne.n	80047be <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004704:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004706:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800470a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	4618      	mov	r0, r3
 8004712:	f007 fa1f 	bl	800bb54 <HAL_RCCEx_PeriphCLKConfig>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800471c:	f002 fc28 	bl	8006f70 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004720:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 8004722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004724:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 8004726:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800472a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800472c:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004738:	4b23      	ldr	r3, [pc, #140]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 800473a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473c:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004744:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <HAL_ADC_MspInit+0xf8>)
 8004746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004750:	2303      	movs	r3, #3
 8004752:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004754:	2303      	movs	r3, #3
 8004756:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004760:	4619      	mov	r1, r3
 8004762:	481a      	ldr	r0, [pc, #104]	@ (80047cc <HAL_ADC_MspInit+0xfc>)
 8004764:	f006 fa30 	bl	800abc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 800476a:	4a1a      	ldr	r2, [pc, #104]	@ (80047d4 <HAL_ADC_MspInit+0x104>)
 800476c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800476e:	4b18      	ldr	r3, [pc, #96]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004770:	2205      	movs	r2, #5
 8004772:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004774:	4b16      	ldr	r3, [pc, #88]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 800477c:	2200      	movs	r2, #0
 800477e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004782:	2280      	movs	r2, #128	@ 0x80
 8004784:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800478c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004794:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004796:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 8004798:	2220      	movs	r2, #32
 800479a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 800479e:	2200      	movs	r2, #0
 80047a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047a2:	480b      	ldr	r0, [pc, #44]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 80047a4:	f005 fede 	bl	800a564 <HAL_DMA_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80047ae:	f002 fbdf 	bl	8006f70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a06      	ldr	r2, [pc, #24]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80047b8:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_ADC_MspInit+0x100>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80047be:	bf00      	nop
 80047c0:	3778      	adds	r7, #120	@ 0x78
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	48000800 	.word	0x48000800
 80047d0:	2000021c 	.word	0x2000021c
 80047d4:	40020008 	.word	0x40020008

080047d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80047de:	4b22      	ldr	r3, [pc, #136]	@ (8004868 <MX_DMA_Init+0x90>)
 80047e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e2:	4a21      	ldr	r2, [pc, #132]	@ (8004868 <MX_DMA_Init+0x90>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <MX_DMA_Init+0x90>)
 80047ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004868 <MX_DMA_Init+0x90>)
 80047f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004868 <MX_DMA_Init+0x90>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6493      	str	r3, [r2, #72]	@ 0x48
 8004802:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <MX_DMA_Init+0x90>)
 8004804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	200b      	movs	r0, #11
 8004814:	f005 fe71 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004818:	200b      	movs	r0, #11
 800481a:	f005 fe88 	bl	800a52e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	200c      	movs	r0, #12
 8004824:	f005 fe69 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004828:	200c      	movs	r0, #12
 800482a:	f005 fe80 	bl	800a52e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800482e:	2200      	movs	r2, #0
 8004830:	2100      	movs	r1, #0
 8004832:	200d      	movs	r0, #13
 8004834:	f005 fe61 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004838:	200d      	movs	r0, #13
 800483a:	f005 fe78 	bl	800a52e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800483e:	2200      	movs	r2, #0
 8004840:	2100      	movs	r1, #0
 8004842:	200e      	movs	r0, #14
 8004844:	f005 fe59 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004848:	200e      	movs	r0, #14
 800484a:	f005 fe70 	bl	800a52e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800484e:	2200      	movs	r2, #0
 8004850:	2100      	movs	r1, #0
 8004852:	200f      	movs	r0, #15
 8004854:	f005 fe51 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004858:	200f      	movs	r0, #15
 800485a:	f005 fe68 	bl	800a52e <HAL_NVIC_EnableIRQ>

}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000

0800486c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	@ 0x28
 8004870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	60da      	str	r2, [r3, #12]
 8004880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004882:	4b67      	ldr	r3, [pc, #412]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 8004884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004886:	4a66      	ldr	r2, [pc, #408]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 8004888:	f043 0304 	orr.w	r3, r3, #4
 800488c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488e:	4b64      	ldr	r3, [pc, #400]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800489a:	4b61      	ldr	r3, [pc, #388]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	4a60      	ldr	r2, [pc, #384]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b6:	4a5a      	ldr	r2, [pc, #360]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048be:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ca:	4b55      	ldr	r3, [pc, #340]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048d0:	f043 0302 	orr.w	r3, r3, #2
 80048d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d6:	4b52      	ldr	r3, [pc, #328]	@ (8004a20 <MX_GPIO_Init+0x1b4>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80048e2:	2200      	movs	r2, #0
 80048e4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80048e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048ec:	f006 fb06 	bl	800aefc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80048f0:	2200      	movs	r2, #0
 80048f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048f6:	484b      	ldr	r0, [pc, #300]	@ (8004a24 <MX_GPIO_Init+0x1b8>)
 80048f8:	f006 fb00 	bl	800aefc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|J3_Pin|J4_Pin;
 80048fc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004902:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4619      	mov	r1, r3
 8004912:	4844      	ldr	r0, [pc, #272]	@ (8004a24 <MX_GPIO_Init+0x1b8>)
 8004914:	f006 f958 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004918:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 800491c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800491e:	2301      	movs	r3, #1
 8004920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004934:	f006 f948 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|J1_Pin;
 8004938:	f241 0381 	movw	r3, #4225	@ 0x1081
 800493c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800493e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4619      	mov	r1, r3
 800494e:	4836      	ldr	r0, [pc, #216]	@ (8004a28 <MX_GPIO_Init+0x1bc>)
 8004950:	f006 f93a 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004954:	2306      	movs	r3, #6
 8004956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800495c:	2302      	movs	r3, #2
 800495e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4619      	mov	r1, r3
 8004966:	4830      	ldr	r0, [pc, #192]	@ (8004a28 <MX_GPIO_Init+0x1bc>)
 8004968:	f006 f92e 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800496c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004972:	2301      	movs	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497a:	2300      	movs	r3, #0
 800497c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	4619      	mov	r1, r3
 8004984:	4827      	ldr	r0, [pc, #156]	@ (8004a24 <MX_GPIO_Init+0x1b8>)
 8004986:	f006 f91f 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 800498a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800498e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4619      	mov	r1, r3
 800499e:	4821      	ldr	r0, [pc, #132]	@ (8004a24 <MX_GPIO_Init+0x1b8>)
 80049a0:	f006 f912 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 80049a4:	2310      	movs	r3, #16
 80049a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80049a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80049ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4619      	mov	r1, r3
 80049b8:	481b      	ldr	r0, [pc, #108]	@ (8004a28 <MX_GPIO_Init+0x1bc>)
 80049ba:	f006 f905 	bl	800abc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 80049be:	2340      	movs	r3, #64	@ 0x40
 80049c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049c8:	2301      	movs	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	4619      	mov	r1, r3
 80049d2:	4815      	ldr	r0, [pc, #84]	@ (8004a28 <MX_GPIO_Init+0x1bc>)
 80049d4:	f006 f8f8 	bl	800abc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80049d8:	2200      	movs	r2, #0
 80049da:	2100      	movs	r1, #0
 80049dc:	2006      	movs	r0, #6
 80049de:	f005 fd8c 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80049e2:	2006      	movs	r0, #6
 80049e4:	f005 fda3 	bl	800a52e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	200a      	movs	r0, #10
 80049ee:	f005 fd84 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80049f2:	200a      	movs	r0, #10
 80049f4:	f005 fd9b 	bl	800a52e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2100      	movs	r1, #0
 80049fc:	2017      	movs	r0, #23
 80049fe:	f005 fd7c 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a02:	2017      	movs	r0, #23
 8004a04:	f005 fd93 	bl	800a52e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2028      	movs	r0, #40	@ 0x28
 8004a0e:	f005 fd74 	bl	800a4fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a12:	2028      	movs	r0, #40	@ 0x28
 8004a14:	f005 fd8b 	bl	800a52e <HAL_NVIC_EnableIRQ>

}
 8004a18:	bf00      	nop
 8004a1a:	3728      	adds	r7, #40	@ 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	48000800 	.word	0x48000800
 8004a28:	48000400 	.word	0x48000400

08004a2c <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b096      	sub	sp, #88	@ 0x58
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a38:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	2201      	movs	r2, #1
 8004a46:	2101      	movs	r1, #1
 8004a48:	f00b fa25 	bl	800fe96 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f00b fe95 	bl	801078a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f00b fe8b 	bl	801078a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f00b fe81 	bl	801078a <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004a94:	4619      	mov	r1, r3
 8004a96:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f00b fe04 	bl	80106a8 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f00b fd7e 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004aca:	461a      	mov	r2, r3
 8004acc:	f00b f9a8 	bl	800fe20 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f00b fd66 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004afa:	461a      	mov	r2, r3
 8004afc:	f00b fd5a 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004b12:	461a      	mov	r2, r3
 8004b14:	f00b fd4e 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b30:	4610      	mov	r0, r2
 8004b32:	f00b fdb9 	bl	80106a8 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f00b f969 	bl	800fe20 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004b60:	461a      	mov	r2, r3
 8004b62:	f00b fd27 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f00b fd1b 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004b90:	461a      	mov	r2, r3
 8004b92:	f00b f945 	bl	800fe20 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f00b f98e 	bl	800fec6 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f00b fcf9 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f00b fced 	bl	80105b4 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004bec:	461a      	mov	r2, r3
 8004bee:	f00b fce1 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004c04:	461a      	mov	r2, r3
 8004c06:	f00b fd85 	bl	8010714 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f00b fcc9 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c34:	461a      	mov	r2, r3
 8004c36:	f00b f8f3 	bl	800fe20 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f00b fcb1 	bl	80105b4 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004c52:	f107 0310 	add.w	r3, r7, #16
 8004c56:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	f00b f91a 	bl	800fe96 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004c6e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c72:	4619      	mov	r1, r3
 8004c74:	f00b fc9e 	bl	80105b4 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004c7e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c82:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004c86:	4618      	mov	r0, r3
 8004c88:	f00b fd44 	bl	8010714 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004c98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00b fc89 	bl	80105b4 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004cb2:	ee07 3a90 	vmov	s15, r3
}
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	3758      	adds	r7, #88	@ 0x58
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b0a4      	sub	sp, #144	@ 0x90
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6178      	str	r0, [r7, #20]
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cd0:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004ce4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004d1a:	4bc6      	ldr	r3, [pc, #792]	@ (8005034 <Kalman_Start+0x374>)
 8004d1c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004d20:	461d      	mov	r5, r3
 8004d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004d36:	f107 031c 	add.w	r3, r7, #28
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d54:	e028      	b.n	8004da8 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	6979      	ldr	r1, [r7, #20]
 8004d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d68:	3314      	adds	r3, #20
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3390      	adds	r3, #144	@ 0x90
 8004d78:	443b      	add	r3, r7
 8004d7a:	3b64      	subs	r3, #100	@ 0x64
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d84:	3398      	adds	r3, #152	@ 0x98
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d92:	3304      	adds	r3, #4
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da2:	3301      	adds	r3, #1
 8004da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dac:	2b0f      	cmp	r3, #15
 8004dae:	ddd2      	ble.n	8004d56 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004db6:	e03a      	b.n	8004e2e <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3390      	adds	r3, #144	@ 0x90
 8004dc0:	443b      	add	r3, r7
 8004dc2:	3b74      	subs	r3, #116	@ 0x74
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de4:	3324      	adds	r3, #36	@ 0x24
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3390      	adds	r3, #144	@ 0x90
 8004df4:	443b      	add	r3, r7
 8004df6:	3b14      	subs	r3, #20
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e00:	3328      	adds	r3, #40	@ 0x28
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	3390      	adds	r3, #144	@ 0x90
 8004e10:	443b      	add	r3, r7
 8004e12:	3b24      	subs	r3, #36	@ 0x24
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1c:	332c      	adds	r3, #44	@ 0x2c
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	ddc0      	ble.n	8004db8 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2104      	movs	r1, #4
 8004e42:	f00b f828 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3310      	adds	r3, #16
 8004e50:	2204      	movs	r2, #4
 8004e52:	2104      	movs	r1, #4
 8004e54:	f00b f81f 	bl	800fe96 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	3350      	adds	r3, #80	@ 0x50
 8004e62:	2204      	movs	r2, #4
 8004e64:	2104      	movs	r1, #4
 8004e66:	f00b f816 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3390      	adds	r3, #144	@ 0x90
 8004e74:	2201      	movs	r2, #1
 8004e76:	2104      	movs	r1, #4
 8004e78:	f00b f80d 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	33a0      	adds	r3, #160	@ 0xa0
 8004e86:	2204      	movs	r2, #4
 8004e88:	2101      	movs	r1, #1
 8004e8a:	f00b f804 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	33b0      	adds	r3, #176	@ 0xb0
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	f00a fffb 	bl	800fe96 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	33c8      	adds	r3, #200	@ 0xc8
 8004eaa:	2204      	movs	r2, #4
 8004eac:	2104      	movs	r1, #4
 8004eae:	f00a fff2 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	f00a ffe8 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	f00a ffde 	bl	800fe96 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	2104      	movs	r1, #4
 8004eea:	f00a ffd4 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004efa:	2204      	movs	r2, #4
 8004efc:	2104      	movs	r1, #4
 8004efe:	f00a ffca 	bl	800fe96 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f0e:	2201      	movs	r2, #1
 8004f10:	2104      	movs	r1, #4
 8004f12:	f00a ffc0 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004f22:	2201      	movs	r2, #1
 8004f24:	2104      	movs	r1, #4
 8004f26:	f00a ffb6 	bl	800fe96 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004f36:	2204      	movs	r2, #4
 8004f38:	2101      	movs	r1, #1
 8004f3a:	f00a ffac 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	f00a ffa2 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2101      	movs	r1, #1
 8004f62:	f00a ff98 	bl	800fe96 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004f72:	2201      	movs	r2, #1
 8004f74:	2104      	movs	r1, #4
 8004f76:	f00a ff8e 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f86:	2201      	movs	r2, #1
 8004f88:	2104      	movs	r1, #4
 8004f8a:	f00a ff84 	bl	800fe96 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f00a ff7a 	bl	800fe96 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	f00a ff70 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	f00a ff66 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2104      	movs	r1, #4
 8004fda:	f00a ff5c 	bl	800fe96 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004fea:	2201      	movs	r2, #1
 8004fec:	2101      	movs	r1, #1
 8004fee:	f00a ff52 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ffe:	2204      	movs	r2, #4
 8005000:	2104      	movs	r1, #4
 8005002:	f00a ff48 	bl	800fe96 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	33c4      	adds	r3, #196	@ 0xc4
 8005010:	2201      	movs	r2, #1
 8005012:	2101      	movs	r1, #1
 8005014:	f00a ff3f 	bl	800fe96 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005024:	2201      	movs	r2, #1
 8005026:	2101      	movs	r1, #1
 8005028:	f00a ff35 	bl	800fe96 <arm_mat_init_f32>
}
 800502c:	bf00      	nop
 800502e:	3790      	adds	r7, #144	@ 0x90
 8005030:	46bd      	mov	sp, r7
 8005032:	bdb0      	pop	{r4, r5, r7, pc}
 8005034:	08012848 	.word	0x08012848

08005038 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800503c:	f3bf 8f4f 	dsb	sy
}
 8005040:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <__NVIC_SystemReset+0x24>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800504a:	4904      	ldr	r1, [pc, #16]	@ (800505c <__NVIC_SystemReset+0x24>)
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <__NVIC_SystemReset+0x28>)
 800504e:	4313      	orrs	r3, r2
 8005050:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005052:	f3bf 8f4f 	dsb	sy
}
 8005056:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <__NVIC_SystemReset+0x20>
 800505c:	e000ed00 	.word	0xe000ed00
 8005060:	05fa0004 	.word	0x05fa0004

08005064 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800506a:	f003 fc82 	bl	8008972 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800506e:	f000 f88d 	bl	800518c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005072:	f7ff fbfb 	bl	800486c <MX_GPIO_Init>
	MX_DMA_Init();
 8005076:	f7ff fbaf 	bl	80047d8 <MX_DMA_Init>
	MX_ADC1_Init();
 800507a:	f7ff faa1 	bl	80045c0 <MX_ADC1_Init>
	MX_TIM2_Init();
 800507e:	f002 fe8d 	bl	8007d9c <MX_TIM2_Init>
	MX_TIM3_Init();
 8005082:	f002 fed9 	bl	8007e38 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005086:	f002 ff2d 	bl	8007ee4 <MX_TIM4_Init>
	MX_TIM5_Init();
 800508a:	f002 ff81 	bl	8007f90 <MX_TIM5_Init>
	MX_TIM8_Init();
 800508e:	f002 ffd5 	bl	800803c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005092:	f003 fa97 	bl	80085c4 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005096:	f003 f88f 	bl	80081b8 <MX_TIM16_Init>
	MX_TIM1_Init();
 800509a:	f002 fdeb 	bl	8007c74 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800509e:	f003 fa47 	bl	8008530 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80050a2:	f001 ff6d 	bl	8006f80 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 80050a6:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <main+0xe4>)
 80050a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050aa:	4a28      	ldr	r2, [pc, #160]	@ (800514c <main+0xe8>)
 80050ac:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80050ae:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <main+0xec>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	4a28      	ldr	r2, [pc, #160]	@ (8005154 <main+0xf0>)
 80050b4:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 80050b6:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <main+0xf4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80050bc:	4b27      	ldr	r3, [pc, #156]	@ (800515c <main+0xf8>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 80050c2:	4b27      	ldr	r3, [pc, #156]	@ (8005160 <main+0xfc>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80050c8:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <main+0x100>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 80050ce:	4b26      	ldr	r3, [pc, #152]	@ (8005168 <main+0x104>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <main+0x108>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d032      	beq.n	8005142 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80050dc:	2101      	movs	r1, #1
 80050de:	4824      	ldr	r0, [pc, #144]	@ (8005170 <main+0x10c>)
 80050e0:	f005 fef4 	bl	800aecc <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80050f0:	2140      	movs	r1, #64	@ 0x40
 80050f2:	481f      	ldr	r0, [pc, #124]	@ (8005170 <main+0x10c>)
 80050f4:	f005 feea 	bl	800aecc <HAL_GPIO_ReadPin>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <main+0xd8>
 800510a:	79bb      	ldrb	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d015      	beq.n	800513c <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 8005110:	4b16      	ldr	r3, [pc, #88]	@ (800516c <main+0x108>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 8005116:	4b17      	ldr	r3, [pc, #92]	@ (8005174 <main+0x110>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800511c:	4b16      	ldr	r3, [pc, #88]	@ (8005178 <main+0x114>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 8005122:	4b16      	ldr	r3, [pc, #88]	@ (800517c <main+0x118>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005128:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <main+0x11c>)
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800512e:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <main+0x120>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005134:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <main+0x124>)
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <main+0xde>

			// Optional: Send debug message
			// printf("System already homed, skipping homing sequence\n");
		} else {
			// Not at home position - start homing
			start_homing_sequence(true);
 800513c:	2001      	movs	r0, #1
 800513e:	f000 f871 	bl	8005224 <start_homing_sequence>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <main+0xde>
 8005146:	bf00      	nop
 8005148:	20000440 	.word	0x20000440
 800514c:	2000027c 	.word	0x2000027c
 8005150:	2000049c 	.word	0x2000049c
 8005154:	200002bc 	.word	0x200002bc
 8005158:	20000360 	.word	0x20000360
 800515c:	20000369 	.word	0x20000369
 8005160:	20000368 	.word	0x20000368
 8005164:	20000364 	.word	0x20000364
 8005168:	2000039c 	.word	0x2000039c
 800516c:	2000012f 	.word	0x2000012f
 8005170:	48000400 	.word	0x48000400
 8005174:	2000035f 	.word	0x2000035f
 8005178:	2000035e 	.word	0x2000035e
 800517c:	2000035c 	.word	0x2000035c
 8005180:	2000035d 	.word	0x2000035d
 8005184:	20000358 	.word	0x20000358
 8005188:	200002fc 	.word	0x200002fc

0800518c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b094      	sub	sp, #80	@ 0x50
 8005190:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005192:	f107 0318 	add.w	r3, r7, #24
 8005196:	2238      	movs	r2, #56	@ 0x38
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f00b fbec 	bl	8010978 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f005 feee 	bl	800af90 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051be:	2340      	movs	r3, #64	@ 0x40
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051c2:	2302      	movs	r3, #2
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051c6:	2302      	movs	r3, #2
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80051ca:	2304      	movs	r3, #4
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80051ce:	2355      	movs	r3, #85	@ 0x55
 80051d0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051d2:	2302      	movs	r3, #2
 80051d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80051d6:	2302      	movs	r3, #2
 80051d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80051da:	2302      	movs	r3, #2
 80051dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80051de:	f107 0318 	add.w	r3, r7, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f005 ff88 	bl	800b0f8 <HAL_RCC_OscConfig>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <SystemClock_Config+0x66>
		Error_Handler();
 80051ee:	f001 febf 	bl	8006f70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80051f2:	230f      	movs	r3, #15
 80051f4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051f6:	2303      	movs	r3, #3
 80051f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	2104      	movs	r1, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f006 fa86 	bl	800b71c <HAL_RCC_ClockConfig>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <SystemClock_Config+0x8e>
		Error_Handler();
 8005216:	f001 feab 	bl	8006f70 <Error_Handler>
	}
}
 800521a:	bf00      	nop
 800521c:	3750      	adds	r7, #80	@ 0x50
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
    if (homing_active)
 800522e:	4b2d      	ldr	r3, [pc, #180]	@ (80052e4 <start_homing_sequence+0xc0>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d151      	bne.n	80052da <start_homing_sequence+0xb6>
        return;

    // Check if already homed (for non-startup calls too)
    bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8005236:	2101      	movs	r1, #1
 8005238:	482b      	ldr	r0, [pc, #172]	@ (80052e8 <start_homing_sequence+0xc4>)
 800523a:	f005 fe47 	bl	800aecc <HAL_GPIO_ReadPin>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
    bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800524a:	2140      	movs	r1, #64	@ 0x40
 800524c:	4826      	ldr	r0, [pc, #152]	@ (80052e8 <start_homing_sequence+0xc4>)
 800524e:	f005 fe3d 	bl	800aecc <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	73bb      	strb	r3, [r7, #14]

    if (up_photo_detected && prox_detected) {
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <start_homing_sequence+0x6c>
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <start_homing_sequence+0x6c>
        // Already at home position
        homing_active = false;
 800526a:	4b1e      	ldr	r3, [pc, #120]	@ (80052e4 <start_homing_sequence+0xc0>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
        homing_state = HOMING_IDLE;
 8005270:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <start_homing_sequence+0xc8>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
        first_startup = false;
 8005276:	4b1e      	ldr	r3, [pc, #120]	@ (80052f0 <start_homing_sequence+0xcc>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]

        // Clear sensor flags
        up_photo = false;
 800527c:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <start_homing_sequence+0xd0>)
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
        low_photo = false;
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <start_homing_sequence+0xd4>)
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
        prox_count = 0;
 8005288:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <start_homing_sequence+0xd8>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

        // Optional: Send debug message
        // printf("Already at home position, homing not needed\n");
        return;
 800528e:	e025      	b.n	80052dc <start_homing_sequence+0xb8>
    }

    // Start homing sequence
    homing_active = true;
 8005290:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <start_homing_sequence+0xc0>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
    motion_sequence_state = MOTION_IDLE;
 8005296:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <start_homing_sequence+0xdc>)
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
    prox_count = 0;
 800529c:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <start_homing_sequence+0xd8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    up_photo = false;
 80052a2:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <start_homing_sequence+0xd0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
    low_photo = false;
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <start_homing_sequence+0xd4>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]

    if (is_startup || first_startup) {
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <start_homing_sequence+0x98>
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <start_homing_sequence+0xcc>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <start_homing_sequence+0xa0>
        // STARTUP SEQUENCE: Skip HOMING_REV_TO_ZERO_DEG
        homing_state = HOMING_PEN_UP;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <start_homing_sequence+0xc8>)
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e00b      	b.n	80052dc <start_homing_sequence+0xb8>
    } else {
        // MANUAL HOMING: Include HOMING_REV_TO_ZERO_DEG
        if (up_photo_detected) {
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <start_homing_sequence+0xae>
            homing_state = HOMING_REV_TO_ZERO_DEG; // Go to zero first, then find prox
 80052ca:	4b08      	ldr	r3, [pc, #32]	@ (80052ec <start_homing_sequence+0xc8>)
 80052cc:	2207      	movs	r2, #7
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e004      	b.n	80052dc <start_homing_sequence+0xb8>
        } else {
            homing_state = HOMING_PEN_UP;
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <start_homing_sequence+0xc8>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e000      	b.n	80052dc <start_homing_sequence+0xb8>
        return;
 80052da:	bf00      	nop
        }
    }
}
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	2000035f 	.word	0x2000035f
 80052e8:	48000400 	.word	0x48000400
 80052ec:	2000035e 	.word	0x2000035e
 80052f0:	2000012f 	.word	0x2000012f
 80052f4:	2000035c 	.word	0x2000035c
 80052f8:	2000035d 	.word	0x2000035d
 80052fc:	20000358 	.word	0x20000358
 8005300:	200002fc 	.word	0x200002fc

08005304 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	ed2d 8b02 	vpush	{d8}
 800530c:	b093      	sub	sp, #76	@ 0x4c
 800530e:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005310:	4b97      	ldr	r3, [pc, #604]	@ (8005570 <update_homing_sequence+0x26c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 84e3 	bne.w	8005ce6 <update_homing_sequence+0x9e2>
		return;

	switch (homing_state) {
 8005320:	4b94      	ldr	r3, [pc, #592]	@ (8005574 <update_homing_sequence+0x270>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	2b0a      	cmp	r3, #10
 8005328:	f200 84df 	bhi.w	8005cea <update_homing_sequence+0x9e6>
 800532c:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <update_homing_sequence+0x30>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005361 	.word	0x08005361
 8005338:	08005385 	.word	0x08005385
 800533c:	080053f5 	.word	0x080053f5
 8005340:	08005541 	.word	0x08005541
 8005344:	080055b5 	.word	0x080055b5
 8005348:	080056fb 	.word	0x080056fb
 800534c:	08005789 	.word	0x08005789
 8005350:	08005b55 	.word	0x08005b55
 8005354:	08005b83 	.word	0x08005b83
 8005358:	08005cb7 	.word	0x08005cb7
 800535c:	08005ce3 	.word	0x08005ce3
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005360:	f002 fa74 	bl	800784c <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005364:	4b84      	ldr	r3, [pc, #528]	@ (8005578 <update_homing_sequence+0x274>)
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800536c:	4b83      	ldr	r3, [pc, #524]	@ (800557c <update_homing_sequence+0x278>)
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005374:	4b82      	ldr	r3, [pc, #520]	@ (8005580 <update_homing_sequence+0x27c>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800537a:	4b7e      	ldr	r3, [pc, #504]	@ (8005574 <update_homing_sequence+0x270>)
 800537c:	2202      	movs	r2, #2
 800537e:	701a      	strb	r2, [r3, #0]
		break;
 8005380:	f000 bcc6 	b.w	8005d10 <update_homing_sequence+0xa0c>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005384:	4b7c      	ldr	r3, [pc, #496]	@ (8005578 <update_homing_sequence+0x274>)
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800538c:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <update_homing_sequence+0x278>)
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005394:	4b7a      	ldr	r3, [pc, #488]	@ (8005580 <update_homing_sequence+0x27c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a79      	ldr	r2, [pc, #484]	@ (8005580 <update_homing_sequence+0x27c>)
 800539c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 800539e:	4b78      	ldr	r3, [pc, #480]	@ (8005580 <update_homing_sequence+0x27c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80053a6:	f0c0 84a2 	bcc.w	8005cee <update_homing_sequence+0x9ea>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80053aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053ae:	4875      	ldr	r0, [pc, #468]	@ (8005584 <update_homing_sequence+0x280>)
 80053b0:	f005 fd8c 	bl	800aecc <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	4b71      	ldr	r3, [pc, #452]	@ (8005588 <update_homing_sequence+0x284>)
 80053c2:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 80053c4:	4b70      	ldr	r3, [pc, #448]	@ (8005588 <update_homing_sequence+0x284>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <update_homing_sequence+0xe6>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80053ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005580 <update_homing_sequence+0x27c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80053d4:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <update_homing_sequence+0x270>)
 80053d6:	2204      	movs	r2, #4
 80053d8:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 80053da:	4b6b      	ldr	r3, [pc, #428]	@ (8005588 <update_homing_sequence+0x284>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 80053e0:	4b6a      	ldr	r3, [pc, #424]	@ (800558c <update_homing_sequence+0x288>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 80053e6:	f000 bc82 	b.w	8005cee <update_homing_sequence+0x9ea>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 80053ea:	4b62      	ldr	r3, [pc, #392]	@ (8005574 <update_homing_sequence+0x270>)
 80053ec:	2203      	movs	r2, #3
 80053ee:	701a      	strb	r2, [r3, #0]
		break;
 80053f0:	f000 bc7d 	b.w	8005cee <update_homing_sequence+0x9ea>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80053f4:	4b60      	ldr	r3, [pc, #384]	@ (8005578 <update_homing_sequence+0x274>)
 80053f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80053fa:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005590 <update_homing_sequence+0x28c>
 80053fe:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005402:	4b5d      	ldr	r3, [pc, #372]	@ (8005578 <update_homing_sequence+0x274>)
 8005404:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005408:	4b5b      	ldr	r3, [pc, #364]	@ (8005578 <update_homing_sequence+0x274>)
 800540a:	edd3 7a06 	vldr	s15, [r3, #24]
 800540e:	eeb0 0a67 	vmov.f32	s0, s15
 8005412:	4860      	ldr	r0, [pc, #384]	@ (8005594 <update_homing_sequence+0x290>)
 8005414:	f7fb ff00 	bl	8001218 <PID_CONTROLLER_Compute>
 8005418:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800541c:	4b5e      	ldr	r3, [pc, #376]	@ (8005598 <update_homing_sequence+0x294>)
 800541e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	f7fb fb4d 	bl	8000ac4 <__aeabi_d2iz>
 800542a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800542c:	4b5a      	ldr	r3, [pc, #360]	@ (8005598 <update_homing_sequence+0x294>)
 800542e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005432:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 800543a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800543e:	f7fb fb41 	bl	8000ac4 <__aeabi_d2iz>
 8005442:	4603      	mov	r3, r0
 8005444:	4619      	mov	r1, r3
 8005446:	4620      	mov	r0, r4
 8005448:	eeb0 0a48 	vmov.f32	s0, s16
 800544c:	f7fb fe82 	bl	8001154 <PWM_Satuation>
 8005450:	ee07 0a90 	vmov	s15, r0
 8005454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005458:	4b47      	ldr	r3, [pc, #284]	@ (8005578 <update_homing_sequence+0x274>)
 800545a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800545e:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005462:	484e      	ldr	r0, [pc, #312]	@ (800559c <update_homing_sequence+0x298>)
 8005464:	f7fc fa1c 	bl	80018a0 <PRISMATIC_MOTOR_FFD_Compute>
 8005468:	eef0 7a40 	vmov.f32	s15, s0
 800546c:	4b42      	ldr	r3, [pc, #264]	@ (8005578 <update_homing_sequence+0x274>)
 800546e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005472:	4b4b      	ldr	r3, [pc, #300]	@ (80055a0 <update_homing_sequence+0x29c>)
 8005474:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005478:	4b4a      	ldr	r3, [pc, #296]	@ (80055a4 <update_homing_sequence+0x2a0>)
 800547a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800547e:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80055a8 <update_homing_sequence+0x2a4>
 8005482:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005486:	eeb0 1a66 	vmov.f32	s2, s13
 800548a:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80055ac <update_homing_sequence+0x2a8>
 800548e:	eeb0 0a47 	vmov.f32	s0, s14
 8005492:	4847      	ldr	r0, [pc, #284]	@ (80055b0 <update_homing_sequence+0x2ac>)
 8005494:	f7fc fa97 	bl	80019c6 <PRISMATIC_MOTOR_DFD_Compute>
 8005498:	eef0 7a40 	vmov.f32	s15, s0
 800549c:	4b36      	ldr	r3, [pc, #216]	@ (8005578 <update_homing_sequence+0x274>)
 800549e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80054a2:	4b35      	ldr	r3, [pc, #212]	@ (8005578 <update_homing_sequence+0x274>)
 80054a4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80054a8:	4b33      	ldr	r3, [pc, #204]	@ (8005578 <update_homing_sequence+0x274>)
 80054aa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80054ae:	4b32      	ldr	r3, [pc, #200]	@ (8005578 <update_homing_sequence+0x274>)
 80054b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80054b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005578 <update_homing_sequence+0x274>)
 80054be:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80054c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005578 <update_homing_sequence+0x274>)
 80054c4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80054c8:	4b33      	ldr	r3, [pc, #204]	@ (8005598 <update_homing_sequence+0x294>)
 80054ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f7fb faf7 	bl	8000ac4 <__aeabi_d2iz>
 80054d6:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80054d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005598 <update_homing_sequence+0x294>)
 80054da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80054de:	623a      	str	r2, [r7, #32]
 80054e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80054e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80054ea:	f7fb faeb 	bl	8000ac4 <__aeabi_d2iz>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4619      	mov	r1, r3
 80054f2:	4620      	mov	r0, r4
 80054f4:	eeb0 0a48 	vmov.f32	s0, s16
 80054f8:	f7fb fe2c 	bl	8001154 <PWM_Satuation>
 80054fc:	ee07 0a90 	vmov	s15, r0
 8005500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005504:	4b1c      	ldr	r3, [pc, #112]	@ (8005578 <update_homing_sequence+0x274>)
 8005506:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <update_homing_sequence+0x284>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 83ee 	beq.w	8005cf2 <update_homing_sequence+0x9ee>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005516:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <update_homing_sequence+0x274>)
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 800551e:	4b17      	ldr	r3, [pc, #92]	@ (800557c <update_homing_sequence+0x278>)
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005526:	4b16      	ldr	r3, [pc, #88]	@ (8005580 <update_homing_sequence+0x27c>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 800552c:	4b11      	ldr	r3, [pc, #68]	@ (8005574 <update_homing_sequence+0x270>)
 800552e:	2204      	movs	r2, #4
 8005530:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005532:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <update_homing_sequence+0x284>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005538:	4b14      	ldr	r3, [pc, #80]	@ (800558c <update_homing_sequence+0x288>)
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800553e:	e3d8      	b.n	8005cf2 <update_homing_sequence+0x9ee>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005540:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <update_homing_sequence+0x274>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005548:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <update_homing_sequence+0x278>)
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <update_homing_sequence+0x27c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <update_homing_sequence+0x27c>)
 8005558:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 800555a:	4b09      	ldr	r3, [pc, #36]	@ (8005580 <update_homing_sequence+0x27c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005562:	f0c0 83c8 	bcc.w	8005cf6 <update_homing_sequence+0x9f2>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005566:	4b03      	ldr	r3, [pc, #12]	@ (8005574 <update_homing_sequence+0x270>)
 8005568:	2205      	movs	r2, #5
 800556a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800556c:	e3c3      	b.n	8005cf6 <update_homing_sequence+0x9f2>
 800556e:	bf00      	nop
 8005570:	2000035f 	.word	0x2000035f
 8005574:	2000035e 	.word	0x2000035e
 8005578:	2000027c 	.word	0x2000027c
 800557c:	200002bc 	.word	0x200002bc
 8005580:	20000354 	.word	0x20000354
 8005584:	48000400 	.word	0x48000400
 8005588:	2000035d 	.word	0x2000035d
 800558c:	2000035c 	.word	0x2000035c
 8005590:	437a0000 	.word	0x437a0000
 8005594:	20000520 	.word	0x20000520
 8005598:	20000080 	.word	0x20000080
 800559c:	20000598 	.word	0x20000598
 80055a0:	2000049c 	.word	0x2000049c
 80055a4:	20000440 	.word	0x20000440
 80055a8:	447a0000 	.word	0x447a0000
 80055ac:	00000000 	.word	0x00000000
 80055b0:	2000059c 	.word	0x2000059c

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80055b4:	4b63      	ldr	r3, [pc, #396]	@ (8005744 <update_homing_sequence+0x440>)
 80055b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80055ba:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8005748 <update_homing_sequence+0x444>
 80055be:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 80055c2:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <update_homing_sequence+0x440>)
 80055c4:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80055c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005744 <update_homing_sequence+0x440>)
 80055ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80055ce:	eeb0 0a67 	vmov.f32	s0, s15
 80055d2:	485e      	ldr	r0, [pc, #376]	@ (800574c <update_homing_sequence+0x448>)
 80055d4:	f7fb fe20 	bl	8001218 <PID_CONTROLLER_Compute>
 80055d8:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80055dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005750 <update_homing_sequence+0x44c>)
 80055de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	f7fb fa6d 	bl	8000ac4 <__aeabi_d2iz>
 80055ea:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80055ec:	4b58      	ldr	r3, [pc, #352]	@ (8005750 <update_homing_sequence+0x44c>)
 80055ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055f2:	61ba      	str	r2, [r7, #24]
 80055f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80055f8:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 80055fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055fe:	f7fb fa61 	bl	8000ac4 <__aeabi_d2iz>
 8005602:	4603      	mov	r3, r0
 8005604:	4619      	mov	r1, r3
 8005606:	4620      	mov	r0, r4
 8005608:	eeb0 0a48 	vmov.f32	s0, s16
 800560c:	f7fb fda2 	bl	8001154 <PWM_Satuation>
 8005610:	ee07 0a90 	vmov	s15, r0
 8005614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005618:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <update_homing_sequence+0x440>)
 800561a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800561e:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005622:	484c      	ldr	r0, [pc, #304]	@ (8005754 <update_homing_sequence+0x450>)
 8005624:	f7fc f93c 	bl	80018a0 <PRISMATIC_MOTOR_FFD_Compute>
 8005628:	eef0 7a40 	vmov.f32	s15, s0
 800562c:	4b45      	ldr	r3, [pc, #276]	@ (8005744 <update_homing_sequence+0x440>)
 800562e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005632:	4b49      	ldr	r3, [pc, #292]	@ (8005758 <update_homing_sequence+0x454>)
 8005634:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005638:	4b48      	ldr	r3, [pc, #288]	@ (800575c <update_homing_sequence+0x458>)
 800563a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800563e:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8005760 <update_homing_sequence+0x45c>
 8005642:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005646:	eeb0 1a66 	vmov.f32	s2, s13
 800564a:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8005764 <update_homing_sequence+0x460>
 800564e:	eeb0 0a47 	vmov.f32	s0, s14
 8005652:	4845      	ldr	r0, [pc, #276]	@ (8005768 <update_homing_sequence+0x464>)
 8005654:	f7fc f9b7 	bl	80019c6 <PRISMATIC_MOTOR_DFD_Compute>
 8005658:	eef0 7a40 	vmov.f32	s15, s0
 800565c:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <update_homing_sequence+0x440>)
 800565e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005662:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <update_homing_sequence+0x440>)
 8005664:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <update_homing_sequence+0x440>)
 800566a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800566e:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <update_homing_sequence+0x440>)
 8005670:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567c:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <update_homing_sequence+0x440>)
 800567e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005682:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <update_homing_sequence+0x440>)
 8005684:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005688:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <update_homing_sequence+0x44c>)
 800568a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	f7fb fa17 	bl	8000ac4 <__aeabi_d2iz>
 8005696:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005698:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <update_homing_sequence+0x44c>)
 800569a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800569e:	613a      	str	r2, [r7, #16]
 80056a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80056a4:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056aa:	f7fb fa0b 	bl	8000ac4 <__aeabi_d2iz>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4619      	mov	r1, r3
 80056b2:	4620      	mov	r0, r4
 80056b4:	eeb0 0a48 	vmov.f32	s0, s16
 80056b8:	f7fb fd4c 	bl	8001154 <PWM_Satuation>
 80056bc:	ee07 0a90 	vmov	s15, r0
 80056c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <update_homing_sequence+0x440>)
 80056c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80056ca:	4b28      	ldr	r3, [pc, #160]	@ (800576c <update_homing_sequence+0x468>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8312 	beq.w	8005cfa <update_homing_sequence+0x9f6>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80056d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <update_homing_sequence+0x440>)
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80056de:	4b24      	ldr	r3, [pc, #144]	@ (8005770 <update_homing_sequence+0x46c>)
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80056e6:	4b23      	ldr	r3, [pc, #140]	@ (8005774 <update_homing_sequence+0x470>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 80056ec:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <update_homing_sequence+0x474>)
 80056ee:	2206      	movs	r2, #6
 80056f0:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 80056f2:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <update_homing_sequence+0x468>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80056f8:	e2ff      	b.n	8005cfa <update_homing_sequence+0x9f6>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 80056fa:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <update_homing_sequence+0x440>)
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005702:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <update_homing_sequence+0x46c>)
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <update_homing_sequence+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <update_homing_sequence+0x470>)
 8005712:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005714:	4b17      	ldr	r3, [pc, #92]	@ (8005774 <update_homing_sequence+0x470>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800571c:	f0c0 82ef 	bcc.w	8005cfe <update_homing_sequence+0x9fa>
			if (first_startup) {
 8005720:	4b16      	ldr	r3, [pc, #88]	@ (800577c <update_homing_sequence+0x478>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <update_homing_sequence+0x432>
				// STARTUP: Skip REV_TO_ZERO_DEG, go directly to find prox sensor
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005728:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <update_homing_sequence+0x474>)
 800572a:	2209      	movs	r2, #9
 800572c:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter
 800572e:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <update_homing_sequence+0x47c>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005734:	e2e3      	b.n	8005cfe <update_homing_sequence+0x9fa>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005736:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <update_homing_sequence+0x474>)
 8005738:	2207      	movs	r2, #7
 800573a:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 800573c:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <update_homing_sequence+0x480>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
		break;
 8005742:	e2dc      	b.n	8005cfe <update_homing_sequence+0x9fa>
 8005744:	2000027c 	.word	0x2000027c
 8005748:	c37a0000 	.word	0xc37a0000
 800574c:	20000520 	.word	0x20000520
 8005750:	20000080 	.word	0x20000080
 8005754:	20000598 	.word	0x20000598
 8005758:	2000049c 	.word	0x2000049c
 800575c:	20000440 	.word	0x20000440
 8005760:	447a0000 	.word	0x447a0000
 8005764:	00000000 	.word	0x00000000
 8005768:	2000059c 	.word	0x2000059c
 800576c:	2000035c 	.word	0x2000035c
 8005770:	200002bc 	.word	0x200002bc
 8005774:	20000354 	.word	0x20000354
 8005778:	2000035e 	.word	0x2000035e
 800577c:	2000012f 	.word	0x2000012f
 8005780:	20000358 	.word	0x20000358
 8005784:	2000036a 	.word	0x2000036a

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005788:	4bc4      	ldr	r3, [pc, #784]	@ (8005a9c <update_homing_sequence+0x798>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f083 0301 	eor.w	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d06c      	beq.n	8005870 <update_homing_sequence+0x56c>
			// Clear/initialize the static structures
			memset(&revZeroEva, 0, sizeof(Trapezoidal_EvaStruct));
 8005796:	2214      	movs	r2, #20
 8005798:	2100      	movs	r1, #0
 800579a:	48c1      	ldr	r0, [pc, #772]	@ (8005aa0 <update_homing_sequence+0x79c>)
 800579c:	f00b f8ec 	bl	8010978 <memset>
			memset(&revZeroGen, 0, sizeof(Trapezoidal_GenStruct));
 80057a0:	2214      	movs	r2, #20
 80057a2:	2100      	movs	r1, #0
 80057a4:	48bf      	ldr	r0, [pc, #764]	@ (8005aa4 <update_homing_sequence+0x7a0>)
 80057a6:	f00b f8e7 	bl	8010978 <memset>

			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 80057aa:	4bbf      	ldr	r3, [pc, #764]	@ (8005aa8 <update_homing_sequence+0x7a4>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	647b      	str	r3, [r7, #68]	@ 0x44
			float normalized_current = normalize_angle(current_rev_pos);
 80057b0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80057b4:	f000 face 	bl	8005d54 <normalize_angle>
 80057b8:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
			float current_deg = normalized_current * 180.0f / PI;
 80057bc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80057c0:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005aac <update_homing_sequence+0x7a8>
 80057c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057c8:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8005ab0 <update_homing_sequence+0x7ac>
 80057cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057d0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	63bb      	str	r3, [r7, #56]	@ 0x38
			float movement_deg = calculate_movement_deg(current_deg,
 80057da:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 80057de:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80057e2:	f000 fadd 	bl	8005da0 <calculate_movement_deg>
 80057e6:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 80057ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80057ee:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005ab0 <update_homing_sequence+0x7ac>
 80057f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057f6:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8005aac <update_homing_sequence+0x7a8>
 80057fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 8005802:	4aac      	ldr	r2, [pc, #688]	@ (8005ab4 <update_homing_sequence+0x7b0>)
 8005804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005806:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005808:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800580c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005814:	4ba8      	ldr	r3, [pc, #672]	@ (8005ab8 <update_homing_sequence+0x7b4>)
 8005816:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 800581a:	4ba6      	ldr	r3, [pc, #664]	@ (8005ab4 <update_homing_sequence+0x7b0>)
 800581c:	ed93 8a00 	vldr	s16, [r3]
 8005820:	4ba5      	ldr	r3, [pc, #660]	@ (8005ab8 <update_homing_sequence+0x7b4>)
 8005822:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005826:	4ba5      	ldr	r3, [pc, #660]	@ (8005abc <update_homing_sequence+0x7b8>)
 8005828:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	f7fb f990 	bl	8000b54 <__aeabi_d2f>
 8005834:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005836:	4ba1      	ldr	r3, [pc, #644]	@ (8005abc <update_homing_sequence+0x7b8>)
 8005838:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	f7fb f988 	bl	8000b54 <__aeabi_d2f>
 8005844:	4603      	mov	r3, r0
 8005846:	ee01 3a90 	vmov	s3, r3
 800584a:	ee01 4a10 	vmov	s2, r4
 800584e:	eef0 0a68 	vmov.f32	s1, s17
 8005852:	eeb0 0a48 	vmov.f32	s0, s16
 8005856:	4893      	ldr	r0, [pc, #588]	@ (8005aa4 <update_homing_sequence+0x7a0>)
 8005858:	f7fe fa2e 	bl	8003cb8 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 800585c:	4b90      	ldr	r3, [pc, #576]	@ (8005aa0 <update_homing_sequence+0x79c>)
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 8005864:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa0 <update_homing_sequence+0x79c>)
 8005866:	2200      	movs	r2, #0
 8005868:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 800586a:	4b8c      	ldr	r3, [pc, #560]	@ (8005a9c <update_homing_sequence+0x798>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 8005870:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa0 <update_homing_sequence+0x79c>)
 8005872:	7c1b      	ldrb	r3, [r3, #16]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8241 	beq.w	8005d02 <update_homing_sequence+0x9fe>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005880:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab4 <update_homing_sequence+0x7b0>)
 8005882:	ed93 8a00 	vldr	s16, [r3]
 8005886:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab8 <update_homing_sequence+0x7b4>)
 8005888:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 800588c:	4b8b      	ldr	r3, [pc, #556]	@ (8005abc <update_homing_sequence+0x7b8>)
 800588e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	f7fb f95d 	bl	8000b54 <__aeabi_d2f>
 800589a:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800589c:	4b87      	ldr	r3, [pc, #540]	@ (8005abc <update_homing_sequence+0x7b8>)
 800589e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fb f955 	bl	8000b54 <__aeabi_d2f>
 80058aa:	4603      	mov	r3, r0
 80058ac:	ee01 3a90 	vmov	s3, r3
 80058b0:	ee01 4a10 	vmov	s2, r4
 80058b4:	eef0 0a68 	vmov.f32	s1, s17
 80058b8:	eeb0 0a48 	vmov.f32	s0, s16
 80058bc:	4978      	ldr	r1, [pc, #480]	@ (8005aa0 <update_homing_sequence+0x79c>)
 80058be:	4879      	ldr	r0, [pc, #484]	@ (8005aa4 <update_homing_sequence+0x7a0>)
 80058c0:	f7fe fabc 	bl	8003e3c <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 80058c4:	4b76      	ldr	r3, [pc, #472]	@ (8005aa0 <update_homing_sequence+0x79c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80058ca:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 80058cc:	4b74      	ldr	r3, [pc, #464]	@ (8005aa0 <update_homing_sequence+0x79c>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a7b      	ldr	r2, [pc, #492]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80058d2:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 80058d4:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80058d6:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 80058da:	4b73      	ldr	r3, [pc, #460]	@ (8005aa8 <update_homing_sequence+0x7a4>)
 80058dc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80058e0:	eeb0 0a67 	vmov.f32	s0, s15
 80058e4:	f000 fa36 	bl	8005d54 <normalize_angle>
 80058e8:	eef0 7a40 	vmov.f32	s15, s0
 80058ec:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 80058f0:	4b73      	ldr	r3, [pc, #460]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80058f2:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 80058f6:	4b72      	ldr	r3, [pc, #456]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80058f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80058fc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005ab0 <update_homing_sequence+0x7ac>
 8005900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005908:	dd09      	ble.n	800591e <update_homing_sequence+0x61a>
				revolute_axis.pos_error -= 2.0f * PI;
 800590a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 800590c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005910:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005ac4 <update_homing_sequence+0x7c0>
 8005914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005918:	4b69      	ldr	r3, [pc, #420]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 800591a:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 800591e:	4b68      	ldr	r3, [pc, #416]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005920:	edd3 7a05 	vldr	s15, [r3, #20]
 8005924:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005ac8 <update_homing_sequence+0x7c4>
 8005928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005930:	d509      	bpl.n	8005946 <update_homing_sequence+0x642>
				revolute_axis.pos_error += 2.0f * PI;
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005934:	edd3 7a05 	vldr	s15, [r3, #20]
 8005938:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8005ac4 <update_homing_sequence+0x7c0>
 800593c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005940:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005942:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005946:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005948:	edd3 7a05 	vldr	s15, [r3, #20]
 800594c:	eeb0 0a67 	vmov.f32	s0, s15
 8005950:	485e      	ldr	r0, [pc, #376]	@ (8005acc <update_homing_sequence+0x7c8>)
 8005952:	f7fb fc61 	bl	8001218 <PID_CONTROLLER_Compute>
 8005956:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 800595a:	4b58      	ldr	r3, [pc, #352]	@ (8005abc <update_homing_sequence+0x7b8>)
 800595c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f7fb f8ae 	bl	8000ac4 <__aeabi_d2iz>
 8005968:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 800596a:	4b54      	ldr	r3, [pc, #336]	@ (8005abc <update_homing_sequence+0x7b8>)
 800596c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005970:	60ba      	str	r2, [r7, #8]
 8005972:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005976:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8005978:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800597c:	f7fb f8a2 	bl	8000ac4 <__aeabi_d2iz>
 8005980:	4603      	mov	r3, r0
 8005982:	4619      	mov	r1, r3
 8005984:	4620      	mov	r0, r4
 8005986:	eeb0 0a48 	vmov.f32	s0, s16
 800598a:	f7fb fbe3 	bl	8001154 <PWM_Satuation>
 800598e:	ee07 0a90 	vmov	s15, r0
 8005992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005996:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005998:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 800599c:	4b48      	ldr	r3, [pc, #288]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 800599e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80059a2:	4b47      	ldr	r3, [pc, #284]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80059a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80059a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ac:	4b44      	ldr	r3, [pc, #272]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80059ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80059b2:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 80059b6:	4b42      	ldr	r3, [pc, #264]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80059b8:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 80059bc:	4b40      	ldr	r3, [pc, #256]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 80059be:	edd3 7a06 	vldr	s15, [r3, #24]
 80059c2:	eeb0 0a67 	vmov.f32	s0, s15
 80059c6:	4842      	ldr	r0, [pc, #264]	@ (8005ad0 <update_homing_sequence+0x7cc>)
 80059c8:	f7fb fc26 	bl	8001218 <PID_CONTROLLER_Compute>
 80059cc:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 80059d0:	4b3a      	ldr	r3, [pc, #232]	@ (8005abc <update_homing_sequence+0x7b8>)
 80059d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fb f873 	bl	8000ac4 <__aeabi_d2iz>
 80059de:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <update_homing_sequence+0x7b8>)
 80059e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80059e6:	603a      	str	r2, [r7, #0]
 80059e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80059ec:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(
 80059ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f2:	f7fb f867 	bl	8000ac4 <__aeabi_d2iz>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4619      	mov	r1, r3
 80059fa:	4620      	mov	r0, r4
 80059fc:	eeb0 0a48 	vmov.f32	s0, s16
 8005a00:	f7fb fba8 	bl	8001154 <PWM_Satuation>
 8005a04:	ee07 0a90 	vmov	s15, r0
 8005a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005a12:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a18:	eeb0 0a67 	vmov.f32	s0, s15
 8005a1c:	482d      	ldr	r0, [pc, #180]	@ (8005ad4 <update_homing_sequence+0x7d0>)
 8005a1e:	f7fb fdbb 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005a22:	eef0 7a40 	vmov.f32	s15, s0
 8005a26:	4b26      	ldr	r3, [pc, #152]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a28:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa8 <update_homing_sequence+0x7a4>)
 8005a2e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005a32:	4b29      	ldr	r3, [pc, #164]	@ (8005ad8 <update_homing_sequence+0x7d4>)
 8005a34:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005a38:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8005adc <update_homing_sequence+0x7d8>
 8005a3c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005a40:	eef0 0a66 	vmov.f32	s1, s13
 8005a44:	eeb0 0a47 	vmov.f32	s0, s14
 8005a48:	4825      	ldr	r0, [pc, #148]	@ (8005ae0 <update_homing_sequence+0x7dc>)
 8005a4a:	f7fb fe39 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8005a4e:	eef0 7a40 	vmov.f32	s15, s0
 8005a52:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a54:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005a58:	4b19      	ldr	r3, [pc, #100]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a5a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005a5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a60:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005a64:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a72:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a74:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <update_homing_sequence+0x7bc>)
 8005a7a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <update_homing_sequence+0x7b8>)
 8005a80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fb f81c 	bl	8000ac4 <__aeabi_d2iz>
 8005a8c:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005abc <update_homing_sequence+0x7b8>)
 8005a90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005a94:	4615      	mov	r5, r2
 8005a96:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
 8005a9a:	e023      	b.n	8005ae4 <update_homing_sequence+0x7e0>
 8005a9c:	2000036a 	.word	0x2000036a
 8005aa0:	2000036c 	.word	0x2000036c
 8005aa4:	20000380 	.word	0x20000380
 8005aa8:	2000049c 	.word	0x2000049c
 8005aac:	43340000 	.word	0x43340000
 8005ab0:	40490fdb 	.word	0x40490fdb
 8005ab4:	20000394 	.word	0x20000394
 8005ab8:	20000398 	.word	0x20000398
 8005abc:	20000000 	.word	0x20000000
 8005ac0:	200002bc 	.word	0x200002bc
 8005ac4:	40c90fdb 	.word	0x40c90fdb
 8005ac8:	c0490fdb 	.word	0xc0490fdb
 8005acc:	20000548 	.word	0x20000548
 8005ad0:	20000570 	.word	0x20000570
 8005ad4:	200005a4 	.word	0x200005a4
 8005ad8:	20000440 	.word	0x20000440
 8005adc:	447a0000 	.word	0x447a0000
 8005ae0:	200005a8 	.word	0x200005a8
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	f7fa ffec 	bl	8000ac4 <__aeabi_d2iz>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4619      	mov	r1, r3
 8005af0:	4620      	mov	r0, r4
 8005af2:	eeb0 0a48 	vmov.f32	s0, s16
 8005af6:	f7fb fb2d 	bl	8001154 <PWM_Satuation>
 8005afa:	ee07 0a90 	vmov	s15, r0
 8005afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b02:	4b86      	ldr	r3, [pc, #536]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b04:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 8005b08:	4b85      	ldr	r3, [pc, #532]	@ (8005d20 <update_homing_sequence+0xa1c>)
 8005b0a:	7c1b      	ldrb	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80f8 	beq.w	8005d02 <update_homing_sequence+0x9fe>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 8005b12:	4b82      	ldr	r3, [pc, #520]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 8005b1a:	4b82      	ldr	r3, [pc, #520]	@ (8005d24 <update_homing_sequence+0xa20>)
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 8005b22:	4b7e      	ldr	r3, [pc, #504]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 8005b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 8005b32:	4b7a      	ldr	r3, [pc, #488]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005b40:	4b7a      	ldr	r3, [pc, #488]	@ (8005d2c <update_homing_sequence+0xa28>)
 8005b42:	2208      	movs	r2, #8
 8005b44:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 8005b46:	4b7a      	ldr	r3, [pc, #488]	@ (8005d30 <update_homing_sequence+0xa2c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 8005b4c:	4b79      	ldr	r3, [pc, #484]	@ (8005d34 <update_homing_sequence+0xa30>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8005b52:	e0d6      	b.n	8005d02 <update_homing_sequence+0x9fe>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005b54:	4b73      	ldr	r3, [pc, #460]	@ (8005d24 <update_homing_sequence+0xa20>)
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b64:	4b70      	ldr	r3, [pc, #448]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005b6c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005b76:	f0c0 80c6 	bcc.w	8005d06 <update_homing_sequence+0xa02>
			homing_state = HOMING_REV_CW_TO_PROX1;
 8005b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8005d2c <update_homing_sequence+0xa28>)
 8005b7c:	2209      	movs	r2, #9
 8005b7e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b80:	e0c1      	b.n	8005d06 <update_homing_sequence+0xa02>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005b82:	4b66      	ldr	r3, [pc, #408]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b84:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b88:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005b90:	4b62      	ldr	r3, [pc, #392]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b92:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005b96:	4b61      	ldr	r3, [pc, #388]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005b98:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba0:	4865      	ldr	r0, [pc, #404]	@ (8005d38 <update_homing_sequence+0xa34>)
 8005ba2:	f7fb fb39 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ba6:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005baa:	4b64      	ldr	r3, [pc, #400]	@ (8005d3c <update_homing_sequence+0xa38>)
 8005bac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f7fa ff86 	bl	8000ac4 <__aeabi_d2iz>
 8005bb8:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005bba:	4b60      	ldr	r3, [pc, #384]	@ (8005d3c <update_homing_sequence+0xa38>)
 8005bbc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	4659      	mov	r1, fp
 8005bca:	f7fa ff7b 	bl	8000ac4 <__aeabi_d2iz>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8005bd8:	f7fb fabc 	bl	8001154 <PWM_Satuation>
 8005bdc:	ee07 0a90 	vmov	s15, r0
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	4b4d      	ldr	r3, [pc, #308]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005bea:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8005bee:	4854      	ldr	r0, [pc, #336]	@ (8005d40 <update_homing_sequence+0xa3c>)
 8005bf0:	f7fb fcd2 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005bf4:	eef0 7a40 	vmov.f32	s15, s0
 8005bf8:	4b48      	ldr	r3, [pc, #288]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005bfa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005bfe:	4b51      	ldr	r3, [pc, #324]	@ (8005d44 <update_homing_sequence+0xa40>)
 8005c00:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005c04:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <update_homing_sequence+0xa44>)
 8005c06:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005c0a:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8005d4c <update_homing_sequence+0xa48>
 8005c0e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005c12:	eef0 0a66 	vmov.f32	s1, s13
 8005c16:	eeb0 0a47 	vmov.f32	s0, s14
 8005c1a:	484d      	ldr	r0, [pc, #308]	@ (8005d50 <update_homing_sequence+0xa4c>)
 8005c1c:	f7fb fd50 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8005c20:	eef0 7a40 	vmov.f32	s15, s0
 8005c24:	4b3d      	ldr	r3, [pc, #244]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c26:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c2c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c30:	4b3a      	ldr	r3, [pc, #232]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c32:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c36:	4b39      	ldr	r3, [pc, #228]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c38:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c44:	4b35      	ldr	r3, [pc, #212]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c4c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005c50:	4b3a      	ldr	r3, [pc, #232]	@ (8005d3c <update_homing_sequence+0xa38>)
 8005c52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f7fa ff33 	bl	8000ac4 <__aeabi_d2iz>
 8005c5e:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005c60:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <update_homing_sequence+0xa38>)
 8005c62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c66:	4690      	mov	r8, r2
 8005c68:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4649      	mov	r1, r9
 8005c70:	f7fa ff28 	bl	8000ac4 <__aeabi_d2iz>
 8005c74:	4603      	mov	r3, r0
 8005c76:	4619      	mov	r1, r3
 8005c78:	4620      	mov	r0, r4
 8005c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7e:	f7fb fa69 	bl	8001154 <PWM_Satuation>
 8005c82:	ee07 0a90 	vmov	s15, r0
 8005c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c8a:	4b24      	ldr	r3, [pc, #144]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005c8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005c90:	4b27      	ldr	r3, [pc, #156]	@ (8005d30 <update_homing_sequence+0xa2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d038      	beq.n	8005d0a <update_homing_sequence+0xa06>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c98:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <update_homing_sequence+0xa20>)
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005cae:	4b1f      	ldr	r3, [pc, #124]	@ (8005d2c <update_homing_sequence+0xa28>)
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb4:	e029      	b.n	8005d0a <update_homing_sequence+0xa06>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <update_homing_sequence+0xa20>)
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cbe:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <update_homing_sequence+0xa18>)
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005cce:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005cd0:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <update_homing_sequence+0xa24>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd8:	d319      	bcc.n	8005d0e <update_homing_sequence+0xa0a>
			homing_state = HOMING_COMPLETE;
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <update_homing_sequence+0xa28>)
 8005cdc:	220b      	movs	r2, #11
 8005cde:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ce0:	e015      	b.n	8005d0e <update_homing_sequence+0xa0a>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005ce2:	f7ff f9a9 	bl	8005038 <__NVIC_SystemReset>
		return;
 8005ce6:	bf00      	nop
 8005ce8:	e012      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005cea:	bf00      	nop
 8005cec:	e010      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005cee:	bf00      	nop
 8005cf0:	e00e      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005cf2:	bf00      	nop
 8005cf4:	e00c      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005cf6:	bf00      	nop
 8005cf8:	e00a      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005cfa:	bf00      	nop
 8005cfc:	e008      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005cfe:	bf00      	nop
 8005d00:	e006      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <update_homing_sequence+0xa0c>
		break;
 8005d0e:	bf00      	nop
	}
}
 8005d10:	374c      	adds	r7, #76	@ 0x4c
 8005d12:	46bd      	mov	sp, r7
 8005d14:	ecbd 8b02 	vpop	{d8}
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	200002bc 	.word	0x200002bc
 8005d20:	2000036c 	.word	0x2000036c
 8005d24:	2000027c 	.word	0x2000027c
 8005d28:	20000354 	.word	0x20000354
 8005d2c:	2000035e 	.word	0x2000035e
 8005d30:	20000358 	.word	0x20000358
 8005d34:	2000036a 	.word	0x2000036a
 8005d38:	20000570 	.word	0x20000570
 8005d3c:	20000000 	.word	0x20000000
 8005d40:	200005a4 	.word	0x200005a4
 8005d44:	2000049c 	.word	0x2000049c
 8005d48:	20000440 	.word	0x20000440
 8005d4c:	447a0000 	.word	0x447a0000
 8005d50:	200005a8 	.word	0x200005a8

08005d54 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005d5e:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005d9c <normalize_angle+0x48>
 8005d62:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d66:	f00a ff03 	bl	8010b70 <fmodf>
 8005d6a:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7a:	d507      	bpl.n	8005d8c <normalize_angle+0x38>
		result += 2.0f * PI;
 8005d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d80:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d9c <normalize_angle+0x48>
 8005d84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d88:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	ee07 3a90 	vmov	s15, r3
}
 8005d92:	eeb0 0a67 	vmov.f32	s0, s15
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40c90fdb 	.word	0x40c90fdb

08005da0 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005daa:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	d508      	bpl.n	8005dd8 <calculate_movement_deg+0x38>
 8005dc6:	edd7 7a00 	vldr	s15, [r7]
 8005dca:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	d411      	bmi.n	8005dfc <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005dd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ddc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de8:	db33      	blt.n	8005e52 <calculate_movement_deg+0xb2>
 8005dea:	edd7 7a00 	vldr	s15, [r7]
 8005dee:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfa:	db2a      	blt.n	8005e52 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005dfc:	ed97 7a00 	vldr	s14, [r7]
 8005e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e08:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e10:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1c:	dd07      	ble.n	8005e2e <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e22:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005f20 <calculate_movement_deg+0x180>
 8005e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e2a:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e32:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005f24 <calculate_movement_deg+0x184>
 8005e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	d562      	bpl.n	8005f06 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e44:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005f20 <calculate_movement_deg+0x180>
 8005e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e4c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005e50:	e059      	b.n	8005f06 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e56:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d52a      	bpl.n	8005eba <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005e64:	edd7 7a00 	vldr	s15, [r7]
 8005e68:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005e6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e70:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	d50e      	bpl.n	8005e9c <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8005e7e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005f20 <calculate_movement_deg+0x180>
 8005e82:	edd7 7a00 	vldr	s15, [r7]
 8005e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e92:	eef1 7a67 	vneg.f32	s15, s15
 8005e96:	edc7 7a03 	vstr	s15, [r7, #12]
 8005e9a:	e034      	b.n	8005f06 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8005e9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ea0:	edd7 7a00 	vldr	s15, [r7]
 8005ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005f20 <calculate_movement_deg+0x180>
 8005eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb0:	eef1 7a67 	vneg.f32	s15, s15
 8005eb4:	edc7 7a03 	vstr	s15, [r7, #12]
 8005eb8:	e025      	b.n	8005f06 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8005eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ebe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005f1c <calculate_movement_deg+0x17c>
 8005ec2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ec6:	ed97 7a00 	vldr	s14, [r7]
 8005eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed2:	d50c      	bpl.n	8005eee <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005ed4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005f20 <calculate_movement_deg+0x180>
 8005ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ee0:	ed97 7a00 	vldr	s14, [r7]
 8005ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee8:	edc7 7a03 	vstr	s15, [r7, #12]
 8005eec:	e00b      	b.n	8005f06 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8005eee:	ed97 7a00 	vldr	s14, [r7]
 8005ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005f20 <calculate_movement_deg+0x180>
 8005efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f02:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	ee07 3a90 	vmov	s15, r3
}
 8005f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	43340000 	.word	0x43340000
 8005f20:	43b40000 	.word	0x43b40000
 8005f24:	c3340000 	.word	0xc3340000

08005f28 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	ed2d 8b02 	vpush	{d8}
 8005f2e:	b089      	sub	sp, #36	@ 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f36:	edc7 0a00 	vstr	s1, [r7]
	if (is_emergency_active() || homing_active) {
 8005f3a:	f000 fe77 	bl	8006c2c <is_emergency_active>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 8098 	bne.w	8006076 <start_combined_trajectory+0x14e>
 8005f46:	4b4f      	ldr	r3, [pc, #316]	@ (8006084 <start_combined_trajectory+0x15c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8093 	bne.w	8006076 <start_combined_trajectory+0x14e>
		return; // Don't start trajectory if in emergency or homing
	}

	float pris_current = prismatic_encoder.mm;
 8005f50:	4b4d      	ldr	r3, [pc, #308]	@ (8006088 <start_combined_trajectory+0x160>)
 8005f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f54:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 8005f56:	4b4d      	ldr	r3, [pc, #308]	@ (800608c <start_combined_trajectory+0x164>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	61bb      	str	r3, [r7, #24]

	prisEva.t = 0.0f;
 8005f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006090 <start_combined_trajectory+0x168>)
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8005f64:	4b4a      	ldr	r3, [pc, #296]	@ (8006090 <start_combined_trajectory+0x168>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8005f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006094 <start_combined_trajectory+0x16c>)
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8005f72:	4b48      	ldr	r3, [pc, #288]	@ (8006094 <start_combined_trajectory+0x16c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 8005f78:	4a47      	ldr	r2, [pc, #284]	@ (8006098 <start_combined_trajectory+0x170>)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8005f7e:	4a47      	ldr	r2, [pc, #284]	@ (800609c <start_combined_trajectory+0x174>)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	60d3      	str	r3, [r2, #12]
	prismatic_axis.target_pos = fminf(
 8005f84:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80060a0 <start_combined_trajectory+0x178>
 8005f88:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f8c:	f00a feb8 	bl	8010d00 <fmaxf>
 8005f90:	eef0 7a40 	vmov.f32	s15, s0
 8005f94:	eddf 0a43 	vldr	s1, [pc, #268]	@ 80060a4 <start_combined_trajectory+0x17c>
 8005f98:	eeb0 0a67 	vmov.f32	s0, s15
 8005f9c:	f00a fecd 	bl	8010d3a <fminf>
 8005fa0:	eef0 7a40 	vmov.f32	s15, s0
 8005fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8006098 <start_combined_trajectory+0x170>)
 8005fa6:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS),
			PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 8005faa:	ed97 0a06 	vldr	s0, [r7, #24]
 8005fae:	f7ff fed1 	bl	8005d54 <normalize_angle>
 8005fb2:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_deg = normalized_current * 180.0f / PI;
 8005fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fba:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80060a8 <start_combined_trajectory+0x180>
 8005fbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005fc2:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80060ac <start_combined_trajectory+0x184>
 8005fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fca:	edc7 7a04 	vstr	s15, [r7, #16]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8005fce:	edd7 0a00 	vldr	s1, [r7]
 8005fd2:	ed97 0a04 	vldr	s0, [r7, #16]
 8005fd6:	f7ff fee3 	bl	8005da0 <calculate_movement_deg>
 8005fda:	eef0 7a40 	vmov.f32	s15, s0
 8005fde:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <start_combined_trajectory+0x188>)
 8005fe0:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 8005fe4:	4b32      	ldr	r3, [pc, #200]	@ (80060b0 <start_combined_trajectory+0x188>)
 8005fe6:	edd3 7a00 	vldr	s15, [r3]
 8005fea:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80060ac <start_combined_trajectory+0x184>
 8005fee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ff2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80060a8 <start_combined_trajectory+0x180>
 8005ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ffa:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8005ffe:	4b27      	ldr	r3, [pc, #156]	@ (800609c <start_combined_trajectory+0x174>)
 8006000:	ed93 7a03 	vldr	s14, [r3, #12]
 8006004:	edd7 7a03 	vldr	s15, [r7, #12]
 8006008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600c:	4b23      	ldr	r3, [pc, #140]	@ (800609c <start_combined_trajectory+0x174>)
 800600e:	edc3 7a04 	vstr	s15, [r3, #16]

	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006012:	4b21      	ldr	r3, [pc, #132]	@ (8006098 <start_combined_trajectory+0x170>)
 8006014:	ed93 8a03 	vldr	s16, [r3, #12]
 8006018:	4b1f      	ldr	r3, [pc, #124]	@ (8006098 <start_combined_trajectory+0x170>)
 800601a:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 800601e:	4b25      	ldr	r3, [pc, #148]	@ (80060b4 <start_combined_trajectory+0x18c>)
 8006020:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006024:	4610      	mov	r0, r2
 8006026:	4619      	mov	r1, r3
 8006028:	f7fa fd94 	bl	8000b54 <__aeabi_d2f>
 800602c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800602e:	4b21      	ldr	r3, [pc, #132]	@ (80060b4 <start_combined_trajectory+0x18c>)
 8006030:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006034:	4610      	mov	r0, r2
 8006036:	4619      	mov	r1, r3
 8006038:	f7fa fd8c 	bl	8000b54 <__aeabi_d2f>
 800603c:	4603      	mov	r3, r0
 800603e:	ee01 3a90 	vmov	s3, r3
 8006042:	ee01 4a10 	vmov	s2, r4
 8006046:	eef0 0a68 	vmov.f32	s1, s17
 800604a:	eeb0 0a48 	vmov.f32	s0, s16
 800604e:	481a      	ldr	r0, [pc, #104]	@ (80060b8 <start_combined_trajectory+0x190>)
 8006050:	f7fd fe32 	bl	8003cb8 <Trapezoidal_Generator>

	prismatic_axis.trajectory_active = false;
 8006054:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <start_combined_trajectory+0x170>)
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800605c:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <start_combined_trajectory+0x174>)
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	plotter_pen_up();
 8006064:	f001 fbf2 	bl	800784c <plotter_pen_up>
	motion_delay_timer = 0;
 8006068:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <start_combined_trajectory+0x194>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 800606e:	4b14      	ldr	r3, [pc, #80]	@ (80060c0 <start_combined_trajectory+0x198>)
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e000      	b.n	8006078 <start_combined_trajectory+0x150>
		return; // Don't start trajectory if in emergency or homing
 8006076:	bf00      	nop
}
 8006078:	3724      	adds	r7, #36	@ 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	ecbd 8b02 	vpop	{d8}
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	2000035f 	.word	0x2000035f
 8006088:	20000440 	.word	0x20000440
 800608c:	2000049c 	.word	0x2000049c
 8006090:	20000328 	.word	0x20000328
 8006094:	2000033c 	.word	0x2000033c
 8006098:	2000027c 	.word	0x2000027c
 800609c:	200002bc 	.word	0x200002bc
 80060a0:	00000000 	.word	0x00000000
 80060a4:	43960000 	.word	0x43960000
 80060a8:	43340000 	.word	0x43340000
 80060ac:	40490fdb 	.word	0x40490fdb
 80060b0:	200003a4 	.word	0x200003a4
 80060b4:	20000080 	.word	0x20000080
 80060b8:	20000300 	.word	0x20000300
 80060bc:	20000354 	.word	0x20000354
 80060c0:	200002fc 	.word	0x200002fc

080060c4 <update_position_control>:

void update_position_control(void) {
 80060c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060c8:	ed2d 8b02 	vpush	{d8}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80060d0:	4b50      	ldr	r3, [pc, #320]	@ (8006214 <update_position_control+0x150>)
 80060d2:	ed93 7a00 	vldr	s14, [r3]
 80060d6:	4b50      	ldr	r3, [pc, #320]	@ (8006218 <update_position_control+0x154>)
 80060d8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80060dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006214 <update_position_control+0x150>)
 80060e2:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 80060e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006214 <update_position_control+0x150>)
 80060e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80060ec:	eeb0 0a67 	vmov.f32	s0, s15
 80060f0:	484a      	ldr	r0, [pc, #296]	@ (800621c <update_position_control+0x158>)
 80060f2:	f7fb f891 	bl	8001218 <PID_CONTROLLER_Compute>
 80060f6:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80060fa:	4b49      	ldr	r3, [pc, #292]	@ (8006220 <update_position_control+0x15c>)
 80060fc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fcde 	bl	8000ac4 <__aeabi_d2iz>
 8006108:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800610a:	4b45      	ldr	r3, [pc, #276]	@ (8006220 <update_position_control+0x15c>)
 800610c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006110:	4690      	mov	r8, r2
 8006112:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa fcd3 	bl	8000ac4 <__aeabi_d2iz>
 800611e:	4603      	mov	r3, r0
 8006120:	4619      	mov	r1, r3
 8006122:	4630      	mov	r0, r6
 8006124:	eeb0 0a48 	vmov.f32	s0, s16
 8006128:	f7fb f814 	bl	8001154 <PWM_Satuation>
 800612c:	ee07 0a90 	vmov	s15, r0
 8006130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006134:	4b37      	ldr	r3, [pc, #220]	@ (8006214 <update_position_control+0x150>)
 8006136:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 800613a:	4b3a      	ldr	r3, [pc, #232]	@ (8006224 <update_position_control+0x160>)
 800613c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006140:	eeb0 0a67 	vmov.f32	s0, s15
 8006144:	f7ff fe06 	bl	8005d54 <normalize_angle>
 8006148:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 800614c:	4b36      	ldr	r3, [pc, #216]	@ (8006228 <update_position_control+0x164>)
 800614e:	ed93 7a00 	vldr	s14, [r3]
 8006152:	edd7 7a01 	vldr	s15, [r7, #4]
 8006156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800615a:	4b33      	ldr	r3, [pc, #204]	@ (8006228 <update_position_control+0x164>)
 800615c:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006160:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <update_position_control+0x164>)
 8006162:	edd3 7a05 	vldr	s15, [r3, #20]
 8006166:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800622c <update_position_control+0x168>
 800616a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006172:	dd09      	ble.n	8006188 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006174:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <update_position_control+0x164>)
 8006176:	edd3 7a05 	vldr	s15, [r3, #20]
 800617a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006230 <update_position_control+0x16c>
 800617e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006182:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <update_position_control+0x164>)
 8006184:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006188:	4b27      	ldr	r3, [pc, #156]	@ (8006228 <update_position_control+0x164>)
 800618a:	edd3 7a05 	vldr	s15, [r3, #20]
 800618e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006234 <update_position_control+0x170>
 8006192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	d509      	bpl.n	80061b0 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 800619c:	4b22      	ldr	r3, [pc, #136]	@ (8006228 <update_position_control+0x164>)
 800619e:	edd3 7a05 	vldr	s15, [r3, #20]
 80061a2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006230 <update_position_control+0x16c>
 80061a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <update_position_control+0x164>)
 80061ac:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 80061b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <update_position_control+0x164>)
 80061b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80061b6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ba:	481f      	ldr	r0, [pc, #124]	@ (8006238 <update_position_control+0x174>)
 80061bc:	f7fb f82c 	bl	8001218 <PID_CONTROLLER_Compute>
 80061c0:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 80061c4:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <update_position_control+0x178>)
 80061c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7fa fc79 	bl	8000ac4 <__aeabi_d2iz>
 80061d2:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80061d4:	4b19      	ldr	r3, [pc, #100]	@ (800623c <update_position_control+0x178>)
 80061d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80061da:	4614      	mov	r4, r2
 80061dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	f7fa fc6e 	bl	8000ac4 <__aeabi_d2iz>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4619      	mov	r1, r3
 80061ec:	4630      	mov	r0, r6
 80061ee:	eeb0 0a48 	vmov.f32	s0, s16
 80061f2:	f7fa ffaf 	bl	8001154 <PWM_Satuation>
 80061f6:	ee07 0a90 	vmov	s15, r0
 80061fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <update_position_control+0x164>)
 8006200:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	ecbd 8b02 	vpop	{d8}
 800620e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006212:	bf00      	nop
 8006214:	2000027c 	.word	0x2000027c
 8006218:	20000440 	.word	0x20000440
 800621c:	200004f8 	.word	0x200004f8
 8006220:	20000080 	.word	0x20000080
 8006224:	2000049c 	.word	0x2000049c
 8006228:	200002bc 	.word	0x200002bc
 800622c:	40490fdb 	.word	0x40490fdb
 8006230:	40c90fdb 	.word	0x40c90fdb
 8006234:	c0490fdb 	.word	0xc0490fdb
 8006238:	20000548 	.word	0x20000548
 800623c:	20000000 	.word	0x20000000

08006240 <update_velocity_control>:

void update_velocity_control(void) {
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	ed2d 8b02 	vpush	{d8}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 800624c:	4b96      	ldr	r3, [pc, #600]	@ (80064a8 <update_velocity_control+0x268>)
 800624e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006252:	2b00      	cmp	r3, #0
 8006254:	d010      	beq.n	8006278 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006256:	4b94      	ldr	r3, [pc, #592]	@ (80064a8 <update_velocity_control+0x268>)
 8006258:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 800625c:	4b92      	ldr	r3, [pc, #584]	@ (80064a8 <update_velocity_control+0x268>)
 800625e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006266:	4b90      	ldr	r3, [pc, #576]	@ (80064a8 <update_velocity_control+0x268>)
 8006268:	edd3 7a07 	vldr	s15, [r3, #28]
 800626c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006270:	4b8d      	ldr	r3, [pc, #564]	@ (80064a8 <update_velocity_control+0x268>)
 8006272:	edc3 7a06 	vstr	s15, [r3, #24]
 8006276:	e00a      	b.n	800628e <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006278:	4b8b      	ldr	r3, [pc, #556]	@ (80064a8 <update_velocity_control+0x268>)
 800627a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800627e:	4b8a      	ldr	r3, [pc, #552]	@ (80064a8 <update_velocity_control+0x268>)
 8006280:	edd3 7a07 	vldr	s15, [r3, #28]
 8006284:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006288:	4b87      	ldr	r3, [pc, #540]	@ (80064a8 <update_velocity_control+0x268>)
 800628a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800628e:	4b86      	ldr	r3, [pc, #536]	@ (80064a8 <update_velocity_control+0x268>)
 8006290:	edd3 7a06 	vldr	s15, [r3, #24]
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	4884      	ldr	r0, [pc, #528]	@ (80064ac <update_velocity_control+0x26c>)
 800629a:	f7fa ffbd 	bl	8001218 <PID_CONTROLLER_Compute>
 800629e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 80062a2:	4b83      	ldr	r3, [pc, #524]	@ (80064b0 <update_velocity_control+0x270>)
 80062a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f7fa fc0a 	bl	8000ac4 <__aeabi_d2iz>
 80062b0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80062b2:	4b7f      	ldr	r3, [pc, #508]	@ (80064b0 <update_velocity_control+0x270>)
 80062b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80062b8:	603a      	str	r2, [r7, #0]
 80062ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80062be:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 80062c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c4:	f7fa fbfe 	bl	8000ac4 <__aeabi_d2iz>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4619      	mov	r1, r3
 80062cc:	4630      	mov	r0, r6
 80062ce:	eeb0 0a48 	vmov.f32	s0, s16
 80062d2:	f7fa ff3f 	bl	8001154 <PWM_Satuation>
 80062d6:	ee07 0a90 	vmov	s15, r0
 80062da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062de:	4b72      	ldr	r3, [pc, #456]	@ (80064a8 <update_velocity_control+0x268>)
 80062e0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 80062e4:	4b70      	ldr	r3, [pc, #448]	@ (80064a8 <update_velocity_control+0x268>)
 80062e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d02c      	beq.n	8006348 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 80062ee:	4b6e      	ldr	r3, [pc, #440]	@ (80064a8 <update_velocity_control+0x268>)
 80062f0:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80062f4:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064b4 <update_velocity_control+0x274>
 80062f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006300:	486d      	ldr	r0, [pc, #436]	@ (80064b8 <update_velocity_control+0x278>)
 8006302:	f7fb facd 	bl	80018a0 <PRISMATIC_MOTOR_FFD_Compute>
 8006306:	eef0 7a40 	vmov.f32	s15, s0
 800630a:	4b67      	ldr	r3, [pc, #412]	@ (80064a8 <update_velocity_control+0x268>)
 800630c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006310:	4b6a      	ldr	r3, [pc, #424]	@ (80064bc <update_velocity_control+0x27c>)
 8006312:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006316:	4b6a      	ldr	r3, [pc, #424]	@ (80064c0 <update_velocity_control+0x280>)
 8006318:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 800631c:	4b69      	ldr	r3, [pc, #420]	@ (80064c4 <update_velocity_control+0x284>)
 800631e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006322:	eddf 5a64 	vldr	s11, [pc, #400]	@ 80064b4 <update_velocity_control+0x274>
 8006326:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800632a:	eeb0 1a46 	vmov.f32	s2, s12
 800632e:	eef0 0a66 	vmov.f32	s1, s13
 8006332:	eeb0 0a47 	vmov.f32	s0, s14
 8006336:	4864      	ldr	r0, [pc, #400]	@ (80064c8 <update_velocity_control+0x288>)
 8006338:	f7fb fb45 	bl	80019c6 <PRISMATIC_MOTOR_DFD_Compute>
 800633c:	eef0 7a40 	vmov.f32	s15, s0
 8006340:	4b59      	ldr	r3, [pc, #356]	@ (80064a8 <update_velocity_control+0x268>)
 8006342:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006346:	e007      	b.n	8006358 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006348:	4b57      	ldr	r3, [pc, #348]	@ (80064a8 <update_velocity_control+0x268>)
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006350:	4b55      	ldr	r3, [pc, #340]	@ (80064a8 <update_velocity_control+0x268>)
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006358:	4b53      	ldr	r3, [pc, #332]	@ (80064a8 <update_velocity_control+0x268>)
 800635a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800635e:	4b52      	ldr	r3, [pc, #328]	@ (80064a8 <update_velocity_control+0x268>)
 8006360:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006364:	4b50      	ldr	r3, [pc, #320]	@ (80064a8 <update_velocity_control+0x268>)
 8006366:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800636a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006372:	4b4d      	ldr	r3, [pc, #308]	@ (80064a8 <update_velocity_control+0x268>)
 8006374:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006378:	4b4b      	ldr	r3, [pc, #300]	@ (80064a8 <update_velocity_control+0x268>)
 800637a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800637e:	4b4c      	ldr	r3, [pc, #304]	@ (80064b0 <update_velocity_control+0x270>)
 8006380:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f7fa fb9c 	bl	8000ac4 <__aeabi_d2iz>
 800638c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800638e:	4b48      	ldr	r3, [pc, #288]	@ (80064b0 <update_velocity_control+0x270>)
 8006390:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006394:	4692      	mov	sl, r2
 8006396:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800639a:	4650      	mov	r0, sl
 800639c:	4659      	mov	r1, fp
 800639e:	f7fa fb91 	bl	8000ac4 <__aeabi_d2iz>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4619      	mov	r1, r3
 80063a6:	4630      	mov	r0, r6
 80063a8:	eeb0 0a48 	vmov.f32	s0, s16
 80063ac:	f7fa fed2 	bl	8001154 <PWM_Satuation>
 80063b0:	ee07 0a90 	vmov	s15, r0
 80063b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b8:	4b3b      	ldr	r3, [pc, #236]	@ (80064a8 <update_velocity_control+0x268>)
 80063ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80063be:	4b40      	ldr	r3, [pc, #256]	@ (80064c0 <update_velocity_control+0x280>)
 80063c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 80063c8:	4b3d      	ldr	r3, [pc, #244]	@ (80064c0 <update_velocity_control+0x280>)
 80063ca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80063ce:	4b3c      	ldr	r3, [pc, #240]	@ (80064c0 <update_velocity_control+0x280>)
 80063d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80063d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063d8:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <update_velocity_control+0x280>)
 80063da:	edd3 7a07 	vldr	s15, [r3, #28]
 80063de:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80063e2:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <update_velocity_control+0x280>)
 80063e4:	edc3 7a06 	vstr	s15, [r3, #24]
 80063e8:	e00a      	b.n	8006400 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80063ea:	4b35      	ldr	r3, [pc, #212]	@ (80064c0 <update_velocity_control+0x280>)
 80063ec:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80063f0:	4b33      	ldr	r3, [pc, #204]	@ (80064c0 <update_velocity_control+0x280>)
 80063f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80063f6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80063fa:	4b31      	ldr	r3, [pc, #196]	@ (80064c0 <update_velocity_control+0x280>)
 80063fc:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006400:	4b2f      	ldr	r3, [pc, #188]	@ (80064c0 <update_velocity_control+0x280>)
 8006402:	edd3 7a06 	vldr	s15, [r3, #24]
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	4830      	ldr	r0, [pc, #192]	@ (80064cc <update_velocity_control+0x28c>)
 800640c:	f7fa ff04 	bl	8001218 <PID_CONTROLLER_Compute>
 8006410:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006414:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <update_velocity_control+0x290>)
 8006416:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	f7fa fb51 	bl	8000ac4 <__aeabi_d2iz>
 8006422:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006424:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <update_velocity_control+0x290>)
 8006426:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800642a:	4690      	mov	r8, r2
 800642c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fb46 	bl	8000ac4 <__aeabi_d2iz>
 8006438:	4603      	mov	r3, r0
 800643a:	4619      	mov	r1, r3
 800643c:	4630      	mov	r0, r6
 800643e:	eeb0 0a48 	vmov.f32	s0, s16
 8006442:	f7fa fe87 	bl	8001154 <PWM_Satuation>
 8006446:	ee07 0a90 	vmov	s15, r0
 800644a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644e:	4b1c      	ldr	r3, [pc, #112]	@ (80064c0 <update_velocity_control+0x280>)
 8006450:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006454:	4b1a      	ldr	r3, [pc, #104]	@ (80064c0 <update_velocity_control+0x280>)
 8006456:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03e      	beq.n	80064dc <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 800645e:	4b18      	ldr	r3, [pc, #96]	@ (80064c0 <update_velocity_control+0x280>)
 8006460:	edd3 7a01 	vldr	s15, [r3, #4]
 8006464:	eeb0 0a67 	vmov.f32	s0, s15
 8006468:	481a      	ldr	r0, [pc, #104]	@ (80064d4 <update_velocity_control+0x294>)
 800646a:	f7fb f895 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 800646e:	eef0 7a40 	vmov.f32	s15, s0
 8006472:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <update_velocity_control+0x280>)
 8006474:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006478:	4b10      	ldr	r3, [pc, #64]	@ (80064bc <update_velocity_control+0x27c>)
 800647a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800647e:	4b11      	ldr	r3, [pc, #68]	@ (80064c4 <update_velocity_control+0x284>)
 8006480:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006484:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80064b4 <update_velocity_control+0x274>
 8006488:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800648c:	eef0 0a66 	vmov.f32	s1, s13
 8006490:	eeb0 0a47 	vmov.f32	s0, s14
 8006494:	4810      	ldr	r0, [pc, #64]	@ (80064d8 <update_velocity_control+0x298>)
 8006496:	f7fb f913 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 800649a:	eef0 7a40 	vmov.f32	s15, s0
 800649e:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <update_velocity_control+0x280>)
 80064a0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80064a4:	e034      	b.n	8006510 <update_velocity_control+0x2d0>
 80064a6:	bf00      	nop
 80064a8:	2000027c 	.word	0x2000027c
 80064ac:	20000520 	.word	0x20000520
 80064b0:	20000080 	.word	0x20000080
 80064b4:	447a0000 	.word	0x447a0000
 80064b8:	20000598 	.word	0x20000598
 80064bc:	2000049c 	.word	0x2000049c
 80064c0:	200002bc 	.word	0x200002bc
 80064c4:	20000440 	.word	0x20000440
 80064c8:	2000059c 	.word	0x2000059c
 80064cc:	20000570 	.word	0x20000570
 80064d0:	20000000 	.word	0x20000000
 80064d4:	200005a4 	.word	0x200005a4
 80064d8:	200005a8 	.word	0x200005a8
	} else {
		revolute_axis.ffd = 0.0f;
 80064dc:	4b33      	ldr	r3, [pc, #204]	@ (80065ac <update_velocity_control+0x36c>)
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80064e4:	4b32      	ldr	r3, [pc, #200]	@ (80065b0 <update_velocity_control+0x370>)
 80064e6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80064ea:	4b32      	ldr	r3, [pc, #200]	@ (80065b4 <update_velocity_control+0x374>)
 80064ec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80064f0:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80065b8 <update_velocity_control+0x378>
 80064f4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80064f8:	eef0 0a66 	vmov.f32	s1, s13
 80064fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006500:	482e      	ldr	r0, [pc, #184]	@ (80065bc <update_velocity_control+0x37c>)
 8006502:	f7fb f8dd 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8006506:	eef0 7a40 	vmov.f32	s15, s0
 800650a:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <update_velocity_control+0x36c>)
 800650c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8006510:	4b26      	ldr	r3, [pc, #152]	@ (80065ac <update_velocity_control+0x36c>)
 8006512:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006516:	4b25      	ldr	r3, [pc, #148]	@ (80065ac <update_velocity_control+0x36c>)
 8006518:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800651c:	4b23      	ldr	r3, [pc, #140]	@ (80065ac <update_velocity_control+0x36c>)
 800651e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652a:	4b20      	ldr	r3, [pc, #128]	@ (80065ac <update_velocity_control+0x36c>)
 800652c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006530:	4b1e      	ldr	r3, [pc, #120]	@ (80065ac <update_velocity_control+0x36c>)
 8006532:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006536:	4b22      	ldr	r3, [pc, #136]	@ (80065c0 <update_velocity_control+0x380>)
 8006538:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	f7fa fac0 	bl	8000ac4 <__aeabi_d2iz>
 8006544:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006546:	4b1e      	ldr	r3, [pc, #120]	@ (80065c0 <update_velocity_control+0x380>)
 8006548:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800654c:	4614      	mov	r4, r2
 800654e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	f7fa fab5 	bl	8000ac4 <__aeabi_d2iz>
 800655a:	4603      	mov	r3, r0
 800655c:	4619      	mov	r1, r3
 800655e:	4630      	mov	r0, r6
 8006560:	eeb0 0a48 	vmov.f32	s0, s16
 8006564:	f7fa fdf6 	bl	8001154 <PWM_Satuation>
 8006568:	ee07 0a90 	vmov	s15, r0
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006570:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <update_velocity_control+0x36c>)
 8006572:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006576:	4b13      	ldr	r3, [pc, #76]	@ (80065c4 <update_velocity_control+0x384>)
 8006578:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800657c:	eef0 0a67 	vmov.f32	s1, s15
 8006580:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80065c8 <update_velocity_control+0x388>
 8006584:	4811      	ldr	r0, [pc, #68]	@ (80065cc <update_velocity_control+0x38c>)
 8006586:	f7fa ff1f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800658a:	4b08      	ldr	r3, [pc, #32]	@ (80065ac <update_velocity_control+0x36c>)
 800658c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006590:	eef0 0a67 	vmov.f32	s1, s15
 8006594:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80065c8 <update_velocity_control+0x388>
 8006598:	480d      	ldr	r0, [pc, #52]	@ (80065d0 <update_velocity_control+0x390>)
 800659a:	f7fa ff15 	bl	80013c8 <MDXX_set_range>
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	ecbd 8b02 	vpop	{d8}
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	200002bc 	.word	0x200002bc
 80065b0:	2000049c 	.word	0x2000049c
 80065b4:	20000440 	.word	0x20000440
 80065b8:	447a0000 	.word	0x447a0000
 80065bc:	200005a8 	.word	0x200005a8
 80065c0:	20000000 	.word	0x20000000
 80065c4:	2000027c 	.word	0x2000027c
 80065c8:	44fa0000 	.word	0x44fa0000
 80065cc:	200003a8 	.word	0x200003a8
 80065d0:	200003f4 	.word	0x200003f4

080065d4 <update_control_loops>:

void update_control_loops(void) {
 80065d4:	b598      	push	{r3, r4, r7, lr}
 80065d6:	ed2d 8b02 	vpush	{d8}
 80065da:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 80065dc:	4bac      	ldr	r3, [pc, #688]	@ (8006890 <update_control_loops+0x2bc>)
 80065de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80065e2:	eeb0 0a67 	vmov.f32	s0, s15
 80065e6:	f7ff fbb5 	bl	8005d54 <normalize_angle>
 80065ea:	eef0 7a40 	vmov.f32	s15, s0
 80065ee:	4ba9      	ldr	r3, [pc, #676]	@ (8006894 <update_control_loops+0x2c0>)
 80065f0:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 80065f4:	f000 fb1a 	bl	8006c2c <is_emergency_active>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d015      	beq.n	800662a <update_control_loops+0x56>
		emergency_stop_all_motors();
 80065fe:	f000 fa57 	bl	8006ab0 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006602:	4ba5      	ldr	r3, [pc, #660]	@ (8006898 <update_control_loops+0x2c4>)
 8006604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006606:	4aa5      	ldr	r2, [pc, #660]	@ (800689c <update_control_loops+0x2c8>)
 8006608:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 800660a:	4ba2      	ldr	r3, [pc, #648]	@ (8006894 <update_control_loops+0x2c0>)
 800660c:	edd3 7a00 	vldr	s15, [r3]
 8006610:	220e      	movs	r2, #14
 8006612:	210f      	movs	r1, #15
 8006614:	eeb0 0a67 	vmov.f32	s0, s15
 8006618:	48a1      	ldr	r0, [pc, #644]	@ (80068a0 <update_control_loops+0x2cc>)
 800661a:	f7fd ffa7 	bl	800456c <UnitConverter_angle>
 800661e:	eef0 7a40 	vmov.f32	s15, s0
 8006622:	4ba0      	ldr	r3, [pc, #640]	@ (80068a4 <update_control_loops+0x2d0>)
 8006624:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006628:	e16e      	b.n	8006908 <update_control_loops+0x334>
	}

	if (homing_active) {
 800662a:	4b9f      	ldr	r3, [pc, #636]	@ (80068a8 <update_control_loops+0x2d4>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d029      	beq.n	8006686 <update_control_loops+0xb2>
		update_homing_sequence();
 8006632:	f7fe fe67 	bl	8005304 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006636:	4b99      	ldr	r3, [pc, #612]	@ (800689c <update_control_loops+0x2c8>)
 8006638:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800663c:	eef0 0a67 	vmov.f32	s1, s15
 8006640:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80068ac <update_control_loops+0x2d8>
 8006644:	489a      	ldr	r0, [pc, #616]	@ (80068b0 <update_control_loops+0x2dc>)
 8006646:	f7fa febf 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800664a:	4b96      	ldr	r3, [pc, #600]	@ (80068a4 <update_control_loops+0x2d0>)
 800664c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006650:	eef0 0a67 	vmov.f32	s1, s15
 8006654:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80068ac <update_control_loops+0x2d8>
 8006658:	4896      	ldr	r0, [pc, #600]	@ (80068b4 <update_control_loops+0x2e0>)
 800665a:	f7fa feb5 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 800665e:	4b8e      	ldr	r3, [pc, #568]	@ (8006898 <update_control_loops+0x2c4>)
 8006660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006662:	4a8e      	ldr	r2, [pc, #568]	@ (800689c <update_control_loops+0x2c8>)
 8006664:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006666:	4b8b      	ldr	r3, [pc, #556]	@ (8006894 <update_control_loops+0x2c0>)
 8006668:	edd3 7a00 	vldr	s15, [r3]
 800666c:	220e      	movs	r2, #14
 800666e:	210f      	movs	r1, #15
 8006670:	eeb0 0a67 	vmov.f32	s0, s15
 8006674:	488a      	ldr	r0, [pc, #552]	@ (80068a0 <update_control_loops+0x2cc>)
 8006676:	f7fd ff79 	bl	800456c <UnitConverter_angle>
 800667a:	eef0 7a40 	vmov.f32	s15, s0
 800667e:	4b89      	ldr	r3, [pc, #548]	@ (80068a4 <update_control_loops+0x2d0>)
 8006680:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006684:	e140      	b.n	8006908 <update_control_loops+0x334>
	}

	switch (motion_sequence_state) {
 8006686:	4b8c      	ldr	r3, [pc, #560]	@ (80068b8 <update_control_loops+0x2e4>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	2b04      	cmp	r3, #4
 800668e:	f200 80f7 	bhi.w	8006880 <update_control_loops+0x2ac>
 8006692:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <update_control_loops+0xc4>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066ad 	.word	0x080066ad
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080067b5 	.word	0x080067b5
 80066a4:	0800685b 	.word	0x0800685b
 80066a8:	08006879 	.word	0x08006879
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 80066ac:	4b83      	ldr	r3, [pc, #524]	@ (80068bc <update_control_loops+0x2e8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a82      	ldr	r2, [pc, #520]	@ (80068bc <update_control_loops+0x2e8>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f240 80e2 	bls.w	8006884 <update_control_loops+0x2b0>
			prismatic_axis.trajectory_active = true;
 80066c0:	4b76      	ldr	r3, [pc, #472]	@ (800689c <update_control_loops+0x2c8>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 80066c8:	4b7b      	ldr	r3, [pc, #492]	@ (80068b8 <update_control_loops+0x2e4>)
 80066ca:	2202      	movs	r2, #2
 80066cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80066ce:	e0d9      	b.n	8006884 <update_control_loops+0x2b0>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80066d0:	4b72      	ldr	r3, [pc, #456]	@ (800689c <update_control_loops+0x2c8>)
 80066d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80d6 	beq.w	8006888 <update_control_loops+0x2b4>
 80066dc:	4b78      	ldr	r3, [pc, #480]	@ (80068c0 <update_control_loops+0x2ec>)
 80066de:	7c1b      	ldrb	r3, [r3, #16]
 80066e0:	f083 0301 	eor.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80ce 	beq.w	8006888 <update_control_loops+0x2b4>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 80066ec:	4b6b      	ldr	r3, [pc, #428]	@ (800689c <update_control_loops+0x2c8>)
 80066ee:	ed93 8a03 	vldr	s16, [r3, #12]
 80066f2:	4b6a      	ldr	r3, [pc, #424]	@ (800689c <update_control_loops+0x2c8>)
 80066f4:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 80066f8:	4b72      	ldr	r3, [pc, #456]	@ (80068c4 <update_control_loops+0x2f0>)
 80066fa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f7fa fa27 	bl	8000b54 <__aeabi_d2f>
 8006706:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006708:	4b6e      	ldr	r3, [pc, #440]	@ (80068c4 <update_control_loops+0x2f0>)
 800670a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	f7fa fa1f 	bl	8000b54 <__aeabi_d2f>
 8006716:	4603      	mov	r3, r0
 8006718:	ee01 3a90 	vmov	s3, r3
 800671c:	ee01 4a10 	vmov	s2, r4
 8006720:	eef0 0a68 	vmov.f32	s1, s17
 8006724:	eeb0 0a48 	vmov.f32	s0, s16
 8006728:	4965      	ldr	r1, [pc, #404]	@ (80068c0 <update_control_loops+0x2ec>)
 800672a:	4867      	ldr	r0, [pc, #412]	@ (80068c8 <update_control_loops+0x2f4>)
 800672c:	f7fd fb86 	bl	8003e3c <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 8006730:	4b63      	ldr	r3, [pc, #396]	@ (80068c0 <update_control_loops+0x2ec>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a59      	ldr	r2, [pc, #356]	@ (800689c <update_control_loops+0x2c8>)
 8006736:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 8006738:	4b61      	ldr	r3, [pc, #388]	@ (80068c0 <update_control_loops+0x2ec>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4a57      	ldr	r2, [pc, #348]	@ (800689c <update_control_loops+0x2c8>)
 800673e:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 8006740:	4b5f      	ldr	r3, [pc, #380]	@ (80068c0 <update_control_loops+0x2ec>)
 8006742:	7c1b      	ldrb	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 809f 	beq.w	8006888 <update_control_loops+0x2b4>
				prismatic_axis.trajectory_active = false;
 800674a:	4b54      	ldr	r3, [pc, #336]	@ (800689c <update_control_loops+0x2c8>)
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 8006752:	4b5b      	ldr	r3, [pc, #364]	@ (80068c0 <update_control_loops+0x2ec>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a51      	ldr	r2, [pc, #324]	@ (800689c <update_control_loops+0x2c8>)
 8006758:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 800675a:	4b50      	ldr	r3, [pc, #320]	@ (800689c <update_control_loops+0x2c8>)
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006762:	4b50      	ldr	r3, [pc, #320]	@ (80068a4 <update_control_loops+0x2d0>)
 8006764:	ed93 8a03 	vldr	s16, [r3, #12]
 8006768:	4b4e      	ldr	r3, [pc, #312]	@ (80068a4 <update_control_loops+0x2d0>)
 800676a:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 800676e:	4b57      	ldr	r3, [pc, #348]	@ (80068cc <update_control_loops+0x2f8>)
 8006770:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006774:	4610      	mov	r0, r2
 8006776:	4619      	mov	r1, r3
 8006778:	f7fa f9ec 	bl	8000b54 <__aeabi_d2f>
 800677c:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800677e:	4b53      	ldr	r3, [pc, #332]	@ (80068cc <update_control_loops+0x2f8>)
 8006780:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006784:	4610      	mov	r0, r2
 8006786:	4619      	mov	r1, r3
 8006788:	f7fa f9e4 	bl	8000b54 <__aeabi_d2f>
 800678c:	4603      	mov	r3, r0
 800678e:	ee01 3a90 	vmov	s3, r3
 8006792:	ee01 4a10 	vmov	s2, r4
 8006796:	eef0 0a68 	vmov.f32	s1, s17
 800679a:	eeb0 0a48 	vmov.f32	s0, s16
 800679e:	484c      	ldr	r0, [pc, #304]	@ (80068d0 <update_control_loops+0x2fc>)
 80067a0:	f7fd fa8a 	bl	8003cb8 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 80067a4:	4b3f      	ldr	r3, [pc, #252]	@ (80068a4 <update_control_loops+0x2d0>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 80067ac:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <update_control_loops+0x2e4>)
 80067ae:	2203      	movs	r2, #3
 80067b0:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80067b2:	e069      	b.n	8006888 <update_control_loops+0x2b4>

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80067b4:	4b3b      	ldr	r3, [pc, #236]	@ (80068a4 <update_control_loops+0x2d0>)
 80067b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d066      	beq.n	800688c <update_control_loops+0x2b8>
 80067be:	4b45      	ldr	r3, [pc, #276]	@ (80068d4 <update_control_loops+0x300>)
 80067c0:	7c1b      	ldrb	r3, [r3, #16]
 80067c2:	f083 0301 	eor.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d05f      	beq.n	800688c <update_control_loops+0x2b8>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80067cc:	4b35      	ldr	r3, [pc, #212]	@ (80068a4 <update_control_loops+0x2d0>)
 80067ce:	ed93 8a03 	vldr	s16, [r3, #12]
 80067d2:	4b34      	ldr	r3, [pc, #208]	@ (80068a4 <update_control_loops+0x2d0>)
 80067d4:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 80067d8:	4b3c      	ldr	r3, [pc, #240]	@ (80068cc <update_control_loops+0x2f8>)
 80067da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	f7fa f9b7 	bl	8000b54 <__aeabi_d2f>
 80067e6:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80067e8:	4b38      	ldr	r3, [pc, #224]	@ (80068cc <update_control_loops+0x2f8>)
 80067ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fa f9af 	bl	8000b54 <__aeabi_d2f>
 80067f6:	4603      	mov	r3, r0
 80067f8:	ee01 3a90 	vmov	s3, r3
 80067fc:	ee01 4a10 	vmov	s2, r4
 8006800:	eef0 0a68 	vmov.f32	s1, s17
 8006804:	eeb0 0a48 	vmov.f32	s0, s16
 8006808:	4932      	ldr	r1, [pc, #200]	@ (80068d4 <update_control_loops+0x300>)
 800680a:	4831      	ldr	r0, [pc, #196]	@ (80068d0 <update_control_loops+0x2fc>)
 800680c:	f7fd fb16 	bl	8003e3c <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 8006810:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <update_control_loops+0x300>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a23      	ldr	r2, [pc, #140]	@ (80068a4 <update_control_loops+0x2d0>)
 8006816:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 8006818:	4b2e      	ldr	r3, [pc, #184]	@ (80068d4 <update_control_loops+0x300>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a21      	ldr	r2, [pc, #132]	@ (80068a4 <update_control_loops+0x2d0>)
 800681e:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 8006820:	4b2c      	ldr	r3, [pc, #176]	@ (80068d4 <update_control_loops+0x300>)
 8006822:	7c1b      	ldrb	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d031      	beq.n	800688c <update_control_loops+0x2b8>
				revolute_axis.trajectory_active = false;
 8006828:	4b1e      	ldr	r3, [pc, #120]	@ (80068a4 <update_control_loops+0x2d0>)
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <update_control_loops+0x300>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <update_control_loops+0x2d0>)
 8006836:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 8006838:	4b1a      	ldr	r3, [pc, #104]	@ (80068a4 <update_control_loops+0x2d0>)
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006840:	4825      	ldr	r0, [pc, #148]	@ (80068d8 <update_control_loops+0x304>)
 8006842:	f7fa fd7b 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006846:	4825      	ldr	r0, [pc, #148]	@ (80068dc <update_control_loops+0x308>)
 8006848:	f7fa fd78 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 800684c:	4b1b      	ldr	r3, [pc, #108]	@ (80068bc <update_control_loops+0x2e8>)
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006852:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <update_control_loops+0x2e4>)
 8006854:	2204      	movs	r2, #4
 8006856:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006858:	e018      	b.n	800688c <update_control_loops+0x2b8>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 800685a:	4b18      	ldr	r3, [pc, #96]	@ (80068bc <update_control_loops+0x2e8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <update_control_loops+0x2e8>)
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006868:	4293      	cmp	r3, r2
 800686a:	d939      	bls.n	80068e0 <update_control_loops+0x30c>
			plotter_pen_down();
 800686c:	f000 fffe 	bl	800786c <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006870:	4b11      	ldr	r3, [pc, #68]	@ (80068b8 <update_control_loops+0x2e4>)
 8006872:	2205      	movs	r2, #5
 8006874:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006876:	e033      	b.n	80068e0 <update_control_loops+0x30c>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006878:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <update_control_loops+0x2e4>)
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
		break;
 800687e:	e030      	b.n	80068e2 <update_control_loops+0x30e>

	default:
		break;
 8006880:	bf00      	nop
 8006882:	e02e      	b.n	80068e2 <update_control_loops+0x30e>
		break;
 8006884:	bf00      	nop
 8006886:	e02c      	b.n	80068e2 <update_control_loops+0x30e>
		break;
 8006888:	bf00      	nop
 800688a:	e02a      	b.n	80068e2 <update_control_loops+0x30e>
		break;
 800688c:	bf00      	nop
 800688e:	e028      	b.n	80068e2 <update_control_loops+0x30e>
 8006890:	2000049c 	.word	0x2000049c
 8006894:	200003a0 	.word	0x200003a0
 8006898:	20000440 	.word	0x20000440
 800689c:	2000027c 	.word	0x2000027c
 80068a0:	2000080c 	.word	0x2000080c
 80068a4:	200002bc 	.word	0x200002bc
 80068a8:	2000035f 	.word	0x2000035f
 80068ac:	44fa0000 	.word	0x44fa0000
 80068b0:	200003a8 	.word	0x200003a8
 80068b4:	200003f4 	.word	0x200003f4
 80068b8:	200002fc 	.word	0x200002fc
 80068bc:	20000354 	.word	0x20000354
 80068c0:	20000328 	.word	0x20000328
 80068c4:	20000080 	.word	0x20000080
 80068c8:	20000300 	.word	0x20000300
 80068cc:	20000000 	.word	0x20000000
 80068d0:	20000314 	.word	0x20000314
 80068d4:	2000033c 	.word	0x2000033c
 80068d8:	20000548 	.word	0x20000548
 80068dc:	20000570 	.word	0x20000570
		break;
 80068e0:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <update_control_loops+0x33c>)
 80068e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006914 <update_control_loops+0x340>)
 80068e8:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80068ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <update_control_loops+0x344>)
 80068ec:	edd3 7a00 	vldr	s15, [r3]
 80068f0:	220e      	movs	r2, #14
 80068f2:	210f      	movs	r1, #15
 80068f4:	eeb0 0a67 	vmov.f32	s0, s15
 80068f8:	4808      	ldr	r0, [pc, #32]	@ (800691c <update_control_loops+0x348>)
 80068fa:	f7fd fe37 	bl	800456c <UnitConverter_angle>
 80068fe:	eef0 7a40 	vmov.f32	s15, s0
 8006902:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <update_control_loops+0x34c>)
 8006904:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006908:	46bd      	mov	sp, r7
 800690a:	ecbd 8b02 	vpop	{d8}
 800690e:	bd98      	pop	{r3, r4, r7, pc}
 8006910:	20000440 	.word	0x20000440
 8006914:	2000027c 	.word	0x2000027c
 8006918:	200003a0 	.word	0x200003a0
 800691c:	2000080c 	.word	0x2000080c
 8006920:	200002bc 	.word	0x200002bc

08006924 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006928:	4b16      	ldr	r3, [pc, #88]	@ (8006984 <check_safety_conditions+0x60>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d127      	bne.n	8006980 <check_safety_conditions+0x5c>
 8006930:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <check_safety_conditions+0x64>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d123      	bne.n	8006980 <check_safety_conditions+0x5c>
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <check_safety_conditions+0x68>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11f      	bne.n	8006980 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006940:	4b13      	ldr	r3, [pc, #76]	@ (8006990 <check_safety_conditions+0x6c>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <check_safety_conditions+0x3c>
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <check_safety_conditions+0x70>)
 800694c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	d502      	bpl.n	8006960 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 800695a:	f000 f81f 	bl	800699c <trigger_software_emergency>
		return;
 800695e:	e010      	b.n	8006982 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006960:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <check_safety_conditions+0x74>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00b      	beq.n	8006982 <check_safety_conditions+0x5e>
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <check_safety_conditions+0x70>)
 800696c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	dd03      	ble.n	8006982 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 800697a:	f000 f80f 	bl	800699c <trigger_software_emergency>
		return;
 800697e:	e000      	b.n	8006982 <check_safety_conditions+0x5e>
		return;
 8006980:	bf00      	nop
	}
}
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000130 	.word	0x20000130
 8006988:	20000360 	.word	0x20000360
 800698c:	2000035f 	.word	0x2000035f
 8006990:	2000035c 	.word	0x2000035c
 8006994:	2000027c 	.word	0x2000027c
 8006998:	2000035d 	.word	0x2000035d

0800699c <trigger_software_emergency>:

void trigger_software_emergency(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 80069a0:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <trigger_software_emergency+0x3c>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d115      	bne.n	80069d4 <trigger_software_emergency+0x38>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <trigger_software_emergency+0x3c>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 80069ae:	f000 f87f 	bl	8006ab0 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 80069b2:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <trigger_software_emergency+0x40>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 80069b8:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <trigger_software_emergency+0x44>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <trigger_software_emergency+0x48>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80069c4:	4b08      	ldr	r3, [pc, #32]	@ (80069e8 <trigger_software_emergency+0x4c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <trigger_software_emergency+0x50>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20000360 	.word	0x20000360
 80069dc:	20000364 	.word	0x20000364
 80069e0:	20000368 	.word	0x20000368
 80069e4:	200002fc 	.word	0x200002fc
 80069e8:	2000027c 	.word	0x2000027c
 80069ec:	200002bc 	.word	0x200002bc

080069f0 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80069f4:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <trigger_hardware_emergency+0x48>)
 80069f6:	2202      	movs	r2, #2
 80069f8:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80069fa:	4b10      	ldr	r3, [pc, #64]	@ (8006a3c <trigger_hardware_emergency+0x4c>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006a00:	f000 f856 	bl	8006ab0 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	@ (8006a40 <trigger_hardware_emergency+0x50>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <trigger_hardware_emergency+0x54>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006a10:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <trigger_hardware_emergency+0x58>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <trigger_hardware_emergency+0x5c>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <trigger_hardware_emergency+0x60>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006a22:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <trigger_hardware_emergency+0x64>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <trigger_hardware_emergency+0x68>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000360 	.word	0x20000360
 8006a3c:	20000369 	.word	0x20000369
 8006a40:	20000364 	.word	0x20000364
 8006a44:	20000368 	.word	0x20000368
 8006a48:	2000035f 	.word	0x2000035f
 8006a4c:	2000035e 	.word	0x2000035e
 8006a50:	200002fc 	.word	0x200002fc
 8006a54:	2000027c 	.word	0x2000027c
 8006a58:	200002bc 	.word	0x200002bc

08006a5c <clear_emergency_state>:

void clear_emergency_state(void) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006a60:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <clear_emergency_state+0x3c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <clear_emergency_state+0x40>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <clear_emergency_state+0x44>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <clear_emergency_state+0x48>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a82:	f004 fa3b 	bl	800aefc <HAL_GPIO_WritePin>
	up_photo = false;
 8006a86:	4b08      	ldr	r3, [pc, #32]	@ (8006aa8 <clear_emergency_state+0x4c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006a8c:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <clear_emergency_state+0x50>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000360 	.word	0x20000360
 8006a9c:	20000369 	.word	0x20000369
 8006aa0:	20000364 	.word	0x20000364
 8006aa4:	20000368 	.word	0x20000368
 8006aa8:	2000035c 	.word	0x2000035c
 8006aac:	2000035d 	.word	0x2000035d

08006ab0 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006ab4:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8006b0c <emergency_stop_all_motors+0x5c>
 8006ab8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8006b10 <emergency_stop_all_motors+0x60>
 8006abc:	4815      	ldr	r0, [pc, #84]	@ (8006b14 <emergency_stop_all_motors+0x64>)
 8006abe:	f7fa fc83 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006ac2:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8006b0c <emergency_stop_all_motors+0x5c>
 8006ac6:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8006b10 <emergency_stop_all_motors+0x60>
 8006aca:	4813      	ldr	r0, [pc, #76]	@ (8006b18 <emergency_stop_all_motors+0x68>)
 8006acc:	f7fa fc7c 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006ad0:	4b12      	ldr	r3, [pc, #72]	@ (8006b1c <emergency_stop_all_motors+0x6c>)
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006ad8:	4b11      	ldr	r3, [pc, #68]	@ (8006b20 <emergency_stop_all_motors+0x70>)
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <emergency_stop_all_motors+0x6c>)
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <emergency_stop_all_motors+0x70>)
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006af0:	480c      	ldr	r0, [pc, #48]	@ (8006b24 <emergency_stop_all_motors+0x74>)
 8006af2:	f7fa fc23 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006af6:	480c      	ldr	r0, [pc, #48]	@ (8006b28 <emergency_stop_all_motors+0x78>)
 8006af8:	f7fa fc20 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006afc:	480b      	ldr	r0, [pc, #44]	@ (8006b2c <emergency_stop_all_motors+0x7c>)
 8006afe:	f7fa fc1d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006b02:	480b      	ldr	r0, [pc, #44]	@ (8006b30 <emergency_stop_all_motors+0x80>)
 8006b04:	f7fa fc1a 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	00000000 	.word	0x00000000
 8006b10:	44fa0000 	.word	0x44fa0000
 8006b14:	200003a8 	.word	0x200003a8
 8006b18:	200003f4 	.word	0x200003f4
 8006b1c:	2000027c 	.word	0x2000027c
 8006b20:	200002bc 	.word	0x200002bc
 8006b24:	200004f8 	.word	0x200004f8
 8006b28:	20000520 	.word	0x20000520
 8006b2c:	20000548 	.word	0x20000548
 8006b30:	20000570 	.word	0x20000570

08006b34 <update_safety_system>:

void update_safety_system(void) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006b38:	4b38      	ldr	r3, [pc, #224]	@ (8006c1c <update_safety_system+0xe8>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d120      	bne.n	8006b82 <update_safety_system+0x4e>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006b40:	4b37      	ldr	r3, [pc, #220]	@ (8006c20 <update_safety_system+0xec>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a36      	ldr	r2, [pc, #216]	@ (8006c20 <update_safety_system+0xec>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b4e:	d318      	bcc.n	8006b82 <update_safety_system+0x4e>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006b50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006b58:	f004 f9e8 	bl	800af2c <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006b5c:	4b31      	ldr	r3, [pc, #196]	@ (8006c24 <update_safety_system+0xf0>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f083 0301 	eor.w	r3, r3, #1
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <update_safety_system+0xf0>)
 8006b7a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006b7c:	4b28      	ldr	r3, [pc, #160]	@ (8006c20 <update_safety_system+0xec>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006b82:	4b26      	ldr	r3, [pc, #152]	@ (8006c1c <update_safety_system+0xe8>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d135      	bne.n	8006bf6 <update_safety_system+0xc2>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006b8a:	2110      	movs	r1, #16
 8006b8c:	4826      	ldr	r0, [pc, #152]	@ (8006c28 <update_safety_system+0xf4>)
 8006b8e:	f004 f99d 	bl	800aecc <HAL_GPIO_ReadPin>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d121      	bne.n	8006bdc <update_safety_system+0xa8>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006b98:	4b21      	ldr	r3, [pc, #132]	@ (8006c20 <update_safety_system+0xec>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	4a20      	ldr	r2, [pc, #128]	@ (8006c20 <update_safety_system+0xec>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ba6:	d326      	bcc.n	8006bf6 <update_safety_system+0xc2>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006bb0:	f004 f9bc 	bl	800af2c <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c24 <update_safety_system+0xf0>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f083 0301 	eor.w	r3, r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b14      	ldr	r3, [pc, #80]	@ (8006c24 <update_safety_system+0xf0>)
 8006bd2:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8006bd4:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <update_safety_system+0xec>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e00c      	b.n	8006bf6 <update_safety_system+0xc2>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006be6:	f004 f989 	bl	800aefc <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8006bea:	4b0e      	ldr	r3, [pc, #56]	@ (8006c24 <update_safety_system+0xf0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <update_safety_system+0xec>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8006bf6:	4b09      	ldr	r3, [pc, #36]	@ (8006c1c <update_safety_system+0xe8>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10c      	bne.n	8006c18 <update_safety_system+0xe4>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c08:	f004 f978 	bl	800aefc <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8006c0c:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <update_safety_system+0xf0>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8006c12:	4b03      	ldr	r3, [pc, #12]	@ (8006c20 <update_safety_system+0xec>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
	}
}
 8006c18:	bf00      	nop
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000360 	.word	0x20000360
 8006c20:	20000364 	.word	0x20000364
 8006c24:	20000368 	.word	0x20000368
 8006c28:	48000400 	.word	0x48000400

08006c2c <is_emergency_active>:

bool is_emergency_active(void) {
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <is_emergency_active+0x1c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bf14      	ite	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20000360 	.word	0x20000360

08006c4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d105      	bne.n	8006c68 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8006c5c:	4b45      	ldr	r3, [pc, #276]	@ (8006d74 <HAL_GPIO_EXTI_Callback+0x128>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	4a44      	ldr	r2, [pc, #272]	@ (8006d74 <HAL_GPIO_EXTI_Callback+0x128>)
 8006c64:	6013      	str	r3, [r2, #0]
		return;
 8006c66:	e081      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d103      	bne.n	8006c76 <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8006c6e:	4b42      	ldr	r3, [pc, #264]	@ (8006d78 <HAL_GPIO_EXTI_Callback+0x12c>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
		return;
 8006c74:	e07a      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d103      	bne.n	8006c86 <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8006c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d7c <HAL_GPIO_EXTI_Callback+0x130>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
		return;
 8006c84:	e072      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
	}

	if (GPIO_Pin == EMER_Pin) {
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d102      	bne.n	8006c92 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8006c8c:	f7ff feb0 	bl	80069f0 <trigger_hardware_emergency>
		return;
 8006c90:	e06c      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
	}

	if (GPIO_Pin == J1_Pin) {
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d13e      	bne.n	8006d16 <HAL_GPIO_EXTI_Callback+0xca>
		if (!is_emergency_active() && !homing_active
 8006c98:	f7ff ffc8 	bl	8006c2c <is_emergency_active>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f083 0301 	eor.w	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05c      	beq.n	8006d62 <HAL_GPIO_EXTI_Callback+0x116>
 8006ca8:	4b35      	ldr	r3, [pc, #212]	@ (8006d80 <HAL_GPIO_EXTI_Callback+0x134>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f083 0301 	eor.w	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d055      	beq.n	8006d62 <HAL_GPIO_EXTI_Callback+0x116>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8006cb6:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <HAL_GPIO_EXTI_Callback+0x138>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d151      	bne.n	8006d62 <HAL_GPIO_EXTI_Callback+0x116>
 8006cbe:	4b32      	ldr	r3, [pc, #200]	@ (8006d88 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f083 0301 	eor.w	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d04a      	beq.n	8006d62 <HAL_GPIO_EXTI_Callback+0x116>
			start_combined_trajectory(
 8006ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8006d8c <HAL_GPIO_EXTI_Callback+0x140>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d90 <HAL_GPIO_EXTI_Callback+0x144>)
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8006cda:	4b2c      	ldr	r3, [pc, #176]	@ (8006d8c <HAL_GPIO_EXTI_Callback+0x140>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8006cde:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_GPIO_EXTI_Callback+0x148>)
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8006ce8:	eef0 0a47 	vmov.f32	s1, s14
 8006cec:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf0:	f7ff f91a 	bl	8005f28 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8006cf4:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <HAL_GPIO_EXTI_Callback+0x140>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8006cfa:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <HAL_GPIO_EXTI_Callback+0x14c>)
 8006cfc:	fb83 3102 	smull	r3, r1, r3, r2
 8006d00:	17d3      	asrs	r3, r2, #31
 8006d02:	1ac9      	subs	r1, r1, r3
 8006d04:	460b      	mov	r3, r1
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	440b      	add	r3, r1
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8006d0e:	b2ca      	uxtb	r2, r1
 8006d10:	4b1e      	ldr	r3, [pc, #120]	@ (8006d8c <HAL_GPIO_EXTI_Callback+0x140>)
 8006d12:	701a      	strb	r2, [r3, #0]
		}
		return;
 8006d14:	e025      	b.n	8006d62 <HAL_GPIO_EXTI_Callback+0x116>
	}

	if (GPIO_Pin == J3_Pin) {
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d10f      	bne.n	8006d3e <HAL_GPIO_EXTI_Callback+0xf2>
		if (!is_emergency_active() && motion_sequence_state == MOTION_IDLE) {
 8006d1e:	f7ff ff85 	bl	8006c2c <is_emergency_active>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01b      	beq.n	8006d66 <HAL_GPIO_EXTI_Callback+0x11a>
 8006d2e:	4b15      	ldr	r3, [pc, #84]	@ (8006d84 <HAL_GPIO_EXTI_Callback+0x138>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d117      	bne.n	8006d66 <HAL_GPIO_EXTI_Callback+0x11a>
			start_homing_sequence(false);
 8006d36:	2000      	movs	r0, #0
 8006d38:	f7fe fa74 	bl	8005224 <start_homing_sequence>
		}
		return;
 8006d3c:	e013      	b.n	8006d66 <HAL_GPIO_EXTI_Callback+0x11a>
	}

	if (GPIO_Pin == J4_Pin) {
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d44:	d112      	bne.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
		if (is_emergency_active()) {
 8006d46:	f7ff ff71 	bl	8006c2c <is_emergency_active>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <HAL_GPIO_EXTI_Callback+0x11e>
			clear_emergency_state();
 8006d50:	f7ff fe84 	bl	8006a5c <clear_emergency_state>
			first_startup = true;
 8006d54:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
			start_homing_sequence(true);
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	f7fe fa62 	bl	8005224 <start_homing_sequence>
		}
		return;
 8006d60:	e003      	b.n	8006d6a <HAL_GPIO_EXTI_Callback+0x11e>
		return;
 8006d62:	bf00      	nop
 8006d64:	e002      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
		return;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_GPIO_EXTI_Callback+0x120>
		return;
 8006d6a:	bf00      	nop
	}
}
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000358 	.word	0x20000358
 8006d78:	2000035c 	.word	0x2000035c
 8006d7c:	2000035d 	.word	0x2000035d
 8006d80:	2000035f 	.word	0x2000035f
 8006d84:	200002fc 	.word	0x200002fc
 8006d88:	2000012f 	.word	0x2000012f
 8006d8c:	20000350 	.word	0x20000350
 8006d90:	08012888 	.word	0x08012888
 8006d94:	080128a0 	.word	0x080128a0
 8006d98:	2aaaaaab 	.word	0x2aaaaaab

08006d9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a64      	ldr	r2, [pc, #400]	@ (8006f38 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	f040 80c1 	bne.w	8006f30 <HAL_TIM_PeriodElapsedCallback+0x194>
		plotter_update_sensors();
 8006dae:	f000 fca7 	bl	8007700 <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8006db2:	4862      	ldr	r0, [pc, #392]	@ (8006f3c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8006db4:	f7fc fd70 	bl	8003898 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8006db8:	4860      	ldr	r0, [pc, #384]	@ (8006f3c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8006dba:	f7fc fe59 	bl	8003a70 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8006dbe:	4860      	ldr	r0, [pc, #384]	@ (8006f40 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8006dc0:	f7fc fd6a 	bl	8003898 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8006dc4:	485e      	ldr	r0, [pc, #376]	@ (8006f40 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8006dc6:	f7fc fe53 	bl	8003a70 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8006dca:	4b5e      	ldr	r3, [pc, #376]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006dcc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006dd0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8006dd4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8006dd8:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 8006f48 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8006ddc:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8006f4c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8006de0:	eeb0 0a67 	vmov.f32	s0, s15
 8006de4:	f7fa ffc4 	bl	8001d70 <mapf>
 8006de8:	eef0 7a40 	vmov.f32	s15, s0
 8006dec:	4b55      	ldr	r3, [pc, #340]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006dee:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8006df2:	4b54      	ldr	r3, [pc, #336]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006df4:	edd3 7a08 	vldr	s15, [r3, #32]
 8006df8:	4b51      	ldr	r3, [pc, #324]	@ (8006f40 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8006dfa:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006dfe:	eef0 0a47 	vmov.f32	s1, s14
 8006e02:	eeb0 0a67 	vmov.f32	s0, s15
 8006e06:	4852      	ldr	r0, [pc, #328]	@ (8006f50 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8006e08:	f7fd fe10 	bl	8004a2c <SteadyStateKalmanFilter>
 8006e0c:	eef0 7a40 	vmov.f32	s15, s0
 8006e10:	4b4c      	ldr	r3, [pc, #304]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006e12:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8006e16:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006e18:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e1c:	eef4 7a67 	vcmp.f32	s15, s15
 8006e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e24:	d703      	bvc.n	8006e2e <HAL_TIM_PeriodElapsedCallback+0x92>
			revolute_axis.kalman_velocity = 0.0f;
 8006e26:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8006e2e:	4b49      	ldr	r3, [pc, #292]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006e34:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8006e38:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8006e3c:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8006f48 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8006e40:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8006f4c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8006e44:	eeb0 0a67 	vmov.f32	s0, s15
 8006e48:	f7fa ff92 	bl	8001d70 <mapf>
 8006e4c:	eef0 7a40 	vmov.f32	s15, s0
 8006e50:	4b40      	ldr	r3, [pc, #256]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e52:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8006e56:	4b3f      	ldr	r3, [pc, #252]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e58:	edd3 7a08 	vldr	s15, [r3, #32]
 8006e5c:	4b37      	ldr	r3, [pc, #220]	@ (8006f3c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8006e5e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006e62:	eef0 0a47 	vmov.f32	s1, s14
 8006e66:	eeb0 0a67 	vmov.f32	s0, s15
 8006e6a:	483b      	ldr	r0, [pc, #236]	@ (8006f58 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8006e6c:	f7fb ff4e 	bl	8002d0c <MotorKalman_Estimate>
 8006e70:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8006e74:	4b39      	ldr	r3, [pc, #228]	@ (8006f5c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8006e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006f60 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8006e82:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8006e86:	4b33      	ldr	r3, [pc, #204]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e88:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8006e8c:	4b31      	ldr	r3, [pc, #196]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e92:	eef4 7a67 	vcmp.f32	s15, s15
 8006e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9a:	d703      	bvc.n	8006ea4 <HAL_TIM_PeriodElapsedCallback+0x108>
			prismatic_axis.kalman_velocity = 0.0f;
 8006e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f54 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	61da      	str	r2, [r3, #28]
		}

		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8006f64 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d917      	bls.n	8006ee2 <HAL_TIM_PeriodElapsedCallback+0x146>
			position_control_tick = 0;
 8006eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

			if (!homing_active && (!is_emergency_active() || tuning_mode)) {
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f68 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f083 0301 	eor.w	r3, r3, #1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00d      	beq.n	8006ee2 <HAL_TIM_PeriodElapsedCallback+0x146>
 8006ec6:	f7ff feb1 	bl	8006c2c <is_emergency_active>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f083 0301 	eor.w	r3, r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <HAL_TIM_PeriodElapsedCallback+0x142>
 8006ed6:	4b25      	ldr	r3, [pc, #148]	@ (8006f6c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_PeriodElapsedCallback+0x146>
				update_position_control();
 8006ede:	f7ff f8f1 	bl	80060c4 <update_position_control>
			}
		}

		if (!homing_active && (!is_emergency_active() || tuning_mode)) {
 8006ee2:	4b21      	ldr	r3, [pc, #132]	@ (8006f68 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f083 0301 	eor.w	r3, r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00d      	beq.n	8006f0c <HAL_TIM_PeriodElapsedCallback+0x170>
 8006ef0:	f7ff fe9c 	bl	8006c2c <is_emergency_active>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f083 0301 	eor.w	r3, r3, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8006f00:	4b1a      	ldr	r3, [pc, #104]	@ (8006f6c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_TIM_PeriodElapsedCallback+0x170>
			update_velocity_control();
 8006f08:	f7ff f99a 	bl	8006240 <update_velocity_control>
		}

		update_safety_system();
 8006f0c:	f7ff fe12 	bl	8006b34 <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8006f10:	f7ff fe8c 	bl	8006c2c <is_emergency_active>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f083 0301 	eor.w	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8006f20:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_PeriodElapsedCallback+0x190>
			check_safety_conditions();
 8006f28:	f7ff fcfc 	bl	8006924 <check_safety_conditions>
		}

		update_control_loops();
 8006f2c:	f7ff fb52 	bl	80065d4 <update_control_loops>
	}
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	200019d8 	.word	0x200019d8
 8006f3c:	20000440 	.word	0x20000440
 8006f40:	2000049c 	.word	0x2000049c
 8006f44:	200002bc 	.word	0x200002bc
 8006f48:	477fff00 	.word	0x477fff00
 8006f4c:	c77fff00 	.word	0xc77fff00
 8006f50:	20001518 	.word	0x20001518
 8006f54:	2000027c 	.word	0x2000027c
 8006f58:	200011ac 	.word	0x200011ac
 8006f5c:	20000100 	.word	0x20000100
 8006f60:	447a0000 	.word	0x447a0000
 8006f64:	2000039c 	.word	0x2000039c
 8006f68:	2000035f 	.word	0x2000035f
 8006f6c:	20000130 	.word	0x20000130

08006f70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006f74:	b672      	cpsid	i
}
 8006f76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <Error_Handler+0x8>
 8006f7c:	0000      	movs	r0, r0
	...

08006f80 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8006f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f84:	ed2d 8b02 	vpush	{d8}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max * Disturbance_Constant.prismatic_pulley_radius * 1000;
 8006f8c:	4bc4      	ldr	r3, [pc, #784]	@ (80072a0 <plotter_begin+0x320>)
 8006f8e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8006f92:	4bc4      	ldr	r3, [pc, #784]	@ (80072a4 <plotter_begin+0x324>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7f9 faa2 	bl	80004e0 <__aeabi_f2d>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 faf4 	bl	8000590 <__aeabi_dmul>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4610      	mov	r0, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	4bbc      	ldr	r3, [pc, #752]	@ (80072a8 <plotter_begin+0x328>)
 8006fb6:	f7f9 faeb 	bl	8000590 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	49b8      	ldr	r1, [pc, #736]	@ (80072a0 <plotter_begin+0x320>)
 8006fc0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8006fc4:	4bb6      	ldr	r3, [pc, #728]	@ (80072a0 <plotter_begin+0x320>)
 8006fc6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	f7f9 f929 	bl	8000224 <__adddf3>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	49b2      	ldr	r1, [pc, #712]	@ (80072a0 <plotter_begin+0x320>)
 8006fd8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 8006fdc:	49b0      	ldr	r1, [pc, #704]	@ (80072a0 <plotter_begin+0x320>)
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	4bb2      	ldr	r3, [pc, #712]	@ (80072ac <plotter_begin+0x32c>)
 8006fe4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000;
 8006fe8:	49ad      	ldr	r1, [pc, #692]	@ (80072a0 <plotter_begin+0x320>)
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	4bae      	ldr	r3, [pc, #696]	@ (80072a8 <plotter_begin+0x328>)
 8006ff0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8006ff4:	4bae      	ldr	r3, [pc, #696]	@ (80072b0 <plotter_begin+0x330>)
 8006ff6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8006ffa:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007298 <plotter_begin+0x318>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fac6 	bl	8000590 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8007008:	49a9      	ldr	r1, [pc, #676]	@ (80072b0 <plotter_begin+0x330>)
 800700a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 800700e:	49a8      	ldr	r1, [pc, #672]	@ (80072b0 <plotter_begin+0x330>)
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	4ba7      	ldr	r3, [pc, #668]	@ (80072b4 <plotter_begin+0x334>)
 8007016:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.5;
 800701a:	49a5      	ldr	r1, [pc, #660]	@ (80072b0 <plotter_begin+0x330>)
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	4ba5      	ldr	r3, [pc, #660]	@ (80072b8 <plotter_begin+0x338>)
 8007022:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8007026:	2100      	movs	r1, #0
 8007028:	48a4      	ldr	r0, [pc, #656]	@ (80072bc <plotter_begin+0x33c>)
 800702a:	f000 fc2f 	bl	800788c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800702e:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80072c0 <plotter_begin+0x340>
 8007032:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80072c4 <plotter_begin+0x344>
 8007036:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80072fc <plotter_begin+0x37c>
 800703a:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80072fc <plotter_begin+0x37c>
 800703e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80072c8 <plotter_begin+0x348>
 8007042:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80072c0 <plotter_begin+0x340>
 8007046:	489d      	ldr	r0, [pc, #628]	@ (80072bc <plotter_begin+0x33c>)
 8007048:	f000 fc7e 	bl	8007948 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800704c:	2102      	movs	r1, #2
 800704e:	489f      	ldr	r0, [pc, #636]	@ (80072cc <plotter_begin+0x34c>)
 8007050:	f000 fc1c 	bl	800788c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8007054:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 80072c0 <plotter_begin+0x340>
 8007058:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 80072c4 <plotter_begin+0x344>
 800705c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 80072fc <plotter_begin+0x37c>
 8007060:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80072fc <plotter_begin+0x37c>
 8007064:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007068:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80072c8 <plotter_begin+0x348>
 800706c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80072c0 <plotter_begin+0x340>
 8007070:	4896      	ldr	r0, [pc, #600]	@ (80072cc <plotter_begin+0x34c>)
 8007072:	f000 fc94 	bl	800799e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8007076:	2100      	movs	r1, #0
 8007078:	4895      	ldr	r0, [pc, #596]	@ (80072d0 <plotter_begin+0x350>)
 800707a:	f000 fc07 	bl	800788c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800707e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80072d4 <plotter_begin+0x354>
 8007082:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80072d8 <plotter_begin+0x358>
 8007086:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80072fc <plotter_begin+0x37c>
 800708a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80072fc <plotter_begin+0x37c>
 800708e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80072c8 <plotter_begin+0x348>
 8007092:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80072d4 <plotter_begin+0x354>
 8007096:	488e      	ldr	r0, [pc, #568]	@ (80072d0 <plotter_begin+0x350>)
 8007098:	f000 fc56 	bl	8007948 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800709c:	2102      	movs	r1, #2
 800709e:	488f      	ldr	r0, [pc, #572]	@ (80072dc <plotter_begin+0x35c>)
 80070a0:	f000 fbf4 	bl	800788c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80070a4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80070a8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80070ac:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80072fc <plotter_begin+0x37c>
 80070b0:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80072fc <plotter_begin+0x37c>
 80070b4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80070b8:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80072c8 <plotter_begin+0x348>
 80070bc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80070c0:	4886      	ldr	r0, [pc, #536]	@ (80072dc <plotter_begin+0x35c>)
 80070c2:	f000 fc6c 	bl	800799e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80070c6:	2100      	movs	r1, #0
 80070c8:	4885      	ldr	r0, [pc, #532]	@ (80072e0 <plotter_begin+0x360>)
 80070ca:	f000 fbdf 	bl	800788c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80070ce:	4b74      	ldr	r3, [pc, #464]	@ (80072a0 <plotter_begin+0x320>)
 80070d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7f9 fd3c 	bl	8000b54 <__aeabi_d2f>
 80070dc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80070de:	4b70      	ldr	r3, [pc, #448]	@ (80072a0 <plotter_begin+0x320>)
 80070e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80070e4:	4610      	mov	r0, r2
 80070e6:	4619      	mov	r1, r3
 80070e8:	f7f9 fd34 	bl	8000b54 <__aeabi_d2f>
 80070ec:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80070f6:	4b6a      	ldr	r3, [pc, #424]	@ (80072a0 <plotter_begin+0x320>)
 80070f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	f7f9 fd28 	bl	8000b54 <__aeabi_d2f>
 8007104:	4603      	mov	r3, r0
 8007106:	ee02 3a90 	vmov	s5, r3
 800710a:	eeb0 2a48 	vmov.f32	s4, s16
 800710e:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80072fc <plotter_begin+0x37c>
 8007112:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80072fc <plotter_begin+0x37c>
 8007116:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80072c8 <plotter_begin+0x348>
 800711a:	ee00 4a10 	vmov	s0, r4
 800711e:	4870      	ldr	r0, [pc, #448]	@ (80072e0 <plotter_begin+0x360>)
 8007120:	f000 fc12 	bl	8007948 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8007124:	2102      	movs	r1, #2
 8007126:	486f      	ldr	r0, [pc, #444]	@ (80072e4 <plotter_begin+0x364>)
 8007128:	f000 fbb0 	bl	800788c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800712c:	4b5c      	ldr	r3, [pc, #368]	@ (80072a0 <plotter_begin+0x320>)
 800712e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	f7f9 fd0d 	bl	8000b54 <__aeabi_d2f>
 800713a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800713c:	4b58      	ldr	r3, [pc, #352]	@ (80072a0 <plotter_begin+0x320>)
 800713e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007142:	4610      	mov	r0, r2
 8007144:	4619      	mov	r1, r3
 8007146:	f7f9 fd05 	bl	8000b54 <__aeabi_d2f>
 800714a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8007154:	4b52      	ldr	r3, [pc, #328]	@ (80072a0 <plotter_begin+0x320>)
 8007156:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	f7f9 fcf9 	bl	8000b54 <__aeabi_d2f>
 8007162:	4603      	mov	r3, r0
 8007164:	ee03 3a10 	vmov	s6, r3
 8007168:	eef0 2a48 	vmov.f32	s5, s16
 800716c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80072fc <plotter_begin+0x37c>
 8007170:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80072fc <plotter_begin+0x37c>
 8007174:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007178:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80072c8 <plotter_begin+0x348>
 800717c:	ee00 4a10 	vmov	s0, r4
 8007180:	4858      	ldr	r0, [pc, #352]	@ (80072e4 <plotter_begin+0x364>)
 8007182:	f000 fc0c 	bl	800799e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8007186:	2100      	movs	r1, #0
 8007188:	4857      	ldr	r0, [pc, #348]	@ (80072e8 <plotter_begin+0x368>)
 800718a:	f000 fb7f 	bl	800788c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800718e:	4b48      	ldr	r3, [pc, #288]	@ (80072b0 <plotter_begin+0x330>)
 8007190:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	f7f9 fcdc 	bl	8000b54 <__aeabi_d2f>
 800719c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800719e:	4b44      	ldr	r3, [pc, #272]	@ (80072b0 <plotter_begin+0x330>)
 80071a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	f7f9 fcd4 	bl	8000b54 <__aeabi_d2f>
 80071ac:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80071b6:	4b3e      	ldr	r3, [pc, #248]	@ (80072b0 <plotter_begin+0x330>)
 80071b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	f7f9 fcc8 	bl	8000b54 <__aeabi_d2f>
 80071c4:	4603      	mov	r3, r0
 80071c6:	ee02 3a90 	vmov	s5, r3
 80071ca:	eeb0 2a48 	vmov.f32	s4, s16
 80071ce:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80072fc <plotter_begin+0x37c>
 80071d2:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80072fc <plotter_begin+0x37c>
 80071d6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80072c8 <plotter_begin+0x348>
 80071da:	ee00 4a10 	vmov	s0, r4
 80071de:	4842      	ldr	r0, [pc, #264]	@ (80072e8 <plotter_begin+0x368>)
 80071e0:	f000 fbb2 	bl	8007948 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80071e4:	2102      	movs	r1, #2
 80071e6:	4841      	ldr	r0, [pc, #260]	@ (80072ec <plotter_begin+0x36c>)
 80071e8:	f000 fb50 	bl	800788c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80071ec:	4b30      	ldr	r3, [pc, #192]	@ (80072b0 <plotter_begin+0x330>)
 80071ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	f7f9 fcad 	bl	8000b54 <__aeabi_d2f>
 80071fa:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80071fc:	4b2c      	ldr	r3, [pc, #176]	@ (80072b0 <plotter_begin+0x330>)
 80071fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	f7f9 fca5 	bl	8000b54 <__aeabi_d2f>
 800720a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8007214:	4b26      	ldr	r3, [pc, #152]	@ (80072b0 <plotter_begin+0x330>)
 8007216:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800721a:	4610      	mov	r0, r2
 800721c:	4619      	mov	r1, r3
 800721e:	f7f9 fc99 	bl	8000b54 <__aeabi_d2f>
 8007222:	4603      	mov	r3, r0
 8007224:	ee03 3a10 	vmov	s6, r3
 8007228:	eef0 2a48 	vmov.f32	s5, s16
 800722c:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 80072fc <plotter_begin+0x37c>
 8007230:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80072fc <plotter_begin+0x37c>
 8007234:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007238:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80072c8 <plotter_begin+0x348>
 800723c:	ee00 4a10 	vmov	s0, r4
 8007240:	482a      	ldr	r0, [pc, #168]	@ (80072ec <plotter_begin+0x36c>)
 8007242:	f000 fbac 	bl	800799e <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8007246:	482a      	ldr	r0, [pc, #168]	@ (80072f0 <plotter_begin+0x370>)
 8007248:	f7fd f8fa 	bl	8004440 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800724c:	4b15      	ldr	r3, [pc, #84]	@ (80072a4 <plotter_begin+0x324>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 f945 	bl	80004e0 <__aeabi_f2d>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	f7f8 ffe3 	bl	8000224 <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <plotter_begin+0x328>)
 800726c:	f7f9 f990 	bl	8000590 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8007274:	4610      	mov	r0, r2
 8007276:	4619      	mov	r1, r3
 8007278:	f7f9 fc6c 	bl	8000b54 <__aeabi_d2f>
 800727c:	4603      	mov	r3, r0
 800727e:	ee00 3a90 	vmov	s1, r3
 8007282:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800728a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800728e:	4919      	ldr	r1, [pc, #100]	@ (80072f4 <plotter_begin+0x374>)
 8007290:	4819      	ldr	r0, [pc, #100]	@ (80072f8 <plotter_begin+0x378>)
 8007292:	f7fc fa8f 	bl	80037b4 <QEI_init>
 8007296:	e033      	b.n	8007300 <plotter_begin+0x380>
 8007298:	55555555 	.word	0x55555555
 800729c:	3fe55555 	.word	0x3fe55555
 80072a0:	20000080 	.word	0x20000080
 80072a4:	20000100 	.word	0x20000100
 80072a8:	408f4000 	.word	0x408f4000
 80072ac:	407f4000 	.word	0x407f4000
 80072b0:	20000000 	.word	0x20000000
 80072b4:	40140000 	.word	0x40140000
 80072b8:	40040000 	.word	0x40040000
 80072bc:	200005ec 	.word	0x200005ec
 80072c0:	477fff00 	.word	0x477fff00
 80072c4:	c77fff00 	.word	0xc77fff00
 80072c8:	3dcccccd 	.word	0x3dcccccd
 80072cc:	20000630 	.word	0x20000630
 80072d0:	20000674 	.word	0x20000674
 80072d4:	43480000 	.word	0x43480000
 80072d8:	c3480000 	.word	0xc3480000
 80072dc:	200006b8 	.word	0x200006b8
 80072e0:	200006fc 	.word	0x200006fc
 80072e4:	20000740 	.word	0x20000740
 80072e8:	20000784 	.word	0x20000784
 80072ec:	200007c8 	.word	0x200007c8
 80072f0:	2000080c 	.word	0x2000080c
 80072f4:	20001c3c 	.word	0x20001c3c
 80072f8:	20000440 	.word	0x20000440
 80072fc:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8007300:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80072fc <plotter_begin+0x37c>
 8007304:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800730c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007310:	49af      	ldr	r1, [pc, #700]	@ (80075d0 <plotter_begin+0x650>)
 8007312:	48b0      	ldr	r0, [pc, #704]	@ (80075d4 <plotter_begin+0x654>)
 8007314:	f7fc fa4e 	bl	80037b4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8007318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007322:	2204      	movs	r2, #4
 8007324:	49ac      	ldr	r1, [pc, #688]	@ (80075d8 <plotter_begin+0x658>)
 8007326:	48ad      	ldr	r0, [pc, #692]	@ (80075dc <plotter_begin+0x65c>)
 8007328:	f7fa f82a 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800732c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4bab      	ldr	r3, [pc, #684]	@ (80075e0 <plotter_begin+0x660>)
 8007334:	2200      	movs	r2, #0
 8007336:	49a8      	ldr	r1, [pc, #672]	@ (80075d8 <plotter_begin+0x658>)
 8007338:	48aa      	ldr	r0, [pc, #680]	@ (80075e4 <plotter_begin+0x664>)
 800733a:	f7fa f821 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800733e:	220c      	movs	r2, #12
 8007340:	49a9      	ldr	r1, [pc, #676]	@ (80075e8 <plotter_begin+0x668>)
 8007342:	48aa      	ldr	r0, [pc, #680]	@ (80075ec <plotter_begin+0x66c>)
 8007344:	f7fc f808 	bl	8003358 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007348:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80075f0 <plotter_begin+0x670>
 800734c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80075f4 <plotter_begin+0x674>
 8007350:	48a2      	ldr	r0, [pc, #648]	@ (80075dc <plotter_begin+0x65c>)
 8007352:	f7fa f839 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007356:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 80075f0 <plotter_begin+0x670>
 800735a:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80075f4 <plotter_begin+0x674>
 800735e:	48a1      	ldr	r0, [pc, #644]	@ (80075e4 <plotter_begin+0x664>)
 8007360:	f7fa f832 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8007364:	4ba4      	ldr	r3, [pc, #656]	@ (80075f8 <plotter_begin+0x678>)
 8007366:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 800736a:	4610      	mov	r0, r2
 800736c:	4619      	mov	r1, r3
 800736e:	f7f9 fbf1 	bl	8000b54 <__aeabi_d2f>
 8007372:	4603      	mov	r3, r0
 8007374:	ee01 3a90 	vmov	s3, r3
 8007378:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 80075fc <plotter_begin+0x67c>
 800737c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 8007600 <plotter_begin+0x680>
 8007380:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8007604 <plotter_begin+0x684>
 8007384:	48a0      	ldr	r0, [pc, #640]	@ (8007608 <plotter_begin+0x688>)
 8007386:	f7f9 ff14 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800738a:	4b9b      	ldr	r3, [pc, #620]	@ (80075f8 <plotter_begin+0x678>)
 800738c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	f7f9 fbde 	bl	8000b54 <__aeabi_d2f>
 8007398:	4603      	mov	r3, r0
 800739a:	ee01 3a90 	vmov	s3, r3
 800739e:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 80075f0 <plotter_begin+0x670>
 80073a2:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 800760c <plotter_begin+0x68c>
 80073a6:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8007610 <plotter_begin+0x690>
 80073aa:	489a      	ldr	r0, [pc, #616]	@ (8007614 <plotter_begin+0x694>)
 80073ac:	f7f9 ff01 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 10, 1e-10, 1,
			ZGX45RGG_150RPM_Constant.qd_max);
 80073b0:	4b99      	ldr	r3, [pc, #612]	@ (8007618 <plotter_begin+0x698>)
 80073b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 10, 1e-10, 1,
 80073b6:	4610      	mov	r0, r2
 80073b8:	4619      	mov	r1, r3
 80073ba:	f7f9 fbcb 	bl	8000b54 <__aeabi_d2f>
 80073be:	4603      	mov	r3, r0
 80073c0:	ee01 3a90 	vmov	s3, r3
 80073c4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80073c8:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 8007600 <plotter_begin+0x680>
 80073cc:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80073d0:	4892      	ldr	r0, [pc, #584]	@ (800761c <plotter_begin+0x69c>)
 80073d2:	f7f9 feee 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
			ZGX45RGG_150RPM_Constant.U_max);
 80073d6:	4b90      	ldr	r3, [pc, #576]	@ (8007618 <plotter_begin+0x698>)
 80073d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	f7f9 fbb8 	bl	8000b54 <__aeabi_d2f>
 80073e4:	4603      	mov	r3, r0
 80073e6:	ee01 3a90 	vmov	s3, r3
 80073ea:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8007620 <plotter_begin+0x6a0>
 80073ee:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8007610 <plotter_begin+0x690>
 80073f2:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8007624 <plotter_begin+0x6a4>
 80073f6:	488c      	ldr	r0, [pc, #560]	@ (8007628 <plotter_begin+0x6a8>)
 80073f8:	f7f9 fedb 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80073fc:	4986      	ldr	r1, [pc, #536]	@ (8007618 <plotter_begin+0x698>)
 80073fe:	488b      	ldr	r0, [pc, #556]	@ (800762c <plotter_begin+0x6ac>)
 8007400:	f7fa f8bc 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8007404:	497c      	ldr	r1, [pc, #496]	@ (80075f8 <plotter_begin+0x678>)
 8007406:	488a      	ldr	r0, [pc, #552]	@ (8007630 <plotter_begin+0x6b0>)
 8007408:	f7fa fa3c 	bl	8001884 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800740c:	4a89      	ldr	r2, [pc, #548]	@ (8007634 <plotter_begin+0x6b4>)
 800740e:	4982      	ldr	r1, [pc, #520]	@ (8007618 <plotter_begin+0x698>)
 8007410:	4889      	ldr	r0, [pc, #548]	@ (8007638 <plotter_begin+0x6b8>)
 8007412:	f7fa f942 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8007416:	4a87      	ldr	r2, [pc, #540]	@ (8007634 <plotter_begin+0x6b4>)
 8007418:	4977      	ldr	r1, [pc, #476]	@ (80075f8 <plotter_begin+0x678>)
 800741a:	4888      	ldr	r0, [pc, #544]	@ (800763c <plotter_begin+0x6bc>)
 800741c:	f7fa fac1 	bl	80019a2 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8007420:	2302      	movs	r3, #2
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8007640 <plotter_begin+0x6c0>
 8007428:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8007644 <plotter_begin+0x6c4>
 800742c:	2364      	movs	r3, #100	@ 0x64
 800742e:	4a86      	ldr	r2, [pc, #536]	@ (8007648 <plotter_begin+0x6c8>)
 8007430:	4986      	ldr	r1, [pc, #536]	@ (800764c <plotter_begin+0x6cc>)
 8007432:	4887      	ldr	r0, [pc, #540]	@ (8007650 <plotter_begin+0x6d0>)
 8007434:	f7f9 fd74 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8007438:	2105      	movs	r1, #5
 800743a:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8007654 <plotter_begin+0x6d4>
 800743e:	4884      	ldr	r0, [pc, #528]	@ (8007650 <plotter_begin+0x6d0>)
 8007440:	f7f9 fe20 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8007444:	4882      	ldr	r0, [pc, #520]	@ (8007650 <plotter_begin+0x6d0>)
 8007446:	f7f9 fdc3 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800744a:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8007658 <plotter_begin+0x6d8>
 800744e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8007452:	211f      	movs	r1, #31
 8007454:	4881      	ldr	r0, [pc, #516]	@ (800765c <plotter_begin+0x6dc>)
 8007456:	f7fa fb6b 	bl	8001b30 <FIR_init>
	FIR_init(&acceleration_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800745a:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8007658 <plotter_begin+0x6d8>
 800745e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8007462:	211f      	movs	r1, #31
 8007464:	487e      	ldr	r0, [pc, #504]	@ (8007660 <plotter_begin+0x6e0>)
 8007466:	f7fa fb63 	bl	8001b30 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800746a:	4b63      	ldr	r3, [pc, #396]	@ (80075f8 <plotter_begin+0x678>)
 800746c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007470:	4610      	mov	r0, r2
 8007472:	4619      	mov	r1, r3
 8007474:	f7f9 fb6e 	bl	8000b54 <__aeabi_d2f>
 8007478:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800747a:	4b5f      	ldr	r3, [pc, #380]	@ (80075f8 <plotter_begin+0x678>)
 800747c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007480:	4610      	mov	r0, r2
 8007482:	4619      	mov	r1, r3
 8007484:	f7f9 fb66 	bl	8000b54 <__aeabi_d2f>
 8007488:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800748a:	4b5b      	ldr	r3, [pc, #364]	@ (80075f8 <plotter_begin+0x678>)
 800748c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007490:	4610      	mov	r0, r2
 8007492:	4619      	mov	r1, r3
 8007494:	f7f9 fb5e 	bl	8000b54 <__aeabi_d2f>
 8007498:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800749a:	4b57      	ldr	r3, [pc, #348]	@ (80075f8 <plotter_begin+0x678>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	f7f9 fb56 	bl	8000b54 <__aeabi_d2f>
 80074a8:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80074aa:	4b53      	ldr	r3, [pc, #332]	@ (80075f8 <plotter_begin+0x678>)
 80074ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80074b0:	4610      	mov	r0, r2
 80074b2:	4619      	mov	r1, r3
 80074b4:	f7f9 fb4e 	bl	8000b54 <__aeabi_d2f>
 80074b8:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80074ba:	4b4f      	ldr	r3, [pc, #316]	@ (80075f8 <plotter_begin+0x678>)
 80074bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80074c0:	4610      	mov	r0, r2
 80074c2:	4619      	mov	r1, r3
 80074c4:	f7f9 fb46 	bl	8000b54 <__aeabi_d2f>
 80074c8:	4603      	mov	r3, r0
 80074ca:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80074ce:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80074d2:	ee03 3a10 	vmov	s6, r3
 80074d6:	ee02 9a90 	vmov	s5, r9
 80074da:	ee02 8a10 	vmov	s4, r8
 80074de:	ee01 6a90 	vmov	s3, r6
 80074e2:	ee01 5a10 	vmov	s2, r5
 80074e6:	ee00 4a90 	vmov	s1, r4
 80074ea:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8007664 <plotter_begin+0x6e4>
 80074ee:	485e      	ldr	r0, [pc, #376]	@ (8007668 <plotter_begin+0x6e8>)
 80074f0:	f7fa fd1e 	bl	8001f30 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80074f4:	4b48      	ldr	r3, [pc, #288]	@ (8007618 <plotter_begin+0x698>)
 80074f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	f7f9 fb29 	bl	8000b54 <__aeabi_d2f>
 8007502:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 8007504:	4b44      	ldr	r3, [pc, #272]	@ (8007618 <plotter_begin+0x698>)
 8007506:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	f7f9 fb21 	bl	8000b54 <__aeabi_d2f>
 8007512:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 8007514:	4b40      	ldr	r3, [pc, #256]	@ (8007618 <plotter_begin+0x698>)
 8007516:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800751a:	4610      	mov	r0, r2
 800751c:	4619      	mov	r1, r3
 800751e:	f7f9 fb19 	bl	8000b54 <__aeabi_d2f>
 8007522:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 8007524:	4b3c      	ldr	r3, [pc, #240]	@ (8007618 <plotter_begin+0x698>)
 8007526:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800752a:	a327      	add	r3, pc, #156	@ (adr r3, 80075c8 <plotter_begin+0x648>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f9 f82e 	bl	8000590 <__aeabi_dmul>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007538:	4610      	mov	r0, r2
 800753a:	4619      	mov	r1, r3
 800753c:	f7f9 fb0a 	bl	8000b54 <__aeabi_d2f>
 8007540:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 8007542:	4b35      	ldr	r3, [pc, #212]	@ (8007618 <plotter_begin+0x698>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007548:	4610      	mov	r0, r2
 800754a:	4619      	mov	r1, r3
 800754c:	f7f9 fb02 	bl	8000b54 <__aeabi_d2f>
 8007550:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 8007552:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <plotter_begin+0x698>)
 8007554:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	f7f9 fafa 	bl	8000b54 <__aeabi_d2f>
 8007560:	4603      	mov	r3, r0
 8007562:	4942      	ldr	r1, [pc, #264]	@ (800766c <plotter_begin+0x6ec>)
 8007564:	4842      	ldr	r0, [pc, #264]	@ (8007670 <plotter_begin+0x6f0>)
 8007566:	ed9f 3a3f 	vldr	s6, [pc, #252]	@ 8007664 <plotter_begin+0x6e4>
 800756a:	ee02 3a90 	vmov	s5, r3
 800756e:	ee02 9a10 	vmov	s4, r9
 8007572:	ee01 8a90 	vmov	s3, r8
 8007576:	ee01 6a10 	vmov	s2, r6
 800757a:	ee00 5a90 	vmov	s1, r5
 800757e:	ee00 4a10 	vmov	s0, r4
 8007582:	f7fb fe81 	bl	8003288 <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8007586:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007674 <plotter_begin+0x6f4>
 800758a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800758e:	4a37      	ldr	r2, [pc, #220]	@ (800766c <plotter_begin+0x6ec>)
 8007590:	4937      	ldr	r1, [pc, #220]	@ (8007670 <plotter_begin+0x6f0>)
 8007592:	4839      	ldr	r0, [pc, #228]	@ (8007678 <plotter_begin+0x6f8>)
 8007594:	f7fd fb94 	bl	8004cc0 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8007598:	23c8      	movs	r3, #200	@ 0xc8
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	2315      	movs	r3, #21
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4b36      	ldr	r3, [pc, #216]	@ (800767c <plotter_begin+0x6fc>)
 80075a2:	4a37      	ldr	r2, [pc, #220]	@ (8007680 <plotter_begin+0x700>)
 80075a4:	4937      	ldr	r1, [pc, #220]	@ (8007684 <plotter_begin+0x704>)
 80075a6:	4838      	ldr	r0, [pc, #224]	@ (8007688 <plotter_begin+0x708>)
 80075a8:	f7fa fc5a 	bl	8001e60 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80075ac:	4837      	ldr	r0, [pc, #220]	@ (800768c <plotter_begin+0x70c>)
 80075ae:	f004 fdf3 	bl	800c198 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80075b2:	f000 f86d 	bl	8007690 <plotter_reset>
}
 80075b6:	bf00      	nop
 80075b8:	3704      	adds	r7, #4
 80075ba:	46bd      	mov	sp, r7
 80075bc:	ecbd 8b02 	vpop	{d8}
 80075c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c4:	f3af 8000 	nop.w
 80075c8:	9999999a 	.word	0x9999999a
 80075cc:	40019999 	.word	0x40019999
 80075d0:	20001b70 	.word	0x20001b70
 80075d4:	2000049c 	.word	0x2000049c
 80075d8:	20001d08 	.word	0x20001d08
 80075dc:	200003a8 	.word	0x200003a8
 80075e0:	48000800 	.word	0x48000800
 80075e4:	200003f4 	.word	0x200003f4
 80075e8:	2000190c 	.word	0x2000190c
 80075ec:	200005b0 	.word	0x200005b0
 80075f0:	00000000 	.word	0x00000000
 80075f4:	44fa0000 	.word	0x44fa0000
 80075f8:	20000080 	.word	0x20000080
 80075fc:	42f00000 	.word	0x42f00000
 8007600:	2edbe6ff 	.word	0x2edbe6ff
 8007604:	42960000 	.word	0x42960000
 8007608:	200004f8 	.word	0x200004f8
 800760c:	3727c5ac 	.word	0x3727c5ac
 8007610:	43160000 	.word	0x43160000
 8007614:	20000520 	.word	0x20000520
 8007618:	20000000 	.word	0x20000000
 800761c:	20000548 	.word	0x20000548
 8007620:	42a00000 	.word	0x42a00000
 8007624:	45fa0000 	.word	0x45fa0000
 8007628:	20000570 	.word	0x20000570
 800762c:	200005a4 	.word	0x200005a4
 8007630:	20000598 	.word	0x20000598
 8007634:	20000100 	.word	0x20000100
 8007638:	200005a8 	.word	0x200005a8
 800763c:	2000059c 	.word	0x2000059c
 8007640:	457ff000 	.word	0x457ff000
 8007644:	40533333 	.word	0x40533333
 8007648:	20000a7c 	.word	0x20000a7c
 800764c:	200001b0 	.word	0x200001b0
 8007650:	200005c8 	.word	0x200005c8
 8007654:	45000000 	.word	0x45000000
 8007658:	447a0000 	.word	0x447a0000
 800765c:	20000a64 	.word	0x20000a64
 8007660:	20000a70 	.word	0x20000a70
 8007664:	3a83126f 	.word	0x3a83126f
 8007668:	200011ac 	.word	0x200011ac
 800766c:	200018d8 	.word	0x200018d8
 8007670:	20001898 	.word	0x20001898
 8007674:	3d4ccccd 	.word	0x3d4ccccd
 8007678:	20001518 	.word	0x20001518
 800767c:	2000101c 	.word	0x2000101c
 8007680:	20001dd4 	.word	0x20001dd4
 8007684:	20001f6c 	.word	0x20001f6c
 8007688:	20000b44 	.word	0x20000b44
 800768c:	200019d8 	.word	0x200019d8

08007690 <plotter_reset>:

void plotter_reset() {
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 8007694:	4b18      	ldr	r3, [pc, #96]	@ (80076f8 <plotter_reset+0x68>)
 8007696:	2200      	movs	r2, #0
 8007698:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 800769a:	4b17      	ldr	r3, [pc, #92]	@ (80076f8 <plotter_reset+0x68>)
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80076a2:	4b15      	ldr	r3, [pc, #84]	@ (80076f8 <plotter_reset+0x68>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80076a8:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <plotter_reset+0x68>)
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80076b0:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <plotter_reset+0x68>)
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80076b8:	4b0f      	ldr	r3, [pc, #60]	@ (80076f8 <plotter_reset+0x68>)
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80076c0:	4b0e      	ldr	r3, [pc, #56]	@ (80076fc <plotter_reset+0x6c>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <plotter_reset+0x6c>)
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80076ce:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <plotter_reset+0x6c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80076d4:	4b09      	ldr	r3, [pc, #36]	@ (80076fc <plotter_reset+0x6c>)
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <plotter_reset+0x6c>)
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <plotter_reset+0x6c>)
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80076ec:	bf00      	nop
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000440 	.word	0x20000440
 80076fc:	2000049c 	.word	0x2000049c

08007700 <plotter_update_sensors>:

void plotter_update_sensors() {
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 8007704:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800780c <plotter_update_sensors+0x10c>
 8007708:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8007810 <plotter_update_sensors+0x110>
 800770c:	2106      	movs	r1, #6
 800770e:	4841      	ldr	r0, [pc, #260]	@ (8007814 <plotter_update_sensors+0x114>)
 8007710:	f7f9 fce2 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8007714:	eef0 7a40 	vmov.f32	s15, s0
 8007718:	4b3f      	ldr	r3, [pc, #252]	@ (8007818 <plotter_update_sensors+0x118>)
 800771a:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 800771e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800780c <plotter_update_sensors+0x10c>
 8007722:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8007810 <plotter_update_sensors+0x110>
 8007726:	2107      	movs	r1, #7
 8007728:	483a      	ldr	r0, [pc, #232]	@ (8007814 <plotter_update_sensors+0x114>)
 800772a:	f7f9 fcd5 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b3a      	ldr	r3, [pc, #232]	@ (800781c <plotter_update_sensors+0x11c>)
 8007734:	edc3 7a00 	vstr	s15, [r3]

    b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8007738:	2180      	movs	r1, #128	@ 0x80
 800773a:	4839      	ldr	r0, [pc, #228]	@ (8007820 <plotter_update_sensors+0x120>)
 800773c:	f003 fbc6 	bl	800aecc <HAL_GPIO_ReadPin>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <plotter_update_sensors+0x124>)
 8007750:	601a      	str	r2, [r3, #0]
    b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007752:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007756:	4834      	ldr	r0, [pc, #208]	@ (8007828 <plotter_update_sensors+0x128>)
 8007758:	f003 fbb8 	bl	800aecc <HAL_GPIO_ReadPin>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	4b30      	ldr	r3, [pc, #192]	@ (800782c <plotter_update_sensors+0x12c>)
 800776c:	601a      	str	r2, [r3, #0]
    b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 800776e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007772:	482d      	ldr	r0, [pc, #180]	@ (8007828 <plotter_update_sensors+0x128>)
 8007774:	f003 fbaa 	bl	800aecc <HAL_GPIO_ReadPin>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	4b2a      	ldr	r3, [pc, #168]	@ (8007830 <plotter_update_sensors+0x130>)
 8007788:	601a      	str	r2, [r3, #0]
    b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800778a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800778e:	4826      	ldr	r0, [pc, #152]	@ (8007828 <plotter_update_sensors+0x128>)
 8007790:	f003 fb9c 	bl	800aecc <HAL_GPIO_ReadPin>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	bf0c      	ite	eq
 800779a:	2301      	moveq	r3, #1
 800779c:	2300      	movne	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b24      	ldr	r3, [pc, #144]	@ (8007834 <plotter_update_sensors+0x134>)
 80077a4:	601a      	str	r2, [r3, #0]

    up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80077a6:	2104      	movs	r1, #4
 80077a8:	481d      	ldr	r0, [pc, #116]	@ (8007820 <plotter_update_sensors+0x120>)
 80077aa:	f003 fb8f 	bl	800aecc <HAL_GPIO_ReadPin>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b21      	ldr	r3, [pc, #132]	@ (8007838 <plotter_update_sensors+0x138>)
 80077b4:	601a      	str	r2, [r3, #0]
    low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80077b6:	2102      	movs	r1, #2
 80077b8:	4819      	ldr	r0, [pc, #100]	@ (8007820 <plotter_update_sensors+0x120>)
 80077ba:	f003 fb87 	bl	800aecc <HAL_GPIO_ReadPin>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	4b1e      	ldr	r3, [pc, #120]	@ (800783c <plotter_update_sensors+0x13c>)
 80077c4:	601a      	str	r2, [r3, #0]

    extern bool homing_active;
    if (!homing_active) {
 80077c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007840 <plotter_update_sensors+0x140>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f083 0301 	eor.w	r3, r3, #1
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d018      	beq.n	8007806 <plotter_update_sensors+0x106>
        extern volatile bool up_photo, low_photo;
        up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80077d4:	2101      	movs	r1, #1
 80077d6:	4812      	ldr	r0, [pc, #72]	@ (8007820 <plotter_update_sensors+0x120>)
 80077d8:	f003 fb78 	bl	800aecc <HAL_GPIO_ReadPin>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	2300      	moveq	r3, #0
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	4b16      	ldr	r3, [pc, #88]	@ (8007844 <plotter_update_sensors+0x144>)
 80077ea:	701a      	strb	r2, [r3, #0]
        low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80077ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80077f0:	480b      	ldr	r0, [pc, #44]	@ (8007820 <plotter_update_sensors+0x120>)
 80077f2:	f003 fb6b 	bl	800aecc <HAL_GPIO_ReadPin>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bf14      	ite	ne
 80077fc:	2301      	movne	r3, #1
 80077fe:	2300      	moveq	r3, #0
 8007800:	b2da      	uxtb	r2, r3
 8007802:	4b11      	ldr	r3, [pc, #68]	@ (8007848 <plotter_update_sensors+0x148>)
 8007804:	701a      	strb	r2, [r3, #0]
    }
}
 8007806:	bf00      	nop
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	42480000 	.word	0x42480000
 8007810:	c2480000 	.word	0xc2480000
 8007814:	200005c8 	.word	0x200005c8
 8007818:	200018e8 	.word	0x200018e8
 800781c:	200018ec 	.word	0x200018ec
 8007820:	48000400 	.word	0x48000400
 8007824:	200018f8 	.word	0x200018f8
 8007828:	48000800 	.word	0x48000800
 800782c:	200018fc 	.word	0x200018fc
 8007830:	20001900 	.word	0x20001900
 8007834:	20001904 	.word	0x20001904
 8007838:	200018f0 	.word	0x200018f0
 800783c:	200018f4 	.word	0x200018f4
 8007840:	2000035f 	.word	0x2000035f
 8007844:	2000035c 	.word	0x2000035c
 8007848:	2000035d 	.word	0x2000035d

0800784c <plotter_pen_up>:

void plotter_pen_up() {
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8007850:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8007854:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007864 <plotter_pen_up+0x18>
 8007858:	4803      	ldr	r0, [pc, #12]	@ (8007868 <plotter_pen_up+0x1c>)
 800785a:	f7fb fd9f 	bl	800339c <PWM_write_duty>
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	42480000 	.word	0x42480000
 8007868:	200005b0 	.word	0x200005b0

0800786c <plotter_pen_down>:

void plotter_pen_down() {
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8007870:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8007874:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007884 <plotter_pen_down+0x18>
 8007878:	4803      	ldr	r0, [pc, #12]	@ (8007888 <plotter_pen_down+0x1c>)
 800787a:	f7fb fd8f 	bl	800339c <PWM_write_duty>
}
 800787e:	bf00      	nop
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	42480000 	.word	0x42480000
 8007888:	200005b0 	.word	0x200005b0

0800788c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80078a4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80078ac:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007940 <SIGNAL_init+0xb4>)
 80078d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80078da:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d828      	bhi.n	8007934 <SIGNAL_init+0xa8>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <SIGNAL_init+0x5c>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007933 	.word	0x08007933
 80078ec:	080078f9 	.word	0x080078f9
 80078f0:	08007917 	.word	0x08007917
 80078f4:	08007921 	.word	0x08007921
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007904:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a0e      	ldr	r2, [pc, #56]	@ (8007944 <SIGNAL_init+0xb8>)
 800790a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007912:	621a      	str	r2, [r3, #32]
            break;
 8007914:	e00e      	b.n	8007934 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800791c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800791e:	e009      	b.n	8007934 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800792e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8007930:	e000      	b.n	8007934 <SIGNAL_init+0xa8>
            break;
 8007932:	bf00      	nop
    }
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	bf800000 	.word	0xbf800000
 8007944:	41200000 	.word	0x41200000

08007948 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	@ 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	61f8      	str	r0, [r7, #28]
 8007950:	ed87 0a06 	vstr	s0, [r7, #24]
 8007954:	edc7 0a05 	vstr	s1, [r7, #20]
 8007958:	ed87 1a04 	vstr	s2, [r7, #16]
 800795c:	edc7 1a03 	vstr	s3, [r7, #12]
 8007960:	ed87 2a02 	vstr	s4, [r7, #8]
 8007964:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007992:	bf00      	nop
 8007994:	3724      	adds	r7, #36	@ 0x24
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800799e:	b480      	push	{r7}
 80079a0:	b089      	sub	sp, #36	@ 0x24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	61f8      	str	r0, [r7, #28]
 80079a6:	ed87 0a06 	vstr	s0, [r7, #24]
 80079aa:	edc7 0a05 	vstr	s1, [r7, #20]
 80079ae:	ed87 1a04 	vstr	s2, [r7, #16]
 80079b2:	edc7 1a03 	vstr	s3, [r7, #12]
 80079b6:	ed87 2a02 	vstr	s4, [r7, #8]
 80079ba:	edc7 2a01 	vstr	s5, [r7, #4]
 80079be:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2202      	movs	r2, #2
 80079c6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80079f2:	bf00      	nop
 80079f4:	3724      	adds	r7, #36	@ 0x24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a06:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a22:	4a08      	ldr	r2, [pc, #32]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a2a:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <HAL_MspInit+0x44>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007a36:	f003 fb4f 	bl	800b0d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000

08007a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <NMI_Handler+0x4>

08007a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <HardFault_Handler+0x4>

08007a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <MemManage_Handler+0x4>

08007a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <BusFault_Handler+0x4>

08007a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a6c:	bf00      	nop
 8007a6e:	e7fd      	b.n	8007a6c <UsageFault_Handler+0x4>

08007a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a9e:	f000 ffbb 	bl	8008a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007aa2:	bf00      	nop
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8007aaa:	2001      	movs	r0, #1
 8007aac:	f003 fa58 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007ab0:	bf00      	nop
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8007ab8:	2010      	movs	r0, #16
 8007aba:	f003 fa51 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ac8:	4802      	ldr	r0, [pc, #8]	@ (8007ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8007aca:	f002 ff2e 	bl	800a92a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000021c 	.word	0x2000021c

08007ad8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007adc:	4802      	ldr	r0, [pc, #8]	@ (8007ae8 <DMA1_Channel2_IRQHandler+0x10>)
 8007ade:	f002 ff24 	bl	800a92a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200020f8 	.word	0x200020f8

08007aec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007af0:	4802      	ldr	r0, [pc, #8]	@ (8007afc <DMA1_Channel3_IRQHandler+0x10>)
 8007af2:	f002 ff1a 	bl	800a92a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007af6:	bf00      	nop
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20002158 	.word	0x20002158

08007b00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8007b04:	4802      	ldr	r0, [pc, #8]	@ (8007b10 <DMA1_Channel4_IRQHandler+0x10>)
 8007b06:	f002 ff10 	bl	800a92a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20002038 	.word	0x20002038

08007b14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8007b18:	4802      	ldr	r0, [pc, #8]	@ (8007b24 <DMA1_Channel5_IRQHandler+0x10>)
 8007b1a:	f002 ff06 	bl	800a92a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20002098 	.word	0x20002098

08007b28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8007b2c:	2040      	movs	r0, #64	@ 0x40
 8007b2e:	f003 fa17 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8007b32:	2080      	movs	r0, #128	@ 0x80
 8007b34:	f003 fa14 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007b38:	bf00      	nop
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b40:	4803      	ldr	r0, [pc, #12]	@ (8007b50 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007b42:	f004 ff4f 	bl	800c9e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8007b46:	4803      	ldr	r0, [pc, #12]	@ (8007b54 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8007b48:	f004 ff4c 	bl	800c9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007b4c:	bf00      	nop
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	2000190c 	.word	0x2000190c
 8007b54:	20001dd4 	.word	0x20001dd4

08007b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007b5c:	4802      	ldr	r0, [pc, #8]	@ (8007b68 <TIM2_IRQHandler+0x10>)
 8007b5e:	f004 ff41 	bl	800c9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007b62:	bf00      	nop
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	200019d8 	.word	0x200019d8

08007b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007b70:	4802      	ldr	r0, [pc, #8]	@ (8007b7c <TIM3_IRQHandler+0x10>)
 8007b72:	f004 ff37 	bl	800c9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20001aa4 	.word	0x20001aa4

08007b80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007b84:	4802      	ldr	r0, [pc, #8]	@ (8007b90 <TIM4_IRQHandler+0x10>)
 8007b86:	f004 ff2d 	bl	800c9e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20001b70 	.word	0x20001b70

08007b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007b98:	4802      	ldr	r0, [pc, #8]	@ (8007ba4 <USART2_IRQHandler+0x10>)
 8007b9a:	f006 fc77 	bl	800e48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007b9e:	bf00      	nop
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20001f6c 	.word	0x20001f6c

08007ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8007bac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007bb0:	f003 f9d6 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8007bb4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007bb8:	f003 f9d2 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8007bbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007bc0:	f003 f9ce 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007bc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007bc8:	f003 f9ca 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007bcc:	bf00      	nop
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007bd4:	4802      	ldr	r0, [pc, #8]	@ (8007be0 <LPUART1_IRQHandler+0x10>)
 8007bd6:	f006 fc59 	bl	800e48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8007bda:	bf00      	nop
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20001ea0 	.word	0x20001ea0

08007be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007bec:	4a14      	ldr	r2, [pc, #80]	@ (8007c40 <_sbrk+0x5c>)
 8007bee:	4b15      	ldr	r3, [pc, #84]	@ (8007c44 <_sbrk+0x60>)
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007bf8:	4b13      	ldr	r3, [pc, #76]	@ (8007c48 <_sbrk+0x64>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c00:	4b11      	ldr	r3, [pc, #68]	@ (8007c48 <_sbrk+0x64>)
 8007c02:	4a12      	ldr	r2, [pc, #72]	@ (8007c4c <_sbrk+0x68>)
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c06:	4b10      	ldr	r3, [pc, #64]	@ (8007c48 <_sbrk+0x64>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d207      	bcs.n	8007c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c14:	f008 fec8 	bl	80109a8 <__errno>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	220c      	movs	r2, #12
 8007c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	e009      	b.n	8007c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c24:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <_sbrk+0x64>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c2a:	4b07      	ldr	r3, [pc, #28]	@ (8007c48 <_sbrk+0x64>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	4a05      	ldr	r2, [pc, #20]	@ (8007c48 <_sbrk+0x64>)
 8007c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c36:	68fb      	ldr	r3, [r7, #12]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20020000 	.word	0x20020000
 8007c44:	00000400 	.word	0x00000400
 8007c48:	20001908 	.word	0x20001908
 8007c4c:	20002308 	.word	0x20002308

08007c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007c54:	4b06      	ldr	r3, [pc, #24]	@ (8007c70 <SystemInit+0x20>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5a:	4a05      	ldr	r2, [pc, #20]	@ (8007c70 <SystemInit+0x20>)
 8007c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	e000ed00 	.word	0xe000ed00

08007c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b098      	sub	sp, #96	@ 0x60
 8007c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	609a      	str	r2, [r3, #8]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	611a      	str	r2, [r3, #16]
 8007c96:	615a      	str	r2, [r3, #20]
 8007c98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c9a:	1d3b      	adds	r3, r7, #4
 8007c9c:	2234      	movs	r2, #52	@ 0x34
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f008 fe69 	bl	8010978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8007d98 <MX_TIM1_Init+0x124>)
 8007caa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007cac:	4b39      	ldr	r3, [pc, #228]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cb2:	4b38      	ldr	r3, [pc, #224]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007cb8:	4b36      	ldr	r3, [pc, #216]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cc0:	4b34      	ldr	r3, [pc, #208]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007cc6:	4b33      	ldr	r3, [pc, #204]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ccc:	4b31      	ldr	r3, [pc, #196]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007cd2:	4830      	ldr	r0, [pc, #192]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cd4:	f004 fad8 	bl	800c288 <HAL_TIM_PWM_Init>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8007cde:	f7ff f947 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007cee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4827      	ldr	r0, [pc, #156]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007cf6:	f006 f8e9 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8007d00:	f7ff f936 	bl	8006f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d04:	2360      	movs	r3, #96	@ 0x60
 8007d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007d10:	2300      	movs	r3, #0
 8007d12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007d24:	220c      	movs	r2, #12
 8007d26:	4619      	mov	r1, r3
 8007d28:	481a      	ldr	r0, [pc, #104]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007d2a:	f004 ffd5 	bl	800ccd8 <HAL_TIM_PWM_ConfigChannel>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007d34:	f7ff f91c 	bl	8006f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007d56:	2300      	movs	r3, #0
 8007d58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4807      	ldr	r0, [pc, #28]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007d76:	f006 f93f 	bl	800dff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007d80:	f7ff f8f6 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007d84:	4803      	ldr	r0, [pc, #12]	@ (8007d94 <MX_TIM1_Init+0x120>)
 8007d86:	f000 fb77 	bl	8008478 <HAL_TIM_MspPostInit>

}
 8007d8a:	bf00      	nop
 8007d8c:	3760      	adds	r7, #96	@ 0x60
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	2000190c 	.word	0x2000190c
 8007d98:	40012c00 	.word	0x40012c00

08007d9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007da2:	f107 0310 	add.w	r3, r7, #16
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	605a      	str	r2, [r3, #4]
 8007dac:	609a      	str	r2, [r3, #8]
 8007dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007dba:	4b1e      	ldr	r3, [pc, #120]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dc4:	22a9      	movs	r2, #169	@ 0xa9
 8007dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007dce:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dd6:	4b17      	ldr	r3, [pc, #92]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ddc:	4b15      	ldr	r3, [pc, #84]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007de2:	4814      	ldr	r0, [pc, #80]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007de4:	f004 f904 	bl	800bff0 <HAL_TIM_Base_Init>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007dee:	f7ff f8bf 	bl	8006f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	480d      	ldr	r0, [pc, #52]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007e00:	f005 f87e 	bl	800cf00 <HAL_TIM_ConfigClockSource>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007e0a:	f7ff f8b1 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4806      	ldr	r0, [pc, #24]	@ (8007e34 <MX_TIM2_Init+0x98>)
 8007e1c:	f006 f856 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007e26:	f7ff f8a3 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007e2a:	bf00      	nop
 8007e2c:	3720      	adds	r7, #32
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	200019d8 	.word	0x200019d8

08007e38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	@ 0x30
 8007e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007e3e:	f107 030c 	add.w	r3, r7, #12
 8007e42:	2224      	movs	r2, #36	@ 0x24
 8007e44:	2100      	movs	r1, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f008 fd96 	bl	8010978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007e56:	4b21      	ldr	r3, [pc, #132]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e58:	4a21      	ldr	r2, [pc, #132]	@ (8007ee0 <MX_TIM3_Init+0xa8>)
 8007e5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e62:	4b1e      	ldr	r3, [pc, #120]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007e68:	4b1c      	ldr	r3, [pc, #112]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e70:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e76:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007e84:	2301      	movs	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007e90:	2300      	movs	r3, #0
 8007e92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007e94:	2301      	movs	r3, #1
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	480d      	ldr	r0, [pc, #52]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007ea8:	f004 fc5a 	bl	800c760 <HAL_TIM_Encoder_Init>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8007eb2:	f7ff f85d 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4806      	ldr	r0, [pc, #24]	@ (8007edc <MX_TIM3_Init+0xa4>)
 8007ec4:	f006 f802 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8007ece:	f7ff f84f 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007ed2:	bf00      	nop
 8007ed4:	3730      	adds	r7, #48	@ 0x30
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20001aa4 	.word	0x20001aa4
 8007ee0:	40000400 	.word	0x40000400

08007ee4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	@ 0x30
 8007ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	2224      	movs	r2, #36	@ 0x24
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f008 fd40 	bl	8010978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ef8:	463b      	mov	r3, r7
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
 8007f00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007f02:	4b21      	ldr	r3, [pc, #132]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f04:	4a21      	ldr	r2, [pc, #132]	@ (8007f8c <MX_TIM4_Init+0xa8>)
 8007f06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007f08:	4b1f      	ldr	r3, [pc, #124]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8007f14:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f40:	2301      	movs	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4619      	mov	r1, r3
 8007f52:	480d      	ldr	r0, [pc, #52]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f54:	f004 fc04 	bl	800c760 <HAL_TIM_Encoder_Init>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8007f5e:	f7ff f807 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f62:	2300      	movs	r3, #0
 8007f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4806      	ldr	r0, [pc, #24]	@ (8007f88 <MX_TIM4_Init+0xa4>)
 8007f70:	f005 ffac 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8007f7a:	f7fe fff9 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007f7e:	bf00      	nop
 8007f80:	3730      	adds	r7, #48	@ 0x30
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20001b70 	.word	0x20001b70
 8007f8c:	40000800 	.word	0x40000800

08007f90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08c      	sub	sp, #48	@ 0x30
 8007f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007f96:	f107 030c 	add.w	r3, r7, #12
 8007f9a:	2224      	movs	r2, #36	@ 0x24
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f008 fcea 	bl	8010978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	605a      	str	r2, [r3, #4]
 8007fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007fae:	4b21      	ldr	r3, [pc, #132]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fb0:	4a21      	ldr	r2, [pc, #132]	@ (8008038 <MX_TIM5_Init+0xa8>)
 8007fb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fba:	4b1e      	ldr	r3, [pc, #120]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8007fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fce:	4b19      	ldr	r3, [pc, #100]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007fec:	2301      	movs	r3, #1
 8007fee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8007ff8:	f107 030c 	add.w	r3, r7, #12
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	480d      	ldr	r0, [pc, #52]	@ (8008034 <MX_TIM5_Init+0xa4>)
 8008000:	f004 fbae 	bl	800c760 <HAL_TIM_Encoder_Init>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800800a:	f7fe ffb1 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800800e:	2300      	movs	r3, #0
 8008010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008016:	463b      	mov	r3, r7
 8008018:	4619      	mov	r1, r3
 800801a:	4806      	ldr	r0, [pc, #24]	@ (8008034 <MX_TIM5_Init+0xa4>)
 800801c:	f005 ff56 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8008026:	f7fe ffa3 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800802a:	bf00      	nop
 800802c:	3730      	adds	r7, #48	@ 0x30
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20001c3c 	.word	0x20001c3c
 8008038:	40000c00 	.word	0x40000c00

0800803c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b09c      	sub	sp, #112	@ 0x70
 8008040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008042:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	605a      	str	r2, [r3, #4]
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008050:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800805c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	609a      	str	r2, [r3, #8]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	611a      	str	r2, [r3, #16]
 800806c:	615a      	str	r2, [r3, #20]
 800806e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008070:	1d3b      	adds	r3, r7, #4
 8008072:	2234      	movs	r2, #52	@ 0x34
 8008074:	2100      	movs	r1, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f008 fc7e 	bl	8010978 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800807c:	4b4c      	ldr	r3, [pc, #304]	@ (80081b0 <MX_TIM8_Init+0x174>)
 800807e:	4a4d      	ldr	r2, [pc, #308]	@ (80081b4 <MX_TIM8_Init+0x178>)
 8008080:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008082:	4b4b      	ldr	r3, [pc, #300]	@ (80081b0 <MX_TIM8_Init+0x174>)
 8008084:	2200      	movs	r2, #0
 8008086:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008088:	4b49      	ldr	r3, [pc, #292]	@ (80081b0 <MX_TIM8_Init+0x174>)
 800808a:	2200      	movs	r2, #0
 800808c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800808e:	4b48      	ldr	r3, [pc, #288]	@ (80081b0 <MX_TIM8_Init+0x174>)
 8008090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008094:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8008096:	4b46      	ldr	r3, [pc, #280]	@ (80081b0 <MX_TIM8_Init+0x174>)
 8008098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800809c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800809e:	4b44      	ldr	r3, [pc, #272]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080a4:	4b42      	ldr	r3, [pc, #264]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80080aa:	4841      	ldr	r0, [pc, #260]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080ac:	f003 ffa0 	bl	800bff0 <HAL_TIM_Base_Init>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80080b6:	f7fe ff5b 	bl	8006f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80080c0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80080c4:	4619      	mov	r1, r3
 80080c6:	483a      	ldr	r0, [pc, #232]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080c8:	f004 ff1a 	bl	800cf00 <HAL_TIM_ConfigClockSource>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80080d2:	f7fe ff4d 	bl	8006f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80080d6:	4836      	ldr	r0, [pc, #216]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080d8:	f004 f8d6 	bl	800c288 <HAL_TIM_PWM_Init>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80080e2:	f7fe ff45 	bl	8006f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080e6:	2300      	movs	r3, #0
 80080e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80080ea:	2300      	movs	r3, #0
 80080ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80080f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80080f6:	4619      	mov	r1, r3
 80080f8:	482d      	ldr	r0, [pc, #180]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80080fa:	f005 fee7 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8008104:	f7fe ff34 	bl	8006f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008108:	2360      	movs	r3, #96	@ 0x60
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008110:	2300      	movs	r3, #0
 8008112:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008114:	2300      	movs	r3, #0
 8008116:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008118:	2300      	movs	r3, #0
 800811a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800811c:	2300      	movs	r3, #0
 800811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008120:	2300      	movs	r3, #0
 8008122:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008128:	2200      	movs	r2, #0
 800812a:	4619      	mov	r1, r3
 800812c:	4820      	ldr	r0, [pc, #128]	@ (80081b0 <MX_TIM8_Init+0x174>)
 800812e:	f004 fdd3 	bl	800ccd8 <HAL_TIM_PWM_ConfigChannel>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8008138:	f7fe ff1a 	bl	8006f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800813c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008140:	2204      	movs	r2, #4
 8008142:	4619      	mov	r1, r3
 8008144:	481a      	ldr	r0, [pc, #104]	@ (80081b0 <MX_TIM8_Init+0x174>)
 8008146:	f004 fdc7 	bl	800ccd8 <HAL_TIM_PWM_ConfigChannel>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8008150:	f7fe ff0e 	bl	8006f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008154:	2300      	movs	r3, #0
 8008156:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008168:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800816c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008176:	2300      	movs	r3, #0
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800817a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800817e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008184:	2300      	movs	r3, #0
 8008186:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008188:	2300      	movs	r3, #0
 800818a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800818c:	1d3b      	adds	r3, r7, #4
 800818e:	4619      	mov	r1, r3
 8008190:	4807      	ldr	r0, [pc, #28]	@ (80081b0 <MX_TIM8_Init+0x174>)
 8008192:	f005 ff31 	bl	800dff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800819c:	f7fe fee8 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80081a0:	4803      	ldr	r0, [pc, #12]	@ (80081b0 <MX_TIM8_Init+0x174>)
 80081a2:	f000 f969 	bl	8008478 <HAL_TIM_MspPostInit>

}
 80081a6:	bf00      	nop
 80081a8:	3770      	adds	r7, #112	@ 0x70
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20001d08 	.word	0x20001d08
 80081b4:	40013400 	.word	0x40013400

080081b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80081bc:	4b14      	ldr	r3, [pc, #80]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081be:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <MX_TIM16_Init+0x5c>)
 80081c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80081c2:	4b13      	ldr	r3, [pc, #76]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081c4:	22a9      	movs	r2, #169	@ 0xa9
 80081c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081c8:	4b11      	ldr	r3, [pc, #68]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80081ce:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081d0:	f240 4279 	movw	r2, #1145	@ 0x479
 80081d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081d8:	2200      	movs	r2, #0
 80081da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081de:	2200      	movs	r2, #0
 80081e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80081e8:	4809      	ldr	r0, [pc, #36]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081ea:	f003 ff01 	bl	800bff0 <HAL_TIM_Base_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80081f4:	f7fe febc 	bl	8006f70 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80081f8:	2108      	movs	r1, #8
 80081fa:	4805      	ldr	r0, [pc, #20]	@ (8008210 <MX_TIM16_Init+0x58>)
 80081fc:	f004 f9ba 	bl	800c574 <HAL_TIM_OnePulse_Init>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8008206:	f7fe feb3 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20001dd4 	.word	0x20001dd4
 8008214:	40014400 	.word	0x40014400

08008218 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a0d      	ldr	r2, [pc, #52]	@ (800825c <HAL_TIM_PWM_MspInit+0x44>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d113      	bne.n	8008252 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <HAL_TIM_PWM_MspInit+0x48>)
 800822c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800822e:	4a0c      	ldr	r2, [pc, #48]	@ (8008260 <HAL_TIM_PWM_MspInit+0x48>)
 8008230:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008234:	6613      	str	r3, [r2, #96]	@ 0x60
 8008236:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <HAL_TIM_PWM_MspInit+0x48>)
 8008238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800823a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	2019      	movs	r0, #25
 8008248:	f002 f957 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800824c:	2019      	movs	r0, #25
 800824e:	f002 f96e 	bl	800a52e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40021000 	.word	0x40021000

08008264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008274:	d114      	bne.n	80082a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008276:	4b22      	ldr	r3, [pc, #136]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 8008278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827a:	4a21      	ldr	r2, [pc, #132]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	6593      	str	r3, [r2, #88]	@ 0x58
 8008282:	4b1f      	ldr	r3, [pc, #124]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 8008284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	201c      	movs	r0, #28
 8008294:	f002 f931 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008298:	201c      	movs	r0, #28
 800829a:	f002 f948 	bl	800a52e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800829e:	e02a      	b.n	80082f6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a17      	ldr	r2, [pc, #92]	@ (8008304 <HAL_TIM_Base_MspInit+0xa0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d10c      	bne.n	80082c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80082aa:	4b15      	ldr	r3, [pc, #84]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ae:	4a14      	ldr	r2, [pc, #80]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80082b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80082b6:	4b12      	ldr	r3, [pc, #72]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
}
 80082c2:	e018      	b.n	80082f6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008308 <HAL_TIM_Base_MspInit+0xa4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d113      	bne.n	80082f6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80082ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80082da:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <HAL_TIM_Base_MspInit+0x9c>)
 80082dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80082e6:	2200      	movs	r2, #0
 80082e8:	2100      	movs	r1, #0
 80082ea:	2019      	movs	r0, #25
 80082ec:	f002 f905 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80082f0:	2019      	movs	r0, #25
 80082f2:	f002 f91c 	bl	800a52e <HAL_NVIC_EnableIRQ>
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	40021000 	.word	0x40021000
 8008304:	40013400 	.word	0x40013400
 8008308:	40014400 	.word	0x40014400

0800830c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	@ 0x38
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a4f      	ldr	r2, [pc, #316]	@ (8008468 <HAL_TIM_Encoder_MspInit+0x15c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d131      	bne.n	8008392 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800832e:	4b4f      	ldr	r3, [pc, #316]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008332:	4a4e      	ldr	r2, [pc, #312]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	6593      	str	r3, [r2, #88]	@ 0x58
 800833a:	4b4c      	ldr	r3, [pc, #304]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	623b      	str	r3, [r7, #32]
 8008344:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008346:	4b49      	ldr	r3, [pc, #292]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800834a:	4a48      	ldr	r2, [pc, #288]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008352:	4b46      	ldr	r3, [pc, #280]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800835e:	23c0      	movs	r3, #192	@ 0xc0
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008362:	2302      	movs	r3, #2
 8008364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008366:	2300      	movs	r3, #0
 8008368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800836a:	2300      	movs	r3, #0
 800836c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800836e:	2302      	movs	r3, #2
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008376:	4619      	mov	r1, r3
 8008378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800837c:	f002 fc24 	bl	800abc8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	201d      	movs	r0, #29
 8008386:	f002 f8b8 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800838a:	201d      	movs	r0, #29
 800838c:	f002 f8cf 	bl	800a52e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8008390:	e065      	b.n	800845e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a36      	ldr	r2, [pc, #216]	@ (8008470 <HAL_TIM_Encoder_MspInit+0x164>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d132      	bne.n	8008402 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800839c:	4b33      	ldr	r3, [pc, #204]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800839e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a0:	4a32      	ldr	r2, [pc, #200]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 80083a2:	f043 0304 	orr.w	r3, r3, #4
 80083a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80083a8:	4b30      	ldr	r3, [pc, #192]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 80083aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b4:	4b2d      	ldr	r3, [pc, #180]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 80083b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b8:	4a2c      	ldr	r2, [pc, #176]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083c0:	4b2a      	ldr	r3, [pc, #168]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 80083c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80083cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d2:	2302      	movs	r3, #2
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083da:	2300      	movs	r3, #0
 80083dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80083de:	230a      	movs	r3, #10
 80083e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083e6:	4619      	mov	r1, r3
 80083e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80083ec:	f002 fbec 	bl	800abc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	201e      	movs	r0, #30
 80083f6:	f002 f880 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80083fa:	201e      	movs	r0, #30
 80083fc:	f002 f897 	bl	800a52e <HAL_NVIC_EnableIRQ>
}
 8008400:	e02d      	b.n	800845e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <HAL_TIM_Encoder_MspInit+0x168>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d128      	bne.n	800845e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800840c:	4b17      	ldr	r3, [pc, #92]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800840e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008410:	4a16      	ldr	r2, [pc, #88]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	6593      	str	r3, [r2, #88]	@ 0x58
 8008418:	4b14      	ldr	r3, [pc, #80]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800841a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008424:	4b11      	ldr	r3, [pc, #68]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008428:	4a10      	ldr	r2, [pc, #64]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008430:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <HAL_TIM_Encoder_MspInit+0x160>)
 8008432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800843c:	2303      	movs	r3, #3
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008440:	2302      	movs	r3, #2
 8008442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	2300      	movs	r3, #0
 8008446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008448:	2300      	movs	r3, #0
 800844a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800844c:	2302      	movs	r3, #2
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008454:	4619      	mov	r1, r3
 8008456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800845a:	f002 fbb5 	bl	800abc8 <HAL_GPIO_Init>
}
 800845e:	bf00      	nop
 8008460:	3738      	adds	r7, #56	@ 0x38
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40000400 	.word	0x40000400
 800846c:	40021000 	.word	0x40021000
 8008470:	40000800 	.word	0x40000800
 8008474:	40000c00 	.word	0x40000c00

08008478 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	@ 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008480:	f107 0314 	add.w	r3, r7, #20
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	60da      	str	r2, [r3, #12]
 800848e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a22      	ldr	r2, [pc, #136]	@ (8008520 <HAL_TIM_MspPostInit+0xa8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d11c      	bne.n	80084d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800849a:	4b22      	ldr	r3, [pc, #136]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 800849c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849e:	4a21      	ldr	r2, [pc, #132]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 80084a0:	f043 0304 	orr.w	r3, r3, #4
 80084a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 80084a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084b2:	2308      	movs	r3, #8
 80084b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b6:	2302      	movs	r3, #2
 80084b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084be:	2300      	movs	r3, #0
 80084c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80084c2:	2302      	movs	r3, #2
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	4619      	mov	r1, r3
 80084cc:	4816      	ldr	r0, [pc, #88]	@ (8008528 <HAL_TIM_MspPostInit+0xb0>)
 80084ce:	f002 fb7b 	bl	800abc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80084d2:	e020      	b.n	8008516 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a14      	ldr	r2, [pc, #80]	@ (800852c <HAL_TIM_MspPostInit+0xb4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d11b      	bne.n	8008516 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084de:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e2:	4a10      	ldr	r2, [pc, #64]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 80084e4:	f043 0304 	orr.w	r3, r3, #4
 80084e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <HAL_TIM_MspPostInit+0xac>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084f6:	23c0      	movs	r3, #192	@ 0xc0
 80084f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fa:	2302      	movs	r3, #2
 80084fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008502:	2300      	movs	r3, #0
 8008504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8008506:	2304      	movs	r3, #4
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	4619      	mov	r1, r3
 8008510:	4805      	ldr	r0, [pc, #20]	@ (8008528 <HAL_TIM_MspPostInit+0xb0>)
 8008512:	f002 fb59 	bl	800abc8 <HAL_GPIO_Init>
}
 8008516:	bf00      	nop
 8008518:	3728      	adds	r7, #40	@ 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40021000 	.word	0x40021000
 8008528:	48000800 	.word	0x48000800
 800852c:	40013400 	.word	0x40013400

08008530 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008534:	4b20      	ldr	r3, [pc, #128]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008536:	4a21      	ldr	r2, [pc, #132]	@ (80085bc <MX_LPUART1_UART_Init+0x8c>)
 8008538:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800853a:	4b1f      	ldr	r3, [pc, #124]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 800853c:	4a20      	ldr	r2, [pc, #128]	@ (80085c0 <MX_LPUART1_UART_Init+0x90>)
 800853e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008540:	4b1d      	ldr	r3, [pc, #116]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008542:	2200      	movs	r2, #0
 8008544:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008546:	4b1c      	ldr	r3, [pc, #112]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008548:	2200      	movs	r2, #0
 800854a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800854c:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 800854e:	2200      	movs	r2, #0
 8008550:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008552:	4b19      	ldr	r3, [pc, #100]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008554:	220c      	movs	r2, #12
 8008556:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008558:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 800855a:	2200      	movs	r2, #0
 800855c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800855e:	4b16      	ldr	r3, [pc, #88]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008560:	2200      	movs	r2, #0
 8008562:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008564:	4b14      	ldr	r3, [pc, #80]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008566:	2200      	movs	r2, #0
 8008568:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800856a:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 800856c:	2200      	movs	r2, #0
 800856e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008570:	4811      	ldr	r0, [pc, #68]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008572:	f005 fe25 	bl	800e1c0 <HAL_UART_Init>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800857c:	f7fe fcf8 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008580:	2100      	movs	r1, #0
 8008582:	480d      	ldr	r0, [pc, #52]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008584:	f007 fb82 	bl	800fc8c <HAL_UARTEx_SetTxFifoThreshold>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800858e:	f7fe fcef 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008592:	2100      	movs	r1, #0
 8008594:	4808      	ldr	r0, [pc, #32]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 8008596:	f007 fbb7 	bl	800fd08 <HAL_UARTEx_SetRxFifoThreshold>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80085a0:	f7fe fce6 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80085a4:	4804      	ldr	r0, [pc, #16]	@ (80085b8 <MX_LPUART1_UART_Init+0x88>)
 80085a6:	f007 fb38 	bl	800fc1a <HAL_UARTEx_DisableFifoMode>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80085b0:	f7fe fcde 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20001ea0 	.word	0x20001ea0
 80085bc:	40008000 	.word	0x40008000
 80085c0:	001e8480 	.word	0x001e8480

080085c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80085c8:	4b23      	ldr	r3, [pc, #140]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085ca:	4a24      	ldr	r2, [pc, #144]	@ (800865c <MX_USART2_UART_Init+0x98>)
 80085cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80085ce:	4b22      	ldr	r3, [pc, #136]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085d0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80085d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80085d6:	4b20      	ldr	r3, [pc, #128]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80085dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80085e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085ee:	220c      	movs	r2, #12
 80085f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085f2:	4b19      	ldr	r3, [pc, #100]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085f8:	4b17      	ldr	r3, [pc, #92]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80085fe:	4b16      	ldr	r3, [pc, #88]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008600:	2200      	movs	r2, #0
 8008602:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008604:	4b14      	ldr	r3, [pc, #80]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008606:	2200      	movs	r2, #0
 8008608:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800860a:	4b13      	ldr	r3, [pc, #76]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 800860c:	2200      	movs	r2, #0
 800860e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008610:	4811      	ldr	r0, [pc, #68]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008612:	f005 fdd5 	bl	800e1c0 <HAL_UART_Init>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800861c:	f7fe fca8 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008620:	2100      	movs	r1, #0
 8008622:	480d      	ldr	r0, [pc, #52]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008624:	f007 fb32 	bl	800fc8c <HAL_UARTEx_SetTxFifoThreshold>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800862e:	f7fe fc9f 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008632:	2100      	movs	r1, #0
 8008634:	4808      	ldr	r0, [pc, #32]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008636:	f007 fb67 	bl	800fd08 <HAL_UARTEx_SetRxFifoThreshold>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8008640:	f7fe fc96 	bl	8006f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008644:	4804      	ldr	r0, [pc, #16]	@ (8008658 <MX_USART2_UART_Init+0x94>)
 8008646:	f007 fae8 	bl	800fc1a <HAL_UARTEx_DisableFifoMode>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8008650:	f7fe fc8e 	bl	8006f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008654:	bf00      	nop
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20001f6c 	.word	0x20001f6c
 800865c:	40004400 	.word	0x40004400

08008660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b0a0      	sub	sp, #128	@ 0x80
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008668:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	609a      	str	r2, [r3, #8]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008678:	f107 0318 	add.w	r3, r7, #24
 800867c:	2254      	movs	r2, #84	@ 0x54
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f008 f979 	bl	8010978 <memset>
  if(uartHandle->Instance==LPUART1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a99      	ldr	r2, [pc, #612]	@ (80088f0 <HAL_UART_MspInit+0x290>)
 800868c:	4293      	cmp	r3, r2
 800868e:	f040 8093 	bne.w	80087b8 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008692:	2320      	movs	r3, #32
 8008694:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008696:	2300      	movs	r3, #0
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800869a:	f107 0318 	add.w	r3, r7, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f003 fa58 	bl	800bb54 <HAL_RCCEx_PeriphCLKConfig>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80086aa:	f7fe fc61 	bl	8006f70 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80086ae:	4b91      	ldr	r3, [pc, #580]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b2:	4a90      	ldr	r2, [pc, #576]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80086ba:	4b8e      	ldr	r3, [pc, #568]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086c6:	4b8b      	ldr	r3, [pc, #556]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ca:	4a8a      	ldr	r2, [pc, #552]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086cc:	f043 0302 	orr.w	r3, r3, #2
 80086d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086d2:	4b88      	ldr	r3, [pc, #544]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80086d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80086de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80086e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e4:	2302      	movs	r3, #2
 80086e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ec:	2300      	movs	r3, #0
 80086ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80086f0:	2308      	movs	r3, #8
 80086f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80086f8:	4619      	mov	r1, r3
 80086fa:	487f      	ldr	r0, [pc, #508]	@ (80088f8 <HAL_UART_MspInit+0x298>)
 80086fc:	f002 fa64 	bl	800abc8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8008700:	4b7e      	ldr	r3, [pc, #504]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008702:	4a7f      	ldr	r2, [pc, #508]	@ (8008900 <HAL_UART_MspInit+0x2a0>)
 8008704:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8008706:	4b7d      	ldr	r3, [pc, #500]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008708:	2222      	movs	r2, #34	@ 0x22
 800870a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800870c:	4b7b      	ldr	r3, [pc, #492]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008712:	4b7a      	ldr	r3, [pc, #488]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008714:	2200      	movs	r2, #0
 8008716:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008718:	4b78      	ldr	r3, [pc, #480]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 800871a:	2280      	movs	r2, #128	@ 0x80
 800871c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800871e:	4b77      	ldr	r3, [pc, #476]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008720:	2200      	movs	r2, #0
 8008722:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008724:	4b75      	ldr	r3, [pc, #468]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008726:	2200      	movs	r2, #0
 8008728:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800872a:	4b74      	ldr	r3, [pc, #464]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 800872c:	2200      	movs	r2, #0
 800872e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008730:	4b72      	ldr	r3, [pc, #456]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008732:	2200      	movs	r2, #0
 8008734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8008736:	4871      	ldr	r0, [pc, #452]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008738:	f001 ff14 	bl	800a564 <HAL_DMA_Init>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8008742:	f7fe fc15 	bl	8006f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a6c      	ldr	r2, [pc, #432]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 800874a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800874e:	4a6b      	ldr	r2, [pc, #428]	@ (80088fc <HAL_UART_MspInit+0x29c>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8008754:	4b6b      	ldr	r3, [pc, #428]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008756:	4a6c      	ldr	r2, [pc, #432]	@ (8008908 <HAL_UART_MspInit+0x2a8>)
 8008758:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800875a:	4b6a      	ldr	r3, [pc, #424]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 800875c:	2223      	movs	r2, #35	@ 0x23
 800875e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008760:	4b68      	ldr	r3, [pc, #416]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008762:	2210      	movs	r2, #16
 8008764:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008766:	4b67      	ldr	r3, [pc, #412]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008768:	2200      	movs	r2, #0
 800876a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800876c:	4b65      	ldr	r3, [pc, #404]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 800876e:	2280      	movs	r2, #128	@ 0x80
 8008770:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008772:	4b64      	ldr	r3, [pc, #400]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008774:	2200      	movs	r2, #0
 8008776:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008778:	4b62      	ldr	r3, [pc, #392]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 800877a:	2200      	movs	r2, #0
 800877c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800877e:	4b61      	ldr	r3, [pc, #388]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008780:	2200      	movs	r2, #0
 8008782:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008784:	4b5f      	ldr	r3, [pc, #380]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 8008786:	2200      	movs	r2, #0
 8008788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800878a:	485e      	ldr	r0, [pc, #376]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 800878c:	f001 feea 	bl	800a564 <HAL_DMA_Init>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8008796:	f7fe fbeb 	bl	8006f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a59      	ldr	r2, [pc, #356]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 800879e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80087a0:	4a58      	ldr	r2, [pc, #352]	@ (8008904 <HAL_UART_MspInit+0x2a4>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80087a6:	2200      	movs	r2, #0
 80087a8:	2100      	movs	r1, #0
 80087aa:	205b      	movs	r0, #91	@ 0x5b
 80087ac:	f001 fea5 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80087b0:	205b      	movs	r0, #91	@ 0x5b
 80087b2:	f001 febc 	bl	800a52e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80087b6:	e097      	b.n	80088e8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a53      	ldr	r2, [pc, #332]	@ (800890c <HAL_UART_MspInit+0x2ac>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f040 8092 	bne.w	80088e8 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80087c4:	2302      	movs	r3, #2
 80087c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80087c8:	2300      	movs	r3, #0
 80087ca:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087cc:	f107 0318 	add.w	r3, r7, #24
 80087d0:	4618      	mov	r0, r3
 80087d2:	f003 f9bf 	bl	800bb54 <HAL_RCCEx_PeriphCLKConfig>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80087dc:	f7fe fbc8 	bl	8006f70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80087e0:	4b44      	ldr	r3, [pc, #272]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80087e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e4:	4a43      	ldr	r2, [pc, #268]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80087e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80087ec:	4b41      	ldr	r3, [pc, #260]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80087ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f8:	4b3e      	ldr	r3, [pc, #248]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80087fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fc:	4a3d      	ldr	r2, [pc, #244]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008804:	4b3b      	ldr	r3, [pc, #236]	@ (80088f4 <HAL_UART_MspInit+0x294>)
 8008806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008810:	230c      	movs	r3, #12
 8008812:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008814:	2302      	movs	r3, #2
 8008816:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008818:	2300      	movs	r3, #0
 800881a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881c:	2300      	movs	r3, #0
 800881e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008820:	2307      	movs	r3, #7
 8008822:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008824:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008828:	4619      	mov	r1, r3
 800882a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800882e:	f002 f9cb 	bl	800abc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008832:	4b37      	ldr	r3, [pc, #220]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008834:	4a37      	ldr	r2, [pc, #220]	@ (8008914 <HAL_UART_MspInit+0x2b4>)
 8008836:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008838:	4b35      	ldr	r3, [pc, #212]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 800883a:	221a      	movs	r2, #26
 800883c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800883e:	4b34      	ldr	r3, [pc, #208]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008840:	2200      	movs	r2, #0
 8008842:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008844:	4b32      	ldr	r3, [pc, #200]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008846:	2200      	movs	r2, #0
 8008848:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800884a:	4b31      	ldr	r3, [pc, #196]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 800884c:	2280      	movs	r2, #128	@ 0x80
 800884e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008850:	4b2f      	ldr	r3, [pc, #188]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008852:	2200      	movs	r2, #0
 8008854:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008856:	4b2e      	ldr	r3, [pc, #184]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008858:	2200      	movs	r2, #0
 800885a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800885c:	4b2c      	ldr	r3, [pc, #176]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 800885e:	2200      	movs	r2, #0
 8008860:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008862:	4b2b      	ldr	r3, [pc, #172]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008864:	2200      	movs	r2, #0
 8008866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008868:	4829      	ldr	r0, [pc, #164]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 800886a:	f001 fe7b 	bl	800a564 <HAL_DMA_Init>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8008874:	f7fe fb7c 	bl	8006f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a25      	ldr	r2, [pc, #148]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 800887c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008880:	4a23      	ldr	r2, [pc, #140]	@ (8008910 <HAL_UART_MspInit+0x2b0>)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 8008888:	4a24      	ldr	r2, [pc, #144]	@ (800891c <HAL_UART_MspInit+0x2bc>)
 800888a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800888c:	4b22      	ldr	r3, [pc, #136]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 800888e:	221b      	movs	r2, #27
 8008890:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008892:	4b21      	ldr	r3, [pc, #132]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 8008894:	2210      	movs	r2, #16
 8008896:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008898:	4b1f      	ldr	r3, [pc, #124]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 800889a:	2200      	movs	r2, #0
 800889c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800889e:	4b1e      	ldr	r3, [pc, #120]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088a0:	2280      	movs	r2, #128	@ 0x80
 80088a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80088b0:	4b19      	ldr	r3, [pc, #100]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80088b6:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80088bc:	4816      	ldr	r0, [pc, #88]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088be:	f001 fe51 	bl	800a564 <HAL_DMA_Init>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80088c8:	f7fe fb52 	bl	8006f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a12      	ldr	r2, [pc, #72]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80088d2:	4a11      	ldr	r2, [pc, #68]	@ (8008918 <HAL_UART_MspInit+0x2b8>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	2026      	movs	r0, #38	@ 0x26
 80088de:	f001 fe0c 	bl	800a4fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80088e2:	2026      	movs	r0, #38	@ 0x26
 80088e4:	f001 fe23 	bl	800a52e <HAL_NVIC_EnableIRQ>
}
 80088e8:	bf00      	nop
 80088ea:	3780      	adds	r7, #128	@ 0x80
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	40008000 	.word	0x40008000
 80088f4:	40021000 	.word	0x40021000
 80088f8:	48000400 	.word	0x48000400
 80088fc:	20002038 	.word	0x20002038
 8008900:	40020044 	.word	0x40020044
 8008904:	20002098 	.word	0x20002098
 8008908:	40020058 	.word	0x40020058
 800890c:	40004400 	.word	0x40004400
 8008910:	200020f8 	.word	0x200020f8
 8008914:	4002001c 	.word	0x4002001c
 8008918:	20002158 	.word	0x20002158
 800891c:	40020030 	.word	0x40020030

08008920 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8008920:	480d      	ldr	r0, [pc, #52]	@ (8008958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008922:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008924:	f7ff f994 	bl	8007c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008928:	480c      	ldr	r0, [pc, #48]	@ (800895c <LoopForever+0x6>)
  ldr r1, =_edata
 800892a:	490d      	ldr	r1, [pc, #52]	@ (8008960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800892c:	4a0d      	ldr	r2, [pc, #52]	@ (8008964 <LoopForever+0xe>)
  movs r3, #0
 800892e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008930:	e002      	b.n	8008938 <LoopCopyDataInit>

08008932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008936:	3304      	adds	r3, #4

08008938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800893a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800893c:	d3f9      	bcc.n	8008932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800893e:	4a0a      	ldr	r2, [pc, #40]	@ (8008968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008940:	4c0a      	ldr	r4, [pc, #40]	@ (800896c <LoopForever+0x16>)
  movs r3, #0
 8008942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008944:	e001      	b.n	800894a <LoopFillZerobss>

08008946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008948:	3204      	adds	r2, #4

0800894a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800894a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800894c:	d3fb      	bcc.n	8008946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800894e:	f008 f831 	bl	80109b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008952:	f7fc fb87 	bl	8005064 <main>

08008956 <LoopForever>:

LoopForever:
    b LoopForever
 8008956:	e7fe      	b.n	8008956 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8008958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800895c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008960:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8008964:	08012eb8 	.word	0x08012eb8
  ldr r2, =_sbss
 8008968:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800896c:	20002304 	.word	0x20002304

08008970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008970:	e7fe      	b.n	8008970 <ADC1_2_IRQHandler>

08008972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800897c:	2003      	movs	r0, #3
 800897e:	f001 fdb1 	bl	800a4e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008982:	2000      	movs	r0, #0
 8008984:	f000 f80e 	bl	80089a4 <HAL_InitTick>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	71fb      	strb	r3, [r7, #7]
 8008992:	e001      	b.n	8008998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008994:	f7ff f834 	bl	8007a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008998:	79fb      	ldrb	r3, [r7, #7]

}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80089b0:	4b16      	ldr	r3, [pc, #88]	@ (8008a0c <HAL_InitTick+0x68>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d022      	beq.n	80089fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80089b8:	4b15      	ldr	r3, [pc, #84]	@ (8008a10 <HAL_InitTick+0x6c>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <HAL_InitTick+0x68>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80089c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fdbc 	bl	800a54a <HAL_SYSTICK_Config>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10f      	bne.n	80089f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	d809      	bhi.n	80089f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089de:	2200      	movs	r2, #0
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	f001 fd88 	bl	800a4fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80089ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <HAL_InitTick+0x70>)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	e007      	b.n	8008a02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	73fb      	strb	r3, [r7, #15]
 80089f6:	e004      	b.n	8008a02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	e001      	b.n	8008a02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	2000013c 	.word	0x2000013c
 8008a10:	20000134 	.word	0x20000134
 8008a14:	20000138 	.word	0x20000138

08008a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a1c:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <HAL_IncTick+0x1c>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4b05      	ldr	r3, [pc, #20]	@ (8008a38 <HAL_IncTick+0x20>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	4a03      	ldr	r2, [pc, #12]	@ (8008a34 <HAL_IncTick+0x1c>)
 8008a28:	6013      	str	r3, [r2, #0]
}
 8008a2a:	bf00      	nop
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	200021b8 	.word	0x200021b8
 8008a38:	2000013c 	.word	0x2000013c

08008a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a40:	4b03      	ldr	r3, [pc, #12]	@ (8008a50 <HAL_GetTick+0x14>)
 8008a42:	681b      	ldr	r3, [r3, #0]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200021b8 	.word	0x200021b8

08008a54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	609a      	str	r2, [r3, #8]
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	609a      	str	r2, [r3, #8]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3360      	adds	r3, #96	@ 0x60
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b08      	ldr	r3, [pc, #32]	@ (8008b00 <LL_ADC_SetOffset+0x44>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	03fff000 	.word	0x03fff000

08008b04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3360      	adds	r3, #96	@ 0x60
 8008b12:	461a      	mov	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3360      	adds	r3, #96	@ 0x60
 8008b40:	461a      	mov	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	431a      	orrs	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3360      	adds	r3, #96	@ 0x60
 8008b76:	461a      	mov	r2, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008b90:	bf00      	nop
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3360      	adds	r3, #96	@ 0x60
 8008bac:	461a      	mov	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	615a      	str	r2, [r3, #20]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b087      	sub	sp, #28
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3330      	adds	r3, #48	@ 0x30
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	f003 030c 	and.w	r3, r3, #12
 8008c3a:	4413      	add	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	211f      	movs	r1, #31
 8008c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4e:	43db      	mvns	r3, r3
 8008c50:	401a      	ands	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0e9b      	lsrs	r3, r3, #26
 8008c56:	f003 011f 	and.w	r1, r3, #31
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	431a      	orrs	r2, r3
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b087      	sub	sp, #28
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3314      	adds	r3, #20
 8008c86:	461a      	mov	r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	0e5b      	lsrs	r3, r3, #25
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	4413      	add	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	0d1b      	lsrs	r3, r3, #20
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2107      	movs	r1, #7
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	401a      	ands	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	0d1b      	lsrs	r3, r3, #20
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008cc0:	bf00      	nop
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	401a      	ands	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f003 0318 	and.w	r3, r3, #24
 8008cee:	4908      	ldr	r1, [pc, #32]	@ (8008d10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008cf0:	40d9      	lsrs	r1, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	400b      	ands	r3, r1
 8008cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	0007ffff 	.word	0x0007ffff

08008d14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 031f 	and.w	r3, r3, #31
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6093      	str	r3, [r2, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d68:	d101      	bne.n	8008d6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e000      	b.n	8008d70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008d90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db8:	d101      	bne.n	8008dbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ddc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008de0:	f043 0201 	orr.w	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e08:	f043 0202 	orr.w	r2, r3, #2
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <LL_ADC_IsEnabled+0x18>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <LL_ADC_IsEnabled+0x1a>
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d101      	bne.n	8008e5a <LL_ADC_IsDisableOngoing+0x18>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <LL_ADC_IsDisableOngoing+0x1a>
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e7c:	f043 0204 	orr.w	r2, r3, #4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d101      	bne.n	8008ea8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e000      	b.n	8008eaa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d101      	bne.n	8008ece <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b089      	sub	sp, #36	@ 0x24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e1a9      	b.n	800924a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fb fbe3 	bl	80046d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff ff19 	bl	8008d54 <LL_ADC_IsDeepPowerDownEnabled>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff feff 	bl	8008d30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff ff34 	bl	8008da4 <LL_ADC_IsInternalRegulatorEnabled>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d115      	bne.n	8008f6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff ff18 	bl	8008d7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80091c0 <HAL_ADC_Init+0x2e4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	099b      	lsrs	r3, r3, #6
 8008f52:	4a9c      	ldr	r2, [pc, #624]	@ (80091c4 <HAL_ADC_Init+0x2e8>)
 8008f54:	fba2 2303 	umull	r2, r3, r2, r3
 8008f58:	099b      	lsrs	r3, r3, #6
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008f60:	e002      	b.n	8008f68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f9      	bne.n	8008f62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff ff16 	bl	8008da4 <LL_ADC_IsInternalRegulatorEnabled>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10d      	bne.n	8008f9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f82:	f043 0210 	orr.w	r2, r3, #16
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ff76 	bl	8008e90 <LL_ADC_REG_IsConversionOngoing>
 8008fa4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 8142 	bne.w	8009238 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f040 813e 	bne.w	8009238 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008fc4:	f043 0202 	orr.w	r2, r3, #2
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff ff23 	bl	8008e1c <LL_ADC_IsEnabled>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d141      	bne.n	8009060 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fe4:	d004      	beq.n	8008ff0 <HAL_ADC_Init+0x114>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a77      	ldr	r2, [pc, #476]	@ (80091c8 <HAL_ADC_Init+0x2ec>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10f      	bne.n	8009010 <HAL_ADC_Init+0x134>
 8008ff0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008ff4:	f7ff ff12 	bl	8008e1c <LL_ADC_IsEnabled>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4873      	ldr	r0, [pc, #460]	@ (80091c8 <HAL_ADC_Init+0x2ec>)
 8008ffc:	f7ff ff0e 	bl	8008e1c <LL_ADC_IsEnabled>
 8009000:	4603      	mov	r3, r0
 8009002:	4323      	orrs	r3, r4
 8009004:	2b00      	cmp	r3, #0
 8009006:	bf0c      	ite	eq
 8009008:	2301      	moveq	r3, #1
 800900a:	2300      	movne	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	e012      	b.n	8009036 <HAL_ADC_Init+0x15a>
 8009010:	486e      	ldr	r0, [pc, #440]	@ (80091cc <HAL_ADC_Init+0x2f0>)
 8009012:	f7ff ff03 	bl	8008e1c <LL_ADC_IsEnabled>
 8009016:	4604      	mov	r4, r0
 8009018:	486d      	ldr	r0, [pc, #436]	@ (80091d0 <HAL_ADC_Init+0x2f4>)
 800901a:	f7ff feff 	bl	8008e1c <LL_ADC_IsEnabled>
 800901e:	4603      	mov	r3, r0
 8009020:	431c      	orrs	r4, r3
 8009022:	486c      	ldr	r0, [pc, #432]	@ (80091d4 <HAL_ADC_Init+0x2f8>)
 8009024:	f7ff fefa 	bl	8008e1c <LL_ADC_IsEnabled>
 8009028:	4603      	mov	r3, r0
 800902a:	4323      	orrs	r3, r4
 800902c:	2b00      	cmp	r3, #0
 800902e:	bf0c      	ite	eq
 8009030:	2301      	moveq	r3, #1
 8009032:	2300      	movne	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009042:	d004      	beq.n	800904e <HAL_ADC_Init+0x172>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a5f      	ldr	r2, [pc, #380]	@ (80091c8 <HAL_ADC_Init+0x2ec>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d101      	bne.n	8009052 <HAL_ADC_Init+0x176>
 800904e:	4a62      	ldr	r2, [pc, #392]	@ (80091d8 <HAL_ADC_Init+0x2fc>)
 8009050:	e000      	b.n	8009054 <HAL_ADC_Init+0x178>
 8009052:	4a62      	ldr	r2, [pc, #392]	@ (80091dc <HAL_ADC_Init+0x300>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f7ff fcfa 	bl	8008a54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	7f5b      	ldrb	r3, [r3, #29]
 8009064:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800906a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009070:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009076:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800907e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009080:	4313      	orrs	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800908a:	2b01      	cmp	r3, #1
 800908c:	d106      	bne.n	800909c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009092:	3b01      	subs	r3, #1
 8009094:	045b      	lsls	r3, r3, #17
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4313      	orrs	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	4b48      	ldr	r3, [pc, #288]	@ (80091e0 <HAL_ADC_Init+0x304>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	69b9      	ldr	r1, [r7, #24]
 80090c8:	430b      	orrs	r3, r1
 80090ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fee5 	bl	8008eb6 <LL_ADC_INJ_IsConversionOngoing>
 80090ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d17f      	bne.n	80091f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d17c      	bne.n	80091f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80090fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009106:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009108:	4313      	orrs	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009116:	f023 0302 	bic.w	r3, r3, #2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6812      	ldr	r2, [r2, #0]
 800911e:	69b9      	ldr	r1, [r7, #24]
 8009120:	430b      	orrs	r3, r1
 8009122:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d017      	beq.n	800915c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800913a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009144:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009148:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6911      	ldr	r1, [r2, #16]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	430b      	orrs	r3, r1
 8009156:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800915a:	e013      	b.n	8009184 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800916a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800917c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009180:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800918a:	2b01      	cmp	r3, #1
 800918c:	d12a      	bne.n	80091e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009198:	f023 0304 	bic.w	r3, r3, #4
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80091a4:	4311      	orrs	r1, r2
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80091aa:	4311      	orrs	r1, r2
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80091b0:	430a      	orrs	r2, r1
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	611a      	str	r2, [r3, #16]
 80091be:	e019      	b.n	80091f4 <HAL_ADC_Init+0x318>
 80091c0:	20000134 	.word	0x20000134
 80091c4:	053e2d63 	.word	0x053e2d63
 80091c8:	50000100 	.word	0x50000100
 80091cc:	50000400 	.word	0x50000400
 80091d0:	50000500 	.word	0x50000500
 80091d4:	50000600 	.word	0x50000600
 80091d8:	50000300 	.word	0x50000300
 80091dc:	50000700 	.word	0x50000700
 80091e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d10c      	bne.n	8009216 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009202:	f023 010f 	bic.w	r1, r3, #15
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	1e5a      	subs	r2, r3, #1
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	631a      	str	r2, [r3, #48]	@ 0x30
 8009214:	e007      	b.n	8009226 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 020f 	bic.w	r2, r2, #15
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0201 	orr.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009236:	e007      	b.n	8009248 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800923c:	f043 0210 	orr.w	r2, r3, #16
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009248:	7ffb      	ldrb	r3, [r7, #31]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3724      	adds	r7, #36	@ 0x24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
 8009252:	bf00      	nop

08009254 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009268:	d004      	beq.n	8009274 <HAL_ADC_Start_DMA+0x20>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a5a      	ldr	r2, [pc, #360]	@ (80093d8 <HAL_ADC_Start_DMA+0x184>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d101      	bne.n	8009278 <HAL_ADC_Start_DMA+0x24>
 8009274:	4b59      	ldr	r3, [pc, #356]	@ (80093dc <HAL_ADC_Start_DMA+0x188>)
 8009276:	e000      	b.n	800927a <HAL_ADC_Start_DMA+0x26>
 8009278:	4b59      	ldr	r3, [pc, #356]	@ (80093e0 <HAL_ADC_Start_DMA+0x18c>)
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff fd4a 	bl	8008d14 <LL_ADC_GetMultimode>
 8009280:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fe02 	bl	8008e90 <LL_ADC_REG_IsConversionOngoing>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 809b 	bne.w	80093ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_ADC_Start_DMA+0x4e>
 800929e:	2302      	movs	r3, #2
 80092a0:	e096      	b.n	80093d0 <HAL_ADC_Start_DMA+0x17c>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a4d      	ldr	r2, [pc, #308]	@ (80093e4 <HAL_ADC_Start_DMA+0x190>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d008      	beq.n	80092c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d002      	beq.n	80092c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	d17a      	bne.n	80093bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fcf6 	bl	8009cb8 <ADC_Enable>
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d16d      	bne.n	80093b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a3a      	ldr	r2, [pc, #232]	@ (80093d8 <HAL_ADC_Start_DMA+0x184>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d009      	beq.n	8009308 <HAL_ADC_Start_DMA+0xb4>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a3b      	ldr	r2, [pc, #236]	@ (80093e8 <HAL_ADC_Start_DMA+0x194>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d002      	beq.n	8009304 <HAL_ADC_Start_DMA+0xb0>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	e003      	b.n	800930c <HAL_ADC_Start_DMA+0xb8>
 8009304:	4b39      	ldr	r3, [pc, #228]	@ (80093ec <HAL_ADC_Start_DMA+0x198>)
 8009306:	e001      	b.n	800930c <HAL_ADC_Start_DMA+0xb8>
 8009308:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	4293      	cmp	r3, r2
 8009312:	d002      	beq.n	800931a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d105      	bne.n	8009326 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800931e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d006      	beq.n	8009340 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009336:	f023 0206 	bic.w	r2, r3, #6
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	661a      	str	r2, [r3, #96]	@ 0x60
 800933e:	e002      	b.n	8009346 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800934a:	4a29      	ldr	r2, [pc, #164]	@ (80093f0 <HAL_ADC_Start_DMA+0x19c>)
 800934c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009352:	4a28      	ldr	r2, [pc, #160]	@ (80093f4 <HAL_ADC_Start_DMA+0x1a0>)
 8009354:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935a:	4a27      	ldr	r2, [pc, #156]	@ (80093f8 <HAL_ADC_Start_DMA+0x1a4>)
 800935c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	221c      	movs	r2, #28
 8009364:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0210 	orr.w	r2, r2, #16
 800937c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0201 	orr.w	r2, r2, #1
 800938c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3340      	adds	r3, #64	@ 0x40
 8009398:	4619      	mov	r1, r3
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f001 f989 	bl	800a6b4 <HAL_DMA_Start_IT>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fd5c 	bl	8008e68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80093b0:	e00d      	b.n	80093ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80093ba:	e008      	b.n	80093ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80093c8:	e001      	b.n	80093ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093ca:	2302      	movs	r3, #2
 80093cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	50000100 	.word	0x50000100
 80093dc:	50000300 	.word	0x50000300
 80093e0:	50000700 	.word	0x50000700
 80093e4:	50000600 	.word	0x50000600
 80093e8:	50000500 	.word	0x50000500
 80093ec:	50000400 	.word	0x50000400
 80093f0:	08009ea3 	.word	0x08009ea3
 80093f4:	08009f7b 	.word	0x08009f7b
 80093f8:	08009f97 	.word	0x08009f97

080093fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b0b6      	sub	sp, #216	@ 0xd8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009452:	2b01      	cmp	r3, #1
 8009454:	d102      	bne.n	800945c <HAL_ADC_ConfigChannel+0x24>
 8009456:	2302      	movs	r3, #2
 8009458:	f000 bc13 	b.w	8009c82 <HAL_ADC_ConfigChannel+0x84a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fd11 	bl	8008e90 <LL_ADC_REG_IsConversionOngoing>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	f040 83f3 	bne.w	8009c5c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	6859      	ldr	r1, [r3, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7ff fbcb 	bl	8008c1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fcff 	bl	8008e90 <LL_ADC_REG_IsConversionOngoing>
 8009492:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fd0b 	bl	8008eb6 <LL_ADC_INJ_IsConversionOngoing>
 80094a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80094a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f040 81d9 	bne.w	8009860 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80094ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 81d4 	bne.w	8009860 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094c0:	d10f      	bne.n	80094e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2200      	movs	r2, #0
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7ff fbd2 	bl	8008c76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff fb79 	bl	8008bd2 <LL_ADC_SetSamplingTimeCommonConfig>
 80094e0:	e00e      	b.n	8009500 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6819      	ldr	r1, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7ff fbc1 	bl	8008c76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2100      	movs	r1, #0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff fb69 	bl	8008bd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	08db      	lsrs	r3, r3, #3
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	fa02 f303 	lsl.w	r3, r2, r3
 8009516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b04      	cmp	r3, #4
 8009520:	d022      	beq.n	8009568 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6919      	ldr	r1, [r3, #16]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009532:	f7ff fac3 	bl	8008abc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	6919      	ldr	r1, [r3, #16]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	461a      	mov	r2, r3
 8009544:	f7ff fb0f 	bl	8008b66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009554:	2b01      	cmp	r3, #1
 8009556:	d102      	bne.n	800955e <HAL_ADC_ConfigChannel+0x126>
 8009558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800955c:	e000      	b.n	8009560 <HAL_ADC_ConfigChannel+0x128>
 800955e:	2300      	movs	r3, #0
 8009560:	461a      	mov	r2, r3
 8009562:	f7ff fb1b 	bl	8008b9c <LL_ADC_SetOffsetSaturation>
 8009566:	e17b      	b.n	8009860 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2100      	movs	r1, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fac8 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 8009574:	4603      	mov	r3, r0
 8009576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <HAL_ADC_ConfigChannel+0x15c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fabd 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 800958a:	4603      	mov	r3, r0
 800958c:	0e9b      	lsrs	r3, r3, #26
 800958e:	f003 021f 	and.w	r2, r3, #31
 8009592:	e01e      	b.n	80095d2 <HAL_ADC_ConfigChannel+0x19a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fab2 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095aa:	fa93 f3a3 	rbit	r3, r3
 80095ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80095b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80095ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80095c2:	2320      	movs	r3, #32
 80095c4:	e004      	b.n	80095d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80095c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095ca:	fab3 f383 	clz	r3, r3
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d105      	bne.n	80095ea <HAL_ADC_ConfigChannel+0x1b2>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	0e9b      	lsrs	r3, r3, #26
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	e018      	b.n	800961c <HAL_ADC_ConfigChannel+0x1e4>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80095f6:	fa93 f3a3 	rbit	r3, r3
 80095fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80095fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8009606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800960e:	2320      	movs	r3, #32
 8009610:	e004      	b.n	800961c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8009612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009616:	fab3 f383 	clz	r3, r3
 800961a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800961c:	429a      	cmp	r2, r3
 800961e:	d106      	bne.n	800962e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fa81 	bl	8008b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2101      	movs	r1, #1
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fa65 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 800963a:	4603      	mov	r3, r0
 800963c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <HAL_ADC_ConfigChannel+0x222>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fa5a 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 8009650:	4603      	mov	r3, r0
 8009652:	0e9b      	lsrs	r3, r3, #26
 8009654:	f003 021f 	and.w	r2, r3, #31
 8009658:	e01e      	b.n	8009698 <HAL_ADC_ConfigChannel+0x260>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2101      	movs	r1, #1
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fa4f 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 8009666:	4603      	mov	r3, r0
 8009668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800966c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009670:	fa93 f3a3 	rbit	r3, r3
 8009674:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800967c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8009688:	2320      	movs	r3, #32
 800968a:	e004      	b.n	8009696 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800968c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009690:	fab3 f383 	clz	r3, r3
 8009694:	b2db      	uxtb	r3, r3
 8009696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <HAL_ADC_ConfigChannel+0x278>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	0e9b      	lsrs	r3, r3, #26
 80096aa:	f003 031f 	and.w	r3, r3, #31
 80096ae:	e018      	b.n	80096e2 <HAL_ADC_ConfigChannel+0x2aa>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096bc:	fa93 f3a3 	rbit	r3, r3
 80096c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80096c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80096cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80096d4:	2320      	movs	r3, #32
 80096d6:	e004      	b.n	80096e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80096d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096dc:	fab3 f383 	clz	r3, r3
 80096e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d106      	bne.n	80096f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	2101      	movs	r1, #1
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff fa1e 	bl	8008b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2102      	movs	r1, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fa02 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 8009700:	4603      	mov	r3, r0
 8009702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <HAL_ADC_ConfigChannel+0x2e8>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff f9f7 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 8009716:	4603      	mov	r3, r0
 8009718:	0e9b      	lsrs	r3, r3, #26
 800971a:	f003 021f 	and.w	r2, r3, #31
 800971e:	e01e      	b.n	800975e <HAL_ADC_ConfigChannel+0x326>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2102      	movs	r1, #2
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff f9ec 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 800972c:	4603      	mov	r3, r0
 800972e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009736:	fa93 f3a3 	rbit	r3, r3
 800973a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800973e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8009746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800974e:	2320      	movs	r3, #32
 8009750:	e004      	b.n	800975c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8009752:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009756:	fab3 f383 	clz	r3, r3
 800975a:	b2db      	uxtb	r3, r3
 800975c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <HAL_ADC_ConfigChannel+0x33e>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	0e9b      	lsrs	r3, r3, #26
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	e016      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x36c>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800977e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009782:	fa93 f3a3 	rbit	r3, r3
 8009786:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800978a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800978e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8009796:	2320      	movs	r3, #32
 8009798:	e004      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800979a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800979e:	fab3 f383 	clz	r3, r3
 80097a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d106      	bne.n	80097b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2200      	movs	r2, #0
 80097ae:	2102      	movs	r1, #2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff f9bd 	bl	8008b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2103      	movs	r1, #3
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff f9a1 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <HAL_ADC_ConfigChannel+0x3aa>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2103      	movs	r1, #3
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff f996 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 80097d8:	4603      	mov	r3, r0
 80097da:	0e9b      	lsrs	r3, r3, #26
 80097dc:	f003 021f 	and.w	r2, r3, #31
 80097e0:	e017      	b.n	8009812 <HAL_ADC_ConfigChannel+0x3da>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2103      	movs	r1, #3
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff f98b 	bl	8008b04 <LL_ADC_GetOffsetChannel>
 80097ee:	4603      	mov	r3, r0
 80097f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097f4:	fa93 f3a3 	rbit	r3, r3
 80097f8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80097fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80097fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8009804:	2320      	movs	r3, #32
 8009806:	e003      	b.n	8009810 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8009808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800980a:	fab3 f383 	clz	r3, r3
 800980e:	b2db      	uxtb	r3, r3
 8009810:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <HAL_ADC_ConfigChannel+0x3f2>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	0e9b      	lsrs	r3, r3, #26
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	e011      	b.n	800984e <HAL_ADC_ConfigChannel+0x416>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009832:	fa93 f3a3 	rbit	r3, r3
 8009836:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800983a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800983c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8009842:	2320      	movs	r3, #32
 8009844:	e003      	b.n	800984e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8009846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009848:	fab3 f383 	clz	r3, r3
 800984c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800984e:	429a      	cmp	r2, r3
 8009850:	d106      	bne.n	8009860 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	2103      	movs	r1, #3
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff f968 	bl	8008b30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fad9 	bl	8008e1c <LL_ADC_IsEnabled>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	f040 813d 	bne.w	8009aec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	461a      	mov	r2, r3
 8009880:	f7ff fa24 	bl	8008ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4aa2      	ldr	r2, [pc, #648]	@ (8009b14 <HAL_ADC_ConfigChannel+0x6dc>)
 800988a:	4293      	cmp	r3, r2
 800988c:	f040 812e 	bne.w	8009aec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <HAL_ADC_ConfigChannel+0x480>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	0e9b      	lsrs	r3, r3, #26
 80098a6:	3301      	adds	r3, #1
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	bf94      	ite	ls
 80098b0:	2301      	movls	r3, #1
 80098b2:	2300      	movhi	r3, #0
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	e019      	b.n	80098ec <HAL_ADC_ConfigChannel+0x4b4>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098c0:	fa93 f3a3 	rbit	r3, r3
 80098c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80098c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80098ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80098d0:	2320      	movs	r3, #32
 80098d2:	e003      	b.n	80098dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80098d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098d6:	fab3 f383 	clz	r3, r3
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	3301      	adds	r3, #1
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	2b09      	cmp	r3, #9
 80098e4:	bf94      	ite	ls
 80098e6:	2301      	movls	r3, #1
 80098e8:	2300      	movhi	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d079      	beq.n	80099e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d107      	bne.n	800990c <HAL_ADC_ConfigChannel+0x4d4>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0e9b      	lsrs	r3, r3, #26
 8009902:	3301      	adds	r3, #1
 8009904:	069b      	lsls	r3, r3, #26
 8009906:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800990a:	e015      	b.n	8009938 <HAL_ADC_ConfigChannel+0x500>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009914:	fa93 f3a3 	rbit	r3, r3
 8009918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800991a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800991c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800991e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8009924:	2320      	movs	r3, #32
 8009926:	e003      	b.n	8009930 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8009928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800992a:	fab3 f383 	clz	r3, r3
 800992e:	b2db      	uxtb	r3, r3
 8009930:	3301      	adds	r3, #1
 8009932:	069b      	lsls	r3, r3, #26
 8009934:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009940:	2b00      	cmp	r3, #0
 8009942:	d109      	bne.n	8009958 <HAL_ADC_ConfigChannel+0x520>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	0e9b      	lsrs	r3, r3, #26
 800994a:	3301      	adds	r3, #1
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	2101      	movs	r1, #1
 8009952:	fa01 f303 	lsl.w	r3, r1, r3
 8009956:	e017      	b.n	8009988 <HAL_ADC_ConfigChannel+0x550>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800995e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009960:	fa93 f3a3 	rbit	r3, r3
 8009964:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009968:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800996a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009970:	2320      	movs	r3, #32
 8009972:	e003      	b.n	800997c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8009974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009976:	fab3 f383 	clz	r3, r3
 800997a:	b2db      	uxtb	r3, r3
 800997c:	3301      	adds	r3, #1
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	2101      	movs	r1, #1
 8009984:	fa01 f303 	lsl.w	r3, r1, r3
 8009988:	ea42 0103 	orr.w	r1, r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <HAL_ADC_ConfigChannel+0x576>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	0e9b      	lsrs	r3, r3, #26
 800999e:	3301      	adds	r3, #1
 80099a0:	f003 021f 	and.w	r2, r3, #31
 80099a4:	4613      	mov	r3, r2
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	4413      	add	r3, r2
 80099aa:	051b      	lsls	r3, r3, #20
 80099ac:	e018      	b.n	80099e0 <HAL_ADC_ConfigChannel+0x5a8>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	fa93 f3a3 	rbit	r3, r3
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80099bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80099c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80099c6:	2320      	movs	r3, #32
 80099c8:	e003      	b.n	80099d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80099ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099cc:	fab3 f383 	clz	r3, r3
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	3301      	adds	r3, #1
 80099d4:	f003 021f 	and.w	r2, r3, #31
 80099d8:	4613      	mov	r3, r2
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	4413      	add	r3, r2
 80099de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80099e0:	430b      	orrs	r3, r1
 80099e2:	e07e      	b.n	8009ae2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d107      	bne.n	8009a00 <HAL_ADC_ConfigChannel+0x5c8>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	0e9b      	lsrs	r3, r3, #26
 80099f6:	3301      	adds	r3, #1
 80099f8:	069b      	lsls	r3, r3, #26
 80099fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80099fe:	e015      	b.n	8009a2c <HAL_ADC_ConfigChannel+0x5f4>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	fa93 f3a3 	rbit	r3, r3
 8009a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8009a18:	2320      	movs	r3, #32
 8009a1a:	e003      	b.n	8009a24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	fab3 f383 	clz	r3, r3
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	3301      	adds	r3, #1
 8009a26:	069b      	lsls	r3, r3, #26
 8009a28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <HAL_ADC_ConfigChannel+0x614>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	0e9b      	lsrs	r3, r3, #26
 8009a3e:	3301      	adds	r3, #1
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	2101      	movs	r1, #1
 8009a46:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4a:	e017      	b.n	8009a7c <HAL_ADC_ConfigChannel+0x644>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	fa93 f3a3 	rbit	r3, r3
 8009a58:	61fb      	str	r3, [r7, #28]
  return result;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8009a64:	2320      	movs	r3, #32
 8009a66:	e003      	b.n	8009a70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6a:	fab3 f383 	clz	r3, r3
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	3301      	adds	r3, #1
 8009a72:	f003 031f 	and.w	r3, r3, #31
 8009a76:	2101      	movs	r1, #1
 8009a78:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7c:	ea42 0103 	orr.w	r1, r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10d      	bne.n	8009aa8 <HAL_ADC_ConfigChannel+0x670>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	0e9b      	lsrs	r3, r3, #26
 8009a92:	3301      	adds	r3, #1
 8009a94:	f003 021f 	and.w	r2, r3, #31
 8009a98:	4613      	mov	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4413      	add	r3, r2
 8009a9e:	3b1e      	subs	r3, #30
 8009aa0:	051b      	lsls	r3, r3, #20
 8009aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009aa6:	e01b      	b.n	8009ae0 <HAL_ADC_ConfigChannel+0x6a8>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	fa93 f3a3 	rbit	r3, r3
 8009ab4:	613b      	str	r3, [r7, #16]
  return result;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	e003      	b.n	8009acc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	fab3 f383 	clz	r3, r3
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	3301      	adds	r3, #1
 8009ace:	f003 021f 	and.w	r2, r3, #31
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3b1e      	subs	r3, #30
 8009ada:	051b      	lsls	r3, r3, #20
 8009adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ae0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	f7ff f8c5 	bl	8008c76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b09      	ldr	r3, [pc, #36]	@ (8009b18 <HAL_ADC_ConfigChannel+0x6e0>)
 8009af2:	4013      	ands	r3, r2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80be 	beq.w	8009c76 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b02:	d004      	beq.n	8009b0e <HAL_ADC_ConfigChannel+0x6d6>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a04      	ldr	r2, [pc, #16]	@ (8009b1c <HAL_ADC_ConfigChannel+0x6e4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d10a      	bne.n	8009b24 <HAL_ADC_ConfigChannel+0x6ec>
 8009b0e:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <HAL_ADC_ConfigChannel+0x6e8>)
 8009b10:	e009      	b.n	8009b26 <HAL_ADC_ConfigChannel+0x6ee>
 8009b12:	bf00      	nop
 8009b14:	407f0000 	.word	0x407f0000
 8009b18:	80080000 	.word	0x80080000
 8009b1c:	50000100 	.word	0x50000100
 8009b20:	50000300 	.word	0x50000300
 8009b24:	4b59      	ldr	r3, [pc, #356]	@ (8009c8c <HAL_ADC_ConfigChannel+0x854>)
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe ffba 	bl	8008aa0 <LL_ADC_GetCommonPathInternalCh>
 8009b2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a56      	ldr	r2, [pc, #344]	@ (8009c90 <HAL_ADC_ConfigChannel+0x858>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <HAL_ADC_ConfigChannel+0x70c>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a55      	ldr	r2, [pc, #340]	@ (8009c94 <HAL_ADC_ConfigChannel+0x85c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d13a      	bne.n	8009bba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d134      	bne.n	8009bba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b58:	d005      	beq.n	8009b66 <HAL_ADC_ConfigChannel+0x72e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8009c98 <HAL_ADC_ConfigChannel+0x860>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	f040 8085 	bne.w	8009c70 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b6e:	d004      	beq.n	8009b7a <HAL_ADC_ConfigChannel+0x742>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a49      	ldr	r2, [pc, #292]	@ (8009c9c <HAL_ADC_ConfigChannel+0x864>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d101      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x746>
 8009b7a:	4a49      	ldr	r2, [pc, #292]	@ (8009ca0 <HAL_ADC_ConfigChannel+0x868>)
 8009b7c:	e000      	b.n	8009b80 <HAL_ADC_ConfigChannel+0x748>
 8009b7e:	4a43      	ldr	r2, [pc, #268]	@ (8009c8c <HAL_ADC_ConfigChannel+0x854>)
 8009b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009b84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	f7fe ff75 	bl	8008a7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009b90:	4b44      	ldr	r3, [pc, #272]	@ (8009ca4 <HAL_ADC_ConfigChannel+0x86c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	099b      	lsrs	r3, r3, #6
 8009b96:	4a44      	ldr	r2, [pc, #272]	@ (8009ca8 <HAL_ADC_ConfigChannel+0x870>)
 8009b98:	fba2 2303 	umull	r2, r3, r2, r3
 8009b9c:	099b      	lsrs	r3, r3, #6
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009baa:	e002      	b.n	8009bb2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f9      	bne.n	8009bac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009bb8:	e05a      	b.n	8009c70 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8009cac <HAL_ADC_ConfigChannel+0x874>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d125      	bne.n	8009c10 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d11f      	bne.n	8009c10 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a31      	ldr	r2, [pc, #196]	@ (8009c9c <HAL_ADC_ConfigChannel+0x864>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d104      	bne.n	8009be4 <HAL_ADC_ConfigChannel+0x7ac>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a34      	ldr	r2, [pc, #208]	@ (8009cb0 <HAL_ADC_ConfigChannel+0x878>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d047      	beq.n	8009c74 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bec:	d004      	beq.n	8009bf8 <HAL_ADC_ConfigChannel+0x7c0>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c9c <HAL_ADC_ConfigChannel+0x864>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d101      	bne.n	8009bfc <HAL_ADC_ConfigChannel+0x7c4>
 8009bf8:	4a29      	ldr	r2, [pc, #164]	@ (8009ca0 <HAL_ADC_ConfigChannel+0x868>)
 8009bfa:	e000      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x7c6>
 8009bfc:	4a23      	ldr	r2, [pc, #140]	@ (8009c8c <HAL_ADC_ConfigChannel+0x854>)
 8009bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fe ff36 	bl	8008a7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c0e:	e031      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a27      	ldr	r2, [pc, #156]	@ (8009cb4 <HAL_ADC_ConfigChannel+0x87c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d12d      	bne.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d127      	bne.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <HAL_ADC_ConfigChannel+0x864>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c38:	d004      	beq.n	8009c44 <HAL_ADC_ConfigChannel+0x80c>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a17      	ldr	r2, [pc, #92]	@ (8009c9c <HAL_ADC_ConfigChannel+0x864>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d101      	bne.n	8009c48 <HAL_ADC_ConfigChannel+0x810>
 8009c44:	4a16      	ldr	r2, [pc, #88]	@ (8009ca0 <HAL_ADC_ConfigChannel+0x868>)
 8009c46:	e000      	b.n	8009c4a <HAL_ADC_ConfigChannel+0x812>
 8009c48:	4a10      	ldr	r2, [pc, #64]	@ (8009c8c <HAL_ADC_ConfigChannel+0x854>)
 8009c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7fe ff10 	bl	8008a7a <LL_ADC_SetCommonPathInternalCh>
 8009c5a:	e00c      	b.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c60:	f043 0220 	orr.w	r2, r3, #32
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009c6e:	e002      	b.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009c7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	37d8      	adds	r7, #216	@ 0xd8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	50000700 	.word	0x50000700
 8009c90:	c3210000 	.word	0xc3210000
 8009c94:	90c00010 	.word	0x90c00010
 8009c98:	50000600 	.word	0x50000600
 8009c9c:	50000100 	.word	0x50000100
 8009ca0:	50000300 	.word	0x50000300
 8009ca4:	20000134 	.word	0x20000134
 8009ca8:	053e2d63 	.word	0x053e2d63
 8009cac:	c7520000 	.word	0xc7520000
 8009cb0:	50000500 	.word	0x50000500
 8009cb4:	cb840000 	.word	0xcb840000

08009cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff f8a7 	bl	8008e1c <LL_ADC_IsEnabled>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d176      	bne.n	8009dc2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	4b3c      	ldr	r3, [pc, #240]	@ (8009dcc <ADC_Enable+0x114>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00d      	beq.n	8009cfe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ce6:	f043 0210 	orr.w	r2, r3, #16
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf2:	f043 0201 	orr.w	r2, r3, #1
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e062      	b.n	8009dc4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff f862 	bl	8008dcc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d10:	d004      	beq.n	8009d1c <ADC_Enable+0x64>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a2e      	ldr	r2, [pc, #184]	@ (8009dd0 <ADC_Enable+0x118>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d101      	bne.n	8009d20 <ADC_Enable+0x68>
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8009dd4 <ADC_Enable+0x11c>)
 8009d1e:	e000      	b.n	8009d22 <ADC_Enable+0x6a>
 8009d20:	4b2d      	ldr	r3, [pc, #180]	@ (8009dd8 <ADC_Enable+0x120>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe febc 	bl	8008aa0 <LL_ADC_GetCommonPathInternalCh>
 8009d28:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d013      	beq.n	8009d5a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009d32:	4b2a      	ldr	r3, [pc, #168]	@ (8009ddc <ADC_Enable+0x124>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a29      	ldr	r2, [pc, #164]	@ (8009de0 <ADC_Enable+0x128>)
 8009d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3e:	099b      	lsrs	r3, r3, #6
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	4613      	mov	r3, r2
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009d4c:	e002      	b.n	8009d54 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f9      	bne.n	8009d4e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009d5a:	f7fe fe6f 	bl	8008a3c <HAL_GetTick>
 8009d5e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d60:	e028      	b.n	8009db4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff f858 	bl	8008e1c <LL_ADC_IsEnabled>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d104      	bne.n	8009d7c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff f828 	bl	8008dcc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009d7c:	f7fe fe5e 	bl	8008a3c <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d914      	bls.n	8009db4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d00d      	beq.n	8009db4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d9c:	f043 0210 	orr.w	r2, r3, #16
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da8:	f043 0201 	orr.w	r2, r3, #1
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e007      	b.n	8009dc4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d1cf      	bne.n	8009d62 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	8000003f 	.word	0x8000003f
 8009dd0:	50000100 	.word	0x50000100
 8009dd4:	50000300 	.word	0x50000300
 8009dd8:	50000700 	.word	0x50000700
 8009ddc:	20000134 	.word	0x20000134
 8009de0:	053e2d63 	.word	0x053e2d63

08009de4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff f826 	bl	8008e42 <LL_ADC_IsDisableOngoing>
 8009df6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff f80d 	bl	8008e1c <LL_ADC_IsEnabled>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d047      	beq.n	8009e98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d144      	bne.n	8009e98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f003 030d 	and.w	r3, r3, #13
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d10c      	bne.n	8009e36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe ffe7 	bl	8008df4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009e2e:	f7fe fe05 	bl	8008a3c <HAL_GetTick>
 8009e32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e34:	e029      	b.n	8009e8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e3a:	f043 0210 	orr.w	r2, r3, #16
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e46:	f043 0201 	orr.w	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e023      	b.n	8009e9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009e52:	f7fe fdf3 	bl	8008a3c <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d914      	bls.n	8009e8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00d      	beq.n	8009e8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e72:	f043 0210 	orr.w	r2, r3, #16
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7e:	f043 0201 	orr.w	r2, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e007      	b.n	8009e9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1dc      	bne.n	8009e52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d14b      	bne.n	8009f54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ec0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d021      	beq.n	8009f1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fe8c 	bl	8008bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d032      	beq.n	8009f4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d12b      	bne.n	8009f4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d11f      	bne.n	8009f4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f10:	f043 0201 	orr.w	r2, r3, #1
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009f18:	e018      	b.n	8009f4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d111      	bne.n	8009f4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d105      	bne.n	8009f4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f44:	f043 0201 	orr.w	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fa55 	bl	80093fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009f52:	e00e      	b.n	8009f72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fa5f 	bl	8009424 <HAL_ADC_ErrorCallback>
}
 8009f66:	e004      	b.n	8009f72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7ff fa41 	bl	8009410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fa8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fb4:	f043 0204 	orr.w	r2, r3, #4
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f7ff fa31 	bl	8009424 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <LL_ADC_IsEnabled>:
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d101      	bne.n	8009fe2 <LL_ADC_IsEnabled+0x18>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e000      	b.n	8009fe4 <LL_ADC_IsEnabled+0x1a>
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <LL_ADC_StartCalibration>:
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a002:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	609a      	str	r2, [r3, #8]
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <LL_ADC_IsCalibrationOnGoing>:
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a036:	d101      	bne.n	800a03c <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a038:	2301      	movs	r3, #1
 800a03a:	e000      	b.n	800a03e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <LL_ADC_REG_IsConversionOngoing>:
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 0304 	and.w	r3, r3, #4
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	d101      	bne.n	800a062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a084:	2b01      	cmp	r3, #1
 800a086:	d101      	bne.n	800a08c <HAL_ADCEx_Calibration_Start+0x1c>
 800a088:	2302      	movs	r3, #2
 800a08a:	e04d      	b.n	800a128 <HAL_ADCEx_Calibration_Start+0xb8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fea5 	bl	8009de4 <ADC_Disable>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d136      	bne.n	800a112 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a0ac:	f023 0302 	bic.w	r3, r3, #2
 800a0b0:	f043 0202 	orr.w	r2, r3, #2
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff ff96 	bl	8009ff0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a0c4:	e014      	b.n	800a0f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a18      	ldr	r2, [pc, #96]	@ (800a130 <HAL_ADCEx_Calibration_Start+0xc0>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d90d      	bls.n	800a0f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0d8:	f023 0312 	bic.w	r3, r3, #18
 800a0dc:	f043 0210 	orr.w	r2, r3, #16
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e01b      	b.n	800a128 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ff94 	bl	800a022 <LL_ADC_IsCalibrationOnGoing>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e2      	bne.n	800a0c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a104:	f023 0303 	bic.w	r3, r3, #3
 800a108:	f043 0201 	orr.w	r2, r3, #1
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a110:	e005      	b.n	800a11e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a116:	f043 0210 	orr.w	r2, r3, #16
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	0004de01 	.word	0x0004de01

0800a134 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800a134:	b590      	push	{r4, r7, lr}
 800a136:	b0a1      	sub	sp, #132	@ 0x84
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a14e:	2302      	movs	r3, #2
 800a150:	e0e7      	b.n	800a322 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800a15a:	2300      	movs	r3, #0
 800a15c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800a15e:	2300      	movs	r3, #0
 800a160:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a16a:	d102      	bne.n	800a172 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a16c:	4b6f      	ldr	r3, [pc, #444]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a16e:	60bb      	str	r3, [r7, #8]
 800a170:	e009      	b.n	800a186 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a6e      	ldr	r2, [pc, #440]	@ (800a330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d102      	bne.n	800a182 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800a17c:	4b6d      	ldr	r3, [pc, #436]	@ (800a334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a17e:	60bb      	str	r3, [r7, #8]
 800a180:	e001      	b.n	800a186 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10b      	bne.n	800a1a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a190:	f043 0220 	orr.w	r2, r3, #32
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e0be      	b.n	800a322 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff ff4f 	bl	800a04a <LL_ADC_REG_IsConversionOngoing>
 800a1ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff ff49 	bl	800a04a <LL_ADC_REG_IsConversionOngoing>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f040 80a0 	bne.w	800a300 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800a1c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 809c 	bne.w	800a300 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1d0:	d004      	beq.n	800a1dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a55      	ldr	r2, [pc, #340]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d101      	bne.n	800a1e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800a1dc:	4b56      	ldr	r3, [pc, #344]	@ (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a1de:	e000      	b.n	800a1e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800a1e0:	4b56      	ldr	r3, [pc, #344]	@ (800a33c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800a1e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d04b      	beq.n	800a284 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a1ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	6859      	ldr	r1, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1fe:	035b      	lsls	r3, r3, #13
 800a200:	430b      	orrs	r3, r1
 800a202:	431a      	orrs	r2, r3
 800a204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a206:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a210:	d004      	beq.n	800a21c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a45      	ldr	r2, [pc, #276]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d10f      	bne.n	800a23c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800a21c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a220:	f7ff fed3 	bl	8009fca <LL_ADC_IsEnabled>
 800a224:	4604      	mov	r4, r0
 800a226:	4841      	ldr	r0, [pc, #260]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a228:	f7ff fecf 	bl	8009fca <LL_ADC_IsEnabled>
 800a22c:	4603      	mov	r3, r0
 800a22e:	4323      	orrs	r3, r4
 800a230:	2b00      	cmp	r3, #0
 800a232:	bf0c      	ite	eq
 800a234:	2301      	moveq	r3, #1
 800a236:	2300      	movne	r3, #0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	e012      	b.n	800a262 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800a23c:	483c      	ldr	r0, [pc, #240]	@ (800a330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a23e:	f7ff fec4 	bl	8009fca <LL_ADC_IsEnabled>
 800a242:	4604      	mov	r4, r0
 800a244:	483b      	ldr	r0, [pc, #236]	@ (800a334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a246:	f7ff fec0 	bl	8009fca <LL_ADC_IsEnabled>
 800a24a:	4603      	mov	r3, r0
 800a24c:	431c      	orrs	r4, r3
 800a24e:	483c      	ldr	r0, [pc, #240]	@ (800a340 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a250:	f7ff febb 	bl	8009fca <LL_ADC_IsEnabled>
 800a254:	4603      	mov	r3, r0
 800a256:	4323      	orrs	r3, r4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d056      	beq.n	800a314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a26e:	f023 030f 	bic.w	r3, r3, #15
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	6811      	ldr	r1, [r2, #0]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	6892      	ldr	r2, [r2, #8]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	431a      	orrs	r2, r3
 800a27e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a280:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a282:	e047      	b.n	800a314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a28c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a28e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a298:	d004      	beq.n	800a2a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a23      	ldr	r2, [pc, #140]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d10f      	bne.n	800a2c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800a2a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a2a8:	f7ff fe8f 	bl	8009fca <LL_ADC_IsEnabled>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	481f      	ldr	r0, [pc, #124]	@ (800a32c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a2b0:	f7ff fe8b 	bl	8009fca <LL_ADC_IsEnabled>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	4323      	orrs	r3, r4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bf0c      	ite	eq
 800a2bc:	2301      	moveq	r3, #1
 800a2be:	2300      	movne	r3, #0
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	e012      	b.n	800a2ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800a2c4:	481a      	ldr	r0, [pc, #104]	@ (800a330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a2c6:	f7ff fe80 	bl	8009fca <LL_ADC_IsEnabled>
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4819      	ldr	r0, [pc, #100]	@ (800a334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a2ce:	f7ff fe7c 	bl	8009fca <LL_ADC_IsEnabled>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	431c      	orrs	r4, r3
 800a2d6:	481a      	ldr	r0, [pc, #104]	@ (800a340 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a2d8:	f7ff fe77 	bl	8009fca <LL_ADC_IsEnabled>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4323      	orrs	r3, r4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bf0c      	ite	eq
 800a2e4:	2301      	moveq	r3, #1
 800a2e6:	2300      	movne	r3, #0
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d012      	beq.n	800a314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a2ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a2f6:	f023 030f 	bic.w	r3, r3, #15
 800a2fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a2fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a2fe:	e009      	b.n	800a314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a304:	f043 0220 	orr.w	r2, r3, #32
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800a312:	e000      	b.n	800a316 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a31e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800a322:	4618      	mov	r0, r3
 800a324:	3784      	adds	r7, #132	@ 0x84
 800a326:	46bd      	mov	sp, r7
 800a328:	bd90      	pop	{r4, r7, pc}
 800a32a:	bf00      	nop
 800a32c:	50000100 	.word	0x50000100
 800a330:	50000400 	.word	0x50000400
 800a334:	50000500 	.word	0x50000500
 800a338:	50000300 	.word	0x50000300
 800a33c:	50000700 	.word	0x50000700
 800a340:	50000600 	.word	0x50000600

0800a344 <__NVIC_SetPriorityGrouping>:
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a354:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <__NVIC_SetPriorityGrouping+0x44>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a360:	4013      	ands	r3, r2
 800a362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a36c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a376:	4a04      	ldr	r2, [pc, #16]	@ (800a388 <__NVIC_SetPriorityGrouping+0x44>)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	60d3      	str	r3, [r2, #12]
}
 800a37c:	bf00      	nop
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	e000ed00 	.word	0xe000ed00

0800a38c <__NVIC_GetPriorityGrouping>:
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a390:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <__NVIC_GetPriorityGrouping+0x18>)
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	0a1b      	lsrs	r3, r3, #8
 800a396:	f003 0307 	and.w	r3, r3, #7
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	e000ed00 	.word	0xe000ed00

0800a3a8 <__NVIC_EnableIRQ>:
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	db0b      	blt.n	800a3d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	f003 021f 	and.w	r2, r3, #31
 800a3c0:	4907      	ldr	r1, [pc, #28]	@ (800a3e0 <__NVIC_EnableIRQ+0x38>)
 800a3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	fa00 f202 	lsl.w	r2, r0, r2
 800a3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e100 	.word	0xe000e100

0800a3e4 <__NVIC_SetPriority>:
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	db0a      	blt.n	800a40e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	490c      	ldr	r1, [pc, #48]	@ (800a430 <__NVIC_SetPriority+0x4c>)
 800a3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a402:	0112      	lsls	r2, r2, #4
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	440b      	add	r3, r1
 800a408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a40c:	e00a      	b.n	800a424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	4908      	ldr	r1, [pc, #32]	@ (800a434 <__NVIC_SetPriority+0x50>)
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	f003 030f 	and.w	r3, r3, #15
 800a41a:	3b04      	subs	r3, #4
 800a41c:	0112      	lsls	r2, r2, #4
 800a41e:	b2d2      	uxtb	r2, r2
 800a420:	440b      	add	r3, r1
 800a422:	761a      	strb	r2, [r3, #24]
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	e000e100 	.word	0xe000e100
 800a434:	e000ed00 	.word	0xe000ed00

0800a438 <NVIC_EncodePriority>:
{
 800a438:	b480      	push	{r7}
 800a43a:	b089      	sub	sp, #36	@ 0x24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f1c3 0307 	rsb	r3, r3, #7
 800a452:	2b04      	cmp	r3, #4
 800a454:	bf28      	it	cs
 800a456:	2304      	movcs	r3, #4
 800a458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	3304      	adds	r3, #4
 800a45e:	2b06      	cmp	r3, #6
 800a460:	d902      	bls.n	800a468 <NVIC_EncodePriority+0x30>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	3b03      	subs	r3, #3
 800a466:	e000      	b.n	800a46a <NVIC_EncodePriority+0x32>
 800a468:	2300      	movs	r3, #0
 800a46a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43da      	mvns	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	401a      	ands	r2, r3
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a480:	f04f 31ff 	mov.w	r1, #4294967295
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	fa01 f303 	lsl.w	r3, r1, r3
 800a48a:	43d9      	mvns	r1, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a490:	4313      	orrs	r3, r2
}
 800a492:	4618      	mov	r0, r3
 800a494:	3724      	adds	r7, #36	@ 0x24
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4b0:	d301      	bcc.n	800a4b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e00f      	b.n	800a4d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e0 <SysTick_Config+0x40>)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a4be:	210f      	movs	r1, #15
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	f7ff ff8e 	bl	800a3e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a4c8:	4b05      	ldr	r3, [pc, #20]	@ (800a4e0 <SysTick_Config+0x40>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a4ce:	4b04      	ldr	r3, [pc, #16]	@ (800a4e0 <SysTick_Config+0x40>)
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	e000e010 	.word	0xe000e010

0800a4e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff29 	bl	800a344 <__NVIC_SetPriorityGrouping>
}
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	4603      	mov	r3, r0
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a508:	f7ff ff40 	bl	800a38c <__NVIC_GetPriorityGrouping>
 800a50c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	68b9      	ldr	r1, [r7, #8]
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	f7ff ff90 	bl	800a438 <NVIC_EncodePriority>
 800a518:	4602      	mov	r2, r0
 800a51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff ff5f 	bl	800a3e4 <__NVIC_SetPriority>
}
 800a526:	bf00      	nop
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	4603      	mov	r3, r0
 800a536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff ff33 	bl	800a3a8 <__NVIC_EnableIRQ>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff ffa4 	bl	800a4a0 <SysTick_Config>
 800a558:	4603      	mov	r3, r0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e08d      	b.n	800a692 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	461a      	mov	r2, r3
 800a57c:	4b47      	ldr	r3, [pc, #284]	@ (800a69c <HAL_DMA_Init+0x138>)
 800a57e:	429a      	cmp	r2, r3
 800a580:	d80f      	bhi.n	800a5a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	4b45      	ldr	r3, [pc, #276]	@ (800a6a0 <HAL_DMA_Init+0x13c>)
 800a58a:	4413      	add	r3, r2
 800a58c:	4a45      	ldr	r2, [pc, #276]	@ (800a6a4 <HAL_DMA_Init+0x140>)
 800a58e:	fba2 2303 	umull	r2, r3, r2, r3
 800a592:	091b      	lsrs	r3, r3, #4
 800a594:	009a      	lsls	r2, r3, #2
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a42      	ldr	r2, [pc, #264]	@ (800a6a8 <HAL_DMA_Init+0x144>)
 800a59e:	641a      	str	r2, [r3, #64]	@ 0x40
 800a5a0:	e00e      	b.n	800a5c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4b40      	ldr	r3, [pc, #256]	@ (800a6ac <HAL_DMA_Init+0x148>)
 800a5aa:	4413      	add	r3, r2
 800a5ac:	4a3d      	ldr	r2, [pc, #244]	@ (800a6a4 <HAL_DMA_Init+0x140>)
 800a5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b2:	091b      	lsrs	r3, r3, #4
 800a5b4:	009a      	lsls	r2, r3, #2
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a3c      	ldr	r2, [pc, #240]	@ (800a6b0 <HAL_DMA_Init+0x14c>)
 800a5be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a5e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa76 	bl	800ab04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a620:	d102      	bne.n	800a628 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a63c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d010      	beq.n	800a668 <HAL_DMA_Init+0x104>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d80c      	bhi.n	800a668 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fa96 	bl	800ab80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a664:	605a      	str	r2, [r3, #4]
 800a666:	e008      	b.n	800a67a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	40020407 	.word	0x40020407
 800a6a0:	bffdfff8 	.word	0xbffdfff8
 800a6a4:	cccccccd 	.word	0xcccccccd
 800a6a8:	40020000 	.word	0x40020000
 800a6ac:	bffdfbf8 	.word	0xbffdfbf8
 800a6b0:	40020400 	.word	0x40020400

0800a6b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_DMA_Start_IT+0x20>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e066      	b.n	800a7a2 <HAL_DMA_Start_IT+0xee>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d155      	bne.n	800a794 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f9bb 	bl	800aa88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 020e 	orr.w	r2, r2, #14
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e00f      	b.n	800a74c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0204 	bic.w	r2, r2, #4
 800a73a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 020a 	orr.w	r2, r2, #10
 800a74a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a768:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a780:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0201 	orr.w	r2, r2, #1
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e005      	b.n	800a7a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a79c:	2302      	movs	r3, #2
 800a79e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d005      	beq.n	800a7ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
 800a7cc:	e037      	b.n	800a83e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 020e 	bic.w	r2, r2, #14
 800a7dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a802:	f003 021f 	and.w	r2, r3, #31
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80a:	2101      	movs	r1, #1
 800a80c:	fa01 f202 	lsl.w	r2, r1, r2
 800a810:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a81a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a832:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a83c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b02      	cmp	r3, #2
 800a872:	d00d      	beq.n	800a890 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2204      	movs	r2, #4
 800a878:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	73fb      	strb	r3, [r7, #15]
 800a88e:	e047      	b.n	800a920 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 020e 	bic.w	r2, r2, #14
 800a89e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0201 	bic.w	r2, r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c4:	f003 021f 	and.w	r2, r3, #31
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	fa01 f202 	lsl.w	r2, r1, r2
 800a8d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a8dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00c      	beq.n	800a900 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a8fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
    }
  }
  return status;
 800a920:	7bfb      	ldrb	r3, [r7, #15]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a946:	f003 031f 	and.w	r3, r3, #31
 800a94a:	2204      	movs	r2, #4
 800a94c:	409a      	lsls	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4013      	ands	r3, r2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d026      	beq.n	800a9a4 <HAL_DMA_IRQHandler+0x7a>
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d021      	beq.n	800a9a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0320 	and.w	r3, r3, #32
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d107      	bne.n	800a97e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0204 	bic.w	r2, r2, #4
 800a97c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a982:	f003 021f 	and.w	r2, r3, #31
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98a:	2104      	movs	r1, #4
 800a98c:	fa01 f202 	lsl.w	r2, r1, r2
 800a990:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a996:	2b00      	cmp	r3, #0
 800a998:	d071      	beq.n	800aa7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a9a2:	e06c      	b.n	800aa7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9a8:	f003 031f 	and.w	r3, r3, #31
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	409a      	lsls	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d02e      	beq.n	800aa16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d029      	beq.n	800aa16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 020a 	bic.w	r2, r2, #10
 800a9de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ec:	f003 021f 	and.w	r2, r3, #31
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f4:	2102      	movs	r1, #2
 800a9f6:	fa01 f202 	lsl.w	r2, r1, r2
 800a9fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d038      	beq.n	800aa7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800aa14:	e033      	b.n	800aa7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa1a:	f003 031f 	and.w	r3, r3, #31
 800aa1e:	2208      	movs	r2, #8
 800aa20:	409a      	lsls	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4013      	ands	r3, r2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d02a      	beq.n	800aa80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f003 0308 	and.w	r3, r3, #8
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d025      	beq.n	800aa80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 020e 	bic.w	r2, r2, #14
 800aa42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa48:	f003 021f 	and.w	r2, r3, #31
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	2101      	movs	r1, #1
 800aa52:	fa01 f202 	lsl.w	r2, r1, r2
 800aa56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
}
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aa9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aab0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab6:	f003 021f 	and.w	r2, r3, #31
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabe:	2101      	movs	r1, #1
 800aac0:	fa01 f202 	lsl.w	r2, r1, r2
 800aac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d108      	bne.n	800aae8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aae6:	e007      	b.n	800aaf8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	60da      	str	r2, [r3, #12]
}
 800aaf8:	bf00      	nop
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	4b16      	ldr	r3, [pc, #88]	@ (800ab6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d802      	bhi.n	800ab1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ab18:	4b15      	ldr	r3, [pc, #84]	@ (800ab70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ab1a:	617b      	str	r3, [r7, #20]
 800ab1c:	e001      	b.n	800ab22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ab1e:	4b15      	ldr	r3, [pc, #84]	@ (800ab74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ab20:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	3b08      	subs	r3, #8
 800ab2e:	4a12      	ldr	r2, [pc, #72]	@ (800ab78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ab30:	fba2 2303 	umull	r2, r3, r2, r3
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	009a      	lsls	r2, r3, #2
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	4413      	add	r3, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ab4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	2201      	movs	r2, #1
 800ab58:	409a      	lsls	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40020407 	.word	0x40020407
 800ab70:	40020800 	.word	0x40020800
 800ab74:	40020820 	.word	0x40020820
 800ab78:	cccccccd 	.word	0xcccccccd
 800ab7c:	40020880 	.word	0x40020880

0800ab80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4b0b      	ldr	r3, [pc, #44]	@ (800abc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	461a      	mov	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a08      	ldr	r2, [pc, #32]	@ (800abc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aba2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	f003 031f 	and.w	r3, r3, #31
 800abac:	2201      	movs	r2, #1
 800abae:	409a      	lsls	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	1000823f 	.word	0x1000823f
 800abc4:	40020940 	.word	0x40020940

0800abc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800abd6:	e15a      	b.n	800ae8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	2101      	movs	r1, #1
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	fa01 f303 	lsl.w	r3, r1, r3
 800abe4:	4013      	ands	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 814c 	beq.w	800ae88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f003 0303 	and.w	r3, r3, #3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d005      	beq.n	800ac08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d130      	bne.n	800ac6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	2203      	movs	r2, #3
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac3e:	2201      	movs	r2, #1
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	fa02 f303 	lsl.w	r3, r2, r3
 800ac46:	43db      	mvns	r3, r3
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	091b      	lsrs	r3, r3, #4
 800ac54:	f003 0201 	and.w	r2, r3, #1
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f003 0303 	and.w	r3, r3, #3
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d017      	beq.n	800aca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	2203      	movs	r2, #3
 800ac82:	fa02 f303 	lsl.w	r3, r2, r3
 800ac86:	43db      	mvns	r3, r3
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	689a      	ldr	r2, [r3, #8]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f003 0303 	and.w	r3, r3, #3
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d123      	bne.n	800acfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	08da      	lsrs	r2, r3, #3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3208      	adds	r2, #8
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	220f      	movs	r2, #15
 800acca:	fa02 f303 	lsl.w	r3, r2, r3
 800acce:	43db      	mvns	r3, r3
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4013      	ands	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	691a      	ldr	r2, [r3, #16]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	08da      	lsrs	r2, r3, #3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3208      	adds	r2, #8
 800acf4:	6939      	ldr	r1, [r7, #16]
 800acf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	2203      	movs	r2, #3
 800ad06:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0a:	43db      	mvns	r3, r3
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f003 0203 	and.w	r2, r3, #3
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 80a6 	beq.w	800ae88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad3c:	4b5b      	ldr	r3, [pc, #364]	@ (800aeac <HAL_GPIO_Init+0x2e4>)
 800ad3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad40:	4a5a      	ldr	r2, [pc, #360]	@ (800aeac <HAL_GPIO_Init+0x2e4>)
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	6613      	str	r3, [r2, #96]	@ 0x60
 800ad48:	4b58      	ldr	r3, [pc, #352]	@ (800aeac <HAL_GPIO_Init+0x2e4>)
 800ad4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	60bb      	str	r3, [r7, #8]
 800ad52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad54:	4a56      	ldr	r2, [pc, #344]	@ (800aeb0 <HAL_GPIO_Init+0x2e8>)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	089b      	lsrs	r3, r3, #2
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f003 0303 	and.w	r3, r3, #3
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	220f      	movs	r2, #15
 800ad6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad70:	43db      	mvns	r3, r3
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	4013      	ands	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ad7e:	d01f      	beq.n	800adc0 <HAL_GPIO_Init+0x1f8>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a4c      	ldr	r2, [pc, #304]	@ (800aeb4 <HAL_GPIO_Init+0x2ec>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d019      	beq.n	800adbc <HAL_GPIO_Init+0x1f4>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a4b      	ldr	r2, [pc, #300]	@ (800aeb8 <HAL_GPIO_Init+0x2f0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d013      	beq.n	800adb8 <HAL_GPIO_Init+0x1f0>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a4a      	ldr	r2, [pc, #296]	@ (800aebc <HAL_GPIO_Init+0x2f4>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00d      	beq.n	800adb4 <HAL_GPIO_Init+0x1ec>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a49      	ldr	r2, [pc, #292]	@ (800aec0 <HAL_GPIO_Init+0x2f8>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d007      	beq.n	800adb0 <HAL_GPIO_Init+0x1e8>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a48      	ldr	r2, [pc, #288]	@ (800aec4 <HAL_GPIO_Init+0x2fc>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d101      	bne.n	800adac <HAL_GPIO_Init+0x1e4>
 800ada8:	2305      	movs	r3, #5
 800adaa:	e00a      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adac:	2306      	movs	r3, #6
 800adae:	e008      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adb0:	2304      	movs	r3, #4
 800adb2:	e006      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adb4:	2303      	movs	r3, #3
 800adb6:	e004      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adb8:	2302      	movs	r3, #2
 800adba:	e002      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <HAL_GPIO_Init+0x1fa>
 800adc0:	2300      	movs	r3, #0
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	f002 0203 	and.w	r2, r2, #3
 800adc8:	0092      	lsls	r2, r2, #2
 800adca:	4093      	lsls	r3, r2
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800add2:	4937      	ldr	r1, [pc, #220]	@ (800aeb0 <HAL_GPIO_Init+0x2e8>)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	089b      	lsrs	r3, r3, #2
 800add8:	3302      	adds	r3, #2
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ade0:	4b39      	ldr	r3, [pc, #228]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	43db      	mvns	r3, r3
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4013      	ands	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ae04:	4a30      	ldr	r2, [pc, #192]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	43db      	mvns	r3, r3
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4013      	ands	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ae2e:	4a26      	ldr	r2, [pc, #152]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800ae34:	4b24      	ldr	r3, [pc, #144]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	43db      	mvns	r3, r3
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4013      	ands	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ae58:	4a1b      	ldr	r2, [pc, #108]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ae5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	43db      	mvns	r3, r3
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ae82:	4a11      	ldr	r2, [pc, #68]	@ (800aec8 <HAL_GPIO_Init+0x300>)
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	fa22 f303 	lsr.w	r3, r2, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f ae9d 	bne.w	800abd8 <HAL_GPIO_Init+0x10>
  }
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	40021000 	.word	0x40021000
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	48000400 	.word	0x48000400
 800aeb8:	48000800 	.word	0x48000800
 800aebc:	48000c00 	.word	0x48000c00
 800aec0:	48001000 	.word	0x48001000
 800aec4:	48001400 	.word	0x48001400
 800aec8:	40010400 	.word	0x40010400

0800aecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	887b      	ldrh	r3, [r7, #2]
 800aede:	4013      	ands	r3, r2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aee4:	2301      	movs	r3, #1
 800aee6:	73fb      	strb	r3, [r7, #15]
 800aee8:	e001      	b.n	800aeee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	807b      	strh	r3, [r7, #2]
 800af08:	4613      	mov	r3, r2
 800af0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800af0c:	787b      	ldrb	r3, [r7, #1]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800af12:	887a      	ldrh	r2, [r7, #2]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800af18:	e002      	b.n	800af20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800af1a:	887a      	ldrh	r2, [r7, #2]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af3e:	887a      	ldrh	r2, [r7, #2]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4013      	ands	r3, r2
 800af44:	041a      	lsls	r2, r3, #16
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	43d9      	mvns	r1, r3
 800af4a:	887b      	ldrh	r3, [r7, #2]
 800af4c:	400b      	ands	r3, r1
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	619a      	str	r2, [r3, #24]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800af6a:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	4013      	ands	r3, r2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af76:	4a05      	ldr	r2, [pc, #20]	@ (800af8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af78:	88fb      	ldrh	r3, [r7, #6]
 800af7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fb fe64 	bl	8006c4c <HAL_GPIO_EXTI_Callback>
  }
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	40010400 	.word	0x40010400

0800af90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d141      	bne.n	800b022 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af9e:	4b4b      	ldr	r3, [pc, #300]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afaa:	d131      	bne.n	800b010 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afac:	4b47      	ldr	r3, [pc, #284]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb2:	4a46      	ldr	r2, [pc, #280]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800afbc:	4b43      	ldr	r3, [pc, #268]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800afc4:	4a41      	ldr	r2, [pc, #260]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800afca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800afcc:	4b40      	ldr	r3, [pc, #256]	@ (800b0d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2232      	movs	r2, #50	@ 0x32
 800afd2:	fb02 f303 	mul.w	r3, r2, r3
 800afd6:	4a3f      	ldr	r2, [pc, #252]	@ (800b0d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800afd8:	fba2 2303 	umull	r2, r3, r2, r3
 800afdc:	0c9b      	lsrs	r3, r3, #18
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800afe2:	e002      	b.n	800afea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800afea:	4b38      	ldr	r3, [pc, #224]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aff6:	d102      	bne.n	800affe <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f2      	bne.n	800afe4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800affe:	4b33      	ldr	r3, [pc, #204]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b00a:	d158      	bne.n	800b0be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e057      	b.n	800b0c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b010:	4b2e      	ldr	r3, [pc, #184]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b016:	4a2d      	ldr	r2, [pc, #180]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b01c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b020:	e04d      	b.n	800b0be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b028:	d141      	bne.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b02a:	4b28      	ldr	r3, [pc, #160]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b036:	d131      	bne.n	800b09c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b038:	4b24      	ldr	r3, [pc, #144]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b03e:	4a23      	ldr	r2, [pc, #140]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b048:	4b20      	ldr	r3, [pc, #128]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b050:	4a1e      	ldr	r2, [pc, #120]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b058:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2232      	movs	r2, #50	@ 0x32
 800b05e:	fb02 f303 	mul.w	r3, r2, r3
 800b062:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b064:	fba2 2303 	umull	r2, r3, r2, r3
 800b068:	0c9b      	lsrs	r3, r3, #18
 800b06a:	3301      	adds	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b06e:	e002      	b.n	800b076 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b076:	4b15      	ldr	r3, [pc, #84]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b07e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b082:	d102      	bne.n	800b08a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f2      	bne.n	800b070 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b08a:	4b10      	ldr	r3, [pc, #64]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b096:	d112      	bne.n	800b0be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e011      	b.n	800b0c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b09c:	4b0b      	ldr	r3, [pc, #44]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b0ac:	e007      	b.n	800b0be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b0ae:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b0b6:	4a05      	ldr	r2, [pc, #20]	@ (800b0cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b0bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	40007000 	.word	0x40007000
 800b0d0:	20000134 	.word	0x20000134
 800b0d4:	431bde83 	.word	0x431bde83

0800b0d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b0dc:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	4a04      	ldr	r2, [pc, #16]	@ (800b0f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b0e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b0e6:	6093      	str	r3, [r2, #8]
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40007000 	.word	0x40007000

0800b0f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e2fe      	b.n	800b708 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b00      	cmp	r3, #0
 800b114:	d075      	beq.n	800b202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b116:	4b97      	ldr	r3, [pc, #604]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 030c 	and.w	r3, r3, #12
 800b11e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b120:	4b94      	ldr	r3, [pc, #592]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b0c      	cmp	r3, #12
 800b12e:	d102      	bne.n	800b136 <HAL_RCC_OscConfig+0x3e>
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b03      	cmp	r3, #3
 800b134:	d002      	beq.n	800b13c <HAL_RCC_OscConfig+0x44>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b08      	cmp	r3, #8
 800b13a:	d10b      	bne.n	800b154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b13c:	4b8d      	ldr	r3, [pc, #564]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d05b      	beq.n	800b200 <HAL_RCC_OscConfig+0x108>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d157      	bne.n	800b200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e2d9      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b15c:	d106      	bne.n	800b16c <HAL_RCC_OscConfig+0x74>
 800b15e:	4b85      	ldr	r3, [pc, #532]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a84      	ldr	r2, [pc, #528]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	e01d      	b.n	800b1a8 <HAL_RCC_OscConfig+0xb0>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b174:	d10c      	bne.n	800b190 <HAL_RCC_OscConfig+0x98>
 800b176:	4b7f      	ldr	r3, [pc, #508]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a7e      	ldr	r2, [pc, #504]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b17c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	4b7c      	ldr	r3, [pc, #496]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a7b      	ldr	r2, [pc, #492]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e00b      	b.n	800b1a8 <HAL_RCC_OscConfig+0xb0>
 800b190:	4b78      	ldr	r3, [pc, #480]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a77      	ldr	r2, [pc, #476]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	4b75      	ldr	r3, [pc, #468]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a74      	ldr	r2, [pc, #464]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b1a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b1a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d013      	beq.n	800b1d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b0:	f7fd fc44 	bl	8008a3c <HAL_GetTick>
 800b1b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1b6:	e008      	b.n	800b1ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1b8:	f7fd fc40 	bl	8008a3c <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b64      	cmp	r3, #100	@ 0x64
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e29e      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1ca:	4b6a      	ldr	r3, [pc, #424]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0f0      	beq.n	800b1b8 <HAL_RCC_OscConfig+0xc0>
 800b1d6:	e014      	b.n	800b202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d8:	f7fd fc30 	bl	8008a3c <HAL_GetTick>
 800b1dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b1de:	e008      	b.n	800b1f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1e0:	f7fd fc2c 	bl	8008a3c <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b64      	cmp	r3, #100	@ 0x64
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e28a      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b1f2:	4b60      	ldr	r3, [pc, #384]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1f0      	bne.n	800b1e0 <HAL_RCC_OscConfig+0xe8>
 800b1fe:	e000      	b.n	800b202 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d075      	beq.n	800b2fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b20e:	4b59      	ldr	r3, [pc, #356]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 030c 	and.w	r3, r3, #12
 800b216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b218:	4b56      	ldr	r3, [pc, #344]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f003 0303 	and.w	r3, r3, #3
 800b220:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b0c      	cmp	r3, #12
 800b226:	d102      	bne.n	800b22e <HAL_RCC_OscConfig+0x136>
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d002      	beq.n	800b234 <HAL_RCC_OscConfig+0x13c>
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	2b04      	cmp	r3, #4
 800b232:	d11f      	bne.n	800b274 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b234:	4b4f      	ldr	r3, [pc, #316]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <HAL_RCC_OscConfig+0x154>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e25d      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b24c:	4b49      	ldr	r3, [pc, #292]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	061b      	lsls	r3, r3, #24
 800b25a:	4946      	ldr	r1, [pc, #280]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b260:	4b45      	ldr	r3, [pc, #276]	@ (800b378 <HAL_RCC_OscConfig+0x280>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd fb9d 	bl	80089a4 <HAL_InitTick>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d043      	beq.n	800b2f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e249      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d023      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b27c:	4b3d      	ldr	r3, [pc, #244]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a3c      	ldr	r2, [pc, #240]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b288:	f7fd fbd8 	bl	8008a3c <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b290:	f7fd fbd4 	bl	8008a3c <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e232      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2a2:	4b34      	ldr	r3, [pc, #208]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0f0      	beq.n	800b290 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2ae:	4b31      	ldr	r3, [pc, #196]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	061b      	lsls	r3, r3, #24
 800b2bc:	492d      	ldr	r1, [pc, #180]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	604b      	str	r3, [r1, #4]
 800b2c2:	e01a      	b.n	800b2fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a2a      	ldr	r2, [pc, #168]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d0:	f7fd fbb4 	bl	8008a3c <HAL_GetTick>
 800b2d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2d6:	e008      	b.n	800b2ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2d8:	f7fd fbb0 	bl	8008a3c <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d901      	bls.n	800b2ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e20e      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2ea:	4b22      	ldr	r3, [pc, #136]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f0      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x1e0>
 800b2f6:	e000      	b.n	800b2fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0308 	and.w	r3, r3, #8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d041      	beq.n	800b38a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01c      	beq.n	800b348 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b30e:	4b19      	ldr	r3, [pc, #100]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b314:	4a17      	ldr	r2, [pc, #92]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b316:	f043 0301 	orr.w	r3, r3, #1
 800b31a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b31e:	f7fd fb8d 	bl	8008a3c <HAL_GetTick>
 800b322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b324:	e008      	b.n	800b338 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b326:	f7fd fb89 	bl	8008a3c <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e1e7      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b338:	4b0e      	ldr	r3, [pc, #56]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b33a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0ef      	beq.n	800b326 <HAL_RCC_OscConfig+0x22e>
 800b346:	e020      	b.n	800b38a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b34a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b34e:	4a09      	ldr	r2, [pc, #36]	@ (800b374 <HAL_RCC_OscConfig+0x27c>)
 800b350:	f023 0301 	bic.w	r3, r3, #1
 800b354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b358:	f7fd fb70 	bl	8008a3c <HAL_GetTick>
 800b35c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b35e:	e00d      	b.n	800b37c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b360:	f7fd fb6c 	bl	8008a3c <HAL_GetTick>
 800b364:	4602      	mov	r2, r0
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d906      	bls.n	800b37c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e1ca      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
 800b372:	bf00      	nop
 800b374:	40021000 	.word	0x40021000
 800b378:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b37c:	4b8c      	ldr	r3, [pc, #560]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b37e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1ea      	bne.n	800b360 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 80a6 	beq.w	800b4e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b398:	2300      	movs	r3, #0
 800b39a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b39c:	4b84      	ldr	r3, [pc, #528]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b39e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d101      	bne.n	800b3ac <HAL_RCC_OscConfig+0x2b4>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <HAL_RCC_OscConfig+0x2b6>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00d      	beq.n	800b3ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3b2:	4b7f      	ldr	r3, [pc, #508]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3b6:	4a7e      	ldr	r2, [pc, #504]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b3b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3be:	4b7c      	ldr	r3, [pc, #496]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3ce:	4b79      	ldr	r3, [pc, #484]	@ (800b5b4 <HAL_RCC_OscConfig+0x4bc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d118      	bne.n	800b40c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3da:	4b76      	ldr	r3, [pc, #472]	@ (800b5b4 <HAL_RCC_OscConfig+0x4bc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a75      	ldr	r2, [pc, #468]	@ (800b5b4 <HAL_RCC_OscConfig+0x4bc>)
 800b3e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3e6:	f7fd fb29 	bl	8008a3c <HAL_GetTick>
 800b3ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3ec:	e008      	b.n	800b400 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ee:	f7fd fb25 	bl	8008a3c <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d901      	bls.n	800b400 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e183      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b400:	4b6c      	ldr	r3, [pc, #432]	@ (800b5b4 <HAL_RCC_OscConfig+0x4bc>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f0      	beq.n	800b3ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d108      	bne.n	800b426 <HAL_RCC_OscConfig+0x32e>
 800b414:	4b66      	ldr	r3, [pc, #408]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b41a:	4a65      	ldr	r2, [pc, #404]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b41c:	f043 0301 	orr.w	r3, r3, #1
 800b420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b424:	e024      	b.n	800b470 <HAL_RCC_OscConfig+0x378>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	d110      	bne.n	800b450 <HAL_RCC_OscConfig+0x358>
 800b42e:	4b60      	ldr	r3, [pc, #384]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b434:	4a5e      	ldr	r2, [pc, #376]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b436:	f043 0304 	orr.w	r3, r3, #4
 800b43a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b43e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b444:	4a5a      	ldr	r2, [pc, #360]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b44e:	e00f      	b.n	800b470 <HAL_RCC_OscConfig+0x378>
 800b450:	4b57      	ldr	r3, [pc, #348]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b456:	4a56      	ldr	r2, [pc, #344]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b458:	f023 0301 	bic.w	r3, r3, #1
 800b45c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b460:	4b53      	ldr	r3, [pc, #332]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b466:	4a52      	ldr	r2, [pc, #328]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d016      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b478:	f7fd fae0 	bl	8008a3c <HAL_GetTick>
 800b47c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b47e:	e00a      	b.n	800b496 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b480:	f7fd fadc 	bl	8008a3c <HAL_GetTick>
 800b484:	4602      	mov	r2, r0
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b48e:	4293      	cmp	r3, r2
 800b490:	d901      	bls.n	800b496 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b492:	2303      	movs	r3, #3
 800b494:	e138      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b496:	4b46      	ldr	r3, [pc, #280]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d0ed      	beq.n	800b480 <HAL_RCC_OscConfig+0x388>
 800b4a4:	e015      	b.n	800b4d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4a6:	f7fd fac9 	bl	8008a3c <HAL_GetTick>
 800b4aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4ac:	e00a      	b.n	800b4c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ae:	f7fd fac5 	bl	8008a3c <HAL_GetTick>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d901      	bls.n	800b4c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e121      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1ed      	bne.n	800b4ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d105      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4d8:	4b35      	ldr	r3, [pc, #212]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b4da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4dc:	4a34      	ldr	r2, [pc, #208]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b4de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0320 	and.w	r3, r3, #32
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d03c      	beq.n	800b56a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d01c      	beq.n	800b532 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b4f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b4fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4fe:	4a2c      	ldr	r2, [pc, #176]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b500:	f043 0301 	orr.w	r3, r3, #1
 800b504:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b508:	f7fd fa98 	bl	8008a3c <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b510:	f7fd fa94 	bl	8008a3c <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e0f2      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b522:	4b23      	ldr	r3, [pc, #140]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b528:	f003 0302 	and.w	r3, r3, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d0ef      	beq.n	800b510 <HAL_RCC_OscConfig+0x418>
 800b530:	e01b      	b.n	800b56a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b532:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b538:	4a1d      	ldr	r2, [pc, #116]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b542:	f7fd fa7b 	bl	8008a3c <HAL_GetTick>
 800b546:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b548:	e008      	b.n	800b55c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b54a:	f7fd fa77 	bl	8008a3c <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b02      	cmp	r3, #2
 800b556:	d901      	bls.n	800b55c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e0d5      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b55c:	4b14      	ldr	r3, [pc, #80]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b55e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1ef      	bne.n	800b54a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 80c9 	beq.w	800b706 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b574:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f003 030c 	and.w	r3, r3, #12
 800b57c:	2b0c      	cmp	r3, #12
 800b57e:	f000 8083 	beq.w	800b688 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d15e      	bne.n	800b648 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b58a:	4b09      	ldr	r3, [pc, #36]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a08      	ldr	r2, [pc, #32]	@ (800b5b0 <HAL_RCC_OscConfig+0x4b8>)
 800b590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b596:	f7fd fa51 	bl	8008a3c <HAL_GetTick>
 800b59a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b59c:	e00c      	b.n	800b5b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b59e:	f7fd fa4d 	bl	8008a3c <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d905      	bls.n	800b5b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e0ab      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
 800b5b0:	40021000 	.word	0x40021000
 800b5b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5b8:	4b55      	ldr	r3, [pc, #340]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1ec      	bne.n	800b59e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b5c4:	4b52      	ldr	r3, [pc, #328]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	4b52      	ldr	r3, [pc, #328]	@ (800b714 <HAL_RCC_OscConfig+0x61c>)
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6a11      	ldr	r1, [r2, #32]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b5d4:	3a01      	subs	r2, #1
 800b5d6:	0112      	lsls	r2, r2, #4
 800b5d8:	4311      	orrs	r1, r2
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b5de:	0212      	lsls	r2, r2, #8
 800b5e0:	4311      	orrs	r1, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b5e6:	0852      	lsrs	r2, r2, #1
 800b5e8:	3a01      	subs	r2, #1
 800b5ea:	0552      	lsls	r2, r2, #21
 800b5ec:	4311      	orrs	r1, r2
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b5f2:	0852      	lsrs	r2, r2, #1
 800b5f4:	3a01      	subs	r2, #1
 800b5f6:	0652      	lsls	r2, r2, #25
 800b5f8:	4311      	orrs	r1, r2
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b5fe:	06d2      	lsls	r2, r2, #27
 800b600:	430a      	orrs	r2, r1
 800b602:	4943      	ldr	r1, [pc, #268]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b604:	4313      	orrs	r3, r2
 800b606:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b608:	4b41      	ldr	r3, [pc, #260]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a40      	ldr	r2, [pc, #256]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b60e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b612:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b614:	4b3e      	ldr	r3, [pc, #248]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	4a3d      	ldr	r2, [pc, #244]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b61a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b61e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b620:	f7fd fa0c 	bl	8008a3c <HAL_GetTick>
 800b624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b626:	e008      	b.n	800b63a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b628:	f7fd fa08 	bl	8008a3c <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d901      	bls.n	800b63a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e066      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b63a:	4b35      	ldr	r3, [pc, #212]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0f0      	beq.n	800b628 <HAL_RCC_OscConfig+0x530>
 800b646:	e05e      	b.n	800b706 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b648:	4b31      	ldr	r3, [pc, #196]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a30      	ldr	r2, [pc, #192]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b64e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b654:	f7fd f9f2 	bl	8008a3c <HAL_GetTick>
 800b658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b65a:	e008      	b.n	800b66e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b65c:	f7fd f9ee 	bl	8008a3c <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b02      	cmp	r3, #2
 800b668:	d901      	bls.n	800b66e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e04c      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b66e:	4b28      	ldr	r3, [pc, #160]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f0      	bne.n	800b65c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b67a:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	4924      	ldr	r1, [pc, #144]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b680:	4b25      	ldr	r3, [pc, #148]	@ (800b718 <HAL_RCC_OscConfig+0x620>)
 800b682:	4013      	ands	r3, r2
 800b684:	60cb      	str	r3, [r1, #12]
 800b686:	e03e      	b.n	800b706 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e039      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b694:	4b1e      	ldr	r3, [pc, #120]	@ (800b710 <HAL_RCC_OscConfig+0x618>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f003 0203 	and.w	r2, r3, #3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a1b      	ldr	r3, [r3, #32]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d12c      	bne.n	800b702 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d123      	bne.n	800b702 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d11b      	bne.n	800b702 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d113      	bne.n	800b702 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d109      	bne.n	800b702 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f8:	085b      	lsrs	r3, r3, #1
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d001      	beq.n	800b706 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	40021000 	.word	0x40021000
 800b714:	019f800c 	.word	0x019f800c
 800b718:	feeefffc 	.word	0xfeeefffc

0800b71c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e11e      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b734:	4b91      	ldr	r3, [pc, #580]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 030f 	and.w	r3, r3, #15
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d910      	bls.n	800b764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b742:	4b8e      	ldr	r3, [pc, #568]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f023 020f 	bic.w	r2, r3, #15
 800b74a:	498c      	ldr	r1, [pc, #560]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4313      	orrs	r3, r2
 800b750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b752:	4b8a      	ldr	r3, [pc, #552]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 030f 	and.w	r3, r3, #15
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d001      	beq.n	800b764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e106      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d073      	beq.n	800b858 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d129      	bne.n	800b7cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b778:	4b81      	ldr	r3, [pc, #516]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e0f4      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b788:	f000 f99e 	bl	800bac8 <RCC_GetSysClockFreqFromPLLSource>
 800b78c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	4a7c      	ldr	r2, [pc, #496]	@ (800b984 <HAL_RCC_ClockConfig+0x268>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d93f      	bls.n	800b816 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b796:	4b7a      	ldr	r3, [pc, #488]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d033      	beq.n	800b816 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d12f      	bne.n	800b816 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b7b6:	4b72      	ldr	r3, [pc, #456]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7be:	4a70      	ldr	r2, [pc, #448]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b7c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b7c6:	2380      	movs	r3, #128	@ 0x80
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	e024      	b.n	800b816 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d107      	bne.n	800b7e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7d4:	4b6a      	ldr	r3, [pc, #424]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d109      	bne.n	800b7f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0c6      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b7e4:	4b66      	ldr	r3, [pc, #408]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e0be      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b7f4:	f000 f8ce 	bl	800b994 <HAL_RCC_GetSysClockFreq>
 800b7f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	4a61      	ldr	r2, [pc, #388]	@ (800b984 <HAL_RCC_ClockConfig+0x268>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d909      	bls.n	800b816 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b802:	4b5f      	ldr	r3, [pc, #380]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b80a:	4a5d      	ldr	r2, [pc, #372]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b80c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b810:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b812:	2380      	movs	r3, #128	@ 0x80
 800b814:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b816:	4b5a      	ldr	r3, [pc, #360]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f023 0203 	bic.w	r2, r3, #3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	4957      	ldr	r1, [pc, #348]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b824:	4313      	orrs	r3, r2
 800b826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b828:	f7fd f908 	bl	8008a3c <HAL_GetTick>
 800b82c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b82e:	e00a      	b.n	800b846 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b830:	f7fd f904 	bl	8008a3c <HAL_GetTick>
 800b834:	4602      	mov	r2, r0
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b83e:	4293      	cmp	r3, r2
 800b840:	d901      	bls.n	800b846 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e095      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b846:	4b4e      	ldr	r3, [pc, #312]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f003 020c 	and.w	r2, r3, #12
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	429a      	cmp	r2, r3
 800b856:	d1eb      	bne.n	800b830 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d023      	beq.n	800b8ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d005      	beq.n	800b87c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b870:	4b43      	ldr	r3, [pc, #268]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	4a42      	ldr	r2, [pc, #264]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b876:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b87a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0308 	and.w	r3, r3, #8
 800b884:	2b00      	cmp	r3, #0
 800b886:	d007      	beq.n	800b898 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b888:	4b3d      	ldr	r3, [pc, #244]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b890:	4a3b      	ldr	r2, [pc, #236]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b892:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b898:	4b39      	ldr	r3, [pc, #228]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	4936      	ldr	r1, [pc, #216]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	608b      	str	r3, [r1, #8]
 800b8aa:	e008      	b.n	800b8be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2b80      	cmp	r3, #128	@ 0x80
 800b8b0:	d105      	bne.n	800b8be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b8b2:	4b33      	ldr	r3, [pc, #204]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	4a32      	ldr	r2, [pc, #200]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b8b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8be:	4b2f      	ldr	r3, [pc, #188]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d21d      	bcs.n	800b908 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f023 020f 	bic.w	r2, r3, #15
 800b8d4:	4929      	ldr	r1, [pc, #164]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b8dc:	f7fd f8ae 	bl	8008a3c <HAL_GetTick>
 800b8e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8e2:	e00a      	b.n	800b8fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8e4:	f7fd f8aa 	bl	8008a3c <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e03b      	b.n	800b972 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8fa:	4b20      	ldr	r3, [pc, #128]	@ (800b97c <HAL_RCC_ClockConfig+0x260>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 030f 	and.w	r3, r3, #15
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d1ed      	bne.n	800b8e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d008      	beq.n	800b926 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b914:	4b1a      	ldr	r3, [pc, #104]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	4917      	ldr	r1, [pc, #92]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b922:	4313      	orrs	r3, r2
 800b924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0308 	and.w	r3, r3, #8
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b932:	4b13      	ldr	r3, [pc, #76]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	490f      	ldr	r1, [pc, #60]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b942:	4313      	orrs	r3, r2
 800b944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b946:	f000 f825 	bl	800b994 <HAL_RCC_GetSysClockFreq>
 800b94a:	4602      	mov	r2, r0
 800b94c:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <HAL_RCC_ClockConfig+0x264>)
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	091b      	lsrs	r3, r3, #4
 800b952:	f003 030f 	and.w	r3, r3, #15
 800b956:	490c      	ldr	r1, [pc, #48]	@ (800b988 <HAL_RCC_ClockConfig+0x26c>)
 800b958:	5ccb      	ldrb	r3, [r1, r3]
 800b95a:	f003 031f 	and.w	r3, r3, #31
 800b95e:	fa22 f303 	lsr.w	r3, r2, r3
 800b962:	4a0a      	ldr	r2, [pc, #40]	@ (800b98c <HAL_RCC_ClockConfig+0x270>)
 800b964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b966:	4b0a      	ldr	r3, [pc, #40]	@ (800b990 <HAL_RCC_ClockConfig+0x274>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fd f81a 	bl	80089a4 <HAL_InitTick>
 800b970:	4603      	mov	r3, r0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	40022000 	.word	0x40022000
 800b980:	40021000 	.word	0x40021000
 800b984:	04c4b400 	.word	0x04c4b400
 800b988:	080128b8 	.word	0x080128b8
 800b98c:	20000134 	.word	0x20000134
 800b990:	20000138 	.word	0x20000138

0800b994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b99a:	4b2c      	ldr	r3, [pc, #176]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f003 030c 	and.w	r3, r3, #12
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	d102      	bne.n	800b9ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800ba50 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b9a8:	613b      	str	r3, [r7, #16]
 800b9aa:	e047      	b.n	800ba3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f003 030c 	and.w	r3, r3, #12
 800b9b4:	2b08      	cmp	r3, #8
 800b9b6:	d102      	bne.n	800b9be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b9b8:	4b26      	ldr	r3, [pc, #152]	@ (800ba54 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b9ba:	613b      	str	r3, [r7, #16]
 800b9bc:	e03e      	b.n	800ba3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b9be:	4b23      	ldr	r3, [pc, #140]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f003 030c 	and.w	r3, r3, #12
 800b9c6:	2b0c      	cmp	r3, #12
 800b9c8:	d136      	bne.n	800ba38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b9ca:	4b20      	ldr	r3, [pc, #128]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	091b      	lsrs	r3, r3, #4
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	3301      	adds	r3, #1
 800b9e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	d10c      	bne.n	800ba02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800ba54 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f0:	4a16      	ldr	r2, [pc, #88]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9f2:	68d2      	ldr	r2, [r2, #12]
 800b9f4:	0a12      	lsrs	r2, r2, #8
 800b9f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
 800b9fe:	617b      	str	r3, [r7, #20]
      break;
 800ba00:	e00c      	b.n	800ba1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba02:	4a13      	ldr	r2, [pc, #76]	@ (800ba50 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0a:	4a10      	ldr	r2, [pc, #64]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba0c:	68d2      	ldr	r2, [r2, #12]
 800ba0e:	0a12      	lsrs	r2, r2, #8
 800ba10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba14:	fb02 f303 	mul.w	r3, r2, r3
 800ba18:	617b      	str	r3, [r7, #20]
      break;
 800ba1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	0e5b      	lsrs	r3, r3, #25
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	3301      	adds	r3, #1
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba34:	613b      	str	r3, [r7, #16]
 800ba36:	e001      	b.n	800ba3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ba3c:	693b      	ldr	r3, [r7, #16]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	40021000 	.word	0x40021000
 800ba50:	00f42400 	.word	0x00f42400
 800ba54:	016e3600 	.word	0x016e3600

0800ba58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba5c:	4b03      	ldr	r3, [pc, #12]	@ (800ba6c <HAL_RCC_GetHCLKFreq+0x14>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000134 	.word	0x20000134

0800ba70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ba74:	f7ff fff0 	bl	800ba58 <HAL_RCC_GetHCLKFreq>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	4b06      	ldr	r3, [pc, #24]	@ (800ba94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	0a1b      	lsrs	r3, r3, #8
 800ba80:	f003 0307 	and.w	r3, r3, #7
 800ba84:	4904      	ldr	r1, [pc, #16]	@ (800ba98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba86:	5ccb      	ldrb	r3, [r1, r3]
 800ba88:	f003 031f 	and.w	r3, r3, #31
 800ba8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	40021000 	.word	0x40021000
 800ba98:	080128c8 	.word	0x080128c8

0800ba9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800baa0:	f7ff ffda 	bl	800ba58 <HAL_RCC_GetHCLKFreq>
 800baa4:	4602      	mov	r2, r0
 800baa6:	4b06      	ldr	r3, [pc, #24]	@ (800bac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	0adb      	lsrs	r3, r3, #11
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	4904      	ldr	r1, [pc, #16]	@ (800bac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bab2:	5ccb      	ldrb	r3, [r1, r3]
 800bab4:	f003 031f 	and.w	r3, r3, #31
 800bab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800babc:	4618      	mov	r0, r3
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	40021000 	.word	0x40021000
 800bac4:	080128c8 	.word	0x080128c8

0800bac8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bace:	4b1e      	ldr	r3, [pc, #120]	@ (800bb48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bad8:	4b1b      	ldr	r3, [pc, #108]	@ (800bb48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	091b      	lsrs	r3, r3, #4
 800bade:	f003 030f 	and.w	r3, r3, #15
 800bae2:	3301      	adds	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d10c      	bne.n	800bb06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800baec:	4a17      	ldr	r2, [pc, #92]	@ (800bb4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baf4:	4a14      	ldr	r2, [pc, #80]	@ (800bb48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800baf6:	68d2      	ldr	r2, [r2, #12]
 800baf8:	0a12      	lsrs	r2, r2, #8
 800bafa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
 800bb02:	617b      	str	r3, [r7, #20]
    break;
 800bb04:	e00c      	b.n	800bb20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb06:	4a12      	ldr	r2, [pc, #72]	@ (800bb50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	4a0e      	ldr	r2, [pc, #56]	@ (800bb48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb10:	68d2      	ldr	r2, [r2, #12]
 800bb12:	0a12      	lsrs	r2, r2, #8
 800bb14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
 800bb1c:	617b      	str	r3, [r7, #20]
    break;
 800bb1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb20:	4b09      	ldr	r3, [pc, #36]	@ (800bb48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	0e5b      	lsrs	r3, r3, #25
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bb3a:	687b      	ldr	r3, [r7, #4]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	371c      	adds	r7, #28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	40021000 	.word	0x40021000
 800bb4c:	016e3600 	.word	0x016e3600
 800bb50:	00f42400 	.word	0x00f42400

0800bb54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb60:	2300      	movs	r3, #0
 800bb62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 8098 	beq.w	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb72:	2300      	movs	r3, #0
 800bb74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bb76:	4b43      	ldr	r3, [pc, #268]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10d      	bne.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb82:	4b40      	ldr	r3, [pc, #256]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb86:	4a3f      	ldr	r2, [pc, #252]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb8c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb8e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb96:	60bb      	str	r3, [r7, #8]
 800bb98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb9e:	4b3a      	ldr	r3, [pc, #232]	@ (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a39      	ldr	r2, [pc, #228]	@ (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbaa:	f7fc ff47 	bl	8008a3c <HAL_GetTick>
 800bbae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbb0:	e009      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbb2:	f7fc ff43 	bl	8008a3c <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d902      	bls.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	74fb      	strb	r3, [r7, #19]
        break;
 800bbc4:	e005      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbc6:	4b30      	ldr	r3, [pc, #192]	@ (800bc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0ef      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bbd2:	7cfb      	ldrb	r3, [r7, #19]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d159      	bne.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bbd8:	4b2a      	ldr	r3, [pc, #168]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbe2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d01e      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d019      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bbf4:	4b23      	ldr	r3, [pc, #140]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc00:	4b20      	ldr	r3, [pc, #128]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc06:	4a1f      	ldr	r2, [pc, #124]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc10:	4b1c      	ldr	r3, [pc, #112]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc16:	4a1b      	ldr	r2, [pc, #108]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc20:	4a18      	ldr	r2, [pc, #96]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d016      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc32:	f7fc ff03 	bl	8008a3c <HAL_GetTick>
 800bc36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc38:	e00b      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc3a:	f7fc feff 	bl	8008a3c <HAL_GetTick>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d902      	bls.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	74fb      	strb	r3, [r7, #19]
            break;
 800bc50:	e006      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc52:	4b0c      	ldr	r3, [pc, #48]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc58:	f003 0302 	and.w	r3, r3, #2
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0ec      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bc60:	7cfb      	ldrb	r3, [r7, #19]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10b      	bne.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc66:	4b07      	ldr	r3, [pc, #28]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc74:	4903      	ldr	r1, [pc, #12]	@ (800bc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bc7c:	e008      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc7e:	7cfb      	ldrb	r3, [r7, #19]
 800bc80:	74bb      	strb	r3, [r7, #18]
 800bc82:	e005      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bc84:	40021000 	.word	0x40021000
 800bc88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8c:	7cfb      	ldrb	r3, [r7, #19]
 800bc8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc90:	7c7b      	ldrb	r3, [r7, #17]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d105      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc96:	4ba7      	ldr	r3, [pc, #668]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc9a:	4aa6      	ldr	r2, [pc, #664]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bca0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00a      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bcae:	4ba1      	ldr	r3, [pc, #644]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb4:	f023 0203 	bic.w	r2, r3, #3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	499d      	ldr	r1, [pc, #628]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00a      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bcd0:	4b98      	ldr	r3, [pc, #608]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcd6:	f023 020c 	bic.w	r2, r3, #12
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	4995      	ldr	r1, [pc, #596]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bce0:	4313      	orrs	r3, r2
 800bce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bcf2:	4b90      	ldr	r3, [pc, #576]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	498c      	ldr	r1, [pc, #560]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0308 	and.w	r3, r3, #8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00a      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd14:	4b87      	ldr	r3, [pc, #540]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	4984      	ldr	r1, [pc, #528]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0310 	and.w	r3, r3, #16
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd36:	4b7f      	ldr	r3, [pc, #508]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	497b      	ldr	r1, [pc, #492]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0320 	and.w	r3, r3, #32
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00a      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd58:	4b76      	ldr	r3, [pc, #472]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	4973      	ldr	r1, [pc, #460]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bd7a:	4b6e      	ldr	r3, [pc, #440]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	496a      	ldr	r1, [pc, #424]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd9c:	4b65      	ldr	r3, [pc, #404]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bda2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	4962      	ldr	r1, [pc, #392]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdac:	4313      	orrs	r3, r2
 800bdae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bdbe:	4b5d      	ldr	r3, [pc, #372]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdcc:	4959      	ldr	r1, [pc, #356]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00a      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bde0:	4b54      	ldr	r3, [pc, #336]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bde2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bde6:	f023 0203 	bic.w	r2, r3, #3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdee:	4951      	ldr	r1, [pc, #324]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00a      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be02:	4b4c      	ldr	r3, [pc, #304]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	4948      	ldr	r1, [pc, #288]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be12:	4313      	orrs	r3, r2
 800be14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be20:	2b00      	cmp	r3, #0
 800be22:	d015      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be24:	4b43      	ldr	r3, [pc, #268]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be32:	4940      	ldr	r1, [pc, #256]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be34:	4313      	orrs	r3, r2
 800be36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be42:	d105      	bne.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be44:	4b3b      	ldr	r3, [pc, #236]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	4a3a      	ldr	r2, [pc, #232]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d015      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be5c:	4b35      	ldr	r3, [pc, #212]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be6a:	4932      	ldr	r1, [pc, #200]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be7a:	d105      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be7c:	4b2d      	ldr	r3, [pc, #180]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	4a2c      	ldr	r2, [pc, #176]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d015      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be94:	4b27      	ldr	r3, [pc, #156]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea2:	4924      	ldr	r1, [pc, #144]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800beb2:	d105      	bne.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800beb4:	4b1f      	ldr	r3, [pc, #124]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	4a1e      	ldr	r2, [pc, #120]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bebe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d015      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800becc:	4b19      	ldr	r3, [pc, #100]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bed2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beda:	4916      	ldr	r1, [pc, #88]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bedc:	4313      	orrs	r3, r2
 800bede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beea:	d105      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800beec:	4b11      	ldr	r3, [pc, #68]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	4a10      	ldr	r2, [pc, #64]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bef6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d019      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf04:	4b0b      	ldr	r3, [pc, #44]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf12:	4908      	ldr	r1, [pc, #32]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf14:	4313      	orrs	r3, r2
 800bf16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf22:	d109      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf24:	4b03      	ldr	r3, [pc, #12]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	4a02      	ldr	r2, [pc, #8]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bf2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf2e:	60d3      	str	r3, [r2, #12]
 800bf30:	e002      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bf32:	bf00      	nop
 800bf34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d015      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bf44:	4b29      	ldr	r3, [pc, #164]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf52:	4926      	ldr	r1, [pc, #152]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf62:	d105      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf64:	4b21      	ldr	r3, [pc, #132]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	4a20      	ldr	r2, [pc, #128]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d015      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bf7c:	4b1b      	ldr	r3, [pc, #108]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf8a:	4918      	ldr	r1, [pc, #96]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf9a:	d105      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf9c:	4b13      	ldr	r3, [pc, #76]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	4a12      	ldr	r2, [pc, #72]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bfa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfa6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d015      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bfb4:	4b0d      	ldr	r3, [pc, #52]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bfb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bfba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfc2:	490a      	ldr	r1, [pc, #40]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfd2:	d105      	bne.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bfd4:	4b05      	ldr	r3, [pc, #20]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	4a04      	ldr	r2, [pc, #16]	@ (800bfec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bfda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bfe0:	7cbb      	ldrb	r3, [r7, #18]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	40021000 	.word	0x40021000

0800bff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	e054      	b.n	800c0ac <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d111      	bne.n	800c032 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 fee2 	bl	800dde0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d102      	bne.n	800c02a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a23      	ldr	r2, [pc, #140]	@ (800c0b4 <HAL_TIM_Base_Init+0xc4>)
 800c028:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2202      	movs	r2, #2
 800c036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3304      	adds	r3, #4
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f001 fa2b 	bl	800d4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	08008265 	.word	0x08008265

0800c0b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d001      	beq.n	800c0d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e04c      	b.n	800c16a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a26      	ldr	r2, [pc, #152]	@ (800c178 <HAL_TIM_Base_Start+0xc0>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d022      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ea:	d01d      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a22      	ldr	r2, [pc, #136]	@ (800c17c <HAL_TIM_Base_Start+0xc4>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d018      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a21      	ldr	r2, [pc, #132]	@ (800c180 <HAL_TIM_Base_Start+0xc8>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d013      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a1f      	ldr	r2, [pc, #124]	@ (800c184 <HAL_TIM_Base_Start+0xcc>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d00e      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a1e      	ldr	r2, [pc, #120]	@ (800c188 <HAL_TIM_Base_Start+0xd0>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d009      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a1c      	ldr	r2, [pc, #112]	@ (800c18c <HAL_TIM_Base_Start+0xd4>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d004      	beq.n	800c128 <HAL_TIM_Base_Start+0x70>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a1b      	ldr	r2, [pc, #108]	@ (800c190 <HAL_TIM_Base_Start+0xd8>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d115      	bne.n	800c154 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	4b19      	ldr	r3, [pc, #100]	@ (800c194 <HAL_TIM_Base_Start+0xdc>)
 800c130:	4013      	ands	r3, r2
 800c132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b06      	cmp	r3, #6
 800c138:	d015      	beq.n	800c166 <HAL_TIM_Base_Start+0xae>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c140:	d011      	beq.n	800c166 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f042 0201 	orr.w	r2, r2, #1
 800c150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c152:	e008      	b.n	800c166 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f042 0201 	orr.w	r2, r2, #1
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	e000      	b.n	800c168 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	40012c00 	.word	0x40012c00
 800c17c:	40000400 	.word	0x40000400
 800c180:	40000800 	.word	0x40000800
 800c184:	40000c00 	.word	0x40000c00
 800c188:	40013400 	.word	0x40013400
 800c18c:	40014000 	.word	0x40014000
 800c190:	40015000 	.word	0x40015000
 800c194:	00010007 	.word	0x00010007

0800c198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d001      	beq.n	800c1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e054      	b.n	800c25a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0201 	orr.w	r2, r2, #1
 800c1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a26      	ldr	r2, [pc, #152]	@ (800c268 <HAL_TIM_Base_Start_IT+0xd0>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d022      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1da:	d01d      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a22      	ldr	r2, [pc, #136]	@ (800c26c <HAL_TIM_Base_Start_IT+0xd4>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d018      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a21      	ldr	r2, [pc, #132]	@ (800c270 <HAL_TIM_Base_Start_IT+0xd8>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d013      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	@ (800c274 <HAL_TIM_Base_Start_IT+0xdc>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00e      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c278 <HAL_TIM_Base_Start_IT+0xe0>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d009      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a1c      	ldr	r2, [pc, #112]	@ (800c27c <HAL_TIM_Base_Start_IT+0xe4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d004      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0x80>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a1b      	ldr	r2, [pc, #108]	@ (800c280 <HAL_TIM_Base_Start_IT+0xe8>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d115      	bne.n	800c244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689a      	ldr	r2, [r3, #8]
 800c21e:	4b19      	ldr	r3, [pc, #100]	@ (800c284 <HAL_TIM_Base_Start_IT+0xec>)
 800c220:	4013      	ands	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b06      	cmp	r3, #6
 800c228:	d015      	beq.n	800c256 <HAL_TIM_Base_Start_IT+0xbe>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c230:	d011      	beq.n	800c256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f042 0201 	orr.w	r2, r2, #1
 800c240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c242:	e008      	b.n	800c256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f042 0201 	orr.w	r2, r2, #1
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e000      	b.n	800c258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40012c00 	.word	0x40012c00
 800c26c:	40000400 	.word	0x40000400
 800c270:	40000800 	.word	0x40000800
 800c274:	40000c00 	.word	0x40000c00
 800c278:	40013400 	.word	0x40013400
 800c27c:	40014000 	.word	0x40014000
 800c280:	40015000 	.word	0x40015000
 800c284:	00010007 	.word	0x00010007

0800c288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e054      	b.n	800c344 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d111      	bne.n	800c2ca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 fd96 	bl	800dde0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d102      	bne.n	800c2c2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a23      	ldr	r2, [pc, #140]	@ (800c34c <HAL_TIM_PWM_Init+0xc4>)
 800c2c0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f001 f8df 	bl	800d4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	08008219 	.word	0x08008219

0800c350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d109      	bne.n	800c374 <HAL_TIM_PWM_Start+0x24>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b01      	cmp	r3, #1
 800c36a:	bf14      	ite	ne
 800c36c:	2301      	movne	r3, #1
 800c36e:	2300      	moveq	r3, #0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	e03c      	b.n	800c3ee <HAL_TIM_PWM_Start+0x9e>
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b04      	cmp	r3, #4
 800c378:	d109      	bne.n	800c38e <HAL_TIM_PWM_Start+0x3e>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b01      	cmp	r3, #1
 800c384:	bf14      	ite	ne
 800c386:	2301      	movne	r3, #1
 800c388:	2300      	moveq	r3, #0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	e02f      	b.n	800c3ee <HAL_TIM_PWM_Start+0x9e>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b08      	cmp	r3, #8
 800c392:	d109      	bne.n	800c3a8 <HAL_TIM_PWM_Start+0x58>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	bf14      	ite	ne
 800c3a0:	2301      	movne	r3, #1
 800c3a2:	2300      	moveq	r3, #0
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	e022      	b.n	800c3ee <HAL_TIM_PWM_Start+0x9e>
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	2b0c      	cmp	r3, #12
 800c3ac:	d109      	bne.n	800c3c2 <HAL_TIM_PWM_Start+0x72>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	bf14      	ite	ne
 800c3ba:	2301      	movne	r3, #1
 800c3bc:	2300      	moveq	r3, #0
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	e015      	b.n	800c3ee <HAL_TIM_PWM_Start+0x9e>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b10      	cmp	r3, #16
 800c3c6:	d109      	bne.n	800c3dc <HAL_TIM_PWM_Start+0x8c>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	bf14      	ite	ne
 800c3d4:	2301      	movne	r3, #1
 800c3d6:	2300      	moveq	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	e008      	b.n	800c3ee <HAL_TIM_PWM_Start+0x9e>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	bf14      	ite	ne
 800c3e8:	2301      	movne	r3, #1
 800c3ea:	2300      	moveq	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e0a6      	b.n	800c544 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d104      	bne.n	800c406 <HAL_TIM_PWM_Start+0xb6>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2202      	movs	r2, #2
 800c400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c404:	e023      	b.n	800c44e <HAL_TIM_PWM_Start+0xfe>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d104      	bne.n	800c416 <HAL_TIM_PWM_Start+0xc6>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c414:	e01b      	b.n	800c44e <HAL_TIM_PWM_Start+0xfe>
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d104      	bne.n	800c426 <HAL_TIM_PWM_Start+0xd6>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2202      	movs	r2, #2
 800c420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c424:	e013      	b.n	800c44e <HAL_TIM_PWM_Start+0xfe>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b0c      	cmp	r3, #12
 800c42a:	d104      	bne.n	800c436 <HAL_TIM_PWM_Start+0xe6>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2202      	movs	r2, #2
 800c430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c434:	e00b      	b.n	800c44e <HAL_TIM_PWM_Start+0xfe>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b10      	cmp	r3, #16
 800c43a:	d104      	bne.n	800c446 <HAL_TIM_PWM_Start+0xf6>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2202      	movs	r2, #2
 800c440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c444:	e003      	b.n	800c44e <HAL_TIM_PWM_Start+0xfe>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2202      	movs	r2, #2
 800c44a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2201      	movs	r2, #1
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	f001 fc9c 	bl	800dd94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a3a      	ldr	r2, [pc, #232]	@ (800c54c <HAL_TIM_PWM_Start+0x1fc>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d018      	beq.n	800c498 <HAL_TIM_PWM_Start+0x148>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a39      	ldr	r2, [pc, #228]	@ (800c550 <HAL_TIM_PWM_Start+0x200>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d013      	beq.n	800c498 <HAL_TIM_PWM_Start+0x148>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a37      	ldr	r2, [pc, #220]	@ (800c554 <HAL_TIM_PWM_Start+0x204>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d00e      	beq.n	800c498 <HAL_TIM_PWM_Start+0x148>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a36      	ldr	r2, [pc, #216]	@ (800c558 <HAL_TIM_PWM_Start+0x208>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d009      	beq.n	800c498 <HAL_TIM_PWM_Start+0x148>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a34      	ldr	r2, [pc, #208]	@ (800c55c <HAL_TIM_PWM_Start+0x20c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d004      	beq.n	800c498 <HAL_TIM_PWM_Start+0x148>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a33      	ldr	r2, [pc, #204]	@ (800c560 <HAL_TIM_PWM_Start+0x210>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d101      	bne.n	800c49c <HAL_TIM_PWM_Start+0x14c>
 800c498:	2301      	movs	r3, #1
 800c49a:	e000      	b.n	800c49e <HAL_TIM_PWM_Start+0x14e>
 800c49c:	2300      	movs	r3, #0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a25      	ldr	r2, [pc, #148]	@ (800c54c <HAL_TIM_PWM_Start+0x1fc>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d022      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4c4:	d01d      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a26      	ldr	r2, [pc, #152]	@ (800c564 <HAL_TIM_PWM_Start+0x214>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d018      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a24      	ldr	r2, [pc, #144]	@ (800c568 <HAL_TIM_PWM_Start+0x218>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d013      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a23      	ldr	r2, [pc, #140]	@ (800c56c <HAL_TIM_PWM_Start+0x21c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d00e      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a19      	ldr	r2, [pc, #100]	@ (800c550 <HAL_TIM_PWM_Start+0x200>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d009      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a18      	ldr	r2, [pc, #96]	@ (800c554 <HAL_TIM_PWM_Start+0x204>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d004      	beq.n	800c502 <HAL_TIM_PWM_Start+0x1b2>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a18      	ldr	r2, [pc, #96]	@ (800c560 <HAL_TIM_PWM_Start+0x210>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d115      	bne.n	800c52e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	4b19      	ldr	r3, [pc, #100]	@ (800c570 <HAL_TIM_PWM_Start+0x220>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b06      	cmp	r3, #6
 800c512:	d015      	beq.n	800c540 <HAL_TIM_PWM_Start+0x1f0>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c51a:	d011      	beq.n	800c540 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f042 0201 	orr.w	r2, r2, #1
 800c52a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c52c:	e008      	b.n	800c540 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f042 0201 	orr.w	r2, r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e000      	b.n	800c542 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c540:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	40012c00 	.word	0x40012c00
 800c550:	40013400 	.word	0x40013400
 800c554:	40014000 	.word	0x40014000
 800c558:	40014400 	.word	0x40014400
 800c55c:	40014800 	.word	0x40014800
 800c560:	40015000 	.word	0x40015000
 800c564:	40000400 	.word	0x40000400
 800c568:	40000800 	.word	0x40000800
 800c56c:	40000c00 	.word	0x40000c00
 800c570:	00010007 	.word	0x00010007

0800c574 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e04c      	b.n	800c622 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d111      	bne.n	800c5b8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 fc1f 	bl	800dde0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a1f      	ldr	r2, [pc, #124]	@ (800c62c <HAL_TIM_OnePulse_Init+0xb8>)
 800c5ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f000 ff68 	bl	800d4a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f022 0208 	bic.w	r2, r2, #8
 800c5de:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6819      	ldr	r1, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	0800c631 	.word	0x0800c631

0800c630 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c654:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c65c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c664:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c66c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d108      	bne.n	800c686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d105      	bne.n	800c686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c67a:	7b7b      	ldrb	r3, [r7, #13]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d102      	bne.n	800c686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c680:	7b3b      	ldrb	r3, [r7, #12]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d001      	beq.n	800c68a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e059      	b.n	800c73e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2202      	movs	r2, #2
 800c68e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2202      	movs	r2, #2
 800c69e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68da      	ldr	r2, [r3, #12]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f042 0202 	orr.w	r2, r2, #2
 800c6b8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f042 0204 	orr.w	r2, r2, #4
 800c6c8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fb5e 	bl	800dd94 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	2104      	movs	r1, #4
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f001 fb57 	bl	800dd94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a17      	ldr	r2, [pc, #92]	@ (800c748 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d018      	beq.n	800c722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a15      	ldr	r2, [pc, #84]	@ (800c74c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d013      	beq.n	800c722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a14      	ldr	r2, [pc, #80]	@ (800c750 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d00e      	beq.n	800c722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a12      	ldr	r2, [pc, #72]	@ (800c754 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d009      	beq.n	800c722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a11      	ldr	r2, [pc, #68]	@ (800c758 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d004      	beq.n	800c722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a0f      	ldr	r2, [pc, #60]	@ (800c75c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d101      	bne.n	800c726 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c722:	2301      	movs	r3, #1
 800c724:	e000      	b.n	800c728 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c726:	2300      	movs	r3, #0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d007      	beq.n	800c73c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c73a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	40012c00 	.word	0x40012c00
 800c74c:	40013400 	.word	0x40013400
 800c750:	40014000 	.word	0x40014000
 800c754:	40014400 	.word	0x40014400
 800c758:	40014800 	.word	0x40014800
 800c75c:	40015000 	.word	0x40015000

0800c760 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e0a2      	b.n	800c8ba <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d111      	bne.n	800c7a4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 fb29 	bl	800dde0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a4a      	ldr	r2, [pc, #296]	@ (800c8c4 <HAL_TIM_Encoder_Init+0x164>)
 800c79a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	6812      	ldr	r2, [r2, #0]
 800c7b6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c7ba:	f023 0307 	bic.w	r3, r3, #7
 800c7be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f000 fe68 	bl	800d4a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7f8:	f023 0303 	bic.w	r3, r3, #3
 800c7fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	689a      	ldr	r2, [r3, #8]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	021b      	lsls	r3, r3, #8
 800c808:	4313      	orrs	r3, r2
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c816:	f023 030c 	bic.w	r3, r3, #12
 800c81a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	68da      	ldr	r2, [r3, #12]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	021b      	lsls	r3, r3, #8
 800c832:	4313      	orrs	r3, r2
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	4313      	orrs	r3, r2
 800c838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	011a      	lsls	r2, r3, #4
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	6a1b      	ldr	r3, [r3, #32]
 800c844:	031b      	lsls	r3, r3, #12
 800c846:	4313      	orrs	r3, r2
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c854:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c85c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	4313      	orrs	r3, r2
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	0800830d 	.word	0x0800830d

0800c8c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c8d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c8e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d110      	bne.n	800c91a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d102      	bne.n	800c904 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8fe:	7b7b      	ldrb	r3, [r7, #13]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d001      	beq.n	800c908 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e069      	b.n	800c9dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2202      	movs	r2, #2
 800c914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c918:	e031      	b.n	800c97e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d110      	bne.n	800c942 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d102      	bne.n	800c92c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c926:	7b3b      	ldrb	r3, [r7, #12]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d001      	beq.n	800c930 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c92c:	2301      	movs	r3, #1
 800c92e:	e055      	b.n	800c9dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c940:	e01d      	b.n	800c97e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d108      	bne.n	800c95a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d105      	bne.n	800c95a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c94e:	7b7b      	ldrb	r3, [r7, #13]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d102      	bne.n	800c95a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c954:	7b3b      	ldrb	r3, [r7, #12]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d001      	beq.n	800c95e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e03e      	b.n	800c9dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2202      	movs	r2, #2
 800c962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2202      	movs	r2, #2
 800c96a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2202      	movs	r2, #2
 800c972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <HAL_TIM_Encoder_Start+0xc4>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2b04      	cmp	r3, #4
 800c988:	d008      	beq.n	800c99c <HAL_TIM_Encoder_Start+0xd4>
 800c98a:	e00f      	b.n	800c9ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2201      	movs	r2, #1
 800c992:	2100      	movs	r1, #0
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f9fd 	bl	800dd94 <TIM_CCxChannelCmd>
      break;
 800c99a:	e016      	b.n	800c9ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	2104      	movs	r1, #4
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 f9f5 	bl	800dd94 <TIM_CCxChannelCmd>
      break;
 800c9aa:	e00e      	b.n	800c9ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 f9ed 	bl	800dd94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	2104      	movs	r1, #4
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f001 f9e6 	bl	800dd94 <TIM_CCxChannelCmd>
      break;
 800c9c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0201 	orr.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f003 0302 	and.w	r3, r3, #2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d026      	beq.n	800ca54 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d021      	beq.n	800ca54 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f06f 0202 	mvn.w	r2, #2
 800ca18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d005      	beq.n	800ca3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	4798      	blx	r3
 800ca38:	e009      	b.n	800ca4e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f003 0304 	and.w	r3, r3, #4
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d026      	beq.n	800caac <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d021      	beq.n	800caac <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f06f 0204 	mvn.w	r2, #4
 800ca70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2202      	movs	r2, #2
 800ca76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	4798      	blx	r3
 800ca90:	e009      	b.n	800caa6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	f003 0308 	and.w	r3, r3, #8
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d026      	beq.n	800cb04 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f003 0308 	and.w	r3, r3, #8
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d021      	beq.n	800cb04 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f06f 0208 	mvn.w	r2, #8
 800cac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2204      	movs	r2, #4
 800cace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	f003 0303 	and.w	r3, r3, #3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	4798      	blx	r3
 800cae8:	e009      	b.n	800cafe <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	f003 0310 	and.w	r3, r3, #16
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d026      	beq.n	800cb5c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f003 0310 	and.w	r3, r3, #16
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d021      	beq.n	800cb5c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f06f 0210 	mvn.w	r2, #16
 800cb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2208      	movs	r2, #8
 800cb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	69db      	ldr	r3, [r3, #28]
 800cb2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	4798      	blx	r3
 800cb40:	e009      	b.n	800cb56 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00e      	beq.n	800cb84 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f06f 0201 	mvn.w	r2, #1
 800cb78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00e      	beq.n	800cbb6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cbaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00e      	beq.n	800cbde <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00e      	beq.n	800cc06 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d009      	beq.n	800cc06 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f003 0320 	and.w	r3, r3, #32
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00e      	beq.n	800cc2e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d009      	beq.n	800cc2e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f06f 0220 	mvn.w	r2, #32
 800cc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00e      	beq.n	800cc56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d009      	beq.n	800cc56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800cc4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00e      	beq.n	800cc7e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800cc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00e      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d009      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800cc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00e      	beq.n	800ccce <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d009      	beq.n	800ccce <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ccc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e0ff      	b.n	800cef6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b14      	cmp	r3, #20
 800cd02:	f200 80f0 	bhi.w	800cee6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd06:	a201      	add	r2, pc, #4	@ (adr r2, 800cd0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd61 	.word	0x0800cd61
 800cd10:	0800cee7 	.word	0x0800cee7
 800cd14:	0800cee7 	.word	0x0800cee7
 800cd18:	0800cee7 	.word	0x0800cee7
 800cd1c:	0800cda1 	.word	0x0800cda1
 800cd20:	0800cee7 	.word	0x0800cee7
 800cd24:	0800cee7 	.word	0x0800cee7
 800cd28:	0800cee7 	.word	0x0800cee7
 800cd2c:	0800cde3 	.word	0x0800cde3
 800cd30:	0800cee7 	.word	0x0800cee7
 800cd34:	0800cee7 	.word	0x0800cee7
 800cd38:	0800cee7 	.word	0x0800cee7
 800cd3c:	0800ce23 	.word	0x0800ce23
 800cd40:	0800cee7 	.word	0x0800cee7
 800cd44:	0800cee7 	.word	0x0800cee7
 800cd48:	0800cee7 	.word	0x0800cee7
 800cd4c:	0800ce65 	.word	0x0800ce65
 800cd50:	0800cee7 	.word	0x0800cee7
 800cd54:	0800cee7 	.word	0x0800cee7
 800cd58:	0800cee7 	.word	0x0800cee7
 800cd5c:	0800cea5 	.word	0x0800cea5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 fc4e 	bl	800d608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	699a      	ldr	r2, [r3, #24]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0208 	orr.w	r2, r2, #8
 800cd7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699a      	ldr	r2, [r3, #24]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f022 0204 	bic.w	r2, r2, #4
 800cd8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6999      	ldr	r1, [r3, #24]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	691a      	ldr	r2, [r3, #16]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	619a      	str	r2, [r3, #24]
      break;
 800cd9e:	e0a5      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68b9      	ldr	r1, [r7, #8]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 fcc8 	bl	800d73c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	699a      	ldr	r2, [r3, #24]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	699a      	ldr	r2, [r3, #24]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6999      	ldr	r1, [r3, #24]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	021a      	lsls	r2, r3, #8
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	430a      	orrs	r2, r1
 800cdde:	619a      	str	r2, [r3, #24]
      break;
 800cde0:	e084      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 fd3b 	bl	800d864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	69da      	ldr	r2, [r3, #28]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f042 0208 	orr.w	r2, r2, #8
 800cdfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	69da      	ldr	r2, [r3, #28]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f022 0204 	bic.w	r2, r2, #4
 800ce0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69d9      	ldr	r1, [r3, #28]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	691a      	ldr	r2, [r3, #16]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	61da      	str	r2, [r3, #28]
      break;
 800ce20:	e064      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fdad 	bl	800d988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	69da      	ldr	r2, [r3, #28]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69d9      	ldr	r1, [r3, #28]
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	021a      	lsls	r2, r3, #8
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	61da      	str	r2, [r3, #28]
      break;
 800ce62:	e043      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68b9      	ldr	r1, [r7, #8]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 fe20 	bl	800dab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f042 0208 	orr.w	r2, r2, #8
 800ce7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0204 	bic.w	r2, r2, #4
 800ce8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	691a      	ldr	r2, [r3, #16]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800cea2:	e023      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68b9      	ldr	r1, [r7, #8]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 fe6a 	bl	800db84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cece:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	021a      	lsls	r2, r3, #8
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800cee4:	e002      	b.n	800ceec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	75fb      	strb	r3, [r7, #23]
      break;
 800ceea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop

0800cf00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d101      	bne.n	800cf1c <HAL_TIM_ConfigClockSource+0x1c>
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e0f6      	b.n	800d10a <HAL_TIM_ConfigClockSource+0x20a>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2202      	movs	r2, #2
 800cf28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800cf3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cf3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cf46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a6f      	ldr	r2, [pc, #444]	@ (800d114 <HAL_TIM_ConfigClockSource+0x214>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	f000 80c1 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cf5c:	4a6d      	ldr	r2, [pc, #436]	@ (800d114 <HAL_TIM_ConfigClockSource+0x214>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	f200 80c6 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cf64:	4a6c      	ldr	r2, [pc, #432]	@ (800d118 <HAL_TIM_ConfigClockSource+0x218>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	f000 80b9 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cf6c:	4a6a      	ldr	r2, [pc, #424]	@ (800d118 <HAL_TIM_ConfigClockSource+0x218>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	f200 80be 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cf74:	4a69      	ldr	r2, [pc, #420]	@ (800d11c <HAL_TIM_ConfigClockSource+0x21c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	f000 80b1 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cf7c:	4a67      	ldr	r2, [pc, #412]	@ (800d11c <HAL_TIM_ConfigClockSource+0x21c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	f200 80b6 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cf84:	4a66      	ldr	r2, [pc, #408]	@ (800d120 <HAL_TIM_ConfigClockSource+0x220>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	f000 80a9 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cf8c:	4a64      	ldr	r2, [pc, #400]	@ (800d120 <HAL_TIM_ConfigClockSource+0x220>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	f200 80ae 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cf94:	4a63      	ldr	r2, [pc, #396]	@ (800d124 <HAL_TIM_ConfigClockSource+0x224>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	f000 80a1 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cf9c:	4a61      	ldr	r2, [pc, #388]	@ (800d124 <HAL_TIM_ConfigClockSource+0x224>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	f200 80a6 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cfa4:	4a60      	ldr	r2, [pc, #384]	@ (800d128 <HAL_TIM_ConfigClockSource+0x228>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	f000 8099 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cfac:	4a5e      	ldr	r2, [pc, #376]	@ (800d128 <HAL_TIM_ConfigClockSource+0x228>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	f200 809e 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cfb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cfb8:	f000 8091 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cfbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cfc0:	f200 8096 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cfc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfc8:	f000 8089 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800cfcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfd0:	f200 808e 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cfd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfd8:	d03e      	beq.n	800d058 <HAL_TIM_ConfigClockSource+0x158>
 800cfda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfde:	f200 8087 	bhi.w	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cfe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfe6:	f000 8086 	beq.w	800d0f6 <HAL_TIM_ConfigClockSource+0x1f6>
 800cfea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfee:	d87f      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cff0:	2b70      	cmp	r3, #112	@ 0x70
 800cff2:	d01a      	beq.n	800d02a <HAL_TIM_ConfigClockSource+0x12a>
 800cff4:	2b70      	cmp	r3, #112	@ 0x70
 800cff6:	d87b      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cff8:	2b60      	cmp	r3, #96	@ 0x60
 800cffa:	d050      	beq.n	800d09e <HAL_TIM_ConfigClockSource+0x19e>
 800cffc:	2b60      	cmp	r3, #96	@ 0x60
 800cffe:	d877      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800d000:	2b50      	cmp	r3, #80	@ 0x50
 800d002:	d03c      	beq.n	800d07e <HAL_TIM_ConfigClockSource+0x17e>
 800d004:	2b50      	cmp	r3, #80	@ 0x50
 800d006:	d873      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800d008:	2b40      	cmp	r3, #64	@ 0x40
 800d00a:	d058      	beq.n	800d0be <HAL_TIM_ConfigClockSource+0x1be>
 800d00c:	2b40      	cmp	r3, #64	@ 0x40
 800d00e:	d86f      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800d010:	2b30      	cmp	r3, #48	@ 0x30
 800d012:	d064      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800d014:	2b30      	cmp	r3, #48	@ 0x30
 800d016:	d86b      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800d018:	2b20      	cmp	r3, #32
 800d01a:	d060      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800d01c:	2b20      	cmp	r3, #32
 800d01e:	d867      	bhi.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
 800d020:	2b00      	cmp	r3, #0
 800d022:	d05c      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800d024:	2b10      	cmp	r3, #16
 800d026:	d05a      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x1de>
 800d028:	e062      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d03a:	f000 fe8b 	bl	800dd54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d04c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	609a      	str	r2, [r3, #8]
      break;
 800d056:	e04f      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d068:	f000 fe74 	bl	800dd54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689a      	ldr	r2, [r3, #8]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d07a:	609a      	str	r2, [r3, #8]
      break;
 800d07c:	e03c      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d08a:	461a      	mov	r2, r3
 800d08c:	f000 fde6 	bl	800dc5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2150      	movs	r1, #80	@ 0x50
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fe3f 	bl	800dd1a <TIM_ITRx_SetConfig>
      break;
 800d09c:	e02c      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f000 fe05 	bl	800dcba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2160      	movs	r1, #96	@ 0x60
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f000 fe2f 	bl	800dd1a <TIM_ITRx_SetConfig>
      break;
 800d0bc:	e01c      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f000 fdc6 	bl	800dc5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2140      	movs	r1, #64	@ 0x40
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fe1f 	bl	800dd1a <TIM_ITRx_SetConfig>
      break;
 800d0dc:	e00c      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f000 fe16 	bl	800dd1a <TIM_ITRx_SetConfig>
      break;
 800d0ee:	e003      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f4:	e000      	b.n	800d0f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800d0f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d108:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	00100070 	.word	0x00100070
 800d118:	00100060 	.word	0x00100060
 800d11c:	00100050 	.word	0x00100050
 800d120:	00100040 	.word	0x00100040
 800d124:	00100030 	.word	0x00100030
 800d128:	00100020 	.word	0x00100020

0800d12c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	607a      	str	r2, [r7, #4]
 800d1ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e14a      	b.n	800d492 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b01      	cmp	r3, #1
 800d206:	f040 80dd 	bne.w	800d3c4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800d20a:	7afb      	ldrb	r3, [r7, #11]
 800d20c:	2b1f      	cmp	r3, #31
 800d20e:	f200 80d6 	bhi.w	800d3be <HAL_TIM_RegisterCallback+0x1de>
 800d212:	a201      	add	r2, pc, #4	@ (adr r2, 800d218 <HAL_TIM_RegisterCallback+0x38>)
 800d214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d218:	0800d299 	.word	0x0800d299
 800d21c:	0800d2a1 	.word	0x0800d2a1
 800d220:	0800d2a9 	.word	0x0800d2a9
 800d224:	0800d2b1 	.word	0x0800d2b1
 800d228:	0800d2b9 	.word	0x0800d2b9
 800d22c:	0800d2c1 	.word	0x0800d2c1
 800d230:	0800d2c9 	.word	0x0800d2c9
 800d234:	0800d2d1 	.word	0x0800d2d1
 800d238:	0800d2d9 	.word	0x0800d2d9
 800d23c:	0800d2e1 	.word	0x0800d2e1
 800d240:	0800d2e9 	.word	0x0800d2e9
 800d244:	0800d2f1 	.word	0x0800d2f1
 800d248:	0800d2f9 	.word	0x0800d2f9
 800d24c:	0800d301 	.word	0x0800d301
 800d250:	0800d30b 	.word	0x0800d30b
 800d254:	0800d315 	.word	0x0800d315
 800d258:	0800d31f 	.word	0x0800d31f
 800d25c:	0800d329 	.word	0x0800d329
 800d260:	0800d333 	.word	0x0800d333
 800d264:	0800d33d 	.word	0x0800d33d
 800d268:	0800d347 	.word	0x0800d347
 800d26c:	0800d351 	.word	0x0800d351
 800d270:	0800d35b 	.word	0x0800d35b
 800d274:	0800d365 	.word	0x0800d365
 800d278:	0800d36f 	.word	0x0800d36f
 800d27c:	0800d379 	.word	0x0800d379
 800d280:	0800d383 	.word	0x0800d383
 800d284:	0800d38d 	.word	0x0800d38d
 800d288:	0800d397 	.word	0x0800d397
 800d28c:	0800d3a1 	.word	0x0800d3a1
 800d290:	0800d3ab 	.word	0x0800d3ab
 800d294:	0800d3b5 	.word	0x0800d3b5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d29e:	e0f7      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d2a6:	e0f3      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d2ae:	e0ef      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d2b6:	e0eb      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d2be:	e0e7      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d2c6:	e0e3      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d2ce:	e0df      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d2d6:	e0db      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d2de:	e0d7      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d2e6:	e0d3      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d2ee:	e0cf      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d2f6:	e0cb      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d2fe:	e0c7      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d308:	e0c2      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800d312:	e0bd      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800d31c:	e0b8      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800d326:	e0b3      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800d330:	e0ae      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d33a:	e0a9      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d344:	e0a4      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d34e:	e09f      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d358:	e09a      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d362:	e095      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d36c:	e090      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d376:	e08b      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d380:	e086      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d38a:	e081      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d394:	e07c      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d39e:	e077      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800d3a8:	e072      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d3b2:	e06d      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d3bc:	e068      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	75fb      	strb	r3, [r7, #23]
        break;
 800d3c2:	e065      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d15d      	bne.n	800d48c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800d3d0:	7afb      	ldrb	r3, [r7, #11]
 800d3d2:	2b0d      	cmp	r3, #13
 800d3d4:	d857      	bhi.n	800d486 <HAL_TIM_RegisterCallback+0x2a6>
 800d3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3dc <HAL_TIM_RegisterCallback+0x1fc>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d415 	.word	0x0800d415
 800d3e0:	0800d41d 	.word	0x0800d41d
 800d3e4:	0800d425 	.word	0x0800d425
 800d3e8:	0800d42d 	.word	0x0800d42d
 800d3ec:	0800d435 	.word	0x0800d435
 800d3f0:	0800d43d 	.word	0x0800d43d
 800d3f4:	0800d445 	.word	0x0800d445
 800d3f8:	0800d44d 	.word	0x0800d44d
 800d3fc:	0800d455 	.word	0x0800d455
 800d400:	0800d45d 	.word	0x0800d45d
 800d404:	0800d465 	.word	0x0800d465
 800d408:	0800d46d 	.word	0x0800d46d
 800d40c:	0800d475 	.word	0x0800d475
 800d410:	0800d47d 	.word	0x0800d47d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d41a:	e039      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d422:	e035      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d42a:	e031      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d432:	e02d      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d43a:	e029      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d442:	e025      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d44a:	e021      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d452:	e01d      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d45a:	e019      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d462:	e015      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d46a:	e011      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d472:	e00d      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d47a:	e009      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d484:	e004      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	75fb      	strb	r3, [r7, #23]
        break;
 800d48a:	e001      	b.n	800d490 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d490:	7dfb      	ldrb	r3, [r7, #23]
}
 800d492:	4618      	mov	r0, r3
 800d494:	371c      	adds	r7, #28
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a4c      	ldr	r2, [pc, #304]	@ (800d5e4 <TIM_Base_SetConfig+0x144>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d017      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4be:	d013      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a49      	ldr	r2, [pc, #292]	@ (800d5e8 <TIM_Base_SetConfig+0x148>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d00f      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a48      	ldr	r2, [pc, #288]	@ (800d5ec <TIM_Base_SetConfig+0x14c>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00b      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a47      	ldr	r2, [pc, #284]	@ (800d5f0 <TIM_Base_SetConfig+0x150>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d007      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a46      	ldr	r2, [pc, #280]	@ (800d5f4 <TIM_Base_SetConfig+0x154>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d003      	beq.n	800d4e8 <TIM_Base_SetConfig+0x48>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a45      	ldr	r2, [pc, #276]	@ (800d5f8 <TIM_Base_SetConfig+0x158>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d108      	bne.n	800d4fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a39      	ldr	r2, [pc, #228]	@ (800d5e4 <TIM_Base_SetConfig+0x144>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d023      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d508:	d01f      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a36      	ldr	r2, [pc, #216]	@ (800d5e8 <TIM_Base_SetConfig+0x148>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d01b      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a35      	ldr	r2, [pc, #212]	@ (800d5ec <TIM_Base_SetConfig+0x14c>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d017      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4a34      	ldr	r2, [pc, #208]	@ (800d5f0 <TIM_Base_SetConfig+0x150>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d013      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a33      	ldr	r2, [pc, #204]	@ (800d5f4 <TIM_Base_SetConfig+0x154>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d00f      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a33      	ldr	r2, [pc, #204]	@ (800d5fc <TIM_Base_SetConfig+0x15c>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d00b      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a32      	ldr	r2, [pc, #200]	@ (800d600 <TIM_Base_SetConfig+0x160>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d007      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a31      	ldr	r2, [pc, #196]	@ (800d604 <TIM_Base_SetConfig+0x164>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d003      	beq.n	800d54a <TIM_Base_SetConfig+0xaa>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a2c      	ldr	r2, [pc, #176]	@ (800d5f8 <TIM_Base_SetConfig+0x158>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d108      	bne.n	800d55c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	4313      	orrs	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	4313      	orrs	r3, r2
 800d568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a18      	ldr	r2, [pc, #96]	@ (800d5e4 <TIM_Base_SetConfig+0x144>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d013      	beq.n	800d5b0 <TIM_Base_SetConfig+0x110>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f4 <TIM_Base_SetConfig+0x154>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d00f      	beq.n	800d5b0 <TIM_Base_SetConfig+0x110>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4a1a      	ldr	r2, [pc, #104]	@ (800d5fc <TIM_Base_SetConfig+0x15c>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d00b      	beq.n	800d5b0 <TIM_Base_SetConfig+0x110>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a19      	ldr	r2, [pc, #100]	@ (800d600 <TIM_Base_SetConfig+0x160>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d007      	beq.n	800d5b0 <TIM_Base_SetConfig+0x110>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a18      	ldr	r2, [pc, #96]	@ (800d604 <TIM_Base_SetConfig+0x164>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d003      	beq.n	800d5b0 <TIM_Base_SetConfig+0x110>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a13      	ldr	r2, [pc, #76]	@ (800d5f8 <TIM_Base_SetConfig+0x158>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d103      	bne.n	800d5b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	691a      	ldr	r2, [r3, #16]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d105      	bne.n	800d5d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	f023 0201 	bic.w	r2, r3, #1
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	611a      	str	r2, [r3, #16]
  }
}
 800d5d6:	bf00      	nop
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	40012c00 	.word	0x40012c00
 800d5e8:	40000400 	.word	0x40000400
 800d5ec:	40000800 	.word	0x40000800
 800d5f0:	40000c00 	.word	0x40000c00
 800d5f4:	40013400 	.word	0x40013400
 800d5f8:	40015000 	.word	0x40015000
 800d5fc:	40014000 	.word	0x40014000
 800d600:	40014400 	.word	0x40014400
 800d604:	40014800 	.word	0x40014800

0800d608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d608:	b480      	push	{r7}
 800d60a:	b087      	sub	sp, #28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	f023 0201 	bic.w	r2, r3, #1
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f023 0302 	bic.w	r3, r3, #2
 800d654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a30      	ldr	r2, [pc, #192]	@ (800d724 <TIM_OC1_SetConfig+0x11c>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d013      	beq.n	800d690 <TIM_OC1_SetConfig+0x88>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a2f      	ldr	r2, [pc, #188]	@ (800d728 <TIM_OC1_SetConfig+0x120>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d00f      	beq.n	800d690 <TIM_OC1_SetConfig+0x88>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a2e      	ldr	r2, [pc, #184]	@ (800d72c <TIM_OC1_SetConfig+0x124>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d00b      	beq.n	800d690 <TIM_OC1_SetConfig+0x88>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a2d      	ldr	r2, [pc, #180]	@ (800d730 <TIM_OC1_SetConfig+0x128>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d007      	beq.n	800d690 <TIM_OC1_SetConfig+0x88>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a2c      	ldr	r2, [pc, #176]	@ (800d734 <TIM_OC1_SetConfig+0x12c>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d003      	beq.n	800d690 <TIM_OC1_SetConfig+0x88>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a2b      	ldr	r2, [pc, #172]	@ (800d738 <TIM_OC1_SetConfig+0x130>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d10c      	bne.n	800d6aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f023 0308 	bic.w	r3, r3, #8
 800d696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f023 0304 	bic.w	r3, r3, #4
 800d6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d724 <TIM_OC1_SetConfig+0x11c>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d013      	beq.n	800d6da <TIM_OC1_SetConfig+0xd2>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d728 <TIM_OC1_SetConfig+0x120>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d00f      	beq.n	800d6da <TIM_OC1_SetConfig+0xd2>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d72c <TIM_OC1_SetConfig+0x124>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00b      	beq.n	800d6da <TIM_OC1_SetConfig+0xd2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800d730 <TIM_OC1_SetConfig+0x128>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d007      	beq.n	800d6da <TIM_OC1_SetConfig+0xd2>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a19      	ldr	r2, [pc, #100]	@ (800d734 <TIM_OC1_SetConfig+0x12c>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d003      	beq.n	800d6da <TIM_OC1_SetConfig+0xd2>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a18      	ldr	r2, [pc, #96]	@ (800d738 <TIM_OC1_SetConfig+0x130>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d111      	bne.n	800d6fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	699b      	ldr	r3, [r3, #24]
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	621a      	str	r2, [r3, #32]
}
 800d718:	bf00      	nop
 800d71a:	371c      	adds	r7, #28
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	40012c00 	.word	0x40012c00
 800d728:	40013400 	.word	0x40013400
 800d72c:	40014000 	.word	0x40014000
 800d730:	40014400 	.word	0x40014400
 800d734:	40014800 	.word	0x40014800
 800d738:	40015000 	.word	0x40015000

0800d73c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	f023 0210 	bic.w	r2, r3, #16
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d76a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	021b      	lsls	r3, r3, #8
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	4313      	orrs	r3, r2
 800d782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f023 0320 	bic.w	r3, r3, #32
 800d78a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	011b      	lsls	r3, r3, #4
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	4313      	orrs	r3, r2
 800d796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a2c      	ldr	r2, [pc, #176]	@ (800d84c <TIM_OC2_SetConfig+0x110>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d007      	beq.n	800d7b0 <TIM_OC2_SetConfig+0x74>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a2b      	ldr	r2, [pc, #172]	@ (800d850 <TIM_OC2_SetConfig+0x114>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d003      	beq.n	800d7b0 <TIM_OC2_SetConfig+0x74>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d854 <TIM_OC2_SetConfig+0x118>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d10d      	bne.n	800d7cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	011b      	lsls	r3, r3, #4
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d84c <TIM_OC2_SetConfig+0x110>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d013      	beq.n	800d7fc <TIM_OC2_SetConfig+0xc0>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a1e      	ldr	r2, [pc, #120]	@ (800d850 <TIM_OC2_SetConfig+0x114>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d00f      	beq.n	800d7fc <TIM_OC2_SetConfig+0xc0>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a1e      	ldr	r2, [pc, #120]	@ (800d858 <TIM_OC2_SetConfig+0x11c>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d00b      	beq.n	800d7fc <TIM_OC2_SetConfig+0xc0>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a1d      	ldr	r2, [pc, #116]	@ (800d85c <TIM_OC2_SetConfig+0x120>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d007      	beq.n	800d7fc <TIM_OC2_SetConfig+0xc0>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a1c      	ldr	r2, [pc, #112]	@ (800d860 <TIM_OC2_SetConfig+0x124>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d003      	beq.n	800d7fc <TIM_OC2_SetConfig+0xc0>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a17      	ldr	r2, [pc, #92]	@ (800d854 <TIM_OC2_SetConfig+0x118>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d113      	bne.n	800d824 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d80a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	4313      	orrs	r3, r2
 800d816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	693a      	ldr	r2, [r7, #16]
 800d820:	4313      	orrs	r3, r2
 800d822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	685a      	ldr	r2, [r3, #4]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	621a      	str	r2, [r3, #32]
}
 800d83e:	bf00      	nop
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	40012c00 	.word	0x40012c00
 800d850:	40013400 	.word	0x40013400
 800d854:	40015000 	.word	0x40015000
 800d858:	40014000 	.word	0x40014000
 800d85c:	40014400 	.word	0x40014400
 800d860:	40014800 	.word	0x40014800

0800d864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f023 0303 	bic.w	r3, r3, #3
 800d89e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d8b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	021b      	lsls	r3, r3, #8
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4a2b      	ldr	r2, [pc, #172]	@ (800d970 <TIM_OC3_SetConfig+0x10c>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d007      	beq.n	800d8d6 <TIM_OC3_SetConfig+0x72>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a2a      	ldr	r2, [pc, #168]	@ (800d974 <TIM_OC3_SetConfig+0x110>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d003      	beq.n	800d8d6 <TIM_OC3_SetConfig+0x72>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4a29      	ldr	r2, [pc, #164]	@ (800d978 <TIM_OC3_SetConfig+0x114>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d10d      	bne.n	800d8f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	021b      	lsls	r3, r3, #8
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a1e      	ldr	r2, [pc, #120]	@ (800d970 <TIM_OC3_SetConfig+0x10c>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d013      	beq.n	800d922 <TIM_OC3_SetConfig+0xbe>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d974 <TIM_OC3_SetConfig+0x110>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d00f      	beq.n	800d922 <TIM_OC3_SetConfig+0xbe>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4a1d      	ldr	r2, [pc, #116]	@ (800d97c <TIM_OC3_SetConfig+0x118>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d00b      	beq.n	800d922 <TIM_OC3_SetConfig+0xbe>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a1c      	ldr	r2, [pc, #112]	@ (800d980 <TIM_OC3_SetConfig+0x11c>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d007      	beq.n	800d922 <TIM_OC3_SetConfig+0xbe>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a1b      	ldr	r2, [pc, #108]	@ (800d984 <TIM_OC3_SetConfig+0x120>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d003      	beq.n	800d922 <TIM_OC3_SetConfig+0xbe>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a16      	ldr	r2, [pc, #88]	@ (800d978 <TIM_OC3_SetConfig+0x114>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d113      	bne.n	800d94a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	011b      	lsls	r3, r3, #4
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	693a      	ldr	r2, [r7, #16]
 800d946:	4313      	orrs	r3, r2
 800d948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	685a      	ldr	r2, [r3, #4]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	621a      	str	r2, [r3, #32]
}
 800d964:	bf00      	nop
 800d966:	371c      	adds	r7, #28
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	40012c00 	.word	0x40012c00
 800d974:	40013400 	.word	0x40013400
 800d978:	40015000 	.word	0x40015000
 800d97c:	40014000 	.word	0x40014000
 800d980:	40014400 	.word	0x40014400
 800d984:	40014800 	.word	0x40014800

0800d988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d988:	b480      	push	{r7}
 800d98a:	b087      	sub	sp, #28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a1b      	ldr	r3, [r3, #32]
 800d996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	69db      	ldr	r3, [r3, #28]
 800d9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d9b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	021b      	lsls	r3, r3, #8
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d9d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	031b      	lsls	r3, r3, #12
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a2c      	ldr	r2, [pc, #176]	@ (800da98 <TIM_OC4_SetConfig+0x110>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d007      	beq.n	800d9fc <TIM_OC4_SetConfig+0x74>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a2b      	ldr	r2, [pc, #172]	@ (800da9c <TIM_OC4_SetConfig+0x114>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d003      	beq.n	800d9fc <TIM_OC4_SetConfig+0x74>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a2a      	ldr	r2, [pc, #168]	@ (800daa0 <TIM_OC4_SetConfig+0x118>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d10d      	bne.n	800da18 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800da02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	031b      	lsls	r3, r3, #12
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a1f      	ldr	r2, [pc, #124]	@ (800da98 <TIM_OC4_SetConfig+0x110>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d013      	beq.n	800da48 <TIM_OC4_SetConfig+0xc0>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a1e      	ldr	r2, [pc, #120]	@ (800da9c <TIM_OC4_SetConfig+0x114>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d00f      	beq.n	800da48 <TIM_OC4_SetConfig+0xc0>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a1e      	ldr	r2, [pc, #120]	@ (800daa4 <TIM_OC4_SetConfig+0x11c>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d00b      	beq.n	800da48 <TIM_OC4_SetConfig+0xc0>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a1d      	ldr	r2, [pc, #116]	@ (800daa8 <TIM_OC4_SetConfig+0x120>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d007      	beq.n	800da48 <TIM_OC4_SetConfig+0xc0>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a1c      	ldr	r2, [pc, #112]	@ (800daac <TIM_OC4_SetConfig+0x124>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d003      	beq.n	800da48 <TIM_OC4_SetConfig+0xc0>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a17      	ldr	r2, [pc, #92]	@ (800daa0 <TIM_OC4_SetConfig+0x118>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d113      	bne.n	800da70 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da4e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800da56:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	019b      	lsls	r3, r3, #6
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	4313      	orrs	r3, r2
 800da62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	019b      	lsls	r3, r3, #6
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	621a      	str	r2, [r3, #32]
}
 800da8a:	bf00      	nop
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	40012c00 	.word	0x40012c00
 800da9c:	40013400 	.word	0x40013400
 800daa0:	40015000 	.word	0x40015000
 800daa4:	40014000 	.word	0x40014000
 800daa8:	40014400 	.word	0x40014400
 800daac:	40014800 	.word	0x40014800

0800dab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b087      	sub	sp, #28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800daf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	041b      	lsls	r3, r3, #16
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4313      	orrs	r3, r2
 800db00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a19      	ldr	r2, [pc, #100]	@ (800db6c <TIM_OC5_SetConfig+0xbc>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d013      	beq.n	800db32 <TIM_OC5_SetConfig+0x82>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a18      	ldr	r2, [pc, #96]	@ (800db70 <TIM_OC5_SetConfig+0xc0>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d00f      	beq.n	800db32 <TIM_OC5_SetConfig+0x82>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a17      	ldr	r2, [pc, #92]	@ (800db74 <TIM_OC5_SetConfig+0xc4>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d00b      	beq.n	800db32 <TIM_OC5_SetConfig+0x82>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a16      	ldr	r2, [pc, #88]	@ (800db78 <TIM_OC5_SetConfig+0xc8>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d007      	beq.n	800db32 <TIM_OC5_SetConfig+0x82>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a15      	ldr	r2, [pc, #84]	@ (800db7c <TIM_OC5_SetConfig+0xcc>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d003      	beq.n	800db32 <TIM_OC5_SetConfig+0x82>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a14      	ldr	r2, [pc, #80]	@ (800db80 <TIM_OC5_SetConfig+0xd0>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d109      	bne.n	800db46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	021b      	lsls	r3, r3, #8
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	4313      	orrs	r3, r2
 800db44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685a      	ldr	r2, [r3, #4]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	621a      	str	r2, [r3, #32]
}
 800db60:	bf00      	nop
 800db62:	371c      	adds	r7, #28
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	40012c00 	.word	0x40012c00
 800db70:	40013400 	.word	0x40013400
 800db74:	40014000 	.word	0x40014000
 800db78:	40014400 	.word	0x40014400
 800db7c:	40014800 	.word	0x40014800
 800db80:	40015000 	.word	0x40015000

0800db84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6a1b      	ldr	r3, [r3, #32]
 800db98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dbca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	051b      	lsls	r3, r3, #20
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a1a      	ldr	r2, [pc, #104]	@ (800dc44 <TIM_OC6_SetConfig+0xc0>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d013      	beq.n	800dc08 <TIM_OC6_SetConfig+0x84>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a19      	ldr	r2, [pc, #100]	@ (800dc48 <TIM_OC6_SetConfig+0xc4>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d00f      	beq.n	800dc08 <TIM_OC6_SetConfig+0x84>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a18      	ldr	r2, [pc, #96]	@ (800dc4c <TIM_OC6_SetConfig+0xc8>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d00b      	beq.n	800dc08 <TIM_OC6_SetConfig+0x84>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a17      	ldr	r2, [pc, #92]	@ (800dc50 <TIM_OC6_SetConfig+0xcc>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d007      	beq.n	800dc08 <TIM_OC6_SetConfig+0x84>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a16      	ldr	r2, [pc, #88]	@ (800dc54 <TIM_OC6_SetConfig+0xd0>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d003      	beq.n	800dc08 <TIM_OC6_SetConfig+0x84>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a15      	ldr	r2, [pc, #84]	@ (800dc58 <TIM_OC6_SetConfig+0xd4>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d109      	bne.n	800dc1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	029b      	lsls	r3, r3, #10
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	621a      	str	r2, [r3, #32]
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	40012c00 	.word	0x40012c00
 800dc48:	40013400 	.word	0x40013400
 800dc4c:	40014000 	.word	0x40014000
 800dc50:	40014400 	.word	0x40014400
 800dc54:	40014800 	.word	0x40014800
 800dc58:	40015000 	.word	0x40015000

0800dc5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6a1b      	ldr	r3, [r3, #32]
 800dc72:	f023 0201 	bic.w	r2, r3, #1
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dc86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	693a      	ldr	r2, [r7, #16]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f023 030a 	bic.w	r3, r3, #10
 800dc98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	621a      	str	r2, [r3, #32]
}
 800dcae:	bf00      	nop
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b087      	sub	sp, #28
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	60f8      	str	r0, [r7, #12]
 800dcc2:	60b9      	str	r1, [r7, #8]
 800dcc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6a1b      	ldr	r3, [r3, #32]
 800dcca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6a1b      	ldr	r3, [r3, #32]
 800dcd0:	f023 0210 	bic.w	r2, r3, #16
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	031b      	lsls	r3, r3, #12
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dcf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	011b      	lsls	r3, r3, #4
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	693a      	ldr	r2, [r7, #16]
 800dd06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	621a      	str	r2, [r3, #32]
}
 800dd0e:	bf00      	nop
 800dd10:	371c      	adds	r7, #28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd1a:	b480      	push	{r7}
 800dd1c:	b085      	sub	sp, #20
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800dd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	f043 0307 	orr.w	r3, r3, #7
 800dd40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	609a      	str	r2, [r3, #8]
}
 800dd48:	bf00      	nop
 800dd4a:	3714      	adds	r7, #20
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	021a      	lsls	r2, r3, #8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	431a      	orrs	r2, r3
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	609a      	str	r2, [r3, #8]
}
 800dd88:	bf00      	nop
 800dd8a:	371c      	adds	r7, #28
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b087      	sub	sp, #28
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f003 031f 	and.w	r3, r3, #31
 800dda6:	2201      	movs	r2, #1
 800dda8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6a1a      	ldr	r2, [r3, #32]
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	43db      	mvns	r3, r3
 800ddb6:	401a      	ands	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6a1a      	ldr	r2, [r3, #32]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f003 031f 	and.w	r3, r3, #31
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	fa01 f303 	lsl.w	r3, r1, r3
 800ddcc:	431a      	orrs	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	621a      	str	r2, [r3, #32]
}
 800ddd2:	bf00      	nop
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
	...

0800dde0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a26      	ldr	r2, [pc, #152]	@ (800de84 <TIM_ResetCallback+0xa4>)
 800ddec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a25      	ldr	r2, [pc, #148]	@ (800de88 <TIM_ResetCallback+0xa8>)
 800ddf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a24      	ldr	r2, [pc, #144]	@ (800de8c <TIM_ResetCallback+0xac>)
 800ddfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a23      	ldr	r2, [pc, #140]	@ (800de90 <TIM_ResetCallback+0xb0>)
 800de04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a22      	ldr	r2, [pc, #136]	@ (800de94 <TIM_ResetCallback+0xb4>)
 800de0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a21      	ldr	r2, [pc, #132]	@ (800de98 <TIM_ResetCallback+0xb8>)
 800de14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a20      	ldr	r2, [pc, #128]	@ (800de9c <TIM_ResetCallback+0xbc>)
 800de1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a1f      	ldr	r2, [pc, #124]	@ (800dea0 <TIM_ResetCallback+0xc0>)
 800de24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a1e      	ldr	r2, [pc, #120]	@ (800dea4 <TIM_ResetCallback+0xc4>)
 800de2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a1d      	ldr	r2, [pc, #116]	@ (800dea8 <TIM_ResetCallback+0xc8>)
 800de34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a1c      	ldr	r2, [pc, #112]	@ (800deac <TIM_ResetCallback+0xcc>)
 800de3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a1b      	ldr	r2, [pc, #108]	@ (800deb0 <TIM_ResetCallback+0xd0>)
 800de44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a1a      	ldr	r2, [pc, #104]	@ (800deb4 <TIM_ResetCallback+0xd4>)
 800de4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a19      	ldr	r2, [pc, #100]	@ (800deb8 <TIM_ResetCallback+0xd8>)
 800de54:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a18      	ldr	r2, [pc, #96]	@ (800debc <TIM_ResetCallback+0xdc>)
 800de5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a17      	ldr	r2, [pc, #92]	@ (800dec0 <TIM_ResetCallback+0xe0>)
 800de64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a16      	ldr	r2, [pc, #88]	@ (800dec4 <TIM_ResetCallback+0xe4>)
 800de6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a15      	ldr	r2, [pc, #84]	@ (800dec8 <TIM_ResetCallback+0xe8>)
 800de74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	08006d9d 	.word	0x08006d9d
 800de88:	0800d12d 	.word	0x0800d12d
 800de8c:	0800d1a5 	.word	0x0800d1a5
 800de90:	0800d1b9 	.word	0x0800d1b9
 800de94:	0800d155 	.word	0x0800d155
 800de98:	0800d169 	.word	0x0800d169
 800de9c:	0800d141 	.word	0x0800d141
 800dea0:	0800d17d 	.word	0x0800d17d
 800dea4:	0800d191 	.word	0x0800d191
 800dea8:	0800d1cd 	.word	0x0800d1cd
 800deac:	0800e121 	.word	0x0800e121
 800deb0:	0800e135 	.word	0x0800e135
 800deb4:	0800e149 	.word	0x0800e149
 800deb8:	0800e15d 	.word	0x0800e15d
 800debc:	0800e171 	.word	0x0800e171
 800dec0:	0800e185 	.word	0x0800e185
 800dec4:	0800e199 	.word	0x0800e199
 800dec8:	0800e1ad 	.word	0x0800e1ad

0800decc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e074      	b.n	800dfce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a34      	ldr	r2, [pc, #208]	@ (800dfdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d009      	beq.n	800df22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a33      	ldr	r2, [pc, #204]	@ (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d004      	beq.n	800df22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a31      	ldr	r2, [pc, #196]	@ (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d108      	bne.n	800df34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800df28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	4313      	orrs	r3, r2
 800df32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800df3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	4313      	orrs	r3, r2
 800df48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a21      	ldr	r2, [pc, #132]	@ (800dfdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d022      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df64:	d01d      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a1f      	ldr	r2, [pc, #124]	@ (800dfe8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d018      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a1d      	ldr	r2, [pc, #116]	@ (800dfec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d013      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a1c      	ldr	r2, [pc, #112]	@ (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d00e      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a15      	ldr	r2, [pc, #84]	@ (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d009      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a18      	ldr	r2, [pc, #96]	@ (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d004      	beq.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a11      	ldr	r2, [pc, #68]	@ (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d10c      	bne.n	800dfbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3714      	adds	r7, #20
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	40012c00 	.word	0x40012c00
 800dfe0:	40013400 	.word	0x40013400
 800dfe4:	40015000 	.word	0x40015000
 800dfe8:	40000400 	.word	0x40000400
 800dfec:	40000800 	.word	0x40000800
 800dff0:	40000c00 	.word	0x40000c00
 800dff4:	40014000 	.word	0x40014000

0800dff8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d101      	bne.n	800e014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e010:	2302      	movs	r3, #2
 800e012:	e078      	b.n	800e106 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	4313      	orrs	r3, r2
 800e028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	4313      	orrs	r3, r2
 800e036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	4313      	orrs	r3, r2
 800e044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4313      	orrs	r3, r2
 800e052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	4313      	orrs	r3, r2
 800e060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	4313      	orrs	r3, r2
 800e06e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	041b      	lsls	r3, r3, #16
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e114 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d009      	beq.n	800e0ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e118 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d004      	beq.n	800e0ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a19      	ldr	r2, [pc, #100]	@ (800e11c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d11c      	bne.n	800e0f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c4:	051b      	lsls	r3, r3, #20
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	40012c00 	.word	0x40012c00
 800e118:	40013400 	.word	0x40013400
 800e11c:	40015000 	.word	0x40015000

0800e120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e050      	b.n	800e274 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d114      	bne.n	800e206 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fd65 	bl	800ecb4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d103      	bne.n	800e1fc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a21      	ldr	r2, [pc, #132]	@ (800e27c <HAL_UART_Init+0xbc>)
 800e1f8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2224      	movs	r2, #36	@ 0x24
 800e20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f022 0201 	bic.w	r2, r2, #1
 800e21c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f001 f892 	bl	800f350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fd93 	bl	800ed58 <UART_SetConfig>
 800e232:	4603      	mov	r3, r0
 800e234:	2b01      	cmp	r3, #1
 800e236:	d101      	bne.n	800e23c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	e01b      	b.n	800e274 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e24a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	689a      	ldr	r2, [r3, #8]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e25a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f042 0201 	orr.w	r2, r2, #1
 800e26a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f001 f911 	bl	800f494 <UART_CheckIdleState>
 800e272:	4603      	mov	r3, r0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	08008661 	.word	0x08008661

0800e280 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800e280:	b480      	push	{r7}
 800e282:	b087      	sub	sp, #28
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	460b      	mov	r3, r1
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d109      	bne.n	800e2ac <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e29e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e09c      	b.n	800e3e6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2b2:	2b20      	cmp	r3, #32
 800e2b4:	d16c      	bne.n	800e390 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800e2b6:	7afb      	ldrb	r3, [r7, #11]
 800e2b8:	2b0c      	cmp	r3, #12
 800e2ba:	d85e      	bhi.n	800e37a <HAL_UART_RegisterCallback+0xfa>
 800e2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e2c4 <HAL_UART_RegisterCallback+0x44>)
 800e2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c2:	bf00      	nop
 800e2c4:	0800e2f9 	.word	0x0800e2f9
 800e2c8:	0800e303 	.word	0x0800e303
 800e2cc:	0800e30d 	.word	0x0800e30d
 800e2d0:	0800e317 	.word	0x0800e317
 800e2d4:	0800e321 	.word	0x0800e321
 800e2d8:	0800e32b 	.word	0x0800e32b
 800e2dc:	0800e335 	.word	0x0800e335
 800e2e0:	0800e33f 	.word	0x0800e33f
 800e2e4:	0800e349 	.word	0x0800e349
 800e2e8:	0800e353 	.word	0x0800e353
 800e2ec:	0800e35d 	.word	0x0800e35d
 800e2f0:	0800e367 	.word	0x0800e367
 800e2f4:	0800e371 	.word	0x0800e371
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e300:	e070      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e30a:	e06b      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e314:	e066      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e31e:	e061      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e328:	e05c      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e332:	e057      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e33c:	e052      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e346:	e04d      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e350:	e048      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e35a:	e043      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e364:	e03e      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e36e:	e039      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e378:	e034      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e380:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	75fb      	strb	r3, [r7, #23]
        break;
 800e38e:	e029      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e396:	2b00      	cmp	r3, #0
 800e398:	d11a      	bne.n	800e3d0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	2b0b      	cmp	r3, #11
 800e39e:	d002      	beq.n	800e3a6 <HAL_UART_RegisterCallback+0x126>
 800e3a0:	2b0c      	cmp	r3, #12
 800e3a2:	d005      	beq.n	800e3b0 <HAL_UART_RegisterCallback+0x130>
 800e3a4:	e009      	b.n	800e3ba <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e3ae:	e019      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e3b8:	e014      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	75fb      	strb	r3, [r7, #23]
        break;
 800e3ce:	e009      	b.n	800e3e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	371c      	adds	r7, #28
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop

0800e3f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08a      	sub	sp, #40	@ 0x28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	4613      	mov	r3, r2
 800e400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e408:	2b20      	cmp	r3, #32
 800e40a:	d137      	bne.n	800e47c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d002      	beq.n	800e418 <HAL_UART_Receive_DMA+0x24>
 800e412:	88fb      	ldrh	r3, [r7, #6]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	e030      	b.n	800e47e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a18      	ldr	r2, [pc, #96]	@ (800e488 <HAL_UART_Receive_DMA+0x94>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d01f      	beq.n	800e46c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e436:	2b00      	cmp	r3, #0
 800e438:	d018      	beq.n	800e46c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	e853 3f00 	ldrex	r3, [r3]
 800e446:	613b      	str	r3, [r7, #16]
   return(result);
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e44e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	461a      	mov	r2, r3
 800e456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e458:	623b      	str	r3, [r7, #32]
 800e45a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45c:	69f9      	ldr	r1, [r7, #28]
 800e45e:	6a3a      	ldr	r2, [r7, #32]
 800e460:	e841 2300 	strex	r3, r2, [r1]
 800e464:	61bb      	str	r3, [r7, #24]
   return(result);
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1e6      	bne.n	800e43a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	461a      	mov	r2, r3
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f001 f926 	bl	800f6c4 <UART_Start_Receive_DMA>
 800e478:	4603      	mov	r3, r0
 800e47a:	e000      	b.n	800e47e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e47c:	2302      	movs	r3, #2
  }
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3728      	adds	r7, #40	@ 0x28
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	40008000 	.word	0x40008000

0800e48c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b0ba      	sub	sp, #232	@ 0xe8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	69db      	ldr	r3, [r3, #28]
 800e49a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e4b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e4b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e4c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11b      	bne.n	800e500 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4cc:	f003 0320 	and.w	r3, r3, #32
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d015      	beq.n	800e500 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4d8:	f003 0320 	and.w	r3, r3, #32
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d105      	bne.n	800e4ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d009      	beq.n	800e500 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 8312 	beq.w	800eb1a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	4798      	blx	r3
      }
      return;
 800e4fe:	e30c      	b.n	800eb1a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 8129 	beq.w	800e75c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e50a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e50e:	4b90      	ldr	r3, [pc, #576]	@ (800e750 <HAL_UART_IRQHandler+0x2c4>)
 800e510:	4013      	ands	r3, r2
 800e512:	2b00      	cmp	r3, #0
 800e514:	d106      	bne.n	800e524 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e516:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e51a:	4b8e      	ldr	r3, [pc, #568]	@ (800e754 <HAL_UART_IRQHandler+0x2c8>)
 800e51c:	4013      	ands	r3, r2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f000 811c 	beq.w	800e75c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d011      	beq.n	800e554 <HAL_UART_IRQHandler+0xc8>
 800e530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00b      	beq.n	800e554 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2201      	movs	r2, #1
 800e542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e54a:	f043 0201 	orr.w	r2, r3, #1
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d011      	beq.n	800e584 <HAL_UART_IRQHandler+0xf8>
 800e560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2202      	movs	r2, #2
 800e572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e57a:	f043 0204 	orr.w	r2, r3, #4
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e588:	f003 0304 	and.w	r3, r3, #4
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d011      	beq.n	800e5b4 <HAL_UART_IRQHandler+0x128>
 800e590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00b      	beq.n	800e5b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2204      	movs	r2, #4
 800e5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5aa:	f043 0202 	orr.w	r2, r3, #2
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5b8:	f003 0308 	and.w	r3, r3, #8
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d017      	beq.n	800e5f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5c4:	f003 0320 	and.w	r3, r3, #32
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d105      	bne.n	800e5d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e5cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e5d0:	4b5f      	ldr	r3, [pc, #380]	@ (800e750 <HAL_UART_IRQHandler+0x2c4>)
 800e5d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2208      	movs	r2, #8
 800e5de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5e6:	f043 0208 	orr.w	r2, r3, #8
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d012      	beq.n	800e622 <HAL_UART_IRQHandler+0x196>
 800e5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e600:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00c      	beq.n	800e622 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e618:	f043 0220 	orr.w	r2, r3, #32
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 8278 	beq.w	800eb1e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e632:	f003 0320 	and.w	r3, r3, #32
 800e636:	2b00      	cmp	r3, #0
 800e638:	d013      	beq.n	800e662 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e63a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e63e:	f003 0320 	and.w	r3, r3, #32
 800e642:	2b00      	cmp	r3, #0
 800e644:	d105      	bne.n	800e652 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e64a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d007      	beq.n	800e662 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e668:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e676:	2b40      	cmp	r3, #64	@ 0x40
 800e678:	d005      	beq.n	800e686 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e67e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e682:	2b00      	cmp	r3, #0
 800e684:	d058      	beq.n	800e738 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 f903 	bl	800f892 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e696:	2b40      	cmp	r3, #64	@ 0x40
 800e698:	d148      	bne.n	800e72c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e6b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e6c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e6d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e6d6:	e841 2300 	strex	r3, r2, [r1]
 800e6da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e6de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1d9      	bne.n	800e69a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d017      	beq.n	800e720 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6f6:	4a18      	ldr	r2, [pc, #96]	@ (800e758 <HAL_UART_IRQHandler+0x2cc>)
 800e6f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e700:	4618      	mov	r0, r3
 800e702:	f7fc f8ab 	bl	800a85c <HAL_DMA_Abort_IT>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01f      	beq.n	800e74c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e71a:	4610      	mov	r0, r2
 800e71c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e71e:	e015      	b.n	800e74c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e72a:	e00f      	b.n	800e74c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e736:	e009      	b.n	800e74c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e74a:	e1e8      	b.n	800eb1e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e74c:	bf00      	nop
    return;
 800e74e:	e1e6      	b.n	800eb1e <HAL_UART_IRQHandler+0x692>
 800e750:	10000001 	.word	0x10000001
 800e754:	04000120 	.word	0x04000120
 800e758:	0800fb5d 	.word	0x0800fb5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e760:	2b01      	cmp	r3, #1
 800e762:	f040 8176 	bne.w	800ea52 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e76a:	f003 0310 	and.w	r3, r3, #16
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 816f 	beq.w	800ea52 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e778:	f003 0310 	and.w	r3, r3, #16
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 8168 	beq.w	800ea52 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2210      	movs	r2, #16
 800e788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e794:	2b40      	cmp	r3, #64	@ 0x40
 800e796:	f040 80dc 	bne.w	800e952 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e7a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f000 80b1 	beq.w	800e914 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	f080 80a9 	bcs.w	800e914 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e7c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f003 0320 	and.w	r3, r3, #32
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f040 8087 	bne.w	800e8ee <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e7ec:	e853 3f00 	ldrex	r3, [r3]
 800e7f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e7f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	461a      	mov	r2, r3
 800e806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e80a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e80e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e812:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e816:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e81a:	e841 2300 	strex	r3, r2, [r1]
 800e81e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1da      	bne.n	800e7e0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3308      	adds	r3, #8
 800e830:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e834:	e853 3f00 	ldrex	r3, [r3]
 800e838:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e83a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e83c:	f023 0301 	bic.w	r3, r3, #1
 800e840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	3308      	adds	r3, #8
 800e84a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e84e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e852:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e854:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1e1      	bne.n	800e82a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3308      	adds	r3, #8
 800e86c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e870:	e853 3f00 	ldrex	r3, [r3]
 800e874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e87c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3308      	adds	r3, #8
 800e886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e88a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e88c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e890:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e892:	e841 2300 	strex	r3, r2, [r1]
 800e896:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1e3      	bne.n	800e866 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2220      	movs	r2, #32
 800e8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e8ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8bc:	f023 0310 	bic.w	r3, r3, #16
 800e8c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e8d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8d6:	e841 2300 	strex	r3, r2, [r1]
 800e8da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1e4      	bne.n	800e8ac <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fb ff5e 	bl	800a7aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2202      	movs	r2, #2
 800e8f2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800e906:	b292      	uxth	r2, r2
 800e908:	1a8a      	subs	r2, r1, r2
 800e90a:	b292      	uxth	r2, r2
 800e90c:	4611      	mov	r1, r2
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e912:	e106      	b.n	800eb22 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e91e:	429a      	cmp	r2, r3
 800e920:	f040 80ff 	bne.w	800eb22 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b20      	cmp	r3, #32
 800e934:	f040 80f5 	bne.w	800eb22 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e94a:	4611      	mov	r1, r2
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	4798      	blx	r3
      return;
 800e950:	e0e7      	b.n	800eb22 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e95e:	b29b      	uxth	r3, r3
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 80d9 	beq.w	800eb26 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800e974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 80d4 	beq.w	800eb26 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e986:	e853 3f00 	ldrex	r3, [r3]
 800e98a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e98e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e9a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9a8:	e841 2300 	strex	r3, r2, [r1]
 800e9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1e4      	bne.n	800e97e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9be:	e853 3f00 	ldrex	r3, [r3]
 800e9c2:	623b      	str	r3, [r7, #32]
   return(result);
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9ca:	f023 0301 	bic.w	r3, r3, #1
 800e9ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e9dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800e9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9e4:	e841 2300 	strex	r3, r2, [r1]
 800e9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1e1      	bne.n	800e9b4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2220      	movs	r2, #32
 800e9f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	e853 3f00 	ldrex	r3, [r3]
 800ea10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f023 0310 	bic.w	r3, r3, #16
 800ea18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	461a      	mov	r2, r3
 800ea22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ea26:	61fb      	str	r3, [r7, #28]
 800ea28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2a:	69b9      	ldr	r1, [r7, #24]
 800ea2c:	69fa      	ldr	r2, [r7, #28]
 800ea2e:	e841 2300 	strex	r3, r2, [r1]
 800ea32:	617b      	str	r3, [r7, #20]
   return(result);
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e4      	bne.n	800ea04 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ea46:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea50:	e069      	b.n	800eb26 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d010      	beq.n	800ea80 <HAL_UART_IRQHandler+0x5f4>
 800ea5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ea72:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea7e:	e055      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ea80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d014      	beq.n	800eab6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ea8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d105      	bne.n	800eaa4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ea98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d008      	beq.n	800eab6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d03e      	beq.n	800eb2a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	4798      	blx	r3
    }
    return;
 800eab4:	e039      	b.n	800eb2a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d009      	beq.n	800ead6 <HAL_UART_IRQHandler+0x64a>
 800eac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d003      	beq.n	800ead6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f001 f858 	bl	800fb84 <UART_EndTransmit_IT>
    return;
 800ead4:	e02a      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ead6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00b      	beq.n	800eafa <HAL_UART_IRQHandler+0x66e>
 800eae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eae6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d005      	beq.n	800eafa <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eaf8:	e018      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eafe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d012      	beq.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
 800eb06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	da0e      	bge.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb18:	e008      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
      return;
 800eb1a:	bf00      	nop
 800eb1c:	e006      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
    return;
 800eb1e:	bf00      	nop
 800eb20:	e004      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
      return;
 800eb22:	bf00      	nop
 800eb24:	e002      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
      return;
 800eb26:	bf00      	nop
 800eb28:	e000      	b.n	800eb2c <HAL_UART_IRQHandler+0x6a0>
    return;
 800eb2a:	bf00      	nop
  }
}
 800eb2c:	37e8      	adds	r7, #232	@ 0xe8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop

0800eb34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a09      	ldr	r2, [pc, #36]	@ (800ec20 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d009      	beq.n	800ec14 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	695b      	ldr	r3, [r3, #20]
 800ec06:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	430a      	orrs	r2, r1
 800ec12:	615a      	str	r2, [r3, #20]
  }
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	40008000 	.word	0x40008000

0800ec24 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a18      	ldr	r2, [pc, #96]	@ (800ec94 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d027      	beq.n	800ec86 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec3c:	2b20      	cmp	r3, #32
 800ec3e:	d120      	bne.n	800ec82 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d101      	bne.n	800ec4e <HAL_UART_EnableReceiverTimeout+0x2a>
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	e01c      	b.n	800ec88 <HAL_UART_EnableReceiverTimeout+0x64>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2224      	movs	r2, #36	@ 0x24
 800ec5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ec6c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2220      	movs	r2, #32
 800ec72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e002      	b.n	800ec88 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ec82:	2302      	movs	r3, #2
 800ec84:	e000      	b.n	800ec88 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
  }
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	40008000 	.word	0x40008000

0800ec98 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	370c      	adds	r7, #12
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a1a      	ldr	r2, [pc, #104]	@ (800ed28 <UART_InitCallbacksToDefault+0x74>)
 800ecc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a19      	ldr	r2, [pc, #100]	@ (800ed2c <UART_InitCallbacksToDefault+0x78>)
 800ecc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a18      	ldr	r2, [pc, #96]	@ (800ed30 <UART_InitCallbacksToDefault+0x7c>)
 800ecd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a17      	ldr	r2, [pc, #92]	@ (800ed34 <UART_InitCallbacksToDefault+0x80>)
 800ecd8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a16      	ldr	r2, [pc, #88]	@ (800ed38 <UART_InitCallbacksToDefault+0x84>)
 800ece0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a15      	ldr	r2, [pc, #84]	@ (800ed3c <UART_InitCallbacksToDefault+0x88>)
 800ece8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a14      	ldr	r2, [pc, #80]	@ (800ed40 <UART_InitCallbacksToDefault+0x8c>)
 800ecf0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a13      	ldr	r2, [pc, #76]	@ (800ed44 <UART_InitCallbacksToDefault+0x90>)
 800ecf8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a12      	ldr	r2, [pc, #72]	@ (800ed48 <UART_InitCallbacksToDefault+0x94>)
 800ed00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a11      	ldr	r2, [pc, #68]	@ (800ed4c <UART_InitCallbacksToDefault+0x98>)
 800ed08:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a10      	ldr	r2, [pc, #64]	@ (800ed50 <UART_InitCallbacksToDefault+0x9c>)
 800ed10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a0f      	ldr	r2, [pc, #60]	@ (800ed54 <UART_InitCallbacksToDefault+0xa0>)
 800ed18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	0800eb49 	.word	0x0800eb49
 800ed2c:	0800eb35 	.word	0x0800eb35
 800ed30:	0800eb71 	.word	0x0800eb71
 800ed34:	0800eb5d 	.word	0x0800eb5d
 800ed38:	0800eb85 	.word	0x0800eb85
 800ed3c:	0800eb99 	.word	0x0800eb99
 800ed40:	0800ebad 	.word	0x0800ebad
 800ed44:	0800ebc1 	.word	0x0800ebc1
 800ed48:	0800fbdf 	.word	0x0800fbdf
 800ed4c:	0800fbf3 	.word	0x0800fbf3
 800ed50:	0800fc07 	.word	0x0800fc07
 800ed54:	0800ebd5 	.word	0x0800ebd5

0800ed58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed5c:	b08c      	sub	sp, #48	@ 0x30
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed62:	2300      	movs	r3, #0
 800ed64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	431a      	orrs	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	431a      	orrs	r2, r3
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	4baa      	ldr	r3, [pc, #680]	@ (800f030 <UART_SetConfig+0x2d8>)
 800ed88:	4013      	ands	r3, r2
 800ed8a:	697a      	ldr	r2, [r7, #20]
 800ed8c:	6812      	ldr	r2, [r2, #0]
 800ed8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed90:	430b      	orrs	r3, r1
 800ed92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	68da      	ldr	r2, [r3, #12]
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	430a      	orrs	r2, r1
 800eda8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a9f      	ldr	r2, [pc, #636]	@ (800f034 <UART_SetConfig+0x2dc>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d004      	beq.n	800edc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	6a1b      	ldr	r3, [r3, #32]
 800edbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edc0:	4313      	orrs	r3, r2
 800edc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800edce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	6812      	ldr	r2, [r2, #0]
 800edd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edd8:	430b      	orrs	r3, r1
 800edda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede2:	f023 010f 	bic.w	r1, r3, #15
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	430a      	orrs	r2, r1
 800edf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a90      	ldr	r2, [pc, #576]	@ (800f038 <UART_SetConfig+0x2e0>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d125      	bne.n	800ee48 <UART_SetConfig+0xf0>
 800edfc:	4b8f      	ldr	r3, [pc, #572]	@ (800f03c <UART_SetConfig+0x2e4>)
 800edfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee02:	f003 0303 	and.w	r3, r3, #3
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d81a      	bhi.n	800ee40 <UART_SetConfig+0xe8>
 800ee0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee10 <UART_SetConfig+0xb8>)
 800ee0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee10:	0800ee21 	.word	0x0800ee21
 800ee14:	0800ee31 	.word	0x0800ee31
 800ee18:	0800ee29 	.word	0x0800ee29
 800ee1c:	0800ee39 	.word	0x0800ee39
 800ee20:	2301      	movs	r3, #1
 800ee22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee26:	e116      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee2e:	e112      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ee30:	2304      	movs	r3, #4
 800ee32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee36:	e10e      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ee38:	2308      	movs	r3, #8
 800ee3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee3e:	e10a      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ee40:	2310      	movs	r3, #16
 800ee42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ee46:	e106      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a7c      	ldr	r2, [pc, #496]	@ (800f040 <UART_SetConfig+0x2e8>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d138      	bne.n	800eec4 <UART_SetConfig+0x16c>
 800ee52:	4b7a      	ldr	r3, [pc, #488]	@ (800f03c <UART_SetConfig+0x2e4>)
 800ee54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee58:	f003 030c 	and.w	r3, r3, #12
 800ee5c:	2b0c      	cmp	r3, #12
 800ee5e:	d82d      	bhi.n	800eebc <UART_SetConfig+0x164>
 800ee60:	a201      	add	r2, pc, #4	@ (adr r2, 800ee68 <UART_SetConfig+0x110>)
 800ee62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee66:	bf00      	nop
 800ee68:	0800ee9d 	.word	0x0800ee9d
 800ee6c:	0800eebd 	.word	0x0800eebd
 800ee70:	0800eebd 	.word	0x0800eebd
 800ee74:	0800eebd 	.word	0x0800eebd
 800ee78:	0800eead 	.word	0x0800eead
 800ee7c:	0800eebd 	.word	0x0800eebd
 800ee80:	0800eebd 	.word	0x0800eebd
 800ee84:	0800eebd 	.word	0x0800eebd
 800ee88:	0800eea5 	.word	0x0800eea5
 800ee8c:	0800eebd 	.word	0x0800eebd
 800ee90:	0800eebd 	.word	0x0800eebd
 800ee94:	0800eebd 	.word	0x0800eebd
 800ee98:	0800eeb5 	.word	0x0800eeb5
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eea2:	e0d8      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eea4:	2302      	movs	r3, #2
 800eea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eeaa:	e0d4      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eeac:	2304      	movs	r3, #4
 800eeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eeb2:	e0d0      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eeb4:	2308      	movs	r3, #8
 800eeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eeba:	e0cc      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eebc:	2310      	movs	r3, #16
 800eebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eec2:	e0c8      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a5e      	ldr	r2, [pc, #376]	@ (800f044 <UART_SetConfig+0x2ec>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d125      	bne.n	800ef1a <UART_SetConfig+0x1c2>
 800eece:	4b5b      	ldr	r3, [pc, #364]	@ (800f03c <UART_SetConfig+0x2e4>)
 800eed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eed4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800eed8:	2b30      	cmp	r3, #48	@ 0x30
 800eeda:	d016      	beq.n	800ef0a <UART_SetConfig+0x1b2>
 800eedc:	2b30      	cmp	r3, #48	@ 0x30
 800eede:	d818      	bhi.n	800ef12 <UART_SetConfig+0x1ba>
 800eee0:	2b20      	cmp	r3, #32
 800eee2:	d00a      	beq.n	800eefa <UART_SetConfig+0x1a2>
 800eee4:	2b20      	cmp	r3, #32
 800eee6:	d814      	bhi.n	800ef12 <UART_SetConfig+0x1ba>
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <UART_SetConfig+0x19a>
 800eeec:	2b10      	cmp	r3, #16
 800eeee:	d008      	beq.n	800ef02 <UART_SetConfig+0x1aa>
 800eef0:	e00f      	b.n	800ef12 <UART_SetConfig+0x1ba>
 800eef2:	2300      	movs	r3, #0
 800eef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eef8:	e0ad      	b.n	800f056 <UART_SetConfig+0x2fe>
 800eefa:	2302      	movs	r3, #2
 800eefc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef00:	e0a9      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef02:	2304      	movs	r3, #4
 800ef04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef08:	e0a5      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef0a:	2308      	movs	r3, #8
 800ef0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef10:	e0a1      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef12:	2310      	movs	r3, #16
 800ef14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef18:	e09d      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a4a      	ldr	r2, [pc, #296]	@ (800f048 <UART_SetConfig+0x2f0>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d125      	bne.n	800ef70 <UART_SetConfig+0x218>
 800ef24:	4b45      	ldr	r3, [pc, #276]	@ (800f03c <UART_SetConfig+0x2e4>)
 800ef26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ef2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ef30:	d016      	beq.n	800ef60 <UART_SetConfig+0x208>
 800ef32:	2bc0      	cmp	r3, #192	@ 0xc0
 800ef34:	d818      	bhi.n	800ef68 <UART_SetConfig+0x210>
 800ef36:	2b80      	cmp	r3, #128	@ 0x80
 800ef38:	d00a      	beq.n	800ef50 <UART_SetConfig+0x1f8>
 800ef3a:	2b80      	cmp	r3, #128	@ 0x80
 800ef3c:	d814      	bhi.n	800ef68 <UART_SetConfig+0x210>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <UART_SetConfig+0x1f0>
 800ef42:	2b40      	cmp	r3, #64	@ 0x40
 800ef44:	d008      	beq.n	800ef58 <UART_SetConfig+0x200>
 800ef46:	e00f      	b.n	800ef68 <UART_SetConfig+0x210>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef4e:	e082      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef50:	2302      	movs	r3, #2
 800ef52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef56:	e07e      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef5e:	e07a      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef66:	e076      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ef6e:	e072      	b.n	800f056 <UART_SetConfig+0x2fe>
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a35      	ldr	r2, [pc, #212]	@ (800f04c <UART_SetConfig+0x2f4>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d12a      	bne.n	800efd0 <UART_SetConfig+0x278>
 800ef7a:	4b30      	ldr	r3, [pc, #192]	@ (800f03c <UART_SetConfig+0x2e4>)
 800ef7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ef84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef88:	d01a      	beq.n	800efc0 <UART_SetConfig+0x268>
 800ef8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef8e:	d81b      	bhi.n	800efc8 <UART_SetConfig+0x270>
 800ef90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef94:	d00c      	beq.n	800efb0 <UART_SetConfig+0x258>
 800ef96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef9a:	d815      	bhi.n	800efc8 <UART_SetConfig+0x270>
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d003      	beq.n	800efa8 <UART_SetConfig+0x250>
 800efa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800efa4:	d008      	beq.n	800efb8 <UART_SetConfig+0x260>
 800efa6:	e00f      	b.n	800efc8 <UART_SetConfig+0x270>
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efae:	e052      	b.n	800f056 <UART_SetConfig+0x2fe>
 800efb0:	2302      	movs	r3, #2
 800efb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efb6:	e04e      	b.n	800f056 <UART_SetConfig+0x2fe>
 800efb8:	2304      	movs	r3, #4
 800efba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efbe:	e04a      	b.n	800f056 <UART_SetConfig+0x2fe>
 800efc0:	2308      	movs	r3, #8
 800efc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efc6:	e046      	b.n	800f056 <UART_SetConfig+0x2fe>
 800efc8:	2310      	movs	r3, #16
 800efca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800efce:	e042      	b.n	800f056 <UART_SetConfig+0x2fe>
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a17      	ldr	r2, [pc, #92]	@ (800f034 <UART_SetConfig+0x2dc>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d13a      	bne.n	800f050 <UART_SetConfig+0x2f8>
 800efda:	4b18      	ldr	r3, [pc, #96]	@ (800f03c <UART_SetConfig+0x2e4>)
 800efdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800efe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800efe8:	d01a      	beq.n	800f020 <UART_SetConfig+0x2c8>
 800efea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800efee:	d81b      	bhi.n	800f028 <UART_SetConfig+0x2d0>
 800eff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eff4:	d00c      	beq.n	800f010 <UART_SetConfig+0x2b8>
 800eff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800effa:	d815      	bhi.n	800f028 <UART_SetConfig+0x2d0>
 800effc:	2b00      	cmp	r3, #0
 800effe:	d003      	beq.n	800f008 <UART_SetConfig+0x2b0>
 800f000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f004:	d008      	beq.n	800f018 <UART_SetConfig+0x2c0>
 800f006:	e00f      	b.n	800f028 <UART_SetConfig+0x2d0>
 800f008:	2300      	movs	r3, #0
 800f00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f00e:	e022      	b.n	800f056 <UART_SetConfig+0x2fe>
 800f010:	2302      	movs	r3, #2
 800f012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f016:	e01e      	b.n	800f056 <UART_SetConfig+0x2fe>
 800f018:	2304      	movs	r3, #4
 800f01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f01e:	e01a      	b.n	800f056 <UART_SetConfig+0x2fe>
 800f020:	2308      	movs	r3, #8
 800f022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f026:	e016      	b.n	800f056 <UART_SetConfig+0x2fe>
 800f028:	2310      	movs	r3, #16
 800f02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f02e:	e012      	b.n	800f056 <UART_SetConfig+0x2fe>
 800f030:	cfff69f3 	.word	0xcfff69f3
 800f034:	40008000 	.word	0x40008000
 800f038:	40013800 	.word	0x40013800
 800f03c:	40021000 	.word	0x40021000
 800f040:	40004400 	.word	0x40004400
 800f044:	40004800 	.word	0x40004800
 800f048:	40004c00 	.word	0x40004c00
 800f04c:	40005000 	.word	0x40005000
 800f050:	2310      	movs	r3, #16
 800f052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4aae      	ldr	r2, [pc, #696]	@ (800f314 <UART_SetConfig+0x5bc>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	f040 8097 	bne.w	800f190 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f062:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f066:	2b08      	cmp	r3, #8
 800f068:	d823      	bhi.n	800f0b2 <UART_SetConfig+0x35a>
 800f06a:	a201      	add	r2, pc, #4	@ (adr r2, 800f070 <UART_SetConfig+0x318>)
 800f06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f070:	0800f095 	.word	0x0800f095
 800f074:	0800f0b3 	.word	0x0800f0b3
 800f078:	0800f09d 	.word	0x0800f09d
 800f07c:	0800f0b3 	.word	0x0800f0b3
 800f080:	0800f0a3 	.word	0x0800f0a3
 800f084:	0800f0b3 	.word	0x0800f0b3
 800f088:	0800f0b3 	.word	0x0800f0b3
 800f08c:	0800f0b3 	.word	0x0800f0b3
 800f090:	0800f0ab 	.word	0x0800f0ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f094:	f7fc fcec 	bl	800ba70 <HAL_RCC_GetPCLK1Freq>
 800f098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f09a:	e010      	b.n	800f0be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f09c:	4b9e      	ldr	r3, [pc, #632]	@ (800f318 <UART_SetConfig+0x5c0>)
 800f09e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f0a0:	e00d      	b.n	800f0be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0a2:	f7fc fc77 	bl	800b994 <HAL_RCC_GetSysClockFreq>
 800f0a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f0a8:	e009      	b.n	800f0be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f0b0:	e005      	b.n	800f0be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f0bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 8130 	beq.w	800f326 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ca:	4a94      	ldr	r2, [pc, #592]	@ (800f31c <UART_SetConfig+0x5c4>)
 800f0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	005b      	lsls	r3, r3, #1
 800f0e2:	4413      	add	r3, r2
 800f0e4:	69ba      	ldr	r2, [r7, #24]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d305      	bcc.n	800f0f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0f0:	69ba      	ldr	r2, [r7, #24]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d903      	bls.n	800f0fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f0fc:	e113      	b.n	800f326 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f100:	2200      	movs	r2, #0
 800f102:	60bb      	str	r3, [r7, #8]
 800f104:	60fa      	str	r2, [r7, #12]
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10a:	4a84      	ldr	r2, [pc, #528]	@ (800f31c <UART_SetConfig+0x5c4>)
 800f10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f110:	b29b      	uxth	r3, r3
 800f112:	2200      	movs	r2, #0
 800f114:	603b      	str	r3, [r7, #0]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f11c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f120:	f7f1 fd68 	bl	8000bf4 <__aeabi_uldivmod>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4610      	mov	r0, r2
 800f12a:	4619      	mov	r1, r3
 800f12c:	f04f 0200 	mov.w	r2, #0
 800f130:	f04f 0300 	mov.w	r3, #0
 800f134:	020b      	lsls	r3, r1, #8
 800f136:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f13a:	0202      	lsls	r2, r0, #8
 800f13c:	6979      	ldr	r1, [r7, #20]
 800f13e:	6849      	ldr	r1, [r1, #4]
 800f140:	0849      	lsrs	r1, r1, #1
 800f142:	2000      	movs	r0, #0
 800f144:	460c      	mov	r4, r1
 800f146:	4605      	mov	r5, r0
 800f148:	eb12 0804 	adds.w	r8, r2, r4
 800f14c:	eb43 0905 	adc.w	r9, r3, r5
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	469a      	mov	sl, r3
 800f158:	4693      	mov	fp, r2
 800f15a:	4652      	mov	r2, sl
 800f15c:	465b      	mov	r3, fp
 800f15e:	4640      	mov	r0, r8
 800f160:	4649      	mov	r1, r9
 800f162:	f7f1 fd47 	bl	8000bf4 <__aeabi_uldivmod>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	4613      	mov	r3, r2
 800f16c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f174:	d308      	bcc.n	800f188 <UART_SetConfig+0x430>
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f17c:	d204      	bcs.n	800f188 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6a3a      	ldr	r2, [r7, #32]
 800f184:	60da      	str	r2, [r3, #12]
 800f186:	e0ce      	b.n	800f326 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f18e:	e0ca      	b.n	800f326 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	69db      	ldr	r3, [r3, #28]
 800f194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f198:	d166      	bne.n	800f268 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f19a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f19e:	2b08      	cmp	r3, #8
 800f1a0:	d827      	bhi.n	800f1f2 <UART_SetConfig+0x49a>
 800f1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a8 <UART_SetConfig+0x450>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1cd 	.word	0x0800f1cd
 800f1ac:	0800f1d5 	.word	0x0800f1d5
 800f1b0:	0800f1dd 	.word	0x0800f1dd
 800f1b4:	0800f1f3 	.word	0x0800f1f3
 800f1b8:	0800f1e3 	.word	0x0800f1e3
 800f1bc:	0800f1f3 	.word	0x0800f1f3
 800f1c0:	0800f1f3 	.word	0x0800f1f3
 800f1c4:	0800f1f3 	.word	0x0800f1f3
 800f1c8:	0800f1eb 	.word	0x0800f1eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1cc:	f7fc fc50 	bl	800ba70 <HAL_RCC_GetPCLK1Freq>
 800f1d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f1d2:	e014      	b.n	800f1fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1d4:	f7fc fc62 	bl	800ba9c <HAL_RCC_GetPCLK2Freq>
 800f1d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f1da:	e010      	b.n	800f1fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1dc:	4b4e      	ldr	r3, [pc, #312]	@ (800f318 <UART_SetConfig+0x5c0>)
 800f1de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f1e0:	e00d      	b.n	800f1fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1e2:	f7fc fbd7 	bl	800b994 <HAL_RCC_GetSysClockFreq>
 800f1e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f1e8:	e009      	b.n	800f1fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f1ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f1f0:	e005      	b.n	800f1fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f1fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 8090 	beq.w	800f326 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f20a:	4a44      	ldr	r2, [pc, #272]	@ (800f31c <UART_SetConfig+0x5c4>)
 800f20c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f210:	461a      	mov	r2, r3
 800f212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f214:	fbb3 f3f2 	udiv	r3, r3, r2
 800f218:	005a      	lsls	r2, r3, #1
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	085b      	lsrs	r3, r3, #1
 800f220:	441a      	add	r2, r3
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	fbb2 f3f3 	udiv	r3, r2, r3
 800f22a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	2b0f      	cmp	r3, #15
 800f230:	d916      	bls.n	800f260 <UART_SetConfig+0x508>
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f238:	d212      	bcs.n	800f260 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	f023 030f 	bic.w	r3, r3, #15
 800f242:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f244:	6a3b      	ldr	r3, [r7, #32]
 800f246:	085b      	lsrs	r3, r3, #1
 800f248:	b29b      	uxth	r3, r3
 800f24a:	f003 0307 	and.w	r3, r3, #7
 800f24e:	b29a      	uxth	r2, r3
 800f250:	8bfb      	ldrh	r3, [r7, #30]
 800f252:	4313      	orrs	r3, r2
 800f254:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	8bfa      	ldrh	r2, [r7, #30]
 800f25c:	60da      	str	r2, [r3, #12]
 800f25e:	e062      	b.n	800f326 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f266:	e05e      	b.n	800f326 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f268:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f26c:	2b08      	cmp	r3, #8
 800f26e:	d828      	bhi.n	800f2c2 <UART_SetConfig+0x56a>
 800f270:	a201      	add	r2, pc, #4	@ (adr r2, 800f278 <UART_SetConfig+0x520>)
 800f272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f276:	bf00      	nop
 800f278:	0800f29d 	.word	0x0800f29d
 800f27c:	0800f2a5 	.word	0x0800f2a5
 800f280:	0800f2ad 	.word	0x0800f2ad
 800f284:	0800f2c3 	.word	0x0800f2c3
 800f288:	0800f2b3 	.word	0x0800f2b3
 800f28c:	0800f2c3 	.word	0x0800f2c3
 800f290:	0800f2c3 	.word	0x0800f2c3
 800f294:	0800f2c3 	.word	0x0800f2c3
 800f298:	0800f2bb 	.word	0x0800f2bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f29c:	f7fc fbe8 	bl	800ba70 <HAL_RCC_GetPCLK1Freq>
 800f2a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2a2:	e014      	b.n	800f2ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2a4:	f7fc fbfa 	bl	800ba9c <HAL_RCC_GetPCLK2Freq>
 800f2a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2aa:	e010      	b.n	800f2ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2ac:	4b1a      	ldr	r3, [pc, #104]	@ (800f318 <UART_SetConfig+0x5c0>)
 800f2ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2b0:	e00d      	b.n	800f2ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2b2:	f7fc fb6f 	bl	800b994 <HAL_RCC_GetSysClockFreq>
 800f2b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2b8:	e009      	b.n	800f2ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2c0:	e005      	b.n	800f2ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f2cc:	bf00      	nop
    }

    if (pclk != 0U)
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d028      	beq.n	800f326 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d8:	4a10      	ldr	r2, [pc, #64]	@ (800f31c <UART_SetConfig+0x5c4>)
 800f2da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	085b      	lsrs	r3, r3, #1
 800f2ec:	441a      	add	r2, r3
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	2b0f      	cmp	r3, #15
 800f2fc:	d910      	bls.n	800f320 <UART_SetConfig+0x5c8>
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f304:	d20c      	bcs.n	800f320 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	60da      	str	r2, [r3, #12]
 800f310:	e009      	b.n	800f326 <UART_SetConfig+0x5ce>
 800f312:	bf00      	nop
 800f314:	40008000 	.word	0x40008000
 800f318:	00f42400 	.word	0x00f42400
 800f31c:	080128d0 	.word	0x080128d0
      }
      else
      {
        ret = HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2201      	movs	r2, #1
 800f32a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2201      	movs	r2, #1
 800f332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	2200      	movs	r2, #0
 800f33a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2200      	movs	r2, #0
 800f340:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f342:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f346:	4618      	mov	r0, r3
 800f348:	3730      	adds	r7, #48	@ 0x30
 800f34a:	46bd      	mov	sp, r7
 800f34c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f35c:	f003 0308 	and.w	r3, r3, #8
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00a      	beq.n	800f37a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00a      	beq.n	800f39c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	430a      	orrs	r2, r1
 800f39a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a0:	f003 0302 	and.w	r3, r3, #2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d00a      	beq.n	800f3be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c2:	f003 0304 	and.w	r3, r3, #4
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00a      	beq.n	800f3e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	430a      	orrs	r2, r1
 800f3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e4:	f003 0310 	and.w	r3, r3, #16
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00a      	beq.n	800f402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00a      	beq.n	800f424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	430a      	orrs	r2, r1
 800f422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d01a      	beq.n	800f466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f44a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f44e:	d10a      	bne.n	800f466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	430a      	orrs	r2, r1
 800f464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00a      	beq.n	800f488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	430a      	orrs	r2, r1
 800f486:	605a      	str	r2, [r3, #4]
  }
}
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b098      	sub	sp, #96	@ 0x60
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4a4:	f7f9 faca 	bl	8008a3c <HAL_GetTick>
 800f4a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f003 0308 	and.w	r3, r3, #8
 800f4b4:	2b08      	cmp	r3, #8
 800f4b6:	d12f      	bne.n	800f518 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f88e 	bl	800f5e8 <UART_WaitOnFlagUntilTimeout>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d022      	beq.n	800f518 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4f8:	e841 2300 	strex	r3, r2, [r1]
 800f4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e6      	bne.n	800f4d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2220      	movs	r2, #32
 800f508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f514:	2303      	movs	r3, #3
 800f516:	e063      	b.n	800f5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b04      	cmp	r3, #4
 800f524:	d149      	bne.n	800f5ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f526:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f52e:	2200      	movs	r2, #0
 800f530:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f857 	bl	800f5e8 <UART_WaitOnFlagUntilTimeout>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d03c      	beq.n	800f5ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	e853 3f00 	ldrex	r3, [r3]
 800f54c:	623b      	str	r3, [r7, #32]
   return(result);
 800f54e:	6a3b      	ldr	r3, [r7, #32]
 800f550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f55e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f560:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f566:	e841 2300 	strex	r3, r2, [r1]
 800f56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1e6      	bne.n	800f540 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3308      	adds	r3, #8
 800f578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	e853 3f00 	ldrex	r3, [r3]
 800f580:	60fb      	str	r3, [r7, #12]
   return(result);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f023 0301 	bic.w	r3, r3, #1
 800f588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3308      	adds	r3, #8
 800f590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f592:	61fa      	str	r2, [r7, #28]
 800f594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	69b9      	ldr	r1, [r7, #24]
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	e841 2300 	strex	r3, r2, [r1]
 800f59e:	617b      	str	r3, [r7, #20]
   return(result);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e5      	bne.n	800f572 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e012      	b.n	800f5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2220      	movs	r2, #32
 800f5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2220      	movs	r2, #32
 800f5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3758      	adds	r7, #88	@ 0x58
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5f8:	e04f      	b.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f600:	d04b      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f602:	f7f9 fa1b 	bl	8008a3c <HAL_GetTick>
 800f606:	4602      	mov	r2, r0
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d302      	bcc.n	800f618 <UART_WaitOnFlagUntilTimeout+0x30>
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f618:	2303      	movs	r3, #3
 800f61a:	e04e      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f003 0304 	and.w	r3, r3, #4
 800f626:	2b00      	cmp	r3, #0
 800f628:	d037      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2b80      	cmp	r3, #128	@ 0x80
 800f62e:	d034      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b40      	cmp	r3, #64	@ 0x40
 800f634:	d031      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	f003 0308 	and.w	r3, r3, #8
 800f640:	2b08      	cmp	r3, #8
 800f642:	d110      	bne.n	800f666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2208      	movs	r2, #8
 800f64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 f920 	bl	800f892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2208      	movs	r2, #8
 800f656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e029      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f674:	d111      	bne.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f67e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f906 	bl	800f892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2220      	movs	r2, #32
 800f68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f696:	2303      	movs	r3, #3
 800f698:	e00f      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	69da      	ldr	r2, [r3, #28]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	bf0c      	ite	eq
 800f6aa:	2301      	moveq	r3, #1
 800f6ac:	2300      	movne	r3, #0
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d0a0      	beq.n	800f5fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
	...

0800f6c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b096      	sub	sp, #88	@ 0x58
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	88fa      	ldrh	r2, [r7, #6]
 800f6dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2222      	movs	r2, #34	@ 0x22
 800f6ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d02d      	beq.n	800f756 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f700:	4a40      	ldr	r2, [pc, #256]	@ (800f804 <UART_Start_Receive_DMA+0x140>)
 800f702:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f70a:	4a3f      	ldr	r2, [pc, #252]	@ (800f808 <UART_Start_Receive_DMA+0x144>)
 800f70c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f714:	4a3d      	ldr	r2, [pc, #244]	@ (800f80c <UART_Start_Receive_DMA+0x148>)
 800f716:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f71e:	2200      	movs	r2, #0
 800f720:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	3324      	adds	r3, #36	@ 0x24
 800f72e:	4619      	mov	r1, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f734:	461a      	mov	r2, r3
 800f736:	88fb      	ldrh	r3, [r7, #6]
 800f738:	f7fa ffbc 	bl	800a6b4 <HAL_DMA_Start_IT>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d009      	beq.n	800f756 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2210      	movs	r2, #16
 800f746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2220      	movs	r2, #32
 800f74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e051      	b.n	800f7fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	691b      	ldr	r3, [r3, #16]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d018      	beq.n	800f790 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f766:	e853 3f00 	ldrex	r3, [r3]
 800f76a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f76e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f772:	657b      	str	r3, [r7, #84]	@ 0x54
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	461a      	mov	r2, r3
 800f77a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f77e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f780:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f784:	e841 2300 	strex	r3, r2, [r1]
 800f788:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1e6      	bne.n	800f75e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3308      	adds	r3, #8
 800f796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79a:	e853 3f00 	ldrex	r3, [r3]
 800f79e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a2:	f043 0301 	orr.w	r3, r3, #1
 800f7a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3308      	adds	r3, #8
 800f7ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f7b0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f7b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e5      	bne.n	800f790 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	e853 3f00 	ldrex	r3, [r3]
 800f7d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f7e4:	623a      	str	r2, [r7, #32]
 800f7e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e8:	69f9      	ldr	r1, [r7, #28]
 800f7ea:	6a3a      	ldr	r2, [r7, #32]
 800f7ec:	e841 2300 	strex	r3, r2, [r1]
 800f7f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7f2:	69bb      	ldr	r3, [r7, #24]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1e5      	bne.n	800f7c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3758      	adds	r7, #88	@ 0x58
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	0800f95f 	.word	0x0800f95f
 800f808:	0800fa93 	.word	0x0800fa93
 800f80c:	0800fad9 	.word	0x0800fad9

0800f810 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f810:	b480      	push	{r7}
 800f812:	b08f      	sub	sp, #60	@ 0x3c
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81e:	6a3b      	ldr	r3, [r7, #32]
 800f820:	e853 3f00 	ldrex	r3, [r3]
 800f824:	61fb      	str	r3, [r7, #28]
   return(result);
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f838:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f83c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f83e:	e841 2300 	strex	r3, r2, [r1]
 800f842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e6      	bne.n	800f818 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	e853 3f00 	ldrex	r3, [r3]
 800f858:	60bb      	str	r3, [r7, #8]
   return(result);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f860:	633b      	str	r3, [r7, #48]	@ 0x30
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3308      	adds	r3, #8
 800f868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f86a:	61ba      	str	r2, [r7, #24]
 800f86c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86e:	6979      	ldr	r1, [r7, #20]
 800f870:	69ba      	ldr	r2, [r7, #24]
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	613b      	str	r3, [r7, #16]
   return(result);
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e5      	bne.n	800f84a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2220      	movs	r2, #32
 800f882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f886:	bf00      	nop
 800f888:	373c      	adds	r7, #60	@ 0x3c
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr

0800f892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f892:	b480      	push	{r7}
 800f894:	b095      	sub	sp, #84	@ 0x54
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a2:	e853 3f00 	ldrex	r3, [r3]
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8c0:	e841 2300 	strex	r3, r2, [r1]
 800f8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1e6      	bne.n	800f89a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	e853 3f00 	ldrex	r3, [r3]
 800f8da:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f8e2:	f023 0301 	bic.w	r3, r3, #1
 800f8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8f8:	e841 2300 	strex	r3, r2, [r1]
 800f8fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1e3      	bne.n	800f8cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d118      	bne.n	800f93e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	60bb      	str	r3, [r7, #8]
   return(result);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	f023 0310 	bic.w	r3, r3, #16
 800f920:	647b      	str	r3, [r7, #68]	@ 0x44
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f92a:	61bb      	str	r3, [r7, #24]
 800f92c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92e:	6979      	ldr	r1, [r7, #20]
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	e841 2300 	strex	r3, r2, [r1]
 800f936:	613b      	str	r3, [r7, #16]
   return(result);
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1e6      	bne.n	800f90c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f952:	bf00      	nop
 800f954:	3754      	adds	r7, #84	@ 0x54
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b09c      	sub	sp, #112	@ 0x70
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f003 0320 	and.w	r3, r3, #32
 800f976:	2b00      	cmp	r3, #0
 800f978:	d171      	bne.n	800fa5e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800f97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f97c:	2200      	movs	r2, #0
 800f97e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f98a:	e853 3f00 	ldrex	r3, [r3]
 800f98e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f992:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f996:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f9a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f9a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f9a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f9a8:	e841 2300 	strex	r3, r2, [r1]
 800f9ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1e6      	bne.n	800f982 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9be:	e853 3f00 	ldrex	r3, [r3]
 800f9c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9c6:	f023 0301 	bic.w	r3, r3, #1
 800f9ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800f9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f9d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f9d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9dc:	e841 2300 	strex	r3, r2, [r1]
 800f9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1e5      	bne.n	800f9b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	623b      	str	r3, [r7, #32]
   return(result);
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800fa00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3308      	adds	r3, #8
 800fa06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fa08:	633a      	str	r2, [r7, #48]	@ 0x30
 800fa0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e5      	bne.n	800f9e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa1e:	2220      	movs	r2, #32
 800fa20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d118      	bne.n	800fa5e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	e853 3f00 	ldrex	r3, [r3]
 800fa38:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f023 0310 	bic.w	r3, r3, #16
 800fa40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa4a:	61fb      	str	r3, [r7, #28]
 800fa4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4e:	69b9      	ldr	r1, [r7, #24]
 800fa50:	69fa      	ldr	r2, [r7, #28]
 800fa52:	e841 2300 	strex	r3, r2, [r1]
 800fa56:	617b      	str	r3, [r7, #20]
   return(result);
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e6      	bne.n	800fa2c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa60:	2200      	movs	r2, #0
 800fa62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d109      	bne.n	800fa80 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800fa6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fa72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa74:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fa78:	4611      	mov	r1, r2
 800fa7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa7c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa7e:	e004      	b.n	800fa8a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800fa80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa88:	4798      	blx	r3
}
 800fa8a:	bf00      	nop
 800fa8c:	3770      	adds	r7, #112	@ 0x70
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b084      	sub	sp, #16
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2201      	movs	r2, #1
 800faa4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d10b      	bne.n	800fac6 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800faba:	0852      	lsrs	r2, r2, #1
 800fabc:	b292      	uxth	r2, r2
 800fabe:	4611      	mov	r1, r2
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fac4:	e004      	b.n	800fad0 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	4798      	blx	r3
}
 800fad0:	bf00      	nop
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fae4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800faec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faf4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb00:	2b80      	cmp	r3, #128	@ 0x80
 800fb02:	d109      	bne.n	800fb18 <UART_DMAError+0x40>
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	2b21      	cmp	r3, #33	@ 0x21
 800fb08:	d106      	bne.n	800fb18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800fb12:	6978      	ldr	r0, [r7, #20]
 800fb14:	f7ff fe7c 	bl	800f810 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb22:	2b40      	cmp	r3, #64	@ 0x40
 800fb24:	d109      	bne.n	800fb3a <UART_DMAError+0x62>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b22      	cmp	r3, #34	@ 0x22
 800fb2a:	d106      	bne.n	800fb3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800fb34:	6978      	ldr	r0, [r7, #20]
 800fb36:	f7ff feac 	bl	800f892 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb40:	f043 0210 	orr.w	r2, r3, #16
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fb50:	6978      	ldr	r0, [r7, #20]
 800fb52:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb54:	bf00      	nop
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb7c:	bf00      	nop
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	e853 3f00 	ldrex	r3, [r3]
 800fb98:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fba0:	61fb      	str	r3, [r7, #28]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	61bb      	str	r3, [r7, #24]
 800fbac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbae:	6979      	ldr	r1, [r7, #20]
 800fbb0:	69ba      	ldr	r2, [r7, #24]
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	613b      	str	r3, [r7, #16]
   return(result);
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e6      	bne.n	800fb8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2220      	movs	r2, #32
 800fbc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbd6:	bf00      	nop
 800fbd8:	3720      	adds	r7, #32
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fbde:	b480      	push	{r7}
 800fbe0:	b083      	sub	sp, #12
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fbe6:	bf00      	nop
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b083      	sub	sp, #12
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fbfa:	bf00      	nop
 800fbfc:	370c      	adds	r7, #12
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fc0e:	bf00      	nop
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b085      	sub	sp, #20
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d101      	bne.n	800fc30 <HAL_UARTEx_DisableFifoMode+0x16>
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	e027      	b.n	800fc80 <HAL_UARTEx_DisableFifoMode+0x66>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2201      	movs	r2, #1
 800fc34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2224      	movs	r2, #36	@ 0x24
 800fc3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f022 0201 	bic.w	r2, r2, #1
 800fc56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fc5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2220      	movs	r2, #32
 800fc72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3714      	adds	r7, #20
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d101      	bne.n	800fca4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fca0:	2302      	movs	r3, #2
 800fca2:	e02d      	b.n	800fd00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2224      	movs	r2, #36	@ 0x24
 800fcb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f022 0201 	bic.w	r2, r2, #1
 800fcca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	430a      	orrs	r2, r1
 800fcde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f84f 	bl	800fd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2220      	movs	r2, #32
 800fcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d101      	bne.n	800fd20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	e02d      	b.n	800fd7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2224      	movs	r2, #36	@ 0x24
 800fd2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f022 0201 	bic.w	r2, r2, #1
 800fd46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	430a      	orrs	r2, r1
 800fd5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f811 	bl	800fd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2220      	movs	r2, #32
 800fd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd7a:	2300      	movs	r3, #0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3710      	adds	r7, #16
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d108      	bne.n	800fda6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fda4:	e031      	b.n	800fe0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fda6:	2308      	movs	r3, #8
 800fda8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdaa:	2308      	movs	r3, #8
 800fdac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	0e5b      	lsrs	r3, r3, #25
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	f003 0307 	and.w	r3, r3, #7
 800fdbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	0f5b      	lsrs	r3, r3, #29
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	f003 0307 	and.w	r3, r3, #7
 800fdcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdce:	7bbb      	ldrb	r3, [r7, #14]
 800fdd0:	7b3a      	ldrb	r2, [r7, #12]
 800fdd2:	4911      	ldr	r1, [pc, #68]	@ (800fe18 <UARTEx_SetNbDataToProcess+0x94>)
 800fdd4:	5c8a      	ldrb	r2, [r1, r2]
 800fdd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdda:	7b3a      	ldrb	r2, [r7, #12]
 800fddc:	490f      	ldr	r1, [pc, #60]	@ (800fe1c <UARTEx_SetNbDataToProcess+0x98>)
 800fdde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fde0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
 800fdee:	7b7a      	ldrb	r2, [r7, #13]
 800fdf0:	4909      	ldr	r1, [pc, #36]	@ (800fe18 <UARTEx_SetNbDataToProcess+0x94>)
 800fdf2:	5c8a      	ldrb	r2, [r1, r2]
 800fdf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fdf8:	7b7a      	ldrb	r2, [r7, #13]
 800fdfa:	4908      	ldr	r1, [pc, #32]	@ (800fe1c <UARTEx_SetNbDataToProcess+0x98>)
 800fdfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdfe:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe02:	b29a      	uxth	r2, r3
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe0a:	bf00      	nop
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	080128e8 	.word	0x080128e8
 800fe1c:	080128f0 	.word	0x080128f0

0800fe20 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b08b      	sub	sp, #44	@ 0x2c
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	885b      	ldrh	r3, [r3, #2]
 800fe48:	fb02 f303 	mul.w	r3, r2, r3
 800fe4c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800fe52:	e013      	b.n	800fe7c <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800fe54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe56:	1d1a      	adds	r2, r3, #4
 800fe58:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe5a:	ed93 7a00 	vldr	s14, [r3]
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	1d1a      	adds	r2, r3, #4
 800fe62:	623a      	str	r2, [r7, #32]
 800fe64:	edd3 7a00 	vldr	s15, [r3]
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	1d1a      	adds	r2, r3, #4
 800fe6c:	61fa      	str	r2, [r7, #28]
 800fe6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe72:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1e8      	bne.n	800fe54 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fe82:	2300      	movs	r3, #0
 800fe84:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800fe86:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	372c      	adds	r7, #44	@ 0x2c
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr

0800fe96 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800fe96:	b480      	push	{r7}
 800fe98:	b085      	sub	sp, #20
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	60f8      	str	r0, [r7, #12]
 800fe9e:	607b      	str	r3, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	817b      	strh	r3, [r7, #10]
 800fea4:	4613      	mov	r3, r2
 800fea6:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	897a      	ldrh	r2, [r7, #10]
 800feac:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	893a      	ldrh	r2, [r7, #8]
 800feb2:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
}
 800feba:	bf00      	nop
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800fec6:	b480      	push	{r7}
 800fec8:	b0bb      	sub	sp, #236	@ 0xec
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	885b      	ldrh	r3, [r3, #2]
 800fee6:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800fee8:	f04f 0300 	mov.w	r3, #0
 800feec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fef0:	f04f 0300 	mov.w	r3, #0
 800fef4:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800fef6:	2300      	movs	r3, #0
 800fef8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800fefc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fefe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ff02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ff08:	e03b      	b.n	800ff82 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ff0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ff0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ff16:	e00c      	b.n	800ff32 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ff18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff1c:	1d1a      	adds	r2, r3, #4
 800ff1e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ff22:	f04f 0200 	mov.w	r2, #0
 800ff26:	601a      	str	r2, [r3, #0]
        j--;
 800ff28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ff32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1ee      	bne.n	800ff18 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ff3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff3e:	1d1a      	adds	r2, r3, #4
 800ff40:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ff44:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ff48:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ff4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ff4e:	3b01      	subs	r3, #1
 800ff50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ff54:	e00c      	b.n	800ff70 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ff56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff5a:	1d1a      	adds	r2, r3, #4
 800ff5c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ff60:	f04f 0200 	mov.w	r2, #0
 800ff64:	601a      	str	r2, [r3, #0]
        j--;
 800ff66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ff70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1ee      	bne.n	800ff56 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ff78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ff82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1bf      	bne.n	800ff0a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ff90:	e2c7      	b.n	8010522 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ff92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ff96:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	685a      	ldr	r2, [r3, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	885b      	ldrh	r3, [r3, #2]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ffa6:	fb01 f303 	mul.w	r3, r1, r3
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ffb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ffbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ffc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ffc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ffc8:	3301      	adds	r3, #1
 800ffca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ffce:	e02c      	b.n	801002a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685a      	ldr	r2, [r3, #4]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	885b      	ldrh	r3, [r3, #2]
 800ffd8:	4619      	mov	r1, r3
 800ffda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ffde:	fb03 f101 	mul.w	r1, r3, r1
 800ffe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ffe6:	440b      	add	r3, r1
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	4413      	add	r3, r2
 800ffec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800fff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800fff8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800fffc:	eeb0 7ae7 	vabs.f32	s14, s15
 8010000:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010004:	eef0 7ae7 	vabs.f32	s15, s15
 8010008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801000c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010010:	dd06      	ble.n	8010020 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8010012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 801001a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801001c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8010020:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010024:	3301      	adds	r3, #1
 8010026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801002a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801002e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010030:	429a      	cmp	r2, r3
 8010032:	d3cd      	bcc.n	800ffd0 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8010034:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010038:	eef5 7a40 	vcmp.f32	s15, #0.0
 801003c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010040:	f000 809b 	beq.w	801017a <arm_mat_inverse_f32+0x2b4>
 8010044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801004c:	429a      	cmp	r2, r3
 801004e:	f000 8094 	beq.w	801017a <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	885b      	ldrh	r3, [r3, #2]
 8010066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801006a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010074:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010076:	fb03 f202 	mul.w	r2, r3, r2
 801007a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010086:	4413      	add	r3, r2
 8010088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801008c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801008e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010092:	fb03 f202 	mul.w	r2, r3, r2
 8010096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801009a:	4413      	add	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80100a2:	4413      	add	r3, r2
 80100a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80100a8:	2300      	movs	r3, #0
 80100aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80100ae:	e018      	b.n	80100e2 <arm_mat_inverse_f32+0x21c>
 80100b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80100b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80100bc:	1d1a      	adds	r2, r3, #4
 80100be:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80100c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80100c6:	6812      	ldr	r2, [r2, #0]
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80100ce:	1d1a      	adds	r2, r3, #4
 80100d0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80100d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100d6:	601a      	str	r2, [r3, #0]
 80100d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80100dc:	3301      	adds	r3, #1
 80100de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80100e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80100e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100e8:	429a      	cmp	r2, r3
 80100ea:	dbe1      	blt.n	80100b0 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	885b      	ldrh	r3, [r3, #2]
 8010100:	647b      	str	r3, [r7, #68]	@ 0x44
 8010102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010104:	643b      	str	r3, [r7, #64]	@ 0x40
 8010106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010108:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801010a:	fb02 f303 	mul.w	r3, r2, r3
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010114:	4413      	add	r3, r2
 8010116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801011a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801011c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010120:	fb02 f303 	mul.w	r3, r2, r3
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801012a:	4413      	add	r3, r2
 801012c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010130:	2300      	movs	r3, #0
 8010132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010136:	e018      	b.n	801016a <arm_mat_inverse_f32+0x2a4>
 8010138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010144:	1d1a      	adds	r2, r3, #4
 8010146:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801014a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801014e:	6812      	ldr	r2, [r2, #0]
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010156:	1d1a      	adds	r2, r3, #4
 8010158:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801015c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010164:	3301      	adds	r3, #1
 8010166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801016a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801016e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010170:	429a      	cmp	r2, r3
 8010172:	dbe1      	blt.n	8010138 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8010174:	2301      	movs	r3, #1
 8010176:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801017a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801017e:	2b01      	cmp	r3, #1
 8010180:	d009      	beq.n	8010196 <arm_mat_inverse_f32+0x2d0>
 8010182:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010186:	eef5 7a40 	vcmp.f32	s15, #0.0
 801018a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018e:	d102      	bne.n	8010196 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8010190:	f06f 0304 	mvn.w	r3, #4
 8010194:	e208      	b.n	80105a8 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8010196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801019a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 801019e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101a2:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80101b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80101be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80101c2:	fb03 f202 	mul.w	r2, r3, r2
 80101c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80101ca:	4413      	add	r3, r2
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80101d2:	4413      	add	r3, r2
 80101d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80101d8:	2300      	movs	r3, #0
 80101da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80101de:	e011      	b.n	8010204 <arm_mat_inverse_f32+0x33e>
 80101e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80101e4:	1d1a      	adds	r2, r3, #4
 80101e6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80101ea:	ed93 7a00 	vldr	s14, [r3]
 80101ee:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80101f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101f6:	edc3 7a00 	vstr	s15, [r3]
 80101fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80101fe:	3301      	adds	r3, #1
 8010200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010204:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020a:	429a      	cmp	r2, r3
 801020c:	dbe8      	blt.n	80101e0 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	885b      	ldrh	r3, [r3, #2]
 801021a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801021c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801021e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010224:	fb02 f303 	mul.w	r3, r2, r3
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801022e:	4413      	add	r3, r2
 8010230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010234:	2300      	movs	r3, #0
 8010236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801023a:	e011      	b.n	8010260 <arm_mat_inverse_f32+0x39a>
 801023c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010240:	1d1a      	adds	r2, r3, #4
 8010242:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8010246:	ed93 7a00 	vldr	s14, [r3]
 801024a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801024e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010252:	edc3 7a00 	vstr	s15, [r3]
 8010256:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801025a:	3301      	adds	r3, #1
 801025c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010260:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8010264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010266:	429a      	cmp	r2, r3
 8010268:	dbe8      	blt.n	801023c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8010270:	e0ae      	b.n	80103d0 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	885b      	ldrh	r3, [r3, #2]
 801027a:	4619      	mov	r1, r3
 801027c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010280:	fb03 f101 	mul.w	r1, r3, r1
 8010284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010288:	440b      	add	r3, r1
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8010292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	885b      	ldrh	r3, [r3, #2]
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	697a      	ldr	r2, [r7, #20]
 80102b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	613b      	str	r3, [r7, #16]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80102c2:	fb03 f202 	mul.w	r2, r3, r2
 80102c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80102d2:	4413      	add	r3, r2
 80102d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80102dc:	fb03 f202 	mul.w	r2, r3, r2
 80102e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80102e4:	4413      	add	r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80102ec:	4413      	add	r3, r2
 80102ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102f2:	2300      	movs	r3, #0
 80102f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80102f8:	e01a      	b.n	8010330 <arm_mat_inverse_f32+0x46a>
 80102fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102fe:	1d1a      	adds	r2, r3, #4
 8010300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010304:	ed93 7a00 	vldr	s14, [r3]
 8010308:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801030c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010310:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010314:	1d1a      	adds	r2, r3, #4
 8010316:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801031a:	ed93 7a00 	vldr	s14, [r3]
 801031e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010322:	edc3 7a00 	vstr	s15, [r3]
 8010326:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801032a:	3301      	adds	r3, #1
 801032c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010330:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	429a      	cmp	r2, r3
 8010338:	dbdf      	blt.n	80102fa <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	885b      	ldrh	r3, [r3, #2]
 801034e:	60fb      	str	r3, [r7, #12]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	60bb      	str	r3, [r7, #8]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801035a:	fb02 f303 	mul.w	r3, r2, r3
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010364:	4413      	add	r3, r2
 8010366:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801036e:	fb02 f303 	mul.w	r3, r2, r3
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010378:	4413      	add	r3, r2
 801037a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801037e:	2300      	movs	r3, #0
 8010380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010384:	e01a      	b.n	80103bc <arm_mat_inverse_f32+0x4f6>
 8010386:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801038a:	1d1a      	adds	r2, r3, #4
 801038c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010390:	ed93 7a00 	vldr	s14, [r3]
 8010394:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010398:	ee67 7a27 	vmul.f32	s15, s14, s15
 801039c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80103a0:	1d1a      	adds	r2, r3, #4
 80103a2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80103a6:	ed93 7a00 	vldr	s14, [r3]
 80103aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103ae:	edc3 7a00 	vstr	s15, [r3]
 80103b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103b6:	3301      	adds	r3, #1
 80103b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	dbdf      	blt.n	8010386 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80103c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80103ca:	3301      	adds	r3, #1
 80103cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80103d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80103d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103d6:	429a      	cmp	r2, r3
 80103d8:	f4ff af4b 	bcc.w	8010272 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80103dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103de:	3301      	adds	r3, #1
 80103e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80103e4:	e092      	b.n	801050c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	685a      	ldr	r2, [r3, #4]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	4619      	mov	r1, r3
 80103f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80103f4:	fb03 f101 	mul.w	r1, r3, r1
 80103f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80103fc:	440b      	add	r3, r1
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4413      	add	r3, r2
 8010402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8010406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	677b      	str	r3, [r7, #116]	@ 0x74
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	885b      	ldrh	r3, [r3, #2]
 8010420:	627b      	str	r3, [r7, #36]	@ 0x24
 8010422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	623b      	str	r3, [r7, #32]
 801042c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801042e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010432:	fb03 f202 	mul.w	r2, r3, r2
 8010436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801043a:	4413      	add	r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010440:	4413      	add	r3, r2
 8010442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010446:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010448:	fb03 f202 	mul.w	r2, r3, r2
 801044c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010450:	4413      	add	r3, r2
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010456:	4413      	add	r3, r2
 8010458:	677b      	str	r3, [r7, #116]	@ 0x74
 801045a:	2300      	movs	r3, #0
 801045c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801045e:	e014      	b.n	801048a <arm_mat_inverse_f32+0x5c4>
 8010460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010462:	1d1a      	adds	r2, r3, #4
 8010464:	677a      	str	r2, [r7, #116]	@ 0x74
 8010466:	ed93 7a00 	vldr	s14, [r3]
 801046a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801046e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010474:	1d1a      	adds	r2, r3, #4
 8010476:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010478:	ed93 7a00 	vldr	s14, [r3]
 801047c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010480:	edc3 7a00 	vstr	s15, [r3]
 8010484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010486:	3301      	adds	r3, #1
 8010488:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801048a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	429a      	cmp	r2, r3
 8010490:	dbe6      	blt.n	8010460 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	885b      	ldrh	r3, [r3, #2]
 80104a2:	61fb      	str	r3, [r7, #28]
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	61bb      	str	r3, [r7, #24]
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80104ae:	fb02 f303 	mul.w	r3, r2, r3
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104b6:	4413      	add	r3, r2
 80104b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104be:	fb02 f303 	mul.w	r3, r2, r3
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80104c6:	4413      	add	r3, r2
 80104c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80104ca:	2300      	movs	r3, #0
 80104cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80104ce:	e014      	b.n	80104fa <arm_mat_inverse_f32+0x634>
 80104d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80104d2:	1d1a      	adds	r2, r3, #4
 80104d4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80104d6:	ed93 7a00 	vldr	s14, [r3]
 80104da:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80104de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104e4:	1d1a      	adds	r2, r3, #4
 80104e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104e8:	ed93 7a00 	vldr	s14, [r3]
 80104ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104f0:	edc3 7a00 	vstr	s15, [r3]
 80104f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80104f6:	3301      	adds	r3, #1
 80104f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80104fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	429a      	cmp	r2, r3
 8010500:	dbe6      	blt.n	80104d0 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8010502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010506:	3301      	adds	r3, #1
 8010508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801050c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010512:	429a      	cmp	r2, r3
 8010514:	f4ff af67 	bcc.w	80103e6 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8010518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801051c:	3301      	adds	r3, #1
 801051e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010528:	429a      	cmp	r2, r3
 801052a:	f4ff ad32 	bcc.w	800ff92 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801052e:	2300      	movs	r3, #0
 8010530:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8010534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010538:	2b01      	cmp	r3, #1
 801053a:	d033      	beq.n	80105a4 <arm_mat_inverse_f32+0x6de>
 801053c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010548:	d12c      	bne.n	80105a4 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8010550:	2300      	movs	r3, #0
 8010552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010556:	e010      	b.n	801057a <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8010558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010560:	4413      	add	r3, r2
 8010562:	edd3 7a00 	vldr	s15, [r3]
 8010566:	eef5 7a40 	vcmp.f32	s15, #0.0
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	d10d      	bne.n	801058c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8010570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010574:	3301      	adds	r3, #1
 8010576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801057a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801057c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801057e:	fb02 f303 	mul.w	r3, r2, r3
 8010582:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010586:	429a      	cmp	r2, r3
 8010588:	d3e6      	bcc.n	8010558 <arm_mat_inverse_f32+0x692>
 801058a:	e000      	b.n	801058e <arm_mat_inverse_f32+0x6c8>
            break;
 801058c:	bf00      	nop
      }

      if (i == numRows * numCols)
 801058e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010592:	fb02 f303 	mul.w	r3, r2, r3
 8010596:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801059a:	429a      	cmp	r2, r3
 801059c:	d102      	bne.n	80105a4 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801059e:	23fb      	movs	r3, #251	@ 0xfb
 80105a0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 80105a4:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	37ec      	adds	r7, #236	@ 0xec
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b093      	sub	sp, #76	@ 0x4c
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	885b      	ldrh	r3, [r3, #2]
 80105e8:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	885b      	ldrh	r3, [r3, #2]
 80105ee:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80105f0:	2300      	movs	r3, #0
 80105f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80105f4:	8b7b      	ldrh	r3, [r7, #26]
 80105f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80105f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	69fa      	ldr	r2, [r7, #28]
 80105fe:	4413      	add	r3, r2
 8010600:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8010602:	8b3b      	ldrh	r3, [r7, #24]
 8010604:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 801060c:	f04f 0300 	mov.w	r3, #0
 8010610:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8010612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010614:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8010616:	8afb      	ldrh	r3, [r7, #22]
 8010618:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 801061a:	e017      	b.n	801064c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 801061c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801061e:	1d1a      	adds	r2, r3, #4
 8010620:	647a      	str	r2, [r7, #68]	@ 0x44
 8010622:	ed93 7a00 	vldr	s14, [r3]
 8010626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010628:	edd3 7a00 	vldr	s15, [r3]
 801062c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010630:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010638:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 801063c:	8b3b      	ldrh	r3, [r7, #24]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010642:	4413      	add	r3, r2
 8010644:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8010646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010648:	3b01      	subs	r3, #1
 801064a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 801064c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1e4      	bne.n	801061c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8010652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010654:	1d1a      	adds	r2, r3, #4
 8010656:	63ba      	str	r2, [r7, #56]	@ 0x38
 8010658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801065a:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 801065c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065e:	3b01      	subs	r3, #1
 8010660:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8010662:	8b3a      	ldrh	r2, [r7, #24]
 8010664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	6a3a      	ldr	r2, [r7, #32]
 801066c:	4413      	add	r3, r2
 801066e:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8010670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1ca      	bne.n	801060c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8010676:	8b3b      	ldrh	r3, [r7, #24]
 8010678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801067a:	4413      	add	r3, r2
 801067c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 801067e:	8afb      	ldrh	r3, [r7, #22]
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010684:	4413      	add	r3, r2
 8010686:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8010688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801068a:	3b01      	subs	r3, #1
 801068c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 801068e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1b1      	bne.n	80105f8 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010694:	2300      	movs	r3, #0
 8010696:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8010698:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801069c:	4618      	mov	r0, r3
 801069e:	374c      	adds	r7, #76	@ 0x4c
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b08b      	sub	sp, #44	@ 0x2c
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80106b4:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	885b      	ldrh	r3, [r3, #2]
 80106cc:	fb02 f303 	mul.w	r3, r2, r3
 80106d0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80106d6:	e010      	b.n	80106fa <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106da:	1d1a      	adds	r2, r3, #4
 80106dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80106de:	ed93 7a00 	vldr	s14, [r3]
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	1d1a      	adds	r2, r3, #4
 80106e6:	623a      	str	r2, [r7, #32]
 80106e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80106ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106f0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	3b01      	subs	r3, #1
 80106f8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1eb      	bne.n	80106d8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010700:	2300      	movs	r3, #0
 8010702:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8010704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010708:	4618      	mov	r0, r3
 801070a:	372c      	adds	r7, #44	@ 0x2c
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010714:	b480      	push	{r7}
 8010716:	b08b      	sub	sp, #44	@ 0x2c
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	885b      	ldrh	r3, [r3, #2]
 801073c:	fb02 f303 	mul.w	r3, r2, r3
 8010740:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010746:	e013      	b.n	8010770 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8010748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074a:	1d1a      	adds	r2, r3, #4
 801074c:	627a      	str	r2, [r7, #36]	@ 0x24
 801074e:	ed93 7a00 	vldr	s14, [r3]
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	1d1a      	adds	r2, r3, #4
 8010756:	623a      	str	r2, [r7, #32]
 8010758:	edd3 7a00 	vldr	s15, [r3]
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	1d1a      	adds	r2, r3, #4
 8010760:	61fa      	str	r2, [r7, #28]
 8010762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010766:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	3b01      	subs	r3, #1
 801076e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1e8      	bne.n	8010748 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010776:	2300      	movs	r3, #0
 8010778:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801077a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801077e:	4618      	mov	r0, r3
 8010780:	372c      	adds	r7, #44	@ 0x2c
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801078a:	b480      	push	{r7}
 801078c:	b08b      	sub	sp, #44	@ 0x2c
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	885b      	ldrh	r3, [r3, #2]
 80107aa:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80107ac:	89fb      	ldrh	r3, [r7, #14]
 80107ae:	61bb      	str	r3, [r7, #24]
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	693a      	ldr	r2, [r7, #16]
 80107ba:	4413      	add	r3, r2
 80107bc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80107be:	89bb      	ldrh	r3, [r7, #12]
 80107c0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80107c2:	e00d      	b.n	80107e0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80107c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c6:	1d1a      	adds	r2, r3, #4
 80107c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	6a3b      	ldr	r3, [r7, #32]
 80107ce:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80107d0:	89fb      	ldrh	r3, [r7, #14]
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	6a3a      	ldr	r2, [r7, #32]
 80107d6:	4413      	add	r3, r2
 80107d8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	3b01      	subs	r3, #1
 80107de:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1ee      	bne.n	80107c4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	3301      	adds	r3, #1
 80107ea:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	3b01      	subs	r3, #1
 80107f0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d1dd      	bne.n	80107b4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80107f8:	2300      	movs	r3, #0
 80107fa:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80107fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010800:	4618      	mov	r0, r3
 8010802:	372c      	adds	r7, #44	@ 0x2c
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <malloc>:
 801080c:	4b02      	ldr	r3, [pc, #8]	@ (8010818 <malloc+0xc>)
 801080e:	4601      	mov	r1, r0
 8010810:	6818      	ldr	r0, [r3, #0]
 8010812:	f000 b825 	b.w	8010860 <_malloc_r>
 8010816:	bf00      	nop
 8010818:	20000140 	.word	0x20000140

0801081c <sbrk_aligned>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	4e0f      	ldr	r6, [pc, #60]	@ (801085c <sbrk_aligned+0x40>)
 8010820:	460c      	mov	r4, r1
 8010822:	6831      	ldr	r1, [r6, #0]
 8010824:	4605      	mov	r5, r0
 8010826:	b911      	cbnz	r1, 801082e <sbrk_aligned+0x12>
 8010828:	f000 f8ae 	bl	8010988 <_sbrk_r>
 801082c:	6030      	str	r0, [r6, #0]
 801082e:	4621      	mov	r1, r4
 8010830:	4628      	mov	r0, r5
 8010832:	f000 f8a9 	bl	8010988 <_sbrk_r>
 8010836:	1c43      	adds	r3, r0, #1
 8010838:	d103      	bne.n	8010842 <sbrk_aligned+0x26>
 801083a:	f04f 34ff 	mov.w	r4, #4294967295
 801083e:	4620      	mov	r0, r4
 8010840:	bd70      	pop	{r4, r5, r6, pc}
 8010842:	1cc4      	adds	r4, r0, #3
 8010844:	f024 0403 	bic.w	r4, r4, #3
 8010848:	42a0      	cmp	r0, r4
 801084a:	d0f8      	beq.n	801083e <sbrk_aligned+0x22>
 801084c:	1a21      	subs	r1, r4, r0
 801084e:	4628      	mov	r0, r5
 8010850:	f000 f89a 	bl	8010988 <_sbrk_r>
 8010854:	3001      	adds	r0, #1
 8010856:	d1f2      	bne.n	801083e <sbrk_aligned+0x22>
 8010858:	e7ef      	b.n	801083a <sbrk_aligned+0x1e>
 801085a:	bf00      	nop
 801085c:	200021bc 	.word	0x200021bc

08010860 <_malloc_r>:
 8010860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010864:	1ccd      	adds	r5, r1, #3
 8010866:	f025 0503 	bic.w	r5, r5, #3
 801086a:	3508      	adds	r5, #8
 801086c:	2d0c      	cmp	r5, #12
 801086e:	bf38      	it	cc
 8010870:	250c      	movcc	r5, #12
 8010872:	2d00      	cmp	r5, #0
 8010874:	4606      	mov	r6, r0
 8010876:	db01      	blt.n	801087c <_malloc_r+0x1c>
 8010878:	42a9      	cmp	r1, r5
 801087a:	d904      	bls.n	8010886 <_malloc_r+0x26>
 801087c:	230c      	movs	r3, #12
 801087e:	6033      	str	r3, [r6, #0]
 8010880:	2000      	movs	r0, #0
 8010882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801095c <_malloc_r+0xfc>
 801088a:	f000 f869 	bl	8010960 <__malloc_lock>
 801088e:	f8d8 3000 	ldr.w	r3, [r8]
 8010892:	461c      	mov	r4, r3
 8010894:	bb44      	cbnz	r4, 80108e8 <_malloc_r+0x88>
 8010896:	4629      	mov	r1, r5
 8010898:	4630      	mov	r0, r6
 801089a:	f7ff ffbf 	bl	801081c <sbrk_aligned>
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	4604      	mov	r4, r0
 80108a2:	d158      	bne.n	8010956 <_malloc_r+0xf6>
 80108a4:	f8d8 4000 	ldr.w	r4, [r8]
 80108a8:	4627      	mov	r7, r4
 80108aa:	2f00      	cmp	r7, #0
 80108ac:	d143      	bne.n	8010936 <_malloc_r+0xd6>
 80108ae:	2c00      	cmp	r4, #0
 80108b0:	d04b      	beq.n	801094a <_malloc_r+0xea>
 80108b2:	6823      	ldr	r3, [r4, #0]
 80108b4:	4639      	mov	r1, r7
 80108b6:	4630      	mov	r0, r6
 80108b8:	eb04 0903 	add.w	r9, r4, r3
 80108bc:	f000 f864 	bl	8010988 <_sbrk_r>
 80108c0:	4581      	cmp	r9, r0
 80108c2:	d142      	bne.n	801094a <_malloc_r+0xea>
 80108c4:	6821      	ldr	r1, [r4, #0]
 80108c6:	1a6d      	subs	r5, r5, r1
 80108c8:	4629      	mov	r1, r5
 80108ca:	4630      	mov	r0, r6
 80108cc:	f7ff ffa6 	bl	801081c <sbrk_aligned>
 80108d0:	3001      	adds	r0, #1
 80108d2:	d03a      	beq.n	801094a <_malloc_r+0xea>
 80108d4:	6823      	ldr	r3, [r4, #0]
 80108d6:	442b      	add	r3, r5
 80108d8:	6023      	str	r3, [r4, #0]
 80108da:	f8d8 3000 	ldr.w	r3, [r8]
 80108de:	685a      	ldr	r2, [r3, #4]
 80108e0:	bb62      	cbnz	r2, 801093c <_malloc_r+0xdc>
 80108e2:	f8c8 7000 	str.w	r7, [r8]
 80108e6:	e00f      	b.n	8010908 <_malloc_r+0xa8>
 80108e8:	6822      	ldr	r2, [r4, #0]
 80108ea:	1b52      	subs	r2, r2, r5
 80108ec:	d420      	bmi.n	8010930 <_malloc_r+0xd0>
 80108ee:	2a0b      	cmp	r2, #11
 80108f0:	d917      	bls.n	8010922 <_malloc_r+0xc2>
 80108f2:	1961      	adds	r1, r4, r5
 80108f4:	42a3      	cmp	r3, r4
 80108f6:	6025      	str	r5, [r4, #0]
 80108f8:	bf18      	it	ne
 80108fa:	6059      	strne	r1, [r3, #4]
 80108fc:	6863      	ldr	r3, [r4, #4]
 80108fe:	bf08      	it	eq
 8010900:	f8c8 1000 	streq.w	r1, [r8]
 8010904:	5162      	str	r2, [r4, r5]
 8010906:	604b      	str	r3, [r1, #4]
 8010908:	4630      	mov	r0, r6
 801090a:	f000 f82f 	bl	801096c <__malloc_unlock>
 801090e:	f104 000b 	add.w	r0, r4, #11
 8010912:	1d23      	adds	r3, r4, #4
 8010914:	f020 0007 	bic.w	r0, r0, #7
 8010918:	1ac2      	subs	r2, r0, r3
 801091a:	bf1c      	itt	ne
 801091c:	1a1b      	subne	r3, r3, r0
 801091e:	50a3      	strne	r3, [r4, r2]
 8010920:	e7af      	b.n	8010882 <_malloc_r+0x22>
 8010922:	6862      	ldr	r2, [r4, #4]
 8010924:	42a3      	cmp	r3, r4
 8010926:	bf0c      	ite	eq
 8010928:	f8c8 2000 	streq.w	r2, [r8]
 801092c:	605a      	strne	r2, [r3, #4]
 801092e:	e7eb      	b.n	8010908 <_malloc_r+0xa8>
 8010930:	4623      	mov	r3, r4
 8010932:	6864      	ldr	r4, [r4, #4]
 8010934:	e7ae      	b.n	8010894 <_malloc_r+0x34>
 8010936:	463c      	mov	r4, r7
 8010938:	687f      	ldr	r7, [r7, #4]
 801093a:	e7b6      	b.n	80108aa <_malloc_r+0x4a>
 801093c:	461a      	mov	r2, r3
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	42a3      	cmp	r3, r4
 8010942:	d1fb      	bne.n	801093c <_malloc_r+0xdc>
 8010944:	2300      	movs	r3, #0
 8010946:	6053      	str	r3, [r2, #4]
 8010948:	e7de      	b.n	8010908 <_malloc_r+0xa8>
 801094a:	230c      	movs	r3, #12
 801094c:	6033      	str	r3, [r6, #0]
 801094e:	4630      	mov	r0, r6
 8010950:	f000 f80c 	bl	801096c <__malloc_unlock>
 8010954:	e794      	b.n	8010880 <_malloc_r+0x20>
 8010956:	6005      	str	r5, [r0, #0]
 8010958:	e7d6      	b.n	8010908 <_malloc_r+0xa8>
 801095a:	bf00      	nop
 801095c:	200021c0 	.word	0x200021c0

08010960 <__malloc_lock>:
 8010960:	4801      	ldr	r0, [pc, #4]	@ (8010968 <__malloc_lock+0x8>)
 8010962:	f000 b84b 	b.w	80109fc <__retarget_lock_acquire_recursive>
 8010966:	bf00      	nop
 8010968:	20002300 	.word	0x20002300

0801096c <__malloc_unlock>:
 801096c:	4801      	ldr	r0, [pc, #4]	@ (8010974 <__malloc_unlock+0x8>)
 801096e:	f000 b846 	b.w	80109fe <__retarget_lock_release_recursive>
 8010972:	bf00      	nop
 8010974:	20002300 	.word	0x20002300

08010978 <memset>:
 8010978:	4402      	add	r2, r0
 801097a:	4603      	mov	r3, r0
 801097c:	4293      	cmp	r3, r2
 801097e:	d100      	bne.n	8010982 <memset+0xa>
 8010980:	4770      	bx	lr
 8010982:	f803 1b01 	strb.w	r1, [r3], #1
 8010986:	e7f9      	b.n	801097c <memset+0x4>

08010988 <_sbrk_r>:
 8010988:	b538      	push	{r3, r4, r5, lr}
 801098a:	4d06      	ldr	r5, [pc, #24]	@ (80109a4 <_sbrk_r+0x1c>)
 801098c:	2300      	movs	r3, #0
 801098e:	4604      	mov	r4, r0
 8010990:	4608      	mov	r0, r1
 8010992:	602b      	str	r3, [r5, #0]
 8010994:	f7f7 f926 	bl	8007be4 <_sbrk>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d102      	bne.n	80109a2 <_sbrk_r+0x1a>
 801099c:	682b      	ldr	r3, [r5, #0]
 801099e:	b103      	cbz	r3, 80109a2 <_sbrk_r+0x1a>
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	bd38      	pop	{r3, r4, r5, pc}
 80109a4:	200022fc 	.word	0x200022fc

080109a8 <__errno>:
 80109a8:	4b01      	ldr	r3, [pc, #4]	@ (80109b0 <__errno+0x8>)
 80109aa:	6818      	ldr	r0, [r3, #0]
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	20000140 	.word	0x20000140

080109b4 <__libc_init_array>:
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	4d0d      	ldr	r5, [pc, #52]	@ (80109ec <__libc_init_array+0x38>)
 80109b8:	4c0d      	ldr	r4, [pc, #52]	@ (80109f0 <__libc_init_array+0x3c>)
 80109ba:	1b64      	subs	r4, r4, r5
 80109bc:	10a4      	asrs	r4, r4, #2
 80109be:	2600      	movs	r6, #0
 80109c0:	42a6      	cmp	r6, r4
 80109c2:	d109      	bne.n	80109d8 <__libc_init_array+0x24>
 80109c4:	4d0b      	ldr	r5, [pc, #44]	@ (80109f4 <__libc_init_array+0x40>)
 80109c6:	4c0c      	ldr	r4, [pc, #48]	@ (80109f8 <__libc_init_array+0x44>)
 80109c8:	f001 ff32 	bl	8012830 <_init>
 80109cc:	1b64      	subs	r4, r4, r5
 80109ce:	10a4      	asrs	r4, r4, #2
 80109d0:	2600      	movs	r6, #0
 80109d2:	42a6      	cmp	r6, r4
 80109d4:	d105      	bne.n	80109e2 <__libc_init_array+0x2e>
 80109d6:	bd70      	pop	{r4, r5, r6, pc}
 80109d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80109dc:	4798      	blx	r3
 80109de:	3601      	adds	r6, #1
 80109e0:	e7ee      	b.n	80109c0 <__libc_init_array+0xc>
 80109e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80109e6:	4798      	blx	r3
 80109e8:	3601      	adds	r6, #1
 80109ea:	e7f2      	b.n	80109d2 <__libc_init_array+0x1e>
 80109ec:	08012eb0 	.word	0x08012eb0
 80109f0:	08012eb0 	.word	0x08012eb0
 80109f4:	08012eb0 	.word	0x08012eb0
 80109f8:	08012eb4 	.word	0x08012eb4

080109fc <__retarget_lock_acquire_recursive>:
 80109fc:	4770      	bx	lr

080109fe <__retarget_lock_release_recursive>:
 80109fe:	4770      	bx	lr

08010a00 <memcpy>:
 8010a00:	440a      	add	r2, r1
 8010a02:	4291      	cmp	r1, r2
 8010a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a08:	d100      	bne.n	8010a0c <memcpy+0xc>
 8010a0a:	4770      	bx	lr
 8010a0c:	b510      	push	{r4, lr}
 8010a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a16:	4291      	cmp	r1, r2
 8010a18:	d1f9      	bne.n	8010a0e <memcpy+0xe>
 8010a1a:	bd10      	pop	{r4, pc}
 8010a1c:	0000      	movs	r0, r0
	...

08010a20 <cos>:
 8010a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a22:	ec53 2b10 	vmov	r2, r3, d0
 8010a26:	4826      	ldr	r0, [pc, #152]	@ (8010ac0 <cos+0xa0>)
 8010a28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010a2c:	4281      	cmp	r1, r0
 8010a2e:	d806      	bhi.n	8010a3e <cos+0x1e>
 8010a30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010ab8 <cos+0x98>
 8010a34:	b005      	add	sp, #20
 8010a36:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a3a:	f000 b9bd 	b.w	8010db8 <__kernel_cos>
 8010a3e:	4821      	ldr	r0, [pc, #132]	@ (8010ac4 <cos+0xa4>)
 8010a40:	4281      	cmp	r1, r0
 8010a42:	d908      	bls.n	8010a56 <cos+0x36>
 8010a44:	4610      	mov	r0, r2
 8010a46:	4619      	mov	r1, r3
 8010a48:	f7ef fbea 	bl	8000220 <__aeabi_dsub>
 8010a4c:	ec41 0b10 	vmov	d0, r0, r1
 8010a50:	b005      	add	sp, #20
 8010a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a56:	4668      	mov	r0, sp
 8010a58:	f000 fb32 	bl	80110c0 <__ieee754_rem_pio2>
 8010a5c:	f000 0003 	and.w	r0, r0, #3
 8010a60:	2801      	cmp	r0, #1
 8010a62:	d00b      	beq.n	8010a7c <cos+0x5c>
 8010a64:	2802      	cmp	r0, #2
 8010a66:	d015      	beq.n	8010a94 <cos+0x74>
 8010a68:	b9d8      	cbnz	r0, 8010aa2 <cos+0x82>
 8010a6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a6e:	ed9d 0b00 	vldr	d0, [sp]
 8010a72:	f000 f9a1 	bl	8010db8 <__kernel_cos>
 8010a76:	ec51 0b10 	vmov	r0, r1, d0
 8010a7a:	e7e7      	b.n	8010a4c <cos+0x2c>
 8010a7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a80:	ed9d 0b00 	vldr	d0, [sp]
 8010a84:	f000 fa60 	bl	8010f48 <__kernel_sin>
 8010a88:	ec53 2b10 	vmov	r2, r3, d0
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010a92:	e7db      	b.n	8010a4c <cos+0x2c>
 8010a94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a98:	ed9d 0b00 	vldr	d0, [sp]
 8010a9c:	f000 f98c 	bl	8010db8 <__kernel_cos>
 8010aa0:	e7f2      	b.n	8010a88 <cos+0x68>
 8010aa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aa6:	ed9d 0b00 	vldr	d0, [sp]
 8010aaa:	2001      	movs	r0, #1
 8010aac:	f000 fa4c 	bl	8010f48 <__kernel_sin>
 8010ab0:	e7e1      	b.n	8010a76 <cos+0x56>
 8010ab2:	bf00      	nop
 8010ab4:	f3af 8000 	nop.w
	...
 8010ac0:	3fe921fb 	.word	0x3fe921fb
 8010ac4:	7fefffff 	.word	0x7fefffff

08010ac8 <sin>:
 8010ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aca:	ec53 2b10 	vmov	r2, r3, d0
 8010ace:	4826      	ldr	r0, [pc, #152]	@ (8010b68 <sin+0xa0>)
 8010ad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010ad4:	4281      	cmp	r1, r0
 8010ad6:	d807      	bhi.n	8010ae8 <sin+0x20>
 8010ad8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010b60 <sin+0x98>
 8010adc:	2000      	movs	r0, #0
 8010ade:	b005      	add	sp, #20
 8010ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ae4:	f000 ba30 	b.w	8010f48 <__kernel_sin>
 8010ae8:	4820      	ldr	r0, [pc, #128]	@ (8010b6c <sin+0xa4>)
 8010aea:	4281      	cmp	r1, r0
 8010aec:	d908      	bls.n	8010b00 <sin+0x38>
 8010aee:	4610      	mov	r0, r2
 8010af0:	4619      	mov	r1, r3
 8010af2:	f7ef fb95 	bl	8000220 <__aeabi_dsub>
 8010af6:	ec41 0b10 	vmov	d0, r0, r1
 8010afa:	b005      	add	sp, #20
 8010afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b00:	4668      	mov	r0, sp
 8010b02:	f000 fadd 	bl	80110c0 <__ieee754_rem_pio2>
 8010b06:	f000 0003 	and.w	r0, r0, #3
 8010b0a:	2801      	cmp	r0, #1
 8010b0c:	d00c      	beq.n	8010b28 <sin+0x60>
 8010b0e:	2802      	cmp	r0, #2
 8010b10:	d011      	beq.n	8010b36 <sin+0x6e>
 8010b12:	b9e8      	cbnz	r0, 8010b50 <sin+0x88>
 8010b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b18:	ed9d 0b00 	vldr	d0, [sp]
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	f000 fa13 	bl	8010f48 <__kernel_sin>
 8010b22:	ec51 0b10 	vmov	r0, r1, d0
 8010b26:	e7e6      	b.n	8010af6 <sin+0x2e>
 8010b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b2c:	ed9d 0b00 	vldr	d0, [sp]
 8010b30:	f000 f942 	bl	8010db8 <__kernel_cos>
 8010b34:	e7f5      	b.n	8010b22 <sin+0x5a>
 8010b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b3a:	ed9d 0b00 	vldr	d0, [sp]
 8010b3e:	2001      	movs	r0, #1
 8010b40:	f000 fa02 	bl	8010f48 <__kernel_sin>
 8010b44:	ec53 2b10 	vmov	r2, r3, d0
 8010b48:	4610      	mov	r0, r2
 8010b4a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010b4e:	e7d2      	b.n	8010af6 <sin+0x2e>
 8010b50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b54:	ed9d 0b00 	vldr	d0, [sp]
 8010b58:	f000 f92e 	bl	8010db8 <__kernel_cos>
 8010b5c:	e7f2      	b.n	8010b44 <sin+0x7c>
 8010b5e:	bf00      	nop
	...
 8010b68:	3fe921fb 	.word	0x3fe921fb
 8010b6c:	7fefffff 	.word	0x7fefffff

08010b70 <fmodf>:
 8010b70:	b508      	push	{r3, lr}
 8010b72:	ed2d 8b02 	vpush	{d8}
 8010b76:	eef0 8a40 	vmov.f32	s17, s0
 8010b7a:	eeb0 8a60 	vmov.f32	s16, s1
 8010b7e:	f000 fd43 	bl	8011608 <__ieee754_fmodf>
 8010b82:	eef4 8a48 	vcmp.f32	s17, s16
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	d60c      	bvs.n	8010ba6 <fmodf+0x36>
 8010b8c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010bac <fmodf+0x3c>
 8010b90:	eeb4 8a68 	vcmp.f32	s16, s17
 8010b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b98:	d105      	bne.n	8010ba6 <fmodf+0x36>
 8010b9a:	f7ff ff05 	bl	80109a8 <__errno>
 8010b9e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010ba2:	2321      	movs	r3, #33	@ 0x21
 8010ba4:	6003      	str	r3, [r0, #0]
 8010ba6:	ecbd 8b02 	vpop	{d8}
 8010baa:	bd08      	pop	{r3, pc}
 8010bac:	00000000 	.word	0x00000000

08010bb0 <sqrtf>:
 8010bb0:	b508      	push	{r3, lr}
 8010bb2:	ed2d 8b02 	vpush	{d8}
 8010bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8010bba:	f000 f8f7 	bl	8010dac <__ieee754_sqrtf>
 8010bbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8010bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc6:	d60c      	bvs.n	8010be2 <sqrtf+0x32>
 8010bc8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010be8 <sqrtf+0x38>
 8010bcc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd4:	d505      	bpl.n	8010be2 <sqrtf+0x32>
 8010bd6:	f7ff fee7 	bl	80109a8 <__errno>
 8010bda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010bde:	2321      	movs	r3, #33	@ 0x21
 8010be0:	6003      	str	r3, [r0, #0]
 8010be2:	ecbd 8b02 	vpop	{d8}
 8010be6:	bd08      	pop	{r3, pc}
 8010be8:	00000000 	.word	0x00000000

08010bec <cosf>:
 8010bec:	ee10 3a10 	vmov	r3, s0
 8010bf0:	b507      	push	{r0, r1, r2, lr}
 8010bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8010c6c <cosf+0x80>)
 8010bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d806      	bhi.n	8010c0a <cosf+0x1e>
 8010bfc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010c70 <cosf+0x84>
 8010c00:	b003      	add	sp, #12
 8010c02:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c06:	f000 bc5f 	b.w	80114c8 <__kernel_cosf>
 8010c0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c0e:	d304      	bcc.n	8010c1a <cosf+0x2e>
 8010c10:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010c14:	b003      	add	sp, #12
 8010c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c1a:	4668      	mov	r0, sp
 8010c1c:	f000 fd76 	bl	801170c <__ieee754_rem_pio2f>
 8010c20:	f000 0003 	and.w	r0, r0, #3
 8010c24:	2801      	cmp	r0, #1
 8010c26:	d009      	beq.n	8010c3c <cosf+0x50>
 8010c28:	2802      	cmp	r0, #2
 8010c2a:	d010      	beq.n	8010c4e <cosf+0x62>
 8010c2c:	b9b0      	cbnz	r0, 8010c5c <cosf+0x70>
 8010c2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010c32:	ed9d 0a00 	vldr	s0, [sp]
 8010c36:	f000 fc47 	bl	80114c8 <__kernel_cosf>
 8010c3a:	e7eb      	b.n	8010c14 <cosf+0x28>
 8010c3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010c40:	ed9d 0a00 	vldr	s0, [sp]
 8010c44:	f000 fc98 	bl	8011578 <__kernel_sinf>
 8010c48:	eeb1 0a40 	vneg.f32	s0, s0
 8010c4c:	e7e2      	b.n	8010c14 <cosf+0x28>
 8010c4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010c52:	ed9d 0a00 	vldr	s0, [sp]
 8010c56:	f000 fc37 	bl	80114c8 <__kernel_cosf>
 8010c5a:	e7f5      	b.n	8010c48 <cosf+0x5c>
 8010c5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010c60:	ed9d 0a00 	vldr	s0, [sp]
 8010c64:	2001      	movs	r0, #1
 8010c66:	f000 fc87 	bl	8011578 <__kernel_sinf>
 8010c6a:	e7d3      	b.n	8010c14 <cosf+0x28>
 8010c6c:	3f490fd8 	.word	0x3f490fd8
 8010c70:	00000000 	.word	0x00000000

08010c74 <sinf>:
 8010c74:	ee10 3a10 	vmov	r3, s0
 8010c78:	b507      	push	{r0, r1, r2, lr}
 8010c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8010cf8 <sinf+0x84>)
 8010c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d807      	bhi.n	8010c94 <sinf+0x20>
 8010c84:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010cfc <sinf+0x88>
 8010c88:	2000      	movs	r0, #0
 8010c8a:	b003      	add	sp, #12
 8010c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c90:	f000 bc72 	b.w	8011578 <__kernel_sinf>
 8010c94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c98:	d304      	bcc.n	8010ca4 <sinf+0x30>
 8010c9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010c9e:	b003      	add	sp, #12
 8010ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ca4:	4668      	mov	r0, sp
 8010ca6:	f000 fd31 	bl	801170c <__ieee754_rem_pio2f>
 8010caa:	f000 0003 	and.w	r0, r0, #3
 8010cae:	2801      	cmp	r0, #1
 8010cb0:	d00a      	beq.n	8010cc8 <sinf+0x54>
 8010cb2:	2802      	cmp	r0, #2
 8010cb4:	d00f      	beq.n	8010cd6 <sinf+0x62>
 8010cb6:	b9c0      	cbnz	r0, 8010cea <sinf+0x76>
 8010cb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cbc:	ed9d 0a00 	vldr	s0, [sp]
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	f000 fc59 	bl	8011578 <__kernel_sinf>
 8010cc6:	e7ea      	b.n	8010c9e <sinf+0x2a>
 8010cc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ccc:	ed9d 0a00 	vldr	s0, [sp]
 8010cd0:	f000 fbfa 	bl	80114c8 <__kernel_cosf>
 8010cd4:	e7e3      	b.n	8010c9e <sinf+0x2a>
 8010cd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cda:	ed9d 0a00 	vldr	s0, [sp]
 8010cde:	2001      	movs	r0, #1
 8010ce0:	f000 fc4a 	bl	8011578 <__kernel_sinf>
 8010ce4:	eeb1 0a40 	vneg.f32	s0, s0
 8010ce8:	e7d9      	b.n	8010c9e <sinf+0x2a>
 8010cea:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cee:	ed9d 0a00 	vldr	s0, [sp]
 8010cf2:	f000 fbe9 	bl	80114c8 <__kernel_cosf>
 8010cf6:	e7f5      	b.n	8010ce4 <sinf+0x70>
 8010cf8:	3f490fd8 	.word	0x3f490fd8
 8010cfc:	00000000 	.word	0x00000000

08010d00 <fmaxf>:
 8010d00:	b508      	push	{r3, lr}
 8010d02:	ed2d 8b02 	vpush	{d8}
 8010d06:	eeb0 8a40 	vmov.f32	s16, s0
 8010d0a:	eef0 8a60 	vmov.f32	s17, s1
 8010d0e:	f000 f831 	bl	8010d74 <__fpclassifyf>
 8010d12:	b930      	cbnz	r0, 8010d22 <fmaxf+0x22>
 8010d14:	eeb0 8a68 	vmov.f32	s16, s17
 8010d18:	eeb0 0a48 	vmov.f32	s0, s16
 8010d1c:	ecbd 8b02 	vpop	{d8}
 8010d20:	bd08      	pop	{r3, pc}
 8010d22:	eeb0 0a68 	vmov.f32	s0, s17
 8010d26:	f000 f825 	bl	8010d74 <__fpclassifyf>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d0f4      	beq.n	8010d18 <fmaxf+0x18>
 8010d2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d36:	dded      	ble.n	8010d14 <fmaxf+0x14>
 8010d38:	e7ee      	b.n	8010d18 <fmaxf+0x18>

08010d3a <fminf>:
 8010d3a:	b508      	push	{r3, lr}
 8010d3c:	ed2d 8b02 	vpush	{d8}
 8010d40:	eeb0 8a40 	vmov.f32	s16, s0
 8010d44:	eef0 8a60 	vmov.f32	s17, s1
 8010d48:	f000 f814 	bl	8010d74 <__fpclassifyf>
 8010d4c:	b930      	cbnz	r0, 8010d5c <fminf+0x22>
 8010d4e:	eeb0 8a68 	vmov.f32	s16, s17
 8010d52:	eeb0 0a48 	vmov.f32	s0, s16
 8010d56:	ecbd 8b02 	vpop	{d8}
 8010d5a:	bd08      	pop	{r3, pc}
 8010d5c:	eeb0 0a68 	vmov.f32	s0, s17
 8010d60:	f000 f808 	bl	8010d74 <__fpclassifyf>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d0f4      	beq.n	8010d52 <fminf+0x18>
 8010d68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d70:	d5ed      	bpl.n	8010d4e <fminf+0x14>
 8010d72:	e7ee      	b.n	8010d52 <fminf+0x18>

08010d74 <__fpclassifyf>:
 8010d74:	ee10 3a10 	vmov	r3, s0
 8010d78:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010d7c:	d00d      	beq.n	8010d9a <__fpclassifyf+0x26>
 8010d7e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010d82:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010d86:	d30a      	bcc.n	8010d9e <__fpclassifyf+0x2a>
 8010d88:	4b07      	ldr	r3, [pc, #28]	@ (8010da8 <__fpclassifyf+0x34>)
 8010d8a:	1e42      	subs	r2, r0, #1
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d908      	bls.n	8010da2 <__fpclassifyf+0x2e>
 8010d90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010d94:	4258      	negs	r0, r3
 8010d96:	4158      	adcs	r0, r3
 8010d98:	4770      	bx	lr
 8010d9a:	2002      	movs	r0, #2
 8010d9c:	4770      	bx	lr
 8010d9e:	2004      	movs	r0, #4
 8010da0:	4770      	bx	lr
 8010da2:	2003      	movs	r0, #3
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	007ffffe 	.word	0x007ffffe

08010dac <__ieee754_sqrtf>:
 8010dac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010db0:	4770      	bx	lr
 8010db2:	0000      	movs	r0, r0
 8010db4:	0000      	movs	r0, r0
	...

08010db8 <__kernel_cos>:
 8010db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	ec57 6b10 	vmov	r6, r7, d0
 8010dc0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010dc4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010dc8:	ed8d 1b00 	vstr	d1, [sp]
 8010dcc:	d206      	bcs.n	8010ddc <__kernel_cos+0x24>
 8010dce:	4630      	mov	r0, r6
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	f7ef fe77 	bl	8000ac4 <__aeabi_d2iz>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	f000 8088 	beq.w	8010eec <__kernel_cos+0x134>
 8010ddc:	4632      	mov	r2, r6
 8010dde:	463b      	mov	r3, r7
 8010de0:	4630      	mov	r0, r6
 8010de2:	4639      	mov	r1, r7
 8010de4:	f7ef fbd4 	bl	8000590 <__aeabi_dmul>
 8010de8:	4b51      	ldr	r3, [pc, #324]	@ (8010f30 <__kernel_cos+0x178>)
 8010dea:	2200      	movs	r2, #0
 8010dec:	4604      	mov	r4, r0
 8010dee:	460d      	mov	r5, r1
 8010df0:	f7ef fbce 	bl	8000590 <__aeabi_dmul>
 8010df4:	a340      	add	r3, pc, #256	@ (adr r3, 8010ef8 <__kernel_cos+0x140>)
 8010df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfa:	4682      	mov	sl, r0
 8010dfc:	468b      	mov	fp, r1
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fbc5 	bl	8000590 <__aeabi_dmul>
 8010e06:	a33e      	add	r3, pc, #248	@ (adr r3, 8010f00 <__kernel_cos+0x148>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	f7ef fa0a 	bl	8000224 <__adddf3>
 8010e10:	4622      	mov	r2, r4
 8010e12:	462b      	mov	r3, r5
 8010e14:	f7ef fbbc 	bl	8000590 <__aeabi_dmul>
 8010e18:	a33b      	add	r3, pc, #236	@ (adr r3, 8010f08 <__kernel_cos+0x150>)
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	f7ef f9ff 	bl	8000220 <__aeabi_dsub>
 8010e22:	4622      	mov	r2, r4
 8010e24:	462b      	mov	r3, r5
 8010e26:	f7ef fbb3 	bl	8000590 <__aeabi_dmul>
 8010e2a:	a339      	add	r3, pc, #228	@ (adr r3, 8010f10 <__kernel_cos+0x158>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	f7ef f9f8 	bl	8000224 <__adddf3>
 8010e34:	4622      	mov	r2, r4
 8010e36:	462b      	mov	r3, r5
 8010e38:	f7ef fbaa 	bl	8000590 <__aeabi_dmul>
 8010e3c:	a336      	add	r3, pc, #216	@ (adr r3, 8010f18 <__kernel_cos+0x160>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef f9ed 	bl	8000220 <__aeabi_dsub>
 8010e46:	4622      	mov	r2, r4
 8010e48:	462b      	mov	r3, r5
 8010e4a:	f7ef fba1 	bl	8000590 <__aeabi_dmul>
 8010e4e:	a334      	add	r3, pc, #208	@ (adr r3, 8010f20 <__kernel_cos+0x168>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef f9e6 	bl	8000224 <__adddf3>
 8010e58:	4622      	mov	r2, r4
 8010e5a:	462b      	mov	r3, r5
 8010e5c:	f7ef fb98 	bl	8000590 <__aeabi_dmul>
 8010e60:	4622      	mov	r2, r4
 8010e62:	462b      	mov	r3, r5
 8010e64:	f7ef fb94 	bl	8000590 <__aeabi_dmul>
 8010e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	460d      	mov	r5, r1
 8010e70:	4630      	mov	r0, r6
 8010e72:	4639      	mov	r1, r7
 8010e74:	f7ef fb8c 	bl	8000590 <__aeabi_dmul>
 8010e78:	460b      	mov	r3, r1
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f7ef f9ce 	bl	8000220 <__aeabi_dsub>
 8010e84:	4b2b      	ldr	r3, [pc, #172]	@ (8010f34 <__kernel_cos+0x17c>)
 8010e86:	4598      	cmp	r8, r3
 8010e88:	4606      	mov	r6, r0
 8010e8a:	460f      	mov	r7, r1
 8010e8c:	d810      	bhi.n	8010eb0 <__kernel_cos+0xf8>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4650      	mov	r0, sl
 8010e94:	4659      	mov	r1, fp
 8010e96:	f7ef f9c3 	bl	8000220 <__aeabi_dsub>
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4926      	ldr	r1, [pc, #152]	@ (8010f38 <__kernel_cos+0x180>)
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	f7ef f9bd 	bl	8000220 <__aeabi_dsub>
 8010ea6:	ec41 0b10 	vmov	d0, r0, r1
 8010eaa:	b003      	add	sp, #12
 8010eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb0:	4b22      	ldr	r3, [pc, #136]	@ (8010f3c <__kernel_cos+0x184>)
 8010eb2:	4921      	ldr	r1, [pc, #132]	@ (8010f38 <__kernel_cos+0x180>)
 8010eb4:	4598      	cmp	r8, r3
 8010eb6:	bf8c      	ite	hi
 8010eb8:	4d21      	ldrhi	r5, [pc, #132]	@ (8010f40 <__kernel_cos+0x188>)
 8010eba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010ebe:	2400      	movs	r4, #0
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	f7ef f9ab 	bl	8000220 <__aeabi_dsub>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	4680      	mov	r8, r0
 8010ece:	4689      	mov	r9, r1
 8010ed0:	462b      	mov	r3, r5
 8010ed2:	4650      	mov	r0, sl
 8010ed4:	4659      	mov	r1, fp
 8010ed6:	f7ef f9a3 	bl	8000220 <__aeabi_dsub>
 8010eda:	4632      	mov	r2, r6
 8010edc:	463b      	mov	r3, r7
 8010ede:	f7ef f99f 	bl	8000220 <__aeabi_dsub>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	4649      	mov	r1, r9
 8010eea:	e7da      	b.n	8010ea2 <__kernel_cos+0xea>
 8010eec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010f28 <__kernel_cos+0x170>
 8010ef0:	e7db      	b.n	8010eaa <__kernel_cos+0xf2>
 8010ef2:	bf00      	nop
 8010ef4:	f3af 8000 	nop.w
 8010ef8:	be8838d4 	.word	0xbe8838d4
 8010efc:	bda8fae9 	.word	0xbda8fae9
 8010f00:	bdb4b1c4 	.word	0xbdb4b1c4
 8010f04:	3e21ee9e 	.word	0x3e21ee9e
 8010f08:	809c52ad 	.word	0x809c52ad
 8010f0c:	3e927e4f 	.word	0x3e927e4f
 8010f10:	19cb1590 	.word	0x19cb1590
 8010f14:	3efa01a0 	.word	0x3efa01a0
 8010f18:	16c15177 	.word	0x16c15177
 8010f1c:	3f56c16c 	.word	0x3f56c16c
 8010f20:	5555554c 	.word	0x5555554c
 8010f24:	3fa55555 	.word	0x3fa55555
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	3ff00000 	.word	0x3ff00000
 8010f30:	3fe00000 	.word	0x3fe00000
 8010f34:	3fd33332 	.word	0x3fd33332
 8010f38:	3ff00000 	.word	0x3ff00000
 8010f3c:	3fe90000 	.word	0x3fe90000
 8010f40:	3fd20000 	.word	0x3fd20000
 8010f44:	00000000 	.word	0x00000000

08010f48 <__kernel_sin>:
 8010f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4c:	ec55 4b10 	vmov	r4, r5, d0
 8010f50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010f54:	b085      	sub	sp, #20
 8010f56:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010f5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010f5e:	4680      	mov	r8, r0
 8010f60:	d205      	bcs.n	8010f6e <__kernel_sin+0x26>
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	f7ef fdad 	bl	8000ac4 <__aeabi_d2iz>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d052      	beq.n	8011014 <__kernel_sin+0xcc>
 8010f6e:	4622      	mov	r2, r4
 8010f70:	462b      	mov	r3, r5
 8010f72:	4620      	mov	r0, r4
 8010f74:	4629      	mov	r1, r5
 8010f76:	f7ef fb0b 	bl	8000590 <__aeabi_dmul>
 8010f7a:	4682      	mov	sl, r0
 8010f7c:	468b      	mov	fp, r1
 8010f7e:	4602      	mov	r2, r0
 8010f80:	460b      	mov	r3, r1
 8010f82:	4620      	mov	r0, r4
 8010f84:	4629      	mov	r1, r5
 8010f86:	f7ef fb03 	bl	8000590 <__aeabi_dmul>
 8010f8a:	a342      	add	r3, pc, #264	@ (adr r3, 8011094 <__kernel_sin+0x14c>)
 8010f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f90:	e9cd 0100 	strd	r0, r1, [sp]
 8010f94:	4650      	mov	r0, sl
 8010f96:	4659      	mov	r1, fp
 8010f98:	f7ef fafa 	bl	8000590 <__aeabi_dmul>
 8010f9c:	a33f      	add	r3, pc, #252	@ (adr r3, 801109c <__kernel_sin+0x154>)
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	f7ef f93d 	bl	8000220 <__aeabi_dsub>
 8010fa6:	4652      	mov	r2, sl
 8010fa8:	465b      	mov	r3, fp
 8010faa:	f7ef faf1 	bl	8000590 <__aeabi_dmul>
 8010fae:	a33d      	add	r3, pc, #244	@ (adr r3, 80110a4 <__kernel_sin+0x15c>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	f7ef f936 	bl	8000224 <__adddf3>
 8010fb8:	4652      	mov	r2, sl
 8010fba:	465b      	mov	r3, fp
 8010fbc:	f7ef fae8 	bl	8000590 <__aeabi_dmul>
 8010fc0:	a33a      	add	r3, pc, #232	@ (adr r3, 80110ac <__kernel_sin+0x164>)
 8010fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc6:	f7ef f92b 	bl	8000220 <__aeabi_dsub>
 8010fca:	4652      	mov	r2, sl
 8010fcc:	465b      	mov	r3, fp
 8010fce:	f7ef fadf 	bl	8000590 <__aeabi_dmul>
 8010fd2:	a338      	add	r3, pc, #224	@ (adr r3, 80110b4 <__kernel_sin+0x16c>)
 8010fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd8:	f7ef f924 	bl	8000224 <__adddf3>
 8010fdc:	4606      	mov	r6, r0
 8010fde:	460f      	mov	r7, r1
 8010fe0:	f1b8 0f00 	cmp.w	r8, #0
 8010fe4:	d11b      	bne.n	801101e <__kernel_sin+0xd6>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4650      	mov	r0, sl
 8010fec:	4659      	mov	r1, fp
 8010fee:	f7ef facf 	bl	8000590 <__aeabi_dmul>
 8010ff2:	a325      	add	r3, pc, #148	@ (adr r3, 8011088 <__kernel_sin+0x140>)
 8010ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff8:	f7ef f912 	bl	8000220 <__aeabi_dsub>
 8010ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011000:	f7ef fac6 	bl	8000590 <__aeabi_dmul>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	4620      	mov	r0, r4
 801100a:	4629      	mov	r1, r5
 801100c:	f7ef f90a 	bl	8000224 <__adddf3>
 8011010:	4604      	mov	r4, r0
 8011012:	460d      	mov	r5, r1
 8011014:	ec45 4b10 	vmov	d0, r4, r5
 8011018:	b005      	add	sp, #20
 801101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011022:	4b1b      	ldr	r3, [pc, #108]	@ (8011090 <__kernel_sin+0x148>)
 8011024:	2200      	movs	r2, #0
 8011026:	f7ef fab3 	bl	8000590 <__aeabi_dmul>
 801102a:	4632      	mov	r2, r6
 801102c:	4680      	mov	r8, r0
 801102e:	4689      	mov	r9, r1
 8011030:	463b      	mov	r3, r7
 8011032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011036:	f7ef faab 	bl	8000590 <__aeabi_dmul>
 801103a:	4602      	mov	r2, r0
 801103c:	460b      	mov	r3, r1
 801103e:	4640      	mov	r0, r8
 8011040:	4649      	mov	r1, r9
 8011042:	f7ef f8ed 	bl	8000220 <__aeabi_dsub>
 8011046:	4652      	mov	r2, sl
 8011048:	465b      	mov	r3, fp
 801104a:	f7ef faa1 	bl	8000590 <__aeabi_dmul>
 801104e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011052:	f7ef f8e5 	bl	8000220 <__aeabi_dsub>
 8011056:	a30c      	add	r3, pc, #48	@ (adr r3, 8011088 <__kernel_sin+0x140>)
 8011058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105c:	4606      	mov	r6, r0
 801105e:	460f      	mov	r7, r1
 8011060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011064:	f7ef fa94 	bl	8000590 <__aeabi_dmul>
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	4630      	mov	r0, r6
 801106e:	4639      	mov	r1, r7
 8011070:	f7ef f8d8 	bl	8000224 <__adddf3>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	4620      	mov	r0, r4
 801107a:	4629      	mov	r1, r5
 801107c:	f7ef f8d0 	bl	8000220 <__aeabi_dsub>
 8011080:	e7c6      	b.n	8011010 <__kernel_sin+0xc8>
 8011082:	bf00      	nop
 8011084:	f3af 8000 	nop.w
 8011088:	55555549 	.word	0x55555549
 801108c:	3fc55555 	.word	0x3fc55555
 8011090:	3fe00000 	.word	0x3fe00000
 8011094:	5acfd57c 	.word	0x5acfd57c
 8011098:	3de5d93a 	.word	0x3de5d93a
 801109c:	8a2b9ceb 	.word	0x8a2b9ceb
 80110a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80110a4:	57b1fe7d 	.word	0x57b1fe7d
 80110a8:	3ec71de3 	.word	0x3ec71de3
 80110ac:	19c161d5 	.word	0x19c161d5
 80110b0:	3f2a01a0 	.word	0x3f2a01a0
 80110b4:	1110f8a6 	.word	0x1110f8a6
 80110b8:	3f811111 	.word	0x3f811111
 80110bc:	00000000 	.word	0x00000000

080110c0 <__ieee754_rem_pio2>:
 80110c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c4:	ec57 6b10 	vmov	r6, r7, d0
 80110c8:	4bc5      	ldr	r3, [pc, #788]	@ (80113e0 <__ieee754_rem_pio2+0x320>)
 80110ca:	b08d      	sub	sp, #52	@ 0x34
 80110cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80110d0:	4598      	cmp	r8, r3
 80110d2:	4604      	mov	r4, r0
 80110d4:	9704      	str	r7, [sp, #16]
 80110d6:	d807      	bhi.n	80110e8 <__ieee754_rem_pio2+0x28>
 80110d8:	2200      	movs	r2, #0
 80110da:	2300      	movs	r3, #0
 80110dc:	ed80 0b00 	vstr	d0, [r0]
 80110e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110e4:	2500      	movs	r5, #0
 80110e6:	e028      	b.n	801113a <__ieee754_rem_pio2+0x7a>
 80110e8:	4bbe      	ldr	r3, [pc, #760]	@ (80113e4 <__ieee754_rem_pio2+0x324>)
 80110ea:	4598      	cmp	r8, r3
 80110ec:	d878      	bhi.n	80111e0 <__ieee754_rem_pio2+0x120>
 80110ee:	9b04      	ldr	r3, [sp, #16]
 80110f0:	4dbd      	ldr	r5, [pc, #756]	@ (80113e8 <__ieee754_rem_pio2+0x328>)
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	4630      	mov	r0, r6
 80110f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80113a8 <__ieee754_rem_pio2+0x2e8>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	4639      	mov	r1, r7
 80110fe:	dd38      	ble.n	8011172 <__ieee754_rem_pio2+0xb2>
 8011100:	f7ef f88e 	bl	8000220 <__aeabi_dsub>
 8011104:	45a8      	cmp	r8, r5
 8011106:	4606      	mov	r6, r0
 8011108:	460f      	mov	r7, r1
 801110a:	d01a      	beq.n	8011142 <__ieee754_rem_pio2+0x82>
 801110c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80113b0 <__ieee754_rem_pio2+0x2f0>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef f885 	bl	8000220 <__aeabi_dsub>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4680      	mov	r8, r0
 801111c:	4689      	mov	r9, r1
 801111e:	4630      	mov	r0, r6
 8011120:	4639      	mov	r1, r7
 8011122:	f7ef f87d 	bl	8000220 <__aeabi_dsub>
 8011126:	a3a2      	add	r3, pc, #648	@ (adr r3, 80113b0 <__ieee754_rem_pio2+0x2f0>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef f878 	bl	8000220 <__aeabi_dsub>
 8011130:	e9c4 8900 	strd	r8, r9, [r4]
 8011134:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011138:	2501      	movs	r5, #1
 801113a:	4628      	mov	r0, r5
 801113c:	b00d      	add	sp, #52	@ 0x34
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	a39d      	add	r3, pc, #628	@ (adr r3, 80113b8 <__ieee754_rem_pio2+0x2f8>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f86a 	bl	8000220 <__aeabi_dsub>
 801114c:	a39c      	add	r3, pc, #624	@ (adr r3, 80113c0 <__ieee754_rem_pio2+0x300>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	f7ef f863 	bl	8000220 <__aeabi_dsub>
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	4680      	mov	r8, r0
 8011160:	4689      	mov	r9, r1
 8011162:	4630      	mov	r0, r6
 8011164:	4639      	mov	r1, r7
 8011166:	f7ef f85b 	bl	8000220 <__aeabi_dsub>
 801116a:	a395      	add	r3, pc, #596	@ (adr r3, 80113c0 <__ieee754_rem_pio2+0x300>)
 801116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011170:	e7dc      	b.n	801112c <__ieee754_rem_pio2+0x6c>
 8011172:	f7ef f857 	bl	8000224 <__adddf3>
 8011176:	45a8      	cmp	r8, r5
 8011178:	4606      	mov	r6, r0
 801117a:	460f      	mov	r7, r1
 801117c:	d018      	beq.n	80111b0 <__ieee754_rem_pio2+0xf0>
 801117e:	a38c      	add	r3, pc, #560	@ (adr r3, 80113b0 <__ieee754_rem_pio2+0x2f0>)
 8011180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011184:	f7ef f84e 	bl	8000224 <__adddf3>
 8011188:	4602      	mov	r2, r0
 801118a:	460b      	mov	r3, r1
 801118c:	4680      	mov	r8, r0
 801118e:	4689      	mov	r9, r1
 8011190:	4630      	mov	r0, r6
 8011192:	4639      	mov	r1, r7
 8011194:	f7ef f844 	bl	8000220 <__aeabi_dsub>
 8011198:	a385      	add	r3, pc, #532	@ (adr r3, 80113b0 <__ieee754_rem_pio2+0x2f0>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f841 	bl	8000224 <__adddf3>
 80111a2:	f04f 35ff 	mov.w	r5, #4294967295
 80111a6:	e9c4 8900 	strd	r8, r9, [r4]
 80111aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80111ae:	e7c4      	b.n	801113a <__ieee754_rem_pio2+0x7a>
 80111b0:	a381      	add	r3, pc, #516	@ (adr r3, 80113b8 <__ieee754_rem_pio2+0x2f8>)
 80111b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b6:	f7ef f835 	bl	8000224 <__adddf3>
 80111ba:	a381      	add	r3, pc, #516	@ (adr r3, 80113c0 <__ieee754_rem_pio2+0x300>)
 80111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c0:	4606      	mov	r6, r0
 80111c2:	460f      	mov	r7, r1
 80111c4:	f7ef f82e 	bl	8000224 <__adddf3>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4680      	mov	r8, r0
 80111ce:	4689      	mov	r9, r1
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef f824 	bl	8000220 <__aeabi_dsub>
 80111d8:	a379      	add	r3, pc, #484	@ (adr r3, 80113c0 <__ieee754_rem_pio2+0x300>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	e7de      	b.n	801119e <__ieee754_rem_pio2+0xde>
 80111e0:	4b82      	ldr	r3, [pc, #520]	@ (80113ec <__ieee754_rem_pio2+0x32c>)
 80111e2:	4598      	cmp	r8, r3
 80111e4:	f200 80d1 	bhi.w	801138a <__ieee754_rem_pio2+0x2ca>
 80111e8:	f000 f966 	bl	80114b8 <fabs>
 80111ec:	ec57 6b10 	vmov	r6, r7, d0
 80111f0:	a375      	add	r3, pc, #468	@ (adr r3, 80113c8 <__ieee754_rem_pio2+0x308>)
 80111f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f6:	4630      	mov	r0, r6
 80111f8:	4639      	mov	r1, r7
 80111fa:	f7ef f9c9 	bl	8000590 <__aeabi_dmul>
 80111fe:	4b7c      	ldr	r3, [pc, #496]	@ (80113f0 <__ieee754_rem_pio2+0x330>)
 8011200:	2200      	movs	r2, #0
 8011202:	f7ef f80f 	bl	8000224 <__adddf3>
 8011206:	f7ef fc5d 	bl	8000ac4 <__aeabi_d2iz>
 801120a:	4605      	mov	r5, r0
 801120c:	f7ef f956 	bl	80004bc <__aeabi_i2d>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011218:	a363      	add	r3, pc, #396	@ (adr r3, 80113a8 <__ieee754_rem_pio2+0x2e8>)
 801121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121e:	f7ef f9b7 	bl	8000590 <__aeabi_dmul>
 8011222:	4602      	mov	r2, r0
 8011224:	460b      	mov	r3, r1
 8011226:	4630      	mov	r0, r6
 8011228:	4639      	mov	r1, r7
 801122a:	f7ee fff9 	bl	8000220 <__aeabi_dsub>
 801122e:	a360      	add	r3, pc, #384	@ (adr r3, 80113b0 <__ieee754_rem_pio2+0x2f0>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	4682      	mov	sl, r0
 8011236:	468b      	mov	fp, r1
 8011238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801123c:	f7ef f9a8 	bl	8000590 <__aeabi_dmul>
 8011240:	2d1f      	cmp	r5, #31
 8011242:	4606      	mov	r6, r0
 8011244:	460f      	mov	r7, r1
 8011246:	dc0c      	bgt.n	8011262 <__ieee754_rem_pio2+0x1a2>
 8011248:	4b6a      	ldr	r3, [pc, #424]	@ (80113f4 <__ieee754_rem_pio2+0x334>)
 801124a:	1e6a      	subs	r2, r5, #1
 801124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011250:	4543      	cmp	r3, r8
 8011252:	d006      	beq.n	8011262 <__ieee754_rem_pio2+0x1a2>
 8011254:	4632      	mov	r2, r6
 8011256:	463b      	mov	r3, r7
 8011258:	4650      	mov	r0, sl
 801125a:	4659      	mov	r1, fp
 801125c:	f7ee ffe0 	bl	8000220 <__aeabi_dsub>
 8011260:	e00e      	b.n	8011280 <__ieee754_rem_pio2+0x1c0>
 8011262:	463b      	mov	r3, r7
 8011264:	4632      	mov	r2, r6
 8011266:	4650      	mov	r0, sl
 8011268:	4659      	mov	r1, fp
 801126a:	f7ee ffd9 	bl	8000220 <__aeabi_dsub>
 801126e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011272:	9305      	str	r3, [sp, #20]
 8011274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011278:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801127c:	2b10      	cmp	r3, #16
 801127e:	dc02      	bgt.n	8011286 <__ieee754_rem_pio2+0x1c6>
 8011280:	e9c4 0100 	strd	r0, r1, [r4]
 8011284:	e039      	b.n	80112fa <__ieee754_rem_pio2+0x23a>
 8011286:	a34c      	add	r3, pc, #304	@ (adr r3, 80113b8 <__ieee754_rem_pio2+0x2f8>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011290:	f7ef f97e 	bl	8000590 <__aeabi_dmul>
 8011294:	4606      	mov	r6, r0
 8011296:	460f      	mov	r7, r1
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4650      	mov	r0, sl
 801129e:	4659      	mov	r1, fp
 80112a0:	f7ee ffbe 	bl	8000220 <__aeabi_dsub>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4680      	mov	r8, r0
 80112aa:	4689      	mov	r9, r1
 80112ac:	4650      	mov	r0, sl
 80112ae:	4659      	mov	r1, fp
 80112b0:	f7ee ffb6 	bl	8000220 <__aeabi_dsub>
 80112b4:	4632      	mov	r2, r6
 80112b6:	463b      	mov	r3, r7
 80112b8:	f7ee ffb2 	bl	8000220 <__aeabi_dsub>
 80112bc:	a340      	add	r3, pc, #256	@ (adr r3, 80113c0 <__ieee754_rem_pio2+0x300>)
 80112be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c2:	4606      	mov	r6, r0
 80112c4:	460f      	mov	r7, r1
 80112c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ca:	f7ef f961 	bl	8000590 <__aeabi_dmul>
 80112ce:	4632      	mov	r2, r6
 80112d0:	463b      	mov	r3, r7
 80112d2:	f7ee ffa5 	bl	8000220 <__aeabi_dsub>
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	4606      	mov	r6, r0
 80112dc:	460f      	mov	r7, r1
 80112de:	4640      	mov	r0, r8
 80112e0:	4649      	mov	r1, r9
 80112e2:	f7ee ff9d 	bl	8000220 <__aeabi_dsub>
 80112e6:	9a05      	ldr	r2, [sp, #20]
 80112e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	2b31      	cmp	r3, #49	@ 0x31
 80112f0:	dc20      	bgt.n	8011334 <__ieee754_rem_pio2+0x274>
 80112f2:	e9c4 0100 	strd	r0, r1, [r4]
 80112f6:	46c2      	mov	sl, r8
 80112f8:	46cb      	mov	fp, r9
 80112fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80112fe:	4650      	mov	r0, sl
 8011300:	4642      	mov	r2, r8
 8011302:	464b      	mov	r3, r9
 8011304:	4659      	mov	r1, fp
 8011306:	f7ee ff8b 	bl	8000220 <__aeabi_dsub>
 801130a:	463b      	mov	r3, r7
 801130c:	4632      	mov	r2, r6
 801130e:	f7ee ff87 	bl	8000220 <__aeabi_dsub>
 8011312:	9b04      	ldr	r3, [sp, #16]
 8011314:	2b00      	cmp	r3, #0
 8011316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801131a:	f6bf af0e 	bge.w	801113a <__ieee754_rem_pio2+0x7a>
 801131e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011322:	6063      	str	r3, [r4, #4]
 8011324:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011328:	f8c4 8000 	str.w	r8, [r4]
 801132c:	60a0      	str	r0, [r4, #8]
 801132e:	60e3      	str	r3, [r4, #12]
 8011330:	426d      	negs	r5, r5
 8011332:	e702      	b.n	801113a <__ieee754_rem_pio2+0x7a>
 8011334:	a326      	add	r3, pc, #152	@ (adr r3, 80113d0 <__ieee754_rem_pio2+0x310>)
 8011336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801133e:	f7ef f927 	bl	8000590 <__aeabi_dmul>
 8011342:	4606      	mov	r6, r0
 8011344:	460f      	mov	r7, r1
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	4640      	mov	r0, r8
 801134c:	4649      	mov	r1, r9
 801134e:	f7ee ff67 	bl	8000220 <__aeabi_dsub>
 8011352:	4602      	mov	r2, r0
 8011354:	460b      	mov	r3, r1
 8011356:	4682      	mov	sl, r0
 8011358:	468b      	mov	fp, r1
 801135a:	4640      	mov	r0, r8
 801135c:	4649      	mov	r1, r9
 801135e:	f7ee ff5f 	bl	8000220 <__aeabi_dsub>
 8011362:	4632      	mov	r2, r6
 8011364:	463b      	mov	r3, r7
 8011366:	f7ee ff5b 	bl	8000220 <__aeabi_dsub>
 801136a:	a31b      	add	r3, pc, #108	@ (adr r3, 80113d8 <__ieee754_rem_pio2+0x318>)
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011378:	f7ef f90a 	bl	8000590 <__aeabi_dmul>
 801137c:	4632      	mov	r2, r6
 801137e:	463b      	mov	r3, r7
 8011380:	f7ee ff4e 	bl	8000220 <__aeabi_dsub>
 8011384:	4606      	mov	r6, r0
 8011386:	460f      	mov	r7, r1
 8011388:	e764      	b.n	8011254 <__ieee754_rem_pio2+0x194>
 801138a:	4b1b      	ldr	r3, [pc, #108]	@ (80113f8 <__ieee754_rem_pio2+0x338>)
 801138c:	4598      	cmp	r8, r3
 801138e:	d935      	bls.n	80113fc <__ieee754_rem_pio2+0x33c>
 8011390:	4632      	mov	r2, r6
 8011392:	463b      	mov	r3, r7
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7ee ff42 	bl	8000220 <__aeabi_dsub>
 801139c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113a0:	e9c4 0100 	strd	r0, r1, [r4]
 80113a4:	e69e      	b.n	80110e4 <__ieee754_rem_pio2+0x24>
 80113a6:	bf00      	nop
 80113a8:	54400000 	.word	0x54400000
 80113ac:	3ff921fb 	.word	0x3ff921fb
 80113b0:	1a626331 	.word	0x1a626331
 80113b4:	3dd0b461 	.word	0x3dd0b461
 80113b8:	1a600000 	.word	0x1a600000
 80113bc:	3dd0b461 	.word	0x3dd0b461
 80113c0:	2e037073 	.word	0x2e037073
 80113c4:	3ba3198a 	.word	0x3ba3198a
 80113c8:	6dc9c883 	.word	0x6dc9c883
 80113cc:	3fe45f30 	.word	0x3fe45f30
 80113d0:	2e000000 	.word	0x2e000000
 80113d4:	3ba3198a 	.word	0x3ba3198a
 80113d8:	252049c1 	.word	0x252049c1
 80113dc:	397b839a 	.word	0x397b839a
 80113e0:	3fe921fb 	.word	0x3fe921fb
 80113e4:	4002d97b 	.word	0x4002d97b
 80113e8:	3ff921fb 	.word	0x3ff921fb
 80113ec:	413921fb 	.word	0x413921fb
 80113f0:	3fe00000 	.word	0x3fe00000
 80113f4:	080128f8 	.word	0x080128f8
 80113f8:	7fefffff 	.word	0x7fefffff
 80113fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011400:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011404:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011408:	4630      	mov	r0, r6
 801140a:	460f      	mov	r7, r1
 801140c:	f7ef fb5a 	bl	8000ac4 <__aeabi_d2iz>
 8011410:	f7ef f854 	bl	80004bc <__aeabi_i2d>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	4630      	mov	r0, r6
 801141a:	4639      	mov	r1, r7
 801141c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011420:	f7ee fefe 	bl	8000220 <__aeabi_dsub>
 8011424:	4b22      	ldr	r3, [pc, #136]	@ (80114b0 <__ieee754_rem_pio2+0x3f0>)
 8011426:	2200      	movs	r2, #0
 8011428:	f7ef f8b2 	bl	8000590 <__aeabi_dmul>
 801142c:	460f      	mov	r7, r1
 801142e:	4606      	mov	r6, r0
 8011430:	f7ef fb48 	bl	8000ac4 <__aeabi_d2iz>
 8011434:	f7ef f842 	bl	80004bc <__aeabi_i2d>
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	4630      	mov	r0, r6
 801143e:	4639      	mov	r1, r7
 8011440:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011444:	f7ee feec 	bl	8000220 <__aeabi_dsub>
 8011448:	4b19      	ldr	r3, [pc, #100]	@ (80114b0 <__ieee754_rem_pio2+0x3f0>)
 801144a:	2200      	movs	r2, #0
 801144c:	f7ef f8a0 	bl	8000590 <__aeabi_dmul>
 8011450:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011454:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011458:	f04f 0803 	mov.w	r8, #3
 801145c:	2600      	movs	r6, #0
 801145e:	2700      	movs	r7, #0
 8011460:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011464:	4632      	mov	r2, r6
 8011466:	463b      	mov	r3, r7
 8011468:	46c2      	mov	sl, r8
 801146a:	f108 38ff 	add.w	r8, r8, #4294967295
 801146e:	f7ef faf7 	bl	8000a60 <__aeabi_dcmpeq>
 8011472:	2800      	cmp	r0, #0
 8011474:	d1f4      	bne.n	8011460 <__ieee754_rem_pio2+0x3a0>
 8011476:	4b0f      	ldr	r3, [pc, #60]	@ (80114b4 <__ieee754_rem_pio2+0x3f4>)
 8011478:	9301      	str	r3, [sp, #4]
 801147a:	2302      	movs	r3, #2
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462a      	mov	r2, r5
 8011480:	4653      	mov	r3, sl
 8011482:	4621      	mov	r1, r4
 8011484:	a806      	add	r0, sp, #24
 8011486:	f000 fb5b 	bl	8011b40 <__kernel_rem_pio2>
 801148a:	9b04      	ldr	r3, [sp, #16]
 801148c:	2b00      	cmp	r3, #0
 801148e:	4605      	mov	r5, r0
 8011490:	f6bf ae53 	bge.w	801113a <__ieee754_rem_pio2+0x7a>
 8011494:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011498:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801149c:	e9c4 2300 	strd	r2, r3, [r4]
 80114a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80114a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80114ac:	e740      	b.n	8011330 <__ieee754_rem_pio2+0x270>
 80114ae:	bf00      	nop
 80114b0:	41700000 	.word	0x41700000
 80114b4:	08012978 	.word	0x08012978

080114b8 <fabs>:
 80114b8:	ec51 0b10 	vmov	r0, r1, d0
 80114bc:	4602      	mov	r2, r0
 80114be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80114c2:	ec43 2b10 	vmov	d0, r2, r3
 80114c6:	4770      	bx	lr

080114c8 <__kernel_cosf>:
 80114c8:	ee10 3a10 	vmov	r3, s0
 80114cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80114d4:	eef0 6a40 	vmov.f32	s13, s0
 80114d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80114dc:	d204      	bcs.n	80114e8 <__kernel_cosf+0x20>
 80114de:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80114e2:	ee17 2a90 	vmov	r2, s15
 80114e6:	b342      	cbz	r2, 801153a <__kernel_cosf+0x72>
 80114e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80114ec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011558 <__kernel_cosf+0x90>
 80114f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801155c <__kernel_cosf+0x94>
 80114f4:	4a1a      	ldr	r2, [pc, #104]	@ (8011560 <__kernel_cosf+0x98>)
 80114f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80114fa:	4293      	cmp	r3, r2
 80114fc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011564 <__kernel_cosf+0x9c>
 8011500:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011504:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011568 <__kernel_cosf+0xa0>
 8011508:	eea7 6a87 	vfma.f32	s12, s15, s14
 801150c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801156c <__kernel_cosf+0xa4>
 8011510:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011514:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011570 <__kernel_cosf+0xa8>
 8011518:	eea7 6a87 	vfma.f32	s12, s15, s14
 801151c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011520:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011524:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011528:	eee7 0a06 	vfma.f32	s1, s14, s12
 801152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011530:	d804      	bhi.n	801153c <__kernel_cosf+0x74>
 8011532:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011536:	ee30 0a67 	vsub.f32	s0, s0, s15
 801153a:	4770      	bx	lr
 801153c:	4a0d      	ldr	r2, [pc, #52]	@ (8011574 <__kernel_cosf+0xac>)
 801153e:	4293      	cmp	r3, r2
 8011540:	bf9a      	itte	ls
 8011542:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011546:	ee07 3a10 	vmovls	s14, r3
 801154a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801154e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011556:	e7ec      	b.n	8011532 <__kernel_cosf+0x6a>
 8011558:	ad47d74e 	.word	0xad47d74e
 801155c:	310f74f6 	.word	0x310f74f6
 8011560:	3e999999 	.word	0x3e999999
 8011564:	b493f27c 	.word	0xb493f27c
 8011568:	37d00d01 	.word	0x37d00d01
 801156c:	bab60b61 	.word	0xbab60b61
 8011570:	3d2aaaab 	.word	0x3d2aaaab
 8011574:	3f480000 	.word	0x3f480000

08011578 <__kernel_sinf>:
 8011578:	ee10 3a10 	vmov	r3, s0
 801157c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011580:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011584:	d204      	bcs.n	8011590 <__kernel_sinf+0x18>
 8011586:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801158a:	ee17 3a90 	vmov	r3, s15
 801158e:	b35b      	cbz	r3, 80115e8 <__kernel_sinf+0x70>
 8011590:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011594:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80115ec <__kernel_sinf+0x74>
 8011598:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80115f0 <__kernel_sinf+0x78>
 801159c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80115a0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80115f4 <__kernel_sinf+0x7c>
 80115a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115a8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80115f8 <__kernel_sinf+0x80>
 80115ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80115b0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80115fc <__kernel_sinf+0x84>
 80115b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80115b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115bc:	b930      	cbnz	r0, 80115cc <__kernel_sinf+0x54>
 80115be:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011600 <__kernel_sinf+0x88>
 80115c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80115c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80115ca:	4770      	bx	lr
 80115cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80115d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80115d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80115d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80115dc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011604 <__kernel_sinf+0x8c>
 80115e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80115e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80115f0:	b2d72f34 	.word	0xb2d72f34
 80115f4:	3638ef1b 	.word	0x3638ef1b
 80115f8:	b9500d01 	.word	0xb9500d01
 80115fc:	3c088889 	.word	0x3c088889
 8011600:	be2aaaab 	.word	0xbe2aaaab
 8011604:	3e2aaaab 	.word	0x3e2aaaab

08011608 <__ieee754_fmodf>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	ee10 6a90 	vmov	r6, s1
 801160e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011612:	1e5a      	subs	r2, r3, #1
 8011614:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011618:	d206      	bcs.n	8011628 <__ieee754_fmodf+0x20>
 801161a:	ee10 4a10 	vmov	r4, s0
 801161e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8011622:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011626:	d304      	bcc.n	8011632 <__ieee754_fmodf+0x2a>
 8011628:	ee60 0a20 	vmul.f32	s1, s0, s1
 801162c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011630:	bd70      	pop	{r4, r5, r6, pc}
 8011632:	4299      	cmp	r1, r3
 8011634:	dbfc      	blt.n	8011630 <__ieee754_fmodf+0x28>
 8011636:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801163a:	d105      	bne.n	8011648 <__ieee754_fmodf+0x40>
 801163c:	4b32      	ldr	r3, [pc, #200]	@ (8011708 <__ieee754_fmodf+0x100>)
 801163e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8011642:	ed93 0a00 	vldr	s0, [r3]
 8011646:	e7f3      	b.n	8011630 <__ieee754_fmodf+0x28>
 8011648:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801164c:	d146      	bne.n	80116dc <__ieee754_fmodf+0xd4>
 801164e:	020a      	lsls	r2, r1, #8
 8011650:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8011654:	2a00      	cmp	r2, #0
 8011656:	dc3e      	bgt.n	80116d6 <__ieee754_fmodf+0xce>
 8011658:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801165c:	bf01      	itttt	eq
 801165e:	021a      	lsleq	r2, r3, #8
 8011660:	fab2 f282 	clzeq	r2, r2
 8011664:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8011668:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801166c:	bf16      	itet	ne
 801166e:	15da      	asrne	r2, r3, #23
 8011670:	3282      	addeq	r2, #130	@ 0x82
 8011672:	3a7f      	subne	r2, #127	@ 0x7f
 8011674:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8011678:	bfbb      	ittet	lt
 801167a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801167e:	1a24      	sublt	r4, r4, r0
 8011680:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8011684:	40a1      	lsllt	r1, r4
 8011686:	bfa8      	it	ge
 8011688:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801168c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8011690:	bfb5      	itete	lt
 8011692:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8011696:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801169a:	1aa4      	sublt	r4, r4, r2
 801169c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80116a0:	bfb8      	it	lt
 80116a2:	fa03 f404 	lsllt.w	r4, r3, r4
 80116a6:	1a80      	subs	r0, r0, r2
 80116a8:	1b0b      	subs	r3, r1, r4
 80116aa:	b9d0      	cbnz	r0, 80116e2 <__ieee754_fmodf+0xda>
 80116ac:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80116b0:	bf28      	it	cs
 80116b2:	460b      	movcs	r3, r1
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0c1      	beq.n	801163c <__ieee754_fmodf+0x34>
 80116b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80116bc:	db19      	blt.n	80116f2 <__ieee754_fmodf+0xea>
 80116be:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80116c2:	db19      	blt.n	80116f8 <__ieee754_fmodf+0xf0>
 80116c4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80116c8:	327f      	adds	r2, #127	@ 0x7f
 80116ca:	432b      	orrs	r3, r5
 80116cc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80116d0:	ee00 3a10 	vmov	s0, r3
 80116d4:	e7ac      	b.n	8011630 <__ieee754_fmodf+0x28>
 80116d6:	3801      	subs	r0, #1
 80116d8:	0052      	lsls	r2, r2, #1
 80116da:	e7bb      	b.n	8011654 <__ieee754_fmodf+0x4c>
 80116dc:	15c8      	asrs	r0, r1, #23
 80116de:	387f      	subs	r0, #127	@ 0x7f
 80116e0:	e7ba      	b.n	8011658 <__ieee754_fmodf+0x50>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	da02      	bge.n	80116ec <__ieee754_fmodf+0xe4>
 80116e6:	0049      	lsls	r1, r1, #1
 80116e8:	3801      	subs	r0, #1
 80116ea:	e7dd      	b.n	80116a8 <__ieee754_fmodf+0xa0>
 80116ec:	d0a6      	beq.n	801163c <__ieee754_fmodf+0x34>
 80116ee:	0059      	lsls	r1, r3, #1
 80116f0:	e7fa      	b.n	80116e8 <__ieee754_fmodf+0xe0>
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	3a01      	subs	r2, #1
 80116f6:	e7df      	b.n	80116b8 <__ieee754_fmodf+0xb0>
 80116f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80116fc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011700:	3282      	adds	r2, #130	@ 0x82
 8011702:	4113      	asrs	r3, r2
 8011704:	432b      	orrs	r3, r5
 8011706:	e7e3      	b.n	80116d0 <__ieee754_fmodf+0xc8>
 8011708:	08012a80 	.word	0x08012a80

0801170c <__ieee754_rem_pio2f>:
 801170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801170e:	ee10 6a10 	vmov	r6, s0
 8011712:	4b88      	ldr	r3, [pc, #544]	@ (8011934 <__ieee754_rem_pio2f+0x228>)
 8011714:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011718:	429d      	cmp	r5, r3
 801171a:	b087      	sub	sp, #28
 801171c:	4604      	mov	r4, r0
 801171e:	d805      	bhi.n	801172c <__ieee754_rem_pio2f+0x20>
 8011720:	2300      	movs	r3, #0
 8011722:	ed80 0a00 	vstr	s0, [r0]
 8011726:	6043      	str	r3, [r0, #4]
 8011728:	2000      	movs	r0, #0
 801172a:	e022      	b.n	8011772 <__ieee754_rem_pio2f+0x66>
 801172c:	4b82      	ldr	r3, [pc, #520]	@ (8011938 <__ieee754_rem_pio2f+0x22c>)
 801172e:	429d      	cmp	r5, r3
 8011730:	d83a      	bhi.n	80117a8 <__ieee754_rem_pio2f+0x9c>
 8011732:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011736:	2e00      	cmp	r6, #0
 8011738:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801193c <__ieee754_rem_pio2f+0x230>
 801173c:	4a80      	ldr	r2, [pc, #512]	@ (8011940 <__ieee754_rem_pio2f+0x234>)
 801173e:	f023 030f 	bic.w	r3, r3, #15
 8011742:	dd18      	ble.n	8011776 <__ieee754_rem_pio2f+0x6a>
 8011744:	4293      	cmp	r3, r2
 8011746:	ee70 7a47 	vsub.f32	s15, s0, s14
 801174a:	bf09      	itett	eq
 801174c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011944 <__ieee754_rem_pio2f+0x238>
 8011750:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011948 <__ieee754_rem_pio2f+0x23c>
 8011754:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801194c <__ieee754_rem_pio2f+0x240>
 8011758:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801175c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011764:	ed80 7a00 	vstr	s14, [r0]
 8011768:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801176c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011770:	2001      	movs	r0, #1
 8011772:	b007      	add	sp, #28
 8011774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011776:	4293      	cmp	r3, r2
 8011778:	ee70 7a07 	vadd.f32	s15, s0, s14
 801177c:	bf09      	itett	eq
 801177e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011944 <__ieee754_rem_pio2f+0x238>
 8011782:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011948 <__ieee754_rem_pio2f+0x23c>
 8011786:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801194c <__ieee754_rem_pio2f+0x240>
 801178a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801178e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011792:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011796:	ed80 7a00 	vstr	s14, [r0]
 801179a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801179e:	edc0 7a01 	vstr	s15, [r0, #4]
 80117a2:	f04f 30ff 	mov.w	r0, #4294967295
 80117a6:	e7e4      	b.n	8011772 <__ieee754_rem_pio2f+0x66>
 80117a8:	4b69      	ldr	r3, [pc, #420]	@ (8011950 <__ieee754_rem_pio2f+0x244>)
 80117aa:	429d      	cmp	r5, r3
 80117ac:	d873      	bhi.n	8011896 <__ieee754_rem_pio2f+0x18a>
 80117ae:	f000 f8dd 	bl	801196c <fabsf>
 80117b2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011954 <__ieee754_rem_pio2f+0x248>
 80117b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80117ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80117be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80117c6:	ee17 0a90 	vmov	r0, s15
 80117ca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801193c <__ieee754_rem_pio2f+0x230>
 80117ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80117d2:	281f      	cmp	r0, #31
 80117d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011948 <__ieee754_rem_pio2f+0x23c>
 80117d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117dc:	eeb1 6a47 	vneg.f32	s12, s14
 80117e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80117e4:	ee16 1a90 	vmov	r1, s13
 80117e8:	dc09      	bgt.n	80117fe <__ieee754_rem_pio2f+0xf2>
 80117ea:	4a5b      	ldr	r2, [pc, #364]	@ (8011958 <__ieee754_rem_pio2f+0x24c>)
 80117ec:	1e47      	subs	r7, r0, #1
 80117ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80117f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80117f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d107      	bne.n	801180e <__ieee754_rem_pio2f+0x102>
 80117fe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011802:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011806:	2a08      	cmp	r2, #8
 8011808:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801180c:	dc14      	bgt.n	8011838 <__ieee754_rem_pio2f+0x12c>
 801180e:	6021      	str	r1, [r4, #0]
 8011810:	ed94 7a00 	vldr	s14, [r4]
 8011814:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011818:	2e00      	cmp	r6, #0
 801181a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801181e:	ed84 0a01 	vstr	s0, [r4, #4]
 8011822:	daa6      	bge.n	8011772 <__ieee754_rem_pio2f+0x66>
 8011824:	eeb1 7a47 	vneg.f32	s14, s14
 8011828:	eeb1 0a40 	vneg.f32	s0, s0
 801182c:	ed84 7a00 	vstr	s14, [r4]
 8011830:	ed84 0a01 	vstr	s0, [r4, #4]
 8011834:	4240      	negs	r0, r0
 8011836:	e79c      	b.n	8011772 <__ieee754_rem_pio2f+0x66>
 8011838:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011944 <__ieee754_rem_pio2f+0x238>
 801183c:	eef0 6a40 	vmov.f32	s13, s0
 8011840:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011844:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011848:	eee6 7a25 	vfma.f32	s15, s12, s11
 801184c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801194c <__ieee754_rem_pio2f+0x240>
 8011850:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011854:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011858:	ee15 2a90 	vmov	r2, s11
 801185c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011860:	1a5b      	subs	r3, r3, r1
 8011862:	2b19      	cmp	r3, #25
 8011864:	dc04      	bgt.n	8011870 <__ieee754_rem_pio2f+0x164>
 8011866:	edc4 5a00 	vstr	s11, [r4]
 801186a:	eeb0 0a66 	vmov.f32	s0, s13
 801186e:	e7cf      	b.n	8011810 <__ieee754_rem_pio2f+0x104>
 8011870:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801195c <__ieee754_rem_pio2f+0x250>
 8011874:	eeb0 0a66 	vmov.f32	s0, s13
 8011878:	eea6 0a25 	vfma.f32	s0, s12, s11
 801187c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011880:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011960 <__ieee754_rem_pio2f+0x254>
 8011884:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011888:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801188c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011890:	ed84 7a00 	vstr	s14, [r4]
 8011894:	e7bc      	b.n	8011810 <__ieee754_rem_pio2f+0x104>
 8011896:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801189a:	d306      	bcc.n	80118aa <__ieee754_rem_pio2f+0x19e>
 801189c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80118a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80118a4:	edc0 7a00 	vstr	s15, [r0]
 80118a8:	e73e      	b.n	8011728 <__ieee754_rem_pio2f+0x1c>
 80118aa:	15ea      	asrs	r2, r5, #23
 80118ac:	3a86      	subs	r2, #134	@ 0x86
 80118ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80118b2:	ee07 3a90 	vmov	s15, r3
 80118b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80118ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011964 <__ieee754_rem_pio2f+0x258>
 80118be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80118c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80118ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80118d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80118d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80118de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80118ee:	d11e      	bne.n	801192e <__ieee754_rem_pio2f+0x222>
 80118f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80118f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f8:	bf0c      	ite	eq
 80118fa:	2301      	moveq	r3, #1
 80118fc:	2302      	movne	r3, #2
 80118fe:	491a      	ldr	r1, [pc, #104]	@ (8011968 <__ieee754_rem_pio2f+0x25c>)
 8011900:	9101      	str	r1, [sp, #4]
 8011902:	2102      	movs	r1, #2
 8011904:	9100      	str	r1, [sp, #0]
 8011906:	a803      	add	r0, sp, #12
 8011908:	4621      	mov	r1, r4
 801190a:	f000 fc69 	bl	80121e0 <__kernel_rem_pio2f>
 801190e:	2e00      	cmp	r6, #0
 8011910:	f6bf af2f 	bge.w	8011772 <__ieee754_rem_pio2f+0x66>
 8011914:	edd4 7a00 	vldr	s15, [r4]
 8011918:	eef1 7a67 	vneg.f32	s15, s15
 801191c:	edc4 7a00 	vstr	s15, [r4]
 8011920:	edd4 7a01 	vldr	s15, [r4, #4]
 8011924:	eef1 7a67 	vneg.f32	s15, s15
 8011928:	edc4 7a01 	vstr	s15, [r4, #4]
 801192c:	e782      	b.n	8011834 <__ieee754_rem_pio2f+0x128>
 801192e:	2303      	movs	r3, #3
 8011930:	e7e5      	b.n	80118fe <__ieee754_rem_pio2f+0x1f2>
 8011932:	bf00      	nop
 8011934:	3f490fd8 	.word	0x3f490fd8
 8011938:	4016cbe3 	.word	0x4016cbe3
 801193c:	3fc90f80 	.word	0x3fc90f80
 8011940:	3fc90fd0 	.word	0x3fc90fd0
 8011944:	37354400 	.word	0x37354400
 8011948:	37354443 	.word	0x37354443
 801194c:	2e85a308 	.word	0x2e85a308
 8011950:	43490f80 	.word	0x43490f80
 8011954:	3f22f984 	.word	0x3f22f984
 8011958:	08012a88 	.word	0x08012a88
 801195c:	2e85a300 	.word	0x2e85a300
 8011960:	248d3132 	.word	0x248d3132
 8011964:	43800000 	.word	0x43800000
 8011968:	08012b08 	.word	0x08012b08

0801196c <fabsf>:
 801196c:	ee10 3a10 	vmov	r3, s0
 8011970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011974:	ee00 3a10 	vmov	s0, r3
 8011978:	4770      	bx	lr
 801197a:	0000      	movs	r0, r0
 801197c:	0000      	movs	r0, r0
	...

08011980 <scalbn>:
 8011980:	b570      	push	{r4, r5, r6, lr}
 8011982:	ec55 4b10 	vmov	r4, r5, d0
 8011986:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801198a:	4606      	mov	r6, r0
 801198c:	462b      	mov	r3, r5
 801198e:	b991      	cbnz	r1, 80119b6 <scalbn+0x36>
 8011990:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011994:	4323      	orrs	r3, r4
 8011996:	d03b      	beq.n	8011a10 <scalbn+0x90>
 8011998:	4b33      	ldr	r3, [pc, #204]	@ (8011a68 <scalbn+0xe8>)
 801199a:	4620      	mov	r0, r4
 801199c:	4629      	mov	r1, r5
 801199e:	2200      	movs	r2, #0
 80119a0:	f7ee fdf6 	bl	8000590 <__aeabi_dmul>
 80119a4:	4b31      	ldr	r3, [pc, #196]	@ (8011a6c <scalbn+0xec>)
 80119a6:	429e      	cmp	r6, r3
 80119a8:	4604      	mov	r4, r0
 80119aa:	460d      	mov	r5, r1
 80119ac:	da0f      	bge.n	80119ce <scalbn+0x4e>
 80119ae:	a326      	add	r3, pc, #152	@ (adr r3, 8011a48 <scalbn+0xc8>)
 80119b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b4:	e01e      	b.n	80119f4 <scalbn+0x74>
 80119b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80119ba:	4291      	cmp	r1, r2
 80119bc:	d10b      	bne.n	80119d6 <scalbn+0x56>
 80119be:	4622      	mov	r2, r4
 80119c0:	4620      	mov	r0, r4
 80119c2:	4629      	mov	r1, r5
 80119c4:	f7ee fc2e 	bl	8000224 <__adddf3>
 80119c8:	4604      	mov	r4, r0
 80119ca:	460d      	mov	r5, r1
 80119cc:	e020      	b.n	8011a10 <scalbn+0x90>
 80119ce:	460b      	mov	r3, r1
 80119d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80119d4:	3936      	subs	r1, #54	@ 0x36
 80119d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80119da:	4296      	cmp	r6, r2
 80119dc:	dd0d      	ble.n	80119fa <scalbn+0x7a>
 80119de:	2d00      	cmp	r5, #0
 80119e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011a50 <scalbn+0xd0>)
 80119e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119e6:	da02      	bge.n	80119ee <scalbn+0x6e>
 80119e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011a58 <scalbn+0xd8>)
 80119ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ee:	a318      	add	r3, pc, #96	@ (adr r3, 8011a50 <scalbn+0xd0>)
 80119f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f4:	f7ee fdcc 	bl	8000590 <__aeabi_dmul>
 80119f8:	e7e6      	b.n	80119c8 <scalbn+0x48>
 80119fa:	1872      	adds	r2, r6, r1
 80119fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011a00:	428a      	cmp	r2, r1
 8011a02:	dcec      	bgt.n	80119de <scalbn+0x5e>
 8011a04:	2a00      	cmp	r2, #0
 8011a06:	dd06      	ble.n	8011a16 <scalbn+0x96>
 8011a08:	f36f 531e 	bfc	r3, #20, #11
 8011a0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011a10:	ec45 4b10 	vmov	d0, r4, r5
 8011a14:	bd70      	pop	{r4, r5, r6, pc}
 8011a16:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011a1a:	da08      	bge.n	8011a2e <scalbn+0xae>
 8011a1c:	2d00      	cmp	r5, #0
 8011a1e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011a48 <scalbn+0xc8>)
 8011a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a24:	dac3      	bge.n	80119ae <scalbn+0x2e>
 8011a26:	a10e      	add	r1, pc, #56	@ (adr r1, 8011a60 <scalbn+0xe0>)
 8011a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a2c:	e7bf      	b.n	80119ae <scalbn+0x2e>
 8011a2e:	3236      	adds	r2, #54	@ 0x36
 8011a30:	f36f 531e 	bfc	r3, #20, #11
 8011a34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011a38:	4620      	mov	r0, r4
 8011a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a70 <scalbn+0xf0>)
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	2200      	movs	r2, #0
 8011a40:	e7d8      	b.n	80119f4 <scalbn+0x74>
 8011a42:	bf00      	nop
 8011a44:	f3af 8000 	nop.w
 8011a48:	c2f8f359 	.word	0xc2f8f359
 8011a4c:	01a56e1f 	.word	0x01a56e1f
 8011a50:	8800759c 	.word	0x8800759c
 8011a54:	7e37e43c 	.word	0x7e37e43c
 8011a58:	8800759c 	.word	0x8800759c
 8011a5c:	fe37e43c 	.word	0xfe37e43c
 8011a60:	c2f8f359 	.word	0xc2f8f359
 8011a64:	81a56e1f 	.word	0x81a56e1f
 8011a68:	43500000 	.word	0x43500000
 8011a6c:	ffff3cb0 	.word	0xffff3cb0
 8011a70:	3c900000 	.word	0x3c900000

08011a74 <scalbnf>:
 8011a74:	ee10 3a10 	vmov	r3, s0
 8011a78:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011a7c:	d02b      	beq.n	8011ad6 <scalbnf+0x62>
 8011a7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011a82:	d302      	bcc.n	8011a8a <scalbnf+0x16>
 8011a84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a88:	4770      	bx	lr
 8011a8a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011a8e:	d123      	bne.n	8011ad8 <scalbnf+0x64>
 8011a90:	4b24      	ldr	r3, [pc, #144]	@ (8011b24 <scalbnf+0xb0>)
 8011a92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011b28 <scalbnf+0xb4>
 8011a96:	4298      	cmp	r0, r3
 8011a98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011a9c:	db17      	blt.n	8011ace <scalbnf+0x5a>
 8011a9e:	ee10 3a10 	vmov	r3, s0
 8011aa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011aa6:	3a19      	subs	r2, #25
 8011aa8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011aac:	4288      	cmp	r0, r1
 8011aae:	dd15      	ble.n	8011adc <scalbnf+0x68>
 8011ab0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011b2c <scalbnf+0xb8>
 8011ab4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011b30 <scalbnf+0xbc>
 8011ab8:	ee10 3a10 	vmov	r3, s0
 8011abc:	eeb0 7a67 	vmov.f32	s14, s15
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	bfb8      	it	lt
 8011ac4:	eef0 7a66 	vmovlt.f32	s15, s13
 8011ac8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011acc:	4770      	bx	lr
 8011ace:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011b34 <scalbnf+0xc0>
 8011ad2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011ad6:	4770      	bx	lr
 8011ad8:	0dd2      	lsrs	r2, r2, #23
 8011ada:	e7e5      	b.n	8011aa8 <scalbnf+0x34>
 8011adc:	4410      	add	r0, r2
 8011ade:	28fe      	cmp	r0, #254	@ 0xfe
 8011ae0:	dce6      	bgt.n	8011ab0 <scalbnf+0x3c>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	dd06      	ble.n	8011af4 <scalbnf+0x80>
 8011ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011aea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011aee:	ee00 3a10 	vmov	s0, r3
 8011af2:	4770      	bx	lr
 8011af4:	f110 0f16 	cmn.w	r0, #22
 8011af8:	da09      	bge.n	8011b0e <scalbnf+0x9a>
 8011afa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011b34 <scalbnf+0xc0>
 8011afe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011b38 <scalbnf+0xc4>
 8011b02:	ee10 3a10 	vmov	r3, s0
 8011b06:	eeb0 7a67 	vmov.f32	s14, s15
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	e7d9      	b.n	8011ac2 <scalbnf+0x4e>
 8011b0e:	3019      	adds	r0, #25
 8011b10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011b14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011b18:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011b3c <scalbnf+0xc8>
 8011b1c:	ee07 3a90 	vmov	s15, r3
 8011b20:	e7d7      	b.n	8011ad2 <scalbnf+0x5e>
 8011b22:	bf00      	nop
 8011b24:	ffff3cb0 	.word	0xffff3cb0
 8011b28:	4c000000 	.word	0x4c000000
 8011b2c:	7149f2ca 	.word	0x7149f2ca
 8011b30:	f149f2ca 	.word	0xf149f2ca
 8011b34:	0da24260 	.word	0x0da24260
 8011b38:	8da24260 	.word	0x8da24260
 8011b3c:	33000000 	.word	0x33000000

08011b40 <__kernel_rem_pio2>:
 8011b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b44:	ed2d 8b02 	vpush	{d8}
 8011b48:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011b4c:	f112 0f14 	cmn.w	r2, #20
 8011b50:	9306      	str	r3, [sp, #24]
 8011b52:	9104      	str	r1, [sp, #16]
 8011b54:	4bc2      	ldr	r3, [pc, #776]	@ (8011e60 <__kernel_rem_pio2+0x320>)
 8011b56:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011b58:	9008      	str	r0, [sp, #32]
 8011b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	9b06      	ldr	r3, [sp, #24]
 8011b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b66:	bfa8      	it	ge
 8011b68:	1ed4      	subge	r4, r2, #3
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	bfb2      	itee	lt
 8011b6e:	2400      	movlt	r4, #0
 8011b70:	2318      	movge	r3, #24
 8011b72:	fb94 f4f3 	sdivge	r4, r4, r3
 8011b76:	f06f 0317 	mvn.w	r3, #23
 8011b7a:	fb04 3303 	mla	r3, r4, r3, r3
 8011b7e:	eb03 0b02 	add.w	fp, r3, r2
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	9a05      	ldr	r2, [sp, #20]
 8011b86:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8011e50 <__kernel_rem_pio2+0x310>
 8011b8a:	eb03 0802 	add.w	r8, r3, r2
 8011b8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011b90:	1aa7      	subs	r7, r4, r2
 8011b92:	ae20      	add	r6, sp, #128	@ 0x80
 8011b94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011b98:	2500      	movs	r5, #0
 8011b9a:	4545      	cmp	r5, r8
 8011b9c:	dd12      	ble.n	8011bc4 <__kernel_rem_pio2+0x84>
 8011b9e:	9b06      	ldr	r3, [sp, #24]
 8011ba0:	aa20      	add	r2, sp, #128	@ 0x80
 8011ba2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011ba6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011baa:	2700      	movs	r7, #0
 8011bac:	9b00      	ldr	r3, [sp, #0]
 8011bae:	429f      	cmp	r7, r3
 8011bb0:	dc2e      	bgt.n	8011c10 <__kernel_rem_pio2+0xd0>
 8011bb2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8011e50 <__kernel_rem_pio2+0x310>
 8011bb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011bba:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bbe:	46a8      	mov	r8, r5
 8011bc0:	2600      	movs	r6, #0
 8011bc2:	e01b      	b.n	8011bfc <__kernel_rem_pio2+0xbc>
 8011bc4:	42ef      	cmn	r7, r5
 8011bc6:	d407      	bmi.n	8011bd8 <__kernel_rem_pio2+0x98>
 8011bc8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011bcc:	f7ee fc76 	bl	80004bc <__aeabi_i2d>
 8011bd0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011bd4:	3501      	adds	r5, #1
 8011bd6:	e7e0      	b.n	8011b9a <__kernel_rem_pio2+0x5a>
 8011bd8:	ec51 0b18 	vmov	r0, r1, d8
 8011bdc:	e7f8      	b.n	8011bd0 <__kernel_rem_pio2+0x90>
 8011bde:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011be2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011be6:	f7ee fcd3 	bl	8000590 <__aeabi_dmul>
 8011bea:	4602      	mov	r2, r0
 8011bec:	460b      	mov	r3, r1
 8011bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bf2:	f7ee fb17 	bl	8000224 <__adddf3>
 8011bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bfa:	3601      	adds	r6, #1
 8011bfc:	9b05      	ldr	r3, [sp, #20]
 8011bfe:	429e      	cmp	r6, r3
 8011c00:	dded      	ble.n	8011bde <__kernel_rem_pio2+0x9e>
 8011c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c06:	3701      	adds	r7, #1
 8011c08:	ecaa 7b02 	vstmia	sl!, {d7}
 8011c0c:	3508      	adds	r5, #8
 8011c0e:	e7cd      	b.n	8011bac <__kernel_rem_pio2+0x6c>
 8011c10:	9b00      	ldr	r3, [sp, #0]
 8011c12:	f8dd 8000 	ldr.w	r8, [sp]
 8011c16:	aa0c      	add	r2, sp, #48	@ 0x30
 8011c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011c20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c26:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c2c:	ab98      	add	r3, sp, #608	@ 0x260
 8011c2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011c32:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011c36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c3a:	ac0c      	add	r4, sp, #48	@ 0x30
 8011c3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011c3e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011c42:	46a1      	mov	r9, r4
 8011c44:	46c2      	mov	sl, r8
 8011c46:	f1ba 0f00 	cmp.w	sl, #0
 8011c4a:	dc77      	bgt.n	8011d3c <__kernel_rem_pio2+0x1fc>
 8011c4c:	4658      	mov	r0, fp
 8011c4e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011c52:	f7ff fe95 	bl	8011980 <scalbn>
 8011c56:	ec57 6b10 	vmov	r6, r7, d0
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011c60:	4630      	mov	r0, r6
 8011c62:	4639      	mov	r1, r7
 8011c64:	f7ee fc94 	bl	8000590 <__aeabi_dmul>
 8011c68:	ec41 0b10 	vmov	d0, r0, r1
 8011c6c:	f000 fd20 	bl	80126b0 <floor>
 8011c70:	4b7c      	ldr	r3, [pc, #496]	@ (8011e64 <__kernel_rem_pio2+0x324>)
 8011c72:	ec51 0b10 	vmov	r0, r1, d0
 8011c76:	2200      	movs	r2, #0
 8011c78:	f7ee fc8a 	bl	8000590 <__aeabi_dmul>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee facc 	bl	8000220 <__aeabi_dsub>
 8011c88:	460f      	mov	r7, r1
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	f7ee ff1a 	bl	8000ac4 <__aeabi_d2iz>
 8011c90:	9002      	str	r0, [sp, #8]
 8011c92:	f7ee fc13 	bl	80004bc <__aeabi_i2d>
 8011c96:	4602      	mov	r2, r0
 8011c98:	460b      	mov	r3, r1
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	4639      	mov	r1, r7
 8011c9e:	f7ee fabf 	bl	8000220 <__aeabi_dsub>
 8011ca2:	f1bb 0f00 	cmp.w	fp, #0
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460f      	mov	r7, r1
 8011caa:	dd6c      	ble.n	8011d86 <__kernel_rem_pio2+0x246>
 8011cac:	f108 31ff 	add.w	r1, r8, #4294967295
 8011cb0:	ab0c      	add	r3, sp, #48	@ 0x30
 8011cb2:	9d02      	ldr	r5, [sp, #8]
 8011cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cb8:	f1cb 0018 	rsb	r0, fp, #24
 8011cbc:	fa43 f200 	asr.w	r2, r3, r0
 8011cc0:	4415      	add	r5, r2
 8011cc2:	4082      	lsls	r2, r0
 8011cc4:	1a9b      	subs	r3, r3, r2
 8011cc6:	aa0c      	add	r2, sp, #48	@ 0x30
 8011cc8:	9502      	str	r5, [sp, #8]
 8011cca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011cce:	f1cb 0217 	rsb	r2, fp, #23
 8011cd2:	fa43 f902 	asr.w	r9, r3, r2
 8011cd6:	f1b9 0f00 	cmp.w	r9, #0
 8011cda:	dd64      	ble.n	8011da6 <__kernel_rem_pio2+0x266>
 8011cdc:	9b02      	ldr	r3, [sp, #8]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	9302      	str	r3, [sp, #8]
 8011ce4:	4615      	mov	r5, r2
 8011ce6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011cea:	4590      	cmp	r8, r2
 8011cec:	f300 80a1 	bgt.w	8011e32 <__kernel_rem_pio2+0x2f2>
 8011cf0:	f1bb 0f00 	cmp.w	fp, #0
 8011cf4:	dd07      	ble.n	8011d06 <__kernel_rem_pio2+0x1c6>
 8011cf6:	f1bb 0f01 	cmp.w	fp, #1
 8011cfa:	f000 80c1 	beq.w	8011e80 <__kernel_rem_pio2+0x340>
 8011cfe:	f1bb 0f02 	cmp.w	fp, #2
 8011d02:	f000 80c8 	beq.w	8011e96 <__kernel_rem_pio2+0x356>
 8011d06:	f1b9 0f02 	cmp.w	r9, #2
 8011d0a:	d14c      	bne.n	8011da6 <__kernel_rem_pio2+0x266>
 8011d0c:	4632      	mov	r2, r6
 8011d0e:	463b      	mov	r3, r7
 8011d10:	4955      	ldr	r1, [pc, #340]	@ (8011e68 <__kernel_rem_pio2+0x328>)
 8011d12:	2000      	movs	r0, #0
 8011d14:	f7ee fa84 	bl	8000220 <__aeabi_dsub>
 8011d18:	4606      	mov	r6, r0
 8011d1a:	460f      	mov	r7, r1
 8011d1c:	2d00      	cmp	r5, #0
 8011d1e:	d042      	beq.n	8011da6 <__kernel_rem_pio2+0x266>
 8011d20:	4658      	mov	r0, fp
 8011d22:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8011e58 <__kernel_rem_pio2+0x318>
 8011d26:	f7ff fe2b 	bl	8011980 <scalbn>
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	ec53 2b10 	vmov	r2, r3, d0
 8011d32:	f7ee fa75 	bl	8000220 <__aeabi_dsub>
 8011d36:	4606      	mov	r6, r0
 8011d38:	460f      	mov	r7, r1
 8011d3a:	e034      	b.n	8011da6 <__kernel_rem_pio2+0x266>
 8011d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8011e6c <__kernel_rem_pio2+0x32c>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d44:	f7ee fc24 	bl	8000590 <__aeabi_dmul>
 8011d48:	f7ee febc 	bl	8000ac4 <__aeabi_d2iz>
 8011d4c:	f7ee fbb6 	bl	80004bc <__aeabi_i2d>
 8011d50:	4b47      	ldr	r3, [pc, #284]	@ (8011e70 <__kernel_rem_pio2+0x330>)
 8011d52:	2200      	movs	r2, #0
 8011d54:	4606      	mov	r6, r0
 8011d56:	460f      	mov	r7, r1
 8011d58:	f7ee fc1a 	bl	8000590 <__aeabi_dmul>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d64:	f7ee fa5c 	bl	8000220 <__aeabi_dsub>
 8011d68:	f7ee feac 	bl	8000ac4 <__aeabi_d2iz>
 8011d6c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011d70:	f849 0b04 	str.w	r0, [r9], #4
 8011d74:	4639      	mov	r1, r7
 8011d76:	4630      	mov	r0, r6
 8011d78:	f7ee fa54 	bl	8000224 <__adddf3>
 8011d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d84:	e75f      	b.n	8011c46 <__kernel_rem_pio2+0x106>
 8011d86:	d107      	bne.n	8011d98 <__kernel_rem_pio2+0x258>
 8011d88:	f108 33ff 	add.w	r3, r8, #4294967295
 8011d8c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d92:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011d96:	e79e      	b.n	8011cd6 <__kernel_rem_pio2+0x196>
 8011d98:	4b36      	ldr	r3, [pc, #216]	@ (8011e74 <__kernel_rem_pio2+0x334>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f7ee fe7e 	bl	8000a9c <__aeabi_dcmpge>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d143      	bne.n	8011e2c <__kernel_rem_pio2+0x2ec>
 8011da4:	4681      	mov	r9, r0
 8011da6:	2200      	movs	r2, #0
 8011da8:	2300      	movs	r3, #0
 8011daa:	4630      	mov	r0, r6
 8011dac:	4639      	mov	r1, r7
 8011dae:	f7ee fe57 	bl	8000a60 <__aeabi_dcmpeq>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	f000 80c1 	beq.w	8011f3a <__kernel_rem_pio2+0x3fa>
 8011db8:	f108 33ff 	add.w	r3, r8, #4294967295
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	9900      	ldr	r1, [sp, #0]
 8011dc0:	428b      	cmp	r3, r1
 8011dc2:	da70      	bge.n	8011ea6 <__kernel_rem_pio2+0x366>
 8011dc4:	2a00      	cmp	r2, #0
 8011dc6:	f000 808b 	beq.w	8011ee0 <__kernel_rem_pio2+0x3a0>
 8011dca:	f108 38ff 	add.w	r8, r8, #4294967295
 8011dce:	ab0c      	add	r3, sp, #48	@ 0x30
 8011dd0:	f1ab 0b18 	sub.w	fp, fp, #24
 8011dd4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d0f6      	beq.n	8011dca <__kernel_rem_pio2+0x28a>
 8011ddc:	4658      	mov	r0, fp
 8011dde:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8011e58 <__kernel_rem_pio2+0x318>
 8011de2:	f7ff fdcd 	bl	8011980 <scalbn>
 8011de6:	f108 0301 	add.w	r3, r8, #1
 8011dea:	00da      	lsls	r2, r3, #3
 8011dec:	9205      	str	r2, [sp, #20]
 8011dee:	ec55 4b10 	vmov	r4, r5, d0
 8011df2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011df4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8011e6c <__kernel_rem_pio2+0x32c>
 8011df8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011dfc:	4646      	mov	r6, r8
 8011dfe:	f04f 0a00 	mov.w	sl, #0
 8011e02:	2e00      	cmp	r6, #0
 8011e04:	f280 80d1 	bge.w	8011faa <__kernel_rem_pio2+0x46a>
 8011e08:	4644      	mov	r4, r8
 8011e0a:	2c00      	cmp	r4, #0
 8011e0c:	f2c0 80ff 	blt.w	801200e <__kernel_rem_pio2+0x4ce>
 8011e10:	4b19      	ldr	r3, [pc, #100]	@ (8011e78 <__kernel_rem_pio2+0x338>)
 8011e12:	461f      	mov	r7, r3
 8011e14:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011e16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e1a:	9306      	str	r3, [sp, #24]
 8011e1c:	f04f 0a00 	mov.w	sl, #0
 8011e20:	f04f 0b00 	mov.w	fp, #0
 8011e24:	2600      	movs	r6, #0
 8011e26:	eba8 0504 	sub.w	r5, r8, r4
 8011e2a:	e0e4      	b.n	8011ff6 <__kernel_rem_pio2+0x4b6>
 8011e2c:	f04f 0902 	mov.w	r9, #2
 8011e30:	e754      	b.n	8011cdc <__kernel_rem_pio2+0x19c>
 8011e32:	f854 3b04 	ldr.w	r3, [r4], #4
 8011e36:	bb0d      	cbnz	r5, 8011e7c <__kernel_rem_pio2+0x33c>
 8011e38:	b123      	cbz	r3, 8011e44 <__kernel_rem_pio2+0x304>
 8011e3a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011e3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e42:	2301      	movs	r3, #1
 8011e44:	3201      	adds	r2, #1
 8011e46:	461d      	mov	r5, r3
 8011e48:	e74f      	b.n	8011cea <__kernel_rem_pio2+0x1aa>
 8011e4a:	bf00      	nop
 8011e4c:	f3af 8000 	nop.w
	...
 8011e5c:	3ff00000 	.word	0x3ff00000
 8011e60:	08012e60 	.word	0x08012e60
 8011e64:	40200000 	.word	0x40200000
 8011e68:	3ff00000 	.word	0x3ff00000
 8011e6c:	3e700000 	.word	0x3e700000
 8011e70:	41700000 	.word	0x41700000
 8011e74:	3fe00000 	.word	0x3fe00000
 8011e78:	08012e20 	.word	0x08012e20
 8011e7c:	1acb      	subs	r3, r1, r3
 8011e7e:	e7de      	b.n	8011e3e <__kernel_rem_pio2+0x2fe>
 8011e80:	f108 32ff 	add.w	r2, r8, #4294967295
 8011e84:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8011e90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011e94:	e737      	b.n	8011d06 <__kernel_rem_pio2+0x1c6>
 8011e96:	f108 32ff 	add.w	r2, r8, #4294967295
 8011e9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ea0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011ea4:	e7f3      	b.n	8011e8e <__kernel_rem_pio2+0x34e>
 8011ea6:	a90c      	add	r1, sp, #48	@ 0x30
 8011ea8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	430a      	orrs	r2, r1
 8011eb0:	e785      	b.n	8011dbe <__kernel_rem_pio2+0x27e>
 8011eb2:	3401      	adds	r4, #1
 8011eb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011eb8:	2a00      	cmp	r2, #0
 8011eba:	d0fa      	beq.n	8011eb2 <__kernel_rem_pio2+0x372>
 8011ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ebe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011ec2:	eb0d 0503 	add.w	r5, sp, r3
 8011ec6:	9b06      	ldr	r3, [sp, #24]
 8011ec8:	aa20      	add	r2, sp, #128	@ 0x80
 8011eca:	4443      	add	r3, r8
 8011ecc:	f108 0701 	add.w	r7, r8, #1
 8011ed0:	3d98      	subs	r5, #152	@ 0x98
 8011ed2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011ed6:	4444      	add	r4, r8
 8011ed8:	42bc      	cmp	r4, r7
 8011eda:	da04      	bge.n	8011ee6 <__kernel_rem_pio2+0x3a6>
 8011edc:	46a0      	mov	r8, r4
 8011ede:	e6a2      	b.n	8011c26 <__kernel_rem_pio2+0xe6>
 8011ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ee2:	2401      	movs	r4, #1
 8011ee4:	e7e6      	b.n	8011eb4 <__kernel_rem_pio2+0x374>
 8011ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ee8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011eec:	f7ee fae6 	bl	80004bc <__aeabi_i2d>
 8011ef0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80121b0 <__kernel_rem_pio2+0x670>
 8011ef4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011f00:	46b2      	mov	sl, r6
 8011f02:	f04f 0800 	mov.w	r8, #0
 8011f06:	9b05      	ldr	r3, [sp, #20]
 8011f08:	4598      	cmp	r8, r3
 8011f0a:	dd05      	ble.n	8011f18 <__kernel_rem_pio2+0x3d8>
 8011f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f10:	3701      	adds	r7, #1
 8011f12:	eca5 7b02 	vstmia	r5!, {d7}
 8011f16:	e7df      	b.n	8011ed8 <__kernel_rem_pio2+0x398>
 8011f18:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011f1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011f20:	f7ee fb36 	bl	8000590 <__aeabi_dmul>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f2c:	f7ee f97a 	bl	8000224 <__adddf3>
 8011f30:	f108 0801 	add.w	r8, r8, #1
 8011f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f38:	e7e5      	b.n	8011f06 <__kernel_rem_pio2+0x3c6>
 8011f3a:	f1cb 0000 	rsb	r0, fp, #0
 8011f3e:	ec47 6b10 	vmov	d0, r6, r7
 8011f42:	f7ff fd1d 	bl	8011980 <scalbn>
 8011f46:	ec55 4b10 	vmov	r4, r5, d0
 8011f4a:	4b9b      	ldr	r3, [pc, #620]	@ (80121b8 <__kernel_rem_pio2+0x678>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	4620      	mov	r0, r4
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7ee fda3 	bl	8000a9c <__aeabi_dcmpge>
 8011f56:	b300      	cbz	r0, 8011f9a <__kernel_rem_pio2+0x45a>
 8011f58:	4b98      	ldr	r3, [pc, #608]	@ (80121bc <__kernel_rem_pio2+0x67c>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	4629      	mov	r1, r5
 8011f60:	f7ee fb16 	bl	8000590 <__aeabi_dmul>
 8011f64:	f7ee fdae 	bl	8000ac4 <__aeabi_d2iz>
 8011f68:	4606      	mov	r6, r0
 8011f6a:	f7ee faa7 	bl	80004bc <__aeabi_i2d>
 8011f6e:	4b92      	ldr	r3, [pc, #584]	@ (80121b8 <__kernel_rem_pio2+0x678>)
 8011f70:	2200      	movs	r2, #0
 8011f72:	f7ee fb0d 	bl	8000590 <__aeabi_dmul>
 8011f76:	460b      	mov	r3, r1
 8011f78:	4602      	mov	r2, r0
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f7ee f94f 	bl	8000220 <__aeabi_dsub>
 8011f82:	f7ee fd9f 	bl	8000ac4 <__aeabi_d2iz>
 8011f86:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f88:	f10b 0b18 	add.w	fp, fp, #24
 8011f8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011f90:	f108 0801 	add.w	r8, r8, #1
 8011f94:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011f98:	e720      	b.n	8011ddc <__kernel_rem_pio2+0x29c>
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	f7ee fd91 	bl	8000ac4 <__aeabi_d2iz>
 8011fa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8011fa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011fa8:	e718      	b.n	8011ddc <__kernel_rem_pio2+0x29c>
 8011faa:	ab0c      	add	r3, sp, #48	@ 0x30
 8011fac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011fb0:	f7ee fa84 	bl	80004bc <__aeabi_i2d>
 8011fb4:	4622      	mov	r2, r4
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	f7ee faea 	bl	8000590 <__aeabi_dmul>
 8011fbc:	4652      	mov	r2, sl
 8011fbe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011fc2:	465b      	mov	r3, fp
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	4629      	mov	r1, r5
 8011fc8:	f7ee fae2 	bl	8000590 <__aeabi_dmul>
 8011fcc:	3e01      	subs	r6, #1
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	e716      	b.n	8011e02 <__kernel_rem_pio2+0x2c2>
 8011fd4:	9906      	ldr	r1, [sp, #24]
 8011fd6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011fda:	9106      	str	r1, [sp, #24]
 8011fdc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011fe0:	f7ee fad6 	bl	8000590 <__aeabi_dmul>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	4650      	mov	r0, sl
 8011fea:	4659      	mov	r1, fp
 8011fec:	f7ee f91a 	bl	8000224 <__adddf3>
 8011ff0:	3601      	adds	r6, #1
 8011ff2:	4682      	mov	sl, r0
 8011ff4:	468b      	mov	fp, r1
 8011ff6:	9b00      	ldr	r3, [sp, #0]
 8011ff8:	429e      	cmp	r6, r3
 8011ffa:	dc01      	bgt.n	8012000 <__kernel_rem_pio2+0x4c0>
 8011ffc:	42ae      	cmp	r6, r5
 8011ffe:	dde9      	ble.n	8011fd4 <__kernel_rem_pio2+0x494>
 8012000:	ab48      	add	r3, sp, #288	@ 0x120
 8012002:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012006:	e9c5 ab00 	strd	sl, fp, [r5]
 801200a:	3c01      	subs	r4, #1
 801200c:	e6fd      	b.n	8011e0a <__kernel_rem_pio2+0x2ca>
 801200e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012010:	2b02      	cmp	r3, #2
 8012012:	dc0b      	bgt.n	801202c <__kernel_rem_pio2+0x4ec>
 8012014:	2b00      	cmp	r3, #0
 8012016:	dc35      	bgt.n	8012084 <__kernel_rem_pio2+0x544>
 8012018:	d059      	beq.n	80120ce <__kernel_rem_pio2+0x58e>
 801201a:	9b02      	ldr	r3, [sp, #8]
 801201c:	f003 0007 	and.w	r0, r3, #7
 8012020:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8012024:	ecbd 8b02 	vpop	{d8}
 8012028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801202e:	2b03      	cmp	r3, #3
 8012030:	d1f3      	bne.n	801201a <__kernel_rem_pio2+0x4da>
 8012032:	9b05      	ldr	r3, [sp, #20]
 8012034:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012038:	eb0d 0403 	add.w	r4, sp, r3
 801203c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012040:	4625      	mov	r5, r4
 8012042:	46c2      	mov	sl, r8
 8012044:	f1ba 0f00 	cmp.w	sl, #0
 8012048:	dc69      	bgt.n	801211e <__kernel_rem_pio2+0x5de>
 801204a:	4645      	mov	r5, r8
 801204c:	2d01      	cmp	r5, #1
 801204e:	f300 8087 	bgt.w	8012160 <__kernel_rem_pio2+0x620>
 8012052:	9c05      	ldr	r4, [sp, #20]
 8012054:	ab48      	add	r3, sp, #288	@ 0x120
 8012056:	441c      	add	r4, r3
 8012058:	2000      	movs	r0, #0
 801205a:	2100      	movs	r1, #0
 801205c:	f1b8 0f01 	cmp.w	r8, #1
 8012060:	f300 809c 	bgt.w	801219c <__kernel_rem_pio2+0x65c>
 8012064:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8012068:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801206c:	f1b9 0f00 	cmp.w	r9, #0
 8012070:	f040 80a6 	bne.w	80121c0 <__kernel_rem_pio2+0x680>
 8012074:	9b04      	ldr	r3, [sp, #16]
 8012076:	e9c3 5600 	strd	r5, r6, [r3]
 801207a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801207e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012082:	e7ca      	b.n	801201a <__kernel_rem_pio2+0x4da>
 8012084:	9d05      	ldr	r5, [sp, #20]
 8012086:	ab48      	add	r3, sp, #288	@ 0x120
 8012088:	441d      	add	r5, r3
 801208a:	4644      	mov	r4, r8
 801208c:	2000      	movs	r0, #0
 801208e:	2100      	movs	r1, #0
 8012090:	2c00      	cmp	r4, #0
 8012092:	da35      	bge.n	8012100 <__kernel_rem_pio2+0x5c0>
 8012094:	f1b9 0f00 	cmp.w	r9, #0
 8012098:	d038      	beq.n	801210c <__kernel_rem_pio2+0x5cc>
 801209a:	4602      	mov	r2, r0
 801209c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80120a0:	9c04      	ldr	r4, [sp, #16]
 80120a2:	e9c4 2300 	strd	r2, r3, [r4]
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80120ae:	f7ee f8b7 	bl	8000220 <__aeabi_dsub>
 80120b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80120b4:	2401      	movs	r4, #1
 80120b6:	45a0      	cmp	r8, r4
 80120b8:	da2b      	bge.n	8012112 <__kernel_rem_pio2+0x5d2>
 80120ba:	f1b9 0f00 	cmp.w	r9, #0
 80120be:	d002      	beq.n	80120c6 <__kernel_rem_pio2+0x586>
 80120c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80120c4:	4619      	mov	r1, r3
 80120c6:	9b04      	ldr	r3, [sp, #16]
 80120c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80120cc:	e7a5      	b.n	801201a <__kernel_rem_pio2+0x4da>
 80120ce:	9c05      	ldr	r4, [sp, #20]
 80120d0:	ab48      	add	r3, sp, #288	@ 0x120
 80120d2:	441c      	add	r4, r3
 80120d4:	2000      	movs	r0, #0
 80120d6:	2100      	movs	r1, #0
 80120d8:	f1b8 0f00 	cmp.w	r8, #0
 80120dc:	da09      	bge.n	80120f2 <__kernel_rem_pio2+0x5b2>
 80120de:	f1b9 0f00 	cmp.w	r9, #0
 80120e2:	d002      	beq.n	80120ea <__kernel_rem_pio2+0x5aa>
 80120e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80120e8:	4619      	mov	r1, r3
 80120ea:	9b04      	ldr	r3, [sp, #16]
 80120ec:	e9c3 0100 	strd	r0, r1, [r3]
 80120f0:	e793      	b.n	801201a <__kernel_rem_pio2+0x4da>
 80120f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120f6:	f7ee f895 	bl	8000224 <__adddf3>
 80120fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80120fe:	e7eb      	b.n	80120d8 <__kernel_rem_pio2+0x598>
 8012100:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012104:	f7ee f88e 	bl	8000224 <__adddf3>
 8012108:	3c01      	subs	r4, #1
 801210a:	e7c1      	b.n	8012090 <__kernel_rem_pio2+0x550>
 801210c:	4602      	mov	r2, r0
 801210e:	460b      	mov	r3, r1
 8012110:	e7c6      	b.n	80120a0 <__kernel_rem_pio2+0x560>
 8012112:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012116:	f7ee f885 	bl	8000224 <__adddf3>
 801211a:	3401      	adds	r4, #1
 801211c:	e7cb      	b.n	80120b6 <__kernel_rem_pio2+0x576>
 801211e:	ed35 7b02 	vldmdb	r5!, {d7}
 8012122:	ed8d 7b00 	vstr	d7, [sp]
 8012126:	ed95 7b02 	vldr	d7, [r5, #8]
 801212a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801212e:	ec53 2b17 	vmov	r2, r3, d7
 8012132:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012136:	f7ee f875 	bl	8000224 <__adddf3>
 801213a:	4602      	mov	r2, r0
 801213c:	460b      	mov	r3, r1
 801213e:	4606      	mov	r6, r0
 8012140:	460f      	mov	r7, r1
 8012142:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012146:	f7ee f86b 	bl	8000220 <__aeabi_dsub>
 801214a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801214e:	f7ee f869 	bl	8000224 <__adddf3>
 8012152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012156:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801215a:	e9c5 6700 	strd	r6, r7, [r5]
 801215e:	e771      	b.n	8012044 <__kernel_rem_pio2+0x504>
 8012160:	ed34 7b02 	vldmdb	r4!, {d7}
 8012164:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012168:	ec51 0b17 	vmov	r0, r1, d7
 801216c:	4652      	mov	r2, sl
 801216e:	465b      	mov	r3, fp
 8012170:	ed8d 7b00 	vstr	d7, [sp]
 8012174:	f7ee f856 	bl	8000224 <__adddf3>
 8012178:	4602      	mov	r2, r0
 801217a:	460b      	mov	r3, r1
 801217c:	4606      	mov	r6, r0
 801217e:	460f      	mov	r7, r1
 8012180:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012184:	f7ee f84c 	bl	8000220 <__aeabi_dsub>
 8012188:	4652      	mov	r2, sl
 801218a:	465b      	mov	r3, fp
 801218c:	f7ee f84a 	bl	8000224 <__adddf3>
 8012190:	3d01      	subs	r5, #1
 8012192:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012196:	e9c4 6700 	strd	r6, r7, [r4]
 801219a:	e757      	b.n	801204c <__kernel_rem_pio2+0x50c>
 801219c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80121a0:	f7ee f840 	bl	8000224 <__adddf3>
 80121a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80121a8:	e758      	b.n	801205c <__kernel_rem_pio2+0x51c>
 80121aa:	bf00      	nop
 80121ac:	f3af 8000 	nop.w
	...
 80121b8:	41700000 	.word	0x41700000
 80121bc:	3e700000 	.word	0x3e700000
 80121c0:	9b04      	ldr	r3, [sp, #16]
 80121c2:	9a04      	ldr	r2, [sp, #16]
 80121c4:	601d      	str	r5, [r3, #0]
 80121c6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80121ca:	605c      	str	r4, [r3, #4]
 80121cc:	609f      	str	r7, [r3, #8]
 80121ce:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80121d2:	60d3      	str	r3, [r2, #12]
 80121d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80121d8:	6110      	str	r0, [r2, #16]
 80121da:	6153      	str	r3, [r2, #20]
 80121dc:	e71d      	b.n	801201a <__kernel_rem_pio2+0x4da>
 80121de:	bf00      	nop

080121e0 <__kernel_rem_pio2f>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	ed2d 8b04 	vpush	{d8-d9}
 80121e8:	b0d9      	sub	sp, #356	@ 0x164
 80121ea:	4690      	mov	r8, r2
 80121ec:	9001      	str	r0, [sp, #4]
 80121ee:	4ab6      	ldr	r2, [pc, #728]	@ (80124c8 <__kernel_rem_pio2f+0x2e8>)
 80121f0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80121f2:	f118 0f04 	cmn.w	r8, #4
 80121f6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80121fa:	460f      	mov	r7, r1
 80121fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8012200:	db26      	blt.n	8012250 <__kernel_rem_pio2f+0x70>
 8012202:	f1b8 0203 	subs.w	r2, r8, #3
 8012206:	bf48      	it	mi
 8012208:	f108 0204 	addmi.w	r2, r8, #4
 801220c:	10d2      	asrs	r2, r2, #3
 801220e:	1c55      	adds	r5, r2, #1
 8012210:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012212:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 8012216:	00e8      	lsls	r0, r5, #3
 8012218:	eba2 060b 	sub.w	r6, r2, fp
 801221c:	9002      	str	r0, [sp, #8]
 801221e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012222:	eb0a 0c0b 	add.w	ip, sl, fp
 8012226:	ac1c      	add	r4, sp, #112	@ 0x70
 8012228:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801222c:	2000      	movs	r0, #0
 801222e:	4560      	cmp	r0, ip
 8012230:	dd10      	ble.n	8012254 <__kernel_rem_pio2f+0x74>
 8012232:	a91c      	add	r1, sp, #112	@ 0x70
 8012234:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012238:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801223c:	2600      	movs	r6, #0
 801223e:	4556      	cmp	r6, sl
 8012240:	dc24      	bgt.n	801228c <__kernel_rem_pio2f+0xac>
 8012242:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012246:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 801224a:	4684      	mov	ip, r0
 801224c:	2400      	movs	r4, #0
 801224e:	e016      	b.n	801227e <__kernel_rem_pio2f+0x9e>
 8012250:	2200      	movs	r2, #0
 8012252:	e7dc      	b.n	801220e <__kernel_rem_pio2f+0x2e>
 8012254:	42c6      	cmn	r6, r0
 8012256:	bf5d      	ittte	pl
 8012258:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801225c:	ee07 1a90 	vmovpl	s15, r1
 8012260:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012264:	eef0 7a47 	vmovmi.f32	s15, s14
 8012268:	ece4 7a01 	vstmia	r4!, {s15}
 801226c:	3001      	adds	r0, #1
 801226e:	e7de      	b.n	801222e <__kernel_rem_pio2f+0x4e>
 8012270:	ecfe 6a01 	vldmia	lr!, {s13}
 8012274:	ed3c 7a01 	vldmdb	ip!, {s14}
 8012278:	eee6 7a87 	vfma.f32	s15, s13, s14
 801227c:	3401      	adds	r4, #1
 801227e:	455c      	cmp	r4, fp
 8012280:	ddf6      	ble.n	8012270 <__kernel_rem_pio2f+0x90>
 8012282:	ece9 7a01 	vstmia	r9!, {s15}
 8012286:	3601      	adds	r6, #1
 8012288:	3004      	adds	r0, #4
 801228a:	e7d8      	b.n	801223e <__kernel_rem_pio2f+0x5e>
 801228c:	a908      	add	r1, sp, #32
 801228e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012292:	9104      	str	r1, [sp, #16]
 8012294:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012296:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80124d4 <__kernel_rem_pio2f+0x2f4>
 801229a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80124d0 <__kernel_rem_pio2f+0x2f0>
 801229e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80122a2:	9203      	str	r2, [sp, #12]
 80122a4:	4654      	mov	r4, sl
 80122a6:	00a2      	lsls	r2, r4, #2
 80122a8:	9205      	str	r2, [sp, #20]
 80122aa:	aa58      	add	r2, sp, #352	@ 0x160
 80122ac:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80122b0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80122b4:	a944      	add	r1, sp, #272	@ 0x110
 80122b6:	aa08      	add	r2, sp, #32
 80122b8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80122bc:	4694      	mov	ip, r2
 80122be:	4626      	mov	r6, r4
 80122c0:	2e00      	cmp	r6, #0
 80122c2:	dc4c      	bgt.n	801235e <__kernel_rem_pio2f+0x17e>
 80122c4:	4628      	mov	r0, r5
 80122c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122ca:	f7ff fbd3 	bl	8011a74 <scalbnf>
 80122ce:	eeb0 8a40 	vmov.f32	s16, s0
 80122d2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80122d6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80122da:	f000 fa65 	bl	80127a8 <floorf>
 80122de:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80122e2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80122e6:	2d00      	cmp	r5, #0
 80122e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80122f0:	ee17 9a90 	vmov	r9, s15
 80122f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122f8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80122fc:	dd41      	ble.n	8012382 <__kernel_rem_pio2f+0x1a2>
 80122fe:	f104 3cff 	add.w	ip, r4, #4294967295
 8012302:	a908      	add	r1, sp, #32
 8012304:	f1c5 0e08 	rsb	lr, r5, #8
 8012308:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801230c:	fa46 f00e 	asr.w	r0, r6, lr
 8012310:	4481      	add	r9, r0
 8012312:	fa00 f00e 	lsl.w	r0, r0, lr
 8012316:	1a36      	subs	r6, r6, r0
 8012318:	f1c5 0007 	rsb	r0, r5, #7
 801231c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012320:	4106      	asrs	r6, r0
 8012322:	2e00      	cmp	r6, #0
 8012324:	dd3c      	ble.n	80123a0 <__kernel_rem_pio2f+0x1c0>
 8012326:	f04f 0e00 	mov.w	lr, #0
 801232a:	f109 0901 	add.w	r9, r9, #1
 801232e:	4670      	mov	r0, lr
 8012330:	4574      	cmp	r4, lr
 8012332:	dc68      	bgt.n	8012406 <__kernel_rem_pio2f+0x226>
 8012334:	2d00      	cmp	r5, #0
 8012336:	dd03      	ble.n	8012340 <__kernel_rem_pio2f+0x160>
 8012338:	2d01      	cmp	r5, #1
 801233a:	d074      	beq.n	8012426 <__kernel_rem_pio2f+0x246>
 801233c:	2d02      	cmp	r5, #2
 801233e:	d07d      	beq.n	801243c <__kernel_rem_pio2f+0x25c>
 8012340:	2e02      	cmp	r6, #2
 8012342:	d12d      	bne.n	80123a0 <__kernel_rem_pio2f+0x1c0>
 8012344:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012348:	ee30 8a48 	vsub.f32	s16, s0, s16
 801234c:	b340      	cbz	r0, 80123a0 <__kernel_rem_pio2f+0x1c0>
 801234e:	4628      	mov	r0, r5
 8012350:	9306      	str	r3, [sp, #24]
 8012352:	f7ff fb8f 	bl	8011a74 <scalbnf>
 8012356:	9b06      	ldr	r3, [sp, #24]
 8012358:	ee38 8a40 	vsub.f32	s16, s16, s0
 801235c:	e020      	b.n	80123a0 <__kernel_rem_pio2f+0x1c0>
 801235e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012362:	3e01      	subs	r6, #1
 8012364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801236c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012370:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012374:	ecac 0a01 	vstmia	ip!, {s0}
 8012378:	ed30 0a01 	vldmdb	r0!, {s0}
 801237c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012380:	e79e      	b.n	80122c0 <__kernel_rem_pio2f+0xe0>
 8012382:	d105      	bne.n	8012390 <__kernel_rem_pio2f+0x1b0>
 8012384:	1e60      	subs	r0, r4, #1
 8012386:	a908      	add	r1, sp, #32
 8012388:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801238c:	11f6      	asrs	r6, r6, #7
 801238e:	e7c8      	b.n	8012322 <__kernel_rem_pio2f+0x142>
 8012390:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012394:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239c:	da31      	bge.n	8012402 <__kernel_rem_pio2f+0x222>
 801239e:	2600      	movs	r6, #0
 80123a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80123a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a8:	f040 8098 	bne.w	80124dc <__kernel_rem_pio2f+0x2fc>
 80123ac:	1e60      	subs	r0, r4, #1
 80123ae:	2200      	movs	r2, #0
 80123b0:	4550      	cmp	r0, sl
 80123b2:	da4b      	bge.n	801244c <__kernel_rem_pio2f+0x26c>
 80123b4:	2a00      	cmp	r2, #0
 80123b6:	d065      	beq.n	8012484 <__kernel_rem_pio2f+0x2a4>
 80123b8:	3c01      	subs	r4, #1
 80123ba:	ab08      	add	r3, sp, #32
 80123bc:	3d08      	subs	r5, #8
 80123be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d0f8      	beq.n	80123b8 <__kernel_rem_pio2f+0x1d8>
 80123c6:	4628      	mov	r0, r5
 80123c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80123cc:	f7ff fb52 	bl	8011a74 <scalbnf>
 80123d0:	1c63      	adds	r3, r4, #1
 80123d2:	aa44      	add	r2, sp, #272	@ 0x110
 80123d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80124d4 <__kernel_rem_pio2f+0x2f4>
 80123d8:	0099      	lsls	r1, r3, #2
 80123da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80123de:	4623      	mov	r3, r4
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f280 80a9 	bge.w	8012538 <__kernel_rem_pio2f+0x358>
 80123e6:	4623      	mov	r3, r4
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f2c0 80c7 	blt.w	801257c <__kernel_rem_pio2f+0x39c>
 80123ee:	aa44      	add	r2, sp, #272	@ 0x110
 80123f0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80123f4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80124cc <__kernel_rem_pio2f+0x2ec>
 80123f8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 80123fc:	2000      	movs	r0, #0
 80123fe:	1ae2      	subs	r2, r4, r3
 8012400:	e0b1      	b.n	8012566 <__kernel_rem_pio2f+0x386>
 8012402:	2602      	movs	r6, #2
 8012404:	e78f      	b.n	8012326 <__kernel_rem_pio2f+0x146>
 8012406:	f852 1b04 	ldr.w	r1, [r2], #4
 801240a:	b948      	cbnz	r0, 8012420 <__kernel_rem_pio2f+0x240>
 801240c:	b121      	cbz	r1, 8012418 <__kernel_rem_pio2f+0x238>
 801240e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012412:	f842 1c04 	str.w	r1, [r2, #-4]
 8012416:	2101      	movs	r1, #1
 8012418:	f10e 0e01 	add.w	lr, lr, #1
 801241c:	4608      	mov	r0, r1
 801241e:	e787      	b.n	8012330 <__kernel_rem_pio2f+0x150>
 8012420:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012424:	e7f5      	b.n	8012412 <__kernel_rem_pio2f+0x232>
 8012426:	f104 3cff 	add.w	ip, r4, #4294967295
 801242a:	aa08      	add	r2, sp, #32
 801242c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012430:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012434:	a908      	add	r1, sp, #32
 8012436:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801243a:	e781      	b.n	8012340 <__kernel_rem_pio2f+0x160>
 801243c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012440:	aa08      	add	r2, sp, #32
 8012442:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012446:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801244a:	e7f3      	b.n	8012434 <__kernel_rem_pio2f+0x254>
 801244c:	a908      	add	r1, sp, #32
 801244e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012452:	3801      	subs	r0, #1
 8012454:	430a      	orrs	r2, r1
 8012456:	e7ab      	b.n	80123b0 <__kernel_rem_pio2f+0x1d0>
 8012458:	3201      	adds	r2, #1
 801245a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801245e:	2e00      	cmp	r6, #0
 8012460:	d0fa      	beq.n	8012458 <__kernel_rem_pio2f+0x278>
 8012462:	9905      	ldr	r1, [sp, #20]
 8012464:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012468:	eb0d 0001 	add.w	r0, sp, r1
 801246c:	18e6      	adds	r6, r4, r3
 801246e:	a91c      	add	r1, sp, #112	@ 0x70
 8012470:	f104 0c01 	add.w	ip, r4, #1
 8012474:	384c      	subs	r0, #76	@ 0x4c
 8012476:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801247a:	4422      	add	r2, r4
 801247c:	4562      	cmp	r2, ip
 801247e:	da04      	bge.n	801248a <__kernel_rem_pio2f+0x2aa>
 8012480:	4614      	mov	r4, r2
 8012482:	e710      	b.n	80122a6 <__kernel_rem_pio2f+0xc6>
 8012484:	9804      	ldr	r0, [sp, #16]
 8012486:	2201      	movs	r2, #1
 8012488:	e7e7      	b.n	801245a <__kernel_rem_pio2f+0x27a>
 801248a:	9903      	ldr	r1, [sp, #12]
 801248c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012490:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012494:	9105      	str	r1, [sp, #20]
 8012496:	ee07 1a90 	vmov	s15, r1
 801249a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801249e:	2400      	movs	r4, #0
 80124a0:	ece6 7a01 	vstmia	r6!, {s15}
 80124a4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 80124a8:	46b1      	mov	r9, r6
 80124aa:	455c      	cmp	r4, fp
 80124ac:	dd04      	ble.n	80124b8 <__kernel_rem_pio2f+0x2d8>
 80124ae:	ece0 7a01 	vstmia	r0!, {s15}
 80124b2:	f10c 0c01 	add.w	ip, ip, #1
 80124b6:	e7e1      	b.n	801247c <__kernel_rem_pio2f+0x29c>
 80124b8:	ecfe 6a01 	vldmia	lr!, {s13}
 80124bc:	ed39 7a01 	vldmdb	r9!, {s14}
 80124c0:	3401      	adds	r4, #1
 80124c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80124c6:	e7f0      	b.n	80124aa <__kernel_rem_pio2f+0x2ca>
 80124c8:	08012e9c 	.word	0x08012e9c
 80124cc:	08012e70 	.word	0x08012e70
 80124d0:	43800000 	.word	0x43800000
 80124d4:	3b800000 	.word	0x3b800000
 80124d8:	00000000 	.word	0x00000000
 80124dc:	9b02      	ldr	r3, [sp, #8]
 80124de:	eeb0 0a48 	vmov.f32	s0, s16
 80124e2:	eba3 0008 	sub.w	r0, r3, r8
 80124e6:	f7ff fac5 	bl	8011a74 <scalbnf>
 80124ea:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80124d0 <__kernel_rem_pio2f+0x2f0>
 80124ee:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f6:	db19      	blt.n	801252c <__kernel_rem_pio2f+0x34c>
 80124f8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80124d4 <__kernel_rem_pio2f+0x2f4>
 80124fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012500:	aa08      	add	r2, sp, #32
 8012502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012506:	3508      	adds	r5, #8
 8012508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801250c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012514:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012518:	ee10 3a10 	vmov	r3, s0
 801251c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012520:	ee17 3a90 	vmov	r3, s15
 8012524:	3401      	adds	r4, #1
 8012526:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801252a:	e74c      	b.n	80123c6 <__kernel_rem_pio2f+0x1e6>
 801252c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012530:	aa08      	add	r2, sp, #32
 8012532:	ee10 3a10 	vmov	r3, s0
 8012536:	e7f6      	b.n	8012526 <__kernel_rem_pio2f+0x346>
 8012538:	a808      	add	r0, sp, #32
 801253a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801253e:	9001      	str	r0, [sp, #4]
 8012540:	ee07 0a90 	vmov	s15, r0
 8012544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012548:	3b01      	subs	r3, #1
 801254a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801254e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012552:	ed62 7a01 	vstmdb	r2!, {s15}
 8012556:	e743      	b.n	80123e0 <__kernel_rem_pio2f+0x200>
 8012558:	ecfc 6a01 	vldmia	ip!, {s13}
 801255c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012560:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012564:	3001      	adds	r0, #1
 8012566:	4550      	cmp	r0, sl
 8012568:	dc01      	bgt.n	801256e <__kernel_rem_pio2f+0x38e>
 801256a:	4290      	cmp	r0, r2
 801256c:	ddf4      	ble.n	8012558 <__kernel_rem_pio2f+0x378>
 801256e:	a858      	add	r0, sp, #352	@ 0x160
 8012570:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012574:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012578:	3b01      	subs	r3, #1
 801257a:	e735      	b.n	80123e8 <__kernel_rem_pio2f+0x208>
 801257c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801257e:	2b02      	cmp	r3, #2
 8012580:	dc09      	bgt.n	8012596 <__kernel_rem_pio2f+0x3b6>
 8012582:	2b00      	cmp	r3, #0
 8012584:	dc27      	bgt.n	80125d6 <__kernel_rem_pio2f+0x3f6>
 8012586:	d040      	beq.n	801260a <__kernel_rem_pio2f+0x42a>
 8012588:	f009 0007 	and.w	r0, r9, #7
 801258c:	b059      	add	sp, #356	@ 0x164
 801258e:	ecbd 8b04 	vpop	{d8-d9}
 8012592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012596:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012598:	2b03      	cmp	r3, #3
 801259a:	d1f5      	bne.n	8012588 <__kernel_rem_pio2f+0x3a8>
 801259c:	aa30      	add	r2, sp, #192	@ 0xc0
 801259e:	1f0b      	subs	r3, r1, #4
 80125a0:	4413      	add	r3, r2
 80125a2:	461a      	mov	r2, r3
 80125a4:	4620      	mov	r0, r4
 80125a6:	2800      	cmp	r0, #0
 80125a8:	dc50      	bgt.n	801264c <__kernel_rem_pio2f+0x46c>
 80125aa:	4622      	mov	r2, r4
 80125ac:	2a01      	cmp	r2, #1
 80125ae:	dc5d      	bgt.n	801266c <__kernel_rem_pio2f+0x48c>
 80125b0:	ab30      	add	r3, sp, #192	@ 0xc0
 80125b2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 80125b6:	440b      	add	r3, r1
 80125b8:	2c01      	cmp	r4, #1
 80125ba:	dc67      	bgt.n	801268c <__kernel_rem_pio2f+0x4ac>
 80125bc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80125c0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80125c4:	2e00      	cmp	r6, #0
 80125c6:	d167      	bne.n	8012698 <__kernel_rem_pio2f+0x4b8>
 80125c8:	edc7 6a00 	vstr	s13, [r7]
 80125cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80125d0:	edc7 7a02 	vstr	s15, [r7, #8]
 80125d4:	e7d8      	b.n	8012588 <__kernel_rem_pio2f+0x3a8>
 80125d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80125d8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 80125dc:	440b      	add	r3, r1
 80125de:	4622      	mov	r2, r4
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	da24      	bge.n	801262e <__kernel_rem_pio2f+0x44e>
 80125e4:	b34e      	cbz	r6, 801263a <__kernel_rem_pio2f+0x45a>
 80125e6:	eef1 7a47 	vneg.f32	s15, s14
 80125ea:	edc7 7a00 	vstr	s15, [r7]
 80125ee:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80125f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125f6:	aa31      	add	r2, sp, #196	@ 0xc4
 80125f8:	2301      	movs	r3, #1
 80125fa:	429c      	cmp	r4, r3
 80125fc:	da20      	bge.n	8012640 <__kernel_rem_pio2f+0x460>
 80125fe:	b10e      	cbz	r6, 8012604 <__kernel_rem_pio2f+0x424>
 8012600:	eef1 7a67 	vneg.f32	s15, s15
 8012604:	edc7 7a01 	vstr	s15, [r7, #4]
 8012608:	e7be      	b.n	8012588 <__kernel_rem_pio2f+0x3a8>
 801260a:	ab30      	add	r3, sp, #192	@ 0xc0
 801260c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80124d8 <__kernel_rem_pio2f+0x2f8>
 8012610:	440b      	add	r3, r1
 8012612:	2c00      	cmp	r4, #0
 8012614:	da05      	bge.n	8012622 <__kernel_rem_pio2f+0x442>
 8012616:	b10e      	cbz	r6, 801261c <__kernel_rem_pio2f+0x43c>
 8012618:	eef1 7a67 	vneg.f32	s15, s15
 801261c:	edc7 7a00 	vstr	s15, [r7]
 8012620:	e7b2      	b.n	8012588 <__kernel_rem_pio2f+0x3a8>
 8012622:	ed33 7a01 	vldmdb	r3!, {s14}
 8012626:	3c01      	subs	r4, #1
 8012628:	ee77 7a87 	vadd.f32	s15, s15, s14
 801262c:	e7f1      	b.n	8012612 <__kernel_rem_pio2f+0x432>
 801262e:	ed73 7a01 	vldmdb	r3!, {s15}
 8012632:	3a01      	subs	r2, #1
 8012634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012638:	e7d2      	b.n	80125e0 <__kernel_rem_pio2f+0x400>
 801263a:	eef0 7a47 	vmov.f32	s15, s14
 801263e:	e7d4      	b.n	80125ea <__kernel_rem_pio2f+0x40a>
 8012640:	ecb2 7a01 	vldmia	r2!, {s14}
 8012644:	3301      	adds	r3, #1
 8012646:	ee77 7a87 	vadd.f32	s15, s15, s14
 801264a:	e7d6      	b.n	80125fa <__kernel_rem_pio2f+0x41a>
 801264c:	ed72 7a01 	vldmdb	r2!, {s15}
 8012650:	edd2 6a01 	vldr	s13, [r2, #4]
 8012654:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012658:	3801      	subs	r0, #1
 801265a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801265e:	ed82 7a00 	vstr	s14, [r2]
 8012662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012666:	edc2 7a01 	vstr	s15, [r2, #4]
 801266a:	e79c      	b.n	80125a6 <__kernel_rem_pio2f+0x3c6>
 801266c:	ed73 7a01 	vldmdb	r3!, {s15}
 8012670:	edd3 6a01 	vldr	s13, [r3, #4]
 8012674:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012678:	3a01      	subs	r2, #1
 801267a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801267e:	ed83 7a00 	vstr	s14, [r3]
 8012682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012686:	edc3 7a01 	vstr	s15, [r3, #4]
 801268a:	e78f      	b.n	80125ac <__kernel_rem_pio2f+0x3cc>
 801268c:	ed33 7a01 	vldmdb	r3!, {s14}
 8012690:	3c01      	subs	r4, #1
 8012692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012696:	e78f      	b.n	80125b8 <__kernel_rem_pio2f+0x3d8>
 8012698:	eef1 6a66 	vneg.f32	s13, s13
 801269c:	eeb1 7a47 	vneg.f32	s14, s14
 80126a0:	edc7 6a00 	vstr	s13, [r7]
 80126a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80126a8:	eef1 7a67 	vneg.f32	s15, s15
 80126ac:	e790      	b.n	80125d0 <__kernel_rem_pio2f+0x3f0>
 80126ae:	bf00      	nop

080126b0 <floor>:
 80126b0:	ec51 0b10 	vmov	r0, r1, d0
 80126b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80126c0:	2e13      	cmp	r6, #19
 80126c2:	460c      	mov	r4, r1
 80126c4:	4605      	mov	r5, r0
 80126c6:	4680      	mov	r8, r0
 80126c8:	dc34      	bgt.n	8012734 <floor+0x84>
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	da17      	bge.n	80126fe <floor+0x4e>
 80126ce:	a332      	add	r3, pc, #200	@ (adr r3, 8012798 <floor+0xe8>)
 80126d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d4:	f7ed fda6 	bl	8000224 <__adddf3>
 80126d8:	2200      	movs	r2, #0
 80126da:	2300      	movs	r3, #0
 80126dc:	f7ee f9e8 	bl	8000ab0 <__aeabi_dcmpgt>
 80126e0:	b150      	cbz	r0, 80126f8 <floor+0x48>
 80126e2:	2c00      	cmp	r4, #0
 80126e4:	da55      	bge.n	8012792 <floor+0xe2>
 80126e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80126ea:	432c      	orrs	r4, r5
 80126ec:	2500      	movs	r5, #0
 80126ee:	42ac      	cmp	r4, r5
 80126f0:	4c2b      	ldr	r4, [pc, #172]	@ (80127a0 <floor+0xf0>)
 80126f2:	bf08      	it	eq
 80126f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80126f8:	4621      	mov	r1, r4
 80126fa:	4628      	mov	r0, r5
 80126fc:	e023      	b.n	8012746 <floor+0x96>
 80126fe:	4f29      	ldr	r7, [pc, #164]	@ (80127a4 <floor+0xf4>)
 8012700:	4137      	asrs	r7, r6
 8012702:	ea01 0307 	and.w	r3, r1, r7
 8012706:	4303      	orrs	r3, r0
 8012708:	d01d      	beq.n	8012746 <floor+0x96>
 801270a:	a323      	add	r3, pc, #140	@ (adr r3, 8012798 <floor+0xe8>)
 801270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012710:	f7ed fd88 	bl	8000224 <__adddf3>
 8012714:	2200      	movs	r2, #0
 8012716:	2300      	movs	r3, #0
 8012718:	f7ee f9ca 	bl	8000ab0 <__aeabi_dcmpgt>
 801271c:	2800      	cmp	r0, #0
 801271e:	d0eb      	beq.n	80126f8 <floor+0x48>
 8012720:	2c00      	cmp	r4, #0
 8012722:	bfbe      	ittt	lt
 8012724:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012728:	4133      	asrlt	r3, r6
 801272a:	18e4      	addlt	r4, r4, r3
 801272c:	ea24 0407 	bic.w	r4, r4, r7
 8012730:	2500      	movs	r5, #0
 8012732:	e7e1      	b.n	80126f8 <floor+0x48>
 8012734:	2e33      	cmp	r6, #51	@ 0x33
 8012736:	dd0a      	ble.n	801274e <floor+0x9e>
 8012738:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801273c:	d103      	bne.n	8012746 <floor+0x96>
 801273e:	4602      	mov	r2, r0
 8012740:	460b      	mov	r3, r1
 8012742:	f7ed fd6f 	bl	8000224 <__adddf3>
 8012746:	ec41 0b10 	vmov	d0, r0, r1
 801274a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012752:	f04f 37ff 	mov.w	r7, #4294967295
 8012756:	40df      	lsrs	r7, r3
 8012758:	4207      	tst	r7, r0
 801275a:	d0f4      	beq.n	8012746 <floor+0x96>
 801275c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012798 <floor+0xe8>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	f7ed fd5f 	bl	8000224 <__adddf3>
 8012766:	2200      	movs	r2, #0
 8012768:	2300      	movs	r3, #0
 801276a:	f7ee f9a1 	bl	8000ab0 <__aeabi_dcmpgt>
 801276e:	2800      	cmp	r0, #0
 8012770:	d0c2      	beq.n	80126f8 <floor+0x48>
 8012772:	2c00      	cmp	r4, #0
 8012774:	da0a      	bge.n	801278c <floor+0xdc>
 8012776:	2e14      	cmp	r6, #20
 8012778:	d101      	bne.n	801277e <floor+0xce>
 801277a:	3401      	adds	r4, #1
 801277c:	e006      	b.n	801278c <floor+0xdc>
 801277e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012782:	2301      	movs	r3, #1
 8012784:	40b3      	lsls	r3, r6
 8012786:	441d      	add	r5, r3
 8012788:	4545      	cmp	r5, r8
 801278a:	d3f6      	bcc.n	801277a <floor+0xca>
 801278c:	ea25 0507 	bic.w	r5, r5, r7
 8012790:	e7b2      	b.n	80126f8 <floor+0x48>
 8012792:	2500      	movs	r5, #0
 8012794:	462c      	mov	r4, r5
 8012796:	e7af      	b.n	80126f8 <floor+0x48>
 8012798:	8800759c 	.word	0x8800759c
 801279c:	7e37e43c 	.word	0x7e37e43c
 80127a0:	bff00000 	.word	0xbff00000
 80127a4:	000fffff 	.word	0x000fffff

080127a8 <floorf>:
 80127a8:	ee10 3a10 	vmov	r3, s0
 80127ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80127b0:	3a7f      	subs	r2, #127	@ 0x7f
 80127b2:	2a16      	cmp	r2, #22
 80127b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80127b8:	dc2b      	bgt.n	8012812 <floorf+0x6a>
 80127ba:	2a00      	cmp	r2, #0
 80127bc:	da12      	bge.n	80127e4 <floorf+0x3c>
 80127be:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012824 <floorf+0x7c>
 80127c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80127ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ce:	dd06      	ble.n	80127de <floorf+0x36>
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	da24      	bge.n	801281e <floorf+0x76>
 80127d4:	2900      	cmp	r1, #0
 80127d6:	4b14      	ldr	r3, [pc, #80]	@ (8012828 <floorf+0x80>)
 80127d8:	bf08      	it	eq
 80127da:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80127de:	ee00 3a10 	vmov	s0, r3
 80127e2:	4770      	bx	lr
 80127e4:	4911      	ldr	r1, [pc, #68]	@ (801282c <floorf+0x84>)
 80127e6:	4111      	asrs	r1, r2
 80127e8:	420b      	tst	r3, r1
 80127ea:	d0fa      	beq.n	80127e2 <floorf+0x3a>
 80127ec:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012824 <floorf+0x7c>
 80127f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80127f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fc:	ddef      	ble.n	80127de <floorf+0x36>
 80127fe:	2b00      	cmp	r3, #0
 8012800:	bfbe      	ittt	lt
 8012802:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012806:	fa40 f202 	asrlt.w	r2, r0, r2
 801280a:	189b      	addlt	r3, r3, r2
 801280c:	ea23 0301 	bic.w	r3, r3, r1
 8012810:	e7e5      	b.n	80127de <floorf+0x36>
 8012812:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012816:	d3e4      	bcc.n	80127e2 <floorf+0x3a>
 8012818:	ee30 0a00 	vadd.f32	s0, s0, s0
 801281c:	4770      	bx	lr
 801281e:	2300      	movs	r3, #0
 8012820:	e7dd      	b.n	80127de <floorf+0x36>
 8012822:	bf00      	nop
 8012824:	7149f2ca 	.word	0x7149f2ca
 8012828:	bf800000 	.word	0xbf800000
 801282c:	007fffff 	.word	0x007fffff

08012830 <_init>:
 8012830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012832:	bf00      	nop
 8012834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012836:	bc08      	pop	{r3}
 8012838:	469e      	mov	lr, r3
 801283a:	4770      	bx	lr

0801283c <_fini>:
 801283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283e:	bf00      	nop
 8012840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012842:	bc08      	pop	{r3}
 8012844:	469e      	mov	lr, r3
 8012846:	4770      	bx	lr
