
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a78  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08010c50  08010c50  00011c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011270  08011270  00013158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011270  08011270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011278  08011278  00013158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011278  08011278  00012278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801127c  0801127c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08011280  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f4  20000158  080113d8  00013158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000224c  080113d8  0001324c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bad0  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053b1  00000000  00000000  0003ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  00044010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015dd  00000000  00000000  00045c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6d5  00000000  00000000  0004721d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a05e  00000000  00000000  000748f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119d65  00000000  00000000  0009e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b86b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f0  00000000  00000000  001b86f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c07e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000158 	.word	0x20000158
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010c38 	.word	0x08010c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000015c 	.word	0x2000015c
 8000214:	08010c38 	.word	0x08010c38

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fe60 	bl	8008ca4 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f006 ff49 	bl	8007e88 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe02 	bl	8001d44 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ffe3 	bl	800332c <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8dd 	bl	8003578 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8d4 	bl	8003578 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8c0 	bl	8003578 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f8b7 	bl	8003578 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f8a5 	bl	8003578 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f898 	bl	8003578 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 fb54 	bl	8009b30 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f86f 	bl	8003578 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 fb37 	bl	8009b30 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f852 	bl	8003578 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 fb1c 	bl	8009b30 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f833 	bl	8003578 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fb80 	bl	8001d44 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d fc05 	bl	800eed0 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d fbd1 	bl	800eed0 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	623b      	str	r3, [r7, #32]
    float mass_torque = motor->En->plotter_mass * s*s * qdd;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 7a00 	vldr	s15, [r7]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	ed97 7a01 	vldr	s14, [r7, #4]
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	edc7 7a07 	vstr	s15, [r7, #28]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800179e:	f7ff f821 	bl	80007e4 <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f9d3 	bl	8000b54 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 80017b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001854 <REVOLUTE_MOTOR_DFD_Compute+0x1d8>
 80017c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	edc7 7a05 	vstr	s15, [r7, #20]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9b9 	bl	8000b54 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eeb1 8a67 	vneg.f32	s16, s15
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9ac 	bl	8000b54 <__aeabi_d2f>
 80017fc:	4604      	mov	r4, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9a3 	bl	8000b54 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef1 8a67 	vneg.f32	s17, s15
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f996 	bl	8000b54 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	ee02 3a10 	vmov	s4, r3
 800182e:	eef0 1a68 	vmov.f32	s3, s17
 8001832:	ee01 4a10 	vmov	s2, r4
 8001836:	eef0 0a48 	vmov.f32	s1, s16
 800183a:	ed97 0a05 	vldr	s0, [r7, #20]
 800183e:	f000 fa81 	bl	8001d44 <mapf>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
}
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	ecbd 8b02 	vpop	{d8}
 8001852:	bdb0      	pop	{r4, r5, r7, pc}
 8001854:	00000000 	.word	0x00000000

08001858 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	ed2d 8b02 	vpush	{d8}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001894:	f7fe fe7c 	bl	8000590 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018b0:	f7fe fe6e 	bl	8000590 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcb2 	bl	8000224 <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe ff88 	bl	80007e4 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018e4:	ed97 7a00 	vldr	s14, [r7]
 80018e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb1 8a67 	vneg.f32	s16, s15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f91b 	bl	8000b54 <__aeabi_d2f>
 800191e:	4604      	mov	r4, r0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f912 	bl	8000b54 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef1 8a67 	vneg.f32	s17, s15
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f905 	bl	8000b54 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	ee02 3a10 	vmov	s4, r3
 8001950:	eef0 1a68 	vmov.f32	s3, s17
 8001954:	ee01 4a10 	vmov	s2, r4
 8001958:	eef0 0a48 	vmov.f32	s1, s16
 800195c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001960:	f000 f9f0 	bl	8001d44 <mapf>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	ecbd 8b02 	vpop	{d8}
 8001974:	bdb0      	pop	{r4, r5, r7, pc}

08001976 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 800199a:	b5b0      	push	{r4, r5, r7, lr}
 800199c:	ed2d 8b02 	vpush	{d8}
 80019a0:	b088      	sub	sp, #32
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019aa:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ae:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	ee17 0a90 	vmov	r0, s15
 80019ca:	f7fe fd89 	bl	80004e0 <__aeabi_f2d>
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f7fe fd84 	bl	80004e0 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	ec43 2b10 	vmov	d0, r2, r3
 80019e0:	f00d fa22 	bl	800ee28 <cos>
 80019e4:	ec53 2b10 	vmov	r2, r3, d0
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fdd0 	bl	8000590 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f8ac 	bl	8000b54 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	ed97 7a00 	vldr	s14, [r7]
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd54 	bl	80004e0 <__aeabi_f2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	4629      	mov	r1, r5
 8001a40:	f7fe fda6 	bl	8000590 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a54:	f7fe fec6 	bl	80007e4 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f878 	bl	8000b54 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f862 	bl	8000b54 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb1 8a67 	vneg.f32	s16, s15
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f855 	bl	8000b54 <__aeabi_d2f>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f84c 	bl	8000b54 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef1 8a67 	vneg.f32	s17, s15
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f83f 	bl	8000b54 <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	ee02 3a10 	vmov	s4, r3
 8001adc:	eef0 1a68 	vmov.f32	s3, s17
 8001ae0:	ee01 4a10 	vmov	s2, r4
 8001ae4:	eef0 0a48 	vmov.f32	s1, s16
 8001ae8:	ed97 0a04 	vldr	s0, [r7, #16]
 8001aec:	f000 f92a 	bl	8001d44 <mapf>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
}
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	ecbd 8b02 	vpop	{d8}
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b04 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	ed2d 8b02 	vpush	{d8}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	460b      	mov	r3, r1
 8001b12:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b16:	edc7 0a00 	vstr	s1, [r7]
 8001b1a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b1c:	897b      	ldrh	r3, [r7, #10]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <FIR_init+0x2a>
        numTaps += 1;
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	897a      	ldrh	r2, [r7, #10]
 8001b32:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00d f868 	bl	800ec14 <malloc>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b4c:	897b      	ldrh	r3, [r7, #10]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00d f85f 	bl	800ec14 <malloc>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80e0 	beq.w	8001d28 <FIR_init+0x224>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80db 	beq.w	8001d28 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b76:	e00a      	b.n	8001b8e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3f0      	bcc.n	8001b78 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b96:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b9a:	ed97 7a00 	vldr	s14, [r7]
 8001b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bb2:	e077      	b.n	8001ca4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bb4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10c      	bne.n	8001bda <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
 8001bd8:	e02c      	b.n	8001c34 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bdc:	8afb      	ldrh	r3, [r7, #22]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d34 <FIR_init+0x230>
 8001bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	f00d fa3a 	bl	800f07c <sinf>
 8001c08:	eef0 6a40 	vmov.f32	s13, s0
 8001c0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c18:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d38 <FIR_init+0x234>
 8001c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c30:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	ed93 8a00 	vldr	s16, [r3]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d34 <FIR_init+0x230>
 8001c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c68:	eeb0 0a66 	vmov.f32	s0, s13
 8001c6c:	f00d f9c2 	bl	800eff4 <cosf>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d3c <FIR_init+0x238>
 8001c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d40 <FIR_init+0x23c>
 8001c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c94:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ca4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	db82      	blt.n	8001bb4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	83fb      	strh	r3, [r7, #30]
 8001cb8:	e00f      	b.n	8001cda <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	8bfb      	ldrh	r3, [r7, #30]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	8bfb      	ldrh	r3, [r7, #30]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	83fb      	strh	r3, [r7, #30]
 8001cda:	8bfa      	ldrh	r2, [r7, #30]
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3eb      	bcc.n	8001cba <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d01b      	beq.n	8001d28 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	83bb      	strh	r3, [r7, #28]
 8001cf4:	e014      	b.n	8001d20 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	edd3 6a00 	vldr	s13, [r3]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	8bbb      	ldrh	r3, [r7, #28]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	8bba      	ldrh	r2, [r7, #28]
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3e6      	bcc.n	8001cf6 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	ecbd 8b02 	vpop	{d8}
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40c90fdb 	.word	0x40c90fdb
 8001d38:	40490fdb 	.word	0x40490fdb
 8001d3c:	3eeb851f 	.word	0x3eeb851f
 8001d40:	3f0a3d71 	.word	0x3f0a3d71

08001d44 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d4e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d52:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d56:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d5a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	ee07 3a90 	vmov	s15, r3
}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <modbus_1t5_Timeout+0x3c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <modbus_1t5_Timeout+0x3c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <modbus_1t5_Timeout+0x3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <modbus_1t5_Timeout+0x3c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000174 	.word	0x20000174

08001df4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <modbus_3t5_Timeout+0x1c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	755a      	strb	r2, [r3, #21]

}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	20000174 	.word	0x20000174

08001e14 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f00b fd31 	bl	800d884 <HAL_UART_GetError>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d101      	bne.n	8001e2c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e28:	f7ff ffc4 	bl	8001db4 <modbus_1t5_Timeout>

	}
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	7e3a      	ldrb	r2, [r7, #24]
 8001e66:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <Modbus_init+0xc4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <Modbus_init+0xc8>)
 8001e76:	210e      	movs	r1, #14
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f009 ffb1 	bl	800bde0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2110      	movs	r1, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00b fca7 	bl	800d7d8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00b fcbe 	bl	800d810 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <Modbus_init+0xcc>)
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f00a ffef 	bl	800ce80 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <Modbus_init+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <Modbus_init+0xc4>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <Modbus_init+0xc4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001eb4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001eb8:	4413      	add	r3, r2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f00b f897 	bl	800cff4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <Modbus_init+0xc4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10c      	bne.n	8001ef0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <Modbus_init+0xc4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f008 ff5b 	bl	800ad98 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <Modbus_init+0xc4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f009 f9aa 	bl	800b244 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000174 	.word	0x20000174
 8001efc:	08001df5 	.word	0x08001df5
 8001f00:	08001e15 	.word	0x08001e15

08001f04 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f0c:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f10:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f14:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f18:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f1c:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f20:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f24:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f28:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f2c:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	6a3a      	ldr	r2, [r7, #32]
 8001f34:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00c ff06 	bl	800ed80 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	3310      	adds	r3, #16
 8001f78:	2240      	movs	r2, #64	@ 0x40
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00c feff 	bl	800ed80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	e00c      	b.n	8001fa2 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f92:	3304      	adds	r3, #4
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	4a79      	ldr	r2, [pc, #484]	@ (8002180 <MotorKalman_Init+0x27c>)
 8001f9a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	ddef      	ble.n	8001f88 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00c fee4 	bl	800ed80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fbc:	e00d      	b.n	8001fda <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	33be      	adds	r3, #190	@ 0xbe
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	ddee      	ble.n	8001fbe <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	33f0      	adds	r3, #240	@ 0xf0
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00c fec9 	bl	800ed80 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ff4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001ffe:	2210      	movs	r2, #16
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f00c febc 	bl	800ed80 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800200e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002012:	ed97 0a01 	vldr	s0, [r7, #4]
 8002016:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002018:	f000 f922 	bl	8002260 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 800201c:	ed97 0a00 	vldr	s0, [r7]
 8002020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002022:	f000 f94d 	bl	80022c0 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	2201      	movs	r2, #1
 8002030:	2104      	movs	r1, #4
 8002032:	f00c fd26 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	3310      	adds	r3, #16
 8002040:	2204      	movs	r2, #4
 8002042:	2104      	movs	r1, #4
 8002044:	f00c fd1d 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002054:	2204      	movs	r2, #4
 8002056:	2104      	movs	r1, #4
 8002058:	f00c fd13 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002068:	2201      	movs	r2, #1
 800206a:	2101      	movs	r1, #1
 800206c:	f00c fd09 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800207c:	2201      	movs	r2, #1
 800207e:	2101      	movs	r1, #1
 8002080:	f00c fcff 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002090:	2201      	movs	r2, #1
 8002092:	2101      	movs	r1, #1
 8002094:	f00c fcf5 	bl	800ea82 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020a4:	2204      	movs	r2, #4
 80020a6:	2104      	movs	r1, #4
 80020a8:	f00c fceb 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020b8:	2201      	movs	r2, #1
 80020ba:	2104      	movs	r1, #4
 80020bc:	f00c fce1 	bl	800ea82 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020cc:	2201      	movs	r2, #1
 80020ce:	2104      	movs	r1, #4
 80020d0:	f00c fcd7 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80020e0:	2204      	movs	r2, #4
 80020e2:	2104      	movs	r1, #4
 80020e4:	f00c fccd 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80020f4:	2204      	movs	r2, #4
 80020f6:	2101      	movs	r1, #1
 80020f8:	f00c fcc3 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002108:	2201      	movs	r2, #1
 800210a:	2101      	movs	r1, #1
 800210c:	f00c fcb9 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800211c:	2201      	movs	r2, #1
 800211e:	2104      	movs	r1, #4
 8002120:	f00c fcaf 	bl	800ea82 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002126:	f000 f82d 	bl	8002184 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	3390      	adds	r3, #144	@ 0x90
 8002134:	2204      	movs	r2, #4
 8002136:	2104      	movs	r1, #4
 8002138:	f00c fca3 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	33e0      	adds	r3, #224	@ 0xe0
 8002146:	2201      	movs	r2, #1
 8002148:	2104      	movs	r1, #4
 800214a:	f00c fc9a 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800215a:	2204      	movs	r2, #4
 800215c:	2104      	movs	r1, #4
 800215e:	f00c fc90 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800216e:	2201      	movs	r2, #1
 8002170:	2104      	movs	r1, #4
 8002172:	f00c fc86 	bl	800ea82 <arm_mat_init_f32>
}
 8002176:	bf00      	nop
 8002178:	3730      	adds	r7, #48	@ 0x30
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	42c80000 	.word	0x42c80000

08002184 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	eeb0 3a64 	vmov.f32	s6, s9
 80021c8:	eef0 2a45 	vmov.f32	s5, s10
 80021cc:	eeb0 2a65 	vmov.f32	s4, s11
 80021d0:	eef0 1a46 	vmov.f32	s3, s12
 80021d4:	eeb0 1a66 	vmov.f32	s2, s13
 80021d8:	eef0 0a47 	vmov.f32	s1, s14
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	f001 f83c 	bl	800325c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fdc6 	bl	800ed80 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021fa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002258 <MotorKalman_DiscretizeModel+0xd4>
 80021fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800222e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800225c <MotorKalman_DiscretizeModel+0xd8>
 8002232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002242:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002258 <MotorKalman_DiscretizeModel+0xd4>
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	3c23d70a 	.word	0x3c23d70a
 800225c:	3dcccccd 	.word	0x3dcccccd

08002260 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f00c fd82 	bl	800ed80 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 800227c:	edd7 7a00 	vldr	s15, [r7]
 8002280:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002298:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d107      	bne.n	80022b2 <MotorKalman_SetProcessNoise+0x52>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	d002      	beq.n	80022b8 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff66 	bl	8002184 <MotorKalman_DiscretizeModel>
    }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022cc:	ed97 0a00 	vldr	s0, [r7]
 80022d0:	f00c fe72 	bl	800efb8 <sqrtf>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b0b2      	sub	sp, #200	@ 0xc8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002302:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002316:	e041      	b.n	800239c <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	33c8      	adds	r3, #200	@ 0xc8
 8002320:	443b      	add	r3, r7
 8002322:	3b3c      	subs	r3, #60	@ 0x3c
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002330:	e02b      	b.n	800238a <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	33c8      	adds	r3, #200	@ 0xc8
 800233a:	443b      	add	r3, r7
 800233c:	3b3c      	subs	r3, #60	@ 0x3c
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002346:	009a      	lsls	r2, r3, #2
 8002348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800234c:	4413      	add	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	3324      	adds	r3, #36	@ 0x24
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	edd3 6a00 	vldr	s13, [r3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	33c8      	adds	r3, #200	@ 0xc8
 8002378:	443b      	add	r3, r7
 800237a:	3b3c      	subs	r3, #60	@ 0x3c
 800237c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002384:	3301      	adds	r3, #1
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800238a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800238e:	2b03      	cmp	r3, #3
 8002390:	ddcf      	ble.n	8002332 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002396:	3301      	adds	r3, #1
 8002398:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800239c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	ddb9      	ble.n	8002318 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023aa:	e021      	b.n	80023f0 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80023ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	33c8      	adds	r3, #200	@ 0xc8
 80023b4:	443b      	add	r3, r7
 80023b6:	3b3c      	subs	r3, #60	@ 0x3c
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c2:	3338      	adds	r3, #56	@ 0x38
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	edd3 6a00 	vldr	s13, [r3]
 80023cc:	edd7 7a00 	vldr	s15, [r7]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	ddd9      	ble.n	80023ac <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00c fcbd 	bl	800ed80 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f00c fcb6 	bl	800ed80 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800241a:	e05f      	b.n	80024dc <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002422:	e052      	b.n	80024ca <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	33c8      	adds	r3, #200	@ 0xc8
 8002434:	443b      	add	r3, r7
 8002436:	3b7c      	subs	r3, #124	@ 0x7c
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002444:	e038      	b.n	80024b8 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800244a:	009a      	lsls	r2, r3, #2
 800244c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	33c8      	adds	r3, #200	@ 0xc8
 8002456:	443b      	add	r3, r7
 8002458:	3b7c      	subs	r3, #124	@ 0x7c
 800245a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800245e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002462:	009a      	lsls	r2, r3, #2
 8002464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002468:	4413      	add	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3324      	adds	r3, #36	@ 0x24
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	edd3 6a00 	vldr	s13, [r3]
 8002476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002480:	4413      	add	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800249c:	4413      	add	r3, r2
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	33c8      	adds	r3, #200	@ 0xc8
 80024a6:	443b      	add	r3, r7
 80024a8:	3b7c      	subs	r3, #124	@ 0x7c
 80024aa:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024bc:	2b03      	cmp	r3, #3
 80024be:	ddc2      	ble.n	8002446 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024c4:	3301      	adds	r3, #1
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	dda8      	ble.n	8002424 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024d6:	3301      	adds	r3, #1
 80024d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	dd9b      	ble.n	800241c <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024ea:	e05f      	b.n	80025ac <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024f2:	e052      	b.n	800259a <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	33c8      	adds	r3, #200	@ 0xc8
 8002504:	443b      	add	r3, r7
 8002506:	3bbc      	subs	r3, #188	@ 0xbc
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002514:	e038      	b.n	8002588 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	33c8      	adds	r3, #200	@ 0xc8
 8002526:	443b      	add	r3, r7
 8002528:	3bbc      	subs	r3, #188	@ 0xbc
 800252a:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800252e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	33c8      	adds	r3, #200	@ 0xc8
 800253e:	443b      	add	r3, r7
 8002540:	3b7c      	subs	r3, #124	@ 0x7c
 8002542:	edd3 6a00 	vldr	s13, [r3]
 8002546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800254a:	009a      	lsls	r2, r3, #2
 800254c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002550:	4413      	add	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3324      	adds	r3, #36	@ 0x24
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800256c:	4413      	add	r3, r2
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	33c8      	adds	r3, #200	@ 0xc8
 8002576:	443b      	add	r3, r7
 8002578:	3bbc      	subs	r3, #188	@ 0xbc
 800257a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800257e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800258c:	2b03      	cmp	r3, #3
 800258e:	ddc2      	ble.n	8002516 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002594:	3301      	adds	r3, #1
 8002596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800259a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800259e:	2b03      	cmp	r3, #3
 80025a0:	dda8      	ble.n	80024f4 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a6:	3301      	adds	r3, #1
 80025a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	dd9b      	ble.n	80024ec <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025ba:	e037      	b.n	800262c <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025c2:	e02a      	b.n	800261a <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	33c8      	adds	r3, #200	@ 0xc8
 80025d4:	443b      	add	r3, r7
 80025d6:	3bbc      	subs	r3, #188	@ 0xbc
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025e6:	4413      	add	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	3354      	adds	r3, #84	@ 0x54
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fe:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002614:	3301      	adds	r3, #1
 8002616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800261a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800261e:	2b03      	cmp	r3, #3
 8002620:	ddd0      	ble.n	80025c4 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002626:	3301      	adds	r3, #1
 8002628:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800262c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002630:	2b03      	cmp	r3, #3
 8002632:	ddc3      	ble.n	80025bc <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	2104      	movs	r1, #4
 8002668:	f00c fa0b 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3310      	adds	r3, #16
 8002676:	2204      	movs	r2, #4
 8002678:	2104      	movs	r1, #4
 800267a:	f00c fa02 	bl	800ea82 <arm_mat_init_f32>
}
 800267e:	bf00      	nop
 8002680:	37c8      	adds	r7, #200	@ 0xc8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b0d0      	sub	sp, #320	@ 0x140
 800268c:	af00      	add	r7, sp, #0
 800268e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002692:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002696:	6018      	str	r0, [r3, #0]
 8002698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800269c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026a0:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80026a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80026b2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	edd3 7a02 	vldr	s15, [r3, #8]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002720:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002724:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002728:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002732:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002736:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800274c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002750:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002754:	ed93 7a00 	vldr	s14, [r3]
 8002758:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800275c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002760:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002764:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002778:	e04d      	b.n	8002816 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800277a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002784:	443b      	add	r3, r7
 8002786:	3b58      	subs	r3, #88	@ 0x58
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002794:	e036      	b.n	8002804 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002796:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027a0:	443b      	add	r3, r7
 80027a2:	3b58      	subs	r3, #88	@ 0x58
 80027a4:	ed93 7a00 	vldr	s14, [r3]
 80027a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027b6:	333c      	adds	r3, #60	@ 0x3c
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	edd3 6a00 	vldr	s13, [r3]
 80027c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ca:	4413      	add	r3, r2
 80027cc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027d0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	3304      	adds	r3, #4
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027f2:	443b      	add	r3, r7
 80027f4:	3b58      	subs	r3, #88	@ 0x58
 80027f6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027fe:	3301      	adds	r3, #1
 8002800:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002804:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002808:	2b03      	cmp	r3, #3
 800280a:	ddc4      	ble.n	8002796 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800280c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002810:	3301      	adds	r3, #1
 8002812:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002816:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800281a:	2b03      	cmp	r3, #3
 800281c:	ddad      	ble.n	800277a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800282c:	e021      	b.n	8002872 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800282e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002838:	443b      	add	r3, r7
 800283a:	3b58      	subs	r3, #88	@ 0x58
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002844:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800284e:	333c      	adds	r3, #60	@ 0x3c
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002864:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002868:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800286c:	3301      	adds	r3, #1
 800286e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002872:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002876:	2b03      	cmp	r3, #3
 8002878:	ddd9      	ble.n	800282e <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800287a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800287e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002888:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002894:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80028a8:	e04d      	b.n	8002946 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80028aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028b4:	443b      	add	r3, r7
 80028b6:	3b68      	subs	r3, #104	@ 0x68
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028c4:	e036      	b.n	8002934 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028d0:	443b      	add	r3, r7
 80028d2:	3b68      	subs	r3, #104	@ 0x68
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e2:	4413      	add	r3, r2
 80028e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028e8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	3304      	adds	r3, #4
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	edd3 6a00 	vldr	s13, [r3]
 80028f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002906:	333c      	adds	r3, #60	@ 0x3c
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002922:	443b      	add	r3, r7
 8002924:	3b68      	subs	r3, #104	@ 0x68
 8002926:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800292a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800292e:	3301      	adds	r3, #1
 8002930:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002934:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002938:	2b03      	cmp	r3, #3
 800293a:	ddc4      	ble.n	80028c6 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800293c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002940:	3301      	adds	r3, #1
 8002942:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800294a:	2b03      	cmp	r3, #3
 800294c:	ddad      	ble.n	80028aa <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800294e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002962:	e01a      	b.n	800299a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002964:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800296e:	443b      	add	r3, r7
 8002970:	3b68      	subs	r3, #104	@ 0x68
 8002972:	edd3 6a00 	vldr	s13, [r3]
 8002976:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800297a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002988:	443b      	add	r3, r7
 800298a:	3b78      	subs	r3, #120	@ 0x78
 800298c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002990:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002994:	3301      	adds	r3, #1
 8002996:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800299a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800299e:	2b03      	cmp	r3, #3
 80029a0:	dde0      	ble.n	8002964 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029a8:	e029      	b.n	80029fe <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 80029aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029ca:	443b      	add	r3, r7
 80029cc:	3b78      	subs	r3, #120	@ 0x78
 80029ce:	edd3 6a00 	vldr	s13, [r3]
 80029d2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	ddd1      	ble.n	80029aa <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a06:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00c f9b6 	bl	800ed80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a1a:	e035      	b.n	8002a88 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a22:	e028      	b.n	8002a76 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a2e:	443b      	add	r3, r7
 8002a30:	3b78      	subs	r3, #120	@ 0x78
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a3a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a44:	333c      	adds	r3, #60	@ 0x3c
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a58:	4413      	add	r3, r2
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a64:	443b      	add	r3, r7
 8002a66:	3bb8      	subs	r3, #184	@ 0xb8
 8002a68:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a70:	3301      	adds	r3, #1
 8002a72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	ddd2      	ble.n	8002a24 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	ddc5      	ble.n	8002a1c <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a94:	2240      	movs	r2, #64	@ 0x40
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00c f971 	bl	800ed80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002aa4:	e038      	b.n	8002b18 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002aac:	e02b      	b.n	8002b06 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002aae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ab2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d102      	bne.n	8002ac0 <MotorKalman_Update+0x438>
 8002aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002abe:	e001      	b.n	8002ac4 <MotorKalman_Update+0x43c>
 8002ac0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cdc <MotorKalman_Update+0x654>
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	009a      	lsls	r2, r3, #2
 8002aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ad6:	443b      	add	r3, r7
 8002ad8:	3bb8      	subs	r3, #184	@ 0xb8
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae8:	4413      	add	r3, r2
 8002aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002af4:	443b      	add	r3, r7
 8002af6:	3bf8      	subs	r3, #248	@ 0xf8
 8002af8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002afc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b00:	3301      	adds	r3, #1
 8002b02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	ddcf      	ble.n	8002aae <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b12:	3301      	adds	r3, #1
 8002b14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	ddc2      	ble.n	8002aa6 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002b20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f103 0110 	add.w	r1, r3, #16
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00c f967 	bl	800ee08 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b40:	e06e      	b.n	8002c20 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b48:	e061      	b.n	8002c0e <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b54:	4413      	add	r3, r2
 8002b56:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b5a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b72:	e043      	b.n	8002bfc <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b7e:	4413      	add	r3, r2
 8002b80:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b84:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ba6:	443b      	add	r3, r7
 8002ba8:	3bf8      	subs	r3, #248	@ 0xf8
 8002baa:	edd3 6a00 	vldr	s13, [r3]
 8002bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb8:	4413      	add	r3, r2
 8002bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bbe:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bd8:	4413      	add	r3, r2
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002be2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	3304      	adds	r3, #4
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	ddb7      	ble.n	8002b74 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c04:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	dd99      	ble.n	8002b4a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	dd8c      	ble.n	8002b42 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c46:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ca2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2104      	movs	r1, #4
 8002cac:	f00b fee9 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3310      	adds	r3, #16
 8002cca:	2204      	movs	r2, #4
 8002ccc:	2104      	movs	r1, #4
 8002cce:	f00b fed8 	bl	800ea82 <arm_mat_init_f32>
}
 8002cd2:	bf00      	nop
 8002cd4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cec:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002cf0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fafa 	bl	80022ee <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff fcc2 	bl	8002688 <MotorKalman_Update>

    return filter->velocity;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002d0a:	ee07 3a90 	vmov	s15, r3
}
 8002d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e00c      	b.n	8002d44 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	441a      	add	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	440b      	add	r3, r1
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	dbee      	blt.n	8002d2a <matrix_copy+0x12>
    }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d68:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d6c:	6020      	str	r0, [r4, #0]
 8002d6e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d72:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d76:	6001      	str	r1, [r0, #0]
 8002d78:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d7c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002d80:	ed81 0a00 	vstr	s0, [r1]
 8002d84:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d88:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002d8c:	600a      	str	r2, [r1, #0]
 8002d8e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002d92:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002d96:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002d98:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d9c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002da0:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2204      	movs	r2, #4
 8002da8:	2104      	movs	r1, #4
 8002daa:	f00b fe6a 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002dae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002db2:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002db6:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	f00b fe5f 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002dc4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dc8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002dcc:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	f00b fe54 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002dda:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dde:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002de2:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2201      	movs	r2, #1
 8002dea:	2104      	movs	r1, #4
 8002dec:	f00b fe49 	bl	800ea82 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002df0:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002df4:	2240      	movs	r2, #64	@ 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00b ffc1 	bl	800ed80 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002dfe:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e02:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002e06:	2204      	movs	r2, #4
 8002e08:	2104      	movs	r1, #4
 8002e0a:	f00b fe3a 	bl	800ea82 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e14:	e011      	b.n	8002e3a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002e16:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e26:	443b      	add	r3, r7
 8002e28:	3b6c      	subs	r3, #108	@ 0x6c
 8002e2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e2e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e30:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e34:	3301      	adds	r3, #1
 8002e36:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e3a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	dde9      	ble.n	8002e16 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e42:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e46:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	f00b fe18 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e52:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e56:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e5a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e5e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e62:	ed93 0a00 	vldr	s0, [r3]
 8002e66:	4610      	mov	r0, r2
 8002e68:	f00b fe9d 	bl	800eba6 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e6c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e70:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e74:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e78:	2210      	movs	r2, #16
 8002e7a:	6819      	ldr	r1, [r3, #0]
 8002e7c:	f7ff ff4c 	bl	8002d18 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002e80:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002e84:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002e88:	2204      	movs	r2, #4
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	f00b fdf9 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002e90:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002e94:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002e98:	2204      	movs	r2, #4
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	f00b fdf1 	bl	800ea82 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002ea0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002ea4:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ea8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00b fdad 	bl	800ea0c <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002eb2:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002eb6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002eba:	2210      	movs	r2, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff2b 	bl	8002d18 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002ec2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ec6:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ed0:	e03a      	b.n	8002f48 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002ed2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ede:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002eea:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002eee:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ef2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f00b fddb 	bl	800eab2 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002efc:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f00:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f04:	2210      	movs	r2, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff06 	bl	8002d18 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f10:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f18:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f1c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f20:	4611      	mov	r1, r2
 8002f22:	eeb0 0a47 	vmov.f32	s0, s14
 8002f26:	4618      	mov	r0, r3
 8002f28:	f00b fe3d 	bl	800eba6 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f2c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f30:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f34:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00b fd67 	bl	800ea0c <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f3e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f42:	3301      	adds	r3, #1
 8002f44:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f48:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f4c:	2b0a      	cmp	r3, #10
 8002f4e:	ddc0      	ble.n	8002ed2 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f50:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f54:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f58:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f5c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f60:	ed93 0a00 	vldr	s0, [r3]
 8002f64:	4610      	mov	r0, r2
 8002f66:	f00b fe1e 	bl	800eba6 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f6a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f6e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	6053      	str	r3, [r2, #4]
 8002f7a:	6093      	str	r3, [r2, #8]
 8002f7c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f7e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f82:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002f86:	2201      	movs	r2, #1
 8002f88:	2104      	movs	r1, #4
 8002f8a:	f00b fd7a 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002f8e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002f92:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002f96:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00b fd89 	bl	800eab2 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002fa0:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002fa4:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2104      	movs	r1, #4
 8002fac:	f00b fd69 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002fb0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fb4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fc0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fc8:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fcc:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f00b fde5 	bl	800eba6 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002fdc:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002fe0:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fe4:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f00b fd0f 	bl	800ea0c <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002fee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ff2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	2340      	movs	r3, #64	@ 0x40
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f00b febf 	bl	800ed80 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003002:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003006:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800300a:	2204      	movs	r2, #4
 800300c:	2104      	movs	r1, #4
 800300e:	f00b fd38 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003012:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003016:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800301a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800301e:	4618      	mov	r0, r3
 8003020:	f00b fd47 	bl	800eab2 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003024:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003028:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	6053      	str	r3, [r2, #4]
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003038:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800303c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003040:	2201      	movs	r2, #1
 8003042:	2104      	movs	r1, #4
 8003044:	f00b fd1d 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003048:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800304c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003050:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003054:	4618      	mov	r0, r3
 8003056:	f00b fd2c 	bl	800eab2 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800305a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800305e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800306a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800306e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800307e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003082:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003086:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800308a:	4611      	mov	r1, r2
 800308c:	eeb0 0a47 	vmov.f32	s0, s14
 8003090:	4618      	mov	r0, r3
 8003092:	f00b fd88 	bl	800eba6 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003096:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800309a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800309e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00b fcb2 	bl	800ea0c <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80030a8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030b0:	4618      	mov	r0, r3
 80030b2:	2340      	movs	r3, #64	@ 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	2100      	movs	r1, #0
 80030b8:	f00b fe62 	bl	800ed80 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80030bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030c0:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030c4:	2204      	movs	r2, #4
 80030c6:	2104      	movs	r1, #4
 80030c8:	f00b fcdb 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030cc:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030d0:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030d8:	4618      	mov	r0, r3
 80030da:	f00b fcea 	bl	800eab2 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030de:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030e2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80030e6:	461a      	mov	r2, r3
 80030e8:	2300      	movs	r3, #0
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	6053      	str	r3, [r2, #4]
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80030f2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80030f6:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80030fa:	2201      	movs	r2, #1
 80030fc:	2104      	movs	r1, #4
 80030fe:	f00b fcc0 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003102:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003106:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800310a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800310e:	4618      	mov	r0, r3
 8003110:	f00b fccf 	bl	800eab2 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003114:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003118:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003124:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003128:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003138:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003144:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003148:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800314c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003150:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003154:	4611      	mov	r1, r2
 8003156:	eeb0 0a47 	vmov.f32	s0, s14
 800315a:	4618      	mov	r0, r3
 800315c:	f00b fd23 	bl	800eba6 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003160:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003164:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003168:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800316c:	4618      	mov	r0, r3
 800316e:	f00b fc4d 	bl	800ea0c <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003172:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003176:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800317a:	4618      	mov	r0, r3
 800317c:	2340      	movs	r3, #64	@ 0x40
 800317e:	461a      	mov	r2, r3
 8003180:	2100      	movs	r1, #0
 8003182:	f00b fdfd 	bl	800ed80 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003186:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800318a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800318e:	2204      	movs	r2, #4
 8003190:	2104      	movs	r1, #4
 8003192:	f00b fc76 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003196:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800319a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800319e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031a2:	4618      	mov	r0, r3
 80031a4:	f00b fc85 	bl	800eab2 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80031a8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ac:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80031b0:	461a      	mov	r2, r3
 80031b2:	2300      	movs	r3, #0
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	6053      	str	r3, [r2, #4]
 80031b8:	6093      	str	r3, [r2, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80031bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031c0:	f107 001c 	add.w	r0, r7, #28
 80031c4:	2201      	movs	r2, #1
 80031c6:	2104      	movs	r1, #4
 80031c8:	f00b fc5b 	bl	800ea82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031cc:	f107 021c 	add.w	r2, r7, #28
 80031d0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031d8:	4618      	mov	r0, r3
 80031da:	f00b fc6a 	bl	800eab2 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031de:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031e2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031f2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003202:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003212:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003258 <discretize_system_with_arm+0x4fc>
 8003222:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003226:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4611      	mov	r1, r2
 8003230:	eeb0 0a47 	vmov.f32	s0, s14
 8003234:	4618      	mov	r0, r3
 8003236:	f00b fcb6 	bl	800eba6 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800323a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800323e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003242:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003246:	4618      	mov	r0, r3
 8003248:	f00b fbe0 	bl	800ea0c <arm_mat_add_f32>
}
 800324c:	bf00      	nop
 800324e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	42f00000 	.word	0x42f00000

0800325c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b09e      	sub	sp, #120	@ 0x78
 8003260:	af00      	add	r7, sp, #0
 8003262:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003266:	edc7 0a08 	vstr	s1, [r7, #32]
 800326a:	ed87 1a07 	vstr	s2, [r7, #28]
 800326e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003272:	ed87 2a05 	vstr	s4, [r7, #20]
 8003276:	edc7 2a04 	vstr	s5, [r7, #16]
 800327a:	ed87 3a03 	vstr	s6, [r7, #12]
 800327e:	60b8      	str	r0, [r7, #8]
 8003280:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8003282:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003286:	2240      	movs	r2, #64	@ 0x40
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f00b fd78 	bl	800ed80 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8003290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800329e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80032a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a8:	eef1 6a67 	vneg.f32	s13, s15
 80032ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80032b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80032b8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80032bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80032cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032dc:	eef1 6a67 	vneg.f32	s13, s15
 80032e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80032ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032f0:	eef1 6a67 	vneg.f32	s13, s15
 80032f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80032f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003304:	ed97 7a08 	vldr	s14, [r7, #32]
 8003308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003310:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003314:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003320:	f7ff fd1c 	bl	8002d5c <discretize_system_with_arm>
}
 8003324:	bf00      	nop
 8003326:	3778      	adds	r7, #120	@ 0x78
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <PWM_init+0x40>)
 800333e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f007 fcb0 	bl	800acb8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	4619      	mov	r1, r3
 800335c:	68b8      	ldr	r0, [r7, #8]
 800335e:	f007 fdf7 	bl	800af50 <HAL_TIM_PWM_Start>
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	0a21fe80 	.word	0x0a21fe80

08003370 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	ed87 0a02 	vstr	s0, [r7, #8]
 800337c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003380:	edd7 7a02 	vldr	s15, [r7, #8]
 8003384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	d137      	bne.n	80033fe <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	889b      	ldrh	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <PWM_write_duty+0x32>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80033a0:	e0e1      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	889b      	ldrh	r3, [r3, #4]
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d105      	bne.n	80033b6 <PWM_write_duty+0x46>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80033b4:	e0d7      	b.n	8003566 <PWM_write_duty+0x1f6>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	889b      	ldrh	r3, [r3, #4]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d105      	bne.n	80033ca <PWM_write_duty+0x5a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033c8:	e0cd      	b.n	8003566 <PWM_write_duty+0x1f6>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	889b      	ldrh	r3, [r3, #4]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d105      	bne.n	80033de <PWM_write_duty+0x6e>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	6413      	str	r3, [r2, #64]	@ 0x40
 80033dc:	e0c3      	b.n	8003566 <PWM_write_duty+0x1f6>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	889b      	ldrh	r3, [r3, #4]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d105      	bne.n	80033f2 <PWM_write_duty+0x82>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	6493      	str	r3, [r2, #72]	@ 0x48
 80033f0:	e0b9      	b.n	8003566 <PWM_write_duty+0x1f6>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033fc:	e0b3      	b.n	8003566 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 7a02 	vldr	s14, [r7, #8]
 800340e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003416:	ee17 2a90 	vmov	r2, s15
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003426:	33fe      	adds	r3, #254	@ 0xfe
 8003428:	4a51      	ldr	r2, [pc, #324]	@ (8003570 <PWM_write_duty+0x200>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0bdb      	lsrs	r3, r3, #15
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	899b      	ldrh	r3, [r3, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003458:	ed97 7a02 	vldr	s14, [r7, #8]
 800345c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003460:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	89db      	ldrh	r3, [r3, #14]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f81e 	bl	80004bc <__aeabi_i2d>
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	edd7 7a01 	vldr	s15, [r7, #4]
 8003488:	eef0 7ae7 	vabs.f32	s15, s15
 800348c:	ee17 0a90 	vmov	r0, s15
 8003490:	f7fd f826 	bl	80004e0 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4620      	mov	r0, r4
 800349a:	4629      	mov	r1, r5
 800349c:	f7fd f878 	bl	8000590 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <PWM_write_duty+0x204>)
 80034ae:	f7fd f999 	bl	80007e4 <__aeabi_ddiv>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7fd fb2b 	bl	8000b14 <__aeabi_d2uiz>
 80034be:	4603      	mov	r3, r0
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	899a      	ldrh	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	89da      	ldrh	r2, [r3, #14]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	89da      	ldrh	r2, [r3, #14]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	889b      	ldrh	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <PWM_write_duty+0x190>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	6952      	ldr	r2, [r2, #20]
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034fe:	e032      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	889b      	ldrh	r3, [r3, #4]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d106      	bne.n	8003516 <PWM_write_duty+0x1a6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003514:	e027      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	889b      	ldrh	r3, [r3, #4]
 800351a:	2b08      	cmp	r3, #8
 800351c:	d106      	bne.n	800352c <PWM_write_duty+0x1bc>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800352a:	e01c      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	889b      	ldrh	r3, [r3, #4]
 8003530:	2b0c      	cmp	r3, #12
 8003532:	d106      	bne.n	8003542 <PWM_write_duty+0x1d2>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003540:	e011      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	889b      	ldrh	r3, [r3, #4]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d106      	bne.n	8003558 <PWM_write_duty+0x1e8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003556:	e006      	b.n	8003566 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003564:	e7ff      	b.n	8003566 <PWM_write_duty+0x1f6>
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bdb0      	pop	{r4, r5, r7, pc}
 800356e:	bf00      	nop
 8003570:	80008001 	.word	0x80008001
 8003574:	40590000 	.word	0x40590000

08003578 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	ed87 0a02 	vstr	s0, [r7, #8]
 8003584:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003588:	edd7 7a02 	vldr	s15, [r7, #8]
 800358c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d137      	bne.n	8003606 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	889b      	ldrh	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <PWM_write_range+0x32>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80035a8:	e0e1      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d105      	bne.n	80035be <PWM_write_range+0x46>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80035bc:	e0d7      	b.n	800376e <PWM_write_range+0x1f6>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	889b      	ldrh	r3, [r3, #4]
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d105      	bne.n	80035d2 <PWM_write_range+0x5a>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035d0:	e0cd      	b.n	800376e <PWM_write_range+0x1f6>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	889b      	ldrh	r3, [r3, #4]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d105      	bne.n	80035e6 <PWM_write_range+0x6e>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e4:	e0c3      	b.n	800376e <PWM_write_range+0x1f6>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d105      	bne.n	80035fa <PWM_write_range+0x82>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	6493      	str	r3, [r2, #72]	@ 0x48
 80035f8:	e0b9      	b.n	800376e <PWM_write_range+0x1f6>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003604:	e0b3      	b.n	800376e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 7a02 	vldr	s14, [r7, #8]
 8003616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361e:	ee17 2a90 	vmov	r2, s15
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800362e:	33fe      	adds	r3, #254	@ 0xfe
 8003630:	4a53      	ldr	r2, [pc, #332]	@ (8003780 <PWM_write_range+0x208>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0bdb      	lsrs	r3, r3, #15
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	899b      	ldrh	r3, [r3, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003660:	ed97 7a02 	vldr	s14, [r7, #8]
 8003664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800366c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003674:	ee17 3a90 	vmov	r3, s15
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	89db      	ldrh	r3, [r3, #14]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff1a 	bl	80004bc <__aeabi_i2d>
 8003688:	4604      	mov	r4, r0
 800368a:	460d      	mov	r5, r1
 800368c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003690:	eef0 7ae7 	vabs.f32	s15, s15
 8003694:	ee17 0a90 	vmov	r0, s15
 8003698:	f7fc ff22 	bl	80004e0 <__aeabi_f2d>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fc ff74 	bl	8000590 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	a331      	add	r3, pc, #196	@ (adr r3, 8003778 <PWM_write_range+0x200>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f7fd f895 	bl	80007e4 <__aeabi_ddiv>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fd fa27 	bl	8000b14 <__aeabi_d2uiz>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	899a      	ldrh	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	89da      	ldrh	r2, [r3, #14]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	89da      	ldrh	r2, [r3, #14]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	889b      	ldrh	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <PWM_write_range+0x190>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6952      	ldr	r2, [r2, #20]
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003706:	e032      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	889b      	ldrh	r3, [r3, #4]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d106      	bne.n	800371e <PWM_write_range+0x1a6>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800371c:	e027      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	889b      	ldrh	r3, [r3, #4]
 8003722:	2b08      	cmp	r3, #8
 8003724:	d106      	bne.n	8003734 <PWM_write_range+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003732:	e01c      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	889b      	ldrh	r3, [r3, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d106      	bne.n	800374a <PWM_write_range+0x1d2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003748:	e011      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	889b      	ldrh	r3, [r3, #4]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d106      	bne.n	8003760 <PWM_write_range+0x1e8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800375e:	e006      	b.n	800376e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800376c:	e7ff      	b.n	800376e <PWM_write_range+0x1f6>
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bdb0      	pop	{r4, r5, r7, pc}
 8003776:	bf00      	nop
 8003778:	00000000 	.word	0x00000000
 800377c:	40efffe0 	.word	0x40efffe0
 8003780:	80008001 	.word	0x80008001

08003784 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6178      	str	r0, [r7, #20]
 800378c:	6139      	str	r1, [r7, #16]
 800378e:	60fa      	str	r2, [r7, #12]
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	ed87 0a01 	vstr	s0, [r7, #4]
 8003796:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80037e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	fb01 f202 	mul.w	r2, r1, r2
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003852:	213c      	movs	r1, #60	@ 0x3c
 8003854:	6938      	ldr	r0, [r7, #16]
 8003856:	f007 fe37 	bl	800b4c8 <HAL_TIM_Encoder_Start>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	0000      	movs	r0, r0
 8003864:	0000      	movs	r0, r0
	...

08003868 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	0fda      	lsrs	r2, r3, #31
 8003890:	4413      	add	r3, r2
 8003892:	105b      	asrs	r3, r3, #1
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4293      	cmp	r3, r2
 800389a:	dd05      	ble.n	80038a8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e00e      	b.n	80038c6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	0fda      	lsrs	r2, r3, #31
 80038ae:	4413      	add	r3, r2
 80038b0:	105b      	asrs	r3, r3, #1
 80038b2:	425b      	negs	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	da04      	bge.n	80038c6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fde3 	bl	80004e0 <__aeabi_f2d>
 800391a:	4604      	mov	r4, r0
 800391c:	460d      	mov	r5, r1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800393e:	ee17 0a90 	vmov	r0, s15
 8003942:	f7fc fdcd 	bl	80004e0 <__aeabi_f2d>
 8003946:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a38 <QEI_get_diff_count+0x1d0>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fe20 	bl	8000590 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4690      	mov	r8, r2
 8003956:	4699      	mov	r9, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fdbf 	bl	80004e0 <__aeabi_f2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4640      	mov	r0, r8
 8003968:	4649      	mov	r1, r9
 800396a:	f7fc fe11 	bl	8000590 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fc55 	bl	8000224 <__adddf3>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd f8e7 	bl	8000b54 <__aeabi_d2f>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fda5 	bl	80004e0 <__aeabi_f2d>
 8003996:	4604      	mov	r4, r0
 8003998:	460d      	mov	r5, r1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039b6:	ee16 0a90 	vmov	r0, s13
 80039ba:	f7fc fd91 	bl	80004e0 <__aeabi_f2d>
 80039be:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a38 <QEI_get_diff_count+0x1d0>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fde4 	bl	8000590 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4690      	mov	r8, r2
 80039ce:	4699      	mov	r9, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fd83 	bl	80004e0 <__aeabi_f2d>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4640      	mov	r0, r8
 80039e0:	4649      	mov	r1, r9
 80039e2:	f7fc fdd5 	bl	8000590 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4690      	mov	r8, r2
 80039ec:	4699      	mov	r9, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd74 	bl	80004e0 <__aeabi_f2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4640      	mov	r0, r8
 80039fe:	4649      	mov	r1, r9
 8003a00:	f7fc fdc6 	bl	8000590 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fc0a 	bl	8000224 <__adddf3>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f89c 	bl	8000b54 <__aeabi_d2f>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	605a      	str	r2, [r3, #4]
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	54442d18 	.word	0x54442d18
 8003a3c:	400921fb 	.word	0x400921fb

08003a40 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fd3a 	bl	80004e0 <__aeabi_f2d>
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	4b83      	ldr	r3, [pc, #524]	@ (8003c80 <QEI_compute_data+0x240>)
 8003a72:	f7fc fd8d 	bl	8000590 <__aeabi_dmul>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4614      	mov	r4, r2
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8a:	ee17 0a90 	vmov	r0, s15
 8003a8e:	f7fc fd27 	bl	80004e0 <__aeabi_f2d>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc fea3 	bl	80007e4 <__aeabi_ddiv>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd18 	bl	80004e0 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd6a 	bl	8000590 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fd f846 	bl	8000b54 <__aeabi_d2f>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ad4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ad8:	ee17 0a90 	vmov	r0, s15
 8003adc:	f7fc fd00 	bl	80004e0 <__aeabi_f2d>
 8003ae0:	a365      	add	r3, pc, #404	@ (adr r3, 8003c78 <QEI_compute_data+0x238>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f7fc fd53 	bl	8000590 <__aeabi_dmul>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4614      	mov	r4, r2
 8003af0:	461d      	mov	r5, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afe:	ee17 0a90 	vmov	r0, s15
 8003b02:	f7fc fced 	bl	80004e0 <__aeabi_f2d>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fe69 	bl	80007e4 <__aeabi_ddiv>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4614      	mov	r4, r2
 8003b18:	461d      	mov	r5, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fcde 	bl	80004e0 <__aeabi_f2d>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7fc fd30 	bl	8000590 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7fd f80c 	bl	8000b54 <__aeabi_d2f>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fcca 	bl	80004e0 <__aeabi_f2d>
 8003b4c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c78 <QEI_compute_data+0x238>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f7fc fd1d 	bl	8000590 <__aeabi_dmul>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4614      	mov	r4, r2
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcbc 	bl	80004e0 <__aeabi_f2d>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fd0e 	bl	8000590 <__aeabi_dmul>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b88:	ee17 0a90 	vmov	r0, s15
 8003b8c:	f7fc fca8 	bl	80004e0 <__aeabi_f2d>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc fe24 	bl	80007e4 <__aeabi_ddiv>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fc99 	bl	80004e0 <__aeabi_f2d>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f7fc fceb 	bl	8000590 <__aeabi_dmul>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fc ffc7 	bl	8000b54 <__aeabi_d2f>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	ed93 7a02 	vldr	s14, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d00a      	beq.n	8003c14 <QEI_compute_data+0x1d4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	e001      	b.n	8003c18 <QEI_compute_data+0x1d8>
 8003c14:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003c84 <QEI_compute_data+0x244>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c2e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3e:	d00a      	beq.n	8003c56 <QEI_compute_data+0x216>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c54:	e001      	b.n	8003c5a <QEI_compute_data+0x21a>
 8003c56:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003c84 <QEI_compute_data+0x244>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	615a      	str	r2, [r3, #20]
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdb0      	pop	{r4, r5, r7, pc}
 8003c78:	54442d18 	.word	0x54442d18
 8003c7c:	400921fb 	.word	0x400921fb
 8003c80:	404e0000 	.word	0x404e0000
 8003c84:	00000000 	.word	0x00000000

08003c88 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    // Reset hardware counter
    __HAL_TIM_SET_COUNTER(qei->htimx, 0);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset counter history
    qei->c[NOW] = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pps = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->rpm = 0;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->pulses = 0;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->mmps = 0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->radpss = 0;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	651a      	str	r2, [r3, #80]	@ 0x50

    // Reset velocity history
    qei->r[NOW] = 0;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08e      	sub	sp, #56	@ 0x38
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6178      	str	r0, [r7, #20]
 8003d2e:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d32:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d36:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d3a:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d70:	eef0 7ae7 	vabs.f32	s15, s15
 8003d74:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d78:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d503      	bpl.n	8003d96 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	22ff      	movs	r2, #255	@ 0xff
 8003d92:	741a      	strb	r2, [r3, #16]
 8003d94:	e002      	b.n	8003d9c <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	d006      	beq.n	8003db8 <Trapezoidal_Generator+0x92>
 8003daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	d104      	bne.n	8003dc2 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	60da      	str	r2, [r3, #12]
        return;
 8003dc0:	e06f      	b.n	8003ea2 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003dc2:	edd7 6a02 	vldr	s13, [r7, #8]
 8003dc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dce:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dde:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003df6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003dfa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003e06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e0a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	db27      	blt.n	8003e68 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003e18:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e24:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e34:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3c:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003e3e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003e50:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e58:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e66:	e018      	b.n	8003e9a <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003e68:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e74:	eeb0 0a66 	vmov.f32	s0, s13
 8003e78:	f00b f89e 	bl	800efb8 <sqrtf>
 8003e7c:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	60da      	str	r2, [r3, #12]
}
 8003ea2:	3738      	adds	r7, #56	@ 0x38
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	b08d      	sub	sp, #52	@ 0x34
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6178      	str	r0, [r7, #20]
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003eb6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003eba:	ed87 1a01 	vstr	s2, [r7, #4]
 8003ebe:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800414c <Trapezoidal_Evaluated+0x2a4>
 8003ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eea:	f200 811b 	bhi.w	8004124 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	7c1b      	ldrb	r3, [r3, #16]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f02:	ed97 7a00 	vldr	s14, [r7]
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	ed93 7a00 	vldr	s14, [r3]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d109      	bne.n	8003f38 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003f36:	e00c      	b.n	8003f52 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	7c1b      	ldrb	r3, [r3, #16]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f46:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f66:	d824      	bhi.n	8003fb2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003f68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fae:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003fb0:	e0c6      	b.n	8004140 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc6:	d830      	bhi.n	800402a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fc8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004004:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800401e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	e08a      	b.n	8004140 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	edd3 7a02 	vldr	s15, [r3, #8]
 8004036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d900      	bls.n	8004042 <Trapezoidal_Evaluated+0x19a>
}
 8004040:	e07e      	b.n	8004140 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004042:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004046:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800404a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	ed97 7a03 	vldr	s14, [r7, #12]
 8004066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800406a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	ed93 7a01 	vldr	s14, [r3, #4]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	dd11      	ble.n	80040ac <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ed93 7a01 	vldr	s14, [r3, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	edd3 7a00 	vldr	s15, [r3]
 8004094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004098:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80040a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040bc:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80040c0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040d8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80040dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80040ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80040fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80040fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800410a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004114:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004118:	eef1 7a67 	vneg.f32	s15, s15
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004122:	e00d      	b.n	8004140 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2201      	movs	r2, #1
 8004128:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3734      	adds	r7, #52	@ 0x34
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	3a83126f 	.word	0x3a83126f

08004150 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	ed87 0a01 	vstr	s0, [r7, #4]
 800415a:	4603      	mov	r3, r0
 800415c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	2b1a      	cmp	r3, #26
 8004162:	d018      	beq.n	8004196 <temperature_to_base+0x46>
 8004164:	2b1a      	cmp	r3, #26
 8004166:	dc1d      	bgt.n	80041a4 <temperature_to_base+0x54>
 8004168:	2b18      	cmp	r3, #24
 800416a:	d002      	beq.n	8004172 <temperature_to_base+0x22>
 800416c:	2b19      	cmp	r3, #25
 800416e:	d003      	beq.n	8004178 <temperature_to_base+0x28>
 8004170:	e018      	b.n	80041a4 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004172:	edd7 7a01 	vldr	s15, [r7, #4]
 8004176:	e017      	b.n	80041a8 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004178:	edd7 7a01 	vldr	s15, [r7, #4]
 800417c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80041b8 <temperature_to_base+0x68>
 8004180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004184:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800418c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004194:	e008      	b.n	80041a8 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004196:	edd7 7a01 	vldr	s15, [r7, #4]
 800419a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041bc <temperature_to_base+0x6c>
 800419e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041a2:	e001      	b.n	80041a8 <temperature_to_base+0x58>
        default:
            return value;
 80041a4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80041a8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	42000000 	.word	0x42000000
 80041bc:	43889333 	.word	0x43889333

080041c0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ca:	4603      	mov	r3, r0
 80041cc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	2b1a      	cmp	r3, #26
 80041d2:	d018      	beq.n	8004206 <temperature_from_base+0x46>
 80041d4:	2b1a      	cmp	r3, #26
 80041d6:	dc1d      	bgt.n	8004214 <temperature_from_base+0x54>
 80041d8:	2b18      	cmp	r3, #24
 80041da:	d002      	beq.n	80041e2 <temperature_from_base+0x22>
 80041dc:	2b19      	cmp	r3, #25
 80041de:	d003      	beq.n	80041e8 <temperature_from_base+0x28>
 80041e0:	e018      	b.n	8004214 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80041e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041e6:	e017      	b.n	8004218 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80041e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ec:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80041f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041f4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80041f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004228 <temperature_from_base+0x68>
 8004200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004204:	e008      	b.n	8004218 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8004206:	edd7 7a01 	vldr	s15, [r7, #4]
 800420a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800422c <temperature_from_base+0x6c>
 800420e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004212:	e001      	b.n	8004218 <temperature_from_base+0x58>
        default:
            return value;
 8004214:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004218:	eeb0 0a67 	vmov.f32	s0, s15
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	42000000 	.word	0x42000000
 800422c:	43889333 	.word	0x43889333

08004230 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e00a      	b.n	8004260 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b1a      	cmp	r3, #26
 8004264:	ddf1      	ble.n	800424a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <init_length_converter+0x80>)
 800426a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a11      	ldr	r2, [pc, #68]	@ (80042b4 <init_length_converter+0x84>)
 8004270:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004278:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a0e      	ldr	r2, [pc, #56]	@ (80042b8 <init_length_converter+0x88>)
 800427e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0e      	ldr	r2, [pc, #56]	@ (80042bc <init_length_converter+0x8c>)
 8004284:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <init_length_converter+0x90>)
 800428a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0d      	ldr	r2, [pc, #52]	@ (80042c4 <init_length_converter+0x94>)
 8004290:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <init_length_converter+0x98>)
 8004296:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	3a83126f 	.word	0x3a83126f
 80042b4:	3c23d70a 	.word	0x3c23d70a
 80042b8:	447a0000 	.word	0x447a0000
 80042bc:	3cd013a9 	.word	0x3cd013a9
 80042c0:	3e9c0ebf 	.word	0x3e9c0ebf
 80042c4:	3f6a161e 	.word	0x3f6a161e
 80042c8:	44c92b02 	.word	0x44c92b02

080042cc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	220a      	movs	r2, #10
 80042de:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e00a      	b.n	80042fc <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b1a      	cmp	r3, #26
 8004300:	ddf1      	ble.n	80042e6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a0e      	ldr	r2, [pc, #56]	@ (8004340 <init_mass_converter+0x74>)
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <init_mass_converter+0x78>)
 800430c:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a0b      	ldr	r2, [pc, #44]	@ (8004348 <init_mass_converter+0x7c>)
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a0b      	ldr	r2, [pc, #44]	@ (800434c <init_mass_converter+0x80>)
 8004320:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <init_mass_converter+0x84>)
 8004326:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	358637bd 	.word	0x358637bd
 8004344:	3a83126f 	.word	0x3a83126f
 8004348:	447a0000 	.word	0x447a0000
 800434c:	3ce83d36 	.word	0x3ce83d36
 8004350:	3ee83d36 	.word	0x3ee83d36

08004354 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	220f      	movs	r2, #15
 8004366:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e00a      	b.n	8004384 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b1a      	cmp	r3, #26
 8004388:	ddf1      	ble.n	800436e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <init_angle_converter+0x64>)
 800438e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <init_angle_converter+0x68>)
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	3c8efa35 	.word	0x3c8efa35
 80043bc:	3c80adfd 	.word	0x3c80adfd

080043c0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2203      	movs	r2, #3
 80043cc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2214      	movs	r2, #20
 80043d2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e00a      	b.n	80043f0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	3304      	adds	r3, #4
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3301      	adds	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b1a      	cmp	r3, #26
 80043f4:	ddf1      	ble.n	80043da <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a10      	ldr	r2, [pc, #64]	@ (800443c <init_time_converter+0x7c>)
 80043fa:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a10      	ldr	r2, [pc, #64]	@ (8004440 <init_time_converter+0x80>)
 8004400:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <init_time_converter+0x84>)
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800440e:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <init_time_converter+0x88>)
 8004414:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <init_time_converter+0x8c>)
 800441a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <init_time_converter+0x90>)
 8004420:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	3089705f 	.word	0x3089705f
 8004440:	358637bd 	.word	0x358637bd
 8004444:	3a83126f 	.word	0x3a83126f
 8004448:	42700000 	.word	0x42700000
 800444c:	45610000 	.word	0x45610000
 8004450:	47a8c000 	.word	0x47a8c000

08004454 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2204      	movs	r2, #4
 8004460:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2218      	movs	r2, #24
 8004466:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e00a      	b.n	8004484 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3301      	adds	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b1a      	cmp	r3, #26
 8004488:	ddf1      	ble.n	800446e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a05      	ldr	r2, [pc, #20]	@ (80044a4 <init_temperature_converter+0x50>)
 800448e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <init_temperature_converter+0x54>)
 8004494:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	08004151 	.word	0x08004151
 80044a8:	080041c1 	.word	0x080041c1

080044ac <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff feba 	bl	8004230 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3378      	adds	r3, #120	@ 0x78
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff03 	bl	80042cc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	33f0      	adds	r3, #240	@ 0xf0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff42 	bl	8004354 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff72 	bl	80043c0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ffb6 	bl	8004454 <init_temperature_converter>
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b1a      	cmp	r3, #26
 80044fe:	d803      	bhi.n	8004508 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	4a05      	ldr	r2, [pc, #20]	@ (8004518 <UnitConverter_get_unit_type+0x28>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	e000      	b.n	800450a <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200000d4 	.word	0x200000d4

0800451c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	ed87 0a02 	vstr	s0, [r7, #8]
 8004528:	460b      	mov	r3, r1
 800452a:	71fb      	strb	r3, [r7, #7]
 800452c:	4613      	mov	r3, r2
 800452e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ffdc 	bl	80044f0 <UnitConverter_get_unit_type>
 8004538:	4603      	mov	r3, r0
 800453a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 800453c:	79bb      	ldrb	r3, [r7, #6]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffd6 	bl	80044f0 <UnitConverter_get_unit_type>
 8004544:	4603      	mov	r3, r0
 8004546:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004548:	7efa      	ldrb	r2, [r7, #27]
 800454a:	7ebb      	ldrb	r3, [r7, #26]
 800454c:	429a      	cmp	r2, r3
 800454e:	d002      	beq.n	8004556 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004550:	edd7 7a02 	vldr	s15, [r7, #8]
 8004554:	e03b      	b.n	80045ce <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004556:	7efa      	ldrb	r2, [r7, #27]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	79fa      	ldrb	r2, [r7, #7]
 8004574:	4610      	mov	r0, r2
 8004576:	ed97 0a02 	vldr	s0, [r7, #8]
 800457a:	4798      	blx	r3
 800457c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004580:	e00c      	b.n	800459c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ed97 7a02 	vldr	s14, [r7, #8]
 8004594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004598:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	79ba      	ldrb	r2, [r7, #6]
 80045aa:	4610      	mov	r0, r2
 80045ac:	ed97 0a07 	vldr	s0, [r7, #28]
 80045b0:	4798      	blx	r3
 80045b2:	eef0 7a40 	vmov.f32	s15, s0
 80045b6:	e00a      	b.n	80045ce <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80045b8:	79bb      	ldrb	r3, [r7, #6]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	3304      	adds	r3, #4
 80045c2:	ed93 7a00 	vldr	s14, [r3]
 80045c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80045ce:	eeb0 0a67 	vmov.f32	s0, s15
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80045e4:	460b      	mov	r3, r1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff7e 	bl	80044f0 <UnitConverter_get_unit_type>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d111      	bne.n	800461e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 80045fa:	79bb      	ldrb	r3, [r7, #6]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff77 	bl	80044f0 <UnitConverter_get_unit_type>
 8004602:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004604:	2b02      	cmp	r3, #2
 8004606:	d10a      	bne.n	800461e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004608:	79ba      	ldrb	r2, [r7, #6]
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4619      	mov	r1, r3
 800460e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ff82 	bl	800451c <UnitConverter_convert>
 8004618:	eef0 7a40 	vmov.f32	s15, s0
 800461c:	e001      	b.n	8004622 <UnitConverter_angle+0x4a>
    }
    return value;
 800461e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004622:	eeb0 0a67 	vmov.f32	s0, s15
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	@ 0x30
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2220      	movs	r2, #32
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f00a fb9b 	bl	800ed80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800464a:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <MX_ADC1_Init+0x104>)
 800464c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004652:	4b37      	ldr	r3, [pc, #220]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004654:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800465a:	4b35      	ldr	r3, [pc, #212]	@ (8004730 <MX_ADC1_Init+0x104>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004660:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004666:	4b32      	ldr	r3, [pc, #200]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800466c:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <MX_ADC1_Init+0x104>)
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004672:	4b2f      	ldr	r3, [pc, #188]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004674:	2204      	movs	r2, #4
 8004676:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004678:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <MX_ADC1_Init+0x104>)
 800467a:	2200      	movs	r2, #0
 800467c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800467e:	4b2c      	ldr	r3, [pc, #176]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004680:	2201      	movs	r2, #1
 8004682:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004684:	4b2a      	ldr	r3, [pc, #168]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004686:	2202      	movs	r2, #2
 8004688:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800468a:	4b29      	ldr	r3, [pc, #164]	@ (8004730 <MX_ADC1_Init+0x104>)
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004694:	2200      	movs	r2, #0
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <MX_ADC1_Init+0x104>)
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80046a6:	4b22      	ldr	r3, [pc, #136]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046b4:	481e      	ldr	r0, [pc, #120]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046b6:	f003 fa2b 	bl	8007b10 <HAL_ADC_Init>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80046c0:	f001 fa96 	bl	8005bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80046c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046cc:	4619      	mov	r1, r3
 80046ce:	4818      	ldr	r0, [pc, #96]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046d0:	f004 fb4a 	bl	8008d68 <HAL_ADCEx_MultiModeConfigChannel>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80046da:	f001 fa89 	bl	8005bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80046de:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <MX_ADC1_Init+0x108>)
 80046e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80046e2:	2306      	movs	r3, #6
 80046e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80046e6:	2307      	movs	r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046ea:	237f      	movs	r3, #127	@ 0x7f
 80046ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80046ee:	2304      	movs	r3, #4
 80046f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	480d      	ldr	r0, [pc, #52]	@ (8004730 <MX_ADC1_Init+0x104>)
 80046fc:	f003 fcb6 	bl	800806c <HAL_ADC_ConfigChannel>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004706:	f001 fa73 	bl	8005bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <MX_ADC1_Init+0x10c>)
 800470c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800470e:	230c      	movs	r3, #12
 8004710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4806      	ldr	r0, [pc, #24]	@ (8004730 <MX_ADC1_Init+0x104>)
 8004718:	f003 fca8 	bl	800806c <HAL_ADC_ConfigChannel>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004722:	f001 fa65 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004726:	bf00      	nop
 8004728:	3730      	adds	r7, #48	@ 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000178 	.word	0x20000178
 8004734:	19200040 	.word	0x19200040
 8004738:	1d500080 	.word	0x1d500080

0800473c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b09e      	sub	sp, #120	@ 0x78
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	2254      	movs	r2, #84	@ 0x54
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f00a fb0f 	bl	800ed80 <memset>
  if(adcHandle->Instance==ADC1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476a:	d15e      	bne.n	800482a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800476c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004770:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004772:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004776:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f005 ffe9 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004788:	f001 fa32 	bl	8005bf0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800478c:	4b29      	ldr	r3, [pc, #164]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	4a28      	ldr	r2, [pc, #160]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 8004792:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004798:	4b26      	ldr	r3, [pc, #152]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 800479a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 80047a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a8:	4a22      	ldr	r2, [pc, #136]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <HAL_ADC_MspInit+0xf8>)
 80047b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047bc:	2303      	movs	r3, #3
 80047be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047c0:	2303      	movs	r3, #3
 80047c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047cc:	4619      	mov	r1, r3
 80047ce:	481a      	ldr	r0, [pc, #104]	@ (8004838 <HAL_ADC_MspInit+0xfc>)
 80047d0:	f005 f814 	bl	80097fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047d4:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <HAL_ADC_MspInit+0x104>)
 80047d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80047da:	4b18      	ldr	r3, [pc, #96]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047dc:	2205      	movs	r2, #5
 80047de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047e0:	4b16      	ldr	r3, [pc, #88]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e6:	4b15      	ldr	r3, [pc, #84]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047ec:	4b13      	ldr	r3, [pc, #76]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047ee:	2280      	movs	r2, #128	@ 0x80
 80047f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047f2:	4b12      	ldr	r3, [pc, #72]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047fa:	4b10      	ldr	r3, [pc, #64]	@ (800483c <HAL_ADC_MspInit+0x100>)
 80047fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004800:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_ADC_MspInit+0x100>)
 8004804:	2220      	movs	r2, #32
 8004806:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_ADC_MspInit+0x100>)
 800480a:	2200      	movs	r2, #0
 800480c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800480e:	480b      	ldr	r0, [pc, #44]	@ (800483c <HAL_ADC_MspInit+0x100>)
 8004810:	f004 fcc2 	bl	8009198 <HAL_DMA_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800481a:	f001 f9e9 	bl	8005bf0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a06      	ldr	r2, [pc, #24]	@ (800483c <HAL_ADC_MspInit+0x100>)
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
 8004824:	4a05      	ldr	r2, [pc, #20]	@ (800483c <HAL_ADC_MspInit+0x100>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800482a:	bf00      	nop
 800482c:	3778      	adds	r7, #120	@ 0x78
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	48000800 	.word	0x48000800
 800483c:	200001e4 	.word	0x200001e4
 8004840:	40020008 	.word	0x40020008

08004844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800484a:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <MX_DMA_Init+0x90>)
 800484c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484e:	4a21      	ldr	r2, [pc, #132]	@ (80048d4 <MX_DMA_Init+0x90>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6493      	str	r3, [r2, #72]	@ 0x48
 8004856:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <MX_DMA_Init+0x90>)
 8004858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004862:	4b1c      	ldr	r3, [pc, #112]	@ (80048d4 <MX_DMA_Init+0x90>)
 8004864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004866:	4a1b      	ldr	r2, [pc, #108]	@ (80048d4 <MX_DMA_Init+0x90>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6493      	str	r3, [r2, #72]	@ 0x48
 800486e:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <MX_DMA_Init+0x90>)
 8004870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	200b      	movs	r0, #11
 8004880:	f004 fc55 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004884:	200b      	movs	r0, #11
 8004886:	f004 fc6c 	bl	8009162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	200c      	movs	r0, #12
 8004890:	f004 fc4d 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004894:	200c      	movs	r0, #12
 8004896:	f004 fc64 	bl	8009162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	200d      	movs	r0, #13
 80048a0:	f004 fc45 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80048a4:	200d      	movs	r0, #13
 80048a6:	f004 fc5c 	bl	8009162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2100      	movs	r1, #0
 80048ae:	200e      	movs	r0, #14
 80048b0:	f004 fc3d 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80048b4:	200e      	movs	r0, #14
 80048b6:	f004 fc54 	bl	8009162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	200f      	movs	r0, #15
 80048c0:	f004 fc35 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80048c4:	200f      	movs	r0, #15
 80048c6:	f004 fc4c 	bl	8009162 <HAL_NVIC_EnableIRQ>

}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000

080048d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	@ 0x28
 80048dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048de:	f107 0314 	add.w	r3, r7, #20
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ee:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 80048f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f2:	4a54      	ldr	r2, [pc, #336]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048fa:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004906:	4b4f      	ldr	r3, [pc, #316]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 800490c:	f043 0320 	orr.w	r3, r3, #32
 8004910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004912:	4b4c      	ldr	r3, [pc, #304]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	4b49      	ldr	r3, [pc, #292]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004922:	4a48      	ldr	r2, [pc, #288]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800492a:	4b46      	ldr	r3, [pc, #280]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493a:	4a42      	ldr	r2, [pc, #264]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004942:	4b40      	ldr	r3, [pc, #256]	@ (8004a44 <MX_GPIO_Init+0x16c>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800494e:	2200      	movs	r2, #0
 8004950:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004958:	f005 f8ea 	bl	8009b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800495c:	2200      	movs	r2, #0
 800495e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004962:	4839      	ldr	r0, [pc, #228]	@ (8004a48 <MX_GPIO_Init+0x170>)
 8004964:	f005 f8e4 	bl	8009b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800496c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800496e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004978:	f107 0314 	add.w	r3, r7, #20
 800497c:	4619      	mov	r1, r3
 800497e:	4832      	ldr	r0, [pc, #200]	@ (8004a48 <MX_GPIO_Init+0x170>)
 8004980:	f004 ff3c 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004984:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004996:	f107 0314 	add.w	r3, r7, #20
 800499a:	4619      	mov	r1, r3
 800499c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049a0:	f004 ff2c 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80049a4:	2306      	movs	r3, #6
 80049a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049ac:	2302      	movs	r3, #2
 80049ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	4619      	mov	r1, r3
 80049b6:	4825      	ldr	r0, [pc, #148]	@ (8004a4c <MX_GPIO_Init+0x174>)
 80049b8:	f004 ff20 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_PHOTO_Pin EMER_Pin PROX_Pin J1_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin|J1_Pin;
 80049bc:	f241 03b0 	movw	r3, #4272	@ 0x10b0
 80049c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	4619      	mov	r1, r3
 80049d0:	481e      	ldr	r0, [pc, #120]	@ (8004a4c <MX_GPIO_Init+0x174>)
 80049d2:	f004 ff13 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049dc:	2301      	movs	r3, #1
 80049de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	4816      	ldr	r0, [pc, #88]	@ (8004a48 <MX_GPIO_Init+0x170>)
 80049f0:	f004 ff04 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pin : UPPER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin;
 80049f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UPPER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4619      	mov	r1, r3
 8004a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a0c:	f004 fef6 	bl	80097fc <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004a10:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	4808      	ldr	r0, [pc, #32]	@ (8004a48 <MX_GPIO_Init+0x170>)
 8004a26:	f004 fee9 	bl	80097fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2028      	movs	r0, #40	@ 0x28
 8004a30:	f004 fb7d 	bl	800912e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a34:	2028      	movs	r0, #40	@ 0x28
 8004a36:	f004 fb94 	bl	8009162 <HAL_NVIC_EnableIRQ>

}
 8004a3a:	bf00      	nop
 8004a3c:	3728      	adds	r7, #40	@ 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	48000800 	.word	0x48000800
 8004a4c:	48000400 	.word	0x48000400

08004a50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a54:	f3bf 8f4f 	dsb	sy
}
 8004a58:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <__NVIC_SystemReset+0x24>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a62:	4904      	ldr	r1, [pc, #16]	@ (8004a74 <__NVIC_SystemReset+0x24>)
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <__NVIC_SystemReset+0x28>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a6a:	f3bf 8f4f 	dsb	sy
}
 8004a6e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <__NVIC_SystemReset+0x20>
 8004a74:	e000ed00 	.word	0xe000ed00
 8004a78:	05fa0004 	.word	0x05fa0004

08004a7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004a80:	f002 fd91 	bl	80075a6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004a84:	f000 f874 	bl	8004b70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004a88:	f7ff ff26 	bl	80048d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8004a8c:	f7ff feda 	bl	8004844 <MX_DMA_Init>
	MX_ADC1_Init();
 8004a90:	f7ff fdcc 	bl	800462c <MX_ADC1_Init>
	MX_TIM2_Init();
 8004a94:	f001 ff9c 	bl	80069d0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004a98:	f001 ffe8 	bl	8006a6c <MX_TIM3_Init>
	MX_TIM4_Init();
 8004a9c:	f002 f83c 	bl	8006b18 <MX_TIM4_Init>
	MX_TIM5_Init();
 8004aa0:	f002 f890 	bl	8006bc4 <MX_TIM5_Init>
	MX_TIM8_Init();
 8004aa4:	f002 f8e4 	bl	8006c70 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004aa8:	f002 fba6 	bl	80071f8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004aac:	f002 f99e 	bl	8006dec <MX_TIM16_Init>
	MX_TIM1_Init();
 8004ab0:	f001 fefa 	bl	80068a8 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8004ab4:	f002 fb56 	bl	8007164 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004ab8:	f001 f8a2 	bl	8005c00 <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (b1 && !button_pressed_previous && !revtrajectoryActive
 8004abc:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <main+0xd0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d032      	beq.n	8004b2a <main+0xae>
 8004ac4:	4b22      	ldr	r3, [pc, #136]	@ (8004b50 <main+0xd4>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d12e      	bne.n	8004b2a <main+0xae>
 8004acc:	4b21      	ldr	r3, [pc, #132]	@ (8004b54 <main+0xd8>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d027      	beq.n	8004b2a <main+0xae>
				&& !pristrajectoryActive) {
 8004ada:	4b1f      	ldr	r3, [pc, #124]	@ (8004b58 <main+0xdc>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	f083 0301 	eor.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <main+0xae>
			start_combined_trajectory(
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b5c <main+0xe0>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004aec:	4a1c      	ldr	r2, [pc, #112]	@ (8004b60 <main+0xe4>)
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8004af6:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <main+0xe0>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004afa:	4a1a      	ldr	r2, [pc, #104]	@ (8004b64 <main+0xe8>)
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8004b04:	eef0 0a47 	vmov.f32	s1, s14
 8004b08:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0c:	f000 f87c 	bl	8004c08 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8004b10:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <main+0xe0>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	425a      	negs	r2, r3
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	f002 0203 	and.w	r2, r2, #3
 8004b20:	bf58      	it	pl
 8004b22:	4253      	negpl	r3, r2
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <main+0xe0>)
 8004b28:	701a      	strb	r2, [r3, #0]
		}

		button_pressed_previous = b1;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <main+0xd0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <main+0xd4>)
 8004b32:	701a      	strb	r2, [r3, #0]
		if (b2) {
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <main+0xec>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <main+0xc4>
			start_homing();
 8004b3c:	f000 fa0a 	bl	8004f54 <start_homing>

//		if (b3) {
//			home = 99;
//		}

		if (b4) {
 8004b40:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <main+0xf0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0b9      	beq.n	8004abc <main+0x40>
			NVIC_SystemReset();
 8004b48:	f7ff ff82 	bl	8004a50 <__NVIC_SystemReset>
 8004b4c:	20001840 	.word	0x20001840
 8004b50:	20000315 	.word	0x20000315
 8004b54:	200002c0 	.word	0x200002c0
 8004b58:	2000026c 	.word	0x2000026c
 8004b5c:	20000314 	.word	0x20000314
 8004b60:	08010c50 	.word	0x08010c50
 8004b64:	08010c68 	.word	0x08010c68
 8004b68:	20001844 	.word	0x20001844
 8004b6c:	2000184c 	.word	0x2000184c

08004b70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b094      	sub	sp, #80	@ 0x50
 8004b74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b76:	f107 0318 	add.w	r3, r7, #24
 8004b7a:	2238      	movs	r2, #56	@ 0x38
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00a f8fe 	bl	800ed80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f004 fffc 	bl	8009b90 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ba2:	2340      	movs	r3, #64	@ 0x40
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004baa:	2302      	movs	r3, #2
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004bb2:	2355      	movs	r3, #85	@ 0x55
 8004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004bc2:	f107 0318 	add.w	r3, r7, #24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f005 f896 	bl	8009cf8 <HAL_RCC_OscConfig>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <SystemClock_Config+0x66>
		Error_Handler();
 8004bd2:	f001 f80d 	bl	8005bf0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004bd6:	230f      	movs	r3, #15
 8004bd8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	2104      	movs	r1, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f005 fb94 	bl	800a31c <HAL_RCC_ClockConfig>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <SystemClock_Config+0x8e>
		Error_Handler();
 8004bfa:	f000 fff9 	bl	8005bf0 <Error_Handler>
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3750      	adds	r7, #80	@ 0x50
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <start_combined_trajectory>:

/* USER CODE BEGIN 4 */
void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	ed2d 8b02 	vpush	{d8}
 8004c0e:	b08d      	sub	sp, #52	@ 0x34
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c16:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8004c1a:	4bba      	ldr	r3, [pc, #744]	@ (8004f04 <start_combined_trajectory+0x2fc>)
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
	float rev_current = revolute_encoder.rads;
 8004c20:	4bb9      	ldr	r3, [pc, #740]	@ (8004f08 <start_combined_trajectory+0x300>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	623b      	str	r3, [r7, #32]

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8004c26:	4bb9      	ldr	r3, [pc, #740]	@ (8004f0c <start_combined_trajectory+0x304>)
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8004c2e:	4bb7      	ldr	r3, [pc, #732]	@ (8004f0c <start_combined_trajectory+0x304>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004c34:	4bb6      	ldr	r3, [pc, #728]	@ (8004f10 <start_combined_trajectory+0x308>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004c3c:	4bb4      	ldr	r3, [pc, #720]	@ (8004f10 <start_combined_trajectory+0x308>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	pris_initial_p = pris_current;
 8004c42:	4ab4      	ldr	r2, [pc, #720]	@ (8004f14 <start_combined_trajectory+0x30c>)
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	6013      	str	r3, [r2, #0]
	rev_initial_p = rev_current;
 8004c48:	4ab3      	ldr	r2, [pc, #716]	@ (8004f18 <start_combined_trajectory+0x310>)
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	6013      	str	r3, [r2, #0]

	// For prismatic axis - direct target
	pris_target_p = prismatic_target_mm;
 8004c4e:	4ab3      	ldr	r2, [pc, #716]	@ (8004f1c <start_combined_trajectory+0x314>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6013      	str	r3, [r2, #0]

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = fmodf(rev_current, 2 * PI);
 8004c54:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8004f20 <start_combined_trajectory+0x318>
 8004c58:	ed97 0a08 	vldr	s0, [r7, #32]
 8004c5c:	f00a f98c 	bl	800ef78 <fmodf>
 8004c60:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	if (normalized_current < 0) {
 8004c64:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	d507      	bpl.n	8004c82 <start_combined_trajectory+0x7a>
		normalized_current += 2 * PI;
 8004c72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c76:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8004f20 <start_combined_trajectory+0x318>
 8004c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c7e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	}

	// Convert target to radians
	float target_radians = UnitConverter_angle(&converter_system,
 8004c82:	220f      	movs	r2, #15
 8004c84:	210e      	movs	r1, #14
 8004c86:	ed97 0a00 	vldr	s0, [r7]
 8004c8a:	48a6      	ldr	r0, [pc, #664]	@ (8004f24 <start_combined_trajectory+0x31c>)
 8004c8c:	f7ff fca4 	bl	80045d8 <UnitConverter_angle>
 8004c90:	ed87 0a07 	vstr	s0, [r7, #28]
			revolute_target_deg, UNIT_DEGREE, UNIT_RADIAN);

	// Normalize target to [0, 2π]
	float normalized_target = fmodf(target_radians, 2 * PI);
 8004c94:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8004f20 <start_combined_trajectory+0x318>
 8004c98:	ed97 0a07 	vldr	s0, [r7, #28]
 8004c9c:	f00a f96c 	bl	800ef78 <fmodf>
 8004ca0:	ed87 0a06 	vstr	s0, [r7, #24]
	if (normalized_target < 0) {
 8004ca4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d507      	bpl.n	8004cc2 <start_combined_trajectory+0xba>
		normalized_target += 2 * PI;
 8004cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cb6:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8004f20 <start_combined_trajectory+0x318>
 8004cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cbe:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Convert to degrees for easier logic
	float current_deg = normalized_current * 180.0f / PI;
 8004cc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004cc6:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8004f28 <start_combined_trajectory+0x320>
 8004cca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cce:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8004f2c <start_combined_trajectory+0x324>
 8004cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd6:	edc7 7a05 	vstr	s15, [r7, #20]
	float target_deg = revolute_target_deg;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	613b      	str	r3, [r7, #16]

	// Define explicit rules for movements
	float movement_deg = 0.0f;
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

	// If both angles are on the same side of 180°
	if ((current_deg < 180 && target_deg < 180)
 8004ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ce8:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8004f28 <start_combined_trajectory+0x320>
 8004cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf4:	d508      	bpl.n	8004d08 <start_combined_trajectory+0x100>
 8004cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cfa:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8004f28 <start_combined_trajectory+0x320>
 8004cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	d411      	bmi.n	8004d2c <start_combined_trajectory+0x124>
			|| (current_deg >= 180 && target_deg >= 180)) {
 8004d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d0c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8004f28 <start_combined_trajectory+0x320>
 8004d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	db33      	blt.n	8004d82 <start_combined_trajectory+0x17a>
 8004d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d1e:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8004f28 <start_combined_trajectory+0x320>
 8004d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	db2a      	blt.n	8004d82 <start_combined_trajectory+0x17a>

		// Simple case - take shortest path
		movement_deg = target_deg - current_deg;
 8004d2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d38:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Ensure shortest path
		if (movement_deg > 180)
 8004d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d40:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004f28 <start_combined_trajectory+0x320>
 8004d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	dd07      	ble.n	8004d5e <start_combined_trajectory+0x156>
			movement_deg -= 360;
 8004d4e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d52:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8004f30 <start_combined_trajectory+0x328>
 8004d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d5a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (movement_deg < -180)
 8004d5e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d62:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004f34 <start_combined_trajectory+0x32c>
 8004d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	d562      	bpl.n	8004e36 <start_combined_trajectory+0x22e>
			movement_deg += 360;
 8004d70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d74:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004f30 <start_combined_trajectory+0x328>
 8004d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (movement_deg < -180)
 8004d80:	e059      	b.n	8004e36 <start_combined_trajectory+0x22e>
	}
	// If we need to cross the 180° boundary
	else {
		// Explicitly determine direction to avoid crossing 180°
		if (current_deg < 180) {
 8004d82:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004f28 <start_combined_trajectory+0x320>
 8004d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	d52a      	bpl.n	8004dea <start_combined_trajectory+0x1e2>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180) {
 8004d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d98:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8004f28 <start_combined_trajectory+0x320>
 8004d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004da0:	ed97 7a05 	vldr	s14, [r7, #20]
 8004da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dac:	d50e      	bpl.n	8004dcc <start_combined_trajectory+0x1c4>
				movement_deg = -(current_deg + (360 - target_deg)); // Negative = clockwise
 8004dae:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8004f30 <start_combined_trajectory+0x328>
 8004db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc2:	eef1 7a67 	vneg.f32	s15, s15
 8004dc6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004dca:	e034      	b.n	8004e36 <start_combined_trajectory+0x22e>
			} else {
				movement_deg = -(current_deg - target_deg + 360); // Negative = clockwise
 8004dcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004f30 <start_combined_trajectory+0x328>
 8004ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004de0:	eef1 7a67 	vneg.f32	s15, s15
 8004de4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004de8:	e025      	b.n	8004e36 <start_combined_trajectory+0x22e>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180) {
 8004dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dee:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8004f28 <start_combined_trajectory+0x320>
 8004df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004df6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e02:	d50c      	bpl.n	8004e1e <start_combined_trajectory+0x216>
				movement_deg = 360 - current_deg + target_deg; // Positive = counterclockwise
 8004e04:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004f30 <start_combined_trajectory+0x328>
 8004e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e10:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e18:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004e1c:	e00b      	b.n	8004e36 <start_combined_trajectory+0x22e>
			} else {
				movement_deg = target_deg - current_deg + 360; // Positive = counterclockwise
 8004e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8004f30 <start_combined_trajectory+0x328>
 8004e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e32:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			}
		}
	}

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8004e36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004e3a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004f2c <start_combined_trajectory+0x324>
 8004e3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e42:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8004f28 <start_combined_trajectory+0x320>
 8004e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e4a:	edc7 7a03 	vstr	s15, [r7, #12]
	rev_target_p = rev_initial_p + movement_rad;
 8004e4e:	4b32      	ldr	r3, [pc, #200]	@ (8004f18 <start_combined_trajectory+0x310>)
 8004e50:	ed93 7a00 	vldr	s14, [r3]
 8004e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e5c:	4b36      	ldr	r3, [pc, #216]	@ (8004f38 <start_combined_trajectory+0x330>)
 8004e5e:	edc3 7a00 	vstr	s15, [r3]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004e62:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <start_combined_trajectory+0x30c>)
 8004e64:	ed93 8a00 	vldr	s16, [r3]
 8004e68:	4b2c      	ldr	r3, [pc, #176]	@ (8004f1c <start_combined_trajectory+0x314>)
 8004e6a:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 8004e6e:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <start_combined_trajectory+0x334>)
 8004e70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f7fb fe6c 	bl	8000b54 <__aeabi_d2f>
 8004e7c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <start_combined_trajectory+0x334>)
 8004e80:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb fe64 	bl	8000b54 <__aeabi_d2f>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	ee01 3a90 	vmov	s3, r3
 8004e92:	ee01 4a10 	vmov	s2, r4
 8004e96:	eef0 0a68 	vmov.f32	s1, s17
 8004e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e9e:	4828      	ldr	r0, [pc, #160]	@ (8004f40 <start_combined_trajectory+0x338>)
 8004ea0:	f7fe ff41 	bl	8003d26 <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <start_combined_trajectory+0x310>)
 8004ea6:	ed93 8a00 	vldr	s16, [r3]
 8004eaa:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <start_combined_trajectory+0x330>)
 8004eac:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 8004eb0:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <start_combined_trajectory+0x33c>)
 8004eb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fb fe4b 	bl	8000b54 <__aeabi_d2f>
 8004ebe:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 8004ec0:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <start_combined_trajectory+0x33c>)
 8004ec2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fe43 	bl	8000b54 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	ee01 3a90 	vmov	s3, r3
 8004ed4:	ee01 4a10 	vmov	s2, r4
 8004ed8:	eef0 0a68 	vmov.f32	s1, s17
 8004edc:	eeb0 0a48 	vmov.f32	s0, s16
 8004ee0:	4819      	ldr	r0, [pc, #100]	@ (8004f48 <start_combined_trajectory+0x340>)
 8004ee2:	f7fe ff20 	bl	8003d26 <Trapezoidal_Generator>

	plotter_pen_up();
 8004ee6:	f001 faff 	bl	80064e8 <plotter_pen_up>

	pristrajectoryActive = true;
 8004eea:	4b18      	ldr	r3, [pc, #96]	@ (8004f4c <start_combined_trajectory+0x344>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
	revtrajectoryActive = true;
 8004ef0:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <start_combined_trajectory+0x348>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	701a      	strb	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3734      	adds	r7, #52	@ 0x34
 8004efa:	46bd      	mov	sp, r7
 8004efc:	ecbd 8b02 	vpop	{d8}
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200003c4 	.word	0x200003c4
 8004f08:	20000420 	.word	0x20000420
 8004f0c:	20000258 	.word	0x20000258
 8004f10:	200002ac 	.word	0x200002ac
 8004f14:	20000270 	.word	0x20000270
 8004f18:	200002c4 	.word	0x200002c4
 8004f1c:	20000274 	.word	0x20000274
 8004f20:	40c90fdb 	.word	0x40c90fdb
 8004f24:	20000790 	.word	0x20000790
 8004f28:	43340000 	.word	0x43340000
 8004f2c:	40490fdb 	.word	0x40490fdb
 8004f30:	43b40000 	.word	0x43b40000
 8004f34:	c3340000 	.word	0xc3340000
 8004f38:	200002c8 	.word	0x200002c8
 8004f3c:	20000060 	.word	0x20000060
 8004f40:	20000244 	.word	0x20000244
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000298 	.word	0x20000298
 8004f4c:	2000026c 	.word	0x2000026c
 8004f50:	200002c0 	.word	0x200002c0

08004f54 <start_homing>:

void start_homing() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	// Initialize homing state
	homing_in_progress = true;
 8004f58:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <start_homing+0x18>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]

	// First ensure pen is up
	plotter_pen_up();
 8004f5e:	f001 fac3 	bl	80064e8 <plotter_pen_up>

	// Enter homing state
	home = 1; // This triggers your existing homing sequence in the timer callback
 8004f62:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <start_homing+0x1c>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200002fc 	.word	0x200002fc
 8004f70:	20000310 	.word	0x20000310

08004f74 <update_control_loops>:

void update_control_loops() {
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	ed2d 8b02 	vpush	{d8}
 8004f7c:	b089      	sub	sp, #36	@ 0x24
 8004f7e:	af00      	add	r7, sp, #0
	// Normalize revolute position
	cur_pos = fmodf(revolute_encoder.rads, 2 * PI);
 8004f80:	4ba5      	ldr	r3, [pc, #660]	@ (8005218 <update_control_loops+0x2a4>)
 8004f82:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004f86:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 800521c <update_control_loops+0x2a8>
 8004f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8e:	f009 fff3 	bl	800ef78 <fmodf>
 8004f92:	eef0 7a40 	vmov.f32	s15, s0
 8004f96:	4ba2      	ldr	r3, [pc, #648]	@ (8005220 <update_control_loops+0x2ac>)
 8004f98:	edc3 7a00 	vstr	s15, [r3]
	if (cur_pos < 0) {
 8004f9c:	4ba0      	ldr	r3, [pc, #640]	@ (8005220 <update_control_loops+0x2ac>)
 8004f9e:	edd3 7a00 	vldr	s15, [r3]
 8004fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	d509      	bpl.n	8004fc0 <update_control_loops+0x4c>
		cur_pos += 2 * PI;
 8004fac:	4b9c      	ldr	r3, [pc, #624]	@ (8005220 <update_control_loops+0x2ac>)
 8004fae:	edd3 7a00 	vldr	s15, [r3]
 8004fb2:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800521c <update_control_loops+0x2a8>
 8004fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fba:	4b99      	ldr	r3, [pc, #612]	@ (8005220 <update_control_loops+0x2ac>)
 8004fbc:	edc3 7a00 	vstr	s15, [r3]
	}

	// Calculate angle in degrees for display/debugging
	deg = UnitConverter_angle(&converter_system, cur_pos, UNIT_RADIAN,
 8004fc0:	4b97      	ldr	r3, [pc, #604]	@ (8005220 <update_control_loops+0x2ac>)
 8004fc2:	edd3 7a00 	vldr	s15, [r3]
 8004fc6:	220e      	movs	r2, #14
 8004fc8:	210f      	movs	r1, #15
 8004fca:	eeb0 0a67 	vmov.f32	s0, s15
 8004fce:	4895      	ldr	r0, [pc, #596]	@ (8005224 <update_control_loops+0x2b0>)
 8004fd0:	f7ff fb02 	bl	80045d8 <UnitConverter_angle>
 8004fd4:	eef0 7a40 	vmov.f32	s15, s0
 8004fd8:	4b93      	ldr	r3, [pc, #588]	@ (8005228 <update_control_loops+0x2b4>)
 8004fda:	edc3 7a00 	vstr	s15, [r3]
			UNIT_DEGREE);

	// Update prismatic trajectory if active
	if (pristrajectoryActive && !prisEva.isFinised) {
 8004fde:	4b93      	ldr	r3, [pc, #588]	@ (800522c <update_control_loops+0x2b8>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d047      	beq.n	8005076 <update_control_loops+0x102>
 8004fe6:	4b92      	ldr	r3, [pc, #584]	@ (8005230 <update_control_loops+0x2bc>)
 8004fe8:	7c1b      	ldrb	r3, [r3, #16]
 8004fea:	f083 0301 	eor.w	r3, r3, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d040      	beq.n	8005076 <update_control_loops+0x102>
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8005234 <update_control_loops+0x2c0>)
 8004ff6:	ed93 8a00 	vldr	s16, [r3]
 8004ffa:	4b8f      	ldr	r3, [pc, #572]	@ (8005238 <update_control_loops+0x2c4>)
 8004ffc:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_400RPM_Constant.sd_max,
 8005000:	4b8e      	ldr	r3, [pc, #568]	@ (800523c <update_control_loops+0x2c8>)
 8005002:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	f7fb fda3 	bl	8000b54 <__aeabi_d2f>
 800500e:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8005010:	4b8a      	ldr	r3, [pc, #552]	@ (800523c <update_control_loops+0x2c8>)
 8005012:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	f7fb fd9b 	bl	8000b54 <__aeabi_d2f>
 800501e:	4603      	mov	r3, r0
 8005020:	ee01 3a90 	vmov	s3, r3
 8005024:	ee01 4a10 	vmov	s2, r4
 8005028:	eef0 0a68 	vmov.f32	s1, s17
 800502c:	eeb0 0a48 	vmov.f32	s0, s16
 8005030:	497f      	ldr	r1, [pc, #508]	@ (8005230 <update_control_loops+0x2bc>)
 8005032:	4883      	ldr	r0, [pc, #524]	@ (8005240 <update_control_loops+0x2cc>)
 8005034:	f7fe ff38 	bl	8003ea8 <Trapezoidal_Evaluated>

		prismatic_pos = prisEva.setposition;
 8005038:	4b7d      	ldr	r3, [pc, #500]	@ (8005230 <update_control_loops+0x2bc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a81      	ldr	r2, [pc, #516]	@ (8005244 <update_control_loops+0x2d0>)
 800503e:	6013      	str	r3, [r2, #0]
		prismatic_vel = prisEva.setvelocity;
 8005040:	4b7b      	ldr	r3, [pc, #492]	@ (8005230 <update_control_loops+0x2bc>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a80      	ldr	r2, [pc, #512]	@ (8005248 <update_control_loops+0x2d4>)
 8005046:	6013      	str	r3, [r2, #0]

		if (prisEva.isFinised) {
 8005048:	4b79      	ldr	r3, [pc, #484]	@ (8005230 <update_control_loops+0x2bc>)
 800504a:	7c1b      	ldrb	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d012      	beq.n	8005076 <update_control_loops+0x102>
			pristrajectoryActive = false;
 8005050:	4a76      	ldr	r2, [pc, #472]	@ (800522c <update_control_loops+0x2b8>)
 8005052:	2300      	movs	r3, #0
 8005054:	7013      	strb	r3, [r2, #0]
			prismatic_pos = prisEva.setposition;
 8005056:	4b76      	ldr	r3, [pc, #472]	@ (8005230 <update_control_loops+0x2bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a7a      	ldr	r2, [pc, #488]	@ (8005244 <update_control_loops+0x2d0>)
 800505c:	6013      	str	r3, [r2, #0]
			prismatic_vel = 0.0f;
 800505e:	4b7a      	ldr	r3, [pc, #488]	@ (8005248 <update_control_loops+0x2d4>)
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
			pris_dfd = 0.0;
 8005066:	4b79      	ldr	r3, [pc, #484]	@ (800524c <update_control_loops+0x2d8>)
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
			pris_ffd = 0.0;
 800506e:	4b78      	ldr	r3, [pc, #480]	@ (8005250 <update_control_loops+0x2dc>)
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
		}
	}

	// Update revolute trajectory if active
	if (revtrajectoryActive && !revEva.isFinised) {
 8005076:	4b77      	ldr	r3, [pc, #476]	@ (8005254 <update_control_loops+0x2e0>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d047      	beq.n	800510e <update_control_loops+0x19a>
 800507e:	4b76      	ldr	r3, [pc, #472]	@ (8005258 <update_control_loops+0x2e4>)
 8005080:	7c1b      	ldrb	r3, [r3, #16]
 8005082:	f083 0301 	eor.w	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d040      	beq.n	800510e <update_control_loops+0x19a>
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 800508c:	4b73      	ldr	r3, [pc, #460]	@ (800525c <update_control_loops+0x2e8>)
 800508e:	ed93 8a00 	vldr	s16, [r3]
 8005092:	4b73      	ldr	r3, [pc, #460]	@ (8005260 <update_control_loops+0x2ec>)
 8005094:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_150RPM_Constant.qd_max,
 8005098:	4b72      	ldr	r3, [pc, #456]	@ (8005264 <update_control_loops+0x2f0>)
 800509a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7fb fd57 	bl	8000b54 <__aeabi_d2f>
 80050a6:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 80050a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005264 <update_control_loops+0x2f0>)
 80050aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7fb fd4f 	bl	8000b54 <__aeabi_d2f>
 80050b6:	4603      	mov	r3, r0
 80050b8:	ee01 3a90 	vmov	s3, r3
 80050bc:	ee01 4a10 	vmov	s2, r4
 80050c0:	eef0 0a68 	vmov.f32	s1, s17
 80050c4:	eeb0 0a48 	vmov.f32	s0, s16
 80050c8:	4963      	ldr	r1, [pc, #396]	@ (8005258 <update_control_loops+0x2e4>)
 80050ca:	4867      	ldr	r0, [pc, #412]	@ (8005268 <update_control_loops+0x2f4>)
 80050cc:	f7fe feec 	bl	8003ea8 <Trapezoidal_Evaluated>

		revolute_pos = revEva.setposition;
 80050d0:	4b61      	ldr	r3, [pc, #388]	@ (8005258 <update_control_loops+0x2e4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a65      	ldr	r2, [pc, #404]	@ (800526c <update_control_loops+0x2f8>)
 80050d6:	6013      	str	r3, [r2, #0]
		revolute_vel = revEva.setvelocity;
 80050d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005258 <update_control_loops+0x2e4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a64      	ldr	r2, [pc, #400]	@ (8005270 <update_control_loops+0x2fc>)
 80050de:	6013      	str	r3, [r2, #0]

		if (revEva.isFinised) {
 80050e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005258 <update_control_loops+0x2e4>)
 80050e2:	7c1b      	ldrb	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <update_control_loops+0x19a>
			revtrajectoryActive = false;
 80050e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005254 <update_control_loops+0x2e0>)
 80050ea:	2300      	movs	r3, #0
 80050ec:	7013      	strb	r3, [r2, #0]
			revolute_pos = revEva.setposition;
 80050ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005258 <update_control_loops+0x2e4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5e      	ldr	r2, [pc, #376]	@ (800526c <update_control_loops+0x2f8>)
 80050f4:	6013      	str	r3, [r2, #0]
			revolute_vel = 0.0f;
 80050f6:	4b5e      	ldr	r3, [pc, #376]	@ (8005270 <update_control_loops+0x2fc>)
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
			rev_dfd = 0.0;
 80050fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005274 <update_control_loops+0x300>)
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
			rev_ffd = 0.0;
 8005106:	4b5c      	ldr	r3, [pc, #368]	@ (8005278 <update_control_loops+0x304>)
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
		}
	}

	// Calculate control signals for prismatic axis
	pris_vin = mapf(pris_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 800510e:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <update_control_loops+0x308>)
 8005110:	edd3 7a00 	vldr	s15, [r3]
 8005114:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005118:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800511c:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8005280 <update_control_loops+0x30c>
 8005120:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8005284 <update_control_loops+0x310>
 8005124:	eeb0 0a67 	vmov.f32	s0, s15
 8005128:	f7fc fe0c 	bl	8001d44 <mapf>
 800512c:	eef0 7a40 	vmov.f32	s15, s0
 8005130:	4b55      	ldr	r3, [pc, #340]	@ (8005288 <update_control_loops+0x314>)
 8005132:	edc3 7a00 	vstr	s15, [r3]

	pris_kal_filt = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005136:	4b54      	ldr	r3, [pc, #336]	@ (8005288 <update_control_loops+0x314>)
 8005138:	edd3 7a00 	vldr	s15, [r3]
 800513c:	4b53      	ldr	r3, [pc, #332]	@ (800528c <update_control_loops+0x318>)
 800513e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005142:	eef0 0a47 	vmov.f32	s1, s14
 8005146:	eeb0 0a67 	vmov.f32	s0, s15
 800514a:	4851      	ldr	r0, [pc, #324]	@ (8005290 <update_control_loops+0x31c>)
 800514c:	f7fd fdc8 	bl	8002ce0 <MotorKalman_Estimate>
 8005150:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8005154:	4b4f      	ldr	r3, [pc, #316]	@ (8005294 <update_control_loops+0x320>)
 8005156:	edd3 7a04 	vldr	s15, [r3, #16]
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005298 <update_control_loops+0x324>
 8005162:	ee67 7a87 	vmul.f32	s15, s15, s14
	pris_kal_filt = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005166:	4b4d      	ldr	r3, [pc, #308]	@ (800529c <update_control_loops+0x328>)
 8005168:	edc3 7a00 	vstr	s15, [r3]

	if (isnan(pris_kal_filt)) {
 800516c:	4b4b      	ldr	r3, [pc, #300]	@ (800529c <update_control_loops+0x328>)
 800516e:	edd3 7a00 	vldr	s15, [r3]
 8005172:	eef4 7a67 	vcmp.f32	s15, s15
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	d703      	bvc.n	8005184 <update_control_loops+0x210>
		pris_kal_filt = 0.0f;
 800517c:	4b47      	ldr	r3, [pc, #284]	@ (800529c <update_control_loops+0x328>)
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
	}

	pris_pos_error = prismatic_pos - prismatic_encoder.mm;
 8005184:	4b2f      	ldr	r3, [pc, #188]	@ (8005244 <update_control_loops+0x2d0>)
 8005186:	ed93 7a00 	vldr	s14, [r3]
 800518a:	4b40      	ldr	r3, [pc, #256]	@ (800528c <update_control_loops+0x318>)
 800518c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8005190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005194:	4b42      	ldr	r3, [pc, #264]	@ (80052a0 <update_control_loops+0x32c>)
 8005196:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_vx = PWM_Satuation(
 800519a:	4b41      	ldr	r3, [pc, #260]	@ (80052a0 <update_control_loops+0x32c>)
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	eeb0 0a67 	vmov.f32	s0, s15
 80051a4:	483f      	ldr	r0, [pc, #252]	@ (80052a4 <update_control_loops+0x330>)
 80051a6:	f7fc f837 	bl	8001218 <PID_CONTROLLER_Compute>
 80051aa:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid, pris_pos_error),
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80051ae:	4b23      	ldr	r3, [pc, #140]	@ (800523c <update_control_loops+0x2c8>)
 80051b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	pris_cmd_vx = PWM_Satuation(
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb fc84 	bl	8000ac4 <__aeabi_d2iz>
 80051bc:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80051be:	4b1f      	ldr	r3, [pc, #124]	@ (800523c <update_control_loops+0x2c8>)
 80051c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80051c4:	4690      	mov	r8, r2
 80051c6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	pris_cmd_vx = PWM_Satuation(
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fb fc79 	bl	8000ac4 <__aeabi_d2iz>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4619      	mov	r1, r3
 80051d6:	4620      	mov	r0, r4
 80051d8:	eeb0 0a48 	vmov.f32	s0, s16
 80051dc:	f7fb ffba 	bl	8001154 <PWM_Satuation>
 80051e0:	ee07 0a90 	vmov	s15, r0
 80051e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e8:	4b2f      	ldr	r3, [pc, #188]	@ (80052a8 <update_control_loops+0x334>)
 80051ea:	edc3 7a00 	vstr	s15, [r3]

	// Add velocity feedforward for trajectory
	if (pristrajectoryActive) {
 80051ee:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <update_control_loops+0x2b8>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d05c      	beq.n	80052b0 <update_control_loops+0x33c>
		pris_vel_error = pris_cmd_vx + prismatic_vel - pris_kal_filt;
 80051f6:	4b2c      	ldr	r3, [pc, #176]	@ (80052a8 <update_control_loops+0x334>)
 80051f8:	ed93 7a00 	vldr	s14, [r3]
 80051fc:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <update_control_loops+0x2d4>)
 80051fe:	edd3 7a00 	vldr	s15, [r3]
 8005202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005206:	4b25      	ldr	r3, [pc, #148]	@ (800529c <update_control_loops+0x328>)
 8005208:	edd3 7a00 	vldr	s15, [r3]
 800520c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005210:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <update_control_loops+0x338>)
 8005212:	edc3 7a00 	vstr	s15, [r3]
 8005216:	e056      	b.n	80052c6 <update_control_loops+0x352>
 8005218:	20000420 	.word	0x20000420
 800521c:	40c90fdb 	.word	0x40c90fdb
 8005220:	20000318 	.word	0x20000318
 8005224:	20000790 	.word	0x20000790
 8005228:	2000031c 	.word	0x2000031c
 800522c:	2000026c 	.word	0x2000026c
 8005230:	20000258 	.word	0x20000258
 8005234:	20000270 	.word	0x20000270
 8005238:	20000274 	.word	0x20000274
 800523c:	20000060 	.word	0x20000060
 8005240:	20000244 	.word	0x20000244
 8005244:	20000278 	.word	0x20000278
 8005248:	2000027c 	.word	0x2000027c
 800524c:	200002f4 	.word	0x200002f4
 8005250:	200002f8 	.word	0x200002f8
 8005254:	200002c0 	.word	0x200002c0
 8005258:	200002ac 	.word	0x200002ac
 800525c:	200002c4 	.word	0x200002c4
 8005260:	200002c8 	.word	0x200002c8
 8005264:	20000000 	.word	0x20000000
 8005268:	20000298 	.word	0x20000298
 800526c:	200002cc 	.word	0x200002cc
 8005270:	200002d0 	.word	0x200002d0
 8005274:	200002ec 	.word	0x200002ec
 8005278:	200002f0 	.word	0x200002f0
 800527c:	20000290 	.word	0x20000290
 8005280:	477fff00 	.word	0x477fff00
 8005284:	c77fff00 	.word	0xc77fff00
 8005288:	2000028c 	.word	0x2000028c
 800528c:	200003c4 	.word	0x200003c4
 8005290:	20000a18 	.word	0x20000a18
 8005294:	200000c0 	.word	0x200000c0
 8005298:	447a0000 	.word	0x447a0000
 800529c:	20000288 	.word	0x20000288
 80052a0:	20000280 	.word	0x20000280
 80052a4:	2000047c 	.word	0x2000047c
 80052a8:	20000294 	.word	0x20000294
 80052ac:	20000284 	.word	0x20000284
	} else {
		pris_vel_error = pris_cmd_vx - pris_kal_filt;
 80052b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005468 <update_control_loops+0x4f4>)
 80052b2:	ed93 7a00 	vldr	s14, [r3]
 80052b6:	4b6d      	ldr	r3, [pc, #436]	@ (800546c <update_control_loops+0x4f8>)
 80052b8:	edd3 7a00 	vldr	s15, [r3]
 80052bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005470 <update_control_loops+0x4fc>)
 80052c2:	edc3 7a00 	vstr	s15, [r3]
	}

	pris_cmd_ux = PWM_Satuation(
 80052c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005470 <update_control_loops+0x4fc>)
 80052c8:	edd3 7a00 	vldr	s15, [r3]
 80052cc:	eeb0 0a67 	vmov.f32	s0, s15
 80052d0:	4868      	ldr	r0, [pc, #416]	@ (8005474 <update_control_loops+0x500>)
 80052d2:	f7fb ffa1 	bl	8001218 <PID_CONTROLLER_Compute>
 80052d6:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid, pris_vel_error),
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80052da:	4b67      	ldr	r3, [pc, #412]	@ (8005478 <update_control_loops+0x504>)
 80052dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	pris_cmd_ux = PWM_Satuation(
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7fb fbee 	bl	8000ac4 <__aeabi_d2iz>
 80052e8:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80052ea:	4b63      	ldr	r3, [pc, #396]	@ (8005478 <update_control_loops+0x504>)
 80052ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80052f0:	613a      	str	r2, [r7, #16]
 80052f2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80052f6:	617b      	str	r3, [r7, #20]
	pris_cmd_ux = PWM_Satuation(
 80052f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052fc:	f7fb fbe2 	bl	8000ac4 <__aeabi_d2iz>
 8005300:	4603      	mov	r3, r0
 8005302:	4619      	mov	r1, r3
 8005304:	4620      	mov	r0, r4
 8005306:	eeb0 0a48 	vmov.f32	s0, s16
 800530a:	f7fb ff23 	bl	8001154 <PWM_Satuation>
 800530e:	ee07 0a90 	vmov	s15, r0
 8005312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005316:	4b59      	ldr	r3, [pc, #356]	@ (800547c <update_control_loops+0x508>)
 8005318:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control signals for revolute axis
	rev_vin = mapf(rev_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 800531c:	4b58      	ldr	r3, [pc, #352]	@ (8005480 <update_control_loops+0x50c>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005326:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800532a:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8005484 <update_control_loops+0x510>
 800532e:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8005488 <update_control_loops+0x514>
 8005332:	eeb0 0a67 	vmov.f32	s0, s15
 8005336:	f7fc fd05 	bl	8001d44 <mapf>
 800533a:	eef0 7a40 	vmov.f32	s15, s0
 800533e:	4b53      	ldr	r3, [pc, #332]	@ (800548c <update_control_loops+0x518>)
 8005340:	edc3 7a00 	vstr	s15, [r3]

	rev_kal_filt = MotorKalman_Estimate(&revolute_kalman, rev_vin,
 8005344:	4b51      	ldr	r3, [pc, #324]	@ (800548c <update_control_loops+0x518>)
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	4b51      	ldr	r3, [pc, #324]	@ (8005490 <update_control_loops+0x51c>)
 800534c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005350:	eef0 0a47 	vmov.f32	s1, s14
 8005354:	eeb0 0a67 	vmov.f32	s0, s15
 8005358:	484e      	ldr	r0, [pc, #312]	@ (8005494 <update_control_loops+0x520>)
 800535a:	f7fd fcc1 	bl	8002ce0 <MotorKalman_Estimate>
 800535e:	eef0 7a40 	vmov.f32	s15, s0
 8005362:	4b4d      	ldr	r3, [pc, #308]	@ (8005498 <update_control_loops+0x524>)
 8005364:	edc3 7a00 	vstr	s15, [r3]
			revolute_encoder.rads);

	if (isnan(rev_kal_filt)) {
 8005368:	4b4b      	ldr	r3, [pc, #300]	@ (8005498 <update_control_loops+0x524>)
 800536a:	edd3 7a00 	vldr	s15, [r3]
 800536e:	eef4 7a67 	vcmp.f32	s15, s15
 8005372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005376:	d703      	bvc.n	8005380 <update_control_loops+0x40c>
		rev_kal_filt = 0.0f;
 8005378:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <update_control_loops+0x524>)
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
	}

	rev_pos_error = revolute_pos - cur_pos;
 8005380:	4b46      	ldr	r3, [pc, #280]	@ (800549c <update_control_loops+0x528>)
 8005382:	ed93 7a00 	vldr	s14, [r3]
 8005386:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <update_control_loops+0x52c>)
 8005388:	edd3 7a00 	vldr	s15, [r3]
 800538c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005390:	4b44      	ldr	r3, [pc, #272]	@ (80054a4 <update_control_loops+0x530>)
 8005392:	edc3 7a00 	vstr	s15, [r3]

	// Ensure error uses the shortest path for control
	if (rev_pos_error > PI) {
 8005396:	4b43      	ldr	r3, [pc, #268]	@ (80054a4 <update_control_loops+0x530>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80054a8 <update_control_loops+0x534>
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	dd09      	ble.n	80053be <update_control_loops+0x44a>
		rev_pos_error -= 2 * PI;
 80053aa:	4b3e      	ldr	r3, [pc, #248]	@ (80054a4 <update_control_loops+0x530>)
 80053ac:	edd3 7a00 	vldr	s15, [r3]
 80053b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80054ac <update_control_loops+0x538>
 80053b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053b8:	4b3a      	ldr	r3, [pc, #232]	@ (80054a4 <update_control_loops+0x530>)
 80053ba:	edc3 7a00 	vstr	s15, [r3]
	}
	if (rev_pos_error < -PI) {
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <update_control_loops+0x530>)
 80053c0:	edd3 7a00 	vldr	s15, [r3]
 80053c4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80054b0 <update_control_loops+0x53c>
 80053c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d509      	bpl.n	80053e6 <update_control_loops+0x472>
		rev_pos_error += 2 * PI;
 80053d2:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <update_control_loops+0x530>)
 80053d4:	edd3 7a00 	vldr	s15, [r3]
 80053d8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80054ac <update_control_loops+0x538>
 80053dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053e0:	4b30      	ldr	r3, [pc, #192]	@ (80054a4 <update_control_loops+0x530>)
 80053e2:	edc3 7a00 	vstr	s15, [r3]
	}

	rev_cmd_vx = PWM_Satuation(
 80053e6:	4b2f      	ldr	r3, [pc, #188]	@ (80054a4 <update_control_loops+0x530>)
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	eeb0 0a67 	vmov.f32	s0, s15
 80053f0:	4830      	ldr	r0, [pc, #192]	@ (80054b4 <update_control_loops+0x540>)
 80053f2:	f7fb ff11 	bl	8001218 <PID_CONTROLLER_Compute>
 80053f6:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid, rev_pos_error),
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80053fa:	4b2f      	ldr	r3, [pc, #188]	@ (80054b8 <update_control_loops+0x544>)
 80053fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	rev_cmd_vx = PWM_Satuation(
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	f7fb fb5e 	bl	8000ac4 <__aeabi_d2iz>
 8005408:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 800540a:	4b2b      	ldr	r3, [pc, #172]	@ (80054b8 <update_control_loops+0x544>)
 800540c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005410:	60ba      	str	r2, [r7, #8]
 8005412:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005416:	60fb      	str	r3, [r7, #12]
	rev_cmd_vx = PWM_Satuation(
 8005418:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800541c:	f7fb fb52 	bl	8000ac4 <__aeabi_d2iz>
 8005420:	4603      	mov	r3, r0
 8005422:	4619      	mov	r1, r3
 8005424:	4620      	mov	r0, r4
 8005426:	eeb0 0a48 	vmov.f32	s0, s16
 800542a:	f7fb fe93 	bl	8001154 <PWM_Satuation>
 800542e:	ee07 0a90 	vmov	s15, r0
 8005432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005436:	4b21      	ldr	r3, [pc, #132]	@ (80054bc <update_control_loops+0x548>)
 8005438:	edc3 7a00 	vstr	s15, [r3]

	// Add velocity feedforward for trajectory
	if (revtrajectoryActive) {
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <update_control_loops+0x54c>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d043      	beq.n	80054cc <update_control_loops+0x558>
		rev_vel_error = rev_cmd_vx + revolute_vel - rev_kal_filt;
 8005444:	4b1d      	ldr	r3, [pc, #116]	@ (80054bc <update_control_loops+0x548>)
 8005446:	ed93 7a00 	vldr	s14, [r3]
 800544a:	4b1e      	ldr	r3, [pc, #120]	@ (80054c4 <update_control_loops+0x550>)
 800544c:	edd3 7a00 	vldr	s15, [r3]
 8005450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <update_control_loops+0x524>)
 8005456:	edd3 7a00 	vldr	s15, [r3]
 800545a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <update_control_loops+0x554>)
 8005460:	edc3 7a00 	vstr	s15, [r3]
 8005464:	e03d      	b.n	80054e2 <update_control_loops+0x56e>
 8005466:	bf00      	nop
 8005468:	20000294 	.word	0x20000294
 800546c:	20000288 	.word	0x20000288
 8005470:	20000284 	.word	0x20000284
 8005474:	200004a4 	.word	0x200004a4
 8005478:	20000060 	.word	0x20000060
 800547c:	20000290 	.word	0x20000290
 8005480:	200002e4 	.word	0x200002e4
 8005484:	477fff00 	.word	0x477fff00
 8005488:	c77fff00 	.word	0xc77fff00
 800548c:	200002e0 	.word	0x200002e0
 8005490:	20000420 	.word	0x20000420
 8005494:	20000d84 	.word	0x20000d84
 8005498:	200002dc 	.word	0x200002dc
 800549c:	200002cc 	.word	0x200002cc
 80054a0:	20000318 	.word	0x20000318
 80054a4:	200002d4 	.word	0x200002d4
 80054a8:	40490fdb 	.word	0x40490fdb
 80054ac:	40c90fdb 	.word	0x40c90fdb
 80054b0:	c0490fdb 	.word	0xc0490fdb
 80054b4:	200004cc 	.word	0x200004cc
 80054b8:	20000000 	.word	0x20000000
 80054bc:	200002e8 	.word	0x200002e8
 80054c0:	200002c0 	.word	0x200002c0
 80054c4:	200002d0 	.word	0x200002d0
 80054c8:	200002d8 	.word	0x200002d8
	} else {
		rev_vel_error = rev_cmd_vx - rev_kal_filt;
 80054cc:	4b90      	ldr	r3, [pc, #576]	@ (8005710 <update_control_loops+0x79c>)
 80054ce:	ed93 7a00 	vldr	s14, [r3]
 80054d2:	4b90      	ldr	r3, [pc, #576]	@ (8005714 <update_control_loops+0x7a0>)
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005718 <update_control_loops+0x7a4>)
 80054de:	edc3 7a00 	vstr	s15, [r3]
	}

	rev_cmd_ux = PWM_Satuation(
 80054e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005718 <update_control_loops+0x7a4>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	eeb0 0a67 	vmov.f32	s0, s15
 80054ec:	488b      	ldr	r0, [pc, #556]	@ (800571c <update_control_loops+0x7a8>)
 80054ee:	f7fb fe93 	bl	8001218 <PID_CONTROLLER_Compute>
 80054f2:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, rev_vel_error),
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80054f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005720 <update_control_loops+0x7ac>)
 80054f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	rev_cmd_ux = PWM_Satuation(
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	f7fb fae0 	bl	8000ac4 <__aeabi_d2iz>
 8005504:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005506:	4b86      	ldr	r3, [pc, #536]	@ (8005720 <update_control_loops+0x7ac>)
 8005508:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800550c:	603a      	str	r2, [r7, #0]
 800550e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	607b      	str	r3, [r7, #4]
	rev_cmd_ux = PWM_Satuation(
 8005514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005518:	f7fb fad4 	bl	8000ac4 <__aeabi_d2iz>
 800551c:	4603      	mov	r3, r0
 800551e:	4619      	mov	r1, r3
 8005520:	4620      	mov	r0, r4
 8005522:	eeb0 0a48 	vmov.f32	s0, s16
 8005526:	f7fb fe15 	bl	8001154 <PWM_Satuation>
 800552a:	ee07 0a90 	vmov	s15, r0
 800552e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005532:	4b7c      	ldr	r3, [pc, #496]	@ (8005724 <update_control_loops+0x7b0>)
 8005534:	edc3 7a00 	vstr	s15, [r3]

	// Add feed-forward compensation
	pris_ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
			prismatic_vel / 1000.0);
 8005538:	4b7b      	ldr	r3, [pc, #492]	@ (8005728 <update_control_loops+0x7b4>)
 800553a:	edd3 7a00 	vldr	s15, [r3]
	pris_ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800553e:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 800572c <update_control_loops+0x7b8>
 8005542:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005546:	eeb0 0a47 	vmov.f32	s0, s14
 800554a:	4879      	ldr	r0, [pc, #484]	@ (8005730 <update_control_loops+0x7bc>)
 800554c:	f7fc f992 	bl	8001874 <PRISMATIC_MOTOR_FFD_Compute>
 8005550:	eef0 7a40 	vmov.f32	s15, s0
 8005554:	4b77      	ldr	r3, [pc, #476]	@ (8005734 <update_control_loops+0x7c0>)
 8005556:	edc3 7a00 	vstr	s15, [r3]

	pris_dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd, cur_pos, revolute_vel, prismatic_encoder.mm / 1000.0);
 800555a:	4b77      	ldr	r3, [pc, #476]	@ (8005738 <update_control_loops+0x7c4>)
 800555c:	ed93 7a00 	vldr	s14, [r3]
 8005560:	4b76      	ldr	r3, [pc, #472]	@ (800573c <update_control_loops+0x7c8>)
 8005562:	edd3 6a00 	vldr	s13, [r3]
 8005566:	4b76      	ldr	r3, [pc, #472]	@ (8005740 <update_control_loops+0x7cc>)
 8005568:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800556c:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 800572c <update_control_loops+0x7b8>
 8005570:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8005574:	eeb0 1a46 	vmov.f32	s2, s12
 8005578:	eef0 0a66 	vmov.f32	s1, s13
 800557c:	eeb0 0a47 	vmov.f32	s0, s14
 8005580:	4870      	ldr	r0, [pc, #448]	@ (8005744 <update_control_loops+0x7d0>)
 8005582:	f7fc fa0a 	bl	800199a <PRISMATIC_MOTOR_DFD_Compute>
 8005586:	eef0 7a40 	vmov.f32	s15, s0
 800558a:	4b6f      	ldr	r3, [pc, #444]	@ (8005748 <update_control_loops+0x7d4>)
 800558c:	edc3 7a00 	vstr	s15, [r3]

	float pris_backlash_compensation = prismatic_backlash_compensator(pris_cmd_vx);
 8005590:	4b6e      	ldr	r3, [pc, #440]	@ (800574c <update_control_loops+0x7d8>)
 8005592:	edd3 7a00 	vldr	s15, [r3]
 8005596:	eeb0 0a67 	vmov.f32	s0, s15
 800559a:	f000 f8ed 	bl	8005778 <prismatic_backlash_compensator>
 800559e:	ed87 0a07 	vstr	s0, [r7, #28]

	pris_cmd_ux = pris_cmd_ux + pris_backlash_compensation + pris_dfd + pris_ffd;
 80055a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005750 <update_control_loops+0x7dc>)
 80055a4:	ed93 7a00 	vldr	s14, [r3]
 80055a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80055ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055b0:	4b65      	ldr	r3, [pc, #404]	@ (8005748 <update_control_loops+0x7d4>)
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ba:	4b5e      	ldr	r3, [pc, #376]	@ (8005734 <update_control_loops+0x7c0>)
 80055bc:	edd3 7a00 	vldr	s15, [r3]
 80055c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c4:	4b62      	ldr	r3, [pc, #392]	@ (8005750 <update_control_loops+0x7dc>)
 80055c6:	edc3 7a00 	vstr	s15, [r3]

	rev_dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, cur_pos, 0.0,
 80055ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005738 <update_control_loops+0x7c4>)
 80055cc:	ed93 7a00 	vldr	s14, [r3]
			prismatic_encoder.mm / 1000.0);
 80055d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005740 <update_control_loops+0x7cc>)
 80055d2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	rev_dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, cur_pos, 0.0,
 80055d6:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800572c <update_control_loops+0x7b8>
 80055da:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80055de:	eeb0 1a66 	vmov.f32	s2, s13
 80055e2:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8005754 <update_control_loops+0x7e0>
 80055e6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ea:	485b      	ldr	r0, [pc, #364]	@ (8005758 <update_control_loops+0x7e4>)
 80055ec:	f7fc f846 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 80055f0:	eef0 7a40 	vmov.f32	s15, s0
 80055f4:	4b59      	ldr	r3, [pc, #356]	@ (800575c <update_control_loops+0x7e8>)
 80055f6:	edc3 7a00 	vstr	s15, [r3]
	rev_ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, revolute_vel);
 80055fa:	4b50      	ldr	r3, [pc, #320]	@ (800573c <update_control_loops+0x7c8>)
 80055fc:	edd3 7a00 	vldr	s15, [r3]
 8005600:	eeb0 0a67 	vmov.f32	s0, s15
 8005604:	4856      	ldr	r0, [pc, #344]	@ (8005760 <update_control_loops+0x7ec>)
 8005606:	f7fb ffa5 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800560a:	eef0 7a40 	vmov.f32	s15, s0
 800560e:	4b55      	ldr	r3, [pc, #340]	@ (8005764 <update_control_loops+0x7f0>)
 8005610:	edc3 7a00 	vstr	s15, [r3]

	float rev_backlash_compensation = revolute_backlash_compensator(rev_cmd_vx);
 8005614:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <update_control_loops+0x79c>)
 8005616:	edd3 7a00 	vldr	s15, [r3]
 800561a:	eeb0 0a67 	vmov.f32	s0, s15
 800561e:	f000 f94d 	bl	80058bc <revolute_backlash_compensator>
 8005622:	ed87 0a06 	vstr	s0, [r7, #24]

	rev_cmd_ux = rev_cmd_ux + rev_backlash_compensation + rev_dfd + rev_ffd;
 8005626:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <update_control_loops+0x7b0>)
 8005628:	ed93 7a00 	vldr	s14, [r3]
 800562c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005634:	4b49      	ldr	r3, [pc, #292]	@ (800575c <update_control_loops+0x7e8>)
 8005636:	edd3 7a00 	vldr	s15, [r3]
 800563a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800563e:	4b49      	ldr	r3, [pc, #292]	@ (8005764 <update_control_loops+0x7f0>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005648:	4b36      	ldr	r3, [pc, #216]	@ (8005724 <update_control_loops+0x7b0>)
 800564a:	edc3 7a00 	vstr	s15, [r3]

	// Final saturation
	pris_cmd_ux = PWM_Satuation(pris_cmd_ux, ZGX45RGG_400RPM_Constant.U_max,
 800564e:	4b40      	ldr	r3, [pc, #256]	@ (8005750 <update_control_loops+0x7dc>)
 8005650:	ed93 8a00 	vldr	s16, [r3]
 8005654:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <update_control_loops+0x7f4>)
 8005656:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	f7fb fa31 	bl	8000ac4 <__aeabi_d2iz>
 8005662:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8005664:	4b40      	ldr	r3, [pc, #256]	@ (8005768 <update_control_loops+0x7f4>)
 8005666:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800566a:	4615      	mov	r5, r2
 800566c:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	pris_cmd_ux = PWM_Satuation(pris_cmd_ux, ZGX45RGG_400RPM_Constant.U_max,
 8005670:	4628      	mov	r0, r5
 8005672:	4631      	mov	r1, r6
 8005674:	f7fb fa26 	bl	8000ac4 <__aeabi_d2iz>
 8005678:	4603      	mov	r3, r0
 800567a:	4619      	mov	r1, r3
 800567c:	4620      	mov	r0, r4
 800567e:	eeb0 0a48 	vmov.f32	s0, s16
 8005682:	f7fb fd67 	bl	8001154 <PWM_Satuation>
 8005686:	ee07 0a90 	vmov	s15, r0
 800568a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568e:	4b30      	ldr	r3, [pc, #192]	@ (8005750 <update_control_loops+0x7dc>)
 8005690:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 8005694:	4b23      	ldr	r3, [pc, #140]	@ (8005724 <update_control_loops+0x7b0>)
 8005696:	ed93 8a00 	vldr	s16, [r3]
 800569a:	4b21      	ldr	r3, [pc, #132]	@ (8005720 <update_control_loops+0x7ac>)
 800569c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	f7fb fa0e 	bl	8000ac4 <__aeabi_d2iz>
 80056a8:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80056aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <update_control_loops+0x7ac>)
 80056ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80056b0:	4692      	mov	sl, r2
 80056b2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 80056b6:	4650      	mov	r0, sl
 80056b8:	4659      	mov	r1, fp
 80056ba:	f7fb fa03 	bl	8000ac4 <__aeabi_d2iz>
 80056be:	4603      	mov	r3, r0
 80056c0:	4619      	mov	r1, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	eeb0 0a48 	vmov.f32	s0, s16
 80056c8:	f7fb fd44 	bl	8001154 <PWM_Satuation>
 80056cc:	ee07 0a90 	vmov	s15, r0
 80056d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d4:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <update_control_loops+0x7b0>)
 80056d6:	edc3 7a00 	vstr	s15, [r3]

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
 80056da:	4b1d      	ldr	r3, [pc, #116]	@ (8005750 <update_control_loops+0x7dc>)
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	eef0 0a67 	vmov.f32	s1, s15
 80056e4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800576c <update_control_loops+0x7f8>
 80056e8:	4821      	ldr	r0, [pc, #132]	@ (8005770 <update_control_loops+0x7fc>)
 80056ea:	f7fb fe4b 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 80056ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <update_control_loops+0x7b0>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	eef0 0a67 	vmov.f32	s1, s15
 80056f8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800576c <update_control_loops+0x7f8>
 80056fc:	481d      	ldr	r0, [pc, #116]	@ (8005774 <update_control_loops+0x800>)
 80056fe:	f7fb fe41 	bl	8001384 <MDXX_set_range>
//		if (timer_count > 500) {
//			plotter_pen_down();
//			timer_count = 0;
//		}
//	}
}
 8005702:	bf00      	nop
 8005704:	3724      	adds	r7, #36	@ 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	ecbd 8b02 	vpop	{d8}
 800570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005710:	200002e8 	.word	0x200002e8
 8005714:	200002dc 	.word	0x200002dc
 8005718:	200002d8 	.word	0x200002d8
 800571c:	200004f4 	.word	0x200004f4
 8005720:	20000000 	.word	0x20000000
 8005724:	200002e4 	.word	0x200002e4
 8005728:	2000027c 	.word	0x2000027c
 800572c:	447a0000 	.word	0x447a0000
 8005730:	2000051c 	.word	0x2000051c
 8005734:	200002f8 	.word	0x200002f8
 8005738:	20000318 	.word	0x20000318
 800573c:	200002d0 	.word	0x200002d0
 8005740:	200003c4 	.word	0x200003c4
 8005744:	20000520 	.word	0x20000520
 8005748:	200002f4 	.word	0x200002f4
 800574c:	20000294 	.word	0x20000294
 8005750:	20000290 	.word	0x20000290
 8005754:	00000000 	.word	0x00000000
 8005758:	2000052c 	.word	0x2000052c
 800575c:	200002ec 	.word	0x200002ec
 8005760:	20000528 	.word	0x20000528
 8005764:	200002f0 	.word	0x200002f0
 8005768:	20000060 	.word	0x20000060
 800576c:	44fa0000 	.word	0x44fa0000
 8005770:	2000032c 	.word	0x2000032c
 8005774:	20000378 	.word	0x20000378

08005778 <prismatic_backlash_compensator>:

float prismatic_backlash_compensator(float cmd_vel) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Determine current direction
    float current_direction = (cmd_vel > 0.0f) ? 1.0f :
 8005782:	edd7 7a01 	vldr	s15, [r7, #4]
 8005786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578e:	dd02      	ble.n	8005796 <prismatic_backlash_compensator+0x1e>
 8005790:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005794:	e00a      	b.n	80057ac <prismatic_backlash_compensator+0x34>
                             ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 8005796:	edd7 7a01 	vldr	s15, [r7, #4]
 800579a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a2:	d501      	bpl.n	80057a8 <prismatic_backlash_compensator+0x30>
 80057a4:	4b3e      	ldr	r3, [pc, #248]	@ (80058a0 <prismatic_backlash_compensator+0x128>)
 80057a6:	e001      	b.n	80057ac <prismatic_backlash_compensator+0x34>
 80057a8:	f04f 0300 	mov.w	r3, #0
    float current_direction = (cmd_vel > 0.0f) ? 1.0f :
 80057ac:	617b      	str	r3, [r7, #20]

    // If stopped, maintain last direction
    if (current_direction == 0.0f) {
 80057ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80057b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ba:	d102      	bne.n	80057c2 <prismatic_backlash_compensator+0x4a>
        current_direction = prismatic_last_cmd_direction;
 80057bc:	4b39      	ldr	r3, [pc, #228]	@ (80058a4 <prismatic_backlash_compensator+0x12c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	617b      	str	r3, [r7, #20]
    }

    // Detect direction change
    if (current_direction != prismatic_last_cmd_direction && current_direction != 0.0f) {
 80057c2:	4b38      	ldr	r3, [pc, #224]	@ (80058a4 <prismatic_backlash_compensator+0x12c>)
 80057c4:	edd3 7a00 	vldr	s15, [r3]
 80057c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80057cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	d013      	beq.n	80057fe <prismatic_backlash_compensator+0x86>
 80057d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80057da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	d00c      	beq.n	80057fe <prismatic_backlash_compensator+0x86>
        // If direction changed, update backlash state
        prismatic_backlash_state = current_direction * prismatic_backlash;
 80057e4:	4b30      	ldr	r3, [pc, #192]	@ (80058a8 <prismatic_backlash_compensator+0x130>)
 80057e6:	ed93 7a00 	vldr	s14, [r3]
 80057ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	4b2e      	ldr	r3, [pc, #184]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 80057f4:	edc3 7a00 	vstr	s15, [r3]
        prismatic_last_cmd_direction = current_direction;
 80057f8:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <prismatic_backlash_compensator+0x12c>)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6013      	str	r3, [r2, #0]
    }

    // Apply adaptive compensation based on velocity
    float compensation = prismatic_backlash_state * PRISMATIC_BACKLASH_COMPENSATION_GAIN;
 80057fe:	4b2b      	ldr	r3, [pc, #172]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 8005800:	edd3 7a00 	vldr	s15, [r3]
 8005804:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80058b0 <prismatic_backlash_compensator+0x138>
 8005808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800580c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Gradually reduce backlash state as we overcome the backlash
    // This simulates the physical process of taking up the slack
    float backlash_decay_rate = 0.01f * fabsf(cmd_vel); // Proportional to velocity
 8005810:	edd7 7a01 	vldr	s15, [r7, #4]
 8005814:	eef0 7ae7 	vabs.f32	s15, s15
 8005818:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80058b4 <prismatic_backlash_compensator+0x13c>
 800581c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005820:	edc7 7a03 	vstr	s15, [r7, #12]
    if (prismatic_backlash_state > 0.0f) {
 8005824:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 8005826:	edd3 7a00 	vldr	s15, [r3]
 800582a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	dd12      	ble.n	800585a <prismatic_backlash_compensator+0xe2>
        prismatic_backlash_state = fmaxf(0.0f, prismatic_backlash_state - backlash_decay_rate);
 8005834:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 8005836:	ed93 7a00 	vldr	s14, [r3]
 800583a:	edd7 7a03 	vldr	s15, [r7, #12]
 800583e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005842:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80058b8 <prismatic_backlash_compensator+0x140>
 8005846:	eeb0 0a67 	vmov.f32	s0, s15
 800584a:	f009 fc5d 	bl	800f108 <fmaxf>
 800584e:	eef0 7a40 	vmov.f32	s15, s0
 8005852:	4b16      	ldr	r3, [pc, #88]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 8005854:	edc3 7a00 	vstr	s15, [r3]
 8005858:	e019      	b.n	800588e <prismatic_backlash_compensator+0x116>
    } else if (prismatic_backlash_state < 0.0f) {
 800585a:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 800585c:	edd3 7a00 	vldr	s15, [r3]
 8005860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	d511      	bpl.n	800588e <prismatic_backlash_compensator+0x116>
        prismatic_backlash_state = fminf(0.0f, prismatic_backlash_state + backlash_decay_rate);
 800586a:	4b10      	ldr	r3, [pc, #64]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 800586c:	ed93 7a00 	vldr	s14, [r3]
 8005870:	edd7 7a03 	vldr	s15, [r7, #12]
 8005874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005878:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80058b8 <prismatic_backlash_compensator+0x140>
 800587c:	eeb0 0a67 	vmov.f32	s0, s15
 8005880:	f009 fc5f 	bl	800f142 <fminf>
 8005884:	eef0 7a40 	vmov.f32	s15, s0
 8005888:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <prismatic_backlash_compensator+0x134>)
 800588a:	edc3 7a00 	vstr	s15, [r3]
    }

    return compensation;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	ee07 3a90 	vmov	s15, r3
}
 8005894:	eeb0 0a67 	vmov.f32	s0, s15
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	bf800000 	.word	0xbf800000
 80058a4:	20000308 	.word	0x20000308
 80058a8:	200000f4 	.word	0x200000f4
 80058ac:	2000030c 	.word	0x2000030c
 80058b0:	3dcccccd 	.word	0x3dcccccd
 80058b4:	3c23d70a 	.word	0x3c23d70a
 80058b8:	00000000 	.word	0x00000000

080058bc <revolute_backlash_compensator>:

float revolute_backlash_compensator(float cmd_vel) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Determine current direction
    float current_direction = (cmd_vel > 0.0f) ? 1.0f :
 80058c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	dd02      	ble.n	80058da <revolute_backlash_compensator+0x1e>
 80058d4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80058d8:	e00a      	b.n	80058f0 <revolute_backlash_compensator+0x34>
                             ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 80058da:	edd7 7a01 	vldr	s15, [r7, #4]
 80058de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e6:	d501      	bpl.n	80058ec <revolute_backlash_compensator+0x30>
 80058e8:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <revolute_backlash_compensator+0x128>)
 80058ea:	e001      	b.n	80058f0 <revolute_backlash_compensator+0x34>
 80058ec:	f04f 0300 	mov.w	r3, #0
    float current_direction = (cmd_vel > 0.0f) ? 1.0f :
 80058f0:	617b      	str	r3, [r7, #20]

    // If stopped, maintain last direction
    if (current_direction == 0.0f) {
 80058f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80058f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	d102      	bne.n	8005906 <revolute_backlash_compensator+0x4a>
        current_direction = revolute_last_cmd_direction;
 8005900:	4b39      	ldr	r3, [pc, #228]	@ (80059e8 <revolute_backlash_compensator+0x12c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	617b      	str	r3, [r7, #20]
    }

    // Detect direction change
    if (current_direction != revolute_last_cmd_direction && current_direction != 0.0f) {
 8005906:	4b38      	ldr	r3, [pc, #224]	@ (80059e8 <revolute_backlash_compensator+0x12c>)
 8005908:	edd3 7a00 	vldr	s15, [r3]
 800590c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005910:	eeb4 7a67 	vcmp.f32	s14, s15
 8005914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005918:	d013      	beq.n	8005942 <revolute_backlash_compensator+0x86>
 800591a:	edd7 7a05 	vldr	s15, [r7, #20]
 800591e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	d00c      	beq.n	8005942 <revolute_backlash_compensator+0x86>
        // If direction changed, update backlash state
        revolute_backlash_state = current_direction * revolute_backlash;
 8005928:	4b30      	ldr	r3, [pc, #192]	@ (80059ec <revolute_backlash_compensator+0x130>)
 800592a:	ed93 7a00 	vldr	s14, [r3]
 800592e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005936:	4b2e      	ldr	r3, [pc, #184]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 8005938:	edc3 7a00 	vstr	s15, [r3]
        revolute_last_cmd_direction = current_direction;
 800593c:	4a2a      	ldr	r2, [pc, #168]	@ (80059e8 <revolute_backlash_compensator+0x12c>)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6013      	str	r3, [r2, #0]
    }

    // Apply adaptive compensation based on velocity
    float compensation = revolute_backlash_state * BACKLASH_COMPENSATION_GAIN;
 8005942:	4b2b      	ldr	r3, [pc, #172]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 8005944:	edd3 7a00 	vldr	s15, [r3]
 8005948:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80059f4 <revolute_backlash_compensator+0x138>
 800594c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005950:	edc7 7a04 	vstr	s15, [r7, #16]

    // Gradually reduce backlash state as we overcome the backlash
    // This simulates the physical process of taking up the slack
    float backlash_decay_rate = 0.01f * fabsf(cmd_vel); // Proportional to velocity
 8005954:	edd7 7a01 	vldr	s15, [r7, #4]
 8005958:	eef0 7ae7 	vabs.f32	s15, s15
 800595c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80059f8 <revolute_backlash_compensator+0x13c>
 8005960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005964:	edc7 7a03 	vstr	s15, [r7, #12]
    if (revolute_backlash_state > 0.0f) {
 8005968:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 800596a:	edd3 7a00 	vldr	s15, [r3]
 800596e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005976:	dd12      	ble.n	800599e <revolute_backlash_compensator+0xe2>
        revolute_backlash_state = fmaxf(0.0f, revolute_backlash_state - backlash_decay_rate);
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 800597a:	ed93 7a00 	vldr	s14, [r3]
 800597e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005986:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80059fc <revolute_backlash_compensator+0x140>
 800598a:	eeb0 0a67 	vmov.f32	s0, s15
 800598e:	f009 fbbb 	bl	800f108 <fmaxf>
 8005992:	eef0 7a40 	vmov.f32	s15, s0
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 8005998:	edc3 7a00 	vstr	s15, [r3]
 800599c:	e019      	b.n	80059d2 <revolute_backlash_compensator+0x116>
    } else if (revolute_backlash_state < 0.0f) {
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 80059a0:	edd3 7a00 	vldr	s15, [r3]
 80059a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	d511      	bpl.n	80059d2 <revolute_backlash_compensator+0x116>
        revolute_backlash_state = fminf(0.0f, revolute_backlash_state + backlash_decay_rate);
 80059ae:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 80059b0:	ed93 7a00 	vldr	s14, [r3]
 80059b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80059b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059bc:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80059fc <revolute_backlash_compensator+0x140>
 80059c0:	eeb0 0a67 	vmov.f32	s0, s15
 80059c4:	f009 fbbd 	bl	800f142 <fminf>
 80059c8:	eef0 7a40 	vmov.f32	s15, s0
 80059cc:	4b08      	ldr	r3, [pc, #32]	@ (80059f0 <revolute_backlash_compensator+0x134>)
 80059ce:	edc3 7a00 	vstr	s15, [r3]
    }

    return compensation;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	ee07 3a90 	vmov	s15, r3
}
 80059d8:	eeb0 0a67 	vmov.f32	s0, s15
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	bf800000 	.word	0xbf800000
 80059e8:	20000300 	.word	0x20000300
 80059ec:	200000f0 	.word	0x200000f0
 80059f0:	20000304 	.word	0x20000304
 80059f4:	3e4ccccd 	.word	0x3e4ccccd
 80059f8:	3c23d70a 	.word	0x3c23d70a
 80059fc:	00000000 	.word	0x00000000

08005a00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d105      	bne.n	8005a1c <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8005a10:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <HAL_GPIO_EXTI_Callback+0x28>)
 8005a12:	2205      	movs	r2, #5
 8005a14:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	200000f8 	.word	0x200000f8
 8005a2c:	200000fb 	.word	0x200000fb

08005a30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a56      	ldr	r2, [pc, #344]	@ (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	f040 80a5 	bne.w	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
		plotter_update_sensors();
 8005a56:	f000 fc69 	bl	800632c <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8005a5a:	4854      	ldr	r0, [pc, #336]	@ (8005bac <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a5c:	f7fd ff04 	bl	8003868 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8005a60:	4852      	ldr	r0, [pc, #328]	@ (8005bac <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a62:	f7fd ffed 	bl	8003a40 <QEI_compute_data>

		QEI_get_diff_count(&revolute_encoder);
 8005a66:	4852      	ldr	r0, [pc, #328]	@ (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005a68:	f7fd fefe 	bl	8003868 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8005a6c:	4850      	ldr	r0, [pc, #320]	@ (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005a6e:	f7fd ffe7 	bl	8003a40 <QEI_compute_data>

		// Process homing sequence
		if (home > 0) {
 8005a72:	4b50      	ldr	r3, [pc, #320]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f340 8090 	ble.w	8005b9c <HAL_TIM_PeriodElapsedCallback+0x158>
			homing_in_progress = true;
 8005a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]

			if (home == 1) {
 8005a82:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d115      	bne.n	8005ab6 <HAL_TIM_PeriodElapsedCallback+0x72>
				// Move prismatic motor down to lower limit
				MDXX_set_range(&prismatic_motor, 2000, 10000);
 8005a8a:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005bbc <HAL_TIM_PeriodElapsedCallback+0x178>
 8005a8e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005a92:	484c      	ldr	r0, [pc, #304]	@ (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005a94:	f7fb fc76 	bl	8001384 <MDXX_set_range>

				if (low_photo) {
 8005a98:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d07f      	beq.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
					home = 2;
 8005aa0:	4b44      	ldr	r3, [pc, #272]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	601a      	str	r2, [r3, #0]
					MDXX_set_range(&prismatic_motor, 2000, 0);
 8005aa6:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8005bcc <HAL_TIM_PeriodElapsedCallback+0x188>
 8005aaa:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005aae:	4845      	ldr	r0, [pc, #276]	@ (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005ab0:	f7fb fc68 	bl	8001384 <MDXX_set_range>
			}
		} else {
			update_control_loops();
		}
	}
}
 8005ab4:	e074      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 2) {
 8005ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d147      	bne.n	8005b4e <HAL_TIM_PeriodElapsedCallback+0x10a>
				if (!initialized) {
 8005abe:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f083 0301 	eor.w	r3, r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <HAL_TIM_PeriodElapsedCallback+0xa6>
					prox_previous = prox;
 8005acc:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005adc:	701a      	strb	r2, [r3, #0]
					prox_count = 0;
 8005ade:	4b3f      	ldr	r3, [pc, #252]	@ (8005bdc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
					initialized = true;
 8005ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
				MDXX_set_range(&revolute_motor, 2000, 12000);
 8005aea:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8005be0 <HAL_TIM_PeriodElapsedCallback+0x19c>
 8005aee:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005af2:	483c      	ldr	r0, [pc, #240]	@ (8005be4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8005af4:	f7fb fc46 	bl	8001384 <MDXX_set_range>
				if (prox && !prox_previous) {
 8005af8:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8005b00:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f083 0301 	eor.w	r3, r3, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_PeriodElapsedCallback+0xd4>
					prox_count++;
 8005b0e:	4b33      	ldr	r3, [pc, #204]	@ (8005bdc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a31      	ldr	r2, [pc, #196]	@ (8005bdc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005b16:	6013      	str	r3, [r2, #0]
				prox_previous = prox;
 8005b18:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005b28:	701a      	strb	r2, [r3, #0]
				if (prox_count >= 1) {
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bdc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dd36      	ble.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
					MDXX_set_range(&revolute_motor, 2000, 0);
 8005b32:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8005bcc <HAL_TIM_PeriodElapsedCallback+0x188>
 8005b36:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005b3a:	482a      	ldr	r0, [pc, #168]	@ (8005be4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8005b3c:	f7fb fc22 	bl	8001384 <MDXX_set_range>
					initialized = false;  // Reset for next time
 8005b40:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
					home = 3;
 8005b46:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b48:	2203      	movs	r2, #3
 8005b4a:	601a      	str	r2, [r3, #0]
}
 8005b4c:	e028      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 3) {
 8005b4e:	4b19      	ldr	r3, [pc, #100]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d115      	bne.n	8005b82 <HAL_TIM_PeriodElapsedCallback+0x13e>
				MDXX_set_range(&prismatic_motor, 2000, -10000);
 8005b56:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8005be8 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8005b5a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005b5e:	4819      	ldr	r0, [pc, #100]	@ (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005b60:	f7fb fc10 	bl	8001384 <MDXX_set_range>
				if (up_photo) {
 8005b64:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d019      	beq.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
					MDXX_set_range(&prismatic_motor, 2000, 0);
 8005b6c:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8005bcc <HAL_TIM_PeriodElapsedCallback+0x188>
 8005b70:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8005bc0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005b74:	4813      	ldr	r0, [pc, #76]	@ (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005b76:	f7fb fc05 	bl	8001384 <MDXX_set_range>
					home = 4;
 8005b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	e00e      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 4) {
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d10a      	bne.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
				plotter_reset();
 8005b8a:	f000 fbc1 	bl	8006310 <plotter_reset>
				home = 0;
 8005b8e:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
				homing_in_progress = false;
 8005b94:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
}
 8005b9a:	e001      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x15c>
			update_control_loops();
 8005b9c:	f7ff f9ea 	bl	8004f74 <update_control_loops>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20001920 	.word	0x20001920
 8005bac:	200003c4 	.word	0x200003c4
 8005bb0:	20000420 	.word	0x20000420
 8005bb4:	20000310 	.word	0x20000310
 8005bb8:	200002fc 	.word	0x200002fc
 8005bbc:	461c4000 	.word	0x461c4000
 8005bc0:	44fa0000 	.word	0x44fa0000
 8005bc4:	2000032c 	.word	0x2000032c
 8005bc8:	20001834 	.word	0x20001834
 8005bcc:	00000000 	.word	0x00000000
 8005bd0:	20000320 	.word	0x20000320
 8005bd4:	20001828 	.word	0x20001828
 8005bd8:	20000321 	.word	0x20000321
 8005bdc:	20000324 	.word	0x20000324
 8005be0:	463b8000 	.word	0x463b8000
 8005be4:	20000378 	.word	0x20000378
 8005be8:	c61c4000 	.word	0xc61c4000
 8005bec:	20001830 	.word	0x20001830

08005bf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf4:	b672      	cpsid	i
}
 8005bf6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <Error_Handler+0x8>
 8005bfc:	0000      	movs	r0, r0
	...

08005c00 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8005c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c04:	ed2d 8b02 	vpush	{d8}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005c0c:	4bc8      	ldr	r3, [pc, #800]	@ (8005f30 <plotter_begin+0x330>)
 8005c0e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8005c12:	4bc8      	ldr	r3, [pc, #800]	@ (8005f34 <plotter_begin+0x334>)
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fc62 	bl	80004e0 <__aeabi_f2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa fcb4 	bl	8000590 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	4bc0      	ldr	r3, [pc, #768]	@ (8005f38 <plotter_begin+0x338>)
 8005c36:	f7fa fcab 	bl	8000590 <__aeabi_dmul>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005c3e:	49bc      	ldr	r1, [pc, #752]	@ (8005f30 <plotter_begin+0x330>)
 8005c40:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8005c44:	4bba      	ldr	r3, [pc, #744]	@ (8005f30 <plotter_begin+0x330>)
 8005c46:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	4bbb      	ldr	r3, [pc, #748]	@ (8005f3c <plotter_begin+0x33c>)
 8005c50:	f7fa fc9e 	bl	8000590 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	49b5      	ldr	r1, [pc, #724]	@ (8005f30 <plotter_begin+0x330>)
 8005c5a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.3;
 8005c5e:	4bb8      	ldr	r3, [pc, #736]	@ (8005f40 <plotter_begin+0x340>)
 8005c60:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005c64:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005f18 <plotter_begin+0x318>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fc91 	bl	8000590 <__aeabi_dmul>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005f20 <plotter_begin+0x320>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fc88 	bl	8000590 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	49ae      	ldr	r1, [pc, #696]	@ (8005f40 <plotter_begin+0x340>)
 8005c86:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8005c8a:	4bad      	ldr	r3, [pc, #692]	@ (8005f40 <plotter_begin+0x340>)
 8005c8c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005c90:	a3a5      	add	r3, pc, #660	@ (adr r3, 8005f28 <plotter_begin+0x328>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fc7b 	bl	8000590 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	49a8      	ldr	r1, [pc, #672]	@ (8005f40 <plotter_begin+0x340>)
 8005ca0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	48a7      	ldr	r0, [pc, #668]	@ (8005f44 <plotter_begin+0x344>)
 8005ca8:	f000 fc2e 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005cac:	eddf 2aa6 	vldr	s5, [pc, #664]	@ 8005f48 <plotter_begin+0x348>
 8005cb0:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 8005f4c <plotter_begin+0x34c>
 8005cb4:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 8005f84 <plotter_begin+0x384>
 8005cb8:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8005f84 <plotter_begin+0x384>
 8005cbc:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8005f50 <plotter_begin+0x350>
 8005cc0:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8005f48 <plotter_begin+0x348>
 8005cc4:	489f      	ldr	r0, [pc, #636]	@ (8005f44 <plotter_begin+0x344>)
 8005cc6:	f000 fc7d 	bl	80065c4 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8005cca:	2102      	movs	r1, #2
 8005ccc:	48a1      	ldr	r0, [pc, #644]	@ (8005f54 <plotter_begin+0x354>)
 8005cce:	f000 fc1b 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8005cd2:	ed9f 3a9d 	vldr	s6, [pc, #628]	@ 8005f48 <plotter_begin+0x348>
 8005cd6:	eddf 2a9d 	vldr	s5, [pc, #628]	@ 8005f4c <plotter_begin+0x34c>
 8005cda:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8005f84 <plotter_begin+0x384>
 8005cde:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8005f84 <plotter_begin+0x384>
 8005ce2:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005ce6:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8005f50 <plotter_begin+0x350>
 8005cea:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8005f48 <plotter_begin+0x348>
 8005cee:	4899      	ldr	r0, [pc, #612]	@ (8005f54 <plotter_begin+0x354>)
 8005cf0:	f000 fc93 	bl	800661a <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4898      	ldr	r0, [pc, #608]	@ (8005f58 <plotter_begin+0x358>)
 8005cf8:	f000 fc06 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8005cfc:	eddf 2a97 	vldr	s5, [pc, #604]	@ 8005f5c <plotter_begin+0x35c>
 8005d00:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8005f60 <plotter_begin+0x360>
 8005d04:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 8005f84 <plotter_begin+0x384>
 8005d08:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8005f84 <plotter_begin+0x384>
 8005d0c:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8005f50 <plotter_begin+0x350>
 8005d10:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8005f5c <plotter_begin+0x35c>
 8005d14:	4890      	ldr	r0, [pc, #576]	@ (8005f58 <plotter_begin+0x358>)
 8005d16:	f000 fc55 	bl	80065c4 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4891      	ldr	r0, [pc, #580]	@ (8005f64 <plotter_begin+0x364>)
 8005d1e:	f000 fbf3 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8005d22:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8005d26:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8005d2a:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8005f84 <plotter_begin+0x384>
 8005d2e:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8005f84 <plotter_begin+0x384>
 8005d32:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005d36:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8005f50 <plotter_begin+0x350>
 8005d3a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005d3e:	4889      	ldr	r0, [pc, #548]	@ (8005f64 <plotter_begin+0x364>)
 8005d40:	f000 fc6b 	bl	800661a <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8005d44:	2100      	movs	r1, #0
 8005d46:	4888      	ldr	r0, [pc, #544]	@ (8005f68 <plotter_begin+0x368>)
 8005d48:	f000 fbde 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d4c:	4b78      	ldr	r3, [pc, #480]	@ (8005f30 <plotter_begin+0x330>)
 8005d4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa fefd 	bl	8000b54 <__aeabi_d2f>
 8005d5a:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005d5c:	4b74      	ldr	r3, [pc, #464]	@ (8005f30 <plotter_begin+0x330>)
 8005d5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d62:	4610      	mov	r0, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	f7fa fef5 	bl	8000b54 <__aeabi_d2f>
 8005d6a:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8005d74:	4b6e      	ldr	r3, [pc, #440]	@ (8005f30 <plotter_begin+0x330>)
 8005d76:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f7fa fee9 	bl	8000b54 <__aeabi_d2f>
 8005d82:	4603      	mov	r3, r0
 8005d84:	ee02 3a90 	vmov	s5, r3
 8005d88:	eeb0 2a48 	vmov.f32	s4, s16
 8005d8c:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8005f84 <plotter_begin+0x384>
 8005d90:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 8005f84 <plotter_begin+0x384>
 8005d94:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8005f50 <plotter_begin+0x350>
 8005d98:	ee00 4a10 	vmov	s0, r4
 8005d9c:	4872      	ldr	r0, [pc, #456]	@ (8005f68 <plotter_begin+0x368>)
 8005d9e:	f000 fc11 	bl	80065c4 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8005da2:	2102      	movs	r1, #2
 8005da4:	4871      	ldr	r0, [pc, #452]	@ (8005f6c <plotter_begin+0x36c>)
 8005da6:	f000 fbaf 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005daa:	4b61      	ldr	r3, [pc, #388]	@ (8005f30 <plotter_begin+0x330>)
 8005dac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	f7fa fece 	bl	8000b54 <__aeabi_d2f>
 8005db8:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005dba:	4b5d      	ldr	r3, [pc, #372]	@ (8005f30 <plotter_begin+0x330>)
 8005dbc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f7fa fec6 	bl	8000b54 <__aeabi_d2f>
 8005dc8:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005dd2:	4b57      	ldr	r3, [pc, #348]	@ (8005f30 <plotter_begin+0x330>)
 8005dd4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f7fa feba 	bl	8000b54 <__aeabi_d2f>
 8005de0:	4603      	mov	r3, r0
 8005de2:	ee03 3a10 	vmov	s6, r3
 8005de6:	eef0 2a48 	vmov.f32	s5, s16
 8005dea:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 8005f84 <plotter_begin+0x384>
 8005dee:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8005f84 <plotter_begin+0x384>
 8005df2:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005df6:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8005f50 <plotter_begin+0x350>
 8005dfa:	ee00 4a10 	vmov	s0, r4
 8005dfe:	485b      	ldr	r0, [pc, #364]	@ (8005f6c <plotter_begin+0x36c>)
 8005e00:	f000 fc0b 	bl	800661a <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8005e04:	2100      	movs	r1, #0
 8005e06:	485a      	ldr	r0, [pc, #360]	@ (8005f70 <plotter_begin+0x370>)
 8005e08:	f000 fb7e 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f40 <plotter_begin+0x340>)
 8005e0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa fe9d 	bl	8000b54 <__aeabi_d2f>
 8005e1a:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8005e1c:	4b48      	ldr	r3, [pc, #288]	@ (8005f40 <plotter_begin+0x340>)
 8005e1e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fa fe95 	bl	8000b54 <__aeabi_d2f>
 8005e2a:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8005e34:	4b42      	ldr	r3, [pc, #264]	@ (8005f40 <plotter_begin+0x340>)
 8005e36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fa fe89 	bl	8000b54 <__aeabi_d2f>
 8005e42:	4603      	mov	r3, r0
 8005e44:	ee02 3a90 	vmov	s5, r3
 8005e48:	eeb0 2a48 	vmov.f32	s4, s16
 8005e4c:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8005f84 <plotter_begin+0x384>
 8005e50:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 8005f84 <plotter_begin+0x384>
 8005e54:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8005f50 <plotter_begin+0x350>
 8005e58:	ee00 4a10 	vmov	s0, r4
 8005e5c:	4844      	ldr	r0, [pc, #272]	@ (8005f70 <plotter_begin+0x370>)
 8005e5e:	f000 fbb1 	bl	80065c4 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8005e62:	2102      	movs	r1, #2
 8005e64:	4843      	ldr	r0, [pc, #268]	@ (8005f74 <plotter_begin+0x374>)
 8005e66:	f000 fb4f 	bl	8006508 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e6a:	4b35      	ldr	r3, [pc, #212]	@ (8005f40 <plotter_begin+0x340>)
 8005e6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	f7fa fe6e 	bl	8000b54 <__aeabi_d2f>
 8005e78:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005e7a:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <plotter_begin+0x340>)
 8005e7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	f7fa fe66 	bl	8000b54 <__aeabi_d2f>
 8005e88:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005e92:	4b2b      	ldr	r3, [pc, #172]	@ (8005f40 <plotter_begin+0x340>)
 8005e94:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f7fa fe5a 	bl	8000b54 <__aeabi_d2f>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	ee03 3a10 	vmov	s6, r3
 8005ea6:	eef0 2a48 	vmov.f32	s5, s16
 8005eaa:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8005f84 <plotter_begin+0x384>
 8005eae:	eddf 1a35 	vldr	s3, [pc, #212]	@ 8005f84 <plotter_begin+0x384>
 8005eb2:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005eb6:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8005f50 <plotter_begin+0x350>
 8005eba:	ee00 4a10 	vmov	s0, r4
 8005ebe:	482d      	ldr	r0, [pc, #180]	@ (8005f74 <plotter_begin+0x374>)
 8005ec0:	f000 fbab 	bl	800661a <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8005ec4:	482c      	ldr	r0, [pc, #176]	@ (8005f78 <plotter_begin+0x378>)
 8005ec6:	f7fe faf1 	bl	80044ac <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8005eca:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <plotter_begin+0x334>)
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fa fb06 	bl	80004e0 <__aeabi_f2d>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	f7fa f9a4 	bl	8000224 <__adddf3>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	4b13      	ldr	r3, [pc, #76]	@ (8005f38 <plotter_begin+0x338>)
 8005eea:	f7fa fb51 	bl	8000590 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f7fa fe2d 	bl	8000b54 <__aeabi_d2f>
 8005efa:	4603      	mov	r3, r0
 8005efc:	ee00 3a90 	vmov	s1, r3
 8005f00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f0c:	491b      	ldr	r1, [pc, #108]	@ (8005f7c <plotter_begin+0x37c>)
 8005f0e:	481c      	ldr	r0, [pc, #112]	@ (8005f80 <plotter_begin+0x380>)
 8005f10:	f7fd fc38 	bl	8003784 <QEI_init>
 8005f14:	e038      	b.n	8005f88 <plotter_begin+0x388>
 8005f16:	bf00      	nop
 8005f18:	55555555 	.word	0x55555555
 8005f1c:	3fe55555 	.word	0x3fe55555
 8005f20:	33333333 	.word	0x33333333
 8005f24:	3fd33333 	.word	0x3fd33333
 8005f28:	9999999a 	.word	0x9999999a
 8005f2c:	3fd99999 	.word	0x3fd99999
 8005f30:	20000060 	.word	0x20000060
 8005f34:	200000c0 	.word	0x200000c0
 8005f38:	408f4000 	.word	0x408f4000
 8005f3c:	3fe00000 	.word	0x3fe00000
 8005f40:	20000000 	.word	0x20000000
 8005f44:	20000570 	.word	0x20000570
 8005f48:	477fff00 	.word	0x477fff00
 8005f4c:	c77fff00 	.word	0xc77fff00
 8005f50:	3dcccccd 	.word	0x3dcccccd
 8005f54:	200005b4 	.word	0x200005b4
 8005f58:	200005f8 	.word	0x200005f8
 8005f5c:	4083d70a 	.word	0x4083d70a
 8005f60:	c083d70a 	.word	0xc083d70a
 8005f64:	2000063c 	.word	0x2000063c
 8005f68:	20000680 	.word	0x20000680
 8005f6c:	200006c4 	.word	0x200006c4
 8005f70:	20000708 	.word	0x20000708
 8005f74:	2000074c 	.word	0x2000074c
 8005f78:	20000790 	.word	0x20000790
 8005f7c:	20001b84 	.word	0x20001b84
 8005f80:	200003c4 	.word	0x200003c4
 8005f84:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8005f88:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8005f84 <plotter_begin+0x384>
 8005f8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f98:	49ae      	ldr	r1, [pc, #696]	@ (8006254 <plotter_begin+0x654>)
 8005f9a:	48af      	ldr	r0, [pc, #700]	@ (8006258 <plotter_begin+0x658>)
 8005f9c:	f7fd fbf2 	bl	8003784 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8005fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005faa:	2204      	movs	r2, #4
 8005fac:	49ab      	ldr	r1, [pc, #684]	@ (800625c <plotter_begin+0x65c>)
 8005fae:	48ac      	ldr	r0, [pc, #688]	@ (8006260 <plotter_begin+0x660>)
 8005fb0:	f7fb f9c4 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8005fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4baa      	ldr	r3, [pc, #680]	@ (8006264 <plotter_begin+0x664>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	49a7      	ldr	r1, [pc, #668]	@ (800625c <plotter_begin+0x65c>)
 8005fc0:	48a9      	ldr	r0, [pc, #676]	@ (8006268 <plotter_begin+0x668>)
 8005fc2:	f7fb f9bb 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8005fc6:	220c      	movs	r2, #12
 8005fc8:	49a8      	ldr	r1, [pc, #672]	@ (800626c <plotter_begin+0x66c>)
 8005fca:	48a9      	ldr	r0, [pc, #676]	@ (8006270 <plotter_begin+0x670>)
 8005fcc:	f7fd f9ae 	bl	800332c <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005fd0:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8006274 <plotter_begin+0x674>
 8005fd4:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8006278 <plotter_begin+0x678>
 8005fd8:	48a1      	ldr	r0, [pc, #644]	@ (8006260 <plotter_begin+0x660>)
 8005fda:	f7fb f9d3 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005fde:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8006274 <plotter_begin+0x674>
 8005fe2:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8006278 <plotter_begin+0x678>
 8005fe6:	48a0      	ldr	r0, [pc, #640]	@ (8006268 <plotter_begin+0x668>)
 8005fe8:	f7fb f9cc 	bl	8001384 <MDXX_set_range>
	plotter_pen_up();
 8005fec:	f000 fa7c 	bl	80064e8 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
			ZGX45RGG_400RPM_Constant.sd_max);
 8005ff0:	4ba2      	ldr	r3, [pc, #648]	@ (800627c <plotter_begin+0x67c>)
 8005ff2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7fa fdab 	bl	8000b54 <__aeabi_d2f>
 8005ffe:	4603      	mov	r3, r0
 8006000:	ee01 3a90 	vmov	s3, r3
 8006004:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8006280 <plotter_begin+0x680>
 8006008:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8006284 <plotter_begin+0x684>
 800600c:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8006280 <plotter_begin+0x680>
 8006010:	489d      	ldr	r0, [pc, #628]	@ (8006288 <plotter_begin+0x688>)
 8006012:	f7fb f8ce 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8006016:	4b99      	ldr	r3, [pc, #612]	@ (800627c <plotter_begin+0x67c>)
 8006018:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f7fa fd98 	bl	8000b54 <__aeabi_d2f>
 8006024:	4603      	mov	r3, r0
 8006026:	ee01 3a90 	vmov	s3, r3
 800602a:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8006274 <plotter_begin+0x674>
 800602e:	eddf 0a97 	vldr	s1, [pc, #604]	@ 800628c <plotter_begin+0x68c>
 8006032:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8006290 <plotter_begin+0x690>
 8006036:	4897      	ldr	r0, [pc, #604]	@ (8006294 <plotter_begin+0x694>)
 8006038:	f7fb f8bb 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
			ZGX45RGG_150RPM_Constant.qd_max);
 800603c:	4b96      	ldr	r3, [pc, #600]	@ (8006298 <plotter_begin+0x698>)
 800603e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	f7fa fd85 	bl	8000b54 <__aeabi_d2f>
 800604a:	4603      	mov	r3, r0
 800604c:	ee01 3a90 	vmov	s3, r3
 8006050:	eeb3 1a09 	vmov.f32	s2, #57	@ 0x41c80000  25.0
 8006054:	eddf 0a91 	vldr	s1, [pc, #580]	@ 800629c <plotter_begin+0x69c>
 8006058:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800605c:	4890      	ldr	r0, [pc, #576]	@ (80062a0 <plotter_begin+0x6a0>)
 800605e:	f7fb f8a8 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8006062:	4b8d      	ldr	r3, [pc, #564]	@ (8006298 <plotter_begin+0x698>)
 8006064:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	f7fa fd72 	bl	8000b54 <__aeabi_d2f>
 8006070:	4603      	mov	r3, r0
 8006072:	ee01 3a90 	vmov	s3, r3
 8006076:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 8006274 <plotter_begin+0x674>
 800607a:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 80062a4 <plotter_begin+0x6a4>
 800607e:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80062a8 <plotter_begin+0x6a8>
 8006082:	488a      	ldr	r0, [pc, #552]	@ (80062ac <plotter_begin+0x6ac>)
 8006084:	f7fb f895 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8006088:	4983      	ldr	r1, [pc, #524]	@ (8006298 <plotter_begin+0x698>)
 800608a:	4889      	ldr	r0, [pc, #548]	@ (80062b0 <plotter_begin+0x6b0>)
 800608c:	f7fb fa54 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8006090:	497a      	ldr	r1, [pc, #488]	@ (800627c <plotter_begin+0x67c>)
 8006092:	4888      	ldr	r0, [pc, #544]	@ (80062b4 <plotter_begin+0x6b4>)
 8006094:	f7fb fbe0 	bl	8001858 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8006098:	4a87      	ldr	r2, [pc, #540]	@ (80062b8 <plotter_begin+0x6b8>)
 800609a:	497f      	ldr	r1, [pc, #508]	@ (8006298 <plotter_begin+0x698>)
 800609c:	4887      	ldr	r0, [pc, #540]	@ (80062bc <plotter_begin+0x6bc>)
 800609e:	f7fb fada 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80060a2:	4a85      	ldr	r2, [pc, #532]	@ (80062b8 <plotter_begin+0x6b8>)
 80060a4:	4975      	ldr	r1, [pc, #468]	@ (800627c <plotter_begin+0x67c>)
 80060a6:	4886      	ldr	r0, [pc, #536]	@ (80062c0 <plotter_begin+0x6c0>)
 80060a8:	f7fb fc65 	bl	8001976 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80060ac:	2302      	movs	r3, #2
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80062c4 <plotter_begin+0x6c4>
 80060b4:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80062c8 <plotter_begin+0x6c8>
 80060b8:	2364      	movs	r3, #100	@ 0x64
 80060ba:	4a84      	ldr	r2, [pc, #528]	@ (80062cc <plotter_begin+0x6cc>)
 80060bc:	4984      	ldr	r1, [pc, #528]	@ (80062d0 <plotter_begin+0x6d0>)
 80060be:	4885      	ldr	r0, [pc, #532]	@ (80062d4 <plotter_begin+0x6d4>)
 80060c0:	f7fa ff2e 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80060c4:	2105      	movs	r1, #5
 80060c6:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80062d8 <plotter_begin+0x6d8>
 80060ca:	4882      	ldr	r0, [pc, #520]	@ (80062d4 <plotter_begin+0x6d4>)
 80060cc:	f7fa ffda 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80060d0:	4880      	ldr	r0, [pc, #512]	@ (80062d4 <plotter_begin+0x6d4>)
 80060d2:	f7fa ff7d 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80060d6:	eddf 0a81 	vldr	s1, [pc, #516]	@ 80062dc <plotter_begin+0x6dc>
 80060da:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060de:	211f      	movs	r1, #31
 80060e0:	487f      	ldr	r0, [pc, #508]	@ (80062e0 <plotter_begin+0x6e0>)
 80060e2:	f7fb fd0f 	bl	8001b04 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80060e6:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 80062dc <plotter_begin+0x6dc>
 80060ea:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060ee:	211f      	movs	r1, #31
 80060f0:	487c      	ldr	r0, [pc, #496]	@ (80062e4 <plotter_begin+0x6e4>)
 80060f2:	f7fb fd07 	bl	8001b04 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80060f6:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80062dc <plotter_begin+0x6dc>
 80060fa:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060fe:	211f      	movs	r1, #31
 8006100:	4879      	ldr	r0, [pc, #484]	@ (80062e8 <plotter_begin+0x6e8>)
 8006102:	f7fb fcff 	bl	8001b04 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8006106:	eddf 0a75 	vldr	s1, [pc, #468]	@ 80062dc <plotter_begin+0x6dc>
 800610a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800610e:	211f      	movs	r1, #31
 8006110:	4876      	ldr	r0, [pc, #472]	@ (80062ec <plotter_begin+0x6ec>)
 8006112:	f7fb fcf7 	bl	8001b04 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006116:	4b59      	ldr	r3, [pc, #356]	@ (800627c <plotter_begin+0x67c>)
 8006118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	f7fa fd18 	bl	8000b54 <__aeabi_d2f>
 8006124:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8006126:	4b55      	ldr	r3, [pc, #340]	@ (800627c <plotter_begin+0x67c>)
 8006128:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800612c:	4610      	mov	r0, r2
 800612e:	4619      	mov	r1, r3
 8006130:	f7fa fd10 	bl	8000b54 <__aeabi_d2f>
 8006134:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8006136:	4b51      	ldr	r3, [pc, #324]	@ (800627c <plotter_begin+0x67c>)
 8006138:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	f7fa fd08 	bl	8000b54 <__aeabi_d2f>
 8006144:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8006146:	4b4d      	ldr	r3, [pc, #308]	@ (800627c <plotter_begin+0x67c>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	f7fa fd00 	bl	8000b54 <__aeabi_d2f>
 8006154:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8006156:	4b49      	ldr	r3, [pc, #292]	@ (800627c <plotter_begin+0x67c>)
 8006158:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	f7fa fcf8 	bl	8000b54 <__aeabi_d2f>
 8006164:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8006166:	4b45      	ldr	r3, [pc, #276]	@ (800627c <plotter_begin+0x67c>)
 8006168:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800616c:	4610      	mov	r0, r2
 800616e:	4619      	mov	r1, r3
 8006170:	f7fa fcf0 	bl	8000b54 <__aeabi_d2f>
 8006174:	4603      	mov	r3, r0
 8006176:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800617a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800617e:	ee03 3a10 	vmov	s6, r3
 8006182:	ee02 9a90 	vmov	s5, r9
 8006186:	ee02 8a10 	vmov	s4, r8
 800618a:	ee01 6a90 	vmov	s3, r6
 800618e:	ee01 5a10 	vmov	s2, r5
 8006192:	ee00 4a90 	vmov	s1, r4
 8006196:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 80062f0 <plotter_begin+0x6f0>
 800619a:	4856      	ldr	r0, [pc, #344]	@ (80062f4 <plotter_begin+0x6f4>)
 800619c:	f7fb feb2 	bl	8001f04 <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006298 <plotter_begin+0x698>)
 80061a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fa fcd3 	bl	8000b54 <__aeabi_d2f>
 80061ae:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 80061b0:	4b39      	ldr	r3, [pc, #228]	@ (8006298 <plotter_begin+0x698>)
 80061b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa fccb 	bl	8000b54 <__aeabi_d2f>
 80061be:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 80061c0:	4b35      	ldr	r3, [pc, #212]	@ (8006298 <plotter_begin+0x698>)
 80061c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fa fcc3 	bl	8000b54 <__aeabi_d2f>
 80061ce:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80061d0:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <plotter_begin+0x698>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061d6:	4610      	mov	r0, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	f7fa fcbb 	bl	8000b54 <__aeabi_d2f>
 80061de:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <plotter_begin+0x698>)
 80061e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fa fcb3 	bl	8000b54 <__aeabi_d2f>
 80061ee:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 80061f0:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <plotter_begin+0x698>)
 80061f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	f7fa fcab 	bl	8000b54 <__aeabi_d2f>
 80061fe:	4603      	mov	r3, r0
 8006200:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8006204:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8006208:	ee03 3a10 	vmov	s6, r3
 800620c:	ee02 9a90 	vmov	s5, r9
 8006210:	ee02 8a10 	vmov	s4, r8
 8006214:	ee01 6a90 	vmov	s3, r6
 8006218:	ee01 5a10 	vmov	s2, r5
 800621c:	ee00 4a90 	vmov	s1, r4
 8006220:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80062f0 <plotter_begin+0x6f0>
 8006224:	4834      	ldr	r0, [pc, #208]	@ (80062f8 <plotter_begin+0x6f8>)
 8006226:	f7fb fe6d 	bl	8001f04 <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 800622a:	23c8      	movs	r3, #200	@ 0xc8
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	2315      	movs	r3, #21
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	4b32      	ldr	r3, [pc, #200]	@ (80062fc <plotter_begin+0x6fc>)
 8006234:	4a32      	ldr	r2, [pc, #200]	@ (8006300 <plotter_begin+0x700>)
 8006236:	4933      	ldr	r1, [pc, #204]	@ (8006304 <plotter_begin+0x704>)
 8006238:	4833      	ldr	r0, [pc, #204]	@ (8006308 <plotter_begin+0x708>)
 800623a:	f7fb fdfb 	bl	8001e34 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800623e:	4833      	ldr	r0, [pc, #204]	@ (800630c <plotter_begin+0x70c>)
 8006240:	f004 fdaa 	bl	800ad98 <HAL_TIM_Base_Start_IT>
}
 8006244:	bf00      	nop
 8006246:	3704      	adds	r7, #4
 8006248:	46bd      	mov	sp, r7
 800624a:	ecbd 8b02 	vpop	{d8}
 800624e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006252:	bf00      	nop
 8006254:	20001ab8 	.word	0x20001ab8
 8006258:	20000420 	.word	0x20000420
 800625c:	20001c50 	.word	0x20001c50
 8006260:	2000032c 	.word	0x2000032c
 8006264:	48000800 	.word	0x48000800
 8006268:	20000378 	.word	0x20000378
 800626c:	20001854 	.word	0x20001854
 8006270:	20000534 	.word	0x20000534
 8006274:	00000000 	.word	0x00000000
 8006278:	44fa0000 	.word	0x44fa0000
 800627c:	20000060 	.word	0x20000060
 8006280:	42960000 	.word	0x42960000
 8006284:	2edbe6ff 	.word	0x2edbe6ff
 8006288:	2000047c 	.word	0x2000047c
 800628c:	3727c5ac 	.word	0x3727c5ac
 8006290:	43160000 	.word	0x43160000
 8006294:	200004a4 	.word	0x200004a4
 8006298:	20000000 	.word	0x20000000
 800629c:	3c23d70a 	.word	0x3c23d70a
 80062a0:	200004cc 	.word	0x200004cc
 80062a4:	43480000 	.word	0x43480000
 80062a8:	453b8000 	.word	0x453b8000
 80062ac:	200004f4 	.word	0x200004f4
 80062b0:	20000528 	.word	0x20000528
 80062b4:	2000051c 	.word	0x2000051c
 80062b8:	200000c0 	.word	0x200000c0
 80062bc:	2000052c 	.word	0x2000052c
 80062c0:	20000520 	.word	0x20000520
 80062c4:	457ff000 	.word	0x457ff000
 80062c8:	40533333 	.word	0x40533333
 80062cc:	200010f0 	.word	0x200010f0
 80062d0:	20000178 	.word	0x20000178
 80062d4:	2000054c 	.word	0x2000054c
 80062d8:	45000000 	.word	0x45000000
 80062dc:	447a0000 	.word	0x447a0000
 80062e0:	200009f4 	.word	0x200009f4
 80062e4:	200009e8 	.word	0x200009e8
 80062e8:	20000a0c 	.word	0x20000a0c
 80062ec:	20000a00 	.word	0x20000a00
 80062f0:	3a83126f 	.word	0x3a83126f
 80062f4:	20000a18 	.word	0x20000a18
 80062f8:	20000d84 	.word	0x20000d84
 80062fc:	20001690 	.word	0x20001690
 8006300:	20001d1c 	.word	0x20001d1c
 8006304:	20001eb4 	.word	0x20001eb4
 8006308:	200011b8 	.word	0x200011b8
 800630c:	20001920 	.word	0x20001920

08006310 <plotter_reset>:

void plotter_reset() {
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8006314:	4803      	ldr	r0, [pc, #12]	@ (8006324 <plotter_reset+0x14>)
 8006316:	f7fd fcb7 	bl	8003c88 <QEI_reset>
	QEI_reset(&revolute_encoder);
 800631a:	4803      	ldr	r0, [pc, #12]	@ (8006328 <plotter_reset+0x18>)
 800631c:	f7fd fcb4 	bl	8003c88 <QEI_reset>
}
 8006320:	bf00      	nop
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200003c4 	.word	0x200003c4
 8006328:	20000420 	.word	0x20000420

0800632c <plotter_update_sensors>:

void plotter_update_sensors() {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8006330:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8006498 <plotter_update_sensors+0x16c>
 8006334:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800649c <plotter_update_sensors+0x170>
 8006338:	2106      	movs	r1, #6
 800633a:	4859      	ldr	r0, [pc, #356]	@ (80064a0 <plotter_update_sensors+0x174>)
 800633c:	f7fa fecc 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006340:	eef0 7a40 	vmov.f32	s15, s0
 8006344:	4b57      	ldr	r3, [pc, #348]	@ (80064a4 <plotter_update_sensors+0x178>)
 8006346:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 800634a:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8006498 <plotter_update_sensors+0x16c>
 800634e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 800649c <plotter_update_sensors+0x170>
 8006352:	2107      	movs	r1, #7
 8006354:	4852      	ldr	r0, [pc, #328]	@ (80064a0 <plotter_update_sensors+0x174>)
 8006356:	f7fa febf 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 800635a:	eef0 7a40 	vmov.f32	s15, s0
 800635e:	4b52      	ldr	r3, [pc, #328]	@ (80064a8 <plotter_update_sensors+0x17c>)
 8006360:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8006364:	2180      	movs	r1, #128	@ 0x80
 8006366:	4851      	ldr	r0, [pc, #324]	@ (80064ac <plotter_update_sensors+0x180>)
 8006368:	f003 fbca 	bl	8009b00 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	4b4d      	ldr	r3, [pc, #308]	@ (80064b0 <plotter_update_sensors+0x184>)
 800637c:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800637e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006382:	484c      	ldr	r0, [pc, #304]	@ (80064b4 <plotter_update_sensors+0x188>)
 8006384:	f003 fbbc 	bl	8009b00 <HAL_GPIO_ReadPin>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	4b48      	ldr	r3, [pc, #288]	@ (80064b8 <plotter_update_sensors+0x18c>)
 8006398:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 800639a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800639e:	4845      	ldr	r0, [pc, #276]	@ (80064b4 <plotter_update_sensors+0x188>)
 80063a0:	f003 fbae 	bl	8009b00 <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b42      	ldr	r3, [pc, #264]	@ (80064bc <plotter_update_sensors+0x190>)
 80063b4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80063b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063ba:	483e      	ldr	r0, [pc, #248]	@ (80064b4 <plotter_update_sensors+0x188>)
 80063bc:	f003 fba0 	bl	8009b00 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b3c      	ldr	r3, [pc, #240]	@ (80064c0 <plotter_update_sensors+0x194>)
 80063d0:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80063d2:	2120      	movs	r1, #32
 80063d4:	4835      	ldr	r0, [pc, #212]	@ (80064ac <plotter_update_sensors+0x180>)
 80063d6:	f003 fb93 	bl	8009b00 <HAL_GPIO_ReadPin>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	4b39      	ldr	r3, [pc, #228]	@ (80064c4 <plotter_update_sensors+0x198>)
 80063e0:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80063e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80063ea:	f003 fb89 	bl	8009b00 <HAL_GPIO_ReadPin>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b35      	ldr	r3, [pc, #212]	@ (80064c8 <plotter_update_sensors+0x19c>)
 80063f4:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80063f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063fa:	482c      	ldr	r0, [pc, #176]	@ (80064ac <plotter_update_sensors+0x180>)
 80063fc:	f003 fb80 	bl	8009b00 <HAL_GPIO_ReadPin>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	4b31      	ldr	r3, [pc, #196]	@ (80064cc <plotter_update_sensors+0x1a0>)
 8006406:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8006408:	2104      	movs	r1, #4
 800640a:	4828      	ldr	r0, [pc, #160]	@ (80064ac <plotter_update_sensors+0x180>)
 800640c:	f003 fb78 	bl	8009b00 <HAL_GPIO_ReadPin>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <plotter_update_sensors+0x1a4>)
 8006416:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8006418:	2102      	movs	r1, #2
 800641a:	4824      	ldr	r0, [pc, #144]	@ (80064ac <plotter_update_sensors+0x180>)
 800641c:	f003 fb70 	bl	8009b00 <HAL_GPIO_ReadPin>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	4b2b      	ldr	r3, [pc, #172]	@ (80064d4 <plotter_update_sensors+0x1a8>)
 8006426:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006428:	2110      	movs	r1, #16
 800642a:	4820      	ldr	r0, [pc, #128]	@ (80064ac <plotter_update_sensors+0x180>)
 800642c:	f003 fb68 	bl	8009b00 <HAL_GPIO_ReadPin>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	4b26      	ldr	r3, [pc, #152]	@ (80064d8 <plotter_update_sensors+0x1ac>)
 8006440:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8006442:	4b23      	ldr	r3, [pc, #140]	@ (80064d0 <plotter_update_sensors+0x1a4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <plotter_update_sensors+0x126>
		servo_state = PEN_UP;
 800644a:	4b24      	ldr	r3, [pc, #144]	@ (80064dc <plotter_update_sensors+0x1b0>)
 800644c:	2202      	movs	r2, #2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e00a      	b.n	8006468 <plotter_update_sensors+0x13c>
	} else if (low_lim) {
 8006452:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <plotter_update_sensors+0x1a8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <plotter_update_sensors+0x136>
		servo_state = PEN_DOWN;
 800645a:	4b20      	ldr	r3, [pc, #128]	@ (80064dc <plotter_update_sensors+0x1b0>)
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e002      	b.n	8006468 <plotter_update_sensors+0x13c>
	} else {
		servo_state = PEN_IDLE;
 8006462:	4b1e      	ldr	r3, [pc, #120]	@ (80064dc <plotter_update_sensors+0x1b0>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8006468:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <plotter_update_sensors+0x19c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <plotter_update_sensors+0x14c>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8006470:	4b1b      	ldr	r3, [pc, #108]	@ (80064e0 <plotter_update_sensors+0x1b4>)
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e006      	b.n	8006486 <plotter_update_sensors+0x15a>
	} else if (low_photo) {
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <plotter_update_sensors+0x1a0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <plotter_update_sensors+0x15a>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8006480:	4b17      	ldr	r3, [pc, #92]	@ (80064e0 <plotter_update_sensors+0x1b4>)
 8006482:	2202      	movs	r2, #2
 8006484:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8006486:	4b0f      	ldr	r3, [pc, #60]	@ (80064c4 <plotter_update_sensors+0x198>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <plotter_update_sensors+0x168>
		revolute_state = RP_AT_HOME_POSITION;
 800648e:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <plotter_update_sensors+0x1b8>)
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
	}
}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}
 8006498:	42480000 	.word	0x42480000
 800649c:	c2480000 	.word	0xc2480000
 80064a0:	2000054c 	.word	0x2000054c
 80064a4:	20001820 	.word	0x20001820
 80064a8:	20001824 	.word	0x20001824
 80064ac:	48000400 	.word	0x48000400
 80064b0:	20001840 	.word	0x20001840
 80064b4:	48000800 	.word	0x48000800
 80064b8:	20001844 	.word	0x20001844
 80064bc:	20001848 	.word	0x20001848
 80064c0:	2000184c 	.word	0x2000184c
 80064c4:	20001828 	.word	0x20001828
 80064c8:	20001830 	.word	0x20001830
 80064cc:	20001834 	.word	0x20001834
 80064d0:	20001838 	.word	0x20001838
 80064d4:	2000183c 	.word	0x2000183c
 80064d8:	2000182c 	.word	0x2000182c
 80064dc:	20000328 	.word	0x20000328
 80064e0:	200000f9 	.word	0x200000f9
 80064e4:	200000fa 	.word	0x200000fa

080064e8 <plotter_pen_up>:

void plotter_pen_up() {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80064ec:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80064f0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006500 <plotter_pen_up+0x18>
 80064f4:	4803      	ldr	r0, [pc, #12]	@ (8006504 <plotter_pen_up+0x1c>)
 80064f6:	f7fc ff3b 	bl	8003370 <PWM_write_duty>
}
 80064fa:	bf00      	nop
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	42480000 	.word	0x42480000
 8006504:	20000534 	.word	0x20000534

08006508 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006520:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006528:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1b      	ldr	r2, [pc, #108]	@ (80065bc <SIGNAL_init+0xb4>)
 800654e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d828      	bhi.n	80065b0 <SIGNAL_init+0xa8>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <SIGNAL_init+0x5c>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065af 	.word	0x080065af
 8006568:	08006575 	.word	0x08006575
 800656c:	08006593 	.word	0x08006593
 8006570:	0800659d 	.word	0x0800659d
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006580:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a0e      	ldr	r2, [pc, #56]	@ (80065c0 <SIGNAL_init+0xb8>)
 8006586:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800658e:	621a      	str	r2, [r3, #32]
            break;
 8006590:	e00e      	b.n	80065b0 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006598:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800659a:	e009      	b.n	80065b0 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80065ac:	e000      	b.n	80065b0 <SIGNAL_init+0xa8>
            break;
 80065ae:	bf00      	nop
    }
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	bf800000 	.word	0xbf800000
 80065c0:	41200000 	.word	0x41200000

080065c4 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80065c4:	b480      	push	{r7}
 80065c6:	b089      	sub	sp, #36	@ 0x24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	61f8      	str	r0, [r7, #28]
 80065cc:	ed87 0a06 	vstr	s0, [r7, #24]
 80065d0:	edc7 0a05 	vstr	s1, [r7, #20]
 80065d4:	ed87 1a04 	vstr	s2, [r7, #16]
 80065d8:	edc7 1a03 	vstr	s3, [r7, #12]
 80065dc:	ed87 2a02 	vstr	s4, [r7, #8]
 80065e0:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	@ 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800661a:	b480      	push	{r7}
 800661c:	b089      	sub	sp, #36	@ 0x24
 800661e:	af00      	add	r7, sp, #0
 8006620:	61f8      	str	r0, [r7, #28]
 8006622:	ed87 0a06 	vstr	s0, [r7, #24]
 8006626:	edc7 0a05 	vstr	s1, [r7, #20]
 800662a:	ed87 1a04 	vstr	s2, [r7, #16]
 800662e:	edc7 1a03 	vstr	s3, [r7, #12]
 8006632:	ed87 2a02 	vstr	s4, [r7, #8]
 8006636:	edc7 2a01 	vstr	s5, [r7, #4]
 800663a:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2202      	movs	r2, #2
 8006642:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800666e:	bf00      	nop
 8006670:	3724      	adds	r7, #36	@ 0x24
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006682:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <HAL_MspInit+0x44>)
 8006684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006686:	4a0e      	ldr	r2, [pc, #56]	@ (80066c0 <HAL_MspInit+0x44>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	6613      	str	r3, [r2, #96]	@ 0x60
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <HAL_MspInit+0x44>)
 8006690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800669a:	4b09      	ldr	r3, [pc, #36]	@ (80066c0 <HAL_MspInit+0x44>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669e:	4a08      	ldr	r2, [pc, #32]	@ (80066c0 <HAL_MspInit+0x44>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a6:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <HAL_MspInit+0x44>)
 80066a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80066b2:	f003 fb11 	bl	8009cd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40021000 	.word	0x40021000

080066c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <NMI_Handler+0x4>

080066cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066d0:	bf00      	nop
 80066d2:	e7fd      	b.n	80066d0 <HardFault_Handler+0x4>

080066d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <MemManage_Handler+0x4>

080066dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <BusFault_Handler+0x4>

080066e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <UsageFault_Handler+0x4>

080066ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800671a:	f000 ff97 	bl	800764c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006728:	4802      	ldr	r0, [pc, #8]	@ (8006734 <DMA1_Channel1_IRQHandler+0x10>)
 800672a:	f002 ff18 	bl	800955e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200001e4 	.word	0x200001e4

08006738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800673c:	4802      	ldr	r0, [pc, #8]	@ (8006748 <DMA1_Channel2_IRQHandler+0x10>)
 800673e:	f002 ff0e 	bl	800955e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20002040 	.word	0x20002040

0800674c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006750:	4802      	ldr	r0, [pc, #8]	@ (800675c <DMA1_Channel3_IRQHandler+0x10>)
 8006752:	f002 ff04 	bl	800955e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200020a0 	.word	0x200020a0

08006760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006764:	4802      	ldr	r0, [pc, #8]	@ (8006770 <DMA1_Channel4_IRQHandler+0x10>)
 8006766:	f002 fefa 	bl	800955e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20001f80 	.word	0x20001f80

08006774 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006778:	4802      	ldr	r0, [pc, #8]	@ (8006784 <DMA1_Channel5_IRQHandler+0x10>)
 800677a:	f002 fef0 	bl	800955e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20001fe0 	.word	0x20001fe0

08006788 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800678c:	4803      	ldr	r0, [pc, #12]	@ (800679c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800678e:	f004 ff29 	bl	800b5e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006792:	4803      	ldr	r0, [pc, #12]	@ (80067a0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006794:	f004 ff26 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006798:	bf00      	nop
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20001854 	.word	0x20001854
 80067a0:	20001d1c 	.word	0x20001d1c

080067a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80067a8:	4802      	ldr	r0, [pc, #8]	@ (80067b4 <TIM2_IRQHandler+0x10>)
 80067aa:	f004 ff1b 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20001920 	.word	0x20001920

080067b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80067bc:	4802      	ldr	r0, [pc, #8]	@ (80067c8 <TIM3_IRQHandler+0x10>)
 80067be:	f004 ff11 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200019ec 	.word	0x200019ec

080067cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80067d0:	4802      	ldr	r0, [pc, #8]	@ (80067dc <TIM4_IRQHandler+0x10>)
 80067d2:	f004 ff07 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20001ab8 	.word	0x20001ab8

080067e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80067e4:	4802      	ldr	r0, [pc, #8]	@ (80067f0 <USART2_IRQHandler+0x10>)
 80067e6:	f006 fc51 	bl	800d08c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20001eb4 	.word	0x20001eb4

080067f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80067f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80067fc:	f003 f9b0 	bl	8009b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006800:	bf00      	nop
 8006802:	bd80      	pop	{r7, pc}

08006804 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006808:	4802      	ldr	r0, [pc, #8]	@ (8006814 <LPUART1_IRQHandler+0x10>)
 800680a:	f006 fc3f 	bl	800d08c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20001de8 	.word	0x20001de8

08006818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006820:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <_sbrk+0x5c>)
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <_sbrk+0x60>)
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <_sbrk+0x64>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006834:	4b11      	ldr	r3, [pc, #68]	@ (800687c <_sbrk+0x64>)
 8006836:	4a12      	ldr	r2, [pc, #72]	@ (8006880 <_sbrk+0x68>)
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800683a:	4b10      	ldr	r3, [pc, #64]	@ (800687c <_sbrk+0x64>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d207      	bcs.n	8006858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006848:	f008 fab2 	bl	800edb0 <__errno>
 800684c:	4603      	mov	r3, r0
 800684e:	220c      	movs	r2, #12
 8006850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	e009      	b.n	800686c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006858:	4b08      	ldr	r3, [pc, #32]	@ (800687c <_sbrk+0x64>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800685e:	4b07      	ldr	r3, [pc, #28]	@ (800687c <_sbrk+0x64>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	4a05      	ldr	r2, [pc, #20]	@ (800687c <_sbrk+0x64>)
 8006868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20020000 	.word	0x20020000
 8006878:	00000400 	.word	0x00000400
 800687c:	20001850 	.word	0x20001850
 8006880:	20002250 	.word	0x20002250

08006884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <SystemInit+0x20>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	4a05      	ldr	r2, [pc, #20]	@ (80068a4 <SystemInit+0x20>)
 8006890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	e000ed00 	.word	0xe000ed00

080068a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b098      	sub	sp, #96	@ 0x60
 80068ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	605a      	str	r2, [r3, #4]
 80068c4:	609a      	str	r2, [r3, #8]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	611a      	str	r2, [r3, #16]
 80068ca:	615a      	str	r2, [r3, #20]
 80068cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	2234      	movs	r2, #52	@ 0x34
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f008 fa53 	bl	800ed80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80068da:	4b3b      	ldr	r3, [pc, #236]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068dc:	4a3b      	ldr	r2, [pc, #236]	@ (80069cc <MX_TIM1_Init+0x124>)
 80068de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80068e0:	4b39      	ldr	r3, [pc, #228]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e6:	4b38      	ldr	r3, [pc, #224]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80068ec:	4b36      	ldr	r3, [pc, #216]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068f4:	4b34      	ldr	r3, [pc, #208]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80068fa:	4b33      	ldr	r3, [pc, #204]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006900:	4b31      	ldr	r3, [pc, #196]	@ (80069c8 <MX_TIM1_Init+0x120>)
 8006902:	2200      	movs	r2, #0
 8006904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006906:	4830      	ldr	r0, [pc, #192]	@ (80069c8 <MX_TIM1_Init+0x120>)
 8006908:	f004 fabe 	bl	800ae88 <HAL_TIM_PWM_Init>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8006912:	f7ff f96d 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800691a:	2300      	movs	r3, #0
 800691c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006922:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006926:	4619      	mov	r1, r3
 8006928:	4827      	ldr	r0, [pc, #156]	@ (80069c8 <MX_TIM1_Init+0x120>)
 800692a:	f006 f8cf 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006934:	f7ff f95c 	bl	8005bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006938:	2360      	movs	r3, #96	@ 0x60
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006940:	2300      	movs	r3, #0
 8006942:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006944:	2300      	movs	r3, #0
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006948:	2300      	movs	r3, #0
 800694a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800694c:	2300      	movs	r3, #0
 800694e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006950:	2300      	movs	r3, #0
 8006952:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006954:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006958:	220c      	movs	r2, #12
 800695a:	4619      	mov	r1, r3
 800695c:	481a      	ldr	r0, [pc, #104]	@ (80069c8 <MX_TIM1_Init+0x120>)
 800695e:	f004 ffbb 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006968:	f7ff f942 	bl	8005bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006970:	2300      	movs	r3, #0
 8006972:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006984:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800699c:	2300      	movs	r3, #0
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4807      	ldr	r0, [pc, #28]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80069aa:	f006 f925 	bl	800cbf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80069b4:	f7ff f91c 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80069b8:	4803      	ldr	r0, [pc, #12]	@ (80069c8 <MX_TIM1_Init+0x120>)
 80069ba:	f000 fb77 	bl	80070ac <HAL_TIM_MspPostInit>

}
 80069be:	bf00      	nop
 80069c0:	3760      	adds	r7, #96	@ 0x60
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20001854 	.word	0x20001854
 80069cc:	40012c00 	.word	0x40012c00

080069d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069d6:	f107 0310 	add.w	r3, r7, #16
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <MX_TIM2_Init+0x98>)
 80069f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80069f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80069f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006a68 <MX_TIM2_Init+0x98>)
 80069f8:	22a9      	movs	r2, #169	@ 0xa9
 80069fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <MX_TIM2_Init+0x98>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006a02:	4b19      	ldr	r3, [pc, #100]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006a08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a0a:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a10:	4b15      	ldr	r3, [pc, #84]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a16:	4814      	ldr	r0, [pc, #80]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a18:	f004 f8ea 	bl	800abf0 <HAL_TIM_Base_Init>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006a22:	f7ff f8e5 	bl	8005bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4619      	mov	r1, r3
 8006a32:	480d      	ldr	r0, [pc, #52]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a34:	f005 f864 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006a3e:	f7ff f8d7 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4806      	ldr	r0, [pc, #24]	@ (8006a68 <MX_TIM2_Init+0x98>)
 8006a50:	f006 f83c 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006a5a:	f7ff f8c9 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a5e:	bf00      	nop
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20001920 	.word	0x20001920

08006a6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	@ 0x30
 8006a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	2224      	movs	r2, #36	@ 0x24
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f008 f980 	bl	800ed80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a80:	463b      	mov	r3, r7
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
 8006a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a8a:	4b21      	ldr	r3, [pc, #132]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006a8c:	4a21      	ldr	r2, [pc, #132]	@ (8006b14 <MX_TIM3_Init+0xa8>)
 8006a8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006a90:	4b1f      	ldr	r3, [pc, #124]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a96:	4b1e      	ldr	r3, [pc, #120]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006a9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006aa2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aaa:	4b19      	ldr	r3, [pc, #100]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	4619      	mov	r1, r3
 8006ada:	480d      	ldr	r0, [pc, #52]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006adc:	f004 fc40 	bl	800b360 <HAL_TIM_Encoder_Init>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8006ae6:	f7ff f883 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006aea:	2300      	movs	r3, #0
 8006aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006af2:	463b      	mov	r3, r7
 8006af4:	4619      	mov	r1, r3
 8006af6:	4806      	ldr	r0, [pc, #24]	@ (8006b10 <MX_TIM3_Init+0xa4>)
 8006af8:	f005 ffe8 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006b02:	f7ff f875 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006b06:	bf00      	nop
 8006b08:	3730      	adds	r7, #48	@ 0x30
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200019ec 	.word	0x200019ec
 8006b14:	40000400 	.word	0x40000400

08006b18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	@ 0x30
 8006b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b1e:	f107 030c 	add.w	r3, r7, #12
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f008 f92a 	bl	800ed80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	605a      	str	r2, [r3, #4]
 8006b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006b36:	4b21      	ldr	r3, [pc, #132]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b38:	4a21      	ldr	r2, [pc, #132]	@ (8006bc0 <MX_TIM4_Init+0xa8>)
 8006b3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b42:	4b1e      	ldr	r3, [pc, #120]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006b48:	4b1c      	ldr	r3, [pc, #112]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b50:	4b1a      	ldr	r3, [pc, #104]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b56:	4b19      	ldr	r3, [pc, #100]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b64:	2301      	movs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b70:	2300      	movs	r3, #0
 8006b72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b74:	2301      	movs	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4619      	mov	r1, r3
 8006b86:	480d      	ldr	r0, [pc, #52]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006b88:	f004 fbea 	bl	800b360 <HAL_TIM_Encoder_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006b92:	f7ff f82d 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b96:	2300      	movs	r3, #0
 8006b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4806      	ldr	r0, [pc, #24]	@ (8006bbc <MX_TIM4_Init+0xa4>)
 8006ba4:	f005 ff92 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006bae:	f7ff f81f 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006bb2:	bf00      	nop
 8006bb4:	3730      	adds	r7, #48	@ 0x30
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20001ab8 	.word	0x20001ab8
 8006bc0:	40000800 	.word	0x40000800

08006bc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	@ 0x30
 8006bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	2224      	movs	r2, #36	@ 0x24
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f008 f8d4 	bl	800ed80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bd8:	463b      	mov	r3, r7
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	605a      	str	r2, [r3, #4]
 8006be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006be2:	4b21      	ldr	r3, [pc, #132]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006be4:	4a21      	ldr	r2, [pc, #132]	@ (8006c6c <MX_TIM5_Init+0xa8>)
 8006be6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006be8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bee:	4b1e      	ldr	r3, [pc, #120]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c02:	4b19      	ldr	r3, [pc, #100]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006c10:	2301      	movs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006c20:	2301      	movs	r3, #1
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006c2c:	f107 030c 	add.w	r3, r7, #12
 8006c30:	4619      	mov	r1, r3
 8006c32:	480d      	ldr	r0, [pc, #52]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006c34:	f004 fb94 	bl	800b360 <HAL_TIM_Encoder_Init>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8006c3e:	f7fe ffd7 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c42:	2300      	movs	r3, #0
 8006c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4806      	ldr	r0, [pc, #24]	@ (8006c68 <MX_TIM5_Init+0xa4>)
 8006c50:	f005 ff3c 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8006c5a:	f7fe ffc9 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006c5e:	bf00      	nop
 8006c60:	3730      	adds	r7, #48	@ 0x30
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001b84 	.word	0x20001b84
 8006c6c:	40000c00 	.word	0x40000c00

08006c70 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b09c      	sub	sp, #112	@ 0x70
 8006c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	611a      	str	r2, [r3, #16]
 8006ca0:	615a      	str	r2, [r3, #20]
 8006ca2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006ca4:	1d3b      	adds	r3, r7, #4
 8006ca6:	2234      	movs	r2, #52	@ 0x34
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f008 f868 	bl	800ed80 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8006de8 <MX_TIM8_Init+0x178>)
 8006cb4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cbc:	4b49      	ldr	r3, [pc, #292]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006cc2:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006cc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006cca:	4b46      	ldr	r3, [pc, #280]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006cd2:	4b44      	ldr	r3, [pc, #272]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cd8:	4b42      	ldr	r3, [pc, #264]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006cde:	4841      	ldr	r0, [pc, #260]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006ce0:	f003 ff86 	bl	800abf0 <HAL_TIM_Base_Init>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8006cea:	f7fe ff81 	bl	8005bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cf2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006cf4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	483a      	ldr	r0, [pc, #232]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006cfc:	f004 ff00 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8006d06:	f7fe ff73 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006d0a:	4836      	ldr	r0, [pc, #216]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006d0c:	f004 f8bc 	bl	800ae88 <HAL_TIM_PWM_Init>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8006d16:	f7fe ff6b 	bl	8005bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006d26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	482d      	ldr	r0, [pc, #180]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006d2e:	f005 fecd 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8006d38:	f7fe ff5a 	bl	8005bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d3c:	2360      	movs	r3, #96	@ 0x60
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d44:	2300      	movs	r3, #0
 8006d46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006d50:	2300      	movs	r3, #0
 8006d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006d54:	2300      	movs	r3, #0
 8006d56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4820      	ldr	r0, [pc, #128]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006d62:	f004 fdb9 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8006d6c:	f7fe ff40 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d74:	2204      	movs	r2, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	481a      	ldr	r0, [pc, #104]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006d7a:	f004 fdad 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8006d84:	f7fe ff34 	bl	8005bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006da0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006da6:	2300      	movs	r3, #0
 8006da8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006dae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006db8:	2300      	movs	r3, #0
 8006dba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4807      	ldr	r0, [pc, #28]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006dc6:	f005 ff17 	bl	800cbf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8006dd0:	f7fe ff0e 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006dd4:	4803      	ldr	r0, [pc, #12]	@ (8006de4 <MX_TIM8_Init+0x174>)
 8006dd6:	f000 f969 	bl	80070ac <HAL_TIM_MspPostInit>

}
 8006dda:	bf00      	nop
 8006ddc:	3770      	adds	r7, #112	@ 0x70
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20001c50 	.word	0x20001c50
 8006de8:	40013400 	.word	0x40013400

08006dec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006df0:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006df2:	4a15      	ldr	r2, [pc, #84]	@ (8006e48 <MX_TIM16_Init+0x5c>)
 8006df4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006df8:	22a9      	movs	r2, #169	@ 0xa9
 8006dfa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dfc:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e04:	f240 4279 	movw	r2, #1145	@ 0x479
 8006e08:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e16:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006e1c:	4809      	ldr	r0, [pc, #36]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e1e:	f003 fee7 	bl	800abf0 <HAL_TIM_Base_Init>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006e28:	f7fe fee2 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	4805      	ldr	r0, [pc, #20]	@ (8006e44 <MX_TIM16_Init+0x58>)
 8006e30:	f004 f9a0 	bl	800b174 <HAL_TIM_OnePulse_Init>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8006e3a:	f7fe fed9 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20001d1c 	.word	0x20001d1c
 8006e48:	40014400 	.word	0x40014400

08006e4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0d      	ldr	r2, [pc, #52]	@ (8006e90 <HAL_TIM_PWM_MspInit+0x44>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d113      	bne.n	8006e86 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <HAL_TIM_PWM_MspInit+0x48>)
 8006e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e62:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <HAL_TIM_PWM_MspInit+0x48>)
 8006e64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006e68:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <HAL_TIM_PWM_MspInit+0x48>)
 8006e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2019      	movs	r0, #25
 8006e7c:	f002 f957 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006e80:	2019      	movs	r0, #25
 8006e82:	f002 f96e 	bl	8009162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40021000 	.word	0x40021000

08006e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea8:	d114      	bne.n	8006ed4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006eaa:	4b22      	ldr	r3, [pc, #136]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eae:	4a21      	ldr	r2, [pc, #132]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	201c      	movs	r0, #28
 8006ec8:	f002 f931 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ecc:	201c      	movs	r0, #28
 8006ece:	f002 f948 	bl	8009162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006ed2:	e02a      	b.n	8006f2a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a17      	ldr	r2, [pc, #92]	@ (8006f38 <HAL_TIM_Base_MspInit+0xa0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10c      	bne.n	8006ef8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ede:	4b15      	ldr	r3, [pc, #84]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee2:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006ee4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8006eea:	4b12      	ldr	r3, [pc, #72]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
}
 8006ef6:	e018      	b.n	8006f2a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a0f      	ldr	r2, [pc, #60]	@ (8006f3c <HAL_TIM_Base_MspInit+0xa4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d113      	bne.n	8006f2a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006f02:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f06:	4a0b      	ldr	r2, [pc, #44]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8006f0e:	4b09      	ldr	r3, [pc, #36]	@ (8006f34 <HAL_TIM_Base_MspInit+0x9c>)
 8006f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	2019      	movs	r0, #25
 8006f20:	f002 f905 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006f24:	2019      	movs	r0, #25
 8006f26:	f002 f91c 	bl	8009162 <HAL_NVIC_EnableIRQ>
}
 8006f2a:	bf00      	nop
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40021000 	.word	0x40021000
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	40014400 	.word	0x40014400

08006f40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	@ 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800709c <HAL_TIM_Encoder_MspInit+0x15c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d131      	bne.n	8006fc6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f62:	4b4f      	ldr	r3, [pc, #316]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	4a4e      	ldr	r2, [pc, #312]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f68:	f043 0302 	orr.w	r3, r3, #2
 8006f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	623b      	str	r3, [r7, #32]
 8006f78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f7a:	4b49      	ldr	r3, [pc, #292]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f7e:	4a48      	ldr	r2, [pc, #288]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f86:	4b46      	ldr	r3, [pc, #280]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f92:	23c0      	movs	r3, #192	@ 0xc0
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f96:	2302      	movs	r3, #2
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006faa:	4619      	mov	r1, r3
 8006fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fb0:	f002 fc24 	bl	80097fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	201d      	movs	r0, #29
 8006fba:	f002 f8b8 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006fbe:	201d      	movs	r0, #29
 8006fc0:	f002 f8cf 	bl	8009162 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006fc4:	e065      	b.n	8007092 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a36      	ldr	r2, [pc, #216]	@ (80070a4 <HAL_TIM_Encoder_MspInit+0x164>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d132      	bne.n	8007036 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006fd0:	4b33      	ldr	r3, [pc, #204]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd4:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fd6:	f043 0304 	orr.w	r3, r3, #4
 8006fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fdc:	4b30      	ldr	r3, [pc, #192]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fec:	4a2c      	ldr	r2, [pc, #176]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007000:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007006:	2302      	movs	r3, #2
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800700e:	2300      	movs	r3, #0
 8007010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8007012:	230a      	movs	r3, #10
 8007014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800701a:	4619      	mov	r1, r3
 800701c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007020:	f002 fbec 	bl	80097fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	201e      	movs	r0, #30
 800702a:	f002 f880 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800702e:	201e      	movs	r0, #30
 8007030:	f002 f897 	bl	8009162 <HAL_NVIC_EnableIRQ>
}
 8007034:	e02d      	b.n	8007092 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <HAL_TIM_Encoder_MspInit+0x168>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d128      	bne.n	8007092 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007040:	4b17      	ldr	r3, [pc, #92]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8007042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007044:	4a16      	ldr	r2, [pc, #88]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8007046:	f043 0308 	orr.w	r3, r3, #8
 800704a:	6593      	str	r3, [r2, #88]	@ 0x58
 800704c:	4b14      	ldr	r3, [pc, #80]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007058:	4b11      	ldr	r3, [pc, #68]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800705a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800705c:	4a10      	ldr	r2, [pc, #64]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007064:	4b0e      	ldr	r3, [pc, #56]	@ (80070a0 <HAL_TIM_Encoder_MspInit+0x160>)
 8007066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007070:	2303      	movs	r3, #3
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007074:	2302      	movs	r3, #2
 8007076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007078:	2300      	movs	r3, #0
 800707a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800707c:	2300      	movs	r3, #0
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007080:	2302      	movs	r3, #2
 8007082:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007088:	4619      	mov	r1, r3
 800708a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800708e:	f002 fbb5 	bl	80097fc <HAL_GPIO_Init>
}
 8007092:	bf00      	nop
 8007094:	3738      	adds	r7, #56	@ 0x38
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40000400 	.word	0x40000400
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00

080070ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a22      	ldr	r2, [pc, #136]	@ (8007154 <HAL_TIM_MspPostInit+0xa8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d11c      	bne.n	8007108 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070ce:	4b22      	ldr	r3, [pc, #136]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 80070d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d2:	4a21      	ldr	r2, [pc, #132]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 80070d4:	f043 0304 	orr.w	r3, r3, #4
 80070d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070da:	4b1f      	ldr	r3, [pc, #124]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80070e6:	2308      	movs	r3, #8
 80070e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ea:	2302      	movs	r3, #2
 80070ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80070f6:	2302      	movs	r3, #2
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070fa:	f107 0314 	add.w	r3, r7, #20
 80070fe:	4619      	mov	r1, r3
 8007100:	4816      	ldr	r0, [pc, #88]	@ (800715c <HAL_TIM_MspPostInit+0xb0>)
 8007102:	f002 fb7b 	bl	80097fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007106:	e020      	b.n	800714a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a14      	ldr	r2, [pc, #80]	@ (8007160 <HAL_TIM_MspPostInit+0xb4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d11b      	bne.n	800714a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007112:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 8007118:	f043 0304 	orr.w	r3, r3, #4
 800711c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800711e:	4b0e      	ldr	r3, [pc, #56]	@ (8007158 <HAL_TIM_MspPostInit+0xac>)
 8007120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800712a:	23c0      	movs	r3, #192	@ 0xc0
 800712c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007136:	2300      	movs	r3, #0
 8007138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800713a:	2304      	movs	r3, #4
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4619      	mov	r1, r3
 8007144:	4805      	ldr	r0, [pc, #20]	@ (800715c <HAL_TIM_MspPostInit+0xb0>)
 8007146:	f002 fb59 	bl	80097fc <HAL_GPIO_Init>
}
 800714a:	bf00      	nop
 800714c:	3728      	adds	r7, #40	@ 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40021000 	.word	0x40021000
 800715c:	48000800 	.word	0x48000800
 8007160:	40013400 	.word	0x40013400

08007164 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007168:	4b20      	ldr	r3, [pc, #128]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 800716a:	4a21      	ldr	r2, [pc, #132]	@ (80071f0 <MX_LPUART1_UART_Init+0x8c>)
 800716c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 8007170:	4a20      	ldr	r2, [pc, #128]	@ (80071f4 <MX_LPUART1_UART_Init+0x90>)
 8007172:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007174:	4b1d      	ldr	r3, [pc, #116]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800717a:	4b1c      	ldr	r3, [pc, #112]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 800717c:	2200      	movs	r2, #0
 800717e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007180:	4b1a      	ldr	r3, [pc, #104]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 8007182:	2200      	movs	r2, #0
 8007184:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007186:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 8007188:	220c      	movs	r2, #12
 800718a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800718c:	4b17      	ldr	r3, [pc, #92]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 800718e:	2200      	movs	r2, #0
 8007190:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007192:	4b16      	ldr	r3, [pc, #88]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 8007194:	2200      	movs	r2, #0
 8007196:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007198:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 800719a:	2200      	movs	r2, #0
 800719c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800719e:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80071a4:	4811      	ldr	r0, [pc, #68]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 80071a6:	f005 fe0b 	bl	800cdc0 <HAL_UART_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80071b0:	f7fe fd1e 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80071b4:	2100      	movs	r1, #0
 80071b6:	480d      	ldr	r0, [pc, #52]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 80071b8:	f007 fb5e 	bl	800e878 <HAL_UARTEx_SetTxFifoThreshold>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80071c2:	f7fe fd15 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80071c6:	2100      	movs	r1, #0
 80071c8:	4808      	ldr	r0, [pc, #32]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 80071ca:	f007 fb93 	bl	800e8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80071d4:	f7fe fd0c 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80071d8:	4804      	ldr	r0, [pc, #16]	@ (80071ec <MX_LPUART1_UART_Init+0x88>)
 80071da:	f007 fb14 	bl	800e806 <HAL_UARTEx_DisableFifoMode>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80071e4:	f7fe fd04 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20001de8 	.word	0x20001de8
 80071f0:	40008000 	.word	0x40008000
 80071f4:	001e8480 	.word	0x001e8480

080071f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80071fc:	4b23      	ldr	r3, [pc, #140]	@ (800728c <MX_USART2_UART_Init+0x94>)
 80071fe:	4a24      	ldr	r2, [pc, #144]	@ (8007290 <MX_USART2_UART_Init+0x98>)
 8007200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8007202:	4b22      	ldr	r3, [pc, #136]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007204:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8007208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800720a:	4b20      	ldr	r3, [pc, #128]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800720c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007210:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007212:	4b1e      	ldr	r3, [pc, #120]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007214:	2200      	movs	r2, #0
 8007216:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007218:	4b1c      	ldr	r3, [pc, #112]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800721a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800721e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007220:	4b1a      	ldr	r3, [pc, #104]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007222:	220c      	movs	r2, #12
 8007224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007226:	4b19      	ldr	r3, [pc, #100]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007228:	2200      	movs	r2, #0
 800722a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800722c:	4b17      	ldr	r3, [pc, #92]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800722e:	2200      	movs	r2, #0
 8007230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007232:	4b16      	ldr	r3, [pc, #88]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007234:	2200      	movs	r2, #0
 8007236:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007238:	4b14      	ldr	r3, [pc, #80]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800723a:	2200      	movs	r2, #0
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800723e:	4b13      	ldr	r3, [pc, #76]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007240:	2200      	movs	r2, #0
 8007242:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007244:	4811      	ldr	r0, [pc, #68]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007246:	f005 fdbb 	bl	800cdc0 <HAL_UART_Init>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8007250:	f7fe fcce 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007254:	2100      	movs	r1, #0
 8007256:	480d      	ldr	r0, [pc, #52]	@ (800728c <MX_USART2_UART_Init+0x94>)
 8007258:	f007 fb0e 	bl	800e878 <HAL_UARTEx_SetTxFifoThreshold>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8007262:	f7fe fcc5 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007266:	2100      	movs	r1, #0
 8007268:	4808      	ldr	r0, [pc, #32]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800726a:	f007 fb43 	bl	800e8f4 <HAL_UARTEx_SetRxFifoThreshold>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8007274:	f7fe fcbc 	bl	8005bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007278:	4804      	ldr	r0, [pc, #16]	@ (800728c <MX_USART2_UART_Init+0x94>)
 800727a:	f007 fac4 	bl	800e806 <HAL_UARTEx_DisableFifoMode>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8007284:	f7fe fcb4 	bl	8005bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007288:	bf00      	nop
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001eb4 	.word	0x20001eb4
 8007290:	40004400 	.word	0x40004400

08007294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b0a0      	sub	sp, #128	@ 0x80
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800729c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	605a      	str	r2, [r3, #4]
 80072a6:	609a      	str	r2, [r3, #8]
 80072a8:	60da      	str	r2, [r3, #12]
 80072aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072ac:	f107 0318 	add.w	r3, r7, #24
 80072b0:	2254      	movs	r2, #84	@ 0x54
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f007 fd63 	bl	800ed80 <memset>
  if(uartHandle->Instance==LPUART1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a99      	ldr	r2, [pc, #612]	@ (8007524 <HAL_UART_MspInit+0x290>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	f040 8093 	bne.w	80073ec <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80072c6:	2320      	movs	r3, #32
 80072c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80072ca:	2300      	movs	r3, #0
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072ce:	f107 0318 	add.w	r3, r7, #24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f003 fa3e 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80072de:	f7fe fc87 	bl	8005bf0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80072e2:	4b91      	ldr	r3, [pc, #580]	@ (8007528 <HAL_UART_MspInit+0x294>)
 80072e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e6:	4a90      	ldr	r2, [pc, #576]	@ (8007528 <HAL_UART_MspInit+0x294>)
 80072e8:	f043 0301 	orr.w	r3, r3, #1
 80072ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80072ee:	4b8e      	ldr	r3, [pc, #568]	@ (8007528 <HAL_UART_MspInit+0x294>)
 80072f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007528 <HAL_UART_MspInit+0x294>)
 80072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fe:	4a8a      	ldr	r2, [pc, #552]	@ (8007528 <HAL_UART_MspInit+0x294>)
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007306:	4b88      	ldr	r3, [pc, #544]	@ (8007528 <HAL_UART_MspInit+0x294>)
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007312:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007316:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007318:	2302      	movs	r3, #2
 800731a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731c:	2300      	movs	r3, #0
 800731e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007320:	2300      	movs	r3, #0
 8007322:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007324:	2308      	movs	r3, #8
 8007326:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007328:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800732c:	4619      	mov	r1, r3
 800732e:	487f      	ldr	r0, [pc, #508]	@ (800752c <HAL_UART_MspInit+0x298>)
 8007330:	f002 fa64 	bl	80097fc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8007334:	4b7e      	ldr	r3, [pc, #504]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007336:	4a7f      	ldr	r2, [pc, #508]	@ (8007534 <HAL_UART_MspInit+0x2a0>)
 8007338:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800733a:	4b7d      	ldr	r3, [pc, #500]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 800733c:	2222      	movs	r2, #34	@ 0x22
 800733e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007340:	4b7b      	ldr	r3, [pc, #492]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007346:	4b7a      	ldr	r3, [pc, #488]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007348:	2200      	movs	r2, #0
 800734a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800734c:	4b78      	ldr	r3, [pc, #480]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 800734e:	2280      	movs	r2, #128	@ 0x80
 8007350:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007352:	4b77      	ldr	r3, [pc, #476]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007354:	2200      	movs	r2, #0
 8007356:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007358:	4b75      	ldr	r3, [pc, #468]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 800735a:	2200      	movs	r2, #0
 800735c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800735e:	4b74      	ldr	r3, [pc, #464]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007360:	2200      	movs	r2, #0
 8007362:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007364:	4b72      	ldr	r3, [pc, #456]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007366:	2200      	movs	r2, #0
 8007368:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800736a:	4871      	ldr	r0, [pc, #452]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 800736c:	f001 ff14 	bl	8009198 <HAL_DMA_Init>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8007376:	f7fe fc3b 	bl	8005bf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a6c      	ldr	r2, [pc, #432]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 800737e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007382:	4a6b      	ldr	r2, [pc, #428]	@ (8007530 <HAL_UART_MspInit+0x29c>)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8007388:	4b6b      	ldr	r3, [pc, #428]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 800738a:	4a6c      	ldr	r2, [pc, #432]	@ (800753c <HAL_UART_MspInit+0x2a8>)
 800738c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800738e:	4b6a      	ldr	r3, [pc, #424]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 8007390:	2223      	movs	r2, #35	@ 0x23
 8007392:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007394:	4b68      	ldr	r3, [pc, #416]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 8007396:	2210      	movs	r2, #16
 8007398:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800739a:	4b67      	ldr	r3, [pc, #412]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 800739c:	2200      	movs	r2, #0
 800739e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80073a0:	4b65      	ldr	r3, [pc, #404]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073a2:	2280      	movs	r2, #128	@ 0x80
 80073a4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073a6:	4b64      	ldr	r3, [pc, #400]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073ac:	4b62      	ldr	r3, [pc, #392]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80073b2:	4b61      	ldr	r3, [pc, #388]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80073b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80073be:	485e      	ldr	r0, [pc, #376]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073c0:	f001 feea 	bl	8009198 <HAL_DMA_Init>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80073ca:	f7fe fc11 	bl	8005bf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a59      	ldr	r2, [pc, #356]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80073d4:	4a58      	ldr	r2, [pc, #352]	@ (8007538 <HAL_UART_MspInit+0x2a4>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	205b      	movs	r0, #91	@ 0x5b
 80073e0:	f001 fea5 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80073e4:	205b      	movs	r0, #91	@ 0x5b
 80073e6:	f001 febc 	bl	8009162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80073ea:	e097      	b.n	800751c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a53      	ldr	r2, [pc, #332]	@ (8007540 <HAL_UART_MspInit+0x2ac>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	f040 8092 	bne.w	800751c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80073f8:	2302      	movs	r3, #2
 80073fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80073fc:	2300      	movs	r3, #0
 80073fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007400:	f107 0318 	add.w	r3, r7, #24
 8007404:	4618      	mov	r0, r3
 8007406:	f003 f9a5 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007410:	f7fe fbee 	bl	8005bf0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007414:	4b44      	ldr	r3, [pc, #272]	@ (8007528 <HAL_UART_MspInit+0x294>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007418:	4a43      	ldr	r2, [pc, #268]	@ (8007528 <HAL_UART_MspInit+0x294>)
 800741a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800741e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007420:	4b41      	ldr	r3, [pc, #260]	@ (8007528 <HAL_UART_MspInit+0x294>)
 8007422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742c:	4b3e      	ldr	r3, [pc, #248]	@ (8007528 <HAL_UART_MspInit+0x294>)
 800742e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007430:	4a3d      	ldr	r2, [pc, #244]	@ (8007528 <HAL_UART_MspInit+0x294>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007438:	4b3b      	ldr	r3, [pc, #236]	@ (8007528 <HAL_UART_MspInit+0x294>)
 800743a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007444:	230c      	movs	r3, #12
 8007446:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007448:	2302      	movs	r3, #2
 800744a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744c:	2300      	movs	r3, #0
 800744e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007450:	2300      	movs	r3, #0
 8007452:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007454:	2307      	movs	r3, #7
 8007456:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007458:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800745c:	4619      	mov	r1, r3
 800745e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007462:	f002 f9cb 	bl	80097fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8007466:	4b37      	ldr	r3, [pc, #220]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007468:	4a37      	ldr	r2, [pc, #220]	@ (8007548 <HAL_UART_MspInit+0x2b4>)
 800746a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800746c:	4b35      	ldr	r3, [pc, #212]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 800746e:	221a      	movs	r2, #26
 8007470:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007472:	4b34      	ldr	r3, [pc, #208]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007474:	2200      	movs	r2, #0
 8007476:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007478:	4b32      	ldr	r3, [pc, #200]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 800747a:	2200      	movs	r2, #0
 800747c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800747e:	4b31      	ldr	r3, [pc, #196]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007480:	2280      	movs	r2, #128	@ 0x80
 8007482:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007484:	4b2f      	ldr	r3, [pc, #188]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007486:	2200      	movs	r2, #0
 8007488:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800748a:	4b2e      	ldr	r3, [pc, #184]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 800748c:	2200      	movs	r2, #0
 800748e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007490:	4b2c      	ldr	r3, [pc, #176]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007492:	2200      	movs	r2, #0
 8007494:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007496:	4b2b      	ldr	r3, [pc, #172]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 8007498:	2200      	movs	r2, #0
 800749a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800749c:	4829      	ldr	r0, [pc, #164]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 800749e:	f001 fe7b 	bl	8009198 <HAL_DMA_Init>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_UART_MspInit+0x218>
      Error_Handler();
 80074a8:	f7fe fba2 	bl	8005bf0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a25      	ldr	r2, [pc, #148]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 80074b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80074b4:	4a23      	ldr	r2, [pc, #140]	@ (8007544 <HAL_UART_MspInit+0x2b0>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80074ba:	4b24      	ldr	r3, [pc, #144]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074bc:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <HAL_UART_MspInit+0x2bc>)
 80074be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80074c0:	4b22      	ldr	r3, [pc, #136]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074c2:	221b      	movs	r2, #27
 80074c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80074c6:	4b21      	ldr	r3, [pc, #132]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074c8:	2210      	movs	r2, #16
 80074ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074cc:	4b1f      	ldr	r3, [pc, #124]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074d2:	4b1e      	ldr	r3, [pc, #120]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074d8:	4b1c      	ldr	r3, [pc, #112]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074da:	2200      	movs	r2, #0
 80074dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074de:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80074e4:	4b19      	ldr	r3, [pc, #100]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074ea:	4b18      	ldr	r3, [pc, #96]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80074f0:	4816      	ldr	r0, [pc, #88]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 80074f2:	f001 fe51 	bl	8009198 <HAL_DMA_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80074fc:	f7fe fb78 	bl	8005bf0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a12      	ldr	r2, [pc, #72]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 8007504:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007506:	4a11      	ldr	r2, [pc, #68]	@ (800754c <HAL_UART_MspInit+0x2b8>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	2026      	movs	r0, #38	@ 0x26
 8007512:	f001 fe0c 	bl	800912e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007516:	2026      	movs	r0, #38	@ 0x26
 8007518:	f001 fe23 	bl	8009162 <HAL_NVIC_EnableIRQ>
}
 800751c:	bf00      	nop
 800751e:	3780      	adds	r7, #128	@ 0x80
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40008000 	.word	0x40008000
 8007528:	40021000 	.word	0x40021000
 800752c:	48000400 	.word	0x48000400
 8007530:	20001f80 	.word	0x20001f80
 8007534:	40020044 	.word	0x40020044
 8007538:	20001fe0 	.word	0x20001fe0
 800753c:	40020058 	.word	0x40020058
 8007540:	40004400 	.word	0x40004400
 8007544:	20002040 	.word	0x20002040
 8007548:	4002001c 	.word	0x4002001c
 800754c:	200020a0 	.word	0x200020a0
 8007550:	40020030 	.word	0x40020030

08007554 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8007554:	480d      	ldr	r0, [pc, #52]	@ (800758c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007556:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007558:	f7ff f994 	bl	8006884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800755c:	480c      	ldr	r0, [pc, #48]	@ (8007590 <LoopForever+0x6>)
  ldr r1, =_edata
 800755e:	490d      	ldr	r1, [pc, #52]	@ (8007594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007560:	4a0d      	ldr	r2, [pc, #52]	@ (8007598 <LoopForever+0xe>)
  movs r3, #0
 8007562:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007564:	e002      	b.n	800756c <LoopCopyDataInit>

08007566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800756a:	3304      	adds	r3, #4

0800756c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800756c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800756e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007570:	d3f9      	bcc.n	8007566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007572:	4a0a      	ldr	r2, [pc, #40]	@ (800759c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007574:	4c0a      	ldr	r4, [pc, #40]	@ (80075a0 <LoopForever+0x16>)
  movs r3, #0
 8007576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007578:	e001      	b.n	800757e <LoopFillZerobss>

0800757a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800757a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800757c:	3204      	adds	r2, #4

0800757e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800757e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007580:	d3fb      	bcc.n	800757a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007582:	f007 fc1b 	bl	800edbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007586:	f7fd fa79 	bl	8004a7c <main>

0800758a <LoopForever>:

LoopForever:
    b LoopForever
 800758a:	e7fe      	b.n	800758a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800758c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007594:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8007598:	08011280 	.word	0x08011280
  ldr r2, =_sbss
 800759c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80075a0:	2000224c 	.word	0x2000224c

080075a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80075a4:	e7fe      	b.n	80075a4 <ADC1_2_IRQHandler>

080075a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075b0:	2003      	movs	r0, #3
 80075b2:	f001 fdb1 	bl	8009118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80075b6:	2000      	movs	r0, #0
 80075b8:	f000 f80e 	bl	80075d8 <HAL_InitTick>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	71fb      	strb	r3, [r7, #7]
 80075c6:	e001      	b.n	80075cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80075c8:	f7ff f858 	bl	800667c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80075cc:	79fb      	ldrb	r3, [r7, #7]

}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <HAL_InitTick+0x68>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d022      	beq.n	8007632 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80075ec:	4b15      	ldr	r3, [pc, #84]	@ (8007644 <HAL_InitTick+0x6c>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b13      	ldr	r3, [pc, #76]	@ (8007640 <HAL_InitTick+0x68>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80075f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80075fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007600:	4618      	mov	r0, r3
 8007602:	f001 fdbc 	bl	800917e <HAL_SYSTICK_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10f      	bne.n	800762c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d809      	bhi.n	8007626 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007612:	2200      	movs	r2, #0
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	f04f 30ff 	mov.w	r0, #4294967295
 800761a:	f001 fd88 	bl	800912e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800761e:	4a0a      	ldr	r2, [pc, #40]	@ (8007648 <HAL_InitTick+0x70>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e007      	b.n	8007636 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	e004      	b.n	8007636 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	e001      	b.n	8007636 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000104 	.word	0x20000104
 8007644:	200000fc 	.word	0x200000fc
 8007648:	20000100 	.word	0x20000100

0800764c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <HAL_IncTick+0x1c>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b05      	ldr	r3, [pc, #20]	@ (800766c <HAL_IncTick+0x20>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4413      	add	r3, r2
 800765a:	4a03      	ldr	r2, [pc, #12]	@ (8007668 <HAL_IncTick+0x1c>)
 800765c:	6013      	str	r3, [r2, #0]
}
 800765e:	bf00      	nop
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	20002100 	.word	0x20002100
 800766c:	20000104 	.word	0x20000104

08007670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return uwTick;
 8007674:	4b03      	ldr	r3, [pc, #12]	@ (8007684 <HAL_GetTick+0x14>)
 8007676:	681b      	ldr	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20002100 	.word	0x20002100

08007688 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	609a      	str	r2, [r3, #8]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3360      	adds	r3, #96	@ 0x60
 8007702:	461a      	mov	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	4b08      	ldr	r3, [pc, #32]	@ (8007734 <LL_ADC_SetOffset+0x44>)
 8007712:	4013      	ands	r3, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	4313      	orrs	r3, r2
 8007720:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	03fff000 	.word	0x03fff000

08007738 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3360      	adds	r3, #96	@ 0x60
 8007746:	461a      	mov	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3360      	adds	r3, #96	@ 0x60
 8007774:	461a      	mov	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	431a      	orrs	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800779a:	b480      	push	{r7}
 800779c:	b087      	sub	sp, #28
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3360      	adds	r3, #96	@ 0x60
 80077aa:	461a      	mov	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	431a      	orrs	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3360      	adds	r3, #96	@ 0x60
 80077e0:	461a      	mov	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	615a      	str	r2, [r3, #20]
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007840:	2301      	movs	r3, #1
 8007842:	e000      	b.n	8007846 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007852:	b480      	push	{r7}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3330      	adds	r3, #48	@ 0x30
 8007862:	461a      	mov	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	4413      	add	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	211f      	movs	r1, #31
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	401a      	ands	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	0e9b      	lsrs	r3, r3, #26
 800788a:	f003 011f 	and.w	r1, r3, #31
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	fa01 f303 	lsl.w	r3, r1, r3
 8007898:	431a      	orrs	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b087      	sub	sp, #28
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3314      	adds	r3, #20
 80078ba:	461a      	mov	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	0e5b      	lsrs	r3, r3, #25
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	4413      	add	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	0d1b      	lsrs	r3, r3, #20
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	2107      	movs	r1, #7
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	401a      	ands	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	0d1b      	lsrs	r3, r3, #20
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	fa01 f303 	lsl.w	r3, r1, r3
 80078ee:	431a      	orrs	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007918:	43db      	mvns	r3, r3
 800791a:	401a      	ands	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f003 0318 	and.w	r3, r3, #24
 8007922:	4908      	ldr	r1, [pc, #32]	@ (8007944 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007924:	40d9      	lsrs	r1, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	400b      	ands	r3, r1
 800792a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792e:	431a      	orrs	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	0007ffff 	.word	0x0007ffff

08007948 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 031f 	and.w	r3, r3, #31
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6093      	str	r3, [r2, #8]
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799c:	d101      	bne.n	80079a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80079c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80079c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ec:	d101      	bne.n	80079f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e000      	b.n	80079f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007a14:	f043 0201 	orr.w	r2, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007a3c:	f043 0202 	orr.w	r2, r3, #2
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <LL_ADC_IsEnabled+0x18>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <LL_ADC_IsEnabled+0x1a>
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d101      	bne.n	8007a8e <LL_ADC_IsDisableOngoing+0x18>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <LL_ADC_IsDisableOngoing+0x1a>
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007ab0:	f043 0204 	orr.w	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d101      	bne.n	8007adc <LL_ADC_REG_IsConversionOngoing+0x18>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d101      	bne.n	8007b02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b10:	b590      	push	{r4, r7, lr}
 8007b12:	b089      	sub	sp, #36	@ 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e1a9      	b.n	8007e7e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d109      	bne.n	8007b4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fc fdff 	bl	800473c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff ff19 	bl	8007988 <LL_ADC_IsDeepPowerDownEnabled>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff feff 	bl	8007964 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff ff34 	bl	80079d8 <LL_ADC_IsInternalRegulatorEnabled>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d115      	bne.n	8007ba2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff ff18 	bl	80079b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b80:	4b9c      	ldr	r3, [pc, #624]	@ (8007df4 <HAL_ADC_Init+0x2e4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	099b      	lsrs	r3, r3, #6
 8007b86:	4a9c      	ldr	r2, [pc, #624]	@ (8007df8 <HAL_ADC_Init+0x2e8>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	099b      	lsrs	r3, r3, #6
 8007b8e:	3301      	adds	r3, #1
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007b94:	e002      	b.n	8007b9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f9      	bne.n	8007b96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff ff16 	bl	80079d8 <LL_ADC_IsInternalRegulatorEnabled>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10d      	bne.n	8007bce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb6:	f043 0210 	orr.w	r2, r3, #16
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc2:	f043 0201 	orr.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff ff76 	bl	8007ac4 <LL_ADC_REG_IsConversionOngoing>
 8007bd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8142 	bne.w	8007e6c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f040 813e 	bne.w	8007e6c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007bf8:	f043 0202 	orr.w	r2, r3, #2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff ff23 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d141      	bne.n	8007c94 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c18:	d004      	beq.n	8007c24 <HAL_ADC_Init+0x114>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a77      	ldr	r2, [pc, #476]	@ (8007dfc <HAL_ADC_Init+0x2ec>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10f      	bne.n	8007c44 <HAL_ADC_Init+0x134>
 8007c24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007c28:	f7ff ff12 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4873      	ldr	r0, [pc, #460]	@ (8007dfc <HAL_ADC_Init+0x2ec>)
 8007c30:	f7ff ff0e 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4323      	orrs	r3, r4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	e012      	b.n	8007c6a <HAL_ADC_Init+0x15a>
 8007c44:	486e      	ldr	r0, [pc, #440]	@ (8007e00 <HAL_ADC_Init+0x2f0>)
 8007c46:	f7ff ff03 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	486d      	ldr	r0, [pc, #436]	@ (8007e04 <HAL_ADC_Init+0x2f4>)
 8007c4e:	f7ff feff 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c52:	4603      	mov	r3, r0
 8007c54:	431c      	orrs	r4, r3
 8007c56:	486c      	ldr	r0, [pc, #432]	@ (8007e08 <HAL_ADC_Init+0x2f8>)
 8007c58:	f7ff fefa 	bl	8007a50 <LL_ADC_IsEnabled>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4323      	orrs	r3, r4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c76:	d004      	beq.n	8007c82 <HAL_ADC_Init+0x172>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8007dfc <HAL_ADC_Init+0x2ec>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d101      	bne.n	8007c86 <HAL_ADC_Init+0x176>
 8007c82:	4a62      	ldr	r2, [pc, #392]	@ (8007e0c <HAL_ADC_Init+0x2fc>)
 8007c84:	e000      	b.n	8007c88 <HAL_ADC_Init+0x178>
 8007c86:	4a62      	ldr	r2, [pc, #392]	@ (8007e10 <HAL_ADC_Init+0x300>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7ff fcfa 	bl	8007688 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7f5b      	ldrb	r3, [r3, #29]
 8007c98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007c9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007ca4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007caa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007cb2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d106      	bne.n	8007cd0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	045b      	lsls	r3, r3, #17
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	4b48      	ldr	r3, [pc, #288]	@ (8007e14 <HAL_ADC_Init+0x304>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	69b9      	ldr	r1, [r7, #24]
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fee5 	bl	8007aea <LL_ADC_INJ_IsConversionOngoing>
 8007d20:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d17f      	bne.n	8007e28 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d17c      	bne.n	8007e28 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d4a:	f023 0302 	bic.w	r3, r3, #2
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6812      	ldr	r2, [r2, #0]
 8007d52:	69b9      	ldr	r1, [r7, #24]
 8007d54:	430b      	orrs	r3, r1
 8007d56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d017      	beq.n	8007d90 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6911      	ldr	r1, [r2, #16]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8007d8e:	e013      	b.n	8007db8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007d9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007db4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d12a      	bne.n	8007e18 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007dcc:	f023 0304 	bic.w	r3, r3, #4
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007dd8:	4311      	orrs	r1, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007de4:	430a      	orrs	r2, r1
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0201 	orr.w	r2, r2, #1
 8007df0:	611a      	str	r2, [r3, #16]
 8007df2:	e019      	b.n	8007e28 <HAL_ADC_Init+0x318>
 8007df4:	200000fc 	.word	0x200000fc
 8007df8:	053e2d63 	.word	0x053e2d63
 8007dfc:	50000100 	.word	0x50000100
 8007e00:	50000400 	.word	0x50000400
 8007e04:	50000500 	.word	0x50000500
 8007e08:	50000600 	.word	0x50000600
 8007e0c:	50000300 	.word	0x50000300
 8007e10:	50000700 	.word	0x50000700
 8007e14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d10c      	bne.n	8007e4a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e36:	f023 010f 	bic.w	r1, r3, #15
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e48:	e007      	b.n	8007e5a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 020f 	bic.w	r2, r2, #15
 8007e58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007e6a:	e007      	b.n	8007e7c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e70:	f043 0210 	orr.w	r2, r3, #16
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3724      	adds	r7, #36	@ 0x24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd90      	pop	{r4, r7, pc}
 8007e86:	bf00      	nop

08007e88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e9c:	d004      	beq.n	8007ea8 <HAL_ADC_Start_DMA+0x20>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a5a      	ldr	r2, [pc, #360]	@ (800800c <HAL_ADC_Start_DMA+0x184>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d101      	bne.n	8007eac <HAL_ADC_Start_DMA+0x24>
 8007ea8:	4b59      	ldr	r3, [pc, #356]	@ (8008010 <HAL_ADC_Start_DMA+0x188>)
 8007eaa:	e000      	b.n	8007eae <HAL_ADC_Start_DMA+0x26>
 8007eac:	4b59      	ldr	r3, [pc, #356]	@ (8008014 <HAL_ADC_Start_DMA+0x18c>)
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fd4a 	bl	8007948 <LL_ADC_GetMultimode>
 8007eb4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fe02 	bl	8007ac4 <LL_ADC_REG_IsConversionOngoing>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 809b 	bne.w	8007ffe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d101      	bne.n	8007ed6 <HAL_ADC_Start_DMA+0x4e>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e096      	b.n	8008004 <HAL_ADC_Start_DMA+0x17c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a4d      	ldr	r2, [pc, #308]	@ (8008018 <HAL_ADC_Start_DMA+0x190>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d008      	beq.n	8007efa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b05      	cmp	r3, #5
 8007ef2:	d002      	beq.n	8007efa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d17a      	bne.n	8007ff0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 fcf6 	bl	80088ec <ADC_Enable>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d16d      	bne.n	8007fe6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f12:	f023 0301 	bic.w	r3, r3, #1
 8007f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3a      	ldr	r2, [pc, #232]	@ (800800c <HAL_ADC_Start_DMA+0x184>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_ADC_Start_DMA+0xb4>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800801c <HAL_ADC_Start_DMA+0x194>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d002      	beq.n	8007f38 <HAL_ADC_Start_DMA+0xb0>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	e003      	b.n	8007f40 <HAL_ADC_Start_DMA+0xb8>
 8007f38:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <HAL_ADC_Start_DMA+0x198>)
 8007f3a:	e001      	b.n	8007f40 <HAL_ADC_Start_DMA+0xb8>
 8007f3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d002      	beq.n	8007f4e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d006      	beq.n	8007f74 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6a:	f023 0206 	bic.w	r2, r3, #6
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f72:	e002      	b.n	8007f7a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7e:	4a29      	ldr	r2, [pc, #164]	@ (8008024 <HAL_ADC_Start_DMA+0x19c>)
 8007f80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f86:	4a28      	ldr	r2, [pc, #160]	@ (8008028 <HAL_ADC_Start_DMA+0x1a0>)
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f8e:	4a27      	ldr	r2, [pc, #156]	@ (800802c <HAL_ADC_Start_DMA+0x1a4>)
 8007f90:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	221c      	movs	r2, #28
 8007f98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0210 	orr.w	r2, r2, #16
 8007fb0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0201 	orr.w	r2, r2, #1
 8007fc0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3340      	adds	r3, #64	@ 0x40
 8007fcc:	4619      	mov	r1, r3
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f001 f989 	bl	80092e8 <HAL_DMA_Start_IT>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd5c 	bl	8007a9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007fe4:	e00d      	b.n	8008002 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007fee:	e008      	b.n	8008002 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007ffc:	e001      	b.n	8008002 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
 8008000:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	50000100 	.word	0x50000100
 8008010:	50000300 	.word	0x50000300
 8008014:	50000700 	.word	0x50000700
 8008018:	50000600 	.word	0x50000600
 800801c:	50000500 	.word	0x50000500
 8008020:	50000400 	.word	0x50000400
 8008024:	08008ad7 	.word	0x08008ad7
 8008028:	08008baf 	.word	0x08008baf
 800802c:	08008bcb 	.word	0x08008bcb

08008030 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0b6      	sub	sp, #216	@ 0xd8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008086:	2b01      	cmp	r3, #1
 8008088:	d102      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x24>
 800808a:	2302      	movs	r3, #2
 800808c:	f000 bc13 	b.w	80088b6 <HAL_ADC_ConfigChannel+0x84a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff fd11 	bl	8007ac4 <LL_ADC_REG_IsConversionOngoing>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 83f3 	bne.w	8008890 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f7ff fbcb 	bl	8007852 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fcff 	bl	8007ac4 <LL_ADC_REG_IsConversionOngoing>
 80080c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff fd0b 	bl	8007aea <LL_ADC_INJ_IsConversionOngoing>
 80080d4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80080d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 81d9 	bne.w	8008494 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80080e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f040 81d4 	bne.w	8008494 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080f4:	d10f      	bne.n	8008116 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	4619      	mov	r1, r3
 8008102:	f7ff fbd2 	bl	80078aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fb79 	bl	8007806 <LL_ADC_SetSamplingTimeCommonConfig>
 8008114:	e00e      	b.n	8008134 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6819      	ldr	r1, [r3, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	461a      	mov	r2, r3
 8008124:	f7ff fbc1 	bl	80078aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fb69 	bl	8007806 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695a      	ldr	r2, [r3, #20]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	08db      	lsrs	r3, r3, #3
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d022      	beq.n	800819c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6919      	ldr	r1, [r3, #16]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008166:	f7ff fac3 	bl	80076f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6919      	ldr	r1, [r3, #16]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	461a      	mov	r2, r3
 8008178:	f7ff fb0f 	bl	800779a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008188:	2b01      	cmp	r3, #1
 800818a:	d102      	bne.n	8008192 <HAL_ADC_ConfigChannel+0x126>
 800818c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008190:	e000      	b.n	8008194 <HAL_ADC_ConfigChannel+0x128>
 8008192:	2300      	movs	r3, #0
 8008194:	461a      	mov	r2, r3
 8008196:	f7ff fb1b 	bl	80077d0 <LL_ADC_SetOffsetSaturation>
 800819a:	e17b      	b.n	8008494 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fac8 	bl	8007738 <LL_ADC_GetOffsetChannel>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <HAL_ADC_ConfigChannel+0x15c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fabd 	bl	8007738 <LL_ADC_GetOffsetChannel>
 80081be:	4603      	mov	r3, r0
 80081c0:	0e9b      	lsrs	r3, r3, #26
 80081c2:	f003 021f 	and.w	r2, r3, #31
 80081c6:	e01e      	b.n	8008206 <HAL_ADC_ConfigChannel+0x19a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fab2 	bl	8007738 <LL_ADC_GetOffsetChannel>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081de:	fa93 f3a3 	rbit	r3, r3
 80081e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80081e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80081ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80081f6:	2320      	movs	r3, #32
 80081f8:	e004      	b.n	8008204 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80081fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081fe:	fab3 f383 	clz	r3, r3
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800820e:	2b00      	cmp	r3, #0
 8008210:	d105      	bne.n	800821e <HAL_ADC_ConfigChannel+0x1b2>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	0e9b      	lsrs	r3, r3, #26
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	e018      	b.n	8008250 <HAL_ADC_ConfigChannel+0x1e4>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800822a:	fa93 f3a3 	rbit	r3, r3
 800822e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8008232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800823a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8008242:	2320      	movs	r3, #32
 8008244:	e004      	b.n	8008250 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8008246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800824a:	fab3 f383 	clz	r3, r3
 800824e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008250:	429a      	cmp	r2, r3
 8008252:	d106      	bne.n	8008262 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2200      	movs	r2, #0
 800825a:	2100      	movs	r1, #0
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fa81 	bl	8007764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fa65 	bl	8007738 <LL_ADC_GetOffsetChannel>
 800826e:	4603      	mov	r3, r0
 8008270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <HAL_ADC_ConfigChannel+0x222>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fa5a 	bl	8007738 <LL_ADC_GetOffsetChannel>
 8008284:	4603      	mov	r3, r0
 8008286:	0e9b      	lsrs	r3, r3, #26
 8008288:	f003 021f 	and.w	r2, r3, #31
 800828c:	e01e      	b.n	80082cc <HAL_ADC_ConfigChannel+0x260>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff fa4f 	bl	8007738 <LL_ADC_GetOffsetChannel>
 800829a:	4603      	mov	r3, r0
 800829c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082a4:	fa93 f3a3 	rbit	r3, r3
 80082a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80082ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80082b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80082bc:	2320      	movs	r3, #32
 80082be:	e004      	b.n	80082ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80082c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082c4:	fab3 f383 	clz	r3, r3
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <HAL_ADC_ConfigChannel+0x278>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	0e9b      	lsrs	r3, r3, #26
 80082de:	f003 031f 	and.w	r3, r3, #31
 80082e2:	e018      	b.n	8008316 <HAL_ADC_ConfigChannel+0x2aa>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f0:	fa93 f3a3 	rbit	r3, r3
 80082f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80082f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008308:	2320      	movs	r3, #32
 800830a:	e004      	b.n	8008316 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800830c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008310:	fab3 f383 	clz	r3, r3
 8008314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008316:	429a      	cmp	r2, r3
 8008318:	d106      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff fa1e 	bl	8007764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2102      	movs	r1, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fa02 	bl	8007738 <LL_ADC_GetOffsetChannel>
 8008334:	4603      	mov	r3, r0
 8008336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <HAL_ADC_ConfigChannel+0x2e8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2102      	movs	r1, #2
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff f9f7 	bl	8007738 <LL_ADC_GetOffsetChannel>
 800834a:	4603      	mov	r3, r0
 800834c:	0e9b      	lsrs	r3, r3, #26
 800834e:	f003 021f 	and.w	r2, r3, #31
 8008352:	e01e      	b.n	8008392 <HAL_ADC_ConfigChannel+0x326>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2102      	movs	r1, #2
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff f9ec 	bl	8007738 <LL_ADC_GetOffsetChannel>
 8008360:	4603      	mov	r3, r0
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800836a:	fa93 f3a3 	rbit	r3, r3
 800836e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008372:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800837a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008382:	2320      	movs	r3, #32
 8008384:	e004      	b.n	8008390 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008386:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800838a:	fab3 f383 	clz	r3, r3
 800838e:	b2db      	uxtb	r3, r3
 8008390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <HAL_ADC_ConfigChannel+0x33e>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	0e9b      	lsrs	r3, r3, #26
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	e016      	b.n	80083d8 <HAL_ADC_ConfigChannel+0x36c>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083b6:	fa93 f3a3 	rbit	r3, r3
 80083ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80083bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80083c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80083ca:	2320      	movs	r3, #32
 80083cc:	e004      	b.n	80083d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80083ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083d2:	fab3 f383 	clz	r3, r3
 80083d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80083d8:	429a      	cmp	r2, r3
 80083da:	d106      	bne.n	80083ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	2102      	movs	r1, #2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f9bd 	bl	8007764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2103      	movs	r1, #3
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff f9a1 	bl	8007738 <LL_ADC_GetOffsetChannel>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <HAL_ADC_ConfigChannel+0x3aa>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2103      	movs	r1, #3
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff f996 	bl	8007738 <LL_ADC_GetOffsetChannel>
 800840c:	4603      	mov	r3, r0
 800840e:	0e9b      	lsrs	r3, r3, #26
 8008410:	f003 021f 	and.w	r2, r3, #31
 8008414:	e017      	b.n	8008446 <HAL_ADC_ConfigChannel+0x3da>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2103      	movs	r1, #3
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff f98b 	bl	8007738 <LL_ADC_GetOffsetChannel>
 8008422:	4603      	mov	r3, r0
 8008424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008428:	fa93 f3a3 	rbit	r3, r3
 800842c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800842e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008430:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008432:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008438:	2320      	movs	r3, #32
 800843a:	e003      	b.n	8008444 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800843c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800843e:	fab3 f383 	clz	r3, r3
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800844e:	2b00      	cmp	r3, #0
 8008450:	d105      	bne.n	800845e <HAL_ADC_ConfigChannel+0x3f2>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	0e9b      	lsrs	r3, r3, #26
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	e011      	b.n	8008482 <HAL_ADC_ConfigChannel+0x416>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008466:	fa93 f3a3 	rbit	r3, r3
 800846a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800846c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800846e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008476:	2320      	movs	r3, #32
 8008478:	e003      	b.n	8008482 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800847a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847c:	fab3 f383 	clz	r3, r3
 8008480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008482:	429a      	cmp	r2, r3
 8008484:	d106      	bne.n	8008494 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	2103      	movs	r1, #3
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff f968 	bl	8007764 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fad9 	bl	8007a50 <LL_ADC_IsEnabled>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 813d 	bne.w	8008720 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7ff fa24 	bl	8007900 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4aa2      	ldr	r2, [pc, #648]	@ (8008748 <HAL_ADC_ConfigChannel+0x6dc>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	f040 812e 	bne.w	8008720 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <HAL_ADC_ConfigChannel+0x480>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	0e9b      	lsrs	r3, r3, #26
 80084da:	3301      	adds	r3, #1
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	bf94      	ite	ls
 80084e4:	2301      	movls	r3, #1
 80084e6:	2300      	movhi	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e019      	b.n	8008520 <HAL_ADC_ConfigChannel+0x4b4>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084f4:	fa93 f3a3 	rbit	r3, r3
 80084f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80084fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80084fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008504:	2320      	movs	r3, #32
 8008506:	e003      	b.n	8008510 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008508:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800850a:	fab3 f383 	clz	r3, r3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	3301      	adds	r3, #1
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	2b09      	cmp	r3, #9
 8008518:	bf94      	ite	ls
 800851a:	2301      	movls	r3, #1
 800851c:	2300      	movhi	r3, #0
 800851e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008520:	2b00      	cmp	r3, #0
 8008522:	d079      	beq.n	8008618 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800852c:	2b00      	cmp	r3, #0
 800852e:	d107      	bne.n	8008540 <HAL_ADC_ConfigChannel+0x4d4>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	0e9b      	lsrs	r3, r3, #26
 8008536:	3301      	adds	r3, #1
 8008538:	069b      	lsls	r3, r3, #26
 800853a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800853e:	e015      	b.n	800856c <HAL_ADC_ConfigChannel+0x500>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008548:	fa93 f3a3 	rbit	r3, r3
 800854c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800854e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008550:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008558:	2320      	movs	r3, #32
 800855a:	e003      	b.n	8008564 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800855c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800855e:	fab3 f383 	clz	r3, r3
 8008562:	b2db      	uxtb	r3, r3
 8008564:	3301      	adds	r3, #1
 8008566:	069b      	lsls	r3, r3, #26
 8008568:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008574:	2b00      	cmp	r3, #0
 8008576:	d109      	bne.n	800858c <HAL_ADC_ConfigChannel+0x520>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	0e9b      	lsrs	r3, r3, #26
 800857e:	3301      	adds	r3, #1
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f303 	lsl.w	r3, r1, r3
 800858a:	e017      	b.n	80085bc <HAL_ADC_ConfigChannel+0x550>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008594:	fa93 f3a3 	rbit	r3, r3
 8008598:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800859a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800859c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800859e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80085a4:	2320      	movs	r3, #32
 80085a6:	e003      	b.n	80085b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80085a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085aa:	fab3 f383 	clz	r3, r3
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	3301      	adds	r3, #1
 80085b2:	f003 031f 	and.w	r3, r3, #31
 80085b6:	2101      	movs	r1, #1
 80085b8:	fa01 f303 	lsl.w	r3, r1, r3
 80085bc:	ea42 0103 	orr.w	r1, r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <HAL_ADC_ConfigChannel+0x576>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	0e9b      	lsrs	r3, r3, #26
 80085d2:	3301      	adds	r3, #1
 80085d4:	f003 021f 	and.w	r2, r3, #31
 80085d8:	4613      	mov	r3, r2
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	4413      	add	r3, r2
 80085de:	051b      	lsls	r3, r3, #20
 80085e0:	e018      	b.n	8008614 <HAL_ADC_ConfigChannel+0x5a8>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	fa93 f3a3 	rbit	r3, r3
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80085f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80085f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80085fa:	2320      	movs	r3, #32
 80085fc:	e003      	b.n	8008606 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008600:	fab3 f383 	clz	r3, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	3301      	adds	r3, #1
 8008608:	f003 021f 	and.w	r2, r3, #31
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008614:	430b      	orrs	r3, r1
 8008616:	e07e      	b.n	8008716 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008620:	2b00      	cmp	r3, #0
 8008622:	d107      	bne.n	8008634 <HAL_ADC_ConfigChannel+0x5c8>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	0e9b      	lsrs	r3, r3, #26
 800862a:	3301      	adds	r3, #1
 800862c:	069b      	lsls	r3, r3, #26
 800862e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008632:	e015      	b.n	8008660 <HAL_ADC_ConfigChannel+0x5f4>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	fa93 f3a3 	rbit	r3, r3
 8008640:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800864c:	2320      	movs	r3, #32
 800864e:	e003      	b.n	8008658 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	fab3 f383 	clz	r3, r3
 8008656:	b2db      	uxtb	r3, r3
 8008658:	3301      	adds	r3, #1
 800865a:	069b      	lsls	r3, r3, #26
 800865c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_ADC_ConfigChannel+0x614>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	0e9b      	lsrs	r3, r3, #26
 8008672:	3301      	adds	r3, #1
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f303 	lsl.w	r3, r1, r3
 800867e:	e017      	b.n	80086b0 <HAL_ADC_ConfigChannel+0x644>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	fa93 f3a3 	rbit	r3, r3
 800868c:	61fb      	str	r3, [r7, #28]
  return result;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008698:	2320      	movs	r3, #32
 800869a:	e003      	b.n	80086a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	fab3 f383 	clz	r3, r3
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	3301      	adds	r3, #1
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	2101      	movs	r1, #1
 80086ac:	fa01 f303 	lsl.w	r3, r1, r3
 80086b0:	ea42 0103 	orr.w	r1, r2, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10d      	bne.n	80086dc <HAL_ADC_ConfigChannel+0x670>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	0e9b      	lsrs	r3, r3, #26
 80086c6:	3301      	adds	r3, #1
 80086c8:	f003 021f 	and.w	r2, r3, #31
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	3b1e      	subs	r3, #30
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086da:	e01b      	b.n	8008714 <HAL_ADC_ConfigChannel+0x6a8>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	fa93 f3a3 	rbit	r3, r3
 80086e8:	613b      	str	r3, [r7, #16]
  return result;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80086f4:	2320      	movs	r3, #32
 80086f6:	e003      	b.n	8008700 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	fab3 f383 	clz	r3, r3
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	3301      	adds	r3, #1
 8008702:	f003 021f 	and.w	r2, r3, #31
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	3b1e      	subs	r3, #30
 800870e:	051b      	lsls	r3, r3, #20
 8008710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008714:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800871a:	4619      	mov	r1, r3
 800871c:	f7ff f8c5 	bl	80078aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	4b09      	ldr	r3, [pc, #36]	@ (800874c <HAL_ADC_ConfigChannel+0x6e0>)
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80be 	beq.w	80088aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008736:	d004      	beq.n	8008742 <HAL_ADC_ConfigChannel+0x6d6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a04      	ldr	r2, [pc, #16]	@ (8008750 <HAL_ADC_ConfigChannel+0x6e4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d10a      	bne.n	8008758 <HAL_ADC_ConfigChannel+0x6ec>
 8008742:	4b04      	ldr	r3, [pc, #16]	@ (8008754 <HAL_ADC_ConfigChannel+0x6e8>)
 8008744:	e009      	b.n	800875a <HAL_ADC_ConfigChannel+0x6ee>
 8008746:	bf00      	nop
 8008748:	407f0000 	.word	0x407f0000
 800874c:	80080000 	.word	0x80080000
 8008750:	50000100 	.word	0x50000100
 8008754:	50000300 	.word	0x50000300
 8008758:	4b59      	ldr	r3, [pc, #356]	@ (80088c0 <HAL_ADC_ConfigChannel+0x854>)
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe ffba 	bl	80076d4 <LL_ADC_GetCommonPathInternalCh>
 8008760:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a56      	ldr	r2, [pc, #344]	@ (80088c4 <HAL_ADC_ConfigChannel+0x858>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d004      	beq.n	8008778 <HAL_ADC_ConfigChannel+0x70c>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a55      	ldr	r2, [pc, #340]	@ (80088c8 <HAL_ADC_ConfigChannel+0x85c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d13a      	bne.n	80087ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800877c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d134      	bne.n	80087ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800878c:	d005      	beq.n	800879a <HAL_ADC_ConfigChannel+0x72e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a4e      	ldr	r2, [pc, #312]	@ (80088cc <HAL_ADC_ConfigChannel+0x860>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f040 8085 	bne.w	80088a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087a2:	d004      	beq.n	80087ae <HAL_ADC_ConfigChannel+0x742>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a49      	ldr	r2, [pc, #292]	@ (80088d0 <HAL_ADC_ConfigChannel+0x864>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d101      	bne.n	80087b2 <HAL_ADC_ConfigChannel+0x746>
 80087ae:	4a49      	ldr	r2, [pc, #292]	@ (80088d4 <HAL_ADC_ConfigChannel+0x868>)
 80087b0:	e000      	b.n	80087b4 <HAL_ADC_ConfigChannel+0x748>
 80087b2:	4a43      	ldr	r2, [pc, #268]	@ (80088c0 <HAL_ADC_ConfigChannel+0x854>)
 80087b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7fe ff75 	bl	80076ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80087c4:	4b44      	ldr	r3, [pc, #272]	@ (80088d8 <HAL_ADC_ConfigChannel+0x86c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	099b      	lsrs	r3, r3, #6
 80087ca:	4a44      	ldr	r2, [pc, #272]	@ (80088dc <HAL_ADC_ConfigChannel+0x870>)
 80087cc:	fba2 2303 	umull	r2, r3, r2, r3
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087de:	e002      	b.n	80087e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f9      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80087ec:	e05a      	b.n	80088a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a3b      	ldr	r2, [pc, #236]	@ (80088e0 <HAL_ADC_ConfigChannel+0x874>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d125      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80087f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11f      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a31      	ldr	r2, [pc, #196]	@ (80088d0 <HAL_ADC_ConfigChannel+0x864>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d104      	bne.n	8008818 <HAL_ADC_ConfigChannel+0x7ac>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a34      	ldr	r2, [pc, #208]	@ (80088e4 <HAL_ADC_ConfigChannel+0x878>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d047      	beq.n	80088a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008820:	d004      	beq.n	800882c <HAL_ADC_ConfigChannel+0x7c0>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2a      	ldr	r2, [pc, #168]	@ (80088d0 <HAL_ADC_ConfigChannel+0x864>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d101      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x7c4>
 800882c:	4a29      	ldr	r2, [pc, #164]	@ (80088d4 <HAL_ADC_ConfigChannel+0x868>)
 800882e:	e000      	b.n	8008832 <HAL_ADC_ConfigChannel+0x7c6>
 8008830:	4a23      	ldr	r2, [pc, #140]	@ (80088c0 <HAL_ADC_ConfigChannel+0x854>)
 8008832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fe ff36 	bl	80076ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008842:	e031      	b.n	80088a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a27      	ldr	r2, [pc, #156]	@ (80088e8 <HAL_ADC_ConfigChannel+0x87c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d12d      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800884e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d127      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1c      	ldr	r2, [pc, #112]	@ (80088d0 <HAL_ADC_ConfigChannel+0x864>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d022      	beq.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886c:	d004      	beq.n	8008878 <HAL_ADC_ConfigChannel+0x80c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a17      	ldr	r2, [pc, #92]	@ (80088d0 <HAL_ADC_ConfigChannel+0x864>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d101      	bne.n	800887c <HAL_ADC_ConfigChannel+0x810>
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_ADC_ConfigChannel+0x868>)
 800887a:	e000      	b.n	800887e <HAL_ADC_ConfigChannel+0x812>
 800887c:	4a10      	ldr	r2, [pc, #64]	@ (80088c0 <HAL_ADC_ConfigChannel+0x854>)
 800887e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008882:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe ff10 	bl	80076ae <LL_ADC_SetCommonPathInternalCh>
 800888e:	e00c      	b.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008894:	f043 0220 	orr.w	r2, r3, #32
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80088a2:	e002      	b.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80088b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	37d8      	adds	r7, #216	@ 0xd8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	50000700 	.word	0x50000700
 80088c4:	c3210000 	.word	0xc3210000
 80088c8:	90c00010 	.word	0x90c00010
 80088cc:	50000600 	.word	0x50000600
 80088d0:	50000100 	.word	0x50000100
 80088d4:	50000300 	.word	0x50000300
 80088d8:	200000fc 	.word	0x200000fc
 80088dc:	053e2d63 	.word	0x053e2d63
 80088e0:	c7520000 	.word	0xc7520000
 80088e4:	50000500 	.word	0x50000500
 80088e8:	cb840000 	.word	0xcb840000

080088ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff f8a7 	bl	8007a50 <LL_ADC_IsEnabled>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d176      	bne.n	80089f6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a00 <ADC_Enable+0x114>)
 8008910:	4013      	ands	r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	f043 0210 	orr.w	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e062      	b.n	80089f8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff f862 	bl	8007a00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008944:	d004      	beq.n	8008950 <ADC_Enable+0x64>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2e      	ldr	r2, [pc, #184]	@ (8008a04 <ADC_Enable+0x118>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d101      	bne.n	8008954 <ADC_Enable+0x68>
 8008950:	4b2d      	ldr	r3, [pc, #180]	@ (8008a08 <ADC_Enable+0x11c>)
 8008952:	e000      	b.n	8008956 <ADC_Enable+0x6a>
 8008954:	4b2d      	ldr	r3, [pc, #180]	@ (8008a0c <ADC_Enable+0x120>)
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe febc 	bl	80076d4 <LL_ADC_GetCommonPathInternalCh>
 800895c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800895e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008962:	2b00      	cmp	r3, #0
 8008964:	d013      	beq.n	800898e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008966:	4b2a      	ldr	r3, [pc, #168]	@ (8008a10 <ADC_Enable+0x124>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	099b      	lsrs	r3, r3, #6
 800896c:	4a29      	ldr	r2, [pc, #164]	@ (8008a14 <ADC_Enable+0x128>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	099b      	lsrs	r3, r3, #6
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008980:	e002      	b.n	8008988 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3b01      	subs	r3, #1
 8008986:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f9      	bne.n	8008982 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800898e:	f7fe fe6f 	bl	8007670 <HAL_GetTick>
 8008992:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008994:	e028      	b.n	80089e8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff f858 	bl	8007a50 <LL_ADC_IsEnabled>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff f828 	bl	8007a00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80089b0:	f7fe fe5e 	bl	8007670 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d914      	bls.n	80089e8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d00d      	beq.n	80089e8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d0:	f043 0210 	orr.w	r2, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089dc:	f043 0201 	orr.w	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e007      	b.n	80089f8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d1cf      	bne.n	8008996 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	8000003f 	.word	0x8000003f
 8008a04:	50000100 	.word	0x50000100
 8008a08:	50000300 	.word	0x50000300
 8008a0c:	50000700 	.word	0x50000700
 8008a10:	200000fc 	.word	0x200000fc
 8008a14:	053e2d63 	.word	0x053e2d63

08008a18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff f826 	bl	8007a76 <LL_ADC_IsDisableOngoing>
 8008a2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff f80d 	bl	8007a50 <LL_ADC_IsEnabled>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d047      	beq.n	8008acc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d144      	bne.n	8008acc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f003 030d 	and.w	r3, r3, #13
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10c      	bne.n	8008a6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe ffe7 	bl	8007a28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2203      	movs	r2, #3
 8008a60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008a62:	f7fe fe05 	bl	8007670 <HAL_GetTick>
 8008a66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008a68:	e029      	b.n	8008abe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6e:	f043 0210 	orr.w	r2, r3, #16
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7a:	f043 0201 	orr.w	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e023      	b.n	8008ace <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008a86:	f7fe fdf3 	bl	8007670 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d914      	bls.n	8008abe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa6:	f043 0210 	orr.w	r2, r3, #16
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e007      	b.n	8008ace <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1dc      	bne.n	8008a86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d14b      	bne.n	8008b88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d021      	beq.n	8008b4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fe8c 	bl	800782c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d032      	beq.n	8008b80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d12b      	bne.n	8008b80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11f      	bne.n	8008b80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b44:	f043 0201 	orr.w	r2, r3, #1
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b4c:	e018      	b.n	8008b80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d111      	bne.n	8008b80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b78:	f043 0201 	orr.w	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fa55 	bl	8008030 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008b86:	e00e      	b.n	8008ba6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff fa5f 	bl	8008058 <HAL_ADC_ErrorCallback>
}
 8008b9a:	e004      	b.n	8008ba6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	4798      	blx	r3
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7ff fa41 	bl	8008044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be8:	f043 0204 	orr.w	r2, r3, #4
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff fa31 	bl	8008058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <LL_ADC_IsEnabled>:
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <LL_ADC_IsEnabled+0x18>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <LL_ADC_IsEnabled+0x1a>
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <LL_ADC_StartCalibration>:
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008c36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	609a      	str	r2, [r3, #8]
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <LL_ADC_IsCalibrationOnGoing>:
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c6a:	d101      	bne.n	8008c70 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <LL_ADC_REG_IsConversionOngoing>:
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d101      	bne.n	8008c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e04d      	b.n	8008d5c <HAL_ADCEx_Calibration_Start+0xb8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fea5 	bl	8008a18 <ADC_Disable>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d136      	bne.n	8008d46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cdc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ce0:	f023 0302 	bic.w	r3, r3, #2
 8008ce4:	f043 0202 	orr.w	r2, r3, #2
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff ff96 	bl	8008c24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008cf8:	e014      	b.n	8008d24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4a18      	ldr	r2, [pc, #96]	@ (8008d64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d90d      	bls.n	8008d24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d0c:	f023 0312 	bic.w	r3, r3, #18
 8008d10:	f043 0210 	orr.w	r2, r3, #16
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e01b      	b.n	8008d5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff ff94 	bl	8008c56 <LL_ADC_IsCalibrationOnGoing>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e2      	bne.n	8008cfa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	f043 0201 	orr.w	r2, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d44:	e005      	b.n	8008d52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d4a:	f043 0210 	orr.w	r2, r3, #16
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	0004de01 	.word	0x0004de01

08008d68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b0a1      	sub	sp, #132	@ 0x84
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e0e7      	b.n	8008f56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008d92:	2300      	movs	r3, #0
 8008d94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d9e:	d102      	bne.n	8008da6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008da0:	4b6f      	ldr	r3, [pc, #444]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	e009      	b.n	8008dba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a6e      	ldr	r2, [pc, #440]	@ (8008f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d102      	bne.n	8008db6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8008db0:	4b6d      	ldr	r3, [pc, #436]	@ (8008f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008db2:	60bb      	str	r3, [r7, #8]
 8008db4:	e001      	b.n	8008dba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008db6:	2300      	movs	r3, #0
 8008db8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dc4:	f043 0220 	orr.w	r2, r3, #32
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e0be      	b.n	8008f56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff ff4f 	bl	8008c7e <LL_ADC_REG_IsConversionOngoing>
 8008de0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff ff49 	bl	8008c7e <LL_ADC_REG_IsConversionOngoing>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f040 80a0 	bne.w	8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f040 809c 	bne.w	8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e04:	d004      	beq.n	8008e10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a55      	ldr	r2, [pc, #340]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d101      	bne.n	8008e14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008e10:	4b56      	ldr	r3, [pc, #344]	@ (8008f6c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e12:	e000      	b.n	8008e16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008e14:	4b56      	ldr	r3, [pc, #344]	@ (8008f70 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008e16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d04b      	beq.n	8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6859      	ldr	r1, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e32:	035b      	lsls	r3, r3, #13
 8008e34:	430b      	orrs	r3, r1
 8008e36:	431a      	orrs	r2, r3
 8008e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e44:	d004      	beq.n	8008e50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a45      	ldr	r2, [pc, #276]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10f      	bne.n	8008e70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008e50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008e54:	f7ff fed3 	bl	8008bfe <LL_ADC_IsEnabled>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4841      	ldr	r0, [pc, #260]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e5c:	f7ff fecf 	bl	8008bfe <LL_ADC_IsEnabled>
 8008e60:	4603      	mov	r3, r0
 8008e62:	4323      	orrs	r3, r4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	e012      	b.n	8008e96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008e70:	483c      	ldr	r0, [pc, #240]	@ (8008f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008e72:	f7ff fec4 	bl	8008bfe <LL_ADC_IsEnabled>
 8008e76:	4604      	mov	r4, r0
 8008e78:	483b      	ldr	r0, [pc, #236]	@ (8008f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008e7a:	f7ff fec0 	bl	8008bfe <LL_ADC_IsEnabled>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	431c      	orrs	r4, r3
 8008e82:	483c      	ldr	r0, [pc, #240]	@ (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008e84:	f7ff febb 	bl	8008bfe <LL_ADC_IsEnabled>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4323      	orrs	r3, r4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d056      	beq.n	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008ea2:	f023 030f 	bic.w	r3, r3, #15
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	6811      	ldr	r1, [r2, #0]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	6892      	ldr	r2, [r2, #8]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008eb6:	e047      	b.n	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ec2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ecc:	d004      	beq.n	8008ed8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a23      	ldr	r2, [pc, #140]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d10f      	bne.n	8008ef8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008ed8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008edc:	f7ff fe8f 	bl	8008bfe <LL_ADC_IsEnabled>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	481f      	ldr	r0, [pc, #124]	@ (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ee4:	f7ff fe8b 	bl	8008bfe <LL_ADC_IsEnabled>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	4323      	orrs	r3, r4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bf0c      	ite	eq
 8008ef0:	2301      	moveq	r3, #1
 8008ef2:	2300      	movne	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e012      	b.n	8008f1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008ef8:	481a      	ldr	r0, [pc, #104]	@ (8008f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008efa:	f7ff fe80 	bl	8008bfe <LL_ADC_IsEnabled>
 8008efe:	4604      	mov	r4, r0
 8008f00:	4819      	ldr	r0, [pc, #100]	@ (8008f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008f02:	f7ff fe7c 	bl	8008bfe <LL_ADC_IsEnabled>
 8008f06:	4603      	mov	r3, r0
 8008f08:	431c      	orrs	r4, r3
 8008f0a:	481a      	ldr	r0, [pc, #104]	@ (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008f0c:	f7ff fe77 	bl	8008bfe <LL_ADC_IsEnabled>
 8008f10:	4603      	mov	r3, r0
 8008f12:	4323      	orrs	r3, r4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bf0c      	ite	eq
 8008f18:	2301      	moveq	r3, #1
 8008f1a:	2300      	movne	r3, #0
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d012      	beq.n	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008f2a:	f023 030f 	bic.w	r3, r3, #15
 8008f2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008f30:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f32:	e009      	b.n	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f38:	f043 0220 	orr.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008f46:	e000      	b.n	8008f4a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3784      	adds	r7, #132	@ 0x84
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	50000100 	.word	0x50000100
 8008f64:	50000400 	.word	0x50000400
 8008f68:	50000500 	.word	0x50000500
 8008f6c:	50000300 	.word	0x50000300
 8008f70:	50000700 	.word	0x50000700
 8008f74:	50000600 	.word	0x50000600

08008f78 <__NVIC_SetPriorityGrouping>:
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f88:	4b0c      	ldr	r3, [pc, #48]	@ (8008fbc <__NVIC_SetPriorityGrouping+0x44>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f94:	4013      	ands	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008faa:	4a04      	ldr	r2, [pc, #16]	@ (8008fbc <__NVIC_SetPriorityGrouping+0x44>)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	60d3      	str	r3, [r2, #12]
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <__NVIC_GetPriorityGrouping>:
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	0a1b      	lsrs	r3, r3, #8
 8008fca:	f003 0307 	and.w	r3, r3, #7
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	e000ed00 	.word	0xe000ed00

08008fdc <__NVIC_EnableIRQ>:
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	db0b      	blt.n	8009006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	f003 021f 	and.w	r2, r3, #31
 8008ff4:	4907      	ldr	r1, [pc, #28]	@ (8009014 <__NVIC_EnableIRQ+0x38>)
 8008ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8009002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	e000e100 	.word	0xe000e100

08009018 <__NVIC_SetPriority>:
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009028:	2b00      	cmp	r3, #0
 800902a:	db0a      	blt.n	8009042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	b2da      	uxtb	r2, r3
 8009030:	490c      	ldr	r1, [pc, #48]	@ (8009064 <__NVIC_SetPriority+0x4c>)
 8009032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009036:	0112      	lsls	r2, r2, #4
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	440b      	add	r3, r1
 800903c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009040:	e00a      	b.n	8009058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	b2da      	uxtb	r2, r3
 8009046:	4908      	ldr	r1, [pc, #32]	@ (8009068 <__NVIC_SetPriority+0x50>)
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	3b04      	subs	r3, #4
 8009050:	0112      	lsls	r2, r2, #4
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	440b      	add	r3, r1
 8009056:	761a      	strb	r2, [r3, #24]
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	e000e100 	.word	0xe000e100
 8009068:	e000ed00 	.word	0xe000ed00

0800906c <NVIC_EncodePriority>:
{
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	@ 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f1c3 0307 	rsb	r3, r3, #7
 8009086:	2b04      	cmp	r3, #4
 8009088:	bf28      	it	cs
 800908a:	2304      	movcs	r3, #4
 800908c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	3304      	adds	r3, #4
 8009092:	2b06      	cmp	r3, #6
 8009094:	d902      	bls.n	800909c <NVIC_EncodePriority+0x30>
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	3b03      	subs	r3, #3
 800909a:	e000      	b.n	800909e <NVIC_EncodePriority+0x32>
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090a0:	f04f 32ff 	mov.w	r2, #4294967295
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	43da      	mvns	r2, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	401a      	ands	r2, r3
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090b4:	f04f 31ff 	mov.w	r1, #4294967295
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	fa01 f303 	lsl.w	r3, r1, r3
 80090be:	43d9      	mvns	r1, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090c4:	4313      	orrs	r3, r2
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3724      	adds	r7, #36	@ 0x24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
	...

080090d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3b01      	subs	r3, #1
 80090e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090e4:	d301      	bcc.n	80090ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090e6:	2301      	movs	r3, #1
 80090e8:	e00f      	b.n	800910a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009114 <SysTick_Config+0x40>)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090f2:	210f      	movs	r1, #15
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	f7ff ff8e 	bl	8009018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090fc:	4b05      	ldr	r3, [pc, #20]	@ (8009114 <SysTick_Config+0x40>)
 80090fe:	2200      	movs	r2, #0
 8009100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009102:	4b04      	ldr	r3, [pc, #16]	@ (8009114 <SysTick_Config+0x40>)
 8009104:	2207      	movs	r2, #7
 8009106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	e000e010 	.word	0xe000e010

08009118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff ff29 	bl	8008f78 <__NVIC_SetPriorityGrouping>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	4603      	mov	r3, r0
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800913c:	f7ff ff40 	bl	8008fc0 <__NVIC_GetPriorityGrouping>
 8009140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7ff ff90 	bl	800906c <NVIC_EncodePriority>
 800914c:	4602      	mov	r2, r0
 800914e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff ff5f 	bl	8009018 <__NVIC_SetPriority>
}
 800915a:	bf00      	nop
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	4603      	mov	r3, r0
 800916a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800916c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff ff33 	bl	8008fdc <__NVIC_EnableIRQ>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff ffa4 	bl	80090d4 <SysTick_Config>
 800918c:	4603      	mov	r3, r0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e08d      	b.n	80092c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	4b47      	ldr	r3, [pc, #284]	@ (80092d0 <HAL_DMA_Init+0x138>)
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d80f      	bhi.n	80091d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b45      	ldr	r3, [pc, #276]	@ (80092d4 <HAL_DMA_Init+0x13c>)
 80091be:	4413      	add	r3, r2
 80091c0:	4a45      	ldr	r2, [pc, #276]	@ (80092d8 <HAL_DMA_Init+0x140>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	091b      	lsrs	r3, r3, #4
 80091c8:	009a      	lsls	r2, r3, #2
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a42      	ldr	r2, [pc, #264]	@ (80092dc <HAL_DMA_Init+0x144>)
 80091d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80091d4:	e00e      	b.n	80091f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	4b40      	ldr	r3, [pc, #256]	@ (80092e0 <HAL_DMA_Init+0x148>)
 80091de:	4413      	add	r3, r2
 80091e0:	4a3d      	ldr	r2, [pc, #244]	@ (80092d8 <HAL_DMA_Init+0x140>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	091b      	lsrs	r3, r3, #4
 80091e8:	009a      	lsls	r2, r3, #2
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a3c      	ldr	r2, [pc, #240]	@ (80092e4 <HAL_DMA_Init+0x14c>)
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800920a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800920e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa76 	bl	8009738 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009254:	d102      	bne.n	800925c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009270:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d010      	beq.n	800929c <HAL_DMA_Init+0x104>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d80c      	bhi.n	800929c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fa96 	bl	80097b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	e008      	b.n	80092ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40020407 	.word	0x40020407
 80092d4:	bffdfff8 	.word	0xbffdfff8
 80092d8:	cccccccd 	.word	0xcccccccd
 80092dc:	40020000 	.word	0x40020000
 80092e0:	bffdfbf8 	.word	0xbffdfbf8
 80092e4:	40020400 	.word	0x40020400

080092e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_DMA_Start_IT+0x20>
 8009304:	2302      	movs	r3, #2
 8009306:	e066      	b.n	80093d6 <HAL_DMA_Start_IT+0xee>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b01      	cmp	r3, #1
 800931a:	d155      	bne.n	80093c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f9bb 	bl	80096bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f042 020e 	orr.w	r2, r2, #14
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e00f      	b.n	8009380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0204 	bic.w	r2, r2, #4
 800936e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 020a 	orr.w	r2, r2, #10
 800937e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800939c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	e005      	b.n	80093d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80093d0:	2302      	movs	r3, #2
 80093d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d005      	beq.n	8009402 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2204      	movs	r2, #4
 80093fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	e037      	b.n	8009472 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 020e 	bic.w	r2, r2, #14
 8009410:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009420:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009436:	f003 021f 	and.w	r2, r3, #31
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	2101      	movs	r1, #1
 8009440:	fa01 f202 	lsl.w	r2, r1, r2
 8009444:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800944e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009462:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009466:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009470:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d00d      	beq.n	80094c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2204      	movs	r2, #4
 80094ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
 80094c2:	e047      	b.n	8009554 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 020e 	bic.w	r2, r2, #14
 80094d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094f8:	f003 021f 	and.w	r2, r3, #31
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009500:	2101      	movs	r1, #1
 8009502:	fa01 f202 	lsl.w	r2, r1, r2
 8009506:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009510:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009528:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009532:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	4798      	blx	r3
    }
  }
  return status;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	2204      	movs	r2, #4
 8009580:	409a      	lsls	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4013      	ands	r3, r2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d026      	beq.n	80095d8 <HAL_DMA_IRQHandler+0x7a>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d021      	beq.n	80095d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d107      	bne.n	80095b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0204 	bic.w	r2, r2, #4
 80095b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b6:	f003 021f 	and.w	r2, r3, #31
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	2104      	movs	r1, #4
 80095c0:	fa01 f202 	lsl.w	r2, r1, r2
 80095c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d071      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80095d6:	e06c      	b.n	80096b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095dc:	f003 031f 	and.w	r3, r3, #31
 80095e0:	2202      	movs	r2, #2
 80095e2:	409a      	lsls	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d02e      	beq.n	800964a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d029      	beq.n	800964a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 020a 	bic.w	r2, r2, #10
 8009612:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009620:	f003 021f 	and.w	r2, r3, #31
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009628:	2102      	movs	r1, #2
 800962a:	fa01 f202 	lsl.w	r2, r1, r2
 800962e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d038      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009648:	e033      	b.n	80096b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	2208      	movs	r2, #8
 8009654:	409a      	lsls	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4013      	ands	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d02a      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d025      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 020e 	bic.w	r2, r2, #14
 8009676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800967c:	f003 021f 	and.w	r2, r3, #31
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f202 	lsl.w	r2, r1, r2
 800968a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
}
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80096d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80096e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ea:	f003 021f 	and.w	r2, r3, #31
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f2:	2101      	movs	r1, #1
 80096f4:	fa01 f202 	lsl.w	r2, r1, r2
 80096f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b10      	cmp	r3, #16
 8009708:	d108      	bne.n	800971c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800971a:	e007      	b.n	800972c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
}
 800972c:	bf00      	nop
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	4b16      	ldr	r3, [pc, #88]	@ (80097a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009748:	429a      	cmp	r2, r3
 800974a:	d802      	bhi.n	8009752 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800974c:	4b15      	ldr	r3, [pc, #84]	@ (80097a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e001      	b.n	8009756 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009752:	4b15      	ldr	r3, [pc, #84]	@ (80097a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009754:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	3b08      	subs	r3, #8
 8009762:	4a12      	ldr	r2, [pc, #72]	@ (80097ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009764:	fba2 2303 	umull	r2, r3, r2, r3
 8009768:	091b      	lsrs	r3, r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009770:	089b      	lsrs	r3, r3, #2
 8009772:	009a      	lsls	r2, r3, #2
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	4413      	add	r3, r2
 8009778:	461a      	mov	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a0b      	ldr	r2, [pc, #44]	@ (80097b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009782:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	2201      	movs	r2, #1
 800978c:	409a      	lsls	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	40020407 	.word	0x40020407
 80097a4:	40020800 	.word	0x40020800
 80097a8:	40020820 	.word	0x40020820
 80097ac:	cccccccd 	.word	0xcccccccd
 80097b0:	40020880 	.word	0x40020880

080097b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a08      	ldr	r2, [pc, #32]	@ (80097f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80097d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3b01      	subs	r3, #1
 80097dc:	f003 031f 	and.w	r3, r3, #31
 80097e0:	2201      	movs	r2, #1
 80097e2:	409a      	lsls	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80097e8:	bf00      	nop
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	1000823f 	.word	0x1000823f
 80097f8:	40020940 	.word	0x40020940

080097fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800980a:	e15a      	b.n	8009ac2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	2101      	movs	r1, #1
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	fa01 f303 	lsl.w	r3, r1, r3
 8009818:	4013      	ands	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 814c 	beq.w	8009abc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f003 0303 	and.w	r3, r3, #3
 800982c:	2b01      	cmp	r3, #1
 800982e:	d005      	beq.n	800983c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009838:	2b02      	cmp	r3, #2
 800983a:	d130      	bne.n	800989e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	2203      	movs	r2, #3
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	43db      	mvns	r3, r3
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4013      	ands	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009872:	2201      	movs	r2, #1
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	43db      	mvns	r3, r3
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4013      	ands	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	091b      	lsrs	r3, r3, #4
 8009888:	f003 0201 	and.w	r2, r3, #1
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	4313      	orrs	r3, r2
 8009896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d017      	beq.n	80098da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	005b      	lsls	r3, r3, #1
 80098b4:	2203      	movs	r2, #3
 80098b6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ba:	43db      	mvns	r3, r3
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4013      	ands	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	fa02 f303 	lsl.w	r3, r2, r3
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d123      	bne.n	800992e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	08da      	lsrs	r2, r3, #3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3208      	adds	r2, #8
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	220f      	movs	r2, #15
 80098fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009902:	43db      	mvns	r3, r3
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4013      	ands	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691a      	ldr	r2, [r3, #16]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	fa02 f303 	lsl.w	r3, r2, r3
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	4313      	orrs	r3, r2
 800991e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	08da      	lsrs	r2, r3, #3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3208      	adds	r2, #8
 8009928:	6939      	ldr	r1, [r7, #16]
 800992a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	2203      	movs	r2, #3
 800993a:	fa02 f303 	lsl.w	r3, r2, r3
 800993e:	43db      	mvns	r3, r3
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	4013      	ands	r3, r2
 8009944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f003 0203 	and.w	r2, r3, #3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	fa02 f303 	lsl.w	r3, r2, r3
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4313      	orrs	r3, r2
 800995a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 80a6 	beq.w	8009abc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009970:	4b5b      	ldr	r3, [pc, #364]	@ (8009ae0 <HAL_GPIO_Init+0x2e4>)
 8009972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009974:	4a5a      	ldr	r2, [pc, #360]	@ (8009ae0 <HAL_GPIO_Init+0x2e4>)
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	6613      	str	r3, [r2, #96]	@ 0x60
 800997c:	4b58      	ldr	r3, [pc, #352]	@ (8009ae0 <HAL_GPIO_Init+0x2e4>)
 800997e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	60bb      	str	r3, [r7, #8]
 8009986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009988:	4a56      	ldr	r2, [pc, #344]	@ (8009ae4 <HAL_GPIO_Init+0x2e8>)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	089b      	lsrs	r3, r3, #2
 800998e:	3302      	adds	r3, #2
 8009990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	220f      	movs	r2, #15
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	43db      	mvns	r3, r3
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4013      	ands	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80099b2:	d01f      	beq.n	80099f4 <HAL_GPIO_Init+0x1f8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a4c      	ldr	r2, [pc, #304]	@ (8009ae8 <HAL_GPIO_Init+0x2ec>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d019      	beq.n	80099f0 <HAL_GPIO_Init+0x1f4>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a4b      	ldr	r2, [pc, #300]	@ (8009aec <HAL_GPIO_Init+0x2f0>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <HAL_GPIO_Init+0x1f0>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a4a      	ldr	r2, [pc, #296]	@ (8009af0 <HAL_GPIO_Init+0x2f4>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00d      	beq.n	80099e8 <HAL_GPIO_Init+0x1ec>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a49      	ldr	r2, [pc, #292]	@ (8009af4 <HAL_GPIO_Init+0x2f8>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <HAL_GPIO_Init+0x1e8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a48      	ldr	r2, [pc, #288]	@ (8009af8 <HAL_GPIO_Init+0x2fc>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d101      	bne.n	80099e0 <HAL_GPIO_Init+0x1e4>
 80099dc:	2305      	movs	r3, #5
 80099de:	e00a      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099e0:	2306      	movs	r3, #6
 80099e2:	e008      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099e4:	2304      	movs	r3, #4
 80099e6:	e006      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099e8:	2303      	movs	r3, #3
 80099ea:	e004      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099ec:	2302      	movs	r3, #2
 80099ee:	e002      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e000      	b.n	80099f6 <HAL_GPIO_Init+0x1fa>
 80099f4:	2300      	movs	r3, #0
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	f002 0203 	and.w	r2, r2, #3
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	4093      	lsls	r3, r2
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a06:	4937      	ldr	r1, [pc, #220]	@ (8009ae4 <HAL_GPIO_Init+0x2e8>)
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	089b      	lsrs	r3, r3, #2
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a14:	4b39      	ldr	r3, [pc, #228]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4013      	ands	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009a38:	4a30      	ldr	r2, [pc, #192]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	43db      	mvns	r3, r3
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009a62:	4a26      	ldr	r2, [pc, #152]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009a68:	4b24      	ldr	r3, [pc, #144]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	43db      	mvns	r3, r3
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4013      	ands	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009a92:	4b1a      	ldr	r3, [pc, #104]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009ab6:	4a11      	ldr	r2, [pc, #68]	@ (8009afc <HAL_GPIO_Init+0x300>)
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f ae9d 	bne.w	800980c <HAL_GPIO_Init+0x10>
  }
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	48000400 	.word	0x48000400
 8009aec:	48000800 	.word	0x48000800
 8009af0:	48000c00 	.word	0x48000c00
 8009af4:	48001000 	.word	0x48001000
 8009af8:	48001400 	.word	0x48001400
 8009afc:	40010400 	.word	0x40010400

08009b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	887b      	ldrh	r3, [r7, #2]
 8009b12:	4013      	ands	r3, r2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
 8009b1c:	e001      	b.n	8009b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	807b      	strh	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009b40:	787b      	ldrb	r3, [r7, #1]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009b4c:	e002      	b.n	8009b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009b4e:	887a      	ldrh	r2, [r7, #2]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009b6a:	4b08      	ldr	r3, [pc, #32]	@ (8009b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b6c:	695a      	ldr	r2, [r3, #20]
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	4013      	ands	r3, r2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009b76:	4a05      	ldr	r2, [pc, #20]	@ (8009b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b7c:	88fb      	ldrh	r3, [r7, #6]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fb ff3e 	bl	8005a00 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	40010400 	.word	0x40010400

08009b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d141      	bne.n	8009c22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009baa:	d131      	bne.n	8009c10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009bac:	4b47      	ldr	r3, [pc, #284]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb2:	4a46      	ldr	r2, [pc, #280]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bbc:	4b43      	ldr	r3, [pc, #268]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009bc4:	4a41      	ldr	r2, [pc, #260]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009bcc:	4b40      	ldr	r3, [pc, #256]	@ (8009cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2232      	movs	r2, #50	@ 0x32
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
 8009bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8009cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bdc:	0c9b      	lsrs	r3, r3, #18
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009be2:	e002      	b.n	8009bea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bea:	4b38      	ldr	r3, [pc, #224]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf6:	d102      	bne.n	8009bfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f2      	bne.n	8009be4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009bfe:	4b33      	ldr	r3, [pc, #204]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c0a:	d158      	bne.n	8009cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e057      	b.n	8009cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c10:	4b2e      	ldr	r3, [pc, #184]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c16:	4a2d      	ldr	r2, [pc, #180]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009c20:	e04d      	b.n	8009cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c28:	d141      	bne.n	8009cae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009c2a:	4b28      	ldr	r3, [pc, #160]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c36:	d131      	bne.n	8009c9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c38:	4b24      	ldr	r3, [pc, #144]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3e:	4a23      	ldr	r2, [pc, #140]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c48:	4b20      	ldr	r3, [pc, #128]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009c50:	4a1e      	ldr	r2, [pc, #120]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2232      	movs	r2, #50	@ 0x32
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	4a1c      	ldr	r2, [pc, #112]	@ (8009cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009c64:	fba2 2303 	umull	r2, r3, r2, r3
 8009c68:	0c9b      	lsrs	r3, r3, #18
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c6e:	e002      	b.n	8009c76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c82:	d102      	bne.n	8009c8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f2      	bne.n	8009c70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c8a:	4b10      	ldr	r3, [pc, #64]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c96:	d112      	bne.n	8009cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e011      	b.n	8009cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ca8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009cac:	e007      	b.n	8009cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009cae:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009cb6:	4a05      	ldr	r2, [pc, #20]	@ (8009ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009cbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	40007000 	.word	0x40007000
 8009cd0:	200000fc 	.word	0x200000fc
 8009cd4:	431bde83 	.word	0x431bde83

08009cd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	4a04      	ldr	r2, [pc, #16]	@ (8009cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ce6:	6093      	str	r3, [r2, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40007000 	.word	0x40007000

08009cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e2fe      	b.n	800a308 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d075      	beq.n	8009e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d16:	4b97      	ldr	r3, [pc, #604]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 030c 	and.w	r3, r3, #12
 8009d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d20:	4b94      	ldr	r3, [pc, #592]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	d102      	bne.n	8009d36 <HAL_RCC_OscConfig+0x3e>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d002      	beq.n	8009d3c <HAL_RCC_OscConfig+0x44>
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d10b      	bne.n	8009d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d05b      	beq.n	8009e00 <HAL_RCC_OscConfig+0x108>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d157      	bne.n	8009e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e2d9      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5c:	d106      	bne.n	8009d6c <HAL_RCC_OscConfig+0x74>
 8009d5e:	4b85      	ldr	r3, [pc, #532]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a84      	ldr	r2, [pc, #528]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	e01d      	b.n	8009da8 <HAL_RCC_OscConfig+0xb0>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d74:	d10c      	bne.n	8009d90 <HAL_RCC_OscConfig+0x98>
 8009d76:	4b7f      	ldr	r3, [pc, #508]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	4b7c      	ldr	r3, [pc, #496]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a7b      	ldr	r2, [pc, #492]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	e00b      	b.n	8009da8 <HAL_RCC_OscConfig+0xb0>
 8009d90:	4b78      	ldr	r3, [pc, #480]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a77      	ldr	r2, [pc, #476]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	4b75      	ldr	r3, [pc, #468]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a74      	ldr	r2, [pc, #464]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d013      	beq.n	8009dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db0:	f7fd fc5e 	bl	8007670 <HAL_GetTick>
 8009db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009db6:	e008      	b.n	8009dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009db8:	f7fd fc5a 	bl	8007670 <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b64      	cmp	r3, #100	@ 0x64
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e29e      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009dca:	4b6a      	ldr	r3, [pc, #424]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f0      	beq.n	8009db8 <HAL_RCC_OscConfig+0xc0>
 8009dd6:	e014      	b.n	8009e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd8:	f7fd fc4a 	bl	8007670 <HAL_GetTick>
 8009ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009de0:	f7fd fc46 	bl	8007670 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b64      	cmp	r3, #100	@ 0x64
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e28a      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009df2:	4b60      	ldr	r3, [pc, #384]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f0      	bne.n	8009de0 <HAL_RCC_OscConfig+0xe8>
 8009dfe:	e000      	b.n	8009e02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d075      	beq.n	8009efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0e:	4b59      	ldr	r3, [pc, #356]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 030c 	and.w	r3, r3, #12
 8009e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e18:	4b56      	ldr	r3, [pc, #344]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b0c      	cmp	r3, #12
 8009e26:	d102      	bne.n	8009e2e <HAL_RCC_OscConfig+0x136>
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d002      	beq.n	8009e34 <HAL_RCC_OscConfig+0x13c>
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d11f      	bne.n	8009e74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e34:	4b4f      	ldr	r3, [pc, #316]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <HAL_RCC_OscConfig+0x154>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e25d      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e4c:	4b49      	ldr	r3, [pc, #292]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	061b      	lsls	r3, r3, #24
 8009e5a:	4946      	ldr	r1, [pc, #280]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009e60:	4b45      	ldr	r3, [pc, #276]	@ (8009f78 <HAL_RCC_OscConfig+0x280>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fd fbb7 	bl	80075d8 <HAL_InitTick>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d043      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e249      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d023      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a3c      	ldr	r2, [pc, #240]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e88:	f7fd fbf2 	bl	8007670 <HAL_GetTick>
 8009e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e90:	f7fd fbee 	bl	8007670 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e232      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ea2:	4b34      	ldr	r3, [pc, #208]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0f0      	beq.n	8009e90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eae:	4b31      	ldr	r3, [pc, #196]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	061b      	lsls	r3, r3, #24
 8009ebc:	492d      	ldr	r1, [pc, #180]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	604b      	str	r3, [r1, #4]
 8009ec2:	e01a      	b.n	8009efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed0:	f7fd fbce 	bl	8007670 <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ed8:	f7fd fbca 	bl	8007670 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e20e      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009eea:	4b22      	ldr	r3, [pc, #136]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x1e0>
 8009ef6:	e000      	b.n	8009efa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0308 	and.w	r3, r3, #8
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d041      	beq.n	8009f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01c      	beq.n	8009f48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f0e:	4b19      	ldr	r3, [pc, #100]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f14:	4a17      	ldr	r2, [pc, #92]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009f16:	f043 0301 	orr.w	r3, r3, #1
 8009f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1e:	f7fd fba7 	bl	8007670 <HAL_GetTick>
 8009f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f24:	e008      	b.n	8009f38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f26:	f7fd fba3 	bl	8007670 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e1e7      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f38:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0ef      	beq.n	8009f26 <HAL_RCC_OscConfig+0x22e>
 8009f46:	e020      	b.n	8009f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f48:	4b0a      	ldr	r3, [pc, #40]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f4e:	4a09      	ldr	r2, [pc, #36]	@ (8009f74 <HAL_RCC_OscConfig+0x27c>)
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f58:	f7fd fb8a 	bl	8007670 <HAL_GetTick>
 8009f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f5e:	e00d      	b.n	8009f7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f60:	f7fd fb86 	bl	8007670 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d906      	bls.n	8009f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e1ca      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
 8009f72:	bf00      	nop
 8009f74:	40021000 	.word	0x40021000
 8009f78:	20000100 	.word	0x20000100
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f7c:	4b8c      	ldr	r3, [pc, #560]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 8009f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1ea      	bne.n	8009f60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 80a6 	beq.w	800a0e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f9c:	4b84      	ldr	r3, [pc, #528]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <HAL_RCC_OscConfig+0x2b4>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e000      	b.n	8009fae <HAL_RCC_OscConfig+0x2b6>
 8009fac:	2300      	movs	r3, #0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00d      	beq.n	8009fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fb2:	4b7f      	ldr	r3, [pc, #508]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb6:	4a7e      	ldr	r2, [pc, #504]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 8009fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fbe:	4b7c      	ldr	r3, [pc, #496]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fce:	4b79      	ldr	r3, [pc, #484]	@ (800a1b4 <HAL_RCC_OscConfig+0x4bc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d118      	bne.n	800a00c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fda:	4b76      	ldr	r3, [pc, #472]	@ (800a1b4 <HAL_RCC_OscConfig+0x4bc>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a75      	ldr	r2, [pc, #468]	@ (800a1b4 <HAL_RCC_OscConfig+0x4bc>)
 8009fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fe6:	f7fd fb43 	bl	8007670 <HAL_GetTick>
 8009fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fec:	e008      	b.n	800a000 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fee:	f7fd fb3f 	bl	8007670 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e183      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a000:	4b6c      	ldr	r3, [pc, #432]	@ (800a1b4 <HAL_RCC_OscConfig+0x4bc>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0f0      	beq.n	8009fee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d108      	bne.n	800a026 <HAL_RCC_OscConfig+0x32e>
 800a014:	4b66      	ldr	r3, [pc, #408]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01a:	4a65      	ldr	r2, [pc, #404]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a024:	e024      	b.n	800a070 <HAL_RCC_OscConfig+0x378>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b05      	cmp	r3, #5
 800a02c:	d110      	bne.n	800a050 <HAL_RCC_OscConfig+0x358>
 800a02e:	4b60      	ldr	r3, [pc, #384]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a034:	4a5e      	ldr	r2, [pc, #376]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a036:	f043 0304 	orr.w	r3, r3, #4
 800a03a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a03e:	4b5c      	ldr	r3, [pc, #368]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a044:	4a5a      	ldr	r2, [pc, #360]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a04e:	e00f      	b.n	800a070 <HAL_RCC_OscConfig+0x378>
 800a050:	4b57      	ldr	r3, [pc, #348]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a056:	4a56      	ldr	r2, [pc, #344]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a058:	f023 0301 	bic.w	r3, r3, #1
 800a05c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a060:	4b53      	ldr	r3, [pc, #332]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a066:	4a52      	ldr	r2, [pc, #328]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a068:	f023 0304 	bic.w	r3, r3, #4
 800a06c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d016      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a078:	f7fd fafa 	bl	8007670 <HAL_GetTick>
 800a07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a07e:	e00a      	b.n	800a096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a080:	f7fd faf6 	bl	8007670 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a08e:	4293      	cmp	r3, r2
 800a090:	d901      	bls.n	800a096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e138      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a096:	4b46      	ldr	r3, [pc, #280]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0ed      	beq.n	800a080 <HAL_RCC_OscConfig+0x388>
 800a0a4:	e015      	b.n	800a0d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a6:	f7fd fae3 	bl	8007670 <HAL_GetTick>
 800a0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0ac:	e00a      	b.n	800a0c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ae:	f7fd fadf 	bl	8007670 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d901      	bls.n	800a0c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e121      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1ed      	bne.n	800a0ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0d2:	7ffb      	ldrb	r3, [r7, #31]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d105      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0d8:	4b35      	ldr	r3, [pc, #212]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a0da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0dc:	4a34      	ldr	r2, [pc, #208]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a0de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d03c      	beq.n	800a16a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01c      	beq.n	800a132 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0f8:	4b2d      	ldr	r3, [pc, #180]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a0fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a108:	f7fd fab2 	bl	8007670 <HAL_GetTick>
 800a10c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a10e:	e008      	b.n	800a122 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a110:	f7fd faae 	bl	8007670 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e0f2      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a122:	4b23      	ldr	r3, [pc, #140]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0ef      	beq.n	800a110 <HAL_RCC_OscConfig+0x418>
 800a130:	e01b      	b.n	800a16a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a132:	4b1f      	ldr	r3, [pc, #124]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a138:	4a1d      	ldr	r2, [pc, #116]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a142:	f7fd fa95 	bl	8007670 <HAL_GetTick>
 800a146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a148:	e008      	b.n	800a15c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a14a:	f7fd fa91 	bl	8007670 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	d901      	bls.n	800a15c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e0d5      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a15c:	4b14      	ldr	r3, [pc, #80]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a15e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1ef      	bne.n	800a14a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80c9 	beq.w	800a306 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a174:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 030c 	and.w	r3, r3, #12
 800a17c:	2b0c      	cmp	r3, #12
 800a17e:	f000 8083 	beq.w	800a288 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d15e      	bne.n	800a248 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a18a:	4b09      	ldr	r3, [pc, #36]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a08      	ldr	r2, [pc, #32]	@ (800a1b0 <HAL_RCC_OscConfig+0x4b8>)
 800a190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a196:	f7fd fa6b 	bl	8007670 <HAL_GetTick>
 800a19a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a19c:	e00c      	b.n	800a1b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a19e:	f7fd fa67 	bl	8007670 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d905      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e0ab      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
 800a1b0:	40021000 	.word	0x40021000
 800a1b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1b8:	4b55      	ldr	r3, [pc, #340]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ec      	bne.n	800a19e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1c4:	4b52      	ldr	r3, [pc, #328]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	4b52      	ldr	r3, [pc, #328]	@ (800a314 <HAL_RCC_OscConfig+0x61c>)
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6a11      	ldr	r1, [r2, #32]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a1d4:	3a01      	subs	r2, #1
 800a1d6:	0112      	lsls	r2, r2, #4
 800a1d8:	4311      	orrs	r1, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a1de:	0212      	lsls	r2, r2, #8
 800a1e0:	4311      	orrs	r1, r2
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a1e6:	0852      	lsrs	r2, r2, #1
 800a1e8:	3a01      	subs	r2, #1
 800a1ea:	0552      	lsls	r2, r2, #21
 800a1ec:	4311      	orrs	r1, r2
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a1f2:	0852      	lsrs	r2, r2, #1
 800a1f4:	3a01      	subs	r2, #1
 800a1f6:	0652      	lsls	r2, r2, #25
 800a1f8:	4311      	orrs	r1, r2
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a1fe:	06d2      	lsls	r2, r2, #27
 800a200:	430a      	orrs	r2, r1
 800a202:	4943      	ldr	r1, [pc, #268]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a204:	4313      	orrs	r3, r2
 800a206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a208:	4b41      	ldr	r3, [pc, #260]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a40      	ldr	r2, [pc, #256]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a20e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a212:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a214:	4b3e      	ldr	r3, [pc, #248]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	4a3d      	ldr	r2, [pc, #244]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a21a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a21e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a220:	f7fd fa26 	bl	8007670 <HAL_GetTick>
 800a224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a226:	e008      	b.n	800a23a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a228:	f7fd fa22 	bl	8007670 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	2b02      	cmp	r3, #2
 800a234:	d901      	bls.n	800a23a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e066      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a23a:	4b35      	ldr	r3, [pc, #212]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0f0      	beq.n	800a228 <HAL_RCC_OscConfig+0x530>
 800a246:	e05e      	b.n	800a306 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a248:	4b31      	ldr	r3, [pc, #196]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a30      	ldr	r2, [pc, #192]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a24e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a254:	f7fd fa0c 	bl	8007670 <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a25c:	f7fd fa08 	bl	8007670 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e04c      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a26e:	4b28      	ldr	r3, [pc, #160]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f0      	bne.n	800a25c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a27a:	4b25      	ldr	r3, [pc, #148]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	4924      	ldr	r1, [pc, #144]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a280:	4b25      	ldr	r3, [pc, #148]	@ (800a318 <HAL_RCC_OscConfig+0x620>)
 800a282:	4013      	ands	r3, r2
 800a284:	60cb      	str	r3, [r1, #12]
 800a286:	e03e      	b.n	800a306 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	69db      	ldr	r3, [r3, #28]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e039      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a294:	4b1e      	ldr	r3, [pc, #120]	@ (800a310 <HAL_RCC_OscConfig+0x618>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f003 0203 	and.w	r2, r3, #3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d12c      	bne.n	800a302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d123      	bne.n	800a302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d11b      	bne.n	800a302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d113      	bne.n	800a302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d109      	bne.n	800a302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d001      	beq.n	800a306 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3720      	adds	r7, #32
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	40021000 	.word	0x40021000
 800a314:	019f800c 	.word	0x019f800c
 800a318:	feeefffc 	.word	0xfeeefffc

0800a31c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a326:	2300      	movs	r3, #0
 800a328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e11e      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a334:	4b91      	ldr	r3, [pc, #580]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d910      	bls.n	800a364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a342:	4b8e      	ldr	r3, [pc, #568]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f023 020f 	bic.w	r2, r3, #15
 800a34a:	498c      	ldr	r1, [pc, #560]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	4313      	orrs	r3, r2
 800a350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a352:	4b8a      	ldr	r3, [pc, #552]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d001      	beq.n	800a364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e106      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d073      	beq.n	800a458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	2b03      	cmp	r3, #3
 800a376:	d129      	bne.n	800a3cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a378:	4b81      	ldr	r3, [pc, #516]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e0f4      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a388:	f000 f99e 	bl	800a6c8 <RCC_GetSysClockFreqFromPLLSource>
 800a38c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4a7c      	ldr	r2, [pc, #496]	@ (800a584 <HAL_RCC_ClockConfig+0x268>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d93f      	bls.n	800a416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a396:	4b7a      	ldr	r3, [pc, #488]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d033      	beq.n	800a416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d12f      	bne.n	800a416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a3b6:	4b72      	ldr	r3, [pc, #456]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3be:	4a70      	ldr	r2, [pc, #448]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a3c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a3c6:	2380      	movs	r3, #128	@ 0x80
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	e024      	b.n	800a416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d107      	bne.n	800a3e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3d4:	4b6a      	ldr	r3, [pc, #424]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0c6      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3e4:	4b66      	ldr	r3, [pc, #408]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e0be      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a3f4:	f000 f8ce 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800a3f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	4a61      	ldr	r2, [pc, #388]	@ (800a584 <HAL_RCC_ClockConfig+0x268>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d909      	bls.n	800a416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a402:	4b5f      	ldr	r3, [pc, #380]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a40a:	4a5d      	ldr	r2, [pc, #372]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a40c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a412:	2380      	movs	r3, #128	@ 0x80
 800a414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a416:	4b5a      	ldr	r3, [pc, #360]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f023 0203 	bic.w	r2, r3, #3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	4957      	ldr	r1, [pc, #348]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a424:	4313      	orrs	r3, r2
 800a426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a428:	f7fd f922 	bl	8007670 <HAL_GetTick>
 800a42c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a42e:	e00a      	b.n	800a446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a430:	f7fd f91e 	bl	8007670 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a43e:	4293      	cmp	r3, r2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e095      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a446:	4b4e      	ldr	r3, [pc, #312]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 020c 	and.w	r2, r3, #12
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	429a      	cmp	r2, r3
 800a456:	d1eb      	bne.n	800a430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d023      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a470:	4b43      	ldr	r3, [pc, #268]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	4a42      	ldr	r2, [pc, #264]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a47a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a488:	4b3d      	ldr	r3, [pc, #244]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a490:	4a3b      	ldr	r2, [pc, #236]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a498:	4b39      	ldr	r3, [pc, #228]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	4936      	ldr	r1, [pc, #216]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	608b      	str	r3, [r1, #8]
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b80      	cmp	r3, #128	@ 0x80
 800a4b0:	d105      	bne.n	800a4be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a4b2:	4b33      	ldr	r3, [pc, #204]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	4a32      	ldr	r2, [pc, #200]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a4b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4be:	4b2f      	ldr	r3, [pc, #188]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d21d      	bcs.n	800a508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f023 020f 	bic.w	r2, r3, #15
 800a4d4:	4929      	ldr	r1, [pc, #164]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a4dc:	f7fd f8c8 	bl	8007670 <HAL_GetTick>
 800a4e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4e2:	e00a      	b.n	800a4fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4e4:	f7fd f8c4 	bl	8007670 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e03b      	b.n	800a572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4fa:	4b20      	ldr	r3, [pc, #128]	@ (800a57c <HAL_RCC_ClockConfig+0x260>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d1ed      	bne.n	800a4e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a514:	4b1a      	ldr	r3, [pc, #104]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	4917      	ldr	r1, [pc, #92]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a522:	4313      	orrs	r3, r2
 800a524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0308 	and.w	r3, r3, #8
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a532:	4b13      	ldr	r3, [pc, #76]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	490f      	ldr	r1, [pc, #60]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a542:	4313      	orrs	r3, r2
 800a544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a546:	f000 f825 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b0c      	ldr	r3, [pc, #48]	@ (800a580 <HAL_RCC_ClockConfig+0x264>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	490c      	ldr	r1, [pc, #48]	@ (800a588 <HAL_RCC_ClockConfig+0x26c>)
 800a558:	5ccb      	ldrb	r3, [r1, r3]
 800a55a:	f003 031f 	and.w	r3, r3, #31
 800a55e:	fa22 f303 	lsr.w	r3, r2, r3
 800a562:	4a0a      	ldr	r2, [pc, #40]	@ (800a58c <HAL_RCC_ClockConfig+0x270>)
 800a564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a566:	4b0a      	ldr	r3, [pc, #40]	@ (800a590 <HAL_RCC_ClockConfig+0x274>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fd f834 	bl	80075d8 <HAL_InitTick>
 800a570:	4603      	mov	r3, r0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	40022000 	.word	0x40022000
 800a580:	40021000 	.word	0x40021000
 800a584:	04c4b400 	.word	0x04c4b400
 800a588:	08010c80 	.word	0x08010c80
 800a58c:	200000fc 	.word	0x200000fc
 800a590:	20000100 	.word	0x20000100

0800a594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a59a:	4b2c      	ldr	r3, [pc, #176]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f003 030c 	and.w	r3, r3, #12
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d102      	bne.n	800a5ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a5a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	e047      	b.n	800a63c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 030c 	and.w	r3, r3, #12
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d102      	bne.n	800a5be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a5b8:	4b26      	ldr	r3, [pc, #152]	@ (800a654 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	e03e      	b.n	800a63c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a5be:	4b23      	ldr	r3, [pc, #140]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 030c 	and.w	r3, r3, #12
 800a5c6:	2b0c      	cmp	r3, #12
 800a5c8:	d136      	bne.n	800a638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a5ca:	4b20      	ldr	r3, [pc, #128]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	091b      	lsrs	r3, r3, #4
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d10c      	bne.n	800a602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a654 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	4a16      	ldr	r2, [pc, #88]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5f2:	68d2      	ldr	r2, [r2, #12]
 800a5f4:	0a12      	lsrs	r2, r2, #8
 800a5f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a5fa:	fb02 f303 	mul.w	r3, r2, r3
 800a5fe:	617b      	str	r3, [r7, #20]
      break;
 800a600:	e00c      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a602:	4a13      	ldr	r2, [pc, #76]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60a:	4a10      	ldr	r2, [pc, #64]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a60c:	68d2      	ldr	r2, [r2, #12]
 800a60e:	0a12      	lsrs	r2, r2, #8
 800a610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a614:	fb02 f303 	mul.w	r3, r2, r3
 800a618:	617b      	str	r3, [r7, #20]
      break;
 800a61a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a61c:	4b0b      	ldr	r3, [pc, #44]	@ (800a64c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	0e5b      	lsrs	r3, r3, #25
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	3301      	adds	r3, #1
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	fbb2 f3f3 	udiv	r3, r2, r3
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	e001      	b.n	800a63c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a63c:	693b      	ldr	r3, [r7, #16]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	40021000 	.word	0x40021000
 800a650:	00f42400 	.word	0x00f42400
 800a654:	016e3600 	.word	0x016e3600

0800a658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a65c:	4b03      	ldr	r3, [pc, #12]	@ (800a66c <HAL_RCC_GetHCLKFreq+0x14>)
 800a65e:	681b      	ldr	r3, [r3, #0]
}
 800a660:	4618      	mov	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	200000fc 	.word	0x200000fc

0800a670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a674:	f7ff fff0 	bl	800a658 <HAL_RCC_GetHCLKFreq>
 800a678:	4602      	mov	r2, r0
 800a67a:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	f003 0307 	and.w	r3, r3, #7
 800a684:	4904      	ldr	r1, [pc, #16]	@ (800a698 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a686:	5ccb      	ldrb	r3, [r1, r3]
 800a688:	f003 031f 	and.w	r3, r3, #31
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a690:	4618      	mov	r0, r3
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40021000 	.word	0x40021000
 800a698:	08010c90 	.word	0x08010c90

0800a69c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a6a0:	f7ff ffda 	bl	800a658 <HAL_RCC_GetHCLKFreq>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b06      	ldr	r3, [pc, #24]	@ (800a6c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	0adb      	lsrs	r3, r3, #11
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	4904      	ldr	r1, [pc, #16]	@ (800a6c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6b2:	5ccb      	ldrb	r3, [r1, r3]
 800a6b4:	f003 031f 	and.w	r3, r3, #31
 800a6b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40021000 	.word	0x40021000
 800a6c4:	08010c90 	.word	0x08010c90

0800a6c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	091b      	lsrs	r3, r3, #4
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d10c      	bne.n	800a706 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6ec:	4a17      	ldr	r2, [pc, #92]	@ (800a74c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f4:	4a14      	ldr	r2, [pc, #80]	@ (800a748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6f6:	68d2      	ldr	r2, [r2, #12]
 800a6f8:	0a12      	lsrs	r2, r2, #8
 800a6fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
 800a702:	617b      	str	r3, [r7, #20]
    break;
 800a704:	e00c      	b.n	800a720 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a706:	4a12      	ldr	r2, [pc, #72]	@ (800a750 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70e:	4a0e      	ldr	r2, [pc, #56]	@ (800a748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a710:	68d2      	ldr	r2, [r2, #12]
 800a712:	0a12      	lsrs	r2, r2, #8
 800a714:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a718:	fb02 f303 	mul.w	r3, r2, r3
 800a71c:	617b      	str	r3, [r7, #20]
    break;
 800a71e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a720:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	0e5b      	lsrs	r3, r3, #25
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	3301      	adds	r3, #1
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	fbb2 f3f3 	udiv	r3, r2, r3
 800a738:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a73a:	687b      	ldr	r3, [r7, #4]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	40021000 	.word	0x40021000
 800a74c:	016e3600 	.word	0x016e3600
 800a750:	00f42400 	.word	0x00f42400

0800a754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a75c:	2300      	movs	r3, #0
 800a75e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a760:	2300      	movs	r3, #0
 800a762:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 8098 	beq.w	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a772:	2300      	movs	r3, #0
 800a774:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a776:	4b43      	ldr	r3, [pc, #268]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10d      	bne.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a782:	4b40      	ldr	r3, [pc, #256]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a786:	4a3f      	ldr	r2, [pc, #252]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a78c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a78e:	4b3d      	ldr	r3, [pc, #244]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a796:	60bb      	str	r3, [r7, #8]
 800a798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a79a:	2301      	movs	r3, #1
 800a79c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a79e:	4b3a      	ldr	r3, [pc, #232]	@ (800a888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a39      	ldr	r2, [pc, #228]	@ (800a888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a7a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7aa:	f7fc ff61 	bl	8007670 <HAL_GetTick>
 800a7ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b0:	e009      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7b2:	f7fc ff5d 	bl	8007670 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d902      	bls.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	74fb      	strb	r3, [r7, #19]
        break;
 800a7c4:	e005      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7c6:	4b30      	ldr	r3, [pc, #192]	@ (800a888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0ef      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a7d2:	7cfb      	ldrb	r3, [r7, #19]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d159      	bne.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a7d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d01e      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d019      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7f4:	4b23      	ldr	r3, [pc, #140]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a800:	4b20      	ldr	r3, [pc, #128]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a806:	4a1f      	ldr	r2, [pc, #124]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a80c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a810:	4b1c      	ldr	r3, [pc, #112]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a816:	4a1b      	ldr	r2, [pc, #108]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a81c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a820:	4a18      	ldr	r2, [pc, #96]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d016      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a832:	f7fc ff1d 	bl	8007670 <HAL_GetTick>
 800a836:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a838:	e00b      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a83a:	f7fc ff19 	bl	8007670 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a848:	4293      	cmp	r3, r2
 800a84a:	d902      	bls.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	74fb      	strb	r3, [r7, #19]
            break;
 800a850:	e006      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a852:	4b0c      	ldr	r3, [pc, #48]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0ec      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a860:	7cfb      	ldrb	r3, [r7, #19]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a866:	4b07      	ldr	r3, [pc, #28]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a86c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a874:	4903      	ldr	r1, [pc, #12]	@ (800a884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a876:	4313      	orrs	r3, r2
 800a878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a87c:	e008      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a87e:	7cfb      	ldrb	r3, [r7, #19]
 800a880:	74bb      	strb	r3, [r7, #18]
 800a882:	e005      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a884:	40021000 	.word	0x40021000
 800a888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88c:	7cfb      	ldrb	r3, [r7, #19]
 800a88e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a890:	7c7b      	ldrb	r3, [r7, #17]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d105      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a896:	4ba7      	ldr	r3, [pc, #668]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a89a:	4aa6      	ldr	r2, [pc, #664]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a89c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00a      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8ae:	4ba1      	ldr	r3, [pc, #644]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8b4:	f023 0203 	bic.w	r2, r3, #3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	499d      	ldr	r1, [pc, #628]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00a      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8d0:	4b98      	ldr	r3, [pc, #608]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d6:	f023 020c 	bic.w	r2, r3, #12
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4995      	ldr	r1, [pc, #596]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0304 	and.w	r3, r3, #4
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8f2:	4b90      	ldr	r3, [pc, #576]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	498c      	ldr	r1, [pc, #560]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a902:	4313      	orrs	r3, r2
 800a904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00a      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a914:	4b87      	ldr	r3, [pc, #540]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a91a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	4984      	ldr	r1, [pc, #528]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a924:	4313      	orrs	r3, r2
 800a926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0310 	and.w	r3, r3, #16
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a936:	4b7f      	ldr	r3, [pc, #508]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a93c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	497b      	ldr	r1, [pc, #492]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a946:	4313      	orrs	r3, r2
 800a948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00a      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a958:	4b76      	ldr	r3, [pc, #472]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a95e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	4973      	ldr	r1, [pc, #460]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a97a:	4b6e      	ldr	r3, [pc, #440]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a980:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	496a      	ldr	r1, [pc, #424]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a99c:	4b65      	ldr	r3, [pc, #404]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	4962      	ldr	r1, [pc, #392]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9be:	4b5d      	ldr	r3, [pc, #372]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9cc:	4959      	ldr	r1, [pc, #356]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00a      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9e0:	4b54      	ldr	r3, [pc, #336]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9e6:	f023 0203 	bic.w	r2, r3, #3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ee:	4951      	ldr	r1, [pc, #324]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa02:	4b4c      	ldr	r3, [pc, #304]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa10:	4948      	ldr	r1, [pc, #288]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d015      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa24:	4b43      	ldr	r3, [pc, #268]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa32:	4940      	ldr	r1, [pc, #256]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa42:	d105      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa44:	4b3b      	ldr	r3, [pc, #236]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	4a3a      	ldr	r2, [pc, #232]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d015      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa5c:	4b35      	ldr	r3, [pc, #212]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6a:	4932      	ldr	r1, [pc, #200]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa7a:	d105      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4a2c      	ldr	r2, [pc, #176]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d015      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa94:	4b27      	ldr	r3, [pc, #156]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa2:	4924      	ldr	r1, [pc, #144]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aab2:	d105      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aab4:	4b1f      	ldr	r3, [pc, #124]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	4a1e      	ldr	r2, [pc, #120]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aabe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d015      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aacc:	4b19      	ldr	r3, [pc, #100]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aada:	4916      	ldr	r1, [pc, #88]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaea:	d105      	bne.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aaec:	4b11      	ldr	r3, [pc, #68]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	4a10      	ldr	r2, [pc, #64]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d019      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab04:	4b0b      	ldr	r3, [pc, #44]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab12:	4908      	ldr	r1, [pc, #32]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab22:	d109      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab24:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	4a02      	ldr	r2, [pc, #8]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab2e:	60d3      	str	r3, [r2, #12]
 800ab30:	e002      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ab32:	bf00      	nop
 800ab34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d015      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ab44:	4b29      	ldr	r3, [pc, #164]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab52:	4926      	ldr	r1, [pc, #152]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab62:	d105      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ab64:	4b21      	ldr	r3, [pc, #132]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	4a20      	ldr	r2, [pc, #128]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d015      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ab7c:	4b1b      	ldr	r3, [pc, #108]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab8a:	4918      	ldr	r1, [pc, #96]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9a:	d105      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ab9c:	4b13      	ldr	r3, [pc, #76]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a12      	ldr	r2, [pc, #72]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aba6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d015      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800abb4:	4b0d      	ldr	r3, [pc, #52]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc2:	490a      	ldr	r1, [pc, #40]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abd2:	d105      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abd4:	4b05      	ldr	r3, [pc, #20]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	4a04      	ldr	r2, [pc, #16]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800abe0:	7cbb      	ldrb	r3, [r7, #18]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	40021000 	.word	0x40021000

0800abf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e054      	b.n	800acac <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d111      	bne.n	800ac32 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f001 fee2 	bl	800c9e0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d102      	bne.n	800ac2a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a23      	ldr	r2, [pc, #140]	@ (800acb4 <HAL_TIM_Base_Init+0xc4>)
 800ac28:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2202      	movs	r2, #2
 800ac36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4619      	mov	r1, r3
 800ac44:	4610      	mov	r0, r2
 800ac46:	f001 fa2b 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	08006e99 	.word	0x08006e99

0800acb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d001      	beq.n	800acd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e04c      	b.n	800ad6a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a26      	ldr	r2, [pc, #152]	@ (800ad78 <HAL_TIM_Base_Start+0xc0>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d022      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acea:	d01d      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a22      	ldr	r2, [pc, #136]	@ (800ad7c <HAL_TIM_Base_Start+0xc4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d018      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a21      	ldr	r2, [pc, #132]	@ (800ad80 <HAL_TIM_Base_Start+0xc8>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d013      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a1f      	ldr	r2, [pc, #124]	@ (800ad84 <HAL_TIM_Base_Start+0xcc>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00e      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ad88 <HAL_TIM_Base_Start+0xd0>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d009      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a1c      	ldr	r2, [pc, #112]	@ (800ad8c <HAL_TIM_Base_Start+0xd4>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <HAL_TIM_Base_Start+0x70>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a1b      	ldr	r2, [pc, #108]	@ (800ad90 <HAL_TIM_Base_Start+0xd8>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d115      	bne.n	800ad54 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	4b19      	ldr	r3, [pc, #100]	@ (800ad94 <HAL_TIM_Base_Start+0xdc>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b06      	cmp	r3, #6
 800ad38:	d015      	beq.n	800ad66 <HAL_TIM_Base_Start+0xae>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad40:	d011      	beq.n	800ad66 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f042 0201 	orr.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad52:	e008      	b.n	800ad66 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f042 0201 	orr.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	e000      	b.n	800ad68 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40012c00 	.word	0x40012c00
 800ad7c:	40000400 	.word	0x40000400
 800ad80:	40000800 	.word	0x40000800
 800ad84:	40000c00 	.word	0x40000c00
 800ad88:	40013400 	.word	0x40013400
 800ad8c:	40014000 	.word	0x40014000
 800ad90:	40015000 	.word	0x40015000
 800ad94:	00010007 	.word	0x00010007

0800ad98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d001      	beq.n	800adb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e054      	b.n	800ae5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0201 	orr.w	r2, r2, #1
 800adc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a26      	ldr	r2, [pc, #152]	@ (800ae68 <HAL_TIM_Base_Start_IT+0xd0>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d022      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adda:	d01d      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a22      	ldr	r2, [pc, #136]	@ (800ae6c <HAL_TIM_Base_Start_IT+0xd4>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d018      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a21      	ldr	r2, [pc, #132]	@ (800ae70 <HAL_TIM_Base_Start_IT+0xd8>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ae74 <HAL_TIM_Base_Start_IT+0xdc>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00e      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1e      	ldr	r2, [pc, #120]	@ (800ae78 <HAL_TIM_Base_Start_IT+0xe0>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d009      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a1c      	ldr	r2, [pc, #112]	@ (800ae7c <HAL_TIM_Base_Start_IT+0xe4>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d004      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x80>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a1b      	ldr	r2, [pc, #108]	@ (800ae80 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d115      	bne.n	800ae44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	4b19      	ldr	r3, [pc, #100]	@ (800ae84 <HAL_TIM_Base_Start_IT+0xec>)
 800ae20:	4013      	ands	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b06      	cmp	r3, #6
 800ae28:	d015      	beq.n	800ae56 <HAL_TIM_Base_Start_IT+0xbe>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae30:	d011      	beq.n	800ae56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f042 0201 	orr.w	r2, r2, #1
 800ae40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae42:	e008      	b.n	800ae56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0201 	orr.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e000      	b.n	800ae58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	40000400 	.word	0x40000400
 800ae70:	40000800 	.word	0x40000800
 800ae74:	40000c00 	.word	0x40000c00
 800ae78:	40013400 	.word	0x40013400
 800ae7c:	40014000 	.word	0x40014000
 800ae80:	40015000 	.word	0x40015000
 800ae84:	00010007 	.word	0x00010007

0800ae88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e054      	b.n	800af44 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d111      	bne.n	800aeca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 fd96 	bl	800c9e0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a23      	ldr	r2, [pc, #140]	@ (800af4c <HAL_TIM_PWM_Init+0xc4>)
 800aec0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2202      	movs	r2, #2
 800aece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f001 f8df 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	08006e4d 	.word	0x08006e4d

0800af50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d109      	bne.n	800af74 <HAL_TIM_PWM_Start+0x24>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b01      	cmp	r3, #1
 800af6a:	bf14      	ite	ne
 800af6c:	2301      	movne	r3, #1
 800af6e:	2300      	moveq	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	e03c      	b.n	800afee <HAL_TIM_PWM_Start+0x9e>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b04      	cmp	r3, #4
 800af78:	d109      	bne.n	800af8e <HAL_TIM_PWM_Start+0x3e>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b01      	cmp	r3, #1
 800af84:	bf14      	ite	ne
 800af86:	2301      	movne	r3, #1
 800af88:	2300      	moveq	r3, #0
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	e02f      	b.n	800afee <HAL_TIM_PWM_Start+0x9e>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b08      	cmp	r3, #8
 800af92:	d109      	bne.n	800afa8 <HAL_TIM_PWM_Start+0x58>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	bf14      	ite	ne
 800afa0:	2301      	movne	r3, #1
 800afa2:	2300      	moveq	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	e022      	b.n	800afee <HAL_TIM_PWM_Start+0x9e>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b0c      	cmp	r3, #12
 800afac:	d109      	bne.n	800afc2 <HAL_TIM_PWM_Start+0x72>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	bf14      	ite	ne
 800afba:	2301      	movne	r3, #1
 800afbc:	2300      	moveq	r3, #0
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	e015      	b.n	800afee <HAL_TIM_PWM_Start+0x9e>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b10      	cmp	r3, #16
 800afc6:	d109      	bne.n	800afdc <HAL_TIM_PWM_Start+0x8c>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	bf14      	ite	ne
 800afd4:	2301      	movne	r3, #1
 800afd6:	2300      	moveq	r3, #0
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	e008      	b.n	800afee <HAL_TIM_PWM_Start+0x9e>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	bf14      	ite	ne
 800afe8:	2301      	movne	r3, #1
 800afea:	2300      	moveq	r3, #0
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e0a6      	b.n	800b144 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d104      	bne.n	800b006 <HAL_TIM_PWM_Start+0xb6>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b004:	e023      	b.n	800b04e <HAL_TIM_PWM_Start+0xfe>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b04      	cmp	r3, #4
 800b00a:	d104      	bne.n	800b016 <HAL_TIM_PWM_Start+0xc6>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b014:	e01b      	b.n	800b04e <HAL_TIM_PWM_Start+0xfe>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d104      	bne.n	800b026 <HAL_TIM_PWM_Start+0xd6>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b024:	e013      	b.n	800b04e <HAL_TIM_PWM_Start+0xfe>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b0c      	cmp	r3, #12
 800b02a:	d104      	bne.n	800b036 <HAL_TIM_PWM_Start+0xe6>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b034:	e00b      	b.n	800b04e <HAL_TIM_PWM_Start+0xfe>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b10      	cmp	r3, #16
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_PWM_Start+0xf6>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b044:	e003      	b.n	800b04e <HAL_TIM_PWM_Start+0xfe>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2202      	movs	r2, #2
 800b04a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2201      	movs	r2, #1
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	4618      	mov	r0, r3
 800b058:	f001 fc9c 	bl	800c994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a3a      	ldr	r2, [pc, #232]	@ (800b14c <HAL_TIM_PWM_Start+0x1fc>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d018      	beq.n	800b098 <HAL_TIM_PWM_Start+0x148>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a39      	ldr	r2, [pc, #228]	@ (800b150 <HAL_TIM_PWM_Start+0x200>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d013      	beq.n	800b098 <HAL_TIM_PWM_Start+0x148>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a37      	ldr	r2, [pc, #220]	@ (800b154 <HAL_TIM_PWM_Start+0x204>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d00e      	beq.n	800b098 <HAL_TIM_PWM_Start+0x148>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a36      	ldr	r2, [pc, #216]	@ (800b158 <HAL_TIM_PWM_Start+0x208>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d009      	beq.n	800b098 <HAL_TIM_PWM_Start+0x148>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a34      	ldr	r2, [pc, #208]	@ (800b15c <HAL_TIM_PWM_Start+0x20c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d004      	beq.n	800b098 <HAL_TIM_PWM_Start+0x148>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a33      	ldr	r2, [pc, #204]	@ (800b160 <HAL_TIM_PWM_Start+0x210>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d101      	bne.n	800b09c <HAL_TIM_PWM_Start+0x14c>
 800b098:	2301      	movs	r3, #1
 800b09a:	e000      	b.n	800b09e <HAL_TIM_PWM_Start+0x14e>
 800b09c:	2300      	movs	r3, #0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b0b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a25      	ldr	r2, [pc, #148]	@ (800b14c <HAL_TIM_PWM_Start+0x1fc>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d022      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0c4:	d01d      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a26      	ldr	r2, [pc, #152]	@ (800b164 <HAL_TIM_PWM_Start+0x214>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d018      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a24      	ldr	r2, [pc, #144]	@ (800b168 <HAL_TIM_PWM_Start+0x218>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d013      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a23      	ldr	r2, [pc, #140]	@ (800b16c <HAL_TIM_PWM_Start+0x21c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00e      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a19      	ldr	r2, [pc, #100]	@ (800b150 <HAL_TIM_PWM_Start+0x200>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d009      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a18      	ldr	r2, [pc, #96]	@ (800b154 <HAL_TIM_PWM_Start+0x204>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d004      	beq.n	800b102 <HAL_TIM_PWM_Start+0x1b2>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a18      	ldr	r2, [pc, #96]	@ (800b160 <HAL_TIM_PWM_Start+0x210>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d115      	bne.n	800b12e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689a      	ldr	r2, [r3, #8]
 800b108:	4b19      	ldr	r3, [pc, #100]	@ (800b170 <HAL_TIM_PWM_Start+0x220>)
 800b10a:	4013      	ands	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b06      	cmp	r3, #6
 800b112:	d015      	beq.n	800b140 <HAL_TIM_PWM_Start+0x1f0>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b11a:	d011      	beq.n	800b140 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b12c:	e008      	b.n	800b140 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f042 0201 	orr.w	r2, r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e000      	b.n	800b142 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b140:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	40012c00 	.word	0x40012c00
 800b150:	40013400 	.word	0x40013400
 800b154:	40014000 	.word	0x40014000
 800b158:	40014400 	.word	0x40014400
 800b15c:	40014800 	.word	0x40014800
 800b160:	40015000 	.word	0x40015000
 800b164:	40000400 	.word	0x40000400
 800b168:	40000800 	.word	0x40000800
 800b16c:	40000c00 	.word	0x40000c00
 800b170:	00010007 	.word	0x00010007

0800b174 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e04c      	b.n	800b222 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d111      	bne.n	800b1b8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 fc1f 	bl	800c9e0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b22c <HAL_TIM_OnePulse_Init+0xb8>)
 800b1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f000 ff68 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0208 	bic.w	r2, r2, #8
 800b1de:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6819      	ldr	r1, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	430a      	orrs	r2, r1
 800b1ee:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	0800b231 	.word	0x0800b231

0800b230 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b254:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b25c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b264:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b26c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d108      	bne.n	800b286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b27a:	7b7b      	ldrb	r3, [r7, #13]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d102      	bne.n	800b286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b280:	7b3b      	ldrb	r3, [r7, #12]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d001      	beq.n	800b28a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e059      	b.n	800b33e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2202      	movs	r2, #2
 800b296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2202      	movs	r2, #2
 800b29e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2202      	movs	r2, #2
 800b2a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68da      	ldr	r2, [r3, #12]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f042 0202 	orr.w	r2, r2, #2
 800b2b8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0204 	orr.w	r2, r2, #4
 800b2c8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f001 fb5e 	bl	800c994 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	2104      	movs	r1, #4
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f001 fb57 	bl	800c994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a17      	ldr	r2, [pc, #92]	@ (800b348 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d018      	beq.n	800b322 <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a15      	ldr	r2, [pc, #84]	@ (800b34c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d013      	beq.n	800b322 <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a14      	ldr	r2, [pc, #80]	@ (800b350 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d00e      	beq.n	800b322 <HAL_TIM_OnePulse_Start_IT+0xde>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a12      	ldr	r2, [pc, #72]	@ (800b354 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d009      	beq.n	800b322 <HAL_TIM_OnePulse_Start_IT+0xde>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a11      	ldr	r2, [pc, #68]	@ (800b358 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d004      	beq.n	800b322 <HAL_TIM_OnePulse_Start_IT+0xde>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a0f      	ldr	r2, [pc, #60]	@ (800b35c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d101      	bne.n	800b326 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800b326:	2300      	movs	r3, #0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d007      	beq.n	800b33c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b33a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40012c00 	.word	0x40012c00
 800b34c:	40013400 	.word	0x40013400
 800b350:	40014000 	.word	0x40014000
 800b354:	40014400 	.word	0x40014400
 800b358:	40014800 	.word	0x40014800
 800b35c:	40015000 	.word	0x40015000

0800b360 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e0a2      	b.n	800b4ba <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d111      	bne.n	800b3a4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 fb29 	bl	800c9e0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a4a      	ldr	r2, [pc, #296]	@ (800b4c4 <HAL_TIM_Encoder_Init+0x164>)
 800b39a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6812      	ldr	r2, [r2, #0]
 800b3b6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	f000 fe68 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3f8:	f023 0303 	bic.w	r3, r3, #3
 800b3fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	4313      	orrs	r3, r2
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b416:	f023 030c 	bic.w	r3, r3, #12
 800b41a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	021b      	lsls	r3, r3, #8
 800b432:	4313      	orrs	r3, r2
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	4313      	orrs	r3, r2
 800b438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	011a      	lsls	r2, r3, #4
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	031b      	lsls	r3, r3, #12
 800b446:	4313      	orrs	r3, r2
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b454:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b45c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	4313      	orrs	r3, r2
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3718      	adds	r7, #24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	08006f41 	.word	0x08006f41

0800b4c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d110      	bne.n	800b51a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d102      	bne.n	800b504 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4fe:	7b7b      	ldrb	r3, [r7, #13]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d001      	beq.n	800b508 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e069      	b.n	800b5dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2202      	movs	r2, #2
 800b50c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b518:	e031      	b.n	800b57e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d110      	bne.n	800b542 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d102      	bne.n	800b52c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b526:	7b3b      	ldrb	r3, [r7, #12]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d001      	beq.n	800b530 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e055      	b.n	800b5dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2202      	movs	r2, #2
 800b53c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b540:	e01d      	b.n	800b57e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d108      	bne.n	800b55a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b548:	7bbb      	ldrb	r3, [r7, #14]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d105      	bne.n	800b55a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b54e:	7b7b      	ldrb	r3, [r7, #13]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d102      	bne.n	800b55a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b554:	7b3b      	ldrb	r3, [r7, #12]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d001      	beq.n	800b55e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e03e      	b.n	800b5dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2202      	movs	r2, #2
 800b562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2202      	movs	r2, #2
 800b56a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2202      	movs	r2, #2
 800b572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_TIM_Encoder_Start+0xc4>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d008      	beq.n	800b59c <HAL_TIM_Encoder_Start+0xd4>
 800b58a:	e00f      	b.n	800b5ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2201      	movs	r2, #1
 800b592:	2100      	movs	r1, #0
 800b594:	4618      	mov	r0, r3
 800b596:	f001 f9fd 	bl	800c994 <TIM_CCxChannelCmd>
      break;
 800b59a:	e016      	b.n	800b5ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	2104      	movs	r1, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 f9f5 	bl	800c994 <TIM_CCxChannelCmd>
      break;
 800b5aa:	e00e      	b.n	800b5ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f001 f9ed 	bl	800c994 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	2104      	movs	r1, #4
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 f9e6 	bl	800c994 <TIM_CCxChannelCmd>
      break;
 800b5c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f042 0201 	orr.w	r2, r2, #1
 800b5d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	2b00      	cmp	r3, #0
 800b604:	d026      	beq.n	800b654 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d021      	beq.n	800b654 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0202 	mvn.w	r2, #2
 800b618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d005      	beq.n	800b63a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	4798      	blx	r3
 800b638:	e009      	b.n	800b64e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f003 0304 	and.w	r3, r3, #4
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d026      	beq.n	800b6ac <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d021      	beq.n	800b6ac <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f06f 0204 	mvn.w	r2, #4
 800b670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b682:	2b00      	cmp	r3, #0
 800b684:	d005      	beq.n	800b692 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	4798      	blx	r3
 800b690:	e009      	b.n	800b6a6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d026      	beq.n	800b704 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f003 0308 	and.w	r3, r3, #8
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d021      	beq.n	800b704 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0208 	mvn.w	r2, #8
 800b6c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	4798      	blx	r3
 800b6e8:	e009      	b.n	800b6fe <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f003 0310 	and.w	r3, r3, #16
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d026      	beq.n	800b75c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f003 0310 	and.w	r3, r3, #16
 800b714:	2b00      	cmp	r3, #0
 800b716:	d021      	beq.n	800b75c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f06f 0210 	mvn.w	r2, #16
 800b720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2208      	movs	r2, #8
 800b726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	4798      	blx	r3
 800b740:	e009      	b.n	800b756 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00e      	beq.n	800b784 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f06f 0201 	mvn.w	r2, #1
 800b778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d104      	bne.n	800b798 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00e      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00e      	beq.n	800b7de <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00e      	beq.n	800b806 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d009      	beq.n	800b806 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00e      	beq.n	800b82e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	d009      	beq.n	800b82e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f06f 0220 	mvn.w	r2, #32
 800b822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00e      	beq.n	800b856 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d009      	beq.n	800b856 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00e      	beq.n	800b87e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d009      	beq.n	800b87e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00e      	beq.n	800b8a6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d009      	beq.n	800b8a6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00e      	beq.n	800b8ce <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e0ff      	b.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b14      	cmp	r3, #20
 800b902:	f200 80f0 	bhi.w	800bae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b906:	a201      	add	r2, pc, #4	@ (adr r2, 800b90c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b961 	.word	0x0800b961
 800b910:	0800bae7 	.word	0x0800bae7
 800b914:	0800bae7 	.word	0x0800bae7
 800b918:	0800bae7 	.word	0x0800bae7
 800b91c:	0800b9a1 	.word	0x0800b9a1
 800b920:	0800bae7 	.word	0x0800bae7
 800b924:	0800bae7 	.word	0x0800bae7
 800b928:	0800bae7 	.word	0x0800bae7
 800b92c:	0800b9e3 	.word	0x0800b9e3
 800b930:	0800bae7 	.word	0x0800bae7
 800b934:	0800bae7 	.word	0x0800bae7
 800b938:	0800bae7 	.word	0x0800bae7
 800b93c:	0800ba23 	.word	0x0800ba23
 800b940:	0800bae7 	.word	0x0800bae7
 800b944:	0800bae7 	.word	0x0800bae7
 800b948:	0800bae7 	.word	0x0800bae7
 800b94c:	0800ba65 	.word	0x0800ba65
 800b950:	0800bae7 	.word	0x0800bae7
 800b954:	0800bae7 	.word	0x0800bae7
 800b958:	0800bae7 	.word	0x0800bae7
 800b95c:	0800baa5 	.word	0x0800baa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68b9      	ldr	r1, [r7, #8]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fc4e 	bl	800c208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f042 0208 	orr.w	r2, r2, #8
 800b97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0204 	bic.w	r2, r2, #4
 800b98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6999      	ldr	r1, [r3, #24]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	619a      	str	r2, [r3, #24]
      break;
 800b99e:	e0a5      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fcc8 	bl	800c33c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699a      	ldr	r2, [r3, #24]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6999      	ldr	r1, [r3, #24]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	021a      	lsls	r2, r3, #8
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	619a      	str	r2, [r3, #24]
      break;
 800b9e0:	e084      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fd3b 	bl	800c464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0208 	orr.w	r2, r2, #8
 800b9fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69da      	ldr	r2, [r3, #28]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f022 0204 	bic.w	r2, r2, #4
 800ba0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	69d9      	ldr	r1, [r3, #28]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	61da      	str	r2, [r3, #28]
      break;
 800ba20:	e064      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fdad 	bl	800c588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69da      	ldr	r2, [r3, #28]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69d9      	ldr	r1, [r3, #28]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	021a      	lsls	r2, r3, #8
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	61da      	str	r2, [r3, #28]
      break;
 800ba62:	e043      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fe20 	bl	800c6b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0208 	orr.w	r2, r2, #8
 800ba7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0204 	bic.w	r2, r2, #4
 800ba8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	691a      	ldr	r2, [r3, #16]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800baa2:	e023      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fe6a 	bl	800c784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800babe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bace:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	021a      	lsls	r2, r3, #8
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bae4:	e002      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	75fb      	strb	r3, [r7, #23]
      break;
 800baea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop

0800bb00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_TIM_ConfigClockSource+0x1c>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0f6      	b.n	800bd0a <HAL_TIM_ConfigClockSource+0x20a>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bb3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a6f      	ldr	r2, [pc, #444]	@ (800bd14 <HAL_TIM_ConfigClockSource+0x214>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	f000 80c1 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bb5c:	4a6d      	ldr	r2, [pc, #436]	@ (800bd14 <HAL_TIM_ConfigClockSource+0x214>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f200 80c6 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb64:	4a6c      	ldr	r2, [pc, #432]	@ (800bd18 <HAL_TIM_ConfigClockSource+0x218>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f000 80b9 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bb6c:	4a6a      	ldr	r2, [pc, #424]	@ (800bd18 <HAL_TIM_ConfigClockSource+0x218>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f200 80be 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb74:	4a69      	ldr	r2, [pc, #420]	@ (800bd1c <HAL_TIM_ConfigClockSource+0x21c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f000 80b1 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bb7c:	4a67      	ldr	r2, [pc, #412]	@ (800bd1c <HAL_TIM_ConfigClockSource+0x21c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	f200 80b6 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb84:	4a66      	ldr	r2, [pc, #408]	@ (800bd20 <HAL_TIM_ConfigClockSource+0x220>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	f000 80a9 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bb8c:	4a64      	ldr	r2, [pc, #400]	@ (800bd20 <HAL_TIM_ConfigClockSource+0x220>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	f200 80ae 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb94:	4a63      	ldr	r2, [pc, #396]	@ (800bd24 <HAL_TIM_ConfigClockSource+0x224>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f000 80a1 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bb9c:	4a61      	ldr	r2, [pc, #388]	@ (800bd24 <HAL_TIM_ConfigClockSource+0x224>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	f200 80a6 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bba4:	4a60      	ldr	r2, [pc, #384]	@ (800bd28 <HAL_TIM_ConfigClockSource+0x228>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	f000 8099 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bbac:	4a5e      	ldr	r2, [pc, #376]	@ (800bd28 <HAL_TIM_ConfigClockSource+0x228>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	f200 809e 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbb8:	f000 8091 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bbbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbc0:	f200 8096 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbc8:	f000 8089 	beq.w	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bbcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbd0:	f200 808e 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbd8:	d03e      	beq.n	800bc58 <HAL_TIM_ConfigClockSource+0x158>
 800bbda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbde:	f200 8087 	bhi.w	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbe6:	f000 8086 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1f6>
 800bbea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbee:	d87f      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbf0:	2b70      	cmp	r3, #112	@ 0x70
 800bbf2:	d01a      	beq.n	800bc2a <HAL_TIM_ConfigClockSource+0x12a>
 800bbf4:	2b70      	cmp	r3, #112	@ 0x70
 800bbf6:	d87b      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbf8:	2b60      	cmp	r3, #96	@ 0x60
 800bbfa:	d050      	beq.n	800bc9e <HAL_TIM_ConfigClockSource+0x19e>
 800bbfc:	2b60      	cmp	r3, #96	@ 0x60
 800bbfe:	d877      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bc00:	2b50      	cmp	r3, #80	@ 0x50
 800bc02:	d03c      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0x17e>
 800bc04:	2b50      	cmp	r3, #80	@ 0x50
 800bc06:	d873      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bc08:	2b40      	cmp	r3, #64	@ 0x40
 800bc0a:	d058      	beq.n	800bcbe <HAL_TIM_ConfigClockSource+0x1be>
 800bc0c:	2b40      	cmp	r3, #64	@ 0x40
 800bc0e:	d86f      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bc10:	2b30      	cmp	r3, #48	@ 0x30
 800bc12:	d064      	beq.n	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bc14:	2b30      	cmp	r3, #48	@ 0x30
 800bc16:	d86b      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bc18:	2b20      	cmp	r3, #32
 800bc1a:	d060      	beq.n	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bc1c:	2b20      	cmp	r3, #32
 800bc1e:	d867      	bhi.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d05c      	beq.n	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bc24:	2b10      	cmp	r3, #16
 800bc26:	d05a      	beq.n	800bcde <HAL_TIM_ConfigClockSource+0x1de>
 800bc28:	e062      	b.n	800bcf0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc3a:	f000 fe8b 	bl	800c954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	609a      	str	r2, [r3, #8]
      break;
 800bc56:	e04f      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc68:	f000 fe74 	bl	800c954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc7a:	609a      	str	r2, [r3, #8]
      break;
 800bc7c:	e03c      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	f000 fde6 	bl	800c85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2150      	movs	r1, #80	@ 0x50
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fe3f 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800bc9c:	e02c      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f000 fe05 	bl	800c8ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2160      	movs	r1, #96	@ 0x60
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fe2f 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800bcbc:	e01c      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcca:	461a      	mov	r2, r3
 800bccc:	f000 fdc6 	bl	800c85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2140      	movs	r1, #64	@ 0x40
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 fe1f 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800bcdc:	e00c      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4619      	mov	r1, r3
 800bce8:	4610      	mov	r0, r2
 800bcea:	f000 fe16 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800bcee:	e003      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcf4:	e000      	b.n	800bcf8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800bcf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	00100070 	.word	0x00100070
 800bd18:	00100060 	.word	0x00100060
 800bd1c:	00100050 	.word	0x00100050
 800bd20:	00100040 	.word	0x00100040
 800bd24:	00100030 	.word	0x00100030
 800bd28:	00100020 	.word	0x00100020

0800bd2c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	460b      	mov	r3, r1
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e14a      	b.n	800c092 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b01      	cmp	r3, #1
 800be06:	f040 80dd 	bne.w	800bfc4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800be0a:	7afb      	ldrb	r3, [r7, #11]
 800be0c:	2b1f      	cmp	r3, #31
 800be0e:	f200 80d6 	bhi.w	800bfbe <HAL_TIM_RegisterCallback+0x1de>
 800be12:	a201      	add	r2, pc, #4	@ (adr r2, 800be18 <HAL_TIM_RegisterCallback+0x38>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be99 	.word	0x0800be99
 800be1c:	0800bea1 	.word	0x0800bea1
 800be20:	0800bea9 	.word	0x0800bea9
 800be24:	0800beb1 	.word	0x0800beb1
 800be28:	0800beb9 	.word	0x0800beb9
 800be2c:	0800bec1 	.word	0x0800bec1
 800be30:	0800bec9 	.word	0x0800bec9
 800be34:	0800bed1 	.word	0x0800bed1
 800be38:	0800bed9 	.word	0x0800bed9
 800be3c:	0800bee1 	.word	0x0800bee1
 800be40:	0800bee9 	.word	0x0800bee9
 800be44:	0800bef1 	.word	0x0800bef1
 800be48:	0800bef9 	.word	0x0800bef9
 800be4c:	0800bf01 	.word	0x0800bf01
 800be50:	0800bf0b 	.word	0x0800bf0b
 800be54:	0800bf15 	.word	0x0800bf15
 800be58:	0800bf1f 	.word	0x0800bf1f
 800be5c:	0800bf29 	.word	0x0800bf29
 800be60:	0800bf33 	.word	0x0800bf33
 800be64:	0800bf3d 	.word	0x0800bf3d
 800be68:	0800bf47 	.word	0x0800bf47
 800be6c:	0800bf51 	.word	0x0800bf51
 800be70:	0800bf5b 	.word	0x0800bf5b
 800be74:	0800bf65 	.word	0x0800bf65
 800be78:	0800bf6f 	.word	0x0800bf6f
 800be7c:	0800bf79 	.word	0x0800bf79
 800be80:	0800bf83 	.word	0x0800bf83
 800be84:	0800bf8d 	.word	0x0800bf8d
 800be88:	0800bf97 	.word	0x0800bf97
 800be8c:	0800bfa1 	.word	0x0800bfa1
 800be90:	0800bfab 	.word	0x0800bfab
 800be94:	0800bfb5 	.word	0x0800bfb5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800be9e:	e0f7      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bea6:	e0f3      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800beae:	e0ef      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800beb6:	e0eb      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bebe:	e0e7      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bec6:	e0e3      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bece:	e0df      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bed6:	e0db      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bede:	e0d7      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bee6:	e0d3      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800beee:	e0cf      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bef6:	e0cb      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800befe:	e0c7      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bf08:	e0c2      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800bf12:	e0bd      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800bf1c:	e0b8      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800bf26:	e0b3      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800bf30:	e0ae      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bf3a:	e0a9      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bf44:	e0a4      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bf4e:	e09f      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bf58:	e09a      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bf62:	e095      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bf6c:	e090      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bf76:	e08b      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bf80:	e086      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bf8a:	e081      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bf94:	e07c      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bf9e:	e077      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800bfa8:	e072      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bfb2:	e06d      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bfbc:	e068      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	75fb      	strb	r3, [r7, #23]
        break;
 800bfc2:	e065      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d15d      	bne.n	800c08c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800bfd0:	7afb      	ldrb	r3, [r7, #11]
 800bfd2:	2b0d      	cmp	r3, #13
 800bfd4:	d857      	bhi.n	800c086 <HAL_TIM_RegisterCallback+0x2a6>
 800bfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <HAL_TIM_RegisterCallback+0x1fc>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800c015 	.word	0x0800c015
 800bfe0:	0800c01d 	.word	0x0800c01d
 800bfe4:	0800c025 	.word	0x0800c025
 800bfe8:	0800c02d 	.word	0x0800c02d
 800bfec:	0800c035 	.word	0x0800c035
 800bff0:	0800c03d 	.word	0x0800c03d
 800bff4:	0800c045 	.word	0x0800c045
 800bff8:	0800c04d 	.word	0x0800c04d
 800bffc:	0800c055 	.word	0x0800c055
 800c000:	0800c05d 	.word	0x0800c05d
 800c004:	0800c065 	.word	0x0800c065
 800c008:	0800c06d 	.word	0x0800c06d
 800c00c:	0800c075 	.word	0x0800c075
 800c010:	0800c07d 	.word	0x0800c07d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c01a:	e039      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c022:	e035      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c02a:	e031      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c032:	e02d      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c03a:	e029      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c042:	e025      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c04a:	e021      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c052:	e01d      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c05a:	e019      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c062:	e015      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c06a:	e011      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c072:	e00d      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c07a:	e009      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c084:	e004      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	75fb      	strb	r3, [r7, #23]
        break;
 800c08a:	e001      	b.n	800c090 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c090:	7dfb      	ldrb	r3, [r7, #23]
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop

0800c0a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a4c      	ldr	r2, [pc, #304]	@ (800c1e4 <TIM_Base_SetConfig+0x144>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d017      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0be:	d013      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a49      	ldr	r2, [pc, #292]	@ (800c1e8 <TIM_Base_SetConfig+0x148>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d00f      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a48      	ldr	r2, [pc, #288]	@ (800c1ec <TIM_Base_SetConfig+0x14c>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d00b      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a47      	ldr	r2, [pc, #284]	@ (800c1f0 <TIM_Base_SetConfig+0x150>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d007      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a46      	ldr	r2, [pc, #280]	@ (800c1f4 <TIM_Base_SetConfig+0x154>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d003      	beq.n	800c0e8 <TIM_Base_SetConfig+0x48>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a45      	ldr	r2, [pc, #276]	@ (800c1f8 <TIM_Base_SetConfig+0x158>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d108      	bne.n	800c0fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a39      	ldr	r2, [pc, #228]	@ (800c1e4 <TIM_Base_SetConfig+0x144>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d023      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c108:	d01f      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a36      	ldr	r2, [pc, #216]	@ (800c1e8 <TIM_Base_SetConfig+0x148>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d01b      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a35      	ldr	r2, [pc, #212]	@ (800c1ec <TIM_Base_SetConfig+0x14c>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d017      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a34      	ldr	r2, [pc, #208]	@ (800c1f0 <TIM_Base_SetConfig+0x150>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d013      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a33      	ldr	r2, [pc, #204]	@ (800c1f4 <TIM_Base_SetConfig+0x154>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00f      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a33      	ldr	r2, [pc, #204]	@ (800c1fc <TIM_Base_SetConfig+0x15c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d00b      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a32      	ldr	r2, [pc, #200]	@ (800c200 <TIM_Base_SetConfig+0x160>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d007      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a31      	ldr	r2, [pc, #196]	@ (800c204 <TIM_Base_SetConfig+0x164>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a2c      	ldr	r2, [pc, #176]	@ (800c1f8 <TIM_Base_SetConfig+0x158>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d108      	bne.n	800c15c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a18      	ldr	r2, [pc, #96]	@ (800c1e4 <TIM_Base_SetConfig+0x144>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d013      	beq.n	800c1b0 <TIM_Base_SetConfig+0x110>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a1a      	ldr	r2, [pc, #104]	@ (800c1f4 <TIM_Base_SetConfig+0x154>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00f      	beq.n	800c1b0 <TIM_Base_SetConfig+0x110>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a1a      	ldr	r2, [pc, #104]	@ (800c1fc <TIM_Base_SetConfig+0x15c>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00b      	beq.n	800c1b0 <TIM_Base_SetConfig+0x110>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a19      	ldr	r2, [pc, #100]	@ (800c200 <TIM_Base_SetConfig+0x160>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d007      	beq.n	800c1b0 <TIM_Base_SetConfig+0x110>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a18      	ldr	r2, [pc, #96]	@ (800c204 <TIM_Base_SetConfig+0x164>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_Base_SetConfig+0x110>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a13      	ldr	r2, [pc, #76]	@ (800c1f8 <TIM_Base_SetConfig+0x158>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d103      	bne.n	800c1b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	691a      	ldr	r2, [r3, #16]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d105      	bne.n	800c1d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	f023 0201 	bic.w	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	611a      	str	r2, [r3, #16]
  }
}
 800c1d6:	bf00      	nop
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	40012c00 	.word	0x40012c00
 800c1e8:	40000400 	.word	0x40000400
 800c1ec:	40000800 	.word	0x40000800
 800c1f0:	40000c00 	.word	0x40000c00
 800c1f4:	40013400 	.word	0x40013400
 800c1f8:	40015000 	.word	0x40015000
 800c1fc:	40014000 	.word	0x40014000
 800c200:	40014400 	.word	0x40014400
 800c204:	40014800 	.word	0x40014800

0800c208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	f023 0201 	bic.w	r2, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f023 0303 	bic.w	r3, r3, #3
 800c242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f023 0302 	bic.w	r3, r3, #2
 800c254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a30      	ldr	r2, [pc, #192]	@ (800c324 <TIM_OC1_SetConfig+0x11c>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d013      	beq.n	800c290 <TIM_OC1_SetConfig+0x88>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a2f      	ldr	r2, [pc, #188]	@ (800c328 <TIM_OC1_SetConfig+0x120>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d00f      	beq.n	800c290 <TIM_OC1_SetConfig+0x88>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a2e      	ldr	r2, [pc, #184]	@ (800c32c <TIM_OC1_SetConfig+0x124>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d00b      	beq.n	800c290 <TIM_OC1_SetConfig+0x88>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a2d      	ldr	r2, [pc, #180]	@ (800c330 <TIM_OC1_SetConfig+0x128>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d007      	beq.n	800c290 <TIM_OC1_SetConfig+0x88>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a2c      	ldr	r2, [pc, #176]	@ (800c334 <TIM_OC1_SetConfig+0x12c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d003      	beq.n	800c290 <TIM_OC1_SetConfig+0x88>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a2b      	ldr	r2, [pc, #172]	@ (800c338 <TIM_OC1_SetConfig+0x130>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d10c      	bne.n	800c2aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f023 0308 	bic.w	r3, r3, #8
 800c296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f023 0304 	bic.w	r3, r3, #4
 800c2a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c324 <TIM_OC1_SetConfig+0x11c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d013      	beq.n	800c2da <TIM_OC1_SetConfig+0xd2>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c328 <TIM_OC1_SetConfig+0x120>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d00f      	beq.n	800c2da <TIM_OC1_SetConfig+0xd2>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c32c <TIM_OC1_SetConfig+0x124>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00b      	beq.n	800c2da <TIM_OC1_SetConfig+0xd2>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c330 <TIM_OC1_SetConfig+0x128>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d007      	beq.n	800c2da <TIM_OC1_SetConfig+0xd2>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a19      	ldr	r2, [pc, #100]	@ (800c334 <TIM_OC1_SetConfig+0x12c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d003      	beq.n	800c2da <TIM_OC1_SetConfig+0xd2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a18      	ldr	r2, [pc, #96]	@ (800c338 <TIM_OC1_SetConfig+0x130>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d111      	bne.n	800c2fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	621a      	str	r2, [r3, #32]
}
 800c318:	bf00      	nop
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	40012c00 	.word	0x40012c00
 800c328:	40013400 	.word	0x40013400
 800c32c:	40014000 	.word	0x40014000
 800c330:	40014400 	.word	0x40014400
 800c334:	40014800 	.word	0x40014800
 800c338:	40015000 	.word	0x40015000

0800c33c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	f023 0210 	bic.w	r2, r3, #16
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c36a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	021b      	lsls	r3, r3, #8
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	4313      	orrs	r3, r2
 800c382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0320 	bic.w	r3, r3, #32
 800c38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	4313      	orrs	r3, r2
 800c396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a2c      	ldr	r2, [pc, #176]	@ (800c44c <TIM_OC2_SetConfig+0x110>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d007      	beq.n	800c3b0 <TIM_OC2_SetConfig+0x74>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a2b      	ldr	r2, [pc, #172]	@ (800c450 <TIM_OC2_SetConfig+0x114>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_OC2_SetConfig+0x74>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c454 <TIM_OC2_SetConfig+0x118>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10d      	bne.n	800c3cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c44c <TIM_OC2_SetConfig+0x110>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d013      	beq.n	800c3fc <TIM_OC2_SetConfig+0xc0>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c450 <TIM_OC2_SetConfig+0x114>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00f      	beq.n	800c3fc <TIM_OC2_SetConfig+0xc0>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a1e      	ldr	r2, [pc, #120]	@ (800c458 <TIM_OC2_SetConfig+0x11c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d00b      	beq.n	800c3fc <TIM_OC2_SetConfig+0xc0>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a1d      	ldr	r2, [pc, #116]	@ (800c45c <TIM_OC2_SetConfig+0x120>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d007      	beq.n	800c3fc <TIM_OC2_SetConfig+0xc0>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a1c      	ldr	r2, [pc, #112]	@ (800c460 <TIM_OC2_SetConfig+0x124>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d003      	beq.n	800c3fc <TIM_OC2_SetConfig+0xc0>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a17      	ldr	r2, [pc, #92]	@ (800c454 <TIM_OC2_SetConfig+0x118>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d113      	bne.n	800c424 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c40a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	4313      	orrs	r3, r2
 800c416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	4313      	orrs	r3, r2
 800c422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	621a      	str	r2, [r3, #32]
}
 800c43e:	bf00      	nop
 800c440:	371c      	adds	r7, #28
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	40012c00 	.word	0x40012c00
 800c450:	40013400 	.word	0x40013400
 800c454:	40015000 	.word	0x40015000
 800c458:	40014000 	.word	0x40014000
 800c45c:	40014400 	.word	0x40014400
 800c460:	40014800 	.word	0x40014800

0800c464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0303 	bic.w	r3, r3, #3
 800c49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a2b      	ldr	r2, [pc, #172]	@ (800c570 <TIM_OC3_SetConfig+0x10c>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d007      	beq.n	800c4d6 <TIM_OC3_SetConfig+0x72>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a2a      	ldr	r2, [pc, #168]	@ (800c574 <TIM_OC3_SetConfig+0x110>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d003      	beq.n	800c4d6 <TIM_OC3_SetConfig+0x72>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a29      	ldr	r2, [pc, #164]	@ (800c578 <TIM_OC3_SetConfig+0x114>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d10d      	bne.n	800c4f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a1e      	ldr	r2, [pc, #120]	@ (800c570 <TIM_OC3_SetConfig+0x10c>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d013      	beq.n	800c522 <TIM_OC3_SetConfig+0xbe>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c574 <TIM_OC3_SetConfig+0x110>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d00f      	beq.n	800c522 <TIM_OC3_SetConfig+0xbe>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a1d      	ldr	r2, [pc, #116]	@ (800c57c <TIM_OC3_SetConfig+0x118>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d00b      	beq.n	800c522 <TIM_OC3_SetConfig+0xbe>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a1c      	ldr	r2, [pc, #112]	@ (800c580 <TIM_OC3_SetConfig+0x11c>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d007      	beq.n	800c522 <TIM_OC3_SetConfig+0xbe>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a1b      	ldr	r2, [pc, #108]	@ (800c584 <TIM_OC3_SetConfig+0x120>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d003      	beq.n	800c522 <TIM_OC3_SetConfig+0xbe>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a16      	ldr	r2, [pc, #88]	@ (800c578 <TIM_OC3_SetConfig+0x114>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d113      	bne.n	800c54a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4313      	orrs	r3, r2
 800c548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	621a      	str	r2, [r3, #32]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	40012c00 	.word	0x40012c00
 800c574:	40013400 	.word	0x40013400
 800c578:	40015000 	.word	0x40015000
 800c57c:	40014000 	.word	0x40014000
 800c580:	40014400 	.word	0x40014400
 800c584:	40014800 	.word	0x40014800

0800c588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c5b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c5d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	031b      	lsls	r3, r3, #12
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a2c      	ldr	r2, [pc, #176]	@ (800c698 <TIM_OC4_SetConfig+0x110>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d007      	beq.n	800c5fc <TIM_OC4_SetConfig+0x74>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a2b      	ldr	r2, [pc, #172]	@ (800c69c <TIM_OC4_SetConfig+0x114>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d003      	beq.n	800c5fc <TIM_OC4_SetConfig+0x74>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a2a      	ldr	r2, [pc, #168]	@ (800c6a0 <TIM_OC4_SetConfig+0x118>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d10d      	bne.n	800c618 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	031b      	lsls	r3, r3, #12
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a1f      	ldr	r2, [pc, #124]	@ (800c698 <TIM_OC4_SetConfig+0x110>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d013      	beq.n	800c648 <TIM_OC4_SetConfig+0xc0>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a1e      	ldr	r2, [pc, #120]	@ (800c69c <TIM_OC4_SetConfig+0x114>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00f      	beq.n	800c648 <TIM_OC4_SetConfig+0xc0>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a4 <TIM_OC4_SetConfig+0x11c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d00b      	beq.n	800c648 <TIM_OC4_SetConfig+0xc0>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a8 <TIM_OC4_SetConfig+0x120>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d007      	beq.n	800c648 <TIM_OC4_SetConfig+0xc0>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6ac <TIM_OC4_SetConfig+0x124>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d003      	beq.n	800c648 <TIM_OC4_SetConfig+0xc0>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a17      	ldr	r2, [pc, #92]	@ (800c6a0 <TIM_OC4_SetConfig+0x118>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d113      	bne.n	800c670 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c64e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c656:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	019b      	lsls	r3, r3, #6
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	4313      	orrs	r3, r2
 800c662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	019b      	lsls	r3, r3, #6
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	621a      	str	r2, [r3, #32]
}
 800c68a:	bf00      	nop
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	40012c00 	.word	0x40012c00
 800c69c:	40013400 	.word	0x40013400
 800c6a0:	40015000 	.word	0x40015000
 800c6a4:	40014000 	.word	0x40014000
 800c6a8:	40014400 	.word	0x40014400
 800c6ac:	40014800 	.word	0x40014800

0800c6b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c6f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	041b      	lsls	r3, r3, #16
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a19      	ldr	r2, [pc, #100]	@ (800c76c <TIM_OC5_SetConfig+0xbc>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d013      	beq.n	800c732 <TIM_OC5_SetConfig+0x82>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a18      	ldr	r2, [pc, #96]	@ (800c770 <TIM_OC5_SetConfig+0xc0>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d00f      	beq.n	800c732 <TIM_OC5_SetConfig+0x82>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a17      	ldr	r2, [pc, #92]	@ (800c774 <TIM_OC5_SetConfig+0xc4>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d00b      	beq.n	800c732 <TIM_OC5_SetConfig+0x82>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a16      	ldr	r2, [pc, #88]	@ (800c778 <TIM_OC5_SetConfig+0xc8>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d007      	beq.n	800c732 <TIM_OC5_SetConfig+0x82>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a15      	ldr	r2, [pc, #84]	@ (800c77c <TIM_OC5_SetConfig+0xcc>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d003      	beq.n	800c732 <TIM_OC5_SetConfig+0x82>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a14      	ldr	r2, [pc, #80]	@ (800c780 <TIM_OC5_SetConfig+0xd0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d109      	bne.n	800c746 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	021b      	lsls	r3, r3, #8
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	4313      	orrs	r3, r2
 800c744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	621a      	str	r2, [r3, #32]
}
 800c760:	bf00      	nop
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	40012c00 	.word	0x40012c00
 800c770:	40013400 	.word	0x40013400
 800c774:	40014000 	.word	0x40014000
 800c778:	40014400 	.word	0x40014400
 800c77c:	40014800 	.word	0x40014800
 800c780:	40015000 	.word	0x40015000

0800c784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c784:	b480      	push	{r7}
 800c786:	b087      	sub	sp, #28
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	051b      	lsls	r3, r3, #20
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a1a      	ldr	r2, [pc, #104]	@ (800c844 <TIM_OC6_SetConfig+0xc0>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d013      	beq.n	800c808 <TIM_OC6_SetConfig+0x84>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a19      	ldr	r2, [pc, #100]	@ (800c848 <TIM_OC6_SetConfig+0xc4>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00f      	beq.n	800c808 <TIM_OC6_SetConfig+0x84>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a18      	ldr	r2, [pc, #96]	@ (800c84c <TIM_OC6_SetConfig+0xc8>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d00b      	beq.n	800c808 <TIM_OC6_SetConfig+0x84>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a17      	ldr	r2, [pc, #92]	@ (800c850 <TIM_OC6_SetConfig+0xcc>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d007      	beq.n	800c808 <TIM_OC6_SetConfig+0x84>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a16      	ldr	r2, [pc, #88]	@ (800c854 <TIM_OC6_SetConfig+0xd0>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d003      	beq.n	800c808 <TIM_OC6_SetConfig+0x84>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a15      	ldr	r2, [pc, #84]	@ (800c858 <TIM_OC6_SetConfig+0xd4>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d109      	bne.n	800c81c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c80e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	029b      	lsls	r3, r3, #10
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	4313      	orrs	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	621a      	str	r2, [r3, #32]
}
 800c836:	bf00      	nop
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	40012c00 	.word	0x40012c00
 800c848:	40013400 	.word	0x40013400
 800c84c:	40014000 	.word	0x40014000
 800c850:	40014400 	.word	0x40014400
 800c854:	40014800 	.word	0x40014800
 800c858:	40015000 	.word	0x40015000

0800c85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	f023 0201 	bic.w	r2, r3, #1
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	4313      	orrs	r3, r2
 800c890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f023 030a 	bic.w	r3, r3, #10
 800c898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	621a      	str	r2, [r3, #32]
}
 800c8ae:	bf00      	nop
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8ba:	b480      	push	{r7}
 800c8bc:	b087      	sub	sp, #28
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	f023 0210 	bic.w	r2, r3, #16
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	031b      	lsls	r3, r3, #12
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	011b      	lsls	r3, r3, #4
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	621a      	str	r2, [r3, #32]
}
 800c90e:	bf00      	nop
 800c910:	371c      	adds	r7, #28
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b085      	sub	sp, #20
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f043 0307 	orr.w	r3, r3, #7
 800c940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	609a      	str	r2, [r3, #8]
}
 800c948:	bf00      	nop
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c96e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	021a      	lsls	r2, r3, #8
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	431a      	orrs	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4313      	orrs	r3, r2
 800c980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	609a      	str	r2, [r3, #8]
}
 800c988:	bf00      	nop
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f003 031f 	and.w	r3, r3, #31
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a1a      	ldr	r2, [r3, #32]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	43db      	mvns	r3, r3
 800c9b6:	401a      	ands	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6a1a      	ldr	r2, [r3, #32]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f003 031f 	and.w	r3, r3, #31
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	621a      	str	r2, [r3, #32]
}
 800c9d2:	bf00      	nop
 800c9d4:	371c      	adds	r7, #28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a26      	ldr	r2, [pc, #152]	@ (800ca84 <TIM_ResetCallback+0xa4>)
 800c9ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a25      	ldr	r2, [pc, #148]	@ (800ca88 <TIM_ResetCallback+0xa8>)
 800c9f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a24      	ldr	r2, [pc, #144]	@ (800ca8c <TIM_ResetCallback+0xac>)
 800c9fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a23      	ldr	r2, [pc, #140]	@ (800ca90 <TIM_ResetCallback+0xb0>)
 800ca04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a22      	ldr	r2, [pc, #136]	@ (800ca94 <TIM_ResetCallback+0xb4>)
 800ca0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a21      	ldr	r2, [pc, #132]	@ (800ca98 <TIM_ResetCallback+0xb8>)
 800ca14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a20      	ldr	r2, [pc, #128]	@ (800ca9c <TIM_ResetCallback+0xbc>)
 800ca1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a1f      	ldr	r2, [pc, #124]	@ (800caa0 <TIM_ResetCallback+0xc0>)
 800ca24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a1e      	ldr	r2, [pc, #120]	@ (800caa4 <TIM_ResetCallback+0xc4>)
 800ca2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a1d      	ldr	r2, [pc, #116]	@ (800caa8 <TIM_ResetCallback+0xc8>)
 800ca34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a1c      	ldr	r2, [pc, #112]	@ (800caac <TIM_ResetCallback+0xcc>)
 800ca3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a1b      	ldr	r2, [pc, #108]	@ (800cab0 <TIM_ResetCallback+0xd0>)
 800ca44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a1a      	ldr	r2, [pc, #104]	@ (800cab4 <TIM_ResetCallback+0xd4>)
 800ca4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a19      	ldr	r2, [pc, #100]	@ (800cab8 <TIM_ResetCallback+0xd8>)
 800ca54:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a18      	ldr	r2, [pc, #96]	@ (800cabc <TIM_ResetCallback+0xdc>)
 800ca5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a17      	ldr	r2, [pc, #92]	@ (800cac0 <TIM_ResetCallback+0xe0>)
 800ca64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a16      	ldr	r2, [pc, #88]	@ (800cac4 <TIM_ResetCallback+0xe4>)
 800ca6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a15      	ldr	r2, [pc, #84]	@ (800cac8 <TIM_ResetCallback+0xe8>)
 800ca74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	08005a45 	.word	0x08005a45
 800ca88:	0800bd2d 	.word	0x0800bd2d
 800ca8c:	0800bda5 	.word	0x0800bda5
 800ca90:	0800bdb9 	.word	0x0800bdb9
 800ca94:	0800bd55 	.word	0x0800bd55
 800ca98:	0800bd69 	.word	0x0800bd69
 800ca9c:	0800bd41 	.word	0x0800bd41
 800caa0:	0800bd7d 	.word	0x0800bd7d
 800caa4:	0800bd91 	.word	0x0800bd91
 800caa8:	0800bdcd 	.word	0x0800bdcd
 800caac:	0800cd21 	.word	0x0800cd21
 800cab0:	0800cd35 	.word	0x0800cd35
 800cab4:	0800cd49 	.word	0x0800cd49
 800cab8:	0800cd5d 	.word	0x0800cd5d
 800cabc:	0800cd71 	.word	0x0800cd71
 800cac0:	0800cd85 	.word	0x0800cd85
 800cac4:	0800cd99 	.word	0x0800cd99
 800cac8:	0800cdad 	.word	0x0800cdad

0800cacc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d101      	bne.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cae0:	2302      	movs	r3, #2
 800cae2:	e074      	b.n	800cbce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2202      	movs	r2, #2
 800caf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a34      	ldr	r2, [pc, #208]	@ (800cbdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d009      	beq.n	800cb22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a33      	ldr	r2, [pc, #204]	@ (800cbe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d004      	beq.n	800cb22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a31      	ldr	r2, [pc, #196]	@ (800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d108      	bne.n	800cb34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cb28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cb3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a21      	ldr	r2, [pc, #132]	@ (800cbdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d022      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb64:	d01d      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a1f      	ldr	r2, [pc, #124]	@ (800cbe8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d018      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a1d      	ldr	r2, [pc, #116]	@ (800cbec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d013      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00e      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a15      	ldr	r2, [pc, #84]	@ (800cbe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d009      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a18      	ldr	r2, [pc, #96]	@ (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d004      	beq.n	800cba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a11      	ldr	r2, [pc, #68]	@ (800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d10c      	bne.n	800cbbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	40012c00 	.word	0x40012c00
 800cbe0:	40013400 	.word	0x40013400
 800cbe4:	40015000 	.word	0x40015000
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40000800 	.word	0x40000800
 800cbf0:	40000c00 	.word	0x40000c00
 800cbf4:	40014000 	.word	0x40014000

0800cbf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d101      	bne.n	800cc14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc10:	2302      	movs	r3, #2
 800cc12:	e078      	b.n	800cd06 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	041b      	lsls	r3, r3, #16
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a1c      	ldr	r2, [pc, #112]	@ (800cd14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d009      	beq.n	800ccba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a1b      	ldr	r2, [pc, #108]	@ (800cd18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d004      	beq.n	800ccba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a19      	ldr	r2, [pc, #100]	@ (800cd1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d11c      	bne.n	800ccf4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc4:	051b      	lsls	r3, r3, #20
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	6a1b      	ldr	r3, [r3, #32]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce2:	4313      	orrs	r3, r2
 800cce4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	40012c00 	.word	0x40012c00
 800cd18:	40013400 	.word	0x40013400
 800cd1c:	40015000 	.word	0x40015000

0800cd20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e050      	b.n	800ce74 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d114      	bne.n	800ce06 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fd5b 	bl	800d8a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d103      	bne.n	800cdfc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a21      	ldr	r2, [pc, #132]	@ (800ce7c <HAL_UART_Init+0xbc>)
 800cdf8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2224      	movs	r2, #36	@ 0x24
 800ce0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f022 0201 	bic.w	r2, r2, #1
 800ce1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f001 f888 	bl	800df3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fd89 	bl	800d944 <UART_SetConfig>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d101      	bne.n	800ce3c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e01b      	b.n	800ce74 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689a      	ldr	r2, [r3, #8]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f042 0201 	orr.w	r2, r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f001 f907 	bl	800e080 <UART_CheckIdleState>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	08007295 	.word	0x08007295

0800ce80 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b087      	sub	sp, #28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d109      	bne.n	800ceac <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e09c      	b.n	800cfe6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceb2:	2b20      	cmp	r3, #32
 800ceb4:	d16c      	bne.n	800cf90 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ceb6:	7afb      	ldrb	r3, [r7, #11]
 800ceb8:	2b0c      	cmp	r3, #12
 800ceba:	d85e      	bhi.n	800cf7a <HAL_UART_RegisterCallback+0xfa>
 800cebc:	a201      	add	r2, pc, #4	@ (adr r2, 800cec4 <HAL_UART_RegisterCallback+0x44>)
 800cebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec2:	bf00      	nop
 800cec4:	0800cef9 	.word	0x0800cef9
 800cec8:	0800cf03 	.word	0x0800cf03
 800cecc:	0800cf0d 	.word	0x0800cf0d
 800ced0:	0800cf17 	.word	0x0800cf17
 800ced4:	0800cf21 	.word	0x0800cf21
 800ced8:	0800cf2b 	.word	0x0800cf2b
 800cedc:	0800cf35 	.word	0x0800cf35
 800cee0:	0800cf3f 	.word	0x0800cf3f
 800cee4:	0800cf49 	.word	0x0800cf49
 800cee8:	0800cf53 	.word	0x0800cf53
 800ceec:	0800cf5d 	.word	0x0800cf5d
 800cef0:	0800cf67 	.word	0x0800cf67
 800cef4:	0800cf71 	.word	0x0800cf71
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800cf00:	e070      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800cf0a:	e06b      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800cf14:	e066      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800cf1e:	e061      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800cf28:	e05c      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800cf32:	e057      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800cf3c:	e052      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800cf46:	e04d      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800cf50:	e048      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800cf5a:	e043      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800cf64:	e03e      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cf6e:	e039      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cf78:	e034      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	75fb      	strb	r3, [r7, #23]
        break;
 800cf8e:	e029      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d11a      	bne.n	800cfd0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	2b0b      	cmp	r3, #11
 800cf9e:	d002      	beq.n	800cfa6 <HAL_UART_RegisterCallback+0x126>
 800cfa0:	2b0c      	cmp	r3, #12
 800cfa2:	d005      	beq.n	800cfb0 <HAL_UART_RegisterCallback+0x130>
 800cfa4:	e009      	b.n	800cfba <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cfae:	e019      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cfb8:	e014      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	75fb      	strb	r3, [r7, #23]
        break;
 800cfce:	e009      	b.n	800cfe4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	@ 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4613      	mov	r3, r2
 800d000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d137      	bne.n	800d07c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <HAL_UART_Receive_DMA+0x24>
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e030      	b.n	800d07e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a18      	ldr	r2, [pc, #96]	@ (800d088 <HAL_UART_Receive_DMA+0x94>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d01f      	beq.n	800d06c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d018      	beq.n	800d06c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	e853 3f00 	ldrex	r3, [r3]
 800d046:	613b      	str	r3, [r7, #16]
   return(result);
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	461a      	mov	r2, r3
 800d056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d058:	623b      	str	r3, [r7, #32]
 800d05a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	6a3a      	ldr	r2, [r7, #32]
 800d060:	e841 2300 	strex	r3, r2, [r1]
 800d064:	61bb      	str	r3, [r7, #24]
   return(result);
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e6      	bne.n	800d03a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d06c:	88fb      	ldrh	r3, [r7, #6]
 800d06e:	461a      	mov	r2, r3
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f001 f91c 	bl	800e2b0 <UART_Start_Receive_DMA>
 800d078:	4603      	mov	r3, r0
 800d07a:	e000      	b.n	800d07e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d07c:	2302      	movs	r3, #2
  }
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3728      	adds	r7, #40	@ 0x28
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	40008000 	.word	0x40008000

0800d08c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b0ba      	sub	sp, #232	@ 0xe8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d0b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d0c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d11b      	bne.n	800d100 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d015      	beq.n	800d100 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0d8:	f003 0320 	and.w	r3, r3, #32
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d105      	bne.n	800d0ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 8312 	beq.w	800d71a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
      }
      return;
 800d0fe:	e30c      	b.n	800d71a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8129 	beq.w	800d35c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d10a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d10e:	4b90      	ldr	r3, [pc, #576]	@ (800d350 <HAL_UART_IRQHandler+0x2c4>)
 800d110:	4013      	ands	r3, r2
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d11a:	4b8e      	ldr	r3, [pc, #568]	@ (800d354 <HAL_UART_IRQHandler+0x2c8>)
 800d11c:	4013      	ands	r3, r2
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 811c 	beq.w	800d35c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d011      	beq.n	800d154 <HAL_UART_IRQHandler+0xc8>
 800d130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00b      	beq.n	800d154 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2201      	movs	r2, #1
 800d142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d14a:	f043 0201 	orr.w	r2, r3, #1
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d011      	beq.n	800d184 <HAL_UART_IRQHandler+0xf8>
 800d160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00b      	beq.n	800d184 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2202      	movs	r2, #2
 800d172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d17a:	f043 0204 	orr.w	r2, r3, #4
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d188:	f003 0304 	and.w	r3, r3, #4
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d011      	beq.n	800d1b4 <HAL_UART_IRQHandler+0x128>
 800d190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1aa:	f043 0202 	orr.w	r2, r3, #2
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1b8:	f003 0308 	and.w	r3, r3, #8
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d017      	beq.n	800d1f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d105      	bne.n	800d1d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d1d0:	4b5f      	ldr	r3, [pc, #380]	@ (800d350 <HAL_UART_IRQHandler+0x2c4>)
 800d1d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00b      	beq.n	800d1f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2208      	movs	r2, #8
 800d1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1e6:	f043 0208 	orr.w	r2, r3, #8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d012      	beq.n	800d222 <HAL_UART_IRQHandler+0x196>
 800d1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d200:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00c      	beq.n	800d222 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d218:	f043 0220 	orr.w	r2, r3, #32
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 8278 	beq.w	800d71e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d232:	f003 0320 	and.w	r3, r3, #32
 800d236:	2b00      	cmp	r3, #0
 800d238:	d013      	beq.n	800d262 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d23e:	f003 0320 	and.w	r3, r3, #32
 800d242:	2b00      	cmp	r3, #0
 800d244:	d105      	bne.n	800d252 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d276:	2b40      	cmp	r3, #64	@ 0x40
 800d278:	d005      	beq.n	800d286 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d27e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d282:	2b00      	cmp	r3, #0
 800d284:	d058      	beq.n	800d338 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 f8f9 	bl	800e47e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d296:	2b40      	cmp	r3, #64	@ 0x40
 800d298:	d148      	bne.n	800d32c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3308      	adds	r3, #8
 800d2a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2a8:	e853 3f00 	ldrex	r3, [r3]
 800d2ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2d6:	e841 2300 	strex	r3, r2, [r1]
 800d2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1d9      	bne.n	800d29a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d017      	beq.n	800d320 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f6:	4a18      	ldr	r2, [pc, #96]	@ (800d358 <HAL_UART_IRQHandler+0x2cc>)
 800d2f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d300:	4618      	mov	r0, r3
 800d302:	f7fc f8c5 	bl	8009490 <HAL_DMA_Abort_IT>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01f      	beq.n	800d34c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d31a:	4610      	mov	r0, r2
 800d31c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d31e:	e015      	b.n	800d34c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d32a:	e00f      	b.n	800d34c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d336:	e009      	b.n	800d34c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d34a:	e1e8      	b.n	800d71e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d34c:	bf00      	nop
    return;
 800d34e:	e1e6      	b.n	800d71e <HAL_UART_IRQHandler+0x692>
 800d350:	10000001 	.word	0x10000001
 800d354:	04000120 	.word	0x04000120
 800d358:	0800e749 	.word	0x0800e749

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d360:	2b01      	cmp	r3, #1
 800d362:	f040 8176 	bne.w	800d652 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d36a:	f003 0310 	and.w	r3, r3, #16
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 816f 	beq.w	800d652 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d378:	f003 0310 	and.w	r3, r3, #16
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 8168 	beq.w	800d652 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2210      	movs	r2, #16
 800d388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d394:	2b40      	cmp	r3, #64	@ 0x40
 800d396:	f040 80dc 	bne.w	800d552 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80b1 	beq.w	800d514 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	f080 80a9 	bcs.w	800d514 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f003 0320 	and.w	r3, r3, #32
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f040 8087 	bne.w	800d4ee <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3ec:	e853 3f00 	ldrex	r3, [r3]
 800d3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d3f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	461a      	mov	r2, r3
 800d406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d40a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d40e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1da      	bne.n	800d3e0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d43a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3308      	adds	r3, #8
 800d44a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d44e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e1      	bne.n	800d42a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d47c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3308      	adds	r3, #8
 800d486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d48a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d48c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d492:	e841 2300 	strex	r3, r2, [r1]
 800d496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1e3      	bne.n	800d466 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4bc:	f023 0310 	bic.w	r3, r3, #16
 800d4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4d6:	e841 2300 	strex	r3, r2, [r1]
 800d4da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1e4      	bne.n	800d4ac <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fb ff78 	bl	80093de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800d506:	b292      	uxth	r2, r2
 800d508:	1a8a      	subs	r2, r1, r2
 800d50a:	b292      	uxth	r2, r2
 800d50c:	4611      	mov	r1, r2
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d512:	e106      	b.n	800d722 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d51a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d51e:	429a      	cmp	r2, r3
 800d520:	f040 80ff 	bne.w	800d722 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 0320 	and.w	r3, r3, #32
 800d532:	2b20      	cmp	r3, #32
 800d534:	f040 80f5 	bne.w	800d722 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2202      	movs	r2, #2
 800d53c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d54a:	4611      	mov	r1, r2
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
      return;
 800d550:	e0e7      	b.n	800d722 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d55e:	b29b      	uxth	r3, r3
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 80d9 	beq.w	800d726 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800d574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 80d4 	beq.w	800d726 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d58e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	461a      	mov	r2, r3
 800d59c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d5a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5a8:	e841 2300 	strex	r3, r2, [r1]
 800d5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1e4      	bne.n	800d57e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5ca:	f023 0301 	bic.w	r3, r3, #1
 800d5ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d5dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e1      	bne.n	800d5b4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2220      	movs	r2, #32
 800d5f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	e853 3f00 	ldrex	r3, [r3]
 800d610:	60fb      	str	r3, [r7, #12]
   return(result);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f023 0310 	bic.w	r3, r3, #16
 800d618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	69b9      	ldr	r1, [r7, #24]
 800d62c:	69fa      	ldr	r2, [r7, #28]
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	617b      	str	r3, [r7, #20]
   return(result);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e4      	bne.n	800d604 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2202      	movs	r2, #2
 800d63e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d646:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d64a:	4611      	mov	r1, r2
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d650:	e069      	b.n	800d726 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d010      	beq.n	800d680 <HAL_UART_IRQHandler+0x5f4>
 800d65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d672:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d67e:	e055      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d014      	beq.n	800d6b6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d694:	2b00      	cmp	r3, #0
 800d696:	d105      	bne.n	800d6a4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d69c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d008      	beq.n	800d6b6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d03e      	beq.n	800d72a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4798      	blx	r3
    }
    return;
 800d6b4:	e039      	b.n	800d72a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d009      	beq.n	800d6d6 <HAL_UART_IRQHandler+0x64a>
 800d6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d003      	beq.n	800d6d6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f001 f84e 	bl	800e770 <UART_EndTransmit_IT>
    return;
 800d6d4:	e02a      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00b      	beq.n	800d6fa <HAL_UART_IRQHandler+0x66e>
 800d6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6f8:	e018      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d702:	2b00      	cmp	r3, #0
 800d704:	d012      	beq.n	800d72c <HAL_UART_IRQHandler+0x6a0>
 800d706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	da0e      	bge.n	800d72c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d718:	e008      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
      return;
 800d71a:	bf00      	nop
 800d71c:	e006      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
    return;
 800d71e:	bf00      	nop
 800d720:	e004      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
      return;
 800d722:	bf00      	nop
 800d724:	e002      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
      return;
 800d726:	bf00      	nop
 800d728:	e000      	b.n	800d72c <HAL_UART_IRQHandler+0x6a0>
    return;
 800d72a:	bf00      	nop
  }
}
 800d72c:	37e8      	adds	r7, #232	@ 0xe8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop

0800d734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a09      	ldr	r2, [pc, #36]	@ (800d80c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d009      	beq.n	800d800 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	430a      	orrs	r2, r1
 800d7fe:	615a      	str	r2, [r3, #20]
  }
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	40008000 	.word	0x40008000

0800d810 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a18      	ldr	r2, [pc, #96]	@ (800d880 <HAL_UART_EnableReceiverTimeout+0x70>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d027      	beq.n	800d872 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d120      	bne.n	800d86e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d832:	2b01      	cmp	r3, #1
 800d834:	d101      	bne.n	800d83a <HAL_UART_EnableReceiverTimeout+0x2a>
 800d836:	2302      	movs	r3, #2
 800d838:	e01c      	b.n	800d874 <HAL_UART_EnableReceiverTimeout+0x64>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2224      	movs	r2, #36	@ 0x24
 800d846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800d858:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2220      	movs	r2, #32
 800d85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	e002      	b.n	800d874 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800d86e:	2302      	movs	r3, #2
 800d870:	e000      	b.n	800d874 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
  }
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	40008000 	.word	0x40008000

0800d884 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
	...

0800d8a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d914 <UART_InitCallbacksToDefault+0x74>)
 800d8ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a19      	ldr	r2, [pc, #100]	@ (800d918 <UART_InitCallbacksToDefault+0x78>)
 800d8b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a18      	ldr	r2, [pc, #96]	@ (800d91c <UART_InitCallbacksToDefault+0x7c>)
 800d8bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a17      	ldr	r2, [pc, #92]	@ (800d920 <UART_InitCallbacksToDefault+0x80>)
 800d8c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a16      	ldr	r2, [pc, #88]	@ (800d924 <UART_InitCallbacksToDefault+0x84>)
 800d8cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a15      	ldr	r2, [pc, #84]	@ (800d928 <UART_InitCallbacksToDefault+0x88>)
 800d8d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a14      	ldr	r2, [pc, #80]	@ (800d92c <UART_InitCallbacksToDefault+0x8c>)
 800d8dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a13      	ldr	r2, [pc, #76]	@ (800d930 <UART_InitCallbacksToDefault+0x90>)
 800d8e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a12      	ldr	r2, [pc, #72]	@ (800d934 <UART_InitCallbacksToDefault+0x94>)
 800d8ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a11      	ldr	r2, [pc, #68]	@ (800d938 <UART_InitCallbacksToDefault+0x98>)
 800d8f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a10      	ldr	r2, [pc, #64]	@ (800d93c <UART_InitCallbacksToDefault+0x9c>)
 800d8fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a0f      	ldr	r2, [pc, #60]	@ (800d940 <UART_InitCallbacksToDefault+0xa0>)
 800d904:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	0800d749 	.word	0x0800d749
 800d918:	0800d735 	.word	0x0800d735
 800d91c:	0800d75d 	.word	0x0800d75d
 800d920:	08005a31 	.word	0x08005a31
 800d924:	0800d771 	.word	0x0800d771
 800d928:	0800d785 	.word	0x0800d785
 800d92c:	0800d799 	.word	0x0800d799
 800d930:	0800d7ad 	.word	0x0800d7ad
 800d934:	0800e7cb 	.word	0x0800e7cb
 800d938:	0800e7df 	.word	0x0800e7df
 800d93c:	0800e7f3 	.word	0x0800e7f3
 800d940:	0800d7c1 	.word	0x0800d7c1

0800d944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d948:	b08c      	sub	sp, #48	@ 0x30
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	689a      	ldr	r2, [r3, #8]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	431a      	orrs	r2, r3
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	431a      	orrs	r2, r3
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	69db      	ldr	r3, [r3, #28]
 800d968:	4313      	orrs	r3, r2
 800d96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	4baa      	ldr	r3, [pc, #680]	@ (800dc1c <UART_SetConfig+0x2d8>)
 800d974:	4013      	ands	r3, r2
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	6812      	ldr	r2, [r2, #0]
 800d97a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d97c:	430b      	orrs	r3, r1
 800d97e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	430a      	orrs	r2, r1
 800d994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a9f      	ldr	r2, [pc, #636]	@ (800dc20 <UART_SetConfig+0x2dc>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d004      	beq.n	800d9b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d9ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9c4:	430b      	orrs	r3, r1
 800d9c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ce:	f023 010f 	bic.w	r1, r3, #15
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a90      	ldr	r2, [pc, #576]	@ (800dc24 <UART_SetConfig+0x2e0>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d125      	bne.n	800da34 <UART_SetConfig+0xf0>
 800d9e8:	4b8f      	ldr	r3, [pc, #572]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800d9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9ee:	f003 0303 	and.w	r3, r3, #3
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d81a      	bhi.n	800da2c <UART_SetConfig+0xe8>
 800d9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9fc <UART_SetConfig+0xb8>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800da0d 	.word	0x0800da0d
 800da00:	0800da1d 	.word	0x0800da1d
 800da04:	0800da15 	.word	0x0800da15
 800da08:	0800da25 	.word	0x0800da25
 800da0c:	2301      	movs	r3, #1
 800da0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da12:	e116      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da14:	2302      	movs	r3, #2
 800da16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da1a:	e112      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da1c:	2304      	movs	r3, #4
 800da1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da22:	e10e      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da24:	2308      	movs	r3, #8
 800da26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da2a:	e10a      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da2c:	2310      	movs	r3, #16
 800da2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da32:	e106      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a7c      	ldr	r2, [pc, #496]	@ (800dc2c <UART_SetConfig+0x2e8>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d138      	bne.n	800dab0 <UART_SetConfig+0x16c>
 800da3e:	4b7a      	ldr	r3, [pc, #488]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800da40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da44:	f003 030c 	and.w	r3, r3, #12
 800da48:	2b0c      	cmp	r3, #12
 800da4a:	d82d      	bhi.n	800daa8 <UART_SetConfig+0x164>
 800da4c:	a201      	add	r2, pc, #4	@ (adr r2, 800da54 <UART_SetConfig+0x110>)
 800da4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da52:	bf00      	nop
 800da54:	0800da89 	.word	0x0800da89
 800da58:	0800daa9 	.word	0x0800daa9
 800da5c:	0800daa9 	.word	0x0800daa9
 800da60:	0800daa9 	.word	0x0800daa9
 800da64:	0800da99 	.word	0x0800da99
 800da68:	0800daa9 	.word	0x0800daa9
 800da6c:	0800daa9 	.word	0x0800daa9
 800da70:	0800daa9 	.word	0x0800daa9
 800da74:	0800da91 	.word	0x0800da91
 800da78:	0800daa9 	.word	0x0800daa9
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	0800daa9 	.word	0x0800daa9
 800da84:	0800daa1 	.word	0x0800daa1
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da8e:	e0d8      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da90:	2302      	movs	r3, #2
 800da92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da96:	e0d4      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800da98:	2304      	movs	r3, #4
 800da9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da9e:	e0d0      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800daa0:	2308      	movs	r3, #8
 800daa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800daa6:	e0cc      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800daa8:	2310      	movs	r3, #16
 800daaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800daae:	e0c8      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a5e      	ldr	r2, [pc, #376]	@ (800dc30 <UART_SetConfig+0x2ec>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d125      	bne.n	800db06 <UART_SetConfig+0x1c2>
 800daba:	4b5b      	ldr	r3, [pc, #364]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800dabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dac0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800dac4:	2b30      	cmp	r3, #48	@ 0x30
 800dac6:	d016      	beq.n	800daf6 <UART_SetConfig+0x1b2>
 800dac8:	2b30      	cmp	r3, #48	@ 0x30
 800daca:	d818      	bhi.n	800dafe <UART_SetConfig+0x1ba>
 800dacc:	2b20      	cmp	r3, #32
 800dace:	d00a      	beq.n	800dae6 <UART_SetConfig+0x1a2>
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d814      	bhi.n	800dafe <UART_SetConfig+0x1ba>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <UART_SetConfig+0x19a>
 800dad8:	2b10      	cmp	r3, #16
 800dada:	d008      	beq.n	800daee <UART_SetConfig+0x1aa>
 800dadc:	e00f      	b.n	800dafe <UART_SetConfig+0x1ba>
 800dade:	2300      	movs	r3, #0
 800dae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dae4:	e0ad      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dae6:	2302      	movs	r3, #2
 800dae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800daec:	e0a9      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800daee:	2304      	movs	r3, #4
 800daf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800daf4:	e0a5      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800daf6:	2308      	movs	r3, #8
 800daf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dafc:	e0a1      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dafe:	2310      	movs	r3, #16
 800db00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db04:	e09d      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a4a      	ldr	r2, [pc, #296]	@ (800dc34 <UART_SetConfig+0x2f0>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d125      	bne.n	800db5c <UART_SetConfig+0x218>
 800db10:	4b45      	ldr	r3, [pc, #276]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800db12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800db1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800db1c:	d016      	beq.n	800db4c <UART_SetConfig+0x208>
 800db1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800db20:	d818      	bhi.n	800db54 <UART_SetConfig+0x210>
 800db22:	2b80      	cmp	r3, #128	@ 0x80
 800db24:	d00a      	beq.n	800db3c <UART_SetConfig+0x1f8>
 800db26:	2b80      	cmp	r3, #128	@ 0x80
 800db28:	d814      	bhi.n	800db54 <UART_SetConfig+0x210>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <UART_SetConfig+0x1f0>
 800db2e:	2b40      	cmp	r3, #64	@ 0x40
 800db30:	d008      	beq.n	800db44 <UART_SetConfig+0x200>
 800db32:	e00f      	b.n	800db54 <UART_SetConfig+0x210>
 800db34:	2300      	movs	r3, #0
 800db36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db3a:	e082      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db3c:	2302      	movs	r3, #2
 800db3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db42:	e07e      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db44:	2304      	movs	r3, #4
 800db46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db4a:	e07a      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db4c:	2308      	movs	r3, #8
 800db4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db52:	e076      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db54:	2310      	movs	r3, #16
 800db56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db5a:	e072      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a35      	ldr	r2, [pc, #212]	@ (800dc38 <UART_SetConfig+0x2f4>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d12a      	bne.n	800dbbc <UART_SetConfig+0x278>
 800db66:	4b30      	ldr	r3, [pc, #192]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800db68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db74:	d01a      	beq.n	800dbac <UART_SetConfig+0x268>
 800db76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db7a:	d81b      	bhi.n	800dbb4 <UART_SetConfig+0x270>
 800db7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db80:	d00c      	beq.n	800db9c <UART_SetConfig+0x258>
 800db82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db86:	d815      	bhi.n	800dbb4 <UART_SetConfig+0x270>
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <UART_SetConfig+0x250>
 800db8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db90:	d008      	beq.n	800dba4 <UART_SetConfig+0x260>
 800db92:	e00f      	b.n	800dbb4 <UART_SetConfig+0x270>
 800db94:	2300      	movs	r3, #0
 800db96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db9a:	e052      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800db9c:	2302      	movs	r3, #2
 800db9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dba2:	e04e      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dba4:	2304      	movs	r3, #4
 800dba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbaa:	e04a      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dbac:	2308      	movs	r3, #8
 800dbae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbb2:	e046      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dbb4:	2310      	movs	r3, #16
 800dbb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbba:	e042      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a17      	ldr	r2, [pc, #92]	@ (800dc20 <UART_SetConfig+0x2dc>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d13a      	bne.n	800dc3c <UART_SetConfig+0x2f8>
 800dbc6:	4b18      	ldr	r3, [pc, #96]	@ (800dc28 <UART_SetConfig+0x2e4>)
 800dbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dbd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dbd4:	d01a      	beq.n	800dc0c <UART_SetConfig+0x2c8>
 800dbd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dbda:	d81b      	bhi.n	800dc14 <UART_SetConfig+0x2d0>
 800dbdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbe0:	d00c      	beq.n	800dbfc <UART_SetConfig+0x2b8>
 800dbe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbe6:	d815      	bhi.n	800dc14 <UART_SetConfig+0x2d0>
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d003      	beq.n	800dbf4 <UART_SetConfig+0x2b0>
 800dbec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbf0:	d008      	beq.n	800dc04 <UART_SetConfig+0x2c0>
 800dbf2:	e00f      	b.n	800dc14 <UART_SetConfig+0x2d0>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbfa:	e022      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc02:	e01e      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dc04:	2304      	movs	r3, #4
 800dc06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc0a:	e01a      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dc0c:	2308      	movs	r3, #8
 800dc0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc12:	e016      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dc14:	2310      	movs	r3, #16
 800dc16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc1a:	e012      	b.n	800dc42 <UART_SetConfig+0x2fe>
 800dc1c:	cfff69f3 	.word	0xcfff69f3
 800dc20:	40008000 	.word	0x40008000
 800dc24:	40013800 	.word	0x40013800
 800dc28:	40021000 	.word	0x40021000
 800dc2c:	40004400 	.word	0x40004400
 800dc30:	40004800 	.word	0x40004800
 800dc34:	40004c00 	.word	0x40004c00
 800dc38:	40005000 	.word	0x40005000
 800dc3c:	2310      	movs	r3, #16
 800dc3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4aae      	ldr	r2, [pc, #696]	@ (800df00 <UART_SetConfig+0x5bc>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	f040 8097 	bne.w	800dd7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dc52:	2b08      	cmp	r3, #8
 800dc54:	d823      	bhi.n	800dc9e <UART_SetConfig+0x35a>
 800dc56:	a201      	add	r2, pc, #4	@ (adr r2, 800dc5c <UART_SetConfig+0x318>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc81 	.word	0x0800dc81
 800dc60:	0800dc9f 	.word	0x0800dc9f
 800dc64:	0800dc89 	.word	0x0800dc89
 800dc68:	0800dc9f 	.word	0x0800dc9f
 800dc6c:	0800dc8f 	.word	0x0800dc8f
 800dc70:	0800dc9f 	.word	0x0800dc9f
 800dc74:	0800dc9f 	.word	0x0800dc9f
 800dc78:	0800dc9f 	.word	0x0800dc9f
 800dc7c:	0800dc97 	.word	0x0800dc97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc80:	f7fc fcf6 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800dc84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc86:	e010      	b.n	800dcaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc88:	4b9e      	ldr	r3, [pc, #632]	@ (800df04 <UART_SetConfig+0x5c0>)
 800dc8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc8c:	e00d      	b.n	800dcaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc8e:	f7fc fc81 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800dc92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc94:	e009      	b.n	800dcaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc9c:	e005      	b.n	800dcaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8130 	beq.w	800df12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb6:	4a94      	ldr	r2, [pc, #592]	@ (800df08 <UART_SetConfig+0x5c4>)
 800dcb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	4613      	mov	r3, r2
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	4413      	add	r3, r2
 800dcd0:	69ba      	ldr	r2, [r7, #24]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d305      	bcc.n	800dce2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcdc:	69ba      	ldr	r2, [r7, #24]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d903      	bls.n	800dcea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800dce2:	2301      	movs	r3, #1
 800dce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dce8:	e113      	b.n	800df12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	2200      	movs	r2, #0
 800dcee:	60bb      	str	r3, [r7, #8]
 800dcf0:	60fa      	str	r2, [r7, #12]
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf6:	4a84      	ldr	r2, [pc, #528]	@ (800df08 <UART_SetConfig+0x5c4>)
 800dcf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	2200      	movs	r2, #0
 800dd00:	603b      	str	r3, [r7, #0]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dd0c:	f7f2 ff72 	bl	8000bf4 <__aeabi_uldivmod>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4610      	mov	r0, r2
 800dd16:	4619      	mov	r1, r3
 800dd18:	f04f 0200 	mov.w	r2, #0
 800dd1c:	f04f 0300 	mov.w	r3, #0
 800dd20:	020b      	lsls	r3, r1, #8
 800dd22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd26:	0202      	lsls	r2, r0, #8
 800dd28:	6979      	ldr	r1, [r7, #20]
 800dd2a:	6849      	ldr	r1, [r1, #4]
 800dd2c:	0849      	lsrs	r1, r1, #1
 800dd2e:	2000      	movs	r0, #0
 800dd30:	460c      	mov	r4, r1
 800dd32:	4605      	mov	r5, r0
 800dd34:	eb12 0804 	adds.w	r8, r2, r4
 800dd38:	eb43 0905 	adc.w	r9, r3, r5
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	469a      	mov	sl, r3
 800dd44:	4693      	mov	fp, r2
 800dd46:	4652      	mov	r2, sl
 800dd48:	465b      	mov	r3, fp
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	f7f2 ff51 	bl	8000bf4 <__aeabi_uldivmod>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4613      	mov	r3, r2
 800dd58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd60:	d308      	bcc.n	800dd74 <UART_SetConfig+0x430>
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd68:	d204      	bcs.n	800dd74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6a3a      	ldr	r2, [r7, #32]
 800dd70:	60da      	str	r2, [r3, #12]
 800dd72:	e0ce      	b.n	800df12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dd7a:	e0ca      	b.n	800df12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd84:	d166      	bne.n	800de54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dd86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dd8a:	2b08      	cmp	r3, #8
 800dd8c:	d827      	bhi.n	800ddde <UART_SetConfig+0x49a>
 800dd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd94 <UART_SetConfig+0x450>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800ddb9 	.word	0x0800ddb9
 800dd98:	0800ddc1 	.word	0x0800ddc1
 800dd9c:	0800ddc9 	.word	0x0800ddc9
 800dda0:	0800dddf 	.word	0x0800dddf
 800dda4:	0800ddcf 	.word	0x0800ddcf
 800dda8:	0800dddf 	.word	0x0800dddf
 800ddac:	0800dddf 	.word	0x0800dddf
 800ddb0:	0800dddf 	.word	0x0800dddf
 800ddb4:	0800ddd7 	.word	0x0800ddd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddb8:	f7fc fc5a 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800ddbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ddbe:	e014      	b.n	800ddea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddc0:	f7fc fc6c 	bl	800a69c <HAL_RCC_GetPCLK2Freq>
 800ddc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ddc6:	e010      	b.n	800ddea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ddc8:	4b4e      	ldr	r3, [pc, #312]	@ (800df04 <UART_SetConfig+0x5c0>)
 800ddca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ddcc:	e00d      	b.n	800ddea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddce:	f7fc fbe1 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800ddd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ddd4:	e009      	b.n	800ddea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dddc:	e005      	b.n	800ddea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ddde:	2300      	movs	r3, #0
 800dde0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dde8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 8090 	beq.w	800df12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf6:	4a44      	ldr	r2, [pc, #272]	@ (800df08 <UART_SetConfig+0x5c4>)
 800ddf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de00:	fbb3 f3f2 	udiv	r3, r3, r2
 800de04:	005a      	lsls	r2, r3, #1
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	085b      	lsrs	r3, r3, #1
 800de0c:	441a      	add	r2, r3
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	fbb2 f3f3 	udiv	r3, r2, r3
 800de16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de18:	6a3b      	ldr	r3, [r7, #32]
 800de1a:	2b0f      	cmp	r3, #15
 800de1c:	d916      	bls.n	800de4c <UART_SetConfig+0x508>
 800de1e:	6a3b      	ldr	r3, [r7, #32]
 800de20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de24:	d212      	bcs.n	800de4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	f023 030f 	bic.w	r3, r3, #15
 800de2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de30:	6a3b      	ldr	r3, [r7, #32]
 800de32:	085b      	lsrs	r3, r3, #1
 800de34:	b29b      	uxth	r3, r3
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	8bfb      	ldrh	r3, [r7, #30]
 800de3e:	4313      	orrs	r3, r2
 800de40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	8bfa      	ldrh	r2, [r7, #30]
 800de48:	60da      	str	r2, [r3, #12]
 800de4a:	e062      	b.n	800df12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800de52:	e05e      	b.n	800df12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800de58:	2b08      	cmp	r3, #8
 800de5a:	d828      	bhi.n	800deae <UART_SetConfig+0x56a>
 800de5c:	a201      	add	r2, pc, #4	@ (adr r2, 800de64 <UART_SetConfig+0x520>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800de89 	.word	0x0800de89
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800de99 	.word	0x0800de99
 800de70:	0800deaf 	.word	0x0800deaf
 800de74:	0800de9f 	.word	0x0800de9f
 800de78:	0800deaf 	.word	0x0800deaf
 800de7c:	0800deaf 	.word	0x0800deaf
 800de80:	0800deaf 	.word	0x0800deaf
 800de84:	0800dea7 	.word	0x0800dea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de88:	f7fc fbf2 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800de8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800de8e:	e014      	b.n	800deba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de90:	f7fc fc04 	bl	800a69c <HAL_RCC_GetPCLK2Freq>
 800de94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800de96:	e010      	b.n	800deba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de98:	4b1a      	ldr	r3, [pc, #104]	@ (800df04 <UART_SetConfig+0x5c0>)
 800de9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800de9c:	e00d      	b.n	800deba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de9e:	f7fc fb79 	bl	800a594 <HAL_RCC_GetSysClockFreq>
 800dea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dea4:	e009      	b.n	800deba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800deaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800deac:	e005      	b.n	800deba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800deb8:	bf00      	nop
    }

    if (pclk != 0U)
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	2b00      	cmp	r3, #0
 800debe:	d028      	beq.n	800df12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dec4:	4a10      	ldr	r2, [pc, #64]	@ (800df08 <UART_SetConfig+0x5c4>)
 800dec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deca:	461a      	mov	r2, r3
 800decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dece:	fbb3 f2f2 	udiv	r2, r3, r2
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	085b      	lsrs	r3, r3, #1
 800ded8:	441a      	add	r2, r3
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	2b0f      	cmp	r3, #15
 800dee8:	d910      	bls.n	800df0c <UART_SetConfig+0x5c8>
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800def0:	d20c      	bcs.n	800df0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	b29a      	uxth	r2, r3
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60da      	str	r2, [r3, #12]
 800defc:	e009      	b.n	800df12 <UART_SetConfig+0x5ce>
 800defe:	bf00      	nop
 800df00:	40008000 	.word	0x40008000
 800df04:	00f42400 	.word	0x00f42400
 800df08:	08010c98 	.word	0x08010c98
      }
      else
      {
        ret = HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2201      	movs	r2, #1
 800df16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2200      	movs	r2, #0
 800df26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	2200      	movs	r2, #0
 800df2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800df2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800df32:	4618      	mov	r0, r3
 800df34:	3730      	adds	r7, #48	@ 0x30
 800df36:	46bd      	mov	sp, r7
 800df38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df48:	f003 0308 	and.w	r3, r3, #8
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00a      	beq.n	800df66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	430a      	orrs	r2, r1
 800df64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00a      	beq.n	800df88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	430a      	orrs	r2, r1
 800df86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df8c:	f003 0302 	and.w	r3, r3, #2
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00a      	beq.n	800dfaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	430a      	orrs	r2, r1
 800dfa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfae:	f003 0304 	and.w	r3, r3, #4
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00a      	beq.n	800dfcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	430a      	orrs	r2, r1
 800dfca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00a      	beq.n	800dfee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	430a      	orrs	r2, r1
 800dfec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff2:	f003 0320 	and.w	r3, r3, #32
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00a      	beq.n	800e010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	430a      	orrs	r2, r1
 800e00e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01a      	beq.n	800e052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	430a      	orrs	r2, r1
 800e030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e03a:	d10a      	bne.n	800e052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	430a      	orrs	r2, r1
 800e050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00a      	beq.n	800e074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	430a      	orrs	r2, r1
 800e072:	605a      	str	r2, [r3, #4]
  }
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b098      	sub	sp, #96	@ 0x60
 800e084:	af02      	add	r7, sp, #8
 800e086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e090:	f7f9 faee 	bl	8007670 <HAL_GetTick>
 800e094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 0308 	and.w	r3, r3, #8
 800e0a0:	2b08      	cmp	r3, #8
 800e0a2:	d12f      	bne.n	800e104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f88e 	bl	800e1d4 <UART_WaitOnFlagUntilTimeout>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d022      	beq.n	800e104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c6:	e853 3f00 	ldrex	r3, [r3]
 800e0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0e4:	e841 2300 	strex	r3, r2, [r1]
 800e0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e6      	bne.n	800e0be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2220      	movs	r2, #32
 800e0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e063      	b.n	800e1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 0304 	and.w	r3, r3, #4
 800e10e:	2b04      	cmp	r3, #4
 800e110:	d149      	bne.n	800e1a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e11a:	2200      	movs	r2, #0
 800e11c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f857 	bl	800e1d4 <UART_WaitOnFlagUntilTimeout>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d03c      	beq.n	800e1a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e134:	e853 3f00 	ldrex	r3, [r3]
 800e138:	623b      	str	r3, [r7, #32]
   return(result);
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e152:	e841 2300 	strex	r3, r2, [r1]
 800e156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1e6      	bne.n	800e12c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3308      	adds	r3, #8
 800e164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f023 0301 	bic.w	r3, r3, #1
 800e174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e17e:	61fa      	str	r2, [r7, #28]
 800e180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e182:	69b9      	ldr	r1, [r7, #24]
 800e184:	69fa      	ldr	r2, [r7, #28]
 800e186:	e841 2300 	strex	r3, r2, [r1]
 800e18a:	617b      	str	r3, [r7, #20]
   return(result);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1e5      	bne.n	800e15e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2220      	movs	r2, #32
 800e196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e012      	b.n	800e1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2220      	movs	r2, #32
 800e1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3758      	adds	r7, #88	@ 0x58
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	603b      	str	r3, [r7, #0]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1e4:	e04f      	b.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d04b      	beq.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1ee:	f7f9 fa3f 	bl	8007670 <HAL_GetTick>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	69ba      	ldr	r2, [r7, #24]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d302      	bcc.n	800e204 <UART_WaitOnFlagUntilTimeout+0x30>
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e04e      	b.n	800e2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	2b00      	cmp	r3, #0
 800e214:	d037      	beq.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2b80      	cmp	r3, #128	@ 0x80
 800e21a:	d034      	beq.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2b40      	cmp	r3, #64	@ 0x40
 800e220:	d031      	beq.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	69db      	ldr	r3, [r3, #28]
 800e228:	f003 0308 	and.w	r3, r3, #8
 800e22c:	2b08      	cmp	r3, #8
 800e22e:	d110      	bne.n	800e252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2208      	movs	r2, #8
 800e236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f920 	bl	800e47e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2208      	movs	r2, #8
 800e242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	e029      	b.n	800e2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e260:	d111      	bne.n	800e286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e26a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f000 f906 	bl	800e47e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2220      	movs	r2, #32
 800e276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e282:	2303      	movs	r3, #3
 800e284:	e00f      	b.n	800e2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	69da      	ldr	r2, [r3, #28]
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	4013      	ands	r3, r2
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	429a      	cmp	r2, r3
 800e294:	bf0c      	ite	eq
 800e296:	2301      	moveq	r3, #1
 800e298:	2300      	movne	r3, #0
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	461a      	mov	r2, r3
 800e29e:	79fb      	ldrb	r3, [r7, #7]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d0a0      	beq.n	800e1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b096      	sub	sp, #88	@ 0x58
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	88fa      	ldrh	r2, [r7, #6]
 800e2c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2222      	movs	r2, #34	@ 0x22
 800e2d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d02d      	beq.n	800e342 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2ec:	4a40      	ldr	r2, [pc, #256]	@ (800e3f0 <UART_Start_Receive_DMA+0x140>)
 800e2ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f6:	4a3f      	ldr	r2, [pc, #252]	@ (800e3f4 <UART_Start_Receive_DMA+0x144>)
 800e2f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e300:	4a3d      	ldr	r2, [pc, #244]	@ (800e3f8 <UART_Start_Receive_DMA+0x148>)
 800e302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e30a:	2200      	movs	r2, #0
 800e30c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3324      	adds	r3, #36	@ 0x24
 800e31a:	4619      	mov	r1, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e320:	461a      	mov	r2, r3
 800e322:	88fb      	ldrh	r3, [r7, #6]
 800e324:	f7fa ffe0 	bl	80092e8 <HAL_DMA_Start_IT>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d009      	beq.n	800e342 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2210      	movs	r2, #16
 800e332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2220      	movs	r2, #32
 800e33a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e051      	b.n	800e3e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d018      	beq.n	800e37c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e352:	e853 3f00 	ldrex	r3, [r3]
 800e356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e35e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e36a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e36e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e370:	e841 2300 	strex	r3, r2, [r1]
 800e374:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1e6      	bne.n	800e34a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3308      	adds	r3, #8
 800e382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e386:	e853 3f00 	ldrex	r3, [r3]
 800e38a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38e:	f043 0301 	orr.w	r3, r3, #1
 800e392:	653b      	str	r3, [r7, #80]	@ 0x50
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3308      	adds	r3, #8
 800e39a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e39c:	637a      	str	r2, [r7, #52]	@ 0x34
 800e39e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3a4:	e841 2300 	strex	r3, r2, [r1]
 800e3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1e5      	bne.n	800e37c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	e853 3f00 	ldrex	r3, [r3]
 800e3be:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3d0:	623a      	str	r2, [r7, #32]
 800e3d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d4:	69f9      	ldr	r1, [r7, #28]
 800e3d6:	6a3a      	ldr	r2, [r7, #32]
 800e3d8:	e841 2300 	strex	r3, r2, [r1]
 800e3dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1e5      	bne.n	800e3b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3758      	adds	r7, #88	@ 0x58
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0800e54b 	.word	0x0800e54b
 800e3f4:	0800e67f 	.word	0x0800e67f
 800e3f8:	0800e6c5 	.word	0x0800e6c5

0800e3fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b08f      	sub	sp, #60	@ 0x3c
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	e853 3f00 	ldrex	r3, [r3]
 800e410:	61fb      	str	r3, [r7, #28]
   return(result);
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e418:	637b      	str	r3, [r7, #52]	@ 0x34
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	461a      	mov	r2, r3
 800e420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e424:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e42a:	e841 2300 	strex	r3, r2, [r1]
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1e6      	bne.n	800e404 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3308      	adds	r3, #8
 800e43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	60bb      	str	r3, [r7, #8]
   return(result);
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e44c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3308      	adds	r3, #8
 800e454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e456:	61ba      	str	r2, [r7, #24]
 800e458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45a:	6979      	ldr	r1, [r7, #20]
 800e45c:	69ba      	ldr	r2, [r7, #24]
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	613b      	str	r3, [r7, #16]
   return(result);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e5      	bne.n	800e436 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2220      	movs	r2, #32
 800e46e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e472:	bf00      	nop
 800e474:	373c      	adds	r7, #60	@ 0x3c
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e47e:	b480      	push	{r7}
 800e480:	b095      	sub	sp, #84	@ 0x54
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48e:	e853 3f00 	ldrex	r3, [r3]
 800e492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e49a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e4aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4ac:	e841 2300 	strex	r3, r2, [r1]
 800e4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1e6      	bne.n	800e486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3308      	adds	r3, #8
 800e4be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	e853 3f00 	ldrex	r3, [r3]
 800e4c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e4ce:	f023 0301 	bic.w	r3, r3, #1
 800e4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e3      	bne.n	800e4b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d118      	bne.n	800e52a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	e853 3f00 	ldrex	r3, [r3]
 800e504:	60bb      	str	r3, [r7, #8]
   return(result);
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	f023 0310 	bic.w	r3, r3, #16
 800e50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e516:	61bb      	str	r3, [r7, #24]
 800e518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51a:	6979      	ldr	r1, [r7, #20]
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	e841 2300 	strex	r3, r2, [r1]
 800e522:	613b      	str	r3, [r7, #16]
   return(result);
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1e6      	bne.n	800e4f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2220      	movs	r2, #32
 800e52e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e53e:	bf00      	nop
 800e540:	3754      	adds	r7, #84	@ 0x54
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b09c      	sub	sp, #112	@ 0x70
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e556:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d171      	bne.n	800e64a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e568:	2200      	movs	r2, #0
 800e56a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e56e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e57e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e582:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	461a      	mov	r2, r3
 800e58a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e58c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e58e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e594:	e841 2300 	strex	r3, r2, [r1]
 800e598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e6      	bne.n	800e56e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5aa:	e853 3f00 	ldrex	r3, [r3]
 800e5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5b2:	f023 0301 	bic.w	r3, r3, #1
 800e5b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5c0:	647a      	str	r2, [r7, #68]	@ 0x44
 800e5c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5c8:	e841 2300 	strex	r3, r2, [r1]
 800e5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1e5      	bne.n	800e5a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	3308      	adds	r3, #8
 800e5da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5de:	e853 3f00 	ldrex	r3, [r3]
 800e5e2:	623b      	str	r3, [r7, #32]
   return(result);
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3308      	adds	r3, #8
 800e5f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5f4:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5fc:	e841 2300 	strex	r3, r2, [r1]
 800e600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1e5      	bne.n	800e5d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e60a:	2220      	movs	r2, #32
 800e60c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e614:	2b01      	cmp	r3, #1
 800e616:	d118      	bne.n	800e64a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	e853 3f00 	ldrex	r3, [r3]
 800e624:	60fb      	str	r3, [r7, #12]
   return(result);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f023 0310 	bic.w	r3, r3, #16
 800e62c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e62e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e636:	61fb      	str	r3, [r7, #28]
 800e638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63a:	69b9      	ldr	r1, [r7, #24]
 800e63c:	69fa      	ldr	r2, [r7, #28]
 800e63e:	e841 2300 	strex	r3, r2, [r1]
 800e642:	617b      	str	r3, [r7, #20]
   return(result);
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1e6      	bne.n	800e618 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e64c:	2200      	movs	r2, #0
 800e64e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e654:	2b01      	cmp	r3, #1
 800e656:	d109      	bne.n	800e66c <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e65a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e65e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e660:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e664:	4611      	mov	r1, r2
 800e666:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e668:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e66a:	e004      	b.n	800e676 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800e66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e66e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e672:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e674:	4798      	blx	r3
}
 800e676:	bf00      	nop
 800e678:	3770      	adds	r7, #112	@ 0x70
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2201      	movs	r2, #1
 800e690:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e696:	2b01      	cmp	r3, #1
 800e698:	d10b      	bne.n	800e6b2 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e6a6:	0852      	lsrs	r2, r2, #1
 800e6a8:	b292      	uxth	r2, r2
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6b0:	e004      	b.n	800e6bc <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	4798      	blx	r3
}
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6ec:	2b80      	cmp	r3, #128	@ 0x80
 800e6ee:	d109      	bne.n	800e704 <UART_DMAError+0x40>
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2b21      	cmp	r3, #33	@ 0x21
 800e6f4:	d106      	bne.n	800e704 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e6fe:	6978      	ldr	r0, [r7, #20]
 800e700:	f7ff fe7c 	bl	800e3fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e70e:	2b40      	cmp	r3, #64	@ 0x40
 800e710:	d109      	bne.n	800e726 <UART_DMAError+0x62>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2b22      	cmp	r3, #34	@ 0x22
 800e716:	d106      	bne.n	800e726 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e720:	6978      	ldr	r0, [r7, #20]
 800e722:	f7ff feac 	bl	800e47e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e72c:	f043 0210 	orr.w	r2, r3, #16
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e73c:	6978      	ldr	r0, [r7, #20]
 800e73e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e740:	bf00      	nop
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e768:	bf00      	nop
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	e853 3f00 	ldrex	r3, [r3]
 800e784:	60bb      	str	r3, [r7, #8]
   return(result);
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	61bb      	str	r3, [r7, #24]
 800e798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79a:	6979      	ldr	r1, [r7, #20]
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	e841 2300 	strex	r3, r2, [r1]
 800e7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1e6      	bne.n	800e778 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2220      	movs	r2, #32
 800e7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7c2:	bf00      	nop
 800e7c4:	3720      	adds	r7, #32
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7d2:	bf00      	nop
 800e7d4:	370c      	adds	r7, #12
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7e6:	bf00      	nop
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e7fa:	bf00      	nop
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e806:	b480      	push	{r7}
 800e808:	b085      	sub	sp, #20
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e814:	2b01      	cmp	r3, #1
 800e816:	d101      	bne.n	800e81c <HAL_UARTEx_DisableFifoMode+0x16>
 800e818:	2302      	movs	r3, #2
 800e81a:	e027      	b.n	800e86c <HAL_UARTEx_DisableFifoMode+0x66>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2224      	movs	r2, #36	@ 0x24
 800e828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f022 0201 	bic.w	r2, r2, #1
 800e842:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e84a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2220      	movs	r2, #32
 800e85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d101      	bne.n	800e890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e88c:	2302      	movs	r3, #2
 800e88e:	e02d      	b.n	800e8ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2224      	movs	r2, #36	@ 0x24
 800e89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0201 	bic.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f84f 	bl	800e970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e904:	2b01      	cmp	r3, #1
 800e906:	d101      	bne.n	800e90c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e908:	2302      	movs	r3, #2
 800e90a:	e02d      	b.n	800e968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2224      	movs	r2, #36	@ 0x24
 800e918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f022 0201 	bic.w	r2, r2, #1
 800e932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	430a      	orrs	r2, r1
 800e946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f811 	bl	800e970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2220      	movs	r2, #32
 800e95a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d108      	bne.n	800e992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e990:	e031      	b.n	800e9f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e992:	2308      	movs	r3, #8
 800e994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e996:	2308      	movs	r3, #8
 800e998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	0e5b      	lsrs	r3, r3, #25
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 0307 	and.w	r3, r3, #7
 800e9a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	0f5b      	lsrs	r3, r3, #29
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	f003 0307 	and.w	r3, r3, #7
 800e9b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
 800e9bc:	7b3a      	ldrb	r2, [r7, #12]
 800e9be:	4911      	ldr	r1, [pc, #68]	@ (800ea04 <UARTEx_SetNbDataToProcess+0x94>)
 800e9c0:	5c8a      	ldrb	r2, [r1, r2]
 800e9c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9c6:	7b3a      	ldrb	r2, [r7, #12]
 800e9c8:	490f      	ldr	r1, [pc, #60]	@ (800ea08 <UARTEx_SetNbDataToProcess+0x98>)
 800e9ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
 800e9da:	7b7a      	ldrb	r2, [r7, #13]
 800e9dc:	4909      	ldr	r1, [pc, #36]	@ (800ea04 <UARTEx_SetNbDataToProcess+0x94>)
 800e9de:	5c8a      	ldrb	r2, [r1, r2]
 800e9e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9e4:	7b7a      	ldrb	r2, [r7, #13]
 800e9e6:	4908      	ldr	r1, [pc, #32]	@ (800ea08 <UARTEx_SetNbDataToProcess+0x98>)
 800e9e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9f6:	bf00      	nop
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	08010cb0 	.word	0x08010cb0
 800ea08:	08010cb8 	.word	0x08010cb8

0800ea0c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b08b      	sub	sp, #44	@ 0x2c
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	885b      	ldrh	r3, [r3, #2]
 800ea34:	fb02 f303 	mul.w	r3, r2, r3
 800ea38:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ea3e:	e013      	b.n	800ea68 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea42:	1d1a      	adds	r2, r3, #4
 800ea44:	627a      	str	r2, [r7, #36]	@ 0x24
 800ea46:	ed93 7a00 	vldr	s14, [r3]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	1d1a      	adds	r2, r3, #4
 800ea4e:	623a      	str	r2, [r7, #32]
 800ea50:	edd3 7a00 	vldr	s15, [r3]
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	1d1a      	adds	r2, r3, #4
 800ea58:	61fa      	str	r2, [r7, #28]
 800ea5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea5e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e8      	bne.n	800ea40 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ea72:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	372c      	adds	r7, #44	@ 0x2c
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b085      	sub	sp, #20
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	607b      	str	r3, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	817b      	strh	r3, [r7, #10]
 800ea90:	4613      	mov	r3, r2
 800ea92:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	897a      	ldrh	r2, [r7, #10]
 800ea98:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	893a      	ldrh	r2, [r7, #8]
 800ea9e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	605a      	str	r2, [r3, #4]
}
 800eaa6:	bf00      	nop
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b093      	sub	sp, #76	@ 0x4c
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	60f8      	str	r0, [r7, #12]
 800eaba:	60b9      	str	r1, [r7, #8]
 800eabc:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	885b      	ldrh	r3, [r3, #2]
 800eae6:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	885b      	ldrh	r3, [r3, #2]
 800eaec:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800eaee:	2300      	movs	r3, #0
 800eaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eaf2:	8b7b      	ldrh	r3, [r7, #26]
 800eaf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800eaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	4413      	add	r3, r2
 800eafe:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800eb00:	8b3b      	ldrh	r3, [r7, #24]
 800eb02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800eb0a:	f04f 0300 	mov.w	r3, #0
 800eb0e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800eb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb12:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800eb14:	8afb      	ldrh	r3, [r7, #22]
 800eb16:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800eb18:	e017      	b.n	800eb4a <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800eb1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb1c:	1d1a      	adds	r2, r3, #4
 800eb1e:	647a      	str	r2, [r7, #68]	@ 0x44
 800eb20:	ed93 7a00 	vldr	s14, [r3]
 800eb24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb26:	edd3 7a00 	vldr	s15, [r3]
 800eb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb2e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800eb32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb36:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800eb3a:	8b3b      	ldrh	r3, [r7, #24]
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb40:	4413      	add	r3, r2
 800eb42:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb46:	3b01      	subs	r3, #1
 800eb48:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1e4      	bne.n	800eb1a <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800eb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb52:	1d1a      	adds	r2, r3, #4
 800eb54:	63ba      	str	r2, [r7, #56]	@ 0x38
 800eb56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb58:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800eb60:	8b3a      	ldrh	r2, [r7, #24]
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	1ad3      	subs	r3, r2, r3
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	6a3a      	ldr	r2, [r7, #32]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1ca      	bne.n	800eb0a <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800eb74:	8b3b      	ldrh	r3, [r7, #24]
 800eb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb78:	4413      	add	r3, r2
 800eb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800eb7c:	8afb      	ldrh	r3, [r7, #22]
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb82:	4413      	add	r3, r2
 800eb84:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800eb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1b1      	bne.n	800eaf6 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800eb92:	2300      	movs	r3, #0
 800eb94:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800eb96:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	374c      	adds	r7, #76	@ 0x4c
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b08b      	sub	sp, #44	@ 0x2c
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	60f8      	str	r0, [r7, #12]
 800ebae:	ed87 0a02 	vstr	s0, [r7, #8]
 800ebb2:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	885b      	ldrh	r3, [r3, #2]
 800ebca:	fb02 f303 	mul.w	r3, r2, r3
 800ebce:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ebd4:	e010      	b.n	800ebf8 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	1d1a      	adds	r2, r3, #4
 800ebda:	627a      	str	r2, [r7, #36]	@ 0x24
 800ebdc:	ed93 7a00 	vldr	s14, [r3]
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	1d1a      	adds	r2, r3, #4
 800ebe4:	623a      	str	r2, [r7, #32]
 800ebe6:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebee:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1eb      	bne.n	800ebd6 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800ec02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	372c      	adds	r7, #44	@ 0x2c
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
	...

0800ec14 <malloc>:
 800ec14:	4b02      	ldr	r3, [pc, #8]	@ (800ec20 <malloc+0xc>)
 800ec16:	4601      	mov	r1, r0
 800ec18:	6818      	ldr	r0, [r3, #0]
 800ec1a:	f000 b825 	b.w	800ec68 <_malloc_r>
 800ec1e:	bf00      	nop
 800ec20:	20000108 	.word	0x20000108

0800ec24 <sbrk_aligned>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	4e0f      	ldr	r6, [pc, #60]	@ (800ec64 <sbrk_aligned+0x40>)
 800ec28:	460c      	mov	r4, r1
 800ec2a:	6831      	ldr	r1, [r6, #0]
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	b911      	cbnz	r1, 800ec36 <sbrk_aligned+0x12>
 800ec30:	f000 f8ae 	bl	800ed90 <_sbrk_r>
 800ec34:	6030      	str	r0, [r6, #0]
 800ec36:	4621      	mov	r1, r4
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f000 f8a9 	bl	800ed90 <_sbrk_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	d103      	bne.n	800ec4a <sbrk_aligned+0x26>
 800ec42:	f04f 34ff 	mov.w	r4, #4294967295
 800ec46:	4620      	mov	r0, r4
 800ec48:	bd70      	pop	{r4, r5, r6, pc}
 800ec4a:	1cc4      	adds	r4, r0, #3
 800ec4c:	f024 0403 	bic.w	r4, r4, #3
 800ec50:	42a0      	cmp	r0, r4
 800ec52:	d0f8      	beq.n	800ec46 <sbrk_aligned+0x22>
 800ec54:	1a21      	subs	r1, r4, r0
 800ec56:	4628      	mov	r0, r5
 800ec58:	f000 f89a 	bl	800ed90 <_sbrk_r>
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	d1f2      	bne.n	800ec46 <sbrk_aligned+0x22>
 800ec60:	e7ef      	b.n	800ec42 <sbrk_aligned+0x1e>
 800ec62:	bf00      	nop
 800ec64:	20002104 	.word	0x20002104

0800ec68 <_malloc_r>:
 800ec68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec6c:	1ccd      	adds	r5, r1, #3
 800ec6e:	f025 0503 	bic.w	r5, r5, #3
 800ec72:	3508      	adds	r5, #8
 800ec74:	2d0c      	cmp	r5, #12
 800ec76:	bf38      	it	cc
 800ec78:	250c      	movcc	r5, #12
 800ec7a:	2d00      	cmp	r5, #0
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	db01      	blt.n	800ec84 <_malloc_r+0x1c>
 800ec80:	42a9      	cmp	r1, r5
 800ec82:	d904      	bls.n	800ec8e <_malloc_r+0x26>
 800ec84:	230c      	movs	r3, #12
 800ec86:	6033      	str	r3, [r6, #0]
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed64 <_malloc_r+0xfc>
 800ec92:	f000 f869 	bl	800ed68 <__malloc_lock>
 800ec96:	f8d8 3000 	ldr.w	r3, [r8]
 800ec9a:	461c      	mov	r4, r3
 800ec9c:	bb44      	cbnz	r4, 800ecf0 <_malloc_r+0x88>
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4630      	mov	r0, r6
 800eca2:	f7ff ffbf 	bl	800ec24 <sbrk_aligned>
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	4604      	mov	r4, r0
 800ecaa:	d158      	bne.n	800ed5e <_malloc_r+0xf6>
 800ecac:	f8d8 4000 	ldr.w	r4, [r8]
 800ecb0:	4627      	mov	r7, r4
 800ecb2:	2f00      	cmp	r7, #0
 800ecb4:	d143      	bne.n	800ed3e <_malloc_r+0xd6>
 800ecb6:	2c00      	cmp	r4, #0
 800ecb8:	d04b      	beq.n	800ed52 <_malloc_r+0xea>
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	eb04 0903 	add.w	r9, r4, r3
 800ecc4:	f000 f864 	bl	800ed90 <_sbrk_r>
 800ecc8:	4581      	cmp	r9, r0
 800ecca:	d142      	bne.n	800ed52 <_malloc_r+0xea>
 800eccc:	6821      	ldr	r1, [r4, #0]
 800ecce:	1a6d      	subs	r5, r5, r1
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7ff ffa6 	bl	800ec24 <sbrk_aligned>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d03a      	beq.n	800ed52 <_malloc_r+0xea>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	442b      	add	r3, r5
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	f8d8 3000 	ldr.w	r3, [r8]
 800ece6:	685a      	ldr	r2, [r3, #4]
 800ece8:	bb62      	cbnz	r2, 800ed44 <_malloc_r+0xdc>
 800ecea:	f8c8 7000 	str.w	r7, [r8]
 800ecee:	e00f      	b.n	800ed10 <_malloc_r+0xa8>
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	1b52      	subs	r2, r2, r5
 800ecf4:	d420      	bmi.n	800ed38 <_malloc_r+0xd0>
 800ecf6:	2a0b      	cmp	r2, #11
 800ecf8:	d917      	bls.n	800ed2a <_malloc_r+0xc2>
 800ecfa:	1961      	adds	r1, r4, r5
 800ecfc:	42a3      	cmp	r3, r4
 800ecfe:	6025      	str	r5, [r4, #0]
 800ed00:	bf18      	it	ne
 800ed02:	6059      	strne	r1, [r3, #4]
 800ed04:	6863      	ldr	r3, [r4, #4]
 800ed06:	bf08      	it	eq
 800ed08:	f8c8 1000 	streq.w	r1, [r8]
 800ed0c:	5162      	str	r2, [r4, r5]
 800ed0e:	604b      	str	r3, [r1, #4]
 800ed10:	4630      	mov	r0, r6
 800ed12:	f000 f82f 	bl	800ed74 <__malloc_unlock>
 800ed16:	f104 000b 	add.w	r0, r4, #11
 800ed1a:	1d23      	adds	r3, r4, #4
 800ed1c:	f020 0007 	bic.w	r0, r0, #7
 800ed20:	1ac2      	subs	r2, r0, r3
 800ed22:	bf1c      	itt	ne
 800ed24:	1a1b      	subne	r3, r3, r0
 800ed26:	50a3      	strne	r3, [r4, r2]
 800ed28:	e7af      	b.n	800ec8a <_malloc_r+0x22>
 800ed2a:	6862      	ldr	r2, [r4, #4]
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	bf0c      	ite	eq
 800ed30:	f8c8 2000 	streq.w	r2, [r8]
 800ed34:	605a      	strne	r2, [r3, #4]
 800ed36:	e7eb      	b.n	800ed10 <_malloc_r+0xa8>
 800ed38:	4623      	mov	r3, r4
 800ed3a:	6864      	ldr	r4, [r4, #4]
 800ed3c:	e7ae      	b.n	800ec9c <_malloc_r+0x34>
 800ed3e:	463c      	mov	r4, r7
 800ed40:	687f      	ldr	r7, [r7, #4]
 800ed42:	e7b6      	b.n	800ecb2 <_malloc_r+0x4a>
 800ed44:	461a      	mov	r2, r3
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	42a3      	cmp	r3, r4
 800ed4a:	d1fb      	bne.n	800ed44 <_malloc_r+0xdc>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	6053      	str	r3, [r2, #4]
 800ed50:	e7de      	b.n	800ed10 <_malloc_r+0xa8>
 800ed52:	230c      	movs	r3, #12
 800ed54:	6033      	str	r3, [r6, #0]
 800ed56:	4630      	mov	r0, r6
 800ed58:	f000 f80c 	bl	800ed74 <__malloc_unlock>
 800ed5c:	e794      	b.n	800ec88 <_malloc_r+0x20>
 800ed5e:	6005      	str	r5, [r0, #0]
 800ed60:	e7d6      	b.n	800ed10 <_malloc_r+0xa8>
 800ed62:	bf00      	nop
 800ed64:	20002108 	.word	0x20002108

0800ed68 <__malloc_lock>:
 800ed68:	4801      	ldr	r0, [pc, #4]	@ (800ed70 <__malloc_lock+0x8>)
 800ed6a:	f000 b84b 	b.w	800ee04 <__retarget_lock_acquire_recursive>
 800ed6e:	bf00      	nop
 800ed70:	20002248 	.word	0x20002248

0800ed74 <__malloc_unlock>:
 800ed74:	4801      	ldr	r0, [pc, #4]	@ (800ed7c <__malloc_unlock+0x8>)
 800ed76:	f000 b846 	b.w	800ee06 <__retarget_lock_release_recursive>
 800ed7a:	bf00      	nop
 800ed7c:	20002248 	.word	0x20002248

0800ed80 <memset>:
 800ed80:	4402      	add	r2, r0
 800ed82:	4603      	mov	r3, r0
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d100      	bne.n	800ed8a <memset+0xa>
 800ed88:	4770      	bx	lr
 800ed8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed8e:	e7f9      	b.n	800ed84 <memset+0x4>

0800ed90 <_sbrk_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d06      	ldr	r5, [pc, #24]	@ (800edac <_sbrk_r+0x1c>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4604      	mov	r4, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	602b      	str	r3, [r5, #0]
 800ed9c:	f7f7 fd3c 	bl	8006818 <_sbrk>
 800eda0:	1c43      	adds	r3, r0, #1
 800eda2:	d102      	bne.n	800edaa <_sbrk_r+0x1a>
 800eda4:	682b      	ldr	r3, [r5, #0]
 800eda6:	b103      	cbz	r3, 800edaa <_sbrk_r+0x1a>
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	20002244 	.word	0x20002244

0800edb0 <__errno>:
 800edb0:	4b01      	ldr	r3, [pc, #4]	@ (800edb8 <__errno+0x8>)
 800edb2:	6818      	ldr	r0, [r3, #0]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20000108 	.word	0x20000108

0800edbc <__libc_init_array>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	4d0d      	ldr	r5, [pc, #52]	@ (800edf4 <__libc_init_array+0x38>)
 800edc0:	4c0d      	ldr	r4, [pc, #52]	@ (800edf8 <__libc_init_array+0x3c>)
 800edc2:	1b64      	subs	r4, r4, r5
 800edc4:	10a4      	asrs	r4, r4, #2
 800edc6:	2600      	movs	r6, #0
 800edc8:	42a6      	cmp	r6, r4
 800edca:	d109      	bne.n	800ede0 <__libc_init_array+0x24>
 800edcc:	4d0b      	ldr	r5, [pc, #44]	@ (800edfc <__libc_init_array+0x40>)
 800edce:	4c0c      	ldr	r4, [pc, #48]	@ (800ee00 <__libc_init_array+0x44>)
 800edd0:	f001 ff32 	bl	8010c38 <_init>
 800edd4:	1b64      	subs	r4, r4, r5
 800edd6:	10a4      	asrs	r4, r4, #2
 800edd8:	2600      	movs	r6, #0
 800edda:	42a6      	cmp	r6, r4
 800eddc:	d105      	bne.n	800edea <__libc_init_array+0x2e>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede4:	4798      	blx	r3
 800ede6:	3601      	adds	r6, #1
 800ede8:	e7ee      	b.n	800edc8 <__libc_init_array+0xc>
 800edea:	f855 3b04 	ldr.w	r3, [r5], #4
 800edee:	4798      	blx	r3
 800edf0:	3601      	adds	r6, #1
 800edf2:	e7f2      	b.n	800edda <__libc_init_array+0x1e>
 800edf4:	08011278 	.word	0x08011278
 800edf8:	08011278 	.word	0x08011278
 800edfc:	08011278 	.word	0x08011278
 800ee00:	0801127c 	.word	0x0801127c

0800ee04 <__retarget_lock_acquire_recursive>:
 800ee04:	4770      	bx	lr

0800ee06 <__retarget_lock_release_recursive>:
 800ee06:	4770      	bx	lr

0800ee08 <memcpy>:
 800ee08:	440a      	add	r2, r1
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee10:	d100      	bne.n	800ee14 <memcpy+0xc>
 800ee12:	4770      	bx	lr
 800ee14:	b510      	push	{r4, lr}
 800ee16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee1e:	4291      	cmp	r1, r2
 800ee20:	d1f9      	bne.n	800ee16 <memcpy+0xe>
 800ee22:	bd10      	pop	{r4, pc}
 800ee24:	0000      	movs	r0, r0
	...

0800ee28 <cos>:
 800ee28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee2a:	ec53 2b10 	vmov	r2, r3, d0
 800ee2e:	4826      	ldr	r0, [pc, #152]	@ (800eec8 <cos+0xa0>)
 800ee30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ee34:	4281      	cmp	r1, r0
 800ee36:	d806      	bhi.n	800ee46 <cos+0x1e>
 800ee38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800eec0 <cos+0x98>
 800ee3c:	b005      	add	sp, #20
 800ee3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee42:	f000 b9bd 	b.w	800f1c0 <__kernel_cos>
 800ee46:	4821      	ldr	r0, [pc, #132]	@ (800eecc <cos+0xa4>)
 800ee48:	4281      	cmp	r1, r0
 800ee4a:	d908      	bls.n	800ee5e <cos+0x36>
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	4619      	mov	r1, r3
 800ee50:	f7f1 f9e6 	bl	8000220 <__aeabi_dsub>
 800ee54:	ec41 0b10 	vmov	d0, r0, r1
 800ee58:	b005      	add	sp, #20
 800ee5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee5e:	4668      	mov	r0, sp
 800ee60:	f000 fb32 	bl	800f4c8 <__ieee754_rem_pio2>
 800ee64:	f000 0003 	and.w	r0, r0, #3
 800ee68:	2801      	cmp	r0, #1
 800ee6a:	d00b      	beq.n	800ee84 <cos+0x5c>
 800ee6c:	2802      	cmp	r0, #2
 800ee6e:	d015      	beq.n	800ee9c <cos+0x74>
 800ee70:	b9d8      	cbnz	r0, 800eeaa <cos+0x82>
 800ee72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee76:	ed9d 0b00 	vldr	d0, [sp]
 800ee7a:	f000 f9a1 	bl	800f1c0 <__kernel_cos>
 800ee7e:	ec51 0b10 	vmov	r0, r1, d0
 800ee82:	e7e7      	b.n	800ee54 <cos+0x2c>
 800ee84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee88:	ed9d 0b00 	vldr	d0, [sp]
 800ee8c:	f000 fa60 	bl	800f350 <__kernel_sin>
 800ee90:	ec53 2b10 	vmov	r2, r3, d0
 800ee94:	4610      	mov	r0, r2
 800ee96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ee9a:	e7db      	b.n	800ee54 <cos+0x2c>
 800ee9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eea0:	ed9d 0b00 	vldr	d0, [sp]
 800eea4:	f000 f98c 	bl	800f1c0 <__kernel_cos>
 800eea8:	e7f2      	b.n	800ee90 <cos+0x68>
 800eeaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eeae:	ed9d 0b00 	vldr	d0, [sp]
 800eeb2:	2001      	movs	r0, #1
 800eeb4:	f000 fa4c 	bl	800f350 <__kernel_sin>
 800eeb8:	e7e1      	b.n	800ee7e <cos+0x56>
 800eeba:	bf00      	nop
 800eebc:	f3af 8000 	nop.w
	...
 800eec8:	3fe921fb 	.word	0x3fe921fb
 800eecc:	7fefffff 	.word	0x7fefffff

0800eed0 <sin>:
 800eed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eed2:	ec53 2b10 	vmov	r2, r3, d0
 800eed6:	4826      	ldr	r0, [pc, #152]	@ (800ef70 <sin+0xa0>)
 800eed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eedc:	4281      	cmp	r1, r0
 800eede:	d807      	bhi.n	800eef0 <sin+0x20>
 800eee0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ef68 <sin+0x98>
 800eee4:	2000      	movs	r0, #0
 800eee6:	b005      	add	sp, #20
 800eee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eeec:	f000 ba30 	b.w	800f350 <__kernel_sin>
 800eef0:	4820      	ldr	r0, [pc, #128]	@ (800ef74 <sin+0xa4>)
 800eef2:	4281      	cmp	r1, r0
 800eef4:	d908      	bls.n	800ef08 <sin+0x38>
 800eef6:	4610      	mov	r0, r2
 800eef8:	4619      	mov	r1, r3
 800eefa:	f7f1 f991 	bl	8000220 <__aeabi_dsub>
 800eefe:	ec41 0b10 	vmov	d0, r0, r1
 800ef02:	b005      	add	sp, #20
 800ef04:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef08:	4668      	mov	r0, sp
 800ef0a:	f000 fadd 	bl	800f4c8 <__ieee754_rem_pio2>
 800ef0e:	f000 0003 	and.w	r0, r0, #3
 800ef12:	2801      	cmp	r0, #1
 800ef14:	d00c      	beq.n	800ef30 <sin+0x60>
 800ef16:	2802      	cmp	r0, #2
 800ef18:	d011      	beq.n	800ef3e <sin+0x6e>
 800ef1a:	b9e8      	cbnz	r0, 800ef58 <sin+0x88>
 800ef1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef20:	ed9d 0b00 	vldr	d0, [sp]
 800ef24:	2001      	movs	r0, #1
 800ef26:	f000 fa13 	bl	800f350 <__kernel_sin>
 800ef2a:	ec51 0b10 	vmov	r0, r1, d0
 800ef2e:	e7e6      	b.n	800eefe <sin+0x2e>
 800ef30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef34:	ed9d 0b00 	vldr	d0, [sp]
 800ef38:	f000 f942 	bl	800f1c0 <__kernel_cos>
 800ef3c:	e7f5      	b.n	800ef2a <sin+0x5a>
 800ef3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef42:	ed9d 0b00 	vldr	d0, [sp]
 800ef46:	2001      	movs	r0, #1
 800ef48:	f000 fa02 	bl	800f350 <__kernel_sin>
 800ef4c:	ec53 2b10 	vmov	r2, r3, d0
 800ef50:	4610      	mov	r0, r2
 800ef52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ef56:	e7d2      	b.n	800eefe <sin+0x2e>
 800ef58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef5c:	ed9d 0b00 	vldr	d0, [sp]
 800ef60:	f000 f92e 	bl	800f1c0 <__kernel_cos>
 800ef64:	e7f2      	b.n	800ef4c <sin+0x7c>
 800ef66:	bf00      	nop
	...
 800ef70:	3fe921fb 	.word	0x3fe921fb
 800ef74:	7fefffff 	.word	0x7fefffff

0800ef78 <fmodf>:
 800ef78:	b508      	push	{r3, lr}
 800ef7a:	ed2d 8b02 	vpush	{d8}
 800ef7e:	eef0 8a40 	vmov.f32	s17, s0
 800ef82:	eeb0 8a60 	vmov.f32	s16, s1
 800ef86:	f000 fd43 	bl	800fa10 <__ieee754_fmodf>
 800ef8a:	eef4 8a48 	vcmp.f32	s17, s16
 800ef8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef92:	d60c      	bvs.n	800efae <fmodf+0x36>
 800ef94:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800efb4 <fmodf+0x3c>
 800ef98:	eeb4 8a68 	vcmp.f32	s16, s17
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	d105      	bne.n	800efae <fmodf+0x36>
 800efa2:	f7ff ff05 	bl	800edb0 <__errno>
 800efa6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800efaa:	2321      	movs	r3, #33	@ 0x21
 800efac:	6003      	str	r3, [r0, #0]
 800efae:	ecbd 8b02 	vpop	{d8}
 800efb2:	bd08      	pop	{r3, pc}
 800efb4:	00000000 	.word	0x00000000

0800efb8 <sqrtf>:
 800efb8:	b508      	push	{r3, lr}
 800efba:	ed2d 8b02 	vpush	{d8}
 800efbe:	eeb0 8a40 	vmov.f32	s16, s0
 800efc2:	f000 f8f7 	bl	800f1b4 <__ieee754_sqrtf>
 800efc6:	eeb4 8a48 	vcmp.f32	s16, s16
 800efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efce:	d60c      	bvs.n	800efea <sqrtf+0x32>
 800efd0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800eff0 <sqrtf+0x38>
 800efd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800efd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efdc:	d505      	bpl.n	800efea <sqrtf+0x32>
 800efde:	f7ff fee7 	bl	800edb0 <__errno>
 800efe2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800efe6:	2321      	movs	r3, #33	@ 0x21
 800efe8:	6003      	str	r3, [r0, #0]
 800efea:	ecbd 8b02 	vpop	{d8}
 800efee:	bd08      	pop	{r3, pc}
 800eff0:	00000000 	.word	0x00000000

0800eff4 <cosf>:
 800eff4:	ee10 3a10 	vmov	r3, s0
 800eff8:	b507      	push	{r0, r1, r2, lr}
 800effa:	4a1e      	ldr	r2, [pc, #120]	@ (800f074 <cosf+0x80>)
 800effc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f000:	4293      	cmp	r3, r2
 800f002:	d806      	bhi.n	800f012 <cosf+0x1e>
 800f004:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f078 <cosf+0x84>
 800f008:	b003      	add	sp, #12
 800f00a:	f85d eb04 	ldr.w	lr, [sp], #4
 800f00e:	f000 bc5f 	b.w	800f8d0 <__kernel_cosf>
 800f012:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f016:	d304      	bcc.n	800f022 <cosf+0x2e>
 800f018:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f01c:	b003      	add	sp, #12
 800f01e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f022:	4668      	mov	r0, sp
 800f024:	f000 fd76 	bl	800fb14 <__ieee754_rem_pio2f>
 800f028:	f000 0003 	and.w	r0, r0, #3
 800f02c:	2801      	cmp	r0, #1
 800f02e:	d009      	beq.n	800f044 <cosf+0x50>
 800f030:	2802      	cmp	r0, #2
 800f032:	d010      	beq.n	800f056 <cosf+0x62>
 800f034:	b9b0      	cbnz	r0, 800f064 <cosf+0x70>
 800f036:	eddd 0a01 	vldr	s1, [sp, #4]
 800f03a:	ed9d 0a00 	vldr	s0, [sp]
 800f03e:	f000 fc47 	bl	800f8d0 <__kernel_cosf>
 800f042:	e7eb      	b.n	800f01c <cosf+0x28>
 800f044:	eddd 0a01 	vldr	s1, [sp, #4]
 800f048:	ed9d 0a00 	vldr	s0, [sp]
 800f04c:	f000 fc98 	bl	800f980 <__kernel_sinf>
 800f050:	eeb1 0a40 	vneg.f32	s0, s0
 800f054:	e7e2      	b.n	800f01c <cosf+0x28>
 800f056:	eddd 0a01 	vldr	s1, [sp, #4]
 800f05a:	ed9d 0a00 	vldr	s0, [sp]
 800f05e:	f000 fc37 	bl	800f8d0 <__kernel_cosf>
 800f062:	e7f5      	b.n	800f050 <cosf+0x5c>
 800f064:	eddd 0a01 	vldr	s1, [sp, #4]
 800f068:	ed9d 0a00 	vldr	s0, [sp]
 800f06c:	2001      	movs	r0, #1
 800f06e:	f000 fc87 	bl	800f980 <__kernel_sinf>
 800f072:	e7d3      	b.n	800f01c <cosf+0x28>
 800f074:	3f490fd8 	.word	0x3f490fd8
 800f078:	00000000 	.word	0x00000000

0800f07c <sinf>:
 800f07c:	ee10 3a10 	vmov	r3, s0
 800f080:	b507      	push	{r0, r1, r2, lr}
 800f082:	4a1f      	ldr	r2, [pc, #124]	@ (800f100 <sinf+0x84>)
 800f084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f088:	4293      	cmp	r3, r2
 800f08a:	d807      	bhi.n	800f09c <sinf+0x20>
 800f08c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f104 <sinf+0x88>
 800f090:	2000      	movs	r0, #0
 800f092:	b003      	add	sp, #12
 800f094:	f85d eb04 	ldr.w	lr, [sp], #4
 800f098:	f000 bc72 	b.w	800f980 <__kernel_sinf>
 800f09c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f0a0:	d304      	bcc.n	800f0ac <sinf+0x30>
 800f0a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f0a6:	b003      	add	sp, #12
 800f0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0ac:	4668      	mov	r0, sp
 800f0ae:	f000 fd31 	bl	800fb14 <__ieee754_rem_pio2f>
 800f0b2:	f000 0003 	and.w	r0, r0, #3
 800f0b6:	2801      	cmp	r0, #1
 800f0b8:	d00a      	beq.n	800f0d0 <sinf+0x54>
 800f0ba:	2802      	cmp	r0, #2
 800f0bc:	d00f      	beq.n	800f0de <sinf+0x62>
 800f0be:	b9c0      	cbnz	r0, 800f0f2 <sinf+0x76>
 800f0c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0c4:	ed9d 0a00 	vldr	s0, [sp]
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f000 fc59 	bl	800f980 <__kernel_sinf>
 800f0ce:	e7ea      	b.n	800f0a6 <sinf+0x2a>
 800f0d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0d4:	ed9d 0a00 	vldr	s0, [sp]
 800f0d8:	f000 fbfa 	bl	800f8d0 <__kernel_cosf>
 800f0dc:	e7e3      	b.n	800f0a6 <sinf+0x2a>
 800f0de:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0e2:	ed9d 0a00 	vldr	s0, [sp]
 800f0e6:	2001      	movs	r0, #1
 800f0e8:	f000 fc4a 	bl	800f980 <__kernel_sinf>
 800f0ec:	eeb1 0a40 	vneg.f32	s0, s0
 800f0f0:	e7d9      	b.n	800f0a6 <sinf+0x2a>
 800f0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0f6:	ed9d 0a00 	vldr	s0, [sp]
 800f0fa:	f000 fbe9 	bl	800f8d0 <__kernel_cosf>
 800f0fe:	e7f5      	b.n	800f0ec <sinf+0x70>
 800f100:	3f490fd8 	.word	0x3f490fd8
 800f104:	00000000 	.word	0x00000000

0800f108 <fmaxf>:
 800f108:	b508      	push	{r3, lr}
 800f10a:	ed2d 8b02 	vpush	{d8}
 800f10e:	eeb0 8a40 	vmov.f32	s16, s0
 800f112:	eef0 8a60 	vmov.f32	s17, s1
 800f116:	f000 f831 	bl	800f17c <__fpclassifyf>
 800f11a:	b930      	cbnz	r0, 800f12a <fmaxf+0x22>
 800f11c:	eeb0 8a68 	vmov.f32	s16, s17
 800f120:	eeb0 0a48 	vmov.f32	s0, s16
 800f124:	ecbd 8b02 	vpop	{d8}
 800f128:	bd08      	pop	{r3, pc}
 800f12a:	eeb0 0a68 	vmov.f32	s0, s17
 800f12e:	f000 f825 	bl	800f17c <__fpclassifyf>
 800f132:	2800      	cmp	r0, #0
 800f134:	d0f4      	beq.n	800f120 <fmaxf+0x18>
 800f136:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13e:	dded      	ble.n	800f11c <fmaxf+0x14>
 800f140:	e7ee      	b.n	800f120 <fmaxf+0x18>

0800f142 <fminf>:
 800f142:	b508      	push	{r3, lr}
 800f144:	ed2d 8b02 	vpush	{d8}
 800f148:	eeb0 8a40 	vmov.f32	s16, s0
 800f14c:	eef0 8a60 	vmov.f32	s17, s1
 800f150:	f000 f814 	bl	800f17c <__fpclassifyf>
 800f154:	b930      	cbnz	r0, 800f164 <fminf+0x22>
 800f156:	eeb0 8a68 	vmov.f32	s16, s17
 800f15a:	eeb0 0a48 	vmov.f32	s0, s16
 800f15e:	ecbd 8b02 	vpop	{d8}
 800f162:	bd08      	pop	{r3, pc}
 800f164:	eeb0 0a68 	vmov.f32	s0, s17
 800f168:	f000 f808 	bl	800f17c <__fpclassifyf>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d0f4      	beq.n	800f15a <fminf+0x18>
 800f170:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f178:	d5ed      	bpl.n	800f156 <fminf+0x14>
 800f17a:	e7ee      	b.n	800f15a <fminf+0x18>

0800f17c <__fpclassifyf>:
 800f17c:	ee10 3a10 	vmov	r3, s0
 800f180:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f184:	d00d      	beq.n	800f1a2 <__fpclassifyf+0x26>
 800f186:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f18a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f18e:	d30a      	bcc.n	800f1a6 <__fpclassifyf+0x2a>
 800f190:	4b07      	ldr	r3, [pc, #28]	@ (800f1b0 <__fpclassifyf+0x34>)
 800f192:	1e42      	subs	r2, r0, #1
 800f194:	429a      	cmp	r2, r3
 800f196:	d908      	bls.n	800f1aa <__fpclassifyf+0x2e>
 800f198:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f19c:	4258      	negs	r0, r3
 800f19e:	4158      	adcs	r0, r3
 800f1a0:	4770      	bx	lr
 800f1a2:	2002      	movs	r0, #2
 800f1a4:	4770      	bx	lr
 800f1a6:	2004      	movs	r0, #4
 800f1a8:	4770      	bx	lr
 800f1aa:	2003      	movs	r0, #3
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	007ffffe 	.word	0x007ffffe

0800f1b4 <__ieee754_sqrtf>:
 800f1b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f1b8:	4770      	bx	lr
 800f1ba:	0000      	movs	r0, r0
 800f1bc:	0000      	movs	r0, r0
	...

0800f1c0 <__kernel_cos>:
 800f1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c4:	ec57 6b10 	vmov	r6, r7, d0
 800f1c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f1cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f1d0:	ed8d 1b00 	vstr	d1, [sp]
 800f1d4:	d206      	bcs.n	800f1e4 <__kernel_cos+0x24>
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	4639      	mov	r1, r7
 800f1da:	f7f1 fc73 	bl	8000ac4 <__aeabi_d2iz>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f000 8088 	beq.w	800f2f4 <__kernel_cos+0x134>
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	463b      	mov	r3, r7
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	f7f1 f9d0 	bl	8000590 <__aeabi_dmul>
 800f1f0:	4b51      	ldr	r3, [pc, #324]	@ (800f338 <__kernel_cos+0x178>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	460d      	mov	r5, r1
 800f1f8:	f7f1 f9ca 	bl	8000590 <__aeabi_dmul>
 800f1fc:	a340      	add	r3, pc, #256	@ (adr r3, 800f300 <__kernel_cos+0x140>)
 800f1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f202:	4682      	mov	sl, r0
 800f204:	468b      	mov	fp, r1
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	f7f1 f9c1 	bl	8000590 <__aeabi_dmul>
 800f20e:	a33e      	add	r3, pc, #248	@ (adr r3, 800f308 <__kernel_cos+0x148>)
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	f7f1 f806 	bl	8000224 <__adddf3>
 800f218:	4622      	mov	r2, r4
 800f21a:	462b      	mov	r3, r5
 800f21c:	f7f1 f9b8 	bl	8000590 <__aeabi_dmul>
 800f220:	a33b      	add	r3, pc, #236	@ (adr r3, 800f310 <__kernel_cos+0x150>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f0 fffb 	bl	8000220 <__aeabi_dsub>
 800f22a:	4622      	mov	r2, r4
 800f22c:	462b      	mov	r3, r5
 800f22e:	f7f1 f9af 	bl	8000590 <__aeabi_dmul>
 800f232:	a339      	add	r3, pc, #228	@ (adr r3, 800f318 <__kernel_cos+0x158>)
 800f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f238:	f7f0 fff4 	bl	8000224 <__adddf3>
 800f23c:	4622      	mov	r2, r4
 800f23e:	462b      	mov	r3, r5
 800f240:	f7f1 f9a6 	bl	8000590 <__aeabi_dmul>
 800f244:	a336      	add	r3, pc, #216	@ (adr r3, 800f320 <__kernel_cos+0x160>)
 800f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24a:	f7f0 ffe9 	bl	8000220 <__aeabi_dsub>
 800f24e:	4622      	mov	r2, r4
 800f250:	462b      	mov	r3, r5
 800f252:	f7f1 f99d 	bl	8000590 <__aeabi_dmul>
 800f256:	a334      	add	r3, pc, #208	@ (adr r3, 800f328 <__kernel_cos+0x168>)
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	f7f0 ffe2 	bl	8000224 <__adddf3>
 800f260:	4622      	mov	r2, r4
 800f262:	462b      	mov	r3, r5
 800f264:	f7f1 f994 	bl	8000590 <__aeabi_dmul>
 800f268:	4622      	mov	r2, r4
 800f26a:	462b      	mov	r3, r5
 800f26c:	f7f1 f990 	bl	8000590 <__aeabi_dmul>
 800f270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	4630      	mov	r0, r6
 800f27a:	4639      	mov	r1, r7
 800f27c:	f7f1 f988 	bl	8000590 <__aeabi_dmul>
 800f280:	460b      	mov	r3, r1
 800f282:	4602      	mov	r2, r0
 800f284:	4629      	mov	r1, r5
 800f286:	4620      	mov	r0, r4
 800f288:	f7f0 ffca 	bl	8000220 <__aeabi_dsub>
 800f28c:	4b2b      	ldr	r3, [pc, #172]	@ (800f33c <__kernel_cos+0x17c>)
 800f28e:	4598      	cmp	r8, r3
 800f290:	4606      	mov	r6, r0
 800f292:	460f      	mov	r7, r1
 800f294:	d810      	bhi.n	800f2b8 <__kernel_cos+0xf8>
 800f296:	4602      	mov	r2, r0
 800f298:	460b      	mov	r3, r1
 800f29a:	4650      	mov	r0, sl
 800f29c:	4659      	mov	r1, fp
 800f29e:	f7f0 ffbf 	bl	8000220 <__aeabi_dsub>
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4926      	ldr	r1, [pc, #152]	@ (800f340 <__kernel_cos+0x180>)
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f7f0 ffb9 	bl	8000220 <__aeabi_dsub>
 800f2ae:	ec41 0b10 	vmov	d0, r0, r1
 800f2b2:	b003      	add	sp, #12
 800f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	4b22      	ldr	r3, [pc, #136]	@ (800f344 <__kernel_cos+0x184>)
 800f2ba:	4921      	ldr	r1, [pc, #132]	@ (800f340 <__kernel_cos+0x180>)
 800f2bc:	4598      	cmp	r8, r3
 800f2be:	bf8c      	ite	hi
 800f2c0:	4d21      	ldrhi	r5, [pc, #132]	@ (800f348 <__kernel_cos+0x188>)
 800f2c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f2c6:	2400      	movs	r4, #0
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	462b      	mov	r3, r5
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	f7f0 ffa7 	bl	8000220 <__aeabi_dsub>
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	4680      	mov	r8, r0
 800f2d6:	4689      	mov	r9, r1
 800f2d8:	462b      	mov	r3, r5
 800f2da:	4650      	mov	r0, sl
 800f2dc:	4659      	mov	r1, fp
 800f2de:	f7f0 ff9f 	bl	8000220 <__aeabi_dsub>
 800f2e2:	4632      	mov	r2, r6
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	f7f0 ff9b 	bl	8000220 <__aeabi_dsub>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	e7da      	b.n	800f2aa <__kernel_cos+0xea>
 800f2f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f330 <__kernel_cos+0x170>
 800f2f8:	e7db      	b.n	800f2b2 <__kernel_cos+0xf2>
 800f2fa:	bf00      	nop
 800f2fc:	f3af 8000 	nop.w
 800f300:	be8838d4 	.word	0xbe8838d4
 800f304:	bda8fae9 	.word	0xbda8fae9
 800f308:	bdb4b1c4 	.word	0xbdb4b1c4
 800f30c:	3e21ee9e 	.word	0x3e21ee9e
 800f310:	809c52ad 	.word	0x809c52ad
 800f314:	3e927e4f 	.word	0x3e927e4f
 800f318:	19cb1590 	.word	0x19cb1590
 800f31c:	3efa01a0 	.word	0x3efa01a0
 800f320:	16c15177 	.word	0x16c15177
 800f324:	3f56c16c 	.word	0x3f56c16c
 800f328:	5555554c 	.word	0x5555554c
 800f32c:	3fa55555 	.word	0x3fa55555
 800f330:	00000000 	.word	0x00000000
 800f334:	3ff00000 	.word	0x3ff00000
 800f338:	3fe00000 	.word	0x3fe00000
 800f33c:	3fd33332 	.word	0x3fd33332
 800f340:	3ff00000 	.word	0x3ff00000
 800f344:	3fe90000 	.word	0x3fe90000
 800f348:	3fd20000 	.word	0x3fd20000
 800f34c:	00000000 	.word	0x00000000

0800f350 <__kernel_sin>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	ec55 4b10 	vmov	r4, r5, d0
 800f358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f35c:	b085      	sub	sp, #20
 800f35e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f362:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f366:	4680      	mov	r8, r0
 800f368:	d205      	bcs.n	800f376 <__kernel_sin+0x26>
 800f36a:	4620      	mov	r0, r4
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f1 fba9 	bl	8000ac4 <__aeabi_d2iz>
 800f372:	2800      	cmp	r0, #0
 800f374:	d052      	beq.n	800f41c <__kernel_sin+0xcc>
 800f376:	4622      	mov	r2, r4
 800f378:	462b      	mov	r3, r5
 800f37a:	4620      	mov	r0, r4
 800f37c:	4629      	mov	r1, r5
 800f37e:	f7f1 f907 	bl	8000590 <__aeabi_dmul>
 800f382:	4682      	mov	sl, r0
 800f384:	468b      	mov	fp, r1
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4620      	mov	r0, r4
 800f38c:	4629      	mov	r1, r5
 800f38e:	f7f1 f8ff 	bl	8000590 <__aeabi_dmul>
 800f392:	a342      	add	r3, pc, #264	@ (adr r3, 800f49c <__kernel_sin+0x14c>)
 800f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f398:	e9cd 0100 	strd	r0, r1, [sp]
 800f39c:	4650      	mov	r0, sl
 800f39e:	4659      	mov	r1, fp
 800f3a0:	f7f1 f8f6 	bl	8000590 <__aeabi_dmul>
 800f3a4:	a33f      	add	r3, pc, #252	@ (adr r3, 800f4a4 <__kernel_sin+0x154>)
 800f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3aa:	f7f0 ff39 	bl	8000220 <__aeabi_dsub>
 800f3ae:	4652      	mov	r2, sl
 800f3b0:	465b      	mov	r3, fp
 800f3b2:	f7f1 f8ed 	bl	8000590 <__aeabi_dmul>
 800f3b6:	a33d      	add	r3, pc, #244	@ (adr r3, 800f4ac <__kernel_sin+0x15c>)
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	f7f0 ff32 	bl	8000224 <__adddf3>
 800f3c0:	4652      	mov	r2, sl
 800f3c2:	465b      	mov	r3, fp
 800f3c4:	f7f1 f8e4 	bl	8000590 <__aeabi_dmul>
 800f3c8:	a33a      	add	r3, pc, #232	@ (adr r3, 800f4b4 <__kernel_sin+0x164>)
 800f3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ce:	f7f0 ff27 	bl	8000220 <__aeabi_dsub>
 800f3d2:	4652      	mov	r2, sl
 800f3d4:	465b      	mov	r3, fp
 800f3d6:	f7f1 f8db 	bl	8000590 <__aeabi_dmul>
 800f3da:	a338      	add	r3, pc, #224	@ (adr r3, 800f4bc <__kernel_sin+0x16c>)
 800f3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e0:	f7f0 ff20 	bl	8000224 <__adddf3>
 800f3e4:	4606      	mov	r6, r0
 800f3e6:	460f      	mov	r7, r1
 800f3e8:	f1b8 0f00 	cmp.w	r8, #0
 800f3ec:	d11b      	bne.n	800f426 <__kernel_sin+0xd6>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	4650      	mov	r0, sl
 800f3f4:	4659      	mov	r1, fp
 800f3f6:	f7f1 f8cb 	bl	8000590 <__aeabi_dmul>
 800f3fa:	a325      	add	r3, pc, #148	@ (adr r3, 800f490 <__kernel_sin+0x140>)
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	f7f0 ff0e 	bl	8000220 <__aeabi_dsub>
 800f404:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f408:	f7f1 f8c2 	bl	8000590 <__aeabi_dmul>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	4620      	mov	r0, r4
 800f412:	4629      	mov	r1, r5
 800f414:	f7f0 ff06 	bl	8000224 <__adddf3>
 800f418:	4604      	mov	r4, r0
 800f41a:	460d      	mov	r5, r1
 800f41c:	ec45 4b10 	vmov	d0, r4, r5
 800f420:	b005      	add	sp, #20
 800f422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42a:	4b1b      	ldr	r3, [pc, #108]	@ (800f498 <__kernel_sin+0x148>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	f7f1 f8af 	bl	8000590 <__aeabi_dmul>
 800f432:	4632      	mov	r2, r6
 800f434:	4680      	mov	r8, r0
 800f436:	4689      	mov	r9, r1
 800f438:	463b      	mov	r3, r7
 800f43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f43e:	f7f1 f8a7 	bl	8000590 <__aeabi_dmul>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4640      	mov	r0, r8
 800f448:	4649      	mov	r1, r9
 800f44a:	f7f0 fee9 	bl	8000220 <__aeabi_dsub>
 800f44e:	4652      	mov	r2, sl
 800f450:	465b      	mov	r3, fp
 800f452:	f7f1 f89d 	bl	8000590 <__aeabi_dmul>
 800f456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f45a:	f7f0 fee1 	bl	8000220 <__aeabi_dsub>
 800f45e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f490 <__kernel_sin+0x140>)
 800f460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f464:	4606      	mov	r6, r0
 800f466:	460f      	mov	r7, r1
 800f468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f46c:	f7f1 f890 	bl	8000590 <__aeabi_dmul>
 800f470:	4602      	mov	r2, r0
 800f472:	460b      	mov	r3, r1
 800f474:	4630      	mov	r0, r6
 800f476:	4639      	mov	r1, r7
 800f478:	f7f0 fed4 	bl	8000224 <__adddf3>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4620      	mov	r0, r4
 800f482:	4629      	mov	r1, r5
 800f484:	f7f0 fecc 	bl	8000220 <__aeabi_dsub>
 800f488:	e7c6      	b.n	800f418 <__kernel_sin+0xc8>
 800f48a:	bf00      	nop
 800f48c:	f3af 8000 	nop.w
 800f490:	55555549 	.word	0x55555549
 800f494:	3fc55555 	.word	0x3fc55555
 800f498:	3fe00000 	.word	0x3fe00000
 800f49c:	5acfd57c 	.word	0x5acfd57c
 800f4a0:	3de5d93a 	.word	0x3de5d93a
 800f4a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f4a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f4ac:	57b1fe7d 	.word	0x57b1fe7d
 800f4b0:	3ec71de3 	.word	0x3ec71de3
 800f4b4:	19c161d5 	.word	0x19c161d5
 800f4b8:	3f2a01a0 	.word	0x3f2a01a0
 800f4bc:	1110f8a6 	.word	0x1110f8a6
 800f4c0:	3f811111 	.word	0x3f811111
 800f4c4:	00000000 	.word	0x00000000

0800f4c8 <__ieee754_rem_pio2>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	ec57 6b10 	vmov	r6, r7, d0
 800f4d0:	4bc5      	ldr	r3, [pc, #788]	@ (800f7e8 <__ieee754_rem_pio2+0x320>)
 800f4d2:	b08d      	sub	sp, #52	@ 0x34
 800f4d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f4d8:	4598      	cmp	r8, r3
 800f4da:	4604      	mov	r4, r0
 800f4dc:	9704      	str	r7, [sp, #16]
 800f4de:	d807      	bhi.n	800f4f0 <__ieee754_rem_pio2+0x28>
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	ed80 0b00 	vstr	d0, [r0]
 800f4e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f4ec:	2500      	movs	r5, #0
 800f4ee:	e028      	b.n	800f542 <__ieee754_rem_pio2+0x7a>
 800f4f0:	4bbe      	ldr	r3, [pc, #760]	@ (800f7ec <__ieee754_rem_pio2+0x324>)
 800f4f2:	4598      	cmp	r8, r3
 800f4f4:	d878      	bhi.n	800f5e8 <__ieee754_rem_pio2+0x120>
 800f4f6:	9b04      	ldr	r3, [sp, #16]
 800f4f8:	4dbd      	ldr	r5, [pc, #756]	@ (800f7f0 <__ieee754_rem_pio2+0x328>)
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f7b0 <__ieee754_rem_pio2+0x2e8>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	4639      	mov	r1, r7
 800f506:	dd38      	ble.n	800f57a <__ieee754_rem_pio2+0xb2>
 800f508:	f7f0 fe8a 	bl	8000220 <__aeabi_dsub>
 800f50c:	45a8      	cmp	r8, r5
 800f50e:	4606      	mov	r6, r0
 800f510:	460f      	mov	r7, r1
 800f512:	d01a      	beq.n	800f54a <__ieee754_rem_pio2+0x82>
 800f514:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f0>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 fe81 	bl	8000220 <__aeabi_dsub>
 800f51e:	4602      	mov	r2, r0
 800f520:	460b      	mov	r3, r1
 800f522:	4680      	mov	r8, r0
 800f524:	4689      	mov	r9, r1
 800f526:	4630      	mov	r0, r6
 800f528:	4639      	mov	r1, r7
 800f52a:	f7f0 fe79 	bl	8000220 <__aeabi_dsub>
 800f52e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f0>)
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	f7f0 fe74 	bl	8000220 <__aeabi_dsub>
 800f538:	e9c4 8900 	strd	r8, r9, [r4]
 800f53c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f540:	2501      	movs	r5, #1
 800f542:	4628      	mov	r0, r5
 800f544:	b00d      	add	sp, #52	@ 0x34
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54a:	a39d      	add	r3, pc, #628	@ (adr r3, 800f7c0 <__ieee754_rem_pio2+0x2f8>)
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	f7f0 fe66 	bl	8000220 <__aeabi_dsub>
 800f554:	a39c      	add	r3, pc, #624	@ (adr r3, 800f7c8 <__ieee754_rem_pio2+0x300>)
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	4606      	mov	r6, r0
 800f55c:	460f      	mov	r7, r1
 800f55e:	f7f0 fe5f 	bl	8000220 <__aeabi_dsub>
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4680      	mov	r8, r0
 800f568:	4689      	mov	r9, r1
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	f7f0 fe57 	bl	8000220 <__aeabi_dsub>
 800f572:	a395      	add	r3, pc, #596	@ (adr r3, 800f7c8 <__ieee754_rem_pio2+0x300>)
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	e7dc      	b.n	800f534 <__ieee754_rem_pio2+0x6c>
 800f57a:	f7f0 fe53 	bl	8000224 <__adddf3>
 800f57e:	45a8      	cmp	r8, r5
 800f580:	4606      	mov	r6, r0
 800f582:	460f      	mov	r7, r1
 800f584:	d018      	beq.n	800f5b8 <__ieee754_rem_pio2+0xf0>
 800f586:	a38c      	add	r3, pc, #560	@ (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f0>)
 800f588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58c:	f7f0 fe4a 	bl	8000224 <__adddf3>
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	4680      	mov	r8, r0
 800f596:	4689      	mov	r9, r1
 800f598:	4630      	mov	r0, r6
 800f59a:	4639      	mov	r1, r7
 800f59c:	f7f0 fe40 	bl	8000220 <__aeabi_dsub>
 800f5a0:	a385      	add	r3, pc, #532	@ (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f0>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f0 fe3d 	bl	8000224 <__adddf3>
 800f5aa:	f04f 35ff 	mov.w	r5, #4294967295
 800f5ae:	e9c4 8900 	strd	r8, r9, [r4]
 800f5b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5b6:	e7c4      	b.n	800f542 <__ieee754_rem_pio2+0x7a>
 800f5b8:	a381      	add	r3, pc, #516	@ (adr r3, 800f7c0 <__ieee754_rem_pio2+0x2f8>)
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	f7f0 fe31 	bl	8000224 <__adddf3>
 800f5c2:	a381      	add	r3, pc, #516	@ (adr r3, 800f7c8 <__ieee754_rem_pio2+0x300>)
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	460f      	mov	r7, r1
 800f5cc:	f7f0 fe2a 	bl	8000224 <__adddf3>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4680      	mov	r8, r0
 800f5d6:	4689      	mov	r9, r1
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4639      	mov	r1, r7
 800f5dc:	f7f0 fe20 	bl	8000220 <__aeabi_dsub>
 800f5e0:	a379      	add	r3, pc, #484	@ (adr r3, 800f7c8 <__ieee754_rem_pio2+0x300>)
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	e7de      	b.n	800f5a6 <__ieee754_rem_pio2+0xde>
 800f5e8:	4b82      	ldr	r3, [pc, #520]	@ (800f7f4 <__ieee754_rem_pio2+0x32c>)
 800f5ea:	4598      	cmp	r8, r3
 800f5ec:	f200 80d1 	bhi.w	800f792 <__ieee754_rem_pio2+0x2ca>
 800f5f0:	f000 f966 	bl	800f8c0 <fabs>
 800f5f4:	ec57 6b10 	vmov	r6, r7, d0
 800f5f8:	a375      	add	r3, pc, #468	@ (adr r3, 800f7d0 <__ieee754_rem_pio2+0x308>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f0 ffc5 	bl	8000590 <__aeabi_dmul>
 800f606:	4b7c      	ldr	r3, [pc, #496]	@ (800f7f8 <__ieee754_rem_pio2+0x330>)
 800f608:	2200      	movs	r2, #0
 800f60a:	f7f0 fe0b 	bl	8000224 <__adddf3>
 800f60e:	f7f1 fa59 	bl	8000ac4 <__aeabi_d2iz>
 800f612:	4605      	mov	r5, r0
 800f614:	f7f0 ff52 	bl	80004bc <__aeabi_i2d>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f620:	a363      	add	r3, pc, #396	@ (adr r3, 800f7b0 <__ieee754_rem_pio2+0x2e8>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 ffb3 	bl	8000590 <__aeabi_dmul>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	4630      	mov	r0, r6
 800f630:	4639      	mov	r1, r7
 800f632:	f7f0 fdf5 	bl	8000220 <__aeabi_dsub>
 800f636:	a360      	add	r3, pc, #384	@ (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f0>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	4682      	mov	sl, r0
 800f63e:	468b      	mov	fp, r1
 800f640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f644:	f7f0 ffa4 	bl	8000590 <__aeabi_dmul>
 800f648:	2d1f      	cmp	r5, #31
 800f64a:	4606      	mov	r6, r0
 800f64c:	460f      	mov	r7, r1
 800f64e:	dc0c      	bgt.n	800f66a <__ieee754_rem_pio2+0x1a2>
 800f650:	4b6a      	ldr	r3, [pc, #424]	@ (800f7fc <__ieee754_rem_pio2+0x334>)
 800f652:	1e6a      	subs	r2, r5, #1
 800f654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f658:	4543      	cmp	r3, r8
 800f65a:	d006      	beq.n	800f66a <__ieee754_rem_pio2+0x1a2>
 800f65c:	4632      	mov	r2, r6
 800f65e:	463b      	mov	r3, r7
 800f660:	4650      	mov	r0, sl
 800f662:	4659      	mov	r1, fp
 800f664:	f7f0 fddc 	bl	8000220 <__aeabi_dsub>
 800f668:	e00e      	b.n	800f688 <__ieee754_rem_pio2+0x1c0>
 800f66a:	463b      	mov	r3, r7
 800f66c:	4632      	mov	r2, r6
 800f66e:	4650      	mov	r0, sl
 800f670:	4659      	mov	r1, fp
 800f672:	f7f0 fdd5 	bl	8000220 <__aeabi_dsub>
 800f676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f67a:	9305      	str	r3, [sp, #20]
 800f67c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f680:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f684:	2b10      	cmp	r3, #16
 800f686:	dc02      	bgt.n	800f68e <__ieee754_rem_pio2+0x1c6>
 800f688:	e9c4 0100 	strd	r0, r1, [r4]
 800f68c:	e039      	b.n	800f702 <__ieee754_rem_pio2+0x23a>
 800f68e:	a34c      	add	r3, pc, #304	@ (adr r3, 800f7c0 <__ieee754_rem_pio2+0x2f8>)
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f698:	f7f0 ff7a 	bl	8000590 <__aeabi_dmul>
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4650      	mov	r0, sl
 800f6a6:	4659      	mov	r1, fp
 800f6a8:	f7f0 fdba 	bl	8000220 <__aeabi_dsub>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	4689      	mov	r9, r1
 800f6b4:	4650      	mov	r0, sl
 800f6b6:	4659      	mov	r1, fp
 800f6b8:	f7f0 fdb2 	bl	8000220 <__aeabi_dsub>
 800f6bc:	4632      	mov	r2, r6
 800f6be:	463b      	mov	r3, r7
 800f6c0:	f7f0 fdae 	bl	8000220 <__aeabi_dsub>
 800f6c4:	a340      	add	r3, pc, #256	@ (adr r3, 800f7c8 <__ieee754_rem_pio2+0x300>)
 800f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6d2:	f7f0 ff5d 	bl	8000590 <__aeabi_dmul>
 800f6d6:	4632      	mov	r2, r6
 800f6d8:	463b      	mov	r3, r7
 800f6da:	f7f0 fda1 	bl	8000220 <__aeabi_dsub>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	460f      	mov	r7, r1
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	f7f0 fd99 	bl	8000220 <__aeabi_dsub>
 800f6ee:	9a05      	ldr	r2, [sp, #20]
 800f6f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	2b31      	cmp	r3, #49	@ 0x31
 800f6f8:	dc20      	bgt.n	800f73c <__ieee754_rem_pio2+0x274>
 800f6fa:	e9c4 0100 	strd	r0, r1, [r4]
 800f6fe:	46c2      	mov	sl, r8
 800f700:	46cb      	mov	fp, r9
 800f702:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f706:	4650      	mov	r0, sl
 800f708:	4642      	mov	r2, r8
 800f70a:	464b      	mov	r3, r9
 800f70c:	4659      	mov	r1, fp
 800f70e:	f7f0 fd87 	bl	8000220 <__aeabi_dsub>
 800f712:	463b      	mov	r3, r7
 800f714:	4632      	mov	r2, r6
 800f716:	f7f0 fd83 	bl	8000220 <__aeabi_dsub>
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f722:	f6bf af0e 	bge.w	800f542 <__ieee754_rem_pio2+0x7a>
 800f726:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f72a:	6063      	str	r3, [r4, #4]
 800f72c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f730:	f8c4 8000 	str.w	r8, [r4]
 800f734:	60a0      	str	r0, [r4, #8]
 800f736:	60e3      	str	r3, [r4, #12]
 800f738:	426d      	negs	r5, r5
 800f73a:	e702      	b.n	800f542 <__ieee754_rem_pio2+0x7a>
 800f73c:	a326      	add	r3, pc, #152	@ (adr r3, 800f7d8 <__ieee754_rem_pio2+0x310>)
 800f73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f746:	f7f0 ff23 	bl	8000590 <__aeabi_dmul>
 800f74a:	4606      	mov	r6, r0
 800f74c:	460f      	mov	r7, r1
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	4640      	mov	r0, r8
 800f754:	4649      	mov	r1, r9
 800f756:	f7f0 fd63 	bl	8000220 <__aeabi_dsub>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	4682      	mov	sl, r0
 800f760:	468b      	mov	fp, r1
 800f762:	4640      	mov	r0, r8
 800f764:	4649      	mov	r1, r9
 800f766:	f7f0 fd5b 	bl	8000220 <__aeabi_dsub>
 800f76a:	4632      	mov	r2, r6
 800f76c:	463b      	mov	r3, r7
 800f76e:	f7f0 fd57 	bl	8000220 <__aeabi_dsub>
 800f772:	a31b      	add	r3, pc, #108	@ (adr r3, 800f7e0 <__ieee754_rem_pio2+0x318>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	4606      	mov	r6, r0
 800f77a:	460f      	mov	r7, r1
 800f77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f780:	f7f0 ff06 	bl	8000590 <__aeabi_dmul>
 800f784:	4632      	mov	r2, r6
 800f786:	463b      	mov	r3, r7
 800f788:	f7f0 fd4a 	bl	8000220 <__aeabi_dsub>
 800f78c:	4606      	mov	r6, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	e764      	b.n	800f65c <__ieee754_rem_pio2+0x194>
 800f792:	4b1b      	ldr	r3, [pc, #108]	@ (800f800 <__ieee754_rem_pio2+0x338>)
 800f794:	4598      	cmp	r8, r3
 800f796:	d935      	bls.n	800f804 <__ieee754_rem_pio2+0x33c>
 800f798:	4632      	mov	r2, r6
 800f79a:	463b      	mov	r3, r7
 800f79c:	4630      	mov	r0, r6
 800f79e:	4639      	mov	r1, r7
 800f7a0:	f7f0 fd3e 	bl	8000220 <__aeabi_dsub>
 800f7a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f7a8:	e9c4 0100 	strd	r0, r1, [r4]
 800f7ac:	e69e      	b.n	800f4ec <__ieee754_rem_pio2+0x24>
 800f7ae:	bf00      	nop
 800f7b0:	54400000 	.word	0x54400000
 800f7b4:	3ff921fb 	.word	0x3ff921fb
 800f7b8:	1a626331 	.word	0x1a626331
 800f7bc:	3dd0b461 	.word	0x3dd0b461
 800f7c0:	1a600000 	.word	0x1a600000
 800f7c4:	3dd0b461 	.word	0x3dd0b461
 800f7c8:	2e037073 	.word	0x2e037073
 800f7cc:	3ba3198a 	.word	0x3ba3198a
 800f7d0:	6dc9c883 	.word	0x6dc9c883
 800f7d4:	3fe45f30 	.word	0x3fe45f30
 800f7d8:	2e000000 	.word	0x2e000000
 800f7dc:	3ba3198a 	.word	0x3ba3198a
 800f7e0:	252049c1 	.word	0x252049c1
 800f7e4:	397b839a 	.word	0x397b839a
 800f7e8:	3fe921fb 	.word	0x3fe921fb
 800f7ec:	4002d97b 	.word	0x4002d97b
 800f7f0:	3ff921fb 	.word	0x3ff921fb
 800f7f4:	413921fb 	.word	0x413921fb
 800f7f8:	3fe00000 	.word	0x3fe00000
 800f7fc:	08010cc0 	.word	0x08010cc0
 800f800:	7fefffff 	.word	0x7fefffff
 800f804:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f808:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f80c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f810:	4630      	mov	r0, r6
 800f812:	460f      	mov	r7, r1
 800f814:	f7f1 f956 	bl	8000ac4 <__aeabi_d2iz>
 800f818:	f7f0 fe50 	bl	80004bc <__aeabi_i2d>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	4630      	mov	r0, r6
 800f822:	4639      	mov	r1, r7
 800f824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f828:	f7f0 fcfa 	bl	8000220 <__aeabi_dsub>
 800f82c:	4b22      	ldr	r3, [pc, #136]	@ (800f8b8 <__ieee754_rem_pio2+0x3f0>)
 800f82e:	2200      	movs	r2, #0
 800f830:	f7f0 feae 	bl	8000590 <__aeabi_dmul>
 800f834:	460f      	mov	r7, r1
 800f836:	4606      	mov	r6, r0
 800f838:	f7f1 f944 	bl	8000ac4 <__aeabi_d2iz>
 800f83c:	f7f0 fe3e 	bl	80004bc <__aeabi_i2d>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	4630      	mov	r0, r6
 800f846:	4639      	mov	r1, r7
 800f848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f84c:	f7f0 fce8 	bl	8000220 <__aeabi_dsub>
 800f850:	4b19      	ldr	r3, [pc, #100]	@ (800f8b8 <__ieee754_rem_pio2+0x3f0>)
 800f852:	2200      	movs	r2, #0
 800f854:	f7f0 fe9c 	bl	8000590 <__aeabi_dmul>
 800f858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f85c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f860:	f04f 0803 	mov.w	r8, #3
 800f864:	2600      	movs	r6, #0
 800f866:	2700      	movs	r7, #0
 800f868:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f86c:	4632      	mov	r2, r6
 800f86e:	463b      	mov	r3, r7
 800f870:	46c2      	mov	sl, r8
 800f872:	f108 38ff 	add.w	r8, r8, #4294967295
 800f876:	f7f1 f8f3 	bl	8000a60 <__aeabi_dcmpeq>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d1f4      	bne.n	800f868 <__ieee754_rem_pio2+0x3a0>
 800f87e:	4b0f      	ldr	r3, [pc, #60]	@ (800f8bc <__ieee754_rem_pio2+0x3f4>)
 800f880:	9301      	str	r3, [sp, #4]
 800f882:	2302      	movs	r3, #2
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	462a      	mov	r2, r5
 800f888:	4653      	mov	r3, sl
 800f88a:	4621      	mov	r1, r4
 800f88c:	a806      	add	r0, sp, #24
 800f88e:	f000 fb5b 	bl	800ff48 <__kernel_rem_pio2>
 800f892:	9b04      	ldr	r3, [sp, #16]
 800f894:	2b00      	cmp	r3, #0
 800f896:	4605      	mov	r5, r0
 800f898:	f6bf ae53 	bge.w	800f542 <__ieee754_rem_pio2+0x7a>
 800f89c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f8a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8a4:	e9c4 2300 	strd	r2, r3, [r4]
 800f8a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f8ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f8b4:	e740      	b.n	800f738 <__ieee754_rem_pio2+0x270>
 800f8b6:	bf00      	nop
 800f8b8:	41700000 	.word	0x41700000
 800f8bc:	08010d40 	.word	0x08010d40

0800f8c0 <fabs>:
 800f8c0:	ec51 0b10 	vmov	r0, r1, d0
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f8ca:	ec43 2b10 	vmov	d0, r2, r3
 800f8ce:	4770      	bx	lr

0800f8d0 <__kernel_cosf>:
 800f8d0:	ee10 3a10 	vmov	r3, s0
 800f8d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f8dc:	eef0 6a40 	vmov.f32	s13, s0
 800f8e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f8e4:	d204      	bcs.n	800f8f0 <__kernel_cosf+0x20>
 800f8e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f8ea:	ee17 2a90 	vmov	r2, s15
 800f8ee:	b342      	cbz	r2, 800f942 <__kernel_cosf+0x72>
 800f8f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f8f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f960 <__kernel_cosf+0x90>
 800f8f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f964 <__kernel_cosf+0x94>
 800f8fc:	4a1a      	ldr	r2, [pc, #104]	@ (800f968 <__kernel_cosf+0x98>)
 800f8fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f902:	4293      	cmp	r3, r2
 800f904:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f96c <__kernel_cosf+0x9c>
 800f908:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f90c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f970 <__kernel_cosf+0xa0>
 800f910:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f914:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f974 <__kernel_cosf+0xa4>
 800f918:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f91c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f978 <__kernel_cosf+0xa8>
 800f920:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f924:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f928:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f92c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f930:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f934:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f938:	d804      	bhi.n	800f944 <__kernel_cosf+0x74>
 800f93a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f93e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f942:	4770      	bx	lr
 800f944:	4a0d      	ldr	r2, [pc, #52]	@ (800f97c <__kernel_cosf+0xac>)
 800f946:	4293      	cmp	r3, r2
 800f948:	bf9a      	itte	ls
 800f94a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f94e:	ee07 3a10 	vmovls	s14, r3
 800f952:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f956:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f95a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f95e:	e7ec      	b.n	800f93a <__kernel_cosf+0x6a>
 800f960:	ad47d74e 	.word	0xad47d74e
 800f964:	310f74f6 	.word	0x310f74f6
 800f968:	3e999999 	.word	0x3e999999
 800f96c:	b493f27c 	.word	0xb493f27c
 800f970:	37d00d01 	.word	0x37d00d01
 800f974:	bab60b61 	.word	0xbab60b61
 800f978:	3d2aaaab 	.word	0x3d2aaaab
 800f97c:	3f480000 	.word	0x3f480000

0800f980 <__kernel_sinf>:
 800f980:	ee10 3a10 	vmov	r3, s0
 800f984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f988:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f98c:	d204      	bcs.n	800f998 <__kernel_sinf+0x18>
 800f98e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f992:	ee17 3a90 	vmov	r3, s15
 800f996:	b35b      	cbz	r3, 800f9f0 <__kernel_sinf+0x70>
 800f998:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f99c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f9f4 <__kernel_sinf+0x74>
 800f9a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f9f8 <__kernel_sinf+0x78>
 800f9a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f9a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f9fc <__kernel_sinf+0x7c>
 800f9ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f9b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fa00 <__kernel_sinf+0x80>
 800f9b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f9b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fa04 <__kernel_sinf+0x84>
 800f9bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f9c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f9c4:	b930      	cbnz	r0, 800f9d4 <__kernel_sinf+0x54>
 800f9c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fa08 <__kernel_sinf+0x88>
 800f9ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f9ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f9d2:	4770      	bx	lr
 800f9d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f9d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f9dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f9e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f9e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fa0c <__kernel_sinf+0x8c>
 800f9e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f9ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	2f2ec9d3 	.word	0x2f2ec9d3
 800f9f8:	b2d72f34 	.word	0xb2d72f34
 800f9fc:	3638ef1b 	.word	0x3638ef1b
 800fa00:	b9500d01 	.word	0xb9500d01
 800fa04:	3c088889 	.word	0x3c088889
 800fa08:	be2aaaab 	.word	0xbe2aaaab
 800fa0c:	3e2aaaab 	.word	0x3e2aaaab

0800fa10 <__ieee754_fmodf>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	ee10 6a90 	vmov	r6, s1
 800fa16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fa1a:	1e5a      	subs	r2, r3, #1
 800fa1c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fa20:	d206      	bcs.n	800fa30 <__ieee754_fmodf+0x20>
 800fa22:	ee10 4a10 	vmov	r4, s0
 800fa26:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800fa2a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fa2e:	d304      	bcc.n	800fa3a <__ieee754_fmodf+0x2a>
 800fa30:	ee60 0a20 	vmul.f32	s1, s0, s1
 800fa34:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800fa38:	bd70      	pop	{r4, r5, r6, pc}
 800fa3a:	4299      	cmp	r1, r3
 800fa3c:	dbfc      	blt.n	800fa38 <__ieee754_fmodf+0x28>
 800fa3e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800fa42:	d105      	bne.n	800fa50 <__ieee754_fmodf+0x40>
 800fa44:	4b32      	ldr	r3, [pc, #200]	@ (800fb10 <__ieee754_fmodf+0x100>)
 800fa46:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800fa4a:	ed93 0a00 	vldr	s0, [r3]
 800fa4e:	e7f3      	b.n	800fa38 <__ieee754_fmodf+0x28>
 800fa50:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800fa54:	d146      	bne.n	800fae4 <__ieee754_fmodf+0xd4>
 800fa56:	020a      	lsls	r2, r1, #8
 800fa58:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	dc3e      	bgt.n	800fade <__ieee754_fmodf+0xce>
 800fa60:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800fa64:	bf01      	itttt	eq
 800fa66:	021a      	lsleq	r2, r3, #8
 800fa68:	fab2 f282 	clzeq	r2, r2
 800fa6c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800fa70:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800fa74:	bf16      	itet	ne
 800fa76:	15da      	asrne	r2, r3, #23
 800fa78:	3282      	addeq	r2, #130	@ 0x82
 800fa7a:	3a7f      	subne	r2, #127	@ 0x7f
 800fa7c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800fa80:	bfbb      	ittet	lt
 800fa82:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800fa86:	1a24      	sublt	r4, r4, r0
 800fa88:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800fa8c:	40a1      	lsllt	r1, r4
 800fa8e:	bfa8      	it	ge
 800fa90:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800fa94:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800fa98:	bfb5      	itete	lt
 800fa9a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800fa9e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800faa2:	1aa4      	sublt	r4, r4, r2
 800faa4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800faa8:	bfb8      	it	lt
 800faaa:	fa03 f404 	lsllt.w	r4, r3, r4
 800faae:	1a80      	subs	r0, r0, r2
 800fab0:	1b0b      	subs	r3, r1, r4
 800fab2:	b9d0      	cbnz	r0, 800faea <__ieee754_fmodf+0xda>
 800fab4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800fab8:	bf28      	it	cs
 800faba:	460b      	movcs	r3, r1
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d0c1      	beq.n	800fa44 <__ieee754_fmodf+0x34>
 800fac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fac4:	db19      	blt.n	800fafa <__ieee754_fmodf+0xea>
 800fac6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800faca:	db19      	blt.n	800fb00 <__ieee754_fmodf+0xf0>
 800facc:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800fad0:	327f      	adds	r2, #127	@ 0x7f
 800fad2:	432b      	orrs	r3, r5
 800fad4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fad8:	ee00 3a10 	vmov	s0, r3
 800fadc:	e7ac      	b.n	800fa38 <__ieee754_fmodf+0x28>
 800fade:	3801      	subs	r0, #1
 800fae0:	0052      	lsls	r2, r2, #1
 800fae2:	e7bb      	b.n	800fa5c <__ieee754_fmodf+0x4c>
 800fae4:	15c8      	asrs	r0, r1, #23
 800fae6:	387f      	subs	r0, #127	@ 0x7f
 800fae8:	e7ba      	b.n	800fa60 <__ieee754_fmodf+0x50>
 800faea:	2b00      	cmp	r3, #0
 800faec:	da02      	bge.n	800faf4 <__ieee754_fmodf+0xe4>
 800faee:	0049      	lsls	r1, r1, #1
 800faf0:	3801      	subs	r0, #1
 800faf2:	e7dd      	b.n	800fab0 <__ieee754_fmodf+0xa0>
 800faf4:	d0a6      	beq.n	800fa44 <__ieee754_fmodf+0x34>
 800faf6:	0059      	lsls	r1, r3, #1
 800faf8:	e7fa      	b.n	800faf0 <__ieee754_fmodf+0xe0>
 800fafa:	005b      	lsls	r3, r3, #1
 800fafc:	3a01      	subs	r2, #1
 800fafe:	e7df      	b.n	800fac0 <__ieee754_fmodf+0xb0>
 800fb00:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800fb04:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800fb08:	3282      	adds	r2, #130	@ 0x82
 800fb0a:	4113      	asrs	r3, r2
 800fb0c:	432b      	orrs	r3, r5
 800fb0e:	e7e3      	b.n	800fad8 <__ieee754_fmodf+0xc8>
 800fb10:	08010e48 	.word	0x08010e48

0800fb14 <__ieee754_rem_pio2f>:
 800fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb16:	ee10 6a10 	vmov	r6, s0
 800fb1a:	4b88      	ldr	r3, [pc, #544]	@ (800fd3c <__ieee754_rem_pio2f+0x228>)
 800fb1c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fb20:	429d      	cmp	r5, r3
 800fb22:	b087      	sub	sp, #28
 800fb24:	4604      	mov	r4, r0
 800fb26:	d805      	bhi.n	800fb34 <__ieee754_rem_pio2f+0x20>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	ed80 0a00 	vstr	s0, [r0]
 800fb2e:	6043      	str	r3, [r0, #4]
 800fb30:	2000      	movs	r0, #0
 800fb32:	e022      	b.n	800fb7a <__ieee754_rem_pio2f+0x66>
 800fb34:	4b82      	ldr	r3, [pc, #520]	@ (800fd40 <__ieee754_rem_pio2f+0x22c>)
 800fb36:	429d      	cmp	r5, r3
 800fb38:	d83a      	bhi.n	800fbb0 <__ieee754_rem_pio2f+0x9c>
 800fb3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fb3e:	2e00      	cmp	r6, #0
 800fb40:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fd44 <__ieee754_rem_pio2f+0x230>
 800fb44:	4a80      	ldr	r2, [pc, #512]	@ (800fd48 <__ieee754_rem_pio2f+0x234>)
 800fb46:	f023 030f 	bic.w	r3, r3, #15
 800fb4a:	dd18      	ble.n	800fb7e <__ieee754_rem_pio2f+0x6a>
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800fb52:	bf09      	itett	eq
 800fb54:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fd4c <__ieee754_rem_pio2f+0x238>
 800fb58:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fd50 <__ieee754_rem_pio2f+0x23c>
 800fb5c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fd54 <__ieee754_rem_pio2f+0x240>
 800fb60:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800fb64:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fb68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb6c:	ed80 7a00 	vstr	s14, [r0]
 800fb70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb74:	edc0 7a01 	vstr	s15, [r0, #4]
 800fb78:	2001      	movs	r0, #1
 800fb7a:	b007      	add	sp, #28
 800fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	ee70 7a07 	vadd.f32	s15, s0, s14
 800fb84:	bf09      	itett	eq
 800fb86:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fd4c <__ieee754_rem_pio2f+0x238>
 800fb8a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fd50 <__ieee754_rem_pio2f+0x23c>
 800fb8e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fd54 <__ieee754_rem_pio2f+0x240>
 800fb92:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fb96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb9e:	ed80 7a00 	vstr	s14, [r0]
 800fba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fba6:	edc0 7a01 	vstr	s15, [r0, #4]
 800fbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800fbae:	e7e4      	b.n	800fb7a <__ieee754_rem_pio2f+0x66>
 800fbb0:	4b69      	ldr	r3, [pc, #420]	@ (800fd58 <__ieee754_rem_pio2f+0x244>)
 800fbb2:	429d      	cmp	r5, r3
 800fbb4:	d873      	bhi.n	800fc9e <__ieee754_rem_pio2f+0x18a>
 800fbb6:	f000 f8dd 	bl	800fd74 <fabsf>
 800fbba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fd5c <__ieee754_rem_pio2f+0x248>
 800fbbe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fbc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fbc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fbce:	ee17 0a90 	vmov	r0, s15
 800fbd2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fd44 <__ieee754_rem_pio2f+0x230>
 800fbd6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fbda:	281f      	cmp	r0, #31
 800fbdc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fd50 <__ieee754_rem_pio2f+0x23c>
 800fbe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbe4:	eeb1 6a47 	vneg.f32	s12, s14
 800fbe8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fbec:	ee16 1a90 	vmov	r1, s13
 800fbf0:	dc09      	bgt.n	800fc06 <__ieee754_rem_pio2f+0xf2>
 800fbf2:	4a5b      	ldr	r2, [pc, #364]	@ (800fd60 <__ieee754_rem_pio2f+0x24c>)
 800fbf4:	1e47      	subs	r7, r0, #1
 800fbf6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fbfa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fbfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d107      	bne.n	800fc16 <__ieee754_rem_pio2f+0x102>
 800fc06:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fc0a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fc0e:	2a08      	cmp	r2, #8
 800fc10:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fc14:	dc14      	bgt.n	800fc40 <__ieee754_rem_pio2f+0x12c>
 800fc16:	6021      	str	r1, [r4, #0]
 800fc18:	ed94 7a00 	vldr	s14, [r4]
 800fc1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc20:	2e00      	cmp	r6, #0
 800fc22:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc26:	ed84 0a01 	vstr	s0, [r4, #4]
 800fc2a:	daa6      	bge.n	800fb7a <__ieee754_rem_pio2f+0x66>
 800fc2c:	eeb1 7a47 	vneg.f32	s14, s14
 800fc30:	eeb1 0a40 	vneg.f32	s0, s0
 800fc34:	ed84 7a00 	vstr	s14, [r4]
 800fc38:	ed84 0a01 	vstr	s0, [r4, #4]
 800fc3c:	4240      	negs	r0, r0
 800fc3e:	e79c      	b.n	800fb7a <__ieee754_rem_pio2f+0x66>
 800fc40:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fd4c <__ieee754_rem_pio2f+0x238>
 800fc44:	eef0 6a40 	vmov.f32	s13, s0
 800fc48:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fc4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fc50:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fc54:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fd54 <__ieee754_rem_pio2f+0x240>
 800fc58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fc5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fc60:	ee15 2a90 	vmov	r2, s11
 800fc64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fc68:	1a5b      	subs	r3, r3, r1
 800fc6a:	2b19      	cmp	r3, #25
 800fc6c:	dc04      	bgt.n	800fc78 <__ieee754_rem_pio2f+0x164>
 800fc6e:	edc4 5a00 	vstr	s11, [r4]
 800fc72:	eeb0 0a66 	vmov.f32	s0, s13
 800fc76:	e7cf      	b.n	800fc18 <__ieee754_rem_pio2f+0x104>
 800fc78:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fd64 <__ieee754_rem_pio2f+0x250>
 800fc7c:	eeb0 0a66 	vmov.f32	s0, s13
 800fc80:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fc84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fc88:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fd68 <__ieee754_rem_pio2f+0x254>
 800fc8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fc90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fc94:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fc98:	ed84 7a00 	vstr	s14, [r4]
 800fc9c:	e7bc      	b.n	800fc18 <__ieee754_rem_pio2f+0x104>
 800fc9e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fca2:	d306      	bcc.n	800fcb2 <__ieee754_rem_pio2f+0x19e>
 800fca4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fca8:	edc0 7a01 	vstr	s15, [r0, #4]
 800fcac:	edc0 7a00 	vstr	s15, [r0]
 800fcb0:	e73e      	b.n	800fb30 <__ieee754_rem_pio2f+0x1c>
 800fcb2:	15ea      	asrs	r2, r5, #23
 800fcb4:	3a86      	subs	r2, #134	@ 0x86
 800fcb6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fcba:	ee07 3a90 	vmov	s15, r3
 800fcbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fcc2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fd6c <__ieee754_rem_pio2f+0x258>
 800fcc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcce:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fcd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fcd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fcda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fce2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fcea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	edcd 7a05 	vstr	s15, [sp, #20]
 800fcf6:	d11e      	bne.n	800fd36 <__ieee754_rem_pio2f+0x222>
 800fcf8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	bf0c      	ite	eq
 800fd02:	2301      	moveq	r3, #1
 800fd04:	2302      	movne	r3, #2
 800fd06:	491a      	ldr	r1, [pc, #104]	@ (800fd70 <__ieee754_rem_pio2f+0x25c>)
 800fd08:	9101      	str	r1, [sp, #4]
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	9100      	str	r1, [sp, #0]
 800fd0e:	a803      	add	r0, sp, #12
 800fd10:	4621      	mov	r1, r4
 800fd12:	f000 fc69 	bl	80105e8 <__kernel_rem_pio2f>
 800fd16:	2e00      	cmp	r6, #0
 800fd18:	f6bf af2f 	bge.w	800fb7a <__ieee754_rem_pio2f+0x66>
 800fd1c:	edd4 7a00 	vldr	s15, [r4]
 800fd20:	eef1 7a67 	vneg.f32	s15, s15
 800fd24:	edc4 7a00 	vstr	s15, [r4]
 800fd28:	edd4 7a01 	vldr	s15, [r4, #4]
 800fd2c:	eef1 7a67 	vneg.f32	s15, s15
 800fd30:	edc4 7a01 	vstr	s15, [r4, #4]
 800fd34:	e782      	b.n	800fc3c <__ieee754_rem_pio2f+0x128>
 800fd36:	2303      	movs	r3, #3
 800fd38:	e7e5      	b.n	800fd06 <__ieee754_rem_pio2f+0x1f2>
 800fd3a:	bf00      	nop
 800fd3c:	3f490fd8 	.word	0x3f490fd8
 800fd40:	4016cbe3 	.word	0x4016cbe3
 800fd44:	3fc90f80 	.word	0x3fc90f80
 800fd48:	3fc90fd0 	.word	0x3fc90fd0
 800fd4c:	37354400 	.word	0x37354400
 800fd50:	37354443 	.word	0x37354443
 800fd54:	2e85a308 	.word	0x2e85a308
 800fd58:	43490f80 	.word	0x43490f80
 800fd5c:	3f22f984 	.word	0x3f22f984
 800fd60:	08010e50 	.word	0x08010e50
 800fd64:	2e85a300 	.word	0x2e85a300
 800fd68:	248d3132 	.word	0x248d3132
 800fd6c:	43800000 	.word	0x43800000
 800fd70:	08010ed0 	.word	0x08010ed0

0800fd74 <fabsf>:
 800fd74:	ee10 3a10 	vmov	r3, s0
 800fd78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd7c:	ee00 3a10 	vmov	s0, r3
 800fd80:	4770      	bx	lr
 800fd82:	0000      	movs	r0, r0
 800fd84:	0000      	movs	r0, r0
	...

0800fd88 <scalbn>:
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	ec55 4b10 	vmov	r4, r5, d0
 800fd8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fd92:	4606      	mov	r6, r0
 800fd94:	462b      	mov	r3, r5
 800fd96:	b991      	cbnz	r1, 800fdbe <scalbn+0x36>
 800fd98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fd9c:	4323      	orrs	r3, r4
 800fd9e:	d03b      	beq.n	800fe18 <scalbn+0x90>
 800fda0:	4b33      	ldr	r3, [pc, #204]	@ (800fe70 <scalbn+0xe8>)
 800fda2:	4620      	mov	r0, r4
 800fda4:	4629      	mov	r1, r5
 800fda6:	2200      	movs	r2, #0
 800fda8:	f7f0 fbf2 	bl	8000590 <__aeabi_dmul>
 800fdac:	4b31      	ldr	r3, [pc, #196]	@ (800fe74 <scalbn+0xec>)
 800fdae:	429e      	cmp	r6, r3
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	da0f      	bge.n	800fdd6 <scalbn+0x4e>
 800fdb6:	a326      	add	r3, pc, #152	@ (adr r3, 800fe50 <scalbn+0xc8>)
 800fdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbc:	e01e      	b.n	800fdfc <scalbn+0x74>
 800fdbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fdc2:	4291      	cmp	r1, r2
 800fdc4:	d10b      	bne.n	800fdde <scalbn+0x56>
 800fdc6:	4622      	mov	r2, r4
 800fdc8:	4620      	mov	r0, r4
 800fdca:	4629      	mov	r1, r5
 800fdcc:	f7f0 fa2a 	bl	8000224 <__adddf3>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	460d      	mov	r5, r1
 800fdd4:	e020      	b.n	800fe18 <scalbn+0x90>
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fddc:	3936      	subs	r1, #54	@ 0x36
 800fdde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fde2:	4296      	cmp	r6, r2
 800fde4:	dd0d      	ble.n	800fe02 <scalbn+0x7a>
 800fde6:	2d00      	cmp	r5, #0
 800fde8:	a11b      	add	r1, pc, #108	@ (adr r1, 800fe58 <scalbn+0xd0>)
 800fdea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdee:	da02      	bge.n	800fdf6 <scalbn+0x6e>
 800fdf0:	a11b      	add	r1, pc, #108	@ (adr r1, 800fe60 <scalbn+0xd8>)
 800fdf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdf6:	a318      	add	r3, pc, #96	@ (adr r3, 800fe58 <scalbn+0xd0>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f7f0 fbc8 	bl	8000590 <__aeabi_dmul>
 800fe00:	e7e6      	b.n	800fdd0 <scalbn+0x48>
 800fe02:	1872      	adds	r2, r6, r1
 800fe04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fe08:	428a      	cmp	r2, r1
 800fe0a:	dcec      	bgt.n	800fde6 <scalbn+0x5e>
 800fe0c:	2a00      	cmp	r2, #0
 800fe0e:	dd06      	ble.n	800fe1e <scalbn+0x96>
 800fe10:	f36f 531e 	bfc	r3, #20, #11
 800fe14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fe18:	ec45 4b10 	vmov	d0, r4, r5
 800fe1c:	bd70      	pop	{r4, r5, r6, pc}
 800fe1e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fe22:	da08      	bge.n	800fe36 <scalbn+0xae>
 800fe24:	2d00      	cmp	r5, #0
 800fe26:	a10a      	add	r1, pc, #40	@ (adr r1, 800fe50 <scalbn+0xc8>)
 800fe28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe2c:	dac3      	bge.n	800fdb6 <scalbn+0x2e>
 800fe2e:	a10e      	add	r1, pc, #56	@ (adr r1, 800fe68 <scalbn+0xe0>)
 800fe30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe34:	e7bf      	b.n	800fdb6 <scalbn+0x2e>
 800fe36:	3236      	adds	r2, #54	@ 0x36
 800fe38:	f36f 531e 	bfc	r3, #20, #11
 800fe3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fe40:	4620      	mov	r0, r4
 800fe42:	4b0d      	ldr	r3, [pc, #52]	@ (800fe78 <scalbn+0xf0>)
 800fe44:	4629      	mov	r1, r5
 800fe46:	2200      	movs	r2, #0
 800fe48:	e7d8      	b.n	800fdfc <scalbn+0x74>
 800fe4a:	bf00      	nop
 800fe4c:	f3af 8000 	nop.w
 800fe50:	c2f8f359 	.word	0xc2f8f359
 800fe54:	01a56e1f 	.word	0x01a56e1f
 800fe58:	8800759c 	.word	0x8800759c
 800fe5c:	7e37e43c 	.word	0x7e37e43c
 800fe60:	8800759c 	.word	0x8800759c
 800fe64:	fe37e43c 	.word	0xfe37e43c
 800fe68:	c2f8f359 	.word	0xc2f8f359
 800fe6c:	81a56e1f 	.word	0x81a56e1f
 800fe70:	43500000 	.word	0x43500000
 800fe74:	ffff3cb0 	.word	0xffff3cb0
 800fe78:	3c900000 	.word	0x3c900000

0800fe7c <scalbnf>:
 800fe7c:	ee10 3a10 	vmov	r3, s0
 800fe80:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fe84:	d02b      	beq.n	800fede <scalbnf+0x62>
 800fe86:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fe8a:	d302      	bcc.n	800fe92 <scalbnf+0x16>
 800fe8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe90:	4770      	bx	lr
 800fe92:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fe96:	d123      	bne.n	800fee0 <scalbnf+0x64>
 800fe98:	4b24      	ldr	r3, [pc, #144]	@ (800ff2c <scalbnf+0xb0>)
 800fe9a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ff30 <scalbnf+0xb4>
 800fe9e:	4298      	cmp	r0, r3
 800fea0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fea4:	db17      	blt.n	800fed6 <scalbnf+0x5a>
 800fea6:	ee10 3a10 	vmov	r3, s0
 800feaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800feae:	3a19      	subs	r2, #25
 800feb0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800feb4:	4288      	cmp	r0, r1
 800feb6:	dd15      	ble.n	800fee4 <scalbnf+0x68>
 800feb8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ff34 <scalbnf+0xb8>
 800febc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ff38 <scalbnf+0xbc>
 800fec0:	ee10 3a10 	vmov	r3, s0
 800fec4:	eeb0 7a67 	vmov.f32	s14, s15
 800fec8:	2b00      	cmp	r3, #0
 800feca:	bfb8      	it	lt
 800fecc:	eef0 7a66 	vmovlt.f32	s15, s13
 800fed0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fed4:	4770      	bx	lr
 800fed6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ff3c <scalbnf+0xc0>
 800feda:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fede:	4770      	bx	lr
 800fee0:	0dd2      	lsrs	r2, r2, #23
 800fee2:	e7e5      	b.n	800feb0 <scalbnf+0x34>
 800fee4:	4410      	add	r0, r2
 800fee6:	28fe      	cmp	r0, #254	@ 0xfe
 800fee8:	dce6      	bgt.n	800feb8 <scalbnf+0x3c>
 800feea:	2800      	cmp	r0, #0
 800feec:	dd06      	ble.n	800fefc <scalbnf+0x80>
 800feee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fef2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fef6:	ee00 3a10 	vmov	s0, r3
 800fefa:	4770      	bx	lr
 800fefc:	f110 0f16 	cmn.w	r0, #22
 800ff00:	da09      	bge.n	800ff16 <scalbnf+0x9a>
 800ff02:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ff3c <scalbnf+0xc0>
 800ff06:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ff40 <scalbnf+0xc4>
 800ff0a:	ee10 3a10 	vmov	r3, s0
 800ff0e:	eeb0 7a67 	vmov.f32	s14, s15
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	e7d9      	b.n	800feca <scalbnf+0x4e>
 800ff16:	3019      	adds	r0, #25
 800ff18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ff1c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ff20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ff44 <scalbnf+0xc8>
 800ff24:	ee07 3a90 	vmov	s15, r3
 800ff28:	e7d7      	b.n	800feda <scalbnf+0x5e>
 800ff2a:	bf00      	nop
 800ff2c:	ffff3cb0 	.word	0xffff3cb0
 800ff30:	4c000000 	.word	0x4c000000
 800ff34:	7149f2ca 	.word	0x7149f2ca
 800ff38:	f149f2ca 	.word	0xf149f2ca
 800ff3c:	0da24260 	.word	0x0da24260
 800ff40:	8da24260 	.word	0x8da24260
 800ff44:	33000000 	.word	0x33000000

0800ff48 <__kernel_rem_pio2>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	ed2d 8b02 	vpush	{d8}
 800ff50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ff54:	f112 0f14 	cmn.w	r2, #20
 800ff58:	9306      	str	r3, [sp, #24]
 800ff5a:	9104      	str	r1, [sp, #16]
 800ff5c:	4bc2      	ldr	r3, [pc, #776]	@ (8010268 <__kernel_rem_pio2+0x320>)
 800ff5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ff60:	9008      	str	r0, [sp, #32]
 800ff62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	9b06      	ldr	r3, [sp, #24]
 800ff6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff6e:	bfa8      	it	ge
 800ff70:	1ed4      	subge	r4, r2, #3
 800ff72:	9305      	str	r3, [sp, #20]
 800ff74:	bfb2      	itee	lt
 800ff76:	2400      	movlt	r4, #0
 800ff78:	2318      	movge	r3, #24
 800ff7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ff7e:	f06f 0317 	mvn.w	r3, #23
 800ff82:	fb04 3303 	mla	r3, r4, r3, r3
 800ff86:	eb03 0b02 	add.w	fp, r3, r2
 800ff8a:	9b00      	ldr	r3, [sp, #0]
 800ff8c:	9a05      	ldr	r2, [sp, #20]
 800ff8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8010258 <__kernel_rem_pio2+0x310>
 800ff92:	eb03 0802 	add.w	r8, r3, r2
 800ff96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ff98:	1aa7      	subs	r7, r4, r2
 800ff9a:	ae20      	add	r6, sp, #128	@ 0x80
 800ff9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ffa0:	2500      	movs	r5, #0
 800ffa2:	4545      	cmp	r5, r8
 800ffa4:	dd12      	ble.n	800ffcc <__kernel_rem_pio2+0x84>
 800ffa6:	9b06      	ldr	r3, [sp, #24]
 800ffa8:	aa20      	add	r2, sp, #128	@ 0x80
 800ffaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ffae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ffb2:	2700      	movs	r7, #0
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	429f      	cmp	r7, r3
 800ffb8:	dc2e      	bgt.n	8010018 <__kernel_rem_pio2+0xd0>
 800ffba:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8010258 <__kernel_rem_pio2+0x310>
 800ffbe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffc6:	46a8      	mov	r8, r5
 800ffc8:	2600      	movs	r6, #0
 800ffca:	e01b      	b.n	8010004 <__kernel_rem_pio2+0xbc>
 800ffcc:	42ef      	cmn	r7, r5
 800ffce:	d407      	bmi.n	800ffe0 <__kernel_rem_pio2+0x98>
 800ffd0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ffd4:	f7f0 fa72 	bl	80004bc <__aeabi_i2d>
 800ffd8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ffdc:	3501      	adds	r5, #1
 800ffde:	e7e0      	b.n	800ffa2 <__kernel_rem_pio2+0x5a>
 800ffe0:	ec51 0b18 	vmov	r0, r1, d8
 800ffe4:	e7f8      	b.n	800ffd8 <__kernel_rem_pio2+0x90>
 800ffe6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800ffea:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ffee:	f7f0 facf 	bl	8000590 <__aeabi_dmul>
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fffa:	f7f0 f913 	bl	8000224 <__adddf3>
 800fffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010002:	3601      	adds	r6, #1
 8010004:	9b05      	ldr	r3, [sp, #20]
 8010006:	429e      	cmp	r6, r3
 8010008:	dded      	ble.n	800ffe6 <__kernel_rem_pio2+0x9e>
 801000a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801000e:	3701      	adds	r7, #1
 8010010:	ecaa 7b02 	vstmia	sl!, {d7}
 8010014:	3508      	adds	r5, #8
 8010016:	e7cd      	b.n	800ffb4 <__kernel_rem_pio2+0x6c>
 8010018:	9b00      	ldr	r3, [sp, #0]
 801001a:	f8dd 8000 	ldr.w	r8, [sp]
 801001e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010024:	930a      	str	r3, [sp, #40]	@ 0x28
 8010026:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801002c:	9309      	str	r3, [sp, #36]	@ 0x24
 801002e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010034:	ab98      	add	r3, sp, #608	@ 0x260
 8010036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801003a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801003e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010042:	ac0c      	add	r4, sp, #48	@ 0x30
 8010044:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010046:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801004a:	46a1      	mov	r9, r4
 801004c:	46c2      	mov	sl, r8
 801004e:	f1ba 0f00 	cmp.w	sl, #0
 8010052:	dc77      	bgt.n	8010144 <__kernel_rem_pio2+0x1fc>
 8010054:	4658      	mov	r0, fp
 8010056:	ed9d 0b02 	vldr	d0, [sp, #8]
 801005a:	f7ff fe95 	bl	800fd88 <scalbn>
 801005e:	ec57 6b10 	vmov	r6, r7, d0
 8010062:	2200      	movs	r2, #0
 8010064:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 fa90 	bl	8000590 <__aeabi_dmul>
 8010070:	ec41 0b10 	vmov	d0, r0, r1
 8010074:	f000 fd20 	bl	8010ab8 <floor>
 8010078:	4b7c      	ldr	r3, [pc, #496]	@ (801026c <__kernel_rem_pio2+0x324>)
 801007a:	ec51 0b10 	vmov	r0, r1, d0
 801007e:	2200      	movs	r2, #0
 8010080:	f7f0 fa86 	bl	8000590 <__aeabi_dmul>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	f7f0 f8c8 	bl	8000220 <__aeabi_dsub>
 8010090:	460f      	mov	r7, r1
 8010092:	4606      	mov	r6, r0
 8010094:	f7f0 fd16 	bl	8000ac4 <__aeabi_d2iz>
 8010098:	9002      	str	r0, [sp, #8]
 801009a:	f7f0 fa0f 	bl	80004bc <__aeabi_i2d>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4630      	mov	r0, r6
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 f8bb 	bl	8000220 <__aeabi_dsub>
 80100aa:	f1bb 0f00 	cmp.w	fp, #0
 80100ae:	4606      	mov	r6, r0
 80100b0:	460f      	mov	r7, r1
 80100b2:	dd6c      	ble.n	801018e <__kernel_rem_pio2+0x246>
 80100b4:	f108 31ff 	add.w	r1, r8, #4294967295
 80100b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80100ba:	9d02      	ldr	r5, [sp, #8]
 80100bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100c0:	f1cb 0018 	rsb	r0, fp, #24
 80100c4:	fa43 f200 	asr.w	r2, r3, r0
 80100c8:	4415      	add	r5, r2
 80100ca:	4082      	lsls	r2, r0
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80100d0:	9502      	str	r5, [sp, #8]
 80100d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80100d6:	f1cb 0217 	rsb	r2, fp, #23
 80100da:	fa43 f902 	asr.w	r9, r3, r2
 80100de:	f1b9 0f00 	cmp.w	r9, #0
 80100e2:	dd64      	ble.n	80101ae <__kernel_rem_pio2+0x266>
 80100e4:	9b02      	ldr	r3, [sp, #8]
 80100e6:	2200      	movs	r2, #0
 80100e8:	3301      	adds	r3, #1
 80100ea:	9302      	str	r3, [sp, #8]
 80100ec:	4615      	mov	r5, r2
 80100ee:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80100f2:	4590      	cmp	r8, r2
 80100f4:	f300 80a1 	bgt.w	801023a <__kernel_rem_pio2+0x2f2>
 80100f8:	f1bb 0f00 	cmp.w	fp, #0
 80100fc:	dd07      	ble.n	801010e <__kernel_rem_pio2+0x1c6>
 80100fe:	f1bb 0f01 	cmp.w	fp, #1
 8010102:	f000 80c1 	beq.w	8010288 <__kernel_rem_pio2+0x340>
 8010106:	f1bb 0f02 	cmp.w	fp, #2
 801010a:	f000 80c8 	beq.w	801029e <__kernel_rem_pio2+0x356>
 801010e:	f1b9 0f02 	cmp.w	r9, #2
 8010112:	d14c      	bne.n	80101ae <__kernel_rem_pio2+0x266>
 8010114:	4632      	mov	r2, r6
 8010116:	463b      	mov	r3, r7
 8010118:	4955      	ldr	r1, [pc, #340]	@ (8010270 <__kernel_rem_pio2+0x328>)
 801011a:	2000      	movs	r0, #0
 801011c:	f7f0 f880 	bl	8000220 <__aeabi_dsub>
 8010120:	4606      	mov	r6, r0
 8010122:	460f      	mov	r7, r1
 8010124:	2d00      	cmp	r5, #0
 8010126:	d042      	beq.n	80101ae <__kernel_rem_pio2+0x266>
 8010128:	4658      	mov	r0, fp
 801012a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8010260 <__kernel_rem_pio2+0x318>
 801012e:	f7ff fe2b 	bl	800fd88 <scalbn>
 8010132:	4630      	mov	r0, r6
 8010134:	4639      	mov	r1, r7
 8010136:	ec53 2b10 	vmov	r2, r3, d0
 801013a:	f7f0 f871 	bl	8000220 <__aeabi_dsub>
 801013e:	4606      	mov	r6, r0
 8010140:	460f      	mov	r7, r1
 8010142:	e034      	b.n	80101ae <__kernel_rem_pio2+0x266>
 8010144:	4b4b      	ldr	r3, [pc, #300]	@ (8010274 <__kernel_rem_pio2+0x32c>)
 8010146:	2200      	movs	r2, #0
 8010148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014c:	f7f0 fa20 	bl	8000590 <__aeabi_dmul>
 8010150:	f7f0 fcb8 	bl	8000ac4 <__aeabi_d2iz>
 8010154:	f7f0 f9b2 	bl	80004bc <__aeabi_i2d>
 8010158:	4b47      	ldr	r3, [pc, #284]	@ (8010278 <__kernel_rem_pio2+0x330>)
 801015a:	2200      	movs	r2, #0
 801015c:	4606      	mov	r6, r0
 801015e:	460f      	mov	r7, r1
 8010160:	f7f0 fa16 	bl	8000590 <__aeabi_dmul>
 8010164:	4602      	mov	r2, r0
 8010166:	460b      	mov	r3, r1
 8010168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801016c:	f7f0 f858 	bl	8000220 <__aeabi_dsub>
 8010170:	f7f0 fca8 	bl	8000ac4 <__aeabi_d2iz>
 8010174:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010178:	f849 0b04 	str.w	r0, [r9], #4
 801017c:	4639      	mov	r1, r7
 801017e:	4630      	mov	r0, r6
 8010180:	f7f0 f850 	bl	8000224 <__adddf3>
 8010184:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801018c:	e75f      	b.n	801004e <__kernel_rem_pio2+0x106>
 801018e:	d107      	bne.n	80101a0 <__kernel_rem_pio2+0x258>
 8010190:	f108 33ff 	add.w	r3, r8, #4294967295
 8010194:	aa0c      	add	r2, sp, #48	@ 0x30
 8010196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801019a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801019e:	e79e      	b.n	80100de <__kernel_rem_pio2+0x196>
 80101a0:	4b36      	ldr	r3, [pc, #216]	@ (801027c <__kernel_rem_pio2+0x334>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	f7f0 fc7a 	bl	8000a9c <__aeabi_dcmpge>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d143      	bne.n	8010234 <__kernel_rem_pio2+0x2ec>
 80101ac:	4681      	mov	r9, r0
 80101ae:	2200      	movs	r2, #0
 80101b0:	2300      	movs	r3, #0
 80101b2:	4630      	mov	r0, r6
 80101b4:	4639      	mov	r1, r7
 80101b6:	f7f0 fc53 	bl	8000a60 <__aeabi_dcmpeq>
 80101ba:	2800      	cmp	r0, #0
 80101bc:	f000 80c1 	beq.w	8010342 <__kernel_rem_pio2+0x3fa>
 80101c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80101c4:	2200      	movs	r2, #0
 80101c6:	9900      	ldr	r1, [sp, #0]
 80101c8:	428b      	cmp	r3, r1
 80101ca:	da70      	bge.n	80102ae <__kernel_rem_pio2+0x366>
 80101cc:	2a00      	cmp	r2, #0
 80101ce:	f000 808b 	beq.w	80102e8 <__kernel_rem_pio2+0x3a0>
 80101d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80101d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80101d8:	f1ab 0b18 	sub.w	fp, fp, #24
 80101dc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d0f6      	beq.n	80101d2 <__kernel_rem_pio2+0x28a>
 80101e4:	4658      	mov	r0, fp
 80101e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8010260 <__kernel_rem_pio2+0x318>
 80101ea:	f7ff fdcd 	bl	800fd88 <scalbn>
 80101ee:	f108 0301 	add.w	r3, r8, #1
 80101f2:	00da      	lsls	r2, r3, #3
 80101f4:	9205      	str	r2, [sp, #20]
 80101f6:	ec55 4b10 	vmov	r4, r5, d0
 80101fa:	aa70      	add	r2, sp, #448	@ 0x1c0
 80101fc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8010274 <__kernel_rem_pio2+0x32c>
 8010200:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010204:	4646      	mov	r6, r8
 8010206:	f04f 0a00 	mov.w	sl, #0
 801020a:	2e00      	cmp	r6, #0
 801020c:	f280 80d1 	bge.w	80103b2 <__kernel_rem_pio2+0x46a>
 8010210:	4644      	mov	r4, r8
 8010212:	2c00      	cmp	r4, #0
 8010214:	f2c0 80ff 	blt.w	8010416 <__kernel_rem_pio2+0x4ce>
 8010218:	4b19      	ldr	r3, [pc, #100]	@ (8010280 <__kernel_rem_pio2+0x338>)
 801021a:	461f      	mov	r7, r3
 801021c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801021e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010222:	9306      	str	r3, [sp, #24]
 8010224:	f04f 0a00 	mov.w	sl, #0
 8010228:	f04f 0b00 	mov.w	fp, #0
 801022c:	2600      	movs	r6, #0
 801022e:	eba8 0504 	sub.w	r5, r8, r4
 8010232:	e0e4      	b.n	80103fe <__kernel_rem_pio2+0x4b6>
 8010234:	f04f 0902 	mov.w	r9, #2
 8010238:	e754      	b.n	80100e4 <__kernel_rem_pio2+0x19c>
 801023a:	f854 3b04 	ldr.w	r3, [r4], #4
 801023e:	bb0d      	cbnz	r5, 8010284 <__kernel_rem_pio2+0x33c>
 8010240:	b123      	cbz	r3, 801024c <__kernel_rem_pio2+0x304>
 8010242:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010246:	f844 3c04 	str.w	r3, [r4, #-4]
 801024a:	2301      	movs	r3, #1
 801024c:	3201      	adds	r2, #1
 801024e:	461d      	mov	r5, r3
 8010250:	e74f      	b.n	80100f2 <__kernel_rem_pio2+0x1aa>
 8010252:	bf00      	nop
 8010254:	f3af 8000 	nop.w
	...
 8010264:	3ff00000 	.word	0x3ff00000
 8010268:	08011228 	.word	0x08011228
 801026c:	40200000 	.word	0x40200000
 8010270:	3ff00000 	.word	0x3ff00000
 8010274:	3e700000 	.word	0x3e700000
 8010278:	41700000 	.word	0x41700000
 801027c:	3fe00000 	.word	0x3fe00000
 8010280:	080111e8 	.word	0x080111e8
 8010284:	1acb      	subs	r3, r1, r3
 8010286:	e7de      	b.n	8010246 <__kernel_rem_pio2+0x2fe>
 8010288:	f108 32ff 	add.w	r2, r8, #4294967295
 801028c:	ab0c      	add	r3, sp, #48	@ 0x30
 801028e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010292:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010296:	a90c      	add	r1, sp, #48	@ 0x30
 8010298:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801029c:	e737      	b.n	801010e <__kernel_rem_pio2+0x1c6>
 801029e:	f108 32ff 	add.w	r2, r8, #4294967295
 80102a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80102a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80102ac:	e7f3      	b.n	8010296 <__kernel_rem_pio2+0x34e>
 80102ae:	a90c      	add	r1, sp, #48	@ 0x30
 80102b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80102b4:	3b01      	subs	r3, #1
 80102b6:	430a      	orrs	r2, r1
 80102b8:	e785      	b.n	80101c6 <__kernel_rem_pio2+0x27e>
 80102ba:	3401      	adds	r4, #1
 80102bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80102c0:	2a00      	cmp	r2, #0
 80102c2:	d0fa      	beq.n	80102ba <__kernel_rem_pio2+0x372>
 80102c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80102ca:	eb0d 0503 	add.w	r5, sp, r3
 80102ce:	9b06      	ldr	r3, [sp, #24]
 80102d0:	aa20      	add	r2, sp, #128	@ 0x80
 80102d2:	4443      	add	r3, r8
 80102d4:	f108 0701 	add.w	r7, r8, #1
 80102d8:	3d98      	subs	r5, #152	@ 0x98
 80102da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80102de:	4444      	add	r4, r8
 80102e0:	42bc      	cmp	r4, r7
 80102e2:	da04      	bge.n	80102ee <__kernel_rem_pio2+0x3a6>
 80102e4:	46a0      	mov	r8, r4
 80102e6:	e6a2      	b.n	801002e <__kernel_rem_pio2+0xe6>
 80102e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ea:	2401      	movs	r4, #1
 80102ec:	e7e6      	b.n	80102bc <__kernel_rem_pio2+0x374>
 80102ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80102f4:	f7f0 f8e2 	bl	80004bc <__aeabi_i2d>
 80102f8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80105b8 <__kernel_rem_pio2+0x670>
 80102fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010308:	46b2      	mov	sl, r6
 801030a:	f04f 0800 	mov.w	r8, #0
 801030e:	9b05      	ldr	r3, [sp, #20]
 8010310:	4598      	cmp	r8, r3
 8010312:	dd05      	ble.n	8010320 <__kernel_rem_pio2+0x3d8>
 8010314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010318:	3701      	adds	r7, #1
 801031a:	eca5 7b02 	vstmia	r5!, {d7}
 801031e:	e7df      	b.n	80102e0 <__kernel_rem_pio2+0x398>
 8010320:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010328:	f7f0 f932 	bl	8000590 <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010334:	f7ef ff76 	bl	8000224 <__adddf3>
 8010338:	f108 0801 	add.w	r8, r8, #1
 801033c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010340:	e7e5      	b.n	801030e <__kernel_rem_pio2+0x3c6>
 8010342:	f1cb 0000 	rsb	r0, fp, #0
 8010346:	ec47 6b10 	vmov	d0, r6, r7
 801034a:	f7ff fd1d 	bl	800fd88 <scalbn>
 801034e:	ec55 4b10 	vmov	r4, r5, d0
 8010352:	4b9b      	ldr	r3, [pc, #620]	@ (80105c0 <__kernel_rem_pio2+0x678>)
 8010354:	2200      	movs	r2, #0
 8010356:	4620      	mov	r0, r4
 8010358:	4629      	mov	r1, r5
 801035a:	f7f0 fb9f 	bl	8000a9c <__aeabi_dcmpge>
 801035e:	b300      	cbz	r0, 80103a2 <__kernel_rem_pio2+0x45a>
 8010360:	4b98      	ldr	r3, [pc, #608]	@ (80105c4 <__kernel_rem_pio2+0x67c>)
 8010362:	2200      	movs	r2, #0
 8010364:	4620      	mov	r0, r4
 8010366:	4629      	mov	r1, r5
 8010368:	f7f0 f912 	bl	8000590 <__aeabi_dmul>
 801036c:	f7f0 fbaa 	bl	8000ac4 <__aeabi_d2iz>
 8010370:	4606      	mov	r6, r0
 8010372:	f7f0 f8a3 	bl	80004bc <__aeabi_i2d>
 8010376:	4b92      	ldr	r3, [pc, #584]	@ (80105c0 <__kernel_rem_pio2+0x678>)
 8010378:	2200      	movs	r2, #0
 801037a:	f7f0 f909 	bl	8000590 <__aeabi_dmul>
 801037e:	460b      	mov	r3, r1
 8010380:	4602      	mov	r2, r0
 8010382:	4629      	mov	r1, r5
 8010384:	4620      	mov	r0, r4
 8010386:	f7ef ff4b 	bl	8000220 <__aeabi_dsub>
 801038a:	f7f0 fb9b 	bl	8000ac4 <__aeabi_d2iz>
 801038e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010390:	f10b 0b18 	add.w	fp, fp, #24
 8010394:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010398:	f108 0801 	add.w	r8, r8, #1
 801039c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80103a0:	e720      	b.n	80101e4 <__kernel_rem_pio2+0x29c>
 80103a2:	4620      	mov	r0, r4
 80103a4:	4629      	mov	r1, r5
 80103a6:	f7f0 fb8d 	bl	8000ac4 <__aeabi_d2iz>
 80103aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80103ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80103b0:	e718      	b.n	80101e4 <__kernel_rem_pio2+0x29c>
 80103b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80103b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80103b8:	f7f0 f880 	bl	80004bc <__aeabi_i2d>
 80103bc:	4622      	mov	r2, r4
 80103be:	462b      	mov	r3, r5
 80103c0:	f7f0 f8e6 	bl	8000590 <__aeabi_dmul>
 80103c4:	4652      	mov	r2, sl
 80103c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80103ca:	465b      	mov	r3, fp
 80103cc:	4620      	mov	r0, r4
 80103ce:	4629      	mov	r1, r5
 80103d0:	f7f0 f8de 	bl	8000590 <__aeabi_dmul>
 80103d4:	3e01      	subs	r6, #1
 80103d6:	4604      	mov	r4, r0
 80103d8:	460d      	mov	r5, r1
 80103da:	e716      	b.n	801020a <__kernel_rem_pio2+0x2c2>
 80103dc:	9906      	ldr	r1, [sp, #24]
 80103de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80103e2:	9106      	str	r1, [sp, #24]
 80103e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80103e8:	f7f0 f8d2 	bl	8000590 <__aeabi_dmul>
 80103ec:	4602      	mov	r2, r0
 80103ee:	460b      	mov	r3, r1
 80103f0:	4650      	mov	r0, sl
 80103f2:	4659      	mov	r1, fp
 80103f4:	f7ef ff16 	bl	8000224 <__adddf3>
 80103f8:	3601      	adds	r6, #1
 80103fa:	4682      	mov	sl, r0
 80103fc:	468b      	mov	fp, r1
 80103fe:	9b00      	ldr	r3, [sp, #0]
 8010400:	429e      	cmp	r6, r3
 8010402:	dc01      	bgt.n	8010408 <__kernel_rem_pio2+0x4c0>
 8010404:	42ae      	cmp	r6, r5
 8010406:	dde9      	ble.n	80103dc <__kernel_rem_pio2+0x494>
 8010408:	ab48      	add	r3, sp, #288	@ 0x120
 801040a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801040e:	e9c5 ab00 	strd	sl, fp, [r5]
 8010412:	3c01      	subs	r4, #1
 8010414:	e6fd      	b.n	8010212 <__kernel_rem_pio2+0x2ca>
 8010416:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010418:	2b02      	cmp	r3, #2
 801041a:	dc0b      	bgt.n	8010434 <__kernel_rem_pio2+0x4ec>
 801041c:	2b00      	cmp	r3, #0
 801041e:	dc35      	bgt.n	801048c <__kernel_rem_pio2+0x544>
 8010420:	d059      	beq.n	80104d6 <__kernel_rem_pio2+0x58e>
 8010422:	9b02      	ldr	r3, [sp, #8]
 8010424:	f003 0007 	and.w	r0, r3, #7
 8010428:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801042c:	ecbd 8b02 	vpop	{d8}
 8010430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010434:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010436:	2b03      	cmp	r3, #3
 8010438:	d1f3      	bne.n	8010422 <__kernel_rem_pio2+0x4da>
 801043a:	9b05      	ldr	r3, [sp, #20]
 801043c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010440:	eb0d 0403 	add.w	r4, sp, r3
 8010444:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010448:	4625      	mov	r5, r4
 801044a:	46c2      	mov	sl, r8
 801044c:	f1ba 0f00 	cmp.w	sl, #0
 8010450:	dc69      	bgt.n	8010526 <__kernel_rem_pio2+0x5de>
 8010452:	4645      	mov	r5, r8
 8010454:	2d01      	cmp	r5, #1
 8010456:	f300 8087 	bgt.w	8010568 <__kernel_rem_pio2+0x620>
 801045a:	9c05      	ldr	r4, [sp, #20]
 801045c:	ab48      	add	r3, sp, #288	@ 0x120
 801045e:	441c      	add	r4, r3
 8010460:	2000      	movs	r0, #0
 8010462:	2100      	movs	r1, #0
 8010464:	f1b8 0f01 	cmp.w	r8, #1
 8010468:	f300 809c 	bgt.w	80105a4 <__kernel_rem_pio2+0x65c>
 801046c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010470:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8010474:	f1b9 0f00 	cmp.w	r9, #0
 8010478:	f040 80a6 	bne.w	80105c8 <__kernel_rem_pio2+0x680>
 801047c:	9b04      	ldr	r3, [sp, #16]
 801047e:	e9c3 5600 	strd	r5, r6, [r3]
 8010482:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010486:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801048a:	e7ca      	b.n	8010422 <__kernel_rem_pio2+0x4da>
 801048c:	9d05      	ldr	r5, [sp, #20]
 801048e:	ab48      	add	r3, sp, #288	@ 0x120
 8010490:	441d      	add	r5, r3
 8010492:	4644      	mov	r4, r8
 8010494:	2000      	movs	r0, #0
 8010496:	2100      	movs	r1, #0
 8010498:	2c00      	cmp	r4, #0
 801049a:	da35      	bge.n	8010508 <__kernel_rem_pio2+0x5c0>
 801049c:	f1b9 0f00 	cmp.w	r9, #0
 80104a0:	d038      	beq.n	8010514 <__kernel_rem_pio2+0x5cc>
 80104a2:	4602      	mov	r2, r0
 80104a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104a8:	9c04      	ldr	r4, [sp, #16]
 80104aa:	e9c4 2300 	strd	r2, r3, [r4]
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80104b6:	f7ef feb3 	bl	8000220 <__aeabi_dsub>
 80104ba:	ad4a      	add	r5, sp, #296	@ 0x128
 80104bc:	2401      	movs	r4, #1
 80104be:	45a0      	cmp	r8, r4
 80104c0:	da2b      	bge.n	801051a <__kernel_rem_pio2+0x5d2>
 80104c2:	f1b9 0f00 	cmp.w	r9, #0
 80104c6:	d002      	beq.n	80104ce <__kernel_rem_pio2+0x586>
 80104c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104cc:	4619      	mov	r1, r3
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80104d4:	e7a5      	b.n	8010422 <__kernel_rem_pio2+0x4da>
 80104d6:	9c05      	ldr	r4, [sp, #20]
 80104d8:	ab48      	add	r3, sp, #288	@ 0x120
 80104da:	441c      	add	r4, r3
 80104dc:	2000      	movs	r0, #0
 80104de:	2100      	movs	r1, #0
 80104e0:	f1b8 0f00 	cmp.w	r8, #0
 80104e4:	da09      	bge.n	80104fa <__kernel_rem_pio2+0x5b2>
 80104e6:	f1b9 0f00 	cmp.w	r9, #0
 80104ea:	d002      	beq.n	80104f2 <__kernel_rem_pio2+0x5aa>
 80104ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104f0:	4619      	mov	r1, r3
 80104f2:	9b04      	ldr	r3, [sp, #16]
 80104f4:	e9c3 0100 	strd	r0, r1, [r3]
 80104f8:	e793      	b.n	8010422 <__kernel_rem_pio2+0x4da>
 80104fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80104fe:	f7ef fe91 	bl	8000224 <__adddf3>
 8010502:	f108 38ff 	add.w	r8, r8, #4294967295
 8010506:	e7eb      	b.n	80104e0 <__kernel_rem_pio2+0x598>
 8010508:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801050c:	f7ef fe8a 	bl	8000224 <__adddf3>
 8010510:	3c01      	subs	r4, #1
 8010512:	e7c1      	b.n	8010498 <__kernel_rem_pio2+0x550>
 8010514:	4602      	mov	r2, r0
 8010516:	460b      	mov	r3, r1
 8010518:	e7c6      	b.n	80104a8 <__kernel_rem_pio2+0x560>
 801051a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801051e:	f7ef fe81 	bl	8000224 <__adddf3>
 8010522:	3401      	adds	r4, #1
 8010524:	e7cb      	b.n	80104be <__kernel_rem_pio2+0x576>
 8010526:	ed35 7b02 	vldmdb	r5!, {d7}
 801052a:	ed8d 7b00 	vstr	d7, [sp]
 801052e:	ed95 7b02 	vldr	d7, [r5, #8]
 8010532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010536:	ec53 2b17 	vmov	r2, r3, d7
 801053a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801053e:	f7ef fe71 	bl	8000224 <__adddf3>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	4606      	mov	r6, r0
 8010548:	460f      	mov	r7, r1
 801054a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801054e:	f7ef fe67 	bl	8000220 <__aeabi_dsub>
 8010552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010556:	f7ef fe65 	bl	8000224 <__adddf3>
 801055a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801055e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010562:	e9c5 6700 	strd	r6, r7, [r5]
 8010566:	e771      	b.n	801044c <__kernel_rem_pio2+0x504>
 8010568:	ed34 7b02 	vldmdb	r4!, {d7}
 801056c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010570:	ec51 0b17 	vmov	r0, r1, d7
 8010574:	4652      	mov	r2, sl
 8010576:	465b      	mov	r3, fp
 8010578:	ed8d 7b00 	vstr	d7, [sp]
 801057c:	f7ef fe52 	bl	8000224 <__adddf3>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4606      	mov	r6, r0
 8010586:	460f      	mov	r7, r1
 8010588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801058c:	f7ef fe48 	bl	8000220 <__aeabi_dsub>
 8010590:	4652      	mov	r2, sl
 8010592:	465b      	mov	r3, fp
 8010594:	f7ef fe46 	bl	8000224 <__adddf3>
 8010598:	3d01      	subs	r5, #1
 801059a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801059e:	e9c4 6700 	strd	r6, r7, [r4]
 80105a2:	e757      	b.n	8010454 <__kernel_rem_pio2+0x50c>
 80105a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80105a8:	f7ef fe3c 	bl	8000224 <__adddf3>
 80105ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80105b0:	e758      	b.n	8010464 <__kernel_rem_pio2+0x51c>
 80105b2:	bf00      	nop
 80105b4:	f3af 8000 	nop.w
	...
 80105c0:	41700000 	.word	0x41700000
 80105c4:	3e700000 	.word	0x3e700000
 80105c8:	9b04      	ldr	r3, [sp, #16]
 80105ca:	9a04      	ldr	r2, [sp, #16]
 80105cc:	601d      	str	r5, [r3, #0]
 80105ce:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80105d2:	605c      	str	r4, [r3, #4]
 80105d4:	609f      	str	r7, [r3, #8]
 80105d6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80105da:	60d3      	str	r3, [r2, #12]
 80105dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80105e0:	6110      	str	r0, [r2, #16]
 80105e2:	6153      	str	r3, [r2, #20]
 80105e4:	e71d      	b.n	8010422 <__kernel_rem_pio2+0x4da>
 80105e6:	bf00      	nop

080105e8 <__kernel_rem_pio2f>:
 80105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ec:	ed2d 8b04 	vpush	{d8-d9}
 80105f0:	b0d9      	sub	sp, #356	@ 0x164
 80105f2:	4690      	mov	r8, r2
 80105f4:	9001      	str	r0, [sp, #4]
 80105f6:	4ab6      	ldr	r2, [pc, #728]	@ (80108d0 <__kernel_rem_pio2f+0x2e8>)
 80105f8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80105fa:	f118 0f04 	cmn.w	r8, #4
 80105fe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010602:	460f      	mov	r7, r1
 8010604:	f103 3bff 	add.w	fp, r3, #4294967295
 8010608:	db26      	blt.n	8010658 <__kernel_rem_pio2f+0x70>
 801060a:	f1b8 0203 	subs.w	r2, r8, #3
 801060e:	bf48      	it	mi
 8010610:	f108 0204 	addmi.w	r2, r8, #4
 8010614:	10d2      	asrs	r2, r2, #3
 8010616:	1c55      	adds	r5, r2, #1
 8010618:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801061a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 801061e:	00e8      	lsls	r0, r5, #3
 8010620:	eba2 060b 	sub.w	r6, r2, fp
 8010624:	9002      	str	r0, [sp, #8]
 8010626:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801062a:	eb0a 0c0b 	add.w	ip, sl, fp
 801062e:	ac1c      	add	r4, sp, #112	@ 0x70
 8010630:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010634:	2000      	movs	r0, #0
 8010636:	4560      	cmp	r0, ip
 8010638:	dd10      	ble.n	801065c <__kernel_rem_pio2f+0x74>
 801063a:	a91c      	add	r1, sp, #112	@ 0x70
 801063c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010640:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010644:	2600      	movs	r6, #0
 8010646:	4556      	cmp	r6, sl
 8010648:	dc24      	bgt.n	8010694 <__kernel_rem_pio2f+0xac>
 801064a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801064e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 8010652:	4684      	mov	ip, r0
 8010654:	2400      	movs	r4, #0
 8010656:	e016      	b.n	8010686 <__kernel_rem_pio2f+0x9e>
 8010658:	2200      	movs	r2, #0
 801065a:	e7dc      	b.n	8010616 <__kernel_rem_pio2f+0x2e>
 801065c:	42c6      	cmn	r6, r0
 801065e:	bf5d      	ittte	pl
 8010660:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010664:	ee07 1a90 	vmovpl	s15, r1
 8010668:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801066c:	eef0 7a47 	vmovmi.f32	s15, s14
 8010670:	ece4 7a01 	vstmia	r4!, {s15}
 8010674:	3001      	adds	r0, #1
 8010676:	e7de      	b.n	8010636 <__kernel_rem_pio2f+0x4e>
 8010678:	ecfe 6a01 	vldmia	lr!, {s13}
 801067c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010680:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010684:	3401      	adds	r4, #1
 8010686:	455c      	cmp	r4, fp
 8010688:	ddf6      	ble.n	8010678 <__kernel_rem_pio2f+0x90>
 801068a:	ece9 7a01 	vstmia	r9!, {s15}
 801068e:	3601      	adds	r6, #1
 8010690:	3004      	adds	r0, #4
 8010692:	e7d8      	b.n	8010646 <__kernel_rem_pio2f+0x5e>
 8010694:	a908      	add	r1, sp, #32
 8010696:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801069a:	9104      	str	r1, [sp, #16]
 801069c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801069e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80108dc <__kernel_rem_pio2f+0x2f4>
 80106a2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80108d8 <__kernel_rem_pio2f+0x2f0>
 80106a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80106aa:	9203      	str	r2, [sp, #12]
 80106ac:	4654      	mov	r4, sl
 80106ae:	00a2      	lsls	r2, r4, #2
 80106b0:	9205      	str	r2, [sp, #20]
 80106b2:	aa58      	add	r2, sp, #352	@ 0x160
 80106b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80106b8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80106bc:	a944      	add	r1, sp, #272	@ 0x110
 80106be:	aa08      	add	r2, sp, #32
 80106c0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80106c4:	4694      	mov	ip, r2
 80106c6:	4626      	mov	r6, r4
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	dc4c      	bgt.n	8010766 <__kernel_rem_pio2f+0x17e>
 80106cc:	4628      	mov	r0, r5
 80106ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106d2:	f7ff fbd3 	bl	800fe7c <scalbnf>
 80106d6:	eeb0 8a40 	vmov.f32	s16, s0
 80106da:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80106de:	ee28 0a00 	vmul.f32	s0, s16, s0
 80106e2:	f000 fa65 	bl	8010bb0 <floorf>
 80106e6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80106ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 80106ee:	2d00      	cmp	r5, #0
 80106f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80106f8:	ee17 9a90 	vmov	r9, s15
 80106fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010700:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010704:	dd41      	ble.n	801078a <__kernel_rem_pio2f+0x1a2>
 8010706:	f104 3cff 	add.w	ip, r4, #4294967295
 801070a:	a908      	add	r1, sp, #32
 801070c:	f1c5 0e08 	rsb	lr, r5, #8
 8010710:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010714:	fa46 f00e 	asr.w	r0, r6, lr
 8010718:	4481      	add	r9, r0
 801071a:	fa00 f00e 	lsl.w	r0, r0, lr
 801071e:	1a36      	subs	r6, r6, r0
 8010720:	f1c5 0007 	rsb	r0, r5, #7
 8010724:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010728:	4106      	asrs	r6, r0
 801072a:	2e00      	cmp	r6, #0
 801072c:	dd3c      	ble.n	80107a8 <__kernel_rem_pio2f+0x1c0>
 801072e:	f04f 0e00 	mov.w	lr, #0
 8010732:	f109 0901 	add.w	r9, r9, #1
 8010736:	4670      	mov	r0, lr
 8010738:	4574      	cmp	r4, lr
 801073a:	dc68      	bgt.n	801080e <__kernel_rem_pio2f+0x226>
 801073c:	2d00      	cmp	r5, #0
 801073e:	dd03      	ble.n	8010748 <__kernel_rem_pio2f+0x160>
 8010740:	2d01      	cmp	r5, #1
 8010742:	d074      	beq.n	801082e <__kernel_rem_pio2f+0x246>
 8010744:	2d02      	cmp	r5, #2
 8010746:	d07d      	beq.n	8010844 <__kernel_rem_pio2f+0x25c>
 8010748:	2e02      	cmp	r6, #2
 801074a:	d12d      	bne.n	80107a8 <__kernel_rem_pio2f+0x1c0>
 801074c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010750:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010754:	b340      	cbz	r0, 80107a8 <__kernel_rem_pio2f+0x1c0>
 8010756:	4628      	mov	r0, r5
 8010758:	9306      	str	r3, [sp, #24]
 801075a:	f7ff fb8f 	bl	800fe7c <scalbnf>
 801075e:	9b06      	ldr	r3, [sp, #24]
 8010760:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010764:	e020      	b.n	80107a8 <__kernel_rem_pio2f+0x1c0>
 8010766:	ee60 7a28 	vmul.f32	s15, s0, s17
 801076a:	3e01      	subs	r6, #1
 801076c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010774:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010778:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801077c:	ecac 0a01 	vstmia	ip!, {s0}
 8010780:	ed30 0a01 	vldmdb	r0!, {s0}
 8010784:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010788:	e79e      	b.n	80106c8 <__kernel_rem_pio2f+0xe0>
 801078a:	d105      	bne.n	8010798 <__kernel_rem_pio2f+0x1b0>
 801078c:	1e60      	subs	r0, r4, #1
 801078e:	a908      	add	r1, sp, #32
 8010790:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010794:	11f6      	asrs	r6, r6, #7
 8010796:	e7c8      	b.n	801072a <__kernel_rem_pio2f+0x142>
 8010798:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801079c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80107a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a4:	da31      	bge.n	801080a <__kernel_rem_pio2f+0x222>
 80107a6:	2600      	movs	r6, #0
 80107a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80107ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b0:	f040 8098 	bne.w	80108e4 <__kernel_rem_pio2f+0x2fc>
 80107b4:	1e60      	subs	r0, r4, #1
 80107b6:	2200      	movs	r2, #0
 80107b8:	4550      	cmp	r0, sl
 80107ba:	da4b      	bge.n	8010854 <__kernel_rem_pio2f+0x26c>
 80107bc:	2a00      	cmp	r2, #0
 80107be:	d065      	beq.n	801088c <__kernel_rem_pio2f+0x2a4>
 80107c0:	3c01      	subs	r4, #1
 80107c2:	ab08      	add	r3, sp, #32
 80107c4:	3d08      	subs	r5, #8
 80107c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d0f8      	beq.n	80107c0 <__kernel_rem_pio2f+0x1d8>
 80107ce:	4628      	mov	r0, r5
 80107d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80107d4:	f7ff fb52 	bl	800fe7c <scalbnf>
 80107d8:	1c63      	adds	r3, r4, #1
 80107da:	aa44      	add	r2, sp, #272	@ 0x110
 80107dc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80108dc <__kernel_rem_pio2f+0x2f4>
 80107e0:	0099      	lsls	r1, r3, #2
 80107e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80107e6:	4623      	mov	r3, r4
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f280 80a9 	bge.w	8010940 <__kernel_rem_pio2f+0x358>
 80107ee:	4623      	mov	r3, r4
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f2c0 80c7 	blt.w	8010984 <__kernel_rem_pio2f+0x39c>
 80107f6:	aa44      	add	r2, sp, #272	@ 0x110
 80107f8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80107fc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80108d4 <__kernel_rem_pio2f+0x2ec>
 8010800:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 8010804:	2000      	movs	r0, #0
 8010806:	1ae2      	subs	r2, r4, r3
 8010808:	e0b1      	b.n	801096e <__kernel_rem_pio2f+0x386>
 801080a:	2602      	movs	r6, #2
 801080c:	e78f      	b.n	801072e <__kernel_rem_pio2f+0x146>
 801080e:	f852 1b04 	ldr.w	r1, [r2], #4
 8010812:	b948      	cbnz	r0, 8010828 <__kernel_rem_pio2f+0x240>
 8010814:	b121      	cbz	r1, 8010820 <__kernel_rem_pio2f+0x238>
 8010816:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801081a:	f842 1c04 	str.w	r1, [r2, #-4]
 801081e:	2101      	movs	r1, #1
 8010820:	f10e 0e01 	add.w	lr, lr, #1
 8010824:	4608      	mov	r0, r1
 8010826:	e787      	b.n	8010738 <__kernel_rem_pio2f+0x150>
 8010828:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801082c:	e7f5      	b.n	801081a <__kernel_rem_pio2f+0x232>
 801082e:	f104 3cff 	add.w	ip, r4, #4294967295
 8010832:	aa08      	add	r2, sp, #32
 8010834:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801083c:	a908      	add	r1, sp, #32
 801083e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010842:	e781      	b.n	8010748 <__kernel_rem_pio2f+0x160>
 8010844:	f104 3cff 	add.w	ip, r4, #4294967295
 8010848:	aa08      	add	r2, sp, #32
 801084a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801084e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010852:	e7f3      	b.n	801083c <__kernel_rem_pio2f+0x254>
 8010854:	a908      	add	r1, sp, #32
 8010856:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801085a:	3801      	subs	r0, #1
 801085c:	430a      	orrs	r2, r1
 801085e:	e7ab      	b.n	80107b8 <__kernel_rem_pio2f+0x1d0>
 8010860:	3201      	adds	r2, #1
 8010862:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010866:	2e00      	cmp	r6, #0
 8010868:	d0fa      	beq.n	8010860 <__kernel_rem_pio2f+0x278>
 801086a:	9905      	ldr	r1, [sp, #20]
 801086c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010870:	eb0d 0001 	add.w	r0, sp, r1
 8010874:	18e6      	adds	r6, r4, r3
 8010876:	a91c      	add	r1, sp, #112	@ 0x70
 8010878:	f104 0c01 	add.w	ip, r4, #1
 801087c:	384c      	subs	r0, #76	@ 0x4c
 801087e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010882:	4422      	add	r2, r4
 8010884:	4562      	cmp	r2, ip
 8010886:	da04      	bge.n	8010892 <__kernel_rem_pio2f+0x2aa>
 8010888:	4614      	mov	r4, r2
 801088a:	e710      	b.n	80106ae <__kernel_rem_pio2f+0xc6>
 801088c:	9804      	ldr	r0, [sp, #16]
 801088e:	2201      	movs	r2, #1
 8010890:	e7e7      	b.n	8010862 <__kernel_rem_pio2f+0x27a>
 8010892:	9903      	ldr	r1, [sp, #12]
 8010894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010898:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801089c:	9105      	str	r1, [sp, #20]
 801089e:	ee07 1a90 	vmov	s15, r1
 80108a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108a6:	2400      	movs	r4, #0
 80108a8:	ece6 7a01 	vstmia	r6!, {s15}
 80108ac:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 80108b0:	46b1      	mov	r9, r6
 80108b2:	455c      	cmp	r4, fp
 80108b4:	dd04      	ble.n	80108c0 <__kernel_rem_pio2f+0x2d8>
 80108b6:	ece0 7a01 	vstmia	r0!, {s15}
 80108ba:	f10c 0c01 	add.w	ip, ip, #1
 80108be:	e7e1      	b.n	8010884 <__kernel_rem_pio2f+0x29c>
 80108c0:	ecfe 6a01 	vldmia	lr!, {s13}
 80108c4:	ed39 7a01 	vldmdb	r9!, {s14}
 80108c8:	3401      	adds	r4, #1
 80108ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80108ce:	e7f0      	b.n	80108b2 <__kernel_rem_pio2f+0x2ca>
 80108d0:	08011264 	.word	0x08011264
 80108d4:	08011238 	.word	0x08011238
 80108d8:	43800000 	.word	0x43800000
 80108dc:	3b800000 	.word	0x3b800000
 80108e0:	00000000 	.word	0x00000000
 80108e4:	9b02      	ldr	r3, [sp, #8]
 80108e6:	eeb0 0a48 	vmov.f32	s0, s16
 80108ea:	eba3 0008 	sub.w	r0, r3, r8
 80108ee:	f7ff fac5 	bl	800fe7c <scalbnf>
 80108f2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80108d8 <__kernel_rem_pio2f+0x2f0>
 80108f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80108fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fe:	db19      	blt.n	8010934 <__kernel_rem_pio2f+0x34c>
 8010900:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80108dc <__kernel_rem_pio2f+0x2f4>
 8010904:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010908:	aa08      	add	r2, sp, #32
 801090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801090e:	3508      	adds	r5, #8
 8010910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010914:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801091c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010920:	ee10 3a10 	vmov	r3, s0
 8010924:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010928:	ee17 3a90 	vmov	r3, s15
 801092c:	3401      	adds	r4, #1
 801092e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010932:	e74c      	b.n	80107ce <__kernel_rem_pio2f+0x1e6>
 8010934:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010938:	aa08      	add	r2, sp, #32
 801093a:	ee10 3a10 	vmov	r3, s0
 801093e:	e7f6      	b.n	801092e <__kernel_rem_pio2f+0x346>
 8010940:	a808      	add	r0, sp, #32
 8010942:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010946:	9001      	str	r0, [sp, #4]
 8010948:	ee07 0a90 	vmov	s15, r0
 801094c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010950:	3b01      	subs	r3, #1
 8010952:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010956:	ee20 0a07 	vmul.f32	s0, s0, s14
 801095a:	ed62 7a01 	vstmdb	r2!, {s15}
 801095e:	e743      	b.n	80107e8 <__kernel_rem_pio2f+0x200>
 8010960:	ecfc 6a01 	vldmia	ip!, {s13}
 8010964:	ecb5 7a01 	vldmia	r5!, {s14}
 8010968:	eee6 7a87 	vfma.f32	s15, s13, s14
 801096c:	3001      	adds	r0, #1
 801096e:	4550      	cmp	r0, sl
 8010970:	dc01      	bgt.n	8010976 <__kernel_rem_pio2f+0x38e>
 8010972:	4290      	cmp	r0, r2
 8010974:	ddf4      	ble.n	8010960 <__kernel_rem_pio2f+0x378>
 8010976:	a858      	add	r0, sp, #352	@ 0x160
 8010978:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801097c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010980:	3b01      	subs	r3, #1
 8010982:	e735      	b.n	80107f0 <__kernel_rem_pio2f+0x208>
 8010984:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010986:	2b02      	cmp	r3, #2
 8010988:	dc09      	bgt.n	801099e <__kernel_rem_pio2f+0x3b6>
 801098a:	2b00      	cmp	r3, #0
 801098c:	dc27      	bgt.n	80109de <__kernel_rem_pio2f+0x3f6>
 801098e:	d040      	beq.n	8010a12 <__kernel_rem_pio2f+0x42a>
 8010990:	f009 0007 	and.w	r0, r9, #7
 8010994:	b059      	add	sp, #356	@ 0x164
 8010996:	ecbd 8b04 	vpop	{d8-d9}
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	d1f5      	bne.n	8010990 <__kernel_rem_pio2f+0x3a8>
 80109a4:	aa30      	add	r2, sp, #192	@ 0xc0
 80109a6:	1f0b      	subs	r3, r1, #4
 80109a8:	4413      	add	r3, r2
 80109aa:	461a      	mov	r2, r3
 80109ac:	4620      	mov	r0, r4
 80109ae:	2800      	cmp	r0, #0
 80109b0:	dc50      	bgt.n	8010a54 <__kernel_rem_pio2f+0x46c>
 80109b2:	4622      	mov	r2, r4
 80109b4:	2a01      	cmp	r2, #1
 80109b6:	dc5d      	bgt.n	8010a74 <__kernel_rem_pio2f+0x48c>
 80109b8:	ab30      	add	r3, sp, #192	@ 0xc0
 80109ba:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 80109be:	440b      	add	r3, r1
 80109c0:	2c01      	cmp	r4, #1
 80109c2:	dc67      	bgt.n	8010a94 <__kernel_rem_pio2f+0x4ac>
 80109c4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80109c8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80109cc:	2e00      	cmp	r6, #0
 80109ce:	d167      	bne.n	8010aa0 <__kernel_rem_pio2f+0x4b8>
 80109d0:	edc7 6a00 	vstr	s13, [r7]
 80109d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80109d8:	edc7 7a02 	vstr	s15, [r7, #8]
 80109dc:	e7d8      	b.n	8010990 <__kernel_rem_pio2f+0x3a8>
 80109de:	ab30      	add	r3, sp, #192	@ 0xc0
 80109e0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 80109e4:	440b      	add	r3, r1
 80109e6:	4622      	mov	r2, r4
 80109e8:	2a00      	cmp	r2, #0
 80109ea:	da24      	bge.n	8010a36 <__kernel_rem_pio2f+0x44e>
 80109ec:	b34e      	cbz	r6, 8010a42 <__kernel_rem_pio2f+0x45a>
 80109ee:	eef1 7a47 	vneg.f32	s15, s14
 80109f2:	edc7 7a00 	vstr	s15, [r7]
 80109f6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80109fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109fe:	aa31      	add	r2, sp, #196	@ 0xc4
 8010a00:	2301      	movs	r3, #1
 8010a02:	429c      	cmp	r4, r3
 8010a04:	da20      	bge.n	8010a48 <__kernel_rem_pio2f+0x460>
 8010a06:	b10e      	cbz	r6, 8010a0c <__kernel_rem_pio2f+0x424>
 8010a08:	eef1 7a67 	vneg.f32	s15, s15
 8010a0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8010a10:	e7be      	b.n	8010990 <__kernel_rem_pio2f+0x3a8>
 8010a12:	ab30      	add	r3, sp, #192	@ 0xc0
 8010a14:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80108e0 <__kernel_rem_pio2f+0x2f8>
 8010a18:	440b      	add	r3, r1
 8010a1a:	2c00      	cmp	r4, #0
 8010a1c:	da05      	bge.n	8010a2a <__kernel_rem_pio2f+0x442>
 8010a1e:	b10e      	cbz	r6, 8010a24 <__kernel_rem_pio2f+0x43c>
 8010a20:	eef1 7a67 	vneg.f32	s15, s15
 8010a24:	edc7 7a00 	vstr	s15, [r7]
 8010a28:	e7b2      	b.n	8010990 <__kernel_rem_pio2f+0x3a8>
 8010a2a:	ed33 7a01 	vldmdb	r3!, {s14}
 8010a2e:	3c01      	subs	r4, #1
 8010a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a34:	e7f1      	b.n	8010a1a <__kernel_rem_pio2f+0x432>
 8010a36:	ed73 7a01 	vldmdb	r3!, {s15}
 8010a3a:	3a01      	subs	r2, #1
 8010a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a40:	e7d2      	b.n	80109e8 <__kernel_rem_pio2f+0x400>
 8010a42:	eef0 7a47 	vmov.f32	s15, s14
 8010a46:	e7d4      	b.n	80109f2 <__kernel_rem_pio2f+0x40a>
 8010a48:	ecb2 7a01 	vldmia	r2!, {s14}
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a52:	e7d6      	b.n	8010a02 <__kernel_rem_pio2f+0x41a>
 8010a54:	ed72 7a01 	vldmdb	r2!, {s15}
 8010a58:	edd2 6a01 	vldr	s13, [r2, #4]
 8010a5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010a60:	3801      	subs	r0, #1
 8010a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a66:	ed82 7a00 	vstr	s14, [r2]
 8010a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a6e:	edc2 7a01 	vstr	s15, [r2, #4]
 8010a72:	e79c      	b.n	80109ae <__kernel_rem_pio2f+0x3c6>
 8010a74:	ed73 7a01 	vldmdb	r3!, {s15}
 8010a78:	edd3 6a01 	vldr	s13, [r3, #4]
 8010a7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010a80:	3a01      	subs	r2, #1
 8010a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a86:	ed83 7a00 	vstr	s14, [r3]
 8010a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a8e:	edc3 7a01 	vstr	s15, [r3, #4]
 8010a92:	e78f      	b.n	80109b4 <__kernel_rem_pio2f+0x3cc>
 8010a94:	ed33 7a01 	vldmdb	r3!, {s14}
 8010a98:	3c01      	subs	r4, #1
 8010a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a9e:	e78f      	b.n	80109c0 <__kernel_rem_pio2f+0x3d8>
 8010aa0:	eef1 6a66 	vneg.f32	s13, s13
 8010aa4:	eeb1 7a47 	vneg.f32	s14, s14
 8010aa8:	edc7 6a00 	vstr	s13, [r7]
 8010aac:	ed87 7a01 	vstr	s14, [r7, #4]
 8010ab0:	eef1 7a67 	vneg.f32	s15, s15
 8010ab4:	e790      	b.n	80109d8 <__kernel_rem_pio2f+0x3f0>
 8010ab6:	bf00      	nop

08010ab8 <floor>:
 8010ab8:	ec51 0b10 	vmov	r0, r1, d0
 8010abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010ac8:	2e13      	cmp	r6, #19
 8010aca:	460c      	mov	r4, r1
 8010acc:	4605      	mov	r5, r0
 8010ace:	4680      	mov	r8, r0
 8010ad0:	dc34      	bgt.n	8010b3c <floor+0x84>
 8010ad2:	2e00      	cmp	r6, #0
 8010ad4:	da17      	bge.n	8010b06 <floor+0x4e>
 8010ad6:	a332      	add	r3, pc, #200	@ (adr r3, 8010ba0 <floor+0xe8>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	f7ef fba2 	bl	8000224 <__adddf3>
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f7ef ffe4 	bl	8000ab0 <__aeabi_dcmpgt>
 8010ae8:	b150      	cbz	r0, 8010b00 <floor+0x48>
 8010aea:	2c00      	cmp	r4, #0
 8010aec:	da55      	bge.n	8010b9a <floor+0xe2>
 8010aee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010af2:	432c      	orrs	r4, r5
 8010af4:	2500      	movs	r5, #0
 8010af6:	42ac      	cmp	r4, r5
 8010af8:	4c2b      	ldr	r4, [pc, #172]	@ (8010ba8 <floor+0xf0>)
 8010afa:	bf08      	it	eq
 8010afc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010b00:	4621      	mov	r1, r4
 8010b02:	4628      	mov	r0, r5
 8010b04:	e023      	b.n	8010b4e <floor+0x96>
 8010b06:	4f29      	ldr	r7, [pc, #164]	@ (8010bac <floor+0xf4>)
 8010b08:	4137      	asrs	r7, r6
 8010b0a:	ea01 0307 	and.w	r3, r1, r7
 8010b0e:	4303      	orrs	r3, r0
 8010b10:	d01d      	beq.n	8010b4e <floor+0x96>
 8010b12:	a323      	add	r3, pc, #140	@ (adr r3, 8010ba0 <floor+0xe8>)
 8010b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b18:	f7ef fb84 	bl	8000224 <__adddf3>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	2300      	movs	r3, #0
 8010b20:	f7ef ffc6 	bl	8000ab0 <__aeabi_dcmpgt>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	d0eb      	beq.n	8010b00 <floor+0x48>
 8010b28:	2c00      	cmp	r4, #0
 8010b2a:	bfbe      	ittt	lt
 8010b2c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010b30:	4133      	asrlt	r3, r6
 8010b32:	18e4      	addlt	r4, r4, r3
 8010b34:	ea24 0407 	bic.w	r4, r4, r7
 8010b38:	2500      	movs	r5, #0
 8010b3a:	e7e1      	b.n	8010b00 <floor+0x48>
 8010b3c:	2e33      	cmp	r6, #51	@ 0x33
 8010b3e:	dd0a      	ble.n	8010b56 <floor+0x9e>
 8010b40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010b44:	d103      	bne.n	8010b4e <floor+0x96>
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	f7ef fb6b 	bl	8000224 <__adddf3>
 8010b4e:	ec41 0b10 	vmov	d0, r0, r1
 8010b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b56:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8010b5e:	40df      	lsrs	r7, r3
 8010b60:	4207      	tst	r7, r0
 8010b62:	d0f4      	beq.n	8010b4e <floor+0x96>
 8010b64:	a30e      	add	r3, pc, #56	@ (adr r3, 8010ba0 <floor+0xe8>)
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	f7ef fb5b 	bl	8000224 <__adddf3>
 8010b6e:	2200      	movs	r2, #0
 8010b70:	2300      	movs	r3, #0
 8010b72:	f7ef ff9d 	bl	8000ab0 <__aeabi_dcmpgt>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d0c2      	beq.n	8010b00 <floor+0x48>
 8010b7a:	2c00      	cmp	r4, #0
 8010b7c:	da0a      	bge.n	8010b94 <floor+0xdc>
 8010b7e:	2e14      	cmp	r6, #20
 8010b80:	d101      	bne.n	8010b86 <floor+0xce>
 8010b82:	3401      	adds	r4, #1
 8010b84:	e006      	b.n	8010b94 <floor+0xdc>
 8010b86:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	40b3      	lsls	r3, r6
 8010b8e:	441d      	add	r5, r3
 8010b90:	4545      	cmp	r5, r8
 8010b92:	d3f6      	bcc.n	8010b82 <floor+0xca>
 8010b94:	ea25 0507 	bic.w	r5, r5, r7
 8010b98:	e7b2      	b.n	8010b00 <floor+0x48>
 8010b9a:	2500      	movs	r5, #0
 8010b9c:	462c      	mov	r4, r5
 8010b9e:	e7af      	b.n	8010b00 <floor+0x48>
 8010ba0:	8800759c 	.word	0x8800759c
 8010ba4:	7e37e43c 	.word	0x7e37e43c
 8010ba8:	bff00000 	.word	0xbff00000
 8010bac:	000fffff 	.word	0x000fffff

08010bb0 <floorf>:
 8010bb0:	ee10 3a10 	vmov	r3, s0
 8010bb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010bb8:	3a7f      	subs	r2, #127	@ 0x7f
 8010bba:	2a16      	cmp	r2, #22
 8010bbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010bc0:	dc2b      	bgt.n	8010c1a <floorf+0x6a>
 8010bc2:	2a00      	cmp	r2, #0
 8010bc4:	da12      	bge.n	8010bec <floorf+0x3c>
 8010bc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010c2c <floorf+0x7c>
 8010bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd6:	dd06      	ble.n	8010be6 <floorf+0x36>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	da24      	bge.n	8010c26 <floorf+0x76>
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	4b14      	ldr	r3, [pc, #80]	@ (8010c30 <floorf+0x80>)
 8010be0:	bf08      	it	eq
 8010be2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010be6:	ee00 3a10 	vmov	s0, r3
 8010bea:	4770      	bx	lr
 8010bec:	4911      	ldr	r1, [pc, #68]	@ (8010c34 <floorf+0x84>)
 8010bee:	4111      	asrs	r1, r2
 8010bf0:	420b      	tst	r3, r1
 8010bf2:	d0fa      	beq.n	8010bea <floorf+0x3a>
 8010bf4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010c2c <floorf+0x7c>
 8010bf8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c04:	ddef      	ble.n	8010be6 <floorf+0x36>
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	bfbe      	ittt	lt
 8010c0a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010c0e:	fa40 f202 	asrlt.w	r2, r0, r2
 8010c12:	189b      	addlt	r3, r3, r2
 8010c14:	ea23 0301 	bic.w	r3, r3, r1
 8010c18:	e7e5      	b.n	8010be6 <floorf+0x36>
 8010c1a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c1e:	d3e4      	bcc.n	8010bea <floorf+0x3a>
 8010c20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010c24:	4770      	bx	lr
 8010c26:	2300      	movs	r3, #0
 8010c28:	e7dd      	b.n	8010be6 <floorf+0x36>
 8010c2a:	bf00      	nop
 8010c2c:	7149f2ca 	.word	0x7149f2ca
 8010c30:	bf800000 	.word	0xbf800000
 8010c34:	007fffff 	.word	0x007fffff

08010c38 <_init>:
 8010c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3a:	bf00      	nop
 8010c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3e:	bc08      	pop	{r3}
 8010c40:	469e      	mov	lr, r3
 8010c42:	4770      	bx	lr

08010c44 <_fini>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	bf00      	nop
 8010c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c4a:	bc08      	pop	{r3}
 8010c4c:	469e      	mov	lr, r3
 8010c4e:	4770      	bx	lr
