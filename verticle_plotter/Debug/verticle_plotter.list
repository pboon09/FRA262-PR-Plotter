
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c90c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800cae4  0800cae4  0000dae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf34  0800cf34  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cf34  0800cf34  0000df34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf3c  0800cf3c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf3c  0800cf3c  0000df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf40  0800cf40  0000df40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cf44  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  200001d4  0800d118  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f0  0800d118  0000e2f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a698  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005107  00000000  00000000  0003889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  0003d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001517  00000000  00000000  0003f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d363  00000000  00000000  00040a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029115  00000000  00000000  0006dd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001197f7  00000000  00000000  00096e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b067e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000791c  00000000  00000000  001b06c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001b7fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cacc 	.word	0x0800cacc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800cacc 	.word	0x0800cacc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000dfc:	ed97 7a00 	vldr	s14, [r7]
 8000e00:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2205      	movs	r2, #5
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e24:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000e6c <ADC_DMA_Init+0xac>
 8000e28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	e008      	b.n	8000e54 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3f2      	bcc.n	8000e42 <ADC_DMA_Init+0x82>
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	42c80000 	.word	0x42c80000

08000e70 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	217f      	movs	r1, #127	@ 0x7f
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 ffdc 	bl	8005e3c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f004 f8c5 	bl	8005020 <HAL_ADC_Start_DMA>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e012      	b.n	8000ee0 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
        samples++;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3e7      	bcc.n	8000eba <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f08:	e001      	b.n	8000f0e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 8000f0a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8000f20 <ADC_DMA_GetValue+0x80>
}
 8000f0e:	eef0 7a66 	vmov.f32	s15, s13
 8000f12:	eeb0 0a67 	vmov.f32	s0, s15
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	00000000 	.word	0x00000000

08000f24 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f30:	460b      	mov	r3, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000f74 <ADC_DMA_SetCenterPoint+0x50>
 8000f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	42c80000 	.word	0x42c80000

08000f78 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	460b      	mov	r3, r1
 8000f82:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f86:	edc7 0a00 	vstr	s1, [r7]
 8000f8a:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff ff85 	bl	8000ea0 <ADC_DMA_GetValue>
 8000f96:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa8:	eeb0 7ae7 	vabs.f32	s14, s15
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d502      	bpl.n	8000fc2 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fc8:	ed97 2a00 	vldr	s4, [r7]
 8000fcc:	edd7 1a01 	vldr	s3, [r7, #4]
 8000fd0:	eeb0 1a67 	vmov.f32	s2, s15
 8000fd4:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000ff0 <ADC_DMA_GetJoystickValue+0x78>
 8000fd8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fdc:	f000 fa92 	bl	8001504 <mapf>
 8000fe0:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00000000 	.word	0x00000000

08000ff4 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6178      	str	r0, [r7, #20]
 8000ffc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001000:	edc7 0a03 	vstr	s1, [r7, #12]
 8001004:	ed87 1a02 	vstr	s2, [r7, #8]
 8001008:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	619a      	str	r2, [r3, #24]

}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3328      	adds	r3, #40	@ 0x28
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f827 	bl	80020c0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8b3a      	ldrh	r2, [r7, #24]
 800107c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d15f      	bne.n	800116a <MDXX_set_range+0xda>
		if (duty == 0) {
 80010aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d115      	bne.n	80010e4 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3310      	adds	r3, #16
 80010bc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800123c <MDXX_set_range+0x1ac>
 80010c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f923 	bl	8002310 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3328      	adds	r3, #40	@ 0x28
 80010ce:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800123c <MDXX_set_range+0x1ac>
 80010d2:	ed97 0a02 	vldr	s0, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f91a 	bl	8002310 <PWM_write_range>
			mdxx->cmd = 0;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80010e2:	e0a6      	b.n	8001232 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd1a      	ble.n	8001128 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3310      	adds	r3, #16
 80010f6:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800123c <MDXX_set_range+0x1ac>
 80010fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f906 	bl	8002310 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3328      	adds	r3, #40	@ 0x28
 8001108:	edd7 0a01 	vldr	s1, [r7, #4]
 800110c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f8fd 	bl	8002310 <PWM_write_range>
			mdxx->cmd = duty;
 8001116:	edd7 7a01 	vldr	s15, [r7, #4]
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 2a90 	vmov	r2, s15
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001126:	e084      	b.n	8001232 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3310      	adds	r3, #16
 800112c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001240 <MDXX_set_range+0x1b0>
 8001130:	ed97 0a02 	vldr	s0, [r7, #8]
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f8eb 	bl	8002310 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3328      	adds	r3, #40	@ 0x28
 800113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001142:	eef0 7ae7 	vabs.f32	s15, s15
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	ed97 0a02 	vldr	s0, [r7, #8]
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f8de 	bl	8002310 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001154:	edd7 7a01 	vldr	s15, [r7, #4]
 8001158:	eef0 7ae7 	vabs.f32	s15, s15
 800115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001160:	ee17 2a90 	vmov	r2, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001168:	e063      	b.n	8001232 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001170:	2b01      	cmp	r3, #1
 8001172:	d15e      	bne.n	8001232 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001174:	edd7 7a01 	vldr	s15, [r7, #4]
 8001178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	d115      	bne.n	80011ae <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f005 fd9a 	bl	8006cc8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3328      	adds	r3, #40	@ 0x28
 8001198:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800123c <MDXX_set_range+0x1ac>
 800119c:	ed97 0a02 	vldr	s0, [r7, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 f8b5 	bl	8002310 <PWM_write_range>
			mdxx->cmd = 0;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011ac:	e041      	b.n	8001232 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dd1a      	ble.n	80011f2 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f005 fd7d 	bl	8006cc8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3328      	adds	r3, #40	@ 0x28
 80011d2:	edd7 0a01 	vldr	s1, [r7, #4]
 80011d6:	ed97 0a02 	vldr	s0, [r7, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f898 	bl	8002310 <PWM_write_range>
			mdxx->cmd = duty;
 80011e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011f0:	e01f      	b.n	8001232 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	f005 fd62 	bl	8006cc8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3328      	adds	r3, #40	@ 0x28
 8001208:	edd7 7a01 	vldr	s15, [r7, #4]
 800120c:	eef0 7ae7 	vabs.f32	s15, s15
 8001210:	eef0 0a67 	vmov.f32	s1, s15
 8001214:	ed97 0a02 	vldr	s0, [r7, #8]
 8001218:	4618      	mov	r0, r3
 800121a:	f001 f879 	bl	8002310 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800121e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001222:	eef0 7ae7 	vabs.f32	s15, s15
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	00000000 	.word	0x00000000
 8001240:	42c80000 	.word	0x42c80000

08001244 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	ed2d 8b02 	vpush	{d8}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	460b      	mov	r3, r1
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d6:	edc7 0a00 	vstr	s1, [r7]
 80012da:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80012dc:	897b      	ldrh	r3, [r7, #10]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <FIR_init+0x2a>
        numTaps += 1;
 80012e8:	897b      	ldrh	r3, [r7, #10]
 80012ea:	3301      	adds	r3, #1
 80012ec:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	897a      	ldrh	r2, [r7, #10]
 80012f2:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80012fa:	897b      	ldrh	r3, [r7, #10]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f00a fd54 	bl	800bdac <malloc>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4618      	mov	r0, r3
 8001312:	f00a fd4b 	bl	800bdac <malloc>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80e0 	beq.w	80014e8 <FIR_init+0x224>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80db 	beq.w	80014e8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001336:	e00a      	b.n	800134e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001348:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800134a:	3301      	adds	r3, #1
 800134c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800134e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3f0      	bcc.n	8001338 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001356:	edd7 6a01 	vldr	s13, [r7, #4]
 800135a:	ed97 7a00 	vldr	s14, [r7]
 800135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001362:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	b29b      	uxth	r3, r3
 800136c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001372:	e077      	b.n	8001464 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001374:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001378:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137c:	429a      	cmp	r2, r3
 800137e:	d10c      	bne.n	800139a <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001394:	edc3 7a00 	vstr	s15, [r3]
 8001398:	e02c      	b.n	80013f4 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800139a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80013a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013a8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80014f4 <FIR_init+0x230>
 80013ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f00a fe4e 	bl	800c064 <sinf>
 80013c8:	eef0 6a40 	vmov.f32	s13, s0
 80013cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80014f8 <FIR_init+0x234>
 80013dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	ed93 8a00 	vldr	s16, [r3]
 8001404:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80014f4 <FIR_init+0x230>
 8001414:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001418:	897b      	ldrh	r3, [r7, #10]
 800141a:	3b01      	subs	r3, #1
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001428:	eeb0 0a66 	vmov.f32	s0, s13
 800142c:	f00a fdd6 	bl	800bfdc <cosf>
 8001430:	eef0 7a40 	vmov.f32	s15, s0
 8001434:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80014fc <FIR_init+0x238>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001500 <FIR_init+0x23c>
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001454:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001458:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800145c:	b29b      	uxth	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001464:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	429a      	cmp	r2, r3
 800146c:	db82      	blt.n	8001374 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	83fb      	strh	r3, [r7, #30]
 8001478:	e00f      	b.n	800149a <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	8bfb      	ldrh	r3, [r7, #30]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ed97 7a08 	vldr	s14, [r7, #32]
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001494:	8bfb      	ldrh	r3, [r7, #30]
 8001496:	3301      	adds	r3, #1
 8001498:	83fb      	strh	r3, [r7, #30]
 800149a:	8bfa      	ldrh	r2, [r7, #30]
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3eb      	bcc.n	800147a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80014a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d01b      	beq.n	80014e8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	83bb      	strh	r3, [r7, #28]
 80014b4:	e014      	b.n	80014e0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	8bbb      	ldrh	r3, [r7, #28]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	edd3 6a00 	vldr	s13, [r3]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	8bbb      	ldrh	r3, [r7, #28]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80014d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80014da:	8bbb      	ldrh	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	83bb      	strh	r3, [r7, #28]
 80014e0:	8bba      	ldrh	r2, [r7, #28]
 80014e2:	897b      	ldrh	r3, [r7, #10]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3e6      	bcc.n	80014b6 <FIR_init+0x1f2>
            }
        }
    }
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	ecbd 8b02 	vpop	{d8}
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40c90fdb 	.word	0x40c90fdb
 80014f8:	40490fdb 	.word	0x40490fdb
 80014fc:	3eeb851f 	.word	0x3eeb851f
 8001500:	3f0a3d71 	.word	0x3f0a3d71

08001504 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0a05 	vstr	s0, [r7, #20]
 800150e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001512:	ed87 1a03 	vstr	s2, [r7, #12]
 8001516:	edc7 1a02 	vstr	s3, [r7, #8]
 800151a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800151e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001522:	edd7 7a04 	vldr	s15, [r7, #16]
 8001526:	ee77 6a67 	vsub.f32	s13, s14, s15
 800152a:	ed97 7a03 	vldr	s14, [r7, #12]
 800152e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800153e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001542:	edd7 7a02 	vldr	s15, [r7, #8]
 8001546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154a:	edd7 7a07 	vldr	s15, [r7, #28]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	ed97 7a02 	vldr	s14, [r7, #8]
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	ee07 3a90 	vmov	s15, r3
}
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <modbus_1t5_Timeout+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <modbus_1t5_Timeout+0x3c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <modbus_1t5_Timeout+0x3c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <modbus_1t5_Timeout+0x3c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200001f0 	.word	0x200001f0

080015b4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <modbus_3t5_Timeout+0x1c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	755a      	strb	r2, [r3, #21]

}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	200001f0 	.word	0x200001f0

080015d4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f009 fa1d 	bl	800aa1c <HAL_UART_GetError>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d101      	bne.n	80015ec <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80015e8:	f7ff ffc4 	bl	8001574 <modbus_1t5_Timeout>

	}
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <Modbus_init+0xc4>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <Modbus_init+0xc4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <Modbus_init+0xc4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <Modbus_init+0xc4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <Modbus_init+0xc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	7e3a      	ldrb	r2, [r7, #24]
 8001626:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <Modbus_init+0xc4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <Modbus_init+0xc8>)
 8001636:	210e      	movs	r1, #14
 8001638:	4618      	mov	r0, r3
 800163a:	f007 fc9d 	bl	8008f78 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2110      	movs	r1, #16
 8001644:	4618      	mov	r0, r3
 8001646:	f009 f993 	bl	800a970 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4618      	mov	r0, r3
 8001650:	f009 f9aa 	bl	800a9a8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <Modbus_init+0xcc>)
 800165a:	2104      	movs	r1, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f008 fcdb 	bl	800a018 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <Modbus_init+0xc4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <Modbus_init+0xc4>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <Modbus_init+0xc4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001674:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001678:	4413      	add	r3, r2
 800167a:	3302      	adds	r3, #2
 800167c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001680:	4619      	mov	r1, r3
 8001682:	f008 fd83 	bl	800a18c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <Modbus_init+0xc4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <Modbus_init+0xc4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fc47 	bl	8007f30 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <Modbus_init+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 fe96 	bl	80083dc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200001f0 	.word	0x200001f0
 80016bc:	080015b5 	.word	0x080015b5
 80016c0:	080015d5 	.word	0x080015d5

080016c4 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6278      	str	r0, [r7, #36]	@ 0x24
 80016cc:	ed87 0a08 	vstr	s0, [r7, #32]
 80016d0:	edc7 0a07 	vstr	s1, [r7, #28]
 80016d4:	ed87 1a06 	vstr	s2, [r7, #24]
 80016d8:	edc7 1a05 	vstr	s3, [r7, #20]
 80016dc:	ed87 2a04 	vstr	s4, [r7, #16]
 80016e0:	edc7 2a03 	vstr	s5, [r7, #12]
 80016e4:	ed87 3a02 	vstr	s6, [r7, #8]
 80016e8:	edc7 3a01 	vstr	s7, [r7, #4]
 80016ec:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	2210      	movs	r2, #16
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f00a fbf2 	bl	800bf18 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	3310      	adds	r3, #16
 8001738:	2240      	movs	r2, #64	@ 0x40
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00a fbeb 	bl	800bf18 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001746:	e00c      	b.n	8001762 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001752:	3304      	adds	r3, #4
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	4a79      	ldr	r2, [pc, #484]	@ (8001940 <MotorKalman_Init+0x27c>)
 800175a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175e:	3301      	adds	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	2b03      	cmp	r3, #3
 8001766:	ddef      	ble.n	8001748 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800176e:	2240      	movs	r2, #64	@ 0x40
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f00a fbd0 	bl	800bf18 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800177c:	e00d      	b.n	800179a <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800177e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001788:	33be      	adds	r3, #190	@ 0xbe
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001792:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001796:	3301      	adds	r3, #1
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800179a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179c:	2b03      	cmp	r3, #3
 800179e:	ddee      	ble.n	800177e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	33f0      	adds	r3, #240	@ 0xf0
 80017a4:	2210      	movs	r2, #16
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00a fbb5 	bl	800bf18 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017b4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80017be:	2210      	movs	r2, #16
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00a fba8 	bl	800bf18 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017ce:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80017d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80017d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017d8:	f000 f922 	bl	8001a20 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80017dc:	ed97 0a00 	vldr	s0, [r7]
 80017e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017e2:	f000 f94d 	bl	8001a80 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	f00a fa12 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	3310      	adds	r3, #16
 8001800:	2204      	movs	r2, #4
 8001802:	2104      	movs	r1, #4
 8001804:	f00a fa09 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001814:	2204      	movs	r2, #4
 8001816:	2104      	movs	r1, #4
 8001818:	f00a f9ff 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001828:	2201      	movs	r2, #1
 800182a:	2101      	movs	r1, #1
 800182c:	f00a f9f5 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	f00a f9eb 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001850:	2201      	movs	r2, #1
 8001852:	2101      	movs	r1, #1
 8001854:	f00a f9e1 	bl	800bc1a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001864:	2204      	movs	r2, #4
 8001866:	2104      	movs	r1, #4
 8001868:	f00a f9d7 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001878:	2201      	movs	r2, #1
 800187a:	2104      	movs	r1, #4
 800187c:	f00a f9cd 	bl	800bc1a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800188c:	2201      	movs	r2, #1
 800188e:	2104      	movs	r1, #4
 8001890:	f00a f9c3 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80018a0:	2204      	movs	r2, #4
 80018a2:	2104      	movs	r1, #4
 80018a4:	f00a f9b9 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80018b4:	2204      	movs	r2, #4
 80018b6:	2101      	movs	r1, #1
 80018b8:	f00a f9af 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	f00a f9a5 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80018dc:	2201      	movs	r2, #1
 80018de:	2104      	movs	r1, #4
 80018e0:	f00a f99b 	bl	800bc1a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80018e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018e6:	f000 f82d 	bl	8001944 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	3390      	adds	r3, #144	@ 0x90
 80018f4:	2204      	movs	r2, #4
 80018f6:	2104      	movs	r1, #4
 80018f8:	f00a f98f 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	33e0      	adds	r3, #224	@ 0xe0
 8001906:	2201      	movs	r2, #1
 8001908:	2104      	movs	r1, #4
 800190a:	f00a f986 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800191a:	2204      	movs	r2, #4
 800191c:	2104      	movs	r1, #4
 800191e:	f00a f97c 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800192e:	2201      	movs	r2, #1
 8001930:	2104      	movs	r1, #4
 8001932:	f00a f972 	bl	800bc1a <arm_mat_init_f32>
}
 8001936:	bf00      	nop
 8001938:	3730      	adds	r7, #48	@ 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	42c80000 	.word	0x42c80000

08001944 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	eeb0 3a64 	vmov.f32	s6, s9
 8001988:	eef0 2a45 	vmov.f32	s5, s10
 800198c:	eeb0 2a65 	vmov.f32	s4, s11
 8001990:	eef0 1a46 	vmov.f32	s3, s12
 8001994:	eeb0 1a66 	vmov.f32	s2, s13
 8001998:	eef0 0a47 	vmov.f32	s1, s14
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	f000 fb26 	bl	8001ff0 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00a fab2 	bl	800bf18 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80019ba:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001a18 <MotorKalman_DiscretizeModel+0xd4>
 80019be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80019ee:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001a1c <MotorKalman_DiscretizeModel+0xd8>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001a02:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001a18 <MotorKalman_DiscretizeModel+0xd4>
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	3c23d70a 	.word	0x3c23d70a
 8001a1c:	3dcccccd 	.word	0x3dcccccd

08001a20 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001a32:	2240      	movs	r2, #64	@ 0x40
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00a fa6e 	bl	800bf18 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001a3c:	edd7 7a00 	vldr	s15, [r7]
 8001a40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d107      	bne.n	8001a72 <MotorKalman_SetProcessNoise+0x52>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001a68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d002      	beq.n	8001a78 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff66 	bl	8001944 <MotorKalman_DiscretizeModel>
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001a8c:	ed97 0a00 	vldr	s0, [r7]
 8001a90:	f00a fa86 	bl	800bfa0 <sqrtf>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00c      	b.n	8001ada <matrix_copy+0x2c>
        dst[i] = src[i];
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	440b      	add	r3, r1
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbee      	blt.n	8001ac0 <matrix_copy+0x12>
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8001afc:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8001b00:	6020      	str	r0, [r4, #0]
 8001b02:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001b06:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8001b0a:	6001      	str	r1, [r0, #0]
 8001b0c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001b10:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8001b14:	ed81 0a00 	vstr	s0, [r1]
 8001b18:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001b1c:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8001b20:	600a      	str	r2, [r1, #0]
 8001b22:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8001b26:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8001b2a:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8001b2c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b30:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b34:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	f00a f86c 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8001b42:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b46:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001b4a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2204      	movs	r2, #4
 8001b52:	2104      	movs	r1, #4
 8001b54:	f00a f861 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8001b58:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b5c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001b60:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	2104      	movs	r1, #4
 8001b6a:	f00a f856 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8001b6e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b72:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001b76:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2104      	movs	r1, #4
 8001b80:	f00a f84b 	bl	800bc1a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8001b84:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001b88:	2240      	movs	r2, #64	@ 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00a f9c3 	bl	800bf18 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8001b92:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001b96:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	f00a f83c 	bl	800bc1a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001ba8:	e011      	b.n	8001bce <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8001baa:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8001bba:	443b      	add	r3, r7
 8001bbc:	3b6c      	subs	r3, #108	@ 0x6c
 8001bbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bc2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001bc4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001bce:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dde9      	ble.n	8001baa <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8001bd6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001bda:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8001bde:	2204      	movs	r2, #4
 8001be0:	2104      	movs	r1, #4
 8001be2:	f00a f81a 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8001be6:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001bea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001bee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001bf2:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001bf6:	ed93 0a00 	vldr	s0, [r3]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f00a f89f 	bl	800bd3e <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8001c00:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001c04:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001c08:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	f7ff ff4d 	bl	8001aae <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8001c14:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001c18:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	2104      	movs	r1, #4
 8001c20:	f009 fffb 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8001c24:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c28:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	2104      	movs	r1, #4
 8001c30:	f009 fff3 	bl	800bc1a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8001c34:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001c38:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001c3c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001c40:	4618      	mov	r0, r3
 8001c42:	f009 ffaf 	bl	800bba4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8001c46:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001c4a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001c4e:	2210      	movs	r2, #16
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff2c 	bl	8001aae <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8001c56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c5a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001c64:	e03a      	b.n	8001cdc <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8001c66:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8001c7e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001c82:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001c86:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f009 ffdd 	bl	800bc4a <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8001c90:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001c94:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c98:	2210      	movs	r2, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff07 	bl	8001aae <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8001ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ca4:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8001ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cac:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001cb0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00a f83f 	bl	800bd3e <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8001cc0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001cc4:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001cc8:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 ff69 	bl	800bba4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001cd2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001cdc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001ce0:	2b0a      	cmp	r3, #10
 8001ce2:	ddc0      	ble.n	8001c66 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8001ce4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001ce8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001cec:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001cf0:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8001cf4:	ed93 0a00 	vldr	s0, [r3]
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f00a f820 	bl	800bd3e <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8001cfe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d02:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001d06:	461a      	mov	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	6053      	str	r3, [r2, #4]
 8001d0e:	6093      	str	r3, [r2, #8]
 8001d10:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8001d12:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001d16:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	f009 ff7c 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8001d22:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8001d26:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001d2a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f009 ff8b 	bl	800bc4a <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8001d34:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001d38:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2104      	movs	r1, #4
 8001d40:	f009 ff6b 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8001d44:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d48:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d5c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001d60:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d64:	4611      	mov	r1, r2
 8001d66:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f009 ffe7 	bl	800bd3e <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001d70:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001d74:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001d78:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f009 ff11 	bl	800bba4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8001d82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	2340      	movs	r3, #64	@ 0x40
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2100      	movs	r1, #0
 8001d92:	f00a f8c1 	bl	800bf18 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8001d96:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d9a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001d9e:	2204      	movs	r2, #4
 8001da0:	2104      	movs	r1, #4
 8001da2:	f009 ff3a 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8001da6:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001daa:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001dae:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001db2:	4618      	mov	r0, r3
 8001db4:	f009 ff49 	bl	800bc4a <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8001db8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001dbc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	6053      	str	r3, [r2, #4]
 8001dc8:	6093      	str	r3, [r2, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8001dcc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dd0:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	f009 ff1f 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8001ddc:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001de0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001de4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f009 ff2e 	bl	800bc4a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8001dee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001df2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dfe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e02:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001e12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e16:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001e1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e1e:	4611      	mov	r1, r2
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	4618      	mov	r0, r3
 8001e26:	f009 ff8a 	bl	800bd3e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001e2a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001e2e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001e32:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001e36:	4618      	mov	r0, r3
 8001e38:	f009 feb4 	bl	800bba4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8001e3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e40:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001e44:	4618      	mov	r0, r3
 8001e46:	2340      	movs	r3, #64	@ 0x40
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f00a f864 	bl	800bf18 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8001e50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e54:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001e58:	2204      	movs	r2, #4
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	f009 fedd 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8001e60:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001e64:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001e68:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f009 feec 	bl	800bc4a <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8001e72:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e76:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	6053      	str	r3, [r2, #4]
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8001e86:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001e8a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2104      	movs	r1, #4
 8001e92:	f009 fec2 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8001e96:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001e9a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001e9e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f009 fed1 	bl	800bc4a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8001ea8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001eac:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001eb8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ebc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ecc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed8:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8001edc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ee0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001ee4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ee8:	4611      	mov	r1, r2
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f009 ff25 	bl	800bd3e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001ef4:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001ef8:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001efc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fe4f 	bl	800bba4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8001f06:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f0a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8001f0e:	4618      	mov	r0, r3
 8001f10:	2340      	movs	r3, #64	@ 0x40
 8001f12:	461a      	mov	r2, r3
 8001f14:	2100      	movs	r1, #0
 8001f16:	f009 ffff 	bl	800bf18 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8001f1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f1e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001f22:	2204      	movs	r2, #4
 8001f24:	2104      	movs	r1, #4
 8001f26:	f009 fe78 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8001f2a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001f2e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001f32:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f36:	4618      	mov	r0, r3
 8001f38:	f009 fe87 	bl	800bc4a <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8001f3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f40:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001f44:	461a      	mov	r2, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	6053      	str	r3, [r2, #4]
 8001f4c:	6093      	str	r3, [r2, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8001f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f54:	f107 001c 	add.w	r0, r7, #28
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	f009 fe5d 	bl	800bc1a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8001f60:	f107 021c 	add.w	r2, r7, #28
 8001f64:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001f68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f009 fe6c 	bl	800bc4a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8001f72:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f76:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f86:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f92:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f96:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fa6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001fec <discretize_system_with_arm+0x4fc>
 8001fb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fba:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 feb8 	bl	800bd3e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001fce:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001fd2:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001fd6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f009 fde2 	bl	800bba4 <arm_mat_add_f32>
}
 8001fe0:	bf00      	nop
 8001fe2:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	42f00000 	.word	0x42f00000

08001ff0 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b09e      	sub	sp, #120	@ 0x78
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001ffa:	edc7 0a08 	vstr	s1, [r7, #32]
 8001ffe:	ed87 1a07 	vstr	s2, [r7, #28]
 8002002:	edc7 1a06 	vstr	s3, [r7, #24]
 8002006:	ed87 2a05 	vstr	s4, [r7, #20]
 800200a:	edc7 2a04 	vstr	s5, [r7, #16]
 800200e:	ed87 3a03 	vstr	s6, [r7, #12]
 8002012:	60b8      	str	r0, [r7, #8]
 8002014:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8002016:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f009 ff7a 	bl	800bf18 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002032:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002036:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002038:	edd7 7a06 	vldr	s15, [r7, #24]
 800203c:	eef1 6a67 	vneg.f32	s13, s15
 8002040:	ed97 7a07 	vldr	s14, [r7, #28]
 8002044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002048:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 800204c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002050:	ed97 7a07 	vldr	s14, [r7, #28]
 8002054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002058:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 800205c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002060:	ed97 7a07 	vldr	s14, [r7, #28]
 8002064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002068:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 800206c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002070:	eef1 6a67 	vneg.f32	s13, s15
 8002074:	ed97 7a08 	vldr	s14, [r7, #32]
 8002078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002080:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002084:	eef1 6a67 	vneg.f32	s13, s15
 8002088:	ed97 7a08 	vldr	s14, [r7, #32]
 800208c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002090:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002098:	ed97 7a08 	vldr	s14, [r7, #32]
 800209c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80020a4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80020a8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80020b4:	f7ff fd1c 	bl	8001af0 <discretize_system_with_arm>
}
 80020b8:	bf00      	nop
 80020ba:	3778      	adds	r7, #120	@ 0x78
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <PWM_init+0x40>)
 80020d2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f005 feb2 	bl	8007e50 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4619      	mov	r1, r3
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f005 fff9 	bl	80080e8 <HAL_TIM_PWM_Start>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	0a21fe80 	.word	0x0a21fe80

08002104 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002110:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002114:	edd7 7a02 	vldr	s15, [r7, #8]
 8002118:	eef5 7a40 	vcmp.f32	s15, #0.0
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d137      	bne.n	8002192 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <PWM_write_duty+0x32>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002134:	e0e1      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d105      	bne.n	800214a <PWM_write_duty+0x46>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	6393      	str	r3, [r2, #56]	@ 0x38
 8002148:	e0d7      	b.n	80022fa <PWM_write_duty+0x1f6>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	889b      	ldrh	r3, [r3, #4]
 800214e:	2b08      	cmp	r3, #8
 8002150:	d105      	bne.n	800215e <PWM_write_duty+0x5a>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800215c:	e0cd      	b.n	80022fa <PWM_write_duty+0x1f6>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	889b      	ldrh	r3, [r3, #4]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d105      	bne.n	8002172 <PWM_write_duty+0x6e>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2300      	movs	r3, #0
 800216e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002170:	e0c3      	b.n	80022fa <PWM_write_duty+0x1f6>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	889b      	ldrh	r3, [r3, #4]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d105      	bne.n	8002186 <PWM_write_duty+0x82>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	6493      	str	r3, [r2, #72]	@ 0x48
 8002184:	e0b9      	b.n	80022fa <PWM_write_duty+0x1f6>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2300      	movs	r3, #0
 800218e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002190:	e0b3      	b.n	80022fa <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219e:	ed97 7a02 	vldr	s14, [r7, #8]
 80021a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021aa:	ee17 2a90 	vmov	r2, s15
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80021ba:	33fe      	adds	r3, #254	@ 0xfe
 80021bc:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <PWM_write_duty+0x200>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0bdb      	lsrs	r3, r3, #15
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	899b      	ldrh	r3, [r3, #12]
 80021de:	3301      	adds	r3, #1
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002200:	ee17 3a90 	vmov	r3, s15
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	89db      	ldrh	r3, [r3, #14]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f954 	bl	80004bc <__aeabi_i2d>
 8002214:	4604      	mov	r4, r0
 8002216:	460d      	mov	r5, r1
 8002218:	edd7 7a01 	vldr	s15, [r7, #4]
 800221c:	eef0 7ae7 	vabs.f32	s15, s15
 8002220:	ee17 0a90 	vmov	r0, s15
 8002224:	f7fe f95c 	bl	80004e0 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fe f9ae 	bl	8000590 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <PWM_write_duty+0x204>)
 8002242:	f7fe facf 	bl	80007e4 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fbb1 	bl	80009b4 <__aeabi_d2uiz>
 8002252:	4603      	mov	r3, r0
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	899a      	ldrh	r2, [r3, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	89da      	ldrh	r2, [r3, #14]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	89da      	ldrh	r2, [r3, #14]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	889b      	ldrh	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <PWM_write_duty+0x190>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6952      	ldr	r2, [r2, #20]
 8002290:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002292:	e032      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d106      	bne.n	80022aa <PWM_write_duty+0x1a6>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022a8:	e027      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	889b      	ldrh	r3, [r3, #4]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d106      	bne.n	80022c0 <PWM_write_duty+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80022be:	e01c      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d106      	bne.n	80022d6 <PWM_write_duty+0x1d2>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022d4:	e011      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d106      	bne.n	80022ec <PWM_write_duty+0x1e8>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80022ea:	e006      	b.n	80022fa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80022f8:	e7ff      	b.n	80022fa <PWM_write_duty+0x1f6>
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdb0      	pop	{r4, r5, r7, pc}
 8002302:	bf00      	nop
 8002304:	80008001 	.word	0x80008001
 8002308:	40590000 	.word	0x40590000
 800230c:	00000000 	.word	0x00000000

08002310 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	ed87 0a02 	vstr	s0, [r7, #8]
 800231c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002320:	edd7 7a02 	vldr	s15, [r7, #8]
 8002324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d137      	bne.n	800239e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <PWM_write_range+0x32>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002340:	e0e1      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	889b      	ldrh	r3, [r3, #4]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d105      	bne.n	8002356 <PWM_write_range+0x46>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	6393      	str	r3, [r2, #56]	@ 0x38
 8002354:	e0d7      	b.n	8002506 <PWM_write_range+0x1f6>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d105      	bne.n	800236a <PWM_write_range+0x5a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002368:	e0cd      	b.n	8002506 <PWM_write_range+0x1f6>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d105      	bne.n	800237e <PWM_write_range+0x6e>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
 800237c:	e0c3      	b.n	8002506 <PWM_write_range+0x1f6>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	889b      	ldrh	r3, [r3, #4]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d105      	bne.n	8002392 <PWM_write_range+0x82>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002390:	e0b9      	b.n	8002506 <PWM_write_range+0x1f6>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800239c:	e0b3      	b.n	8002506 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b6:	ee17 2a90 	vmov	r2, s15
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80023c6:	33fe      	adds	r3, #254	@ 0xfe
 80023c8:	4a53      	ldr	r2, [pc, #332]	@ (8002518 <PWM_write_range+0x208>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0bdb      	lsrs	r3, r3, #15
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	899b      	ldrh	r3, [r3, #12]
 80023ea:	3301      	adds	r3, #1
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80023fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240c:	ee17 3a90 	vmov	r3, s15
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	89db      	ldrh	r3, [r3, #14]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f84e 	bl	80004bc <__aeabi_i2d>
 8002420:	4604      	mov	r4, r0
 8002422:	460d      	mov	r5, r1
 8002424:	edd7 7a01 	vldr	s15, [r7, #4]
 8002428:	eef0 7ae7 	vabs.f32	s15, s15
 800242c:	ee17 0a90 	vmov	r0, s15
 8002430:	f7fe f856 	bl	80004e0 <__aeabi_f2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fe f8a8 	bl	8000590 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	a331      	add	r3, pc, #196	@ (adr r3, 8002510 <PWM_write_range+0x200>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fe f9c9 	bl	80007e4 <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe faab 	bl	80009b4 <__aeabi_d2uiz>
 800245e:	4603      	mov	r3, r0
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	899a      	ldrh	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	89da      	ldrh	r2, [r3, #14]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	89da      	ldrh	r2, [r3, #14]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <PWM_write_range+0x190>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6952      	ldr	r2, [r2, #20]
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800249e:	e032      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	889b      	ldrh	r3, [r3, #4]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d106      	bne.n	80024b6 <PWM_write_range+0x1a6>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80024b4:	e027      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	889b      	ldrh	r3, [r3, #4]
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d106      	bne.n	80024cc <PWM_write_range+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80024ca:	e01c      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	889b      	ldrh	r3, [r3, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d106      	bne.n	80024e2 <PWM_write_range+0x1d2>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80024e0:	e011      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	889b      	ldrh	r3, [r3, #4]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d106      	bne.n	80024f8 <PWM_write_range+0x1e8>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80024f6:	e006      	b.n	8002506 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002504:	e7ff      	b.n	8002506 <PWM_write_range+0x1f6>
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bdb0      	pop	{r4, r5, r7, pc}
 800250e:	bf00      	nop
 8002510:	00000000 	.word	0x00000000
 8002514:	40efffe0 	.word	0x40efffe0
 8002518:	80008001 	.word	0x80008001

0800251c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6178      	str	r0, [r7, #20]
 8002524:	6139      	str	r1, [r7, #16]
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	ed87 0a01 	vstr	s0, [r7, #4]
 800252e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800257c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	fb93 f2f2 	sdiv	r2, r3, r2
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80025ea:	213c      	movs	r1, #60	@ 0x3c
 80025ec:	6938      	ldr	r0, [r7, #16]
 80025ee:	f006 f837 	bl	8008660 <HAL_TIM_Encoder_Start>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	@ 0x30
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2220      	movs	r2, #32
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f009 fc7f 	bl	800bf18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800261a:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <MX_ADC1_Init+0x104>)
 800261c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002624:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800262a:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <MX_ADC1_Init+0x104>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002630:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002636:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <MX_ADC1_Init+0x104>)
 800263e:	2201      	movs	r2, #1
 8002640:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002642:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002644:	2204      	movs	r2, #4
 8002646:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002648:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <MX_ADC1_Init+0x104>)
 800264a:	2200      	movs	r2, #0
 800264c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002650:	2201      	movs	r2, #1
 8002652:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002654:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002656:	2202      	movs	r2, #2
 8002658:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <MX_ADC1_Init+0x104>)
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002664:	2200      	movs	r2, #0
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <MX_ADC1_Init+0x104>)
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002678:	2200      	movs	r2, #0
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <MX_ADC1_Init+0x104>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002684:	481e      	ldr	r0, [pc, #120]	@ (8002700 <MX_ADC1_Init+0x104>)
 8002686:	f002 fb0f 	bl	8004ca8 <HAL_ADC_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002690:	f000 fc5e 	bl	8002f50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	4818      	ldr	r0, [pc, #96]	@ (8002700 <MX_ADC1_Init+0x104>)
 80026a0:	f003 fc2e 	bl	8005f00 <HAL_ADCEx_MultiModeConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80026aa:	f000 fc51 	bl	8002f50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_ADC1_Init+0x108>)
 80026b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026b2:	2306      	movs	r3, #6
 80026b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80026b6:	2307      	movs	r3, #7
 80026b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026ba:	237f      	movs	r3, #127	@ 0x7f
 80026bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026be:	2304      	movs	r3, #4
 80026c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	480d      	ldr	r0, [pc, #52]	@ (8002700 <MX_ADC1_Init+0x104>)
 80026cc:	f002 fd9a 	bl	8005204 <HAL_ADC_ConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80026d6:	f000 fc3b 	bl	8002f50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_ADC1_Init+0x10c>)
 80026dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026de:	230c      	movs	r3, #12
 80026e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4806      	ldr	r0, [pc, #24]	@ (8002700 <MX_ADC1_Init+0x104>)
 80026e8:	f002 fd8c 	bl	8005204 <HAL_ADC_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80026f2:	f000 fc2d 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	3730      	adds	r7, #48	@ 0x30
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200001f4 	.word	0x200001f4
 8002704:	19200040 	.word	0x19200040
 8002708:	1d500080 	.word	0x1d500080

0800270c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b09e      	sub	sp, #120	@ 0x78
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	2254      	movs	r2, #84	@ 0x54
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f009 fbf3 	bl	800bf18 <memset>
  if(adcHandle->Instance==ADC1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800273a:	d15e      	bne.n	80027fa <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800273c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002740:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002742:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002746:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4618      	mov	r0, r3
 800274e:	f005 f8cd 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002758:	f000 fbfa 	bl	8002f50 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 8002762:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_ADC_MspInit+0xf8>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800278c:	2303      	movs	r3, #3
 800278e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002790:	2303      	movs	r3, #3
 8002792:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800279c:	4619      	mov	r1, r3
 800279e:	481a      	ldr	r0, [pc, #104]	@ (8002808 <HAL_ADC_MspInit+0xfc>)
 80027a0:	f004 f8f8 	bl	8006994 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <HAL_ADC_MspInit+0x104>)
 80027a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027aa:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027ac:	2205      	movs	r2, #5
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b16      	ldr	r3, [pc, #88]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027de:	480b      	ldr	r0, [pc, #44]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027e0:	f003 fda6 	bl	8006330 <HAL_DMA_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80027ea:	f000 fbb1 	bl	8002f50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80027f4:	4a05      	ldr	r2, [pc, #20]	@ (800280c <HAL_ADC_MspInit+0x100>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	3778      	adds	r7, #120	@ 0x78
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	48000800 	.word	0x48000800
 800280c:	20000260 	.word	0x20000260
 8002810:	40020008 	.word	0x40020008

08002814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800281a:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <MX_DMA_Init+0x90>)
 800281c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281e:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <MX_DMA_Init+0x90>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6493      	str	r3, [r2, #72]	@ 0x48
 8002826:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <MX_DMA_Init+0x90>)
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <MX_DMA_Init+0x90>)
 8002834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <MX_DMA_Init+0x90>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6493      	str	r3, [r2, #72]	@ 0x48
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <MX_DMA_Init+0x90>)
 8002840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	200b      	movs	r0, #11
 8002850:	f003 fd39 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002854:	200b      	movs	r0, #11
 8002856:	f003 fd50 	bl	80062fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	200c      	movs	r0, #12
 8002860:	f003 fd31 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002864:	200c      	movs	r0, #12
 8002866:	f003 fd48 	bl	80062fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	200d      	movs	r0, #13
 8002870:	f003 fd29 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002874:	200d      	movs	r0, #13
 8002876:	f003 fd40 	bl	80062fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	200e      	movs	r0, #14
 8002880:	f003 fd21 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002884:	200e      	movs	r0, #14
 8002886:	f003 fd38 	bl	80062fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	200f      	movs	r0, #15
 8002890:	f003 fd19 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002894:	200f      	movs	r0, #15
 8002896:	f003 fd30 	bl	80062fa <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000

080028a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	4a4e      	ldr	r2, [pc, #312]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	4a48      	ldr	r2, [pc, #288]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e2:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	4a42      	ldr	r2, [pc, #264]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fa:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <MX_GPIO_Init+0x154>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <MX_GPIO_Init+0x154>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	4a3c      	ldr	r2, [pc, #240]	@ (80029fc <MX_GPIO_Init+0x154>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002912:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <MX_GPIO_Init+0x154>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800291e:	2200      	movs	r2, #0
 8002920:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002928:	f004 f9ce 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002932:	4833      	ldr	r0, [pc, #204]	@ (8002a00 <MX_GPIO_Init+0x158>)
 8002934:	f004 f9c8 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	482c      	ldr	r0, [pc, #176]	@ (8002a00 <MX_GPIO_Init+0x158>)
 8002950:	f004 f820 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002954:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002970:	f004 f810 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin J3_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 8002974:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8002978:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|J3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	481e      	ldr	r0, [pc, #120]	@ (8002a04 <MX_GPIO_Init+0x15c>)
 800298a:	f004 f803 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800298e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	4816      	ldr	r0, [pc, #88]	@ (8002a00 <MX_GPIO_Init+0x158>)
 80029a8:	f003 fff4 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 80029ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c4:	f003 ffe6 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pins : J2_Pin J1_Pin J4_Pin */
  GPIO_InitStruct.Pin = J2_Pin|J1_Pin|J4_Pin;
 80029c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4808      	ldr	r0, [pc, #32]	@ (8002a00 <MX_GPIO_Init+0x158>)
 80029de:	f003 ffd9 	bl	8006994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2028      	movs	r0, #40	@ 0x28
 80029e8:	f003 fc6d 	bl	80062c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029ec:	2028      	movs	r0, #40	@ 0x28
 80029ee:	f003 fc84 	bl	80062fa <HAL_NVIC_EnableIRQ>

}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	@ 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	48000800 	.word	0x48000800
 8002a04:	48000400 	.word	0x48000400

08002a08 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	b0a4      	sub	sp, #144	@ 0x90
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6178      	str	r0, [r7, #20]
 8002a10:	6139      	str	r1, [r7, #16]
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a18:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8002a2c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a50:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002a62:	4bc6      	ldr	r3, [pc, #792]	@ (8002d7c <Kalman_Start+0x374>)
 8002a64:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002a68:	461d      	mov	r5, r3
 8002a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002a9c:	e028      	b.n	8002af0 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	3390      	adds	r3, #144	@ 0x90
 8002ac0:	443b      	add	r3, r7
 8002ac2:	3b64      	subs	r3, #100	@ 0x64
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	6979      	ldr	r1, [r7, #20]
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002acc:	3398      	adds	r3, #152	@ 0x98
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ada:	3304      	adds	r3, #4
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af4:	2b0f      	cmp	r3, #15
 8002af6:	ddd2      	ble.n	8002a9e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002afe:	e03a      	b.n	8002b76 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8002b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3390      	adds	r3, #144	@ 0x90
 8002b08:	443b      	add	r3, r7
 8002b0a:	3b74      	subs	r3, #116	@ 0x74
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b2c:	3324      	adds	r3, #36	@ 0x24
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3390      	adds	r3, #144	@ 0x90
 8002b3c:	443b      	add	r3, r7
 8002b3e:	3b14      	subs	r3, #20
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b48:	3328      	adds	r3, #40	@ 0x28
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3390      	adds	r3, #144	@ 0x90
 8002b58:	443b      	add	r3, r7
 8002b5a:	3b24      	subs	r3, #36	@ 0x24
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	6979      	ldr	r1, [r7, #20]
 8002b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b64:	332c      	adds	r3, #44	@ 0x2c
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b70:	3301      	adds	r3, #1
 8002b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	ddc0      	ble.n	8002b00 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2201      	movs	r2, #1
 8002b88:	2104      	movs	r1, #4
 8002b8a:	f009 f846 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3310      	adds	r3, #16
 8002b98:	2204      	movs	r2, #4
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	f009 f83d 	bl	800bc1a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3350      	adds	r3, #80	@ 0x50
 8002baa:	2204      	movs	r2, #4
 8002bac:	2104      	movs	r1, #4
 8002bae:	f009 f834 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3390      	adds	r3, #144	@ 0x90
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	f009 f82b 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	33a0      	adds	r3, #160	@ 0xa0
 8002bce:	2204      	movs	r2, #4
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f009 f822 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	33b0      	adds	r3, #176	@ 0xb0
 8002be0:	2201      	movs	r2, #1
 8002be2:	2104      	movs	r1, #4
 8002be4:	f009 f819 	bl	800bc1a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	33c8      	adds	r3, #200	@ 0xc8
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	f009 f810 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002c06:	2201      	movs	r2, #1
 8002c08:	2104      	movs	r1, #4
 8002c0a:	f009 f806 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	f008 fffc 	bl	800bc1a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002c2e:	2204      	movs	r2, #4
 8002c30:	2104      	movs	r1, #4
 8002c32:	f008 fff2 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c42:	2204      	movs	r2, #4
 8002c44:	2104      	movs	r1, #4
 8002c46:	f008 ffe8 	bl	800bc1a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002c56:	2201      	movs	r2, #1
 8002c58:	2104      	movs	r1, #4
 8002c5a:	f008 ffde 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	f008 ffd4 	bl	800bc1a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002c7e:	2204      	movs	r2, #4
 8002c80:	2101      	movs	r1, #1
 8002c82:	f008 ffca 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002c92:	2201      	movs	r2, #1
 8002c94:	2101      	movs	r1, #1
 8002c96:	f008 ffc0 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2101      	movs	r1, #1
 8002caa:	f008 ffb6 	bl	800bc1a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	f008 ffac 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	f008 ffa2 	bl	800bc1a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	f008 ff98 	bl	800bc1a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	f008 ff8e 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	f008 ff84 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2104      	movs	r1, #4
 8002d22:	f008 ff7a 	bl	800bc1a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d32:	2201      	movs	r2, #1
 8002d34:	2101      	movs	r1, #1
 8002d36:	f008 ff70 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d46:	2204      	movs	r2, #4
 8002d48:	2104      	movs	r1, #4
 8002d4a:	f008 ff66 	bl	800bc1a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	33c4      	adds	r3, #196	@ 0xc4
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	f008 ff5d 	bl	800bc1a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2101      	movs	r1, #1
 8002d70:	f008 ff53 	bl	800bc1a <arm_mat_init_f32>
}
 8002d74:	bf00      	nop
 8002d76:	3790      	adds	r7, #144	@ 0x90
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7c:	0800cae4 	.word	0x0800cae4

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d86:	f001 fcda 	bl	800473e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d8a:	f000 f869 	bl	8002e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8e:	f7ff fd8b 	bl	80028a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d92:	f7ff fd3f 	bl	8002814 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d96:	f7ff fc31 	bl	80025fc <MX_ADC1_Init>
  MX_TIM2_Init();
 8002d9a:	f000 ff0d 	bl	8003bb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d9e:	f000 ff59 	bl	8003c54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002da2:	f000 ffad 	bl	8003d00 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002da6:	f001 f801 	bl	8003dac <MX_TIM5_Init>
  MX_TIM8_Init();
 8002daa:	f001 f84d 	bl	8003e48 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002dae:	f001 faef 	bl	8004390 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002db2:	f001 f905 	bl	8003fc0 <MX_TIM16_Init>
  MX_TIM1_Init();
 8002db6:	f000 fe6b 	bl	8003a90 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002dba:	f001 fa9f 	bl	80042fc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	plotter_begin();
 8002dbe:	f000 f8cd 	bl	8002f5c <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <main+0xd4>)
 8002dc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd fe12 	bl	80009f4 <__aeabi_d2f>
 8002dd0:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <main+0xd4>)
 8002dd4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd fe0a 	bl	80009f4 <__aeabi_d2f>
 8002de0:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8002de2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <main+0xd4>)
 8002de4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fe02 	bl	80009f4 <__aeabi_d2f>
 8002df0:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <main+0xd4>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd fdfa 	bl	80009f4 <__aeabi_d2f>
 8002e00:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <main+0xd4>)
 8002e04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fdf2 	bl	80009f4 <__aeabi_d2f>
 8002e10:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <main+0xd4>)
 8002e14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7fd fdea 	bl	80009f4 <__aeabi_d2f>
 8002e20:	4603      	mov	r3, r0
 8002e22:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8002e26:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8002e2a:	ee03 3a10 	vmov	s6, r3
 8002e2e:	ee02 9a90 	vmov	s5, r9
 8002e32:	ee02 8a10 	vmov	s4, r8
 8002e36:	ee01 6a90 	vmov	s3, r6
 8002e3a:	ee01 5a10 	vmov	s2, r5
 8002e3e:	ee00 4a90 	vmov	s1, r4
 8002e42:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8002e58 <main+0xd8>
 8002e46:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <main+0xdc>)
 8002e48:	f7fe fc3c 	bl	80016c4 <MotorKalman_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		plotter_update_sensors();
 8002e4c:	f000 fb62 	bl	8003514 <plotter_update_sensors>
 8002e50:	e7fc      	b.n	8002e4c <main+0xcc>
 8002e52:	bf00      	nop
 8002e54:	20000060 	.word	0x20000060
 8002e58:	3a83126f 	.word	0x3a83126f
 8002e5c:	200002c0 	.word	0x200002c0

08002e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b094      	sub	sp, #80	@ 0x50
 8002e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	2238      	movs	r2, #56	@ 0x38
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f009 f852 	bl	800bf18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f003 ff50 	bl	8006d28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e92:	2340      	movs	r3, #64	@ 0x40
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e96:	2302      	movs	r3, #2
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002ea2:	2355      	movs	r3, #85	@ 0x55
 8002ea4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb2:	f107 0318 	add.w	r3, r7, #24
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 ffea 	bl	8006e90 <HAL_RCC_OscConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ec2:	f000 f845 	bl	8002f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	2104      	movs	r1, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fae8 	bl	80074b4 <HAL_RCC_ClockConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002eea:	f000 f831 	bl	8002f50 <Error_Handler>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3750      	adds	r7, #80	@ 0x50
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_GPIO_EXTI_Callback>:
//		return 10;
//	default:
//		return 0;
//	}
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d105      	bne.n	8002f14 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_GPIO_EXTI_Callback+0x28>)
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
	}
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	200000d4 	.word	0x200000d4
 8002f24:	200000d7 	.word	0x200000d7

08002f28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
//			MotorKalman_Estimate(&motor_filter, pris_vin, prismatic_encoder.rads);
//		}
//
//		MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
	}
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
}
 8002f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <Error_Handler+0x8>

08002f5c <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	ed2d 8b02 	vpush	{d8}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8002f66:	2100      	movs	r1, #0
 8002f68:	48ca      	ldr	r0, [pc, #808]	@ (8003294 <plotter_begin+0x338>)
 8002f6a:	f000 fbc1 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002f6e:	eddf 2aca 	vldr	s5, [pc, #808]	@ 8003298 <plotter_begin+0x33c>
 8002f72:	ed9f 2aca 	vldr	s4, [pc, #808]	@ 800329c <plotter_begin+0x340>
 8002f76:	eddf 1aca 	vldr	s3, [pc, #808]	@ 80032a0 <plotter_begin+0x344>
 8002f7a:	ed9f 1ac9 	vldr	s2, [pc, #804]	@ 80032a0 <plotter_begin+0x344>
 8002f7e:	eddf 0ac9 	vldr	s1, [pc, #804]	@ 80032a4 <plotter_begin+0x348>
 8002f82:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8003298 <plotter_begin+0x33c>
 8002f86:	48c3      	ldr	r0, [pc, #780]	@ (8003294 <plotter_begin+0x338>)
 8002f88:	f000 fc10 	bl	80037ac <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	48c6      	ldr	r0, [pc, #792]	@ (80032a8 <plotter_begin+0x34c>)
 8002f90:	f000 fbae 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002f94:	ed9f 3ac0 	vldr	s6, [pc, #768]	@ 8003298 <plotter_begin+0x33c>
 8002f98:	eddf 2ac0 	vldr	s5, [pc, #768]	@ 800329c <plotter_begin+0x340>
 8002f9c:	ed9f 2ac0 	vldr	s4, [pc, #768]	@ 80032a0 <plotter_begin+0x344>
 8002fa0:	eddf 1abf 	vldr	s3, [pc, #764]	@ 80032a0 <plotter_begin+0x344>
 8002fa4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002fa8:	eddf 0abe 	vldr	s1, [pc, #760]	@ 80032a4 <plotter_begin+0x348>
 8002fac:	ed9f 0aba 	vldr	s0, [pc, #744]	@ 8003298 <plotter_begin+0x33c>
 8002fb0:	48bd      	ldr	r0, [pc, #756]	@ (80032a8 <plotter_begin+0x34c>)
 8002fb2:	f000 fc26 	bl	8003802 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	48bc      	ldr	r0, [pc, #752]	@ (80032ac <plotter_begin+0x350>)
 8002fba:	f000 fb99 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8002fbe:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8002fc2:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8002fc6:	eddf 1ab6 	vldr	s3, [pc, #728]	@ 80032a0 <plotter_begin+0x344>
 8002fca:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 80032a0 <plotter_begin+0x344>
 8002fce:	eddf 0ab5 	vldr	s1, [pc, #724]	@ 80032a4 <plotter_begin+0x348>
 8002fd2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002fd6:	48b5      	ldr	r0, [pc, #724]	@ (80032ac <plotter_begin+0x350>)
 8002fd8:	f000 fbe8 	bl	80037ac <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8002fdc:	2102      	movs	r1, #2
 8002fde:	48b4      	ldr	r0, [pc, #720]	@ (80032b0 <plotter_begin+0x354>)
 8002fe0:	f000 fb86 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8002fe4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8002fe8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8002fec:	ed9f 2aac 	vldr	s4, [pc, #688]	@ 80032a0 <plotter_begin+0x344>
 8002ff0:	eddf 1aab 	vldr	s3, [pc, #684]	@ 80032a0 <plotter_begin+0x344>
 8002ff4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002ff8:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 80032a4 <plotter_begin+0x348>
 8002ffc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003000:	48ab      	ldr	r0, [pc, #684]	@ (80032b0 <plotter_begin+0x354>)
 8003002:	f000 fbfe 	bl	8003802 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8003006:	2100      	movs	r1, #0
 8003008:	48aa      	ldr	r0, [pc, #680]	@ (80032b4 <plotter_begin+0x358>)
 800300a:	f000 fb71 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800300e:	4baa      	ldr	r3, [pc, #680]	@ (80032b8 <plotter_begin+0x35c>)
 8003010:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f7fd fcec 	bl	80009f4 <__aeabi_d2f>
 800301c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 800301e:	4ba6      	ldr	r3, [pc, #664]	@ (80032b8 <plotter_begin+0x35c>)
 8003020:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f7fd fce4 	bl	80009f4 <__aeabi_d2f>
 800302c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8003036:	4ba0      	ldr	r3, [pc, #640]	@ (80032b8 <plotter_begin+0x35c>)
 8003038:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	f7fd fcd8 	bl	80009f4 <__aeabi_d2f>
 8003044:	4603      	mov	r3, r0
 8003046:	ee02 3a90 	vmov	s5, r3
 800304a:	eeb0 2a48 	vmov.f32	s4, s16
 800304e:	eddf 1a94 	vldr	s3, [pc, #592]	@ 80032a0 <plotter_begin+0x344>
 8003052:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80032a0 <plotter_begin+0x344>
 8003056:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80032a4 <plotter_begin+0x348>
 800305a:	ee00 4a10 	vmov	s0, r4
 800305e:	4895      	ldr	r0, [pc, #596]	@ (80032b4 <plotter_begin+0x358>)
 8003060:	f000 fba4 	bl	80037ac <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8003064:	2102      	movs	r1, #2
 8003066:	4895      	ldr	r0, [pc, #596]	@ (80032bc <plotter_begin+0x360>)
 8003068:	f000 fb42 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800306c:	4b92      	ldr	r3, [pc, #584]	@ (80032b8 <plotter_begin+0x35c>)
 800306e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fcbd 	bl	80009f4 <__aeabi_d2f>
 800307a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800307c:	4b8e      	ldr	r3, [pc, #568]	@ (80032b8 <plotter_begin+0x35c>)
 800307e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f7fd fcb5 	bl	80009f4 <__aeabi_d2f>
 800308a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003094:	4b88      	ldr	r3, [pc, #544]	@ (80032b8 <plotter_begin+0x35c>)
 8003096:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fca9 	bl	80009f4 <__aeabi_d2f>
 80030a2:	4603      	mov	r3, r0
 80030a4:	ee03 3a10 	vmov	s6, r3
 80030a8:	eef0 2a48 	vmov.f32	s5, s16
 80030ac:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 80032a0 <plotter_begin+0x344>
 80030b0:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80032a0 <plotter_begin+0x344>
 80030b4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80030b8:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 80032a4 <plotter_begin+0x348>
 80030bc:	ee00 4a10 	vmov	s0, r4
 80030c0:	487e      	ldr	r0, [pc, #504]	@ (80032bc <plotter_begin+0x360>)
 80030c2:	f000 fb9e 	bl	8003802 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80030c6:	2100      	movs	r1, #0
 80030c8:	487d      	ldr	r0, [pc, #500]	@ (80032c0 <plotter_begin+0x364>)
 80030ca:	f000 fb11 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80030ce:	4b7d      	ldr	r3, [pc, #500]	@ (80032c4 <plotter_begin+0x368>)
 80030d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fd fc8c 	bl	80009f4 <__aeabi_d2f>
 80030dc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80030de:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <plotter_begin+0x368>)
 80030e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fc84 	bl	80009f4 <__aeabi_d2f>
 80030ec:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80030f6:	4b73      	ldr	r3, [pc, #460]	@ (80032c4 <plotter_begin+0x368>)
 80030f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fc78 	bl	80009f4 <__aeabi_d2f>
 8003104:	4603      	mov	r3, r0
 8003106:	ee02 3a90 	vmov	s5, r3
 800310a:	eeb0 2a48 	vmov.f32	s4, s16
 800310e:	eddf 1a64 	vldr	s3, [pc, #400]	@ 80032a0 <plotter_begin+0x344>
 8003112:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 80032a0 <plotter_begin+0x344>
 8003116:	eddf 0a63 	vldr	s1, [pc, #396]	@ 80032a4 <plotter_begin+0x348>
 800311a:	ee00 4a10 	vmov	s0, r4
 800311e:	4868      	ldr	r0, [pc, #416]	@ (80032c0 <plotter_begin+0x364>)
 8003120:	f000 fb44 	bl	80037ac <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8003124:	2102      	movs	r1, #2
 8003126:	4868      	ldr	r0, [pc, #416]	@ (80032c8 <plotter_begin+0x36c>)
 8003128:	f000 fae2 	bl	80036f0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800312c:	4b65      	ldr	r3, [pc, #404]	@ (80032c4 <plotter_begin+0x368>)
 800312e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fc5d 	bl	80009f4 <__aeabi_d2f>
 800313a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800313c:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <plotter_begin+0x368>)
 800313e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f7fd fc55 	bl	80009f4 <__aeabi_d2f>
 800314a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003154:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <plotter_begin+0x368>)
 8003156:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f7fd fc49 	bl	80009f4 <__aeabi_d2f>
 8003162:	4603      	mov	r3, r0
 8003164:	ee03 3a10 	vmov	s6, r3
 8003168:	eef0 2a48 	vmov.f32	s5, s16
 800316c:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 80032a0 <plotter_begin+0x344>
 8003170:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80032a0 <plotter_begin+0x344>
 8003174:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003178:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 80032a4 <plotter_begin+0x348>
 800317c:	ee00 4a10 	vmov	s0, r4
 8003180:	4851      	ldr	r0, [pc, #324]	@ (80032c8 <plotter_begin+0x36c>)
 8003182:	f000 fb3e 	bl	8003802 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8003186:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <plotter_begin+0x35c>)
 8003188:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800318c:	4b4f      	ldr	r3, [pc, #316]	@ (80032cc <plotter_begin+0x370>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9a5 	bl	80004e0 <__aeabi_f2d>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f9f7 	bl	8000590 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b48      	ldr	r3, [pc, #288]	@ (80032d0 <plotter_begin+0x374>)
 80031b0:	f7fd f9ee 	bl	8000590 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80031b8:	493f      	ldr	r1, [pc, #252]	@ (80032b8 <plotter_begin+0x35c>)
 80031ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 80031be:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <plotter_begin+0x35c>)
 80031c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b42      	ldr	r3, [pc, #264]	@ (80032d4 <plotter_begin+0x378>)
 80031ca:	f7fd f9e1 	bl	8000590 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4939      	ldr	r1, [pc, #228]	@ (80032b8 <plotter_begin+0x35c>)
 80031d4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80031d8:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <plotter_begin+0x370>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f97f 	bl	80004e0 <__aeabi_f2d>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	f7fd f81d 	bl	8000224 <__adddf3>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4b36      	ldr	r3, [pc, #216]	@ (80032d0 <plotter_begin+0x374>)
 80031f8:	f7fd f9ca 	bl	8000590 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f7fd fbf6 	bl	80009f4 <__aeabi_d2f>
 8003208:	4603      	mov	r3, r0
 800320a:	ee00 3a90 	vmov	s1, r3
 800320e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003216:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800321a:	492f      	ldr	r1, [pc, #188]	@ (80032d8 <plotter_begin+0x37c>)
 800321c:	482f      	ldr	r0, [pc, #188]	@ (80032dc <plotter_begin+0x380>)
 800321e:	f7ff f97d 	bl	800251c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8003222:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80032a0 <plotter_begin+0x344>
 8003226:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800322a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800322e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003232:	492b      	ldr	r1, [pc, #172]	@ (80032e0 <plotter_begin+0x384>)
 8003234:	482b      	ldr	r0, [pc, #172]	@ (80032e4 <plotter_begin+0x388>)
 8003236:	f7ff f971 	bl	800251c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 800323a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003244:	2204      	movs	r2, #4
 8003246:	4928      	ldr	r1, [pc, #160]	@ (80032e8 <plotter_begin+0x38c>)
 8003248:	4828      	ldr	r0, [pc, #160]	@ (80032ec <plotter_begin+0x390>)
 800324a:	f7fd fefd 	bl	8001048 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800324e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <plotter_begin+0x394>)
 8003256:	2200      	movs	r2, #0
 8003258:	4923      	ldr	r1, [pc, #140]	@ (80032e8 <plotter_begin+0x38c>)
 800325a:	4826      	ldr	r0, [pc, #152]	@ (80032f4 <plotter_begin+0x398>)
 800325c:	f7fd fef4 	bl	8001048 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8003260:	220c      	movs	r2, #12
 8003262:	4925      	ldr	r1, [pc, #148]	@ (80032f8 <plotter_begin+0x39c>)
 8003264:	4825      	ldr	r0, [pc, #148]	@ (80032fc <plotter_begin+0x3a0>)
 8003266:	f7fe ff2b 	bl	80020c0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 800326a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80032a0 <plotter_begin+0x344>
 800326e:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8003300 <plotter_begin+0x3a4>
 8003272:	481e      	ldr	r0, [pc, #120]	@ (80032ec <plotter_begin+0x390>)
 8003274:	f7fd ff0c 	bl	8001090 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8003278:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80032a0 <plotter_begin+0x344>
 800327c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8003300 <plotter_begin+0x3a4>
 8003280:	481c      	ldr	r0, [pc, #112]	@ (80032f4 <plotter_begin+0x398>)
 8003282:	f7fd ff05 	bl	8001090 <MDXX_set_range>
	plotter_pen_up();
 8003286:	f000 fa23 	bl	80036d0 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 200, 1e-10, 100,
			ZGX45RGG_400RPM_Constant.sd_max);
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <plotter_begin+0x35c>)
 800328c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003290:	e03e      	b.n	8003310 <plotter_begin+0x3b4>
 8003292:	bf00      	nop
 8003294:	20000844 	.word	0x20000844
 8003298:	477fff00 	.word	0x477fff00
 800329c:	c77fff00 	.word	0xc77fff00
 80032a0:	00000000 	.word	0x00000000
 80032a4:	3dcccccd 	.word	0x3dcccccd
 80032a8:	20000888 	.word	0x20000888
 80032ac:	200008cc 	.word	0x200008cc
 80032b0:	20000910 	.word	0x20000910
 80032b4:	20000954 	.word	0x20000954
 80032b8:	20000060 	.word	0x20000060
 80032bc:	20000998 	.word	0x20000998
 80032c0:	200009dc 	.word	0x200009dc
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000a20 	.word	0x20000a20
 80032cc:	200000c0 	.word	0x200000c0
 80032d0:	408f4000 	.word	0x408f4000
 80032d4:	3fe00000 	.word	0x3fe00000
 80032d8:	20001b5c 	.word	0x20001b5c
 80032dc:	200006c8 	.word	0x200006c8
 80032e0:	20001a90 	.word	0x20001a90
 80032e4:	20000724 	.word	0x20000724
 80032e8:	20001cf4 	.word	0x20001cf4
 80032ec:	20000630 	.word	0x20000630
 80032f0:	48000800 	.word	0x48000800
 80032f4:	2000067c 	.word	0x2000067c
 80032f8:	200018f8 	.word	0x200018f8
 80032fc:	20000808 	.word	0x20000808
 8003300:	44fa0000 	.word	0x44fa0000
 8003304:	42c80000 	.word	0x42c80000
 8003308:	2edbe6ff 	.word	0x2edbe6ff
 800330c:	43480000 	.word	0x43480000
	PID_CONTROLLER_Init(&prismatic_position_pid, 200, 1e-10, 100,
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f7fd fb6e 	bl	80009f4 <__aeabi_d2f>
 8003318:	4603      	mov	r3, r0
 800331a:	ee01 3a90 	vmov	s3, r3
 800331e:	ed1f 1a07 	vldr	s2, [pc, #-28]	@ 8003304 <plotter_begin+0x3a8>
 8003322:	ed5f 0a07 	vldr	s1, [pc, #-28]	@ 8003308 <plotter_begin+0x3ac>
 8003326:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 800330c <plotter_begin+0x3b0>
 800332a:	4853      	ldr	r0, [pc, #332]	@ (8003478 <plotter_begin+0x51c>)
 800332c:	f7fd fe62 	bl	8000ff4 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 1, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8003330:	4b52      	ldr	r3, [pc, #328]	@ (800347c <plotter_begin+0x520>)
 8003332:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 1, 0,
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f7fd fb5b 	bl	80009f4 <__aeabi_d2f>
 800333e:	4603      	mov	r3, r0
 8003340:	ee01 3a90 	vmov	s3, r3
 8003344:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8003480 <plotter_begin+0x524>
 8003348:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800334c:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003484 <plotter_begin+0x528>
 8003350:	484d      	ldr	r0, [pc, #308]	@ (8003488 <plotter_begin+0x52c>)
 8003352:	f7fd fe4f 	bl	8000ff4 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
			ZGX45RGG_150RPM_Constant.qd_max);
 8003356:	4b4d      	ldr	r3, [pc, #308]	@ (800348c <plotter_begin+0x530>)
 8003358:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	f7fd fb48 	bl	80009f4 <__aeabi_d2f>
 8003364:	4603      	mov	r3, r0
 8003366:	ee01 3a90 	vmov	s3, r3
 800336a:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8003480 <plotter_begin+0x524>
 800336e:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8003490 <plotter_begin+0x534>
 8003372:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003376:	4847      	ldr	r0, [pc, #284]	@ (8003494 <plotter_begin+0x538>)
 8003378:	f7fd fe3c 	bl	8000ff4 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 800337c:	4b43      	ldr	r3, [pc, #268]	@ (800348c <plotter_begin+0x530>)
 800337e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fb35 	bl	80009f4 <__aeabi_d2f>
 800338a:	4603      	mov	r3, r0
 800338c:	ee01 3a90 	vmov	s3, r3
 8003390:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8003480 <plotter_begin+0x524>
 8003394:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8003498 <plotter_begin+0x53c>
 8003398:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800349c <plotter_begin+0x540>
 800339c:	4840      	ldr	r0, [pc, #256]	@ (80034a0 <plotter_begin+0x544>)
 800339e:	f7fd fe29 	bl	8000ff4 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80033a2:	493a      	ldr	r1, [pc, #232]	@ (800348c <plotter_begin+0x530>)
 80033a4:	483f      	ldr	r0, [pc, #252]	@ (80034a4 <plotter_begin+0x548>)
 80033a6:	f7fd ff4d 	bl	8001244 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80033aa:	4934      	ldr	r1, [pc, #208]	@ (800347c <plotter_begin+0x520>)
 80033ac:	483e      	ldr	r0, [pc, #248]	@ (80034a8 <plotter_begin+0x54c>)
 80033ae:	f7fd ff69 	bl	8001284 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80033b2:	4a3e      	ldr	r2, [pc, #248]	@ (80034ac <plotter_begin+0x550>)
 80033b4:	4935      	ldr	r1, [pc, #212]	@ (800348c <plotter_begin+0x530>)
 80033b6:	483e      	ldr	r0, [pc, #248]	@ (80034b0 <plotter_begin+0x554>)
 80033b8:	f7fd ff52 	bl	8001260 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80033bc:	4a3b      	ldr	r2, [pc, #236]	@ (80034ac <plotter_begin+0x550>)
 80033be:	492f      	ldr	r1, [pc, #188]	@ (800347c <plotter_begin+0x520>)
 80033c0:	483c      	ldr	r0, [pc, #240]	@ (80034b4 <plotter_begin+0x558>)
 80033c2:	f7fd ff6d 	bl	80012a0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80034b8 <plotter_begin+0x55c>
 80033ce:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80034bc <plotter_begin+0x560>
 80033d2:	2364      	movs	r3, #100	@ 0x64
 80033d4:	4a3a      	ldr	r2, [pc, #232]	@ (80034c0 <plotter_begin+0x564>)
 80033d6:	493b      	ldr	r1, [pc, #236]	@ (80034c4 <plotter_begin+0x568>)
 80033d8:	483b      	ldr	r0, [pc, #236]	@ (80034c8 <plotter_begin+0x56c>)
 80033da:	f7fd fcf1 	bl	8000dc0 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80033de:	2105      	movs	r1, #5
 80033e0:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80034cc <plotter_begin+0x570>
 80033e4:	4838      	ldr	r0, [pc, #224]	@ (80034c8 <plotter_begin+0x56c>)
 80033e6:	f7fd fd9d 	bl	8000f24 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80033ea:	4837      	ldr	r0, [pc, #220]	@ (80034c8 <plotter_begin+0x56c>)
 80033ec:	f7fd fd40 	bl	8000e70 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80033f0:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80034d0 <plotter_begin+0x574>
 80033f4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80033f8:	211f      	movs	r1, #31
 80033fa:	4836      	ldr	r0, [pc, #216]	@ (80034d4 <plotter_begin+0x578>)
 80033fc:	f7fd ff62 	bl	80012c4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003400:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80034d0 <plotter_begin+0x574>
 8003404:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003408:	211f      	movs	r1, #31
 800340a:	4833      	ldr	r0, [pc, #204]	@ (80034d8 <plotter_begin+0x57c>)
 800340c:	f7fd ff5a 	bl	80012c4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003410:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80034d0 <plotter_begin+0x574>
 8003414:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003418:	211f      	movs	r1, #31
 800341a:	4830      	ldr	r0, [pc, #192]	@ (80034dc <plotter_begin+0x580>)
 800341c:	f7fd ff52 	bl	80012c4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003420:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80034d0 <plotter_begin+0x574>
 8003424:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003428:	211f      	movs	r1, #31
 800342a:	482d      	ldr	r0, [pc, #180]	@ (80034e0 <plotter_begin+0x584>)
 800342c:	f7fd ff4a 	bl	80012c4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8003430:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 80034e4 <plotter_begin+0x588>
 8003434:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <plotter_begin+0x58c>)
 800343a:	492c      	ldr	r1, [pc, #176]	@ (80034ec <plotter_begin+0x590>)
 800343c:	482c      	ldr	r0, [pc, #176]	@ (80034f0 <plotter_begin+0x594>)
 800343e:	f7ff fae3 	bl	8002a08 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8003442:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80034e4 <plotter_begin+0x588>
 8003446:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800344a:	4a2a      	ldr	r2, [pc, #168]	@ (80034f4 <plotter_begin+0x598>)
 800344c:	492a      	ldr	r1, [pc, #168]	@ (80034f8 <plotter_begin+0x59c>)
 800344e:	482b      	ldr	r0, [pc, #172]	@ (80034fc <plotter_begin+0x5a0>)
 8003450:	f7ff fada 	bl	8002a08 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8003454:	23c8      	movs	r3, #200	@ 0xc8
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2315      	movs	r3, #21
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4b28      	ldr	r3, [pc, #160]	@ (8003500 <plotter_begin+0x5a4>)
 800345e:	4a29      	ldr	r2, [pc, #164]	@ (8003504 <plotter_begin+0x5a8>)
 8003460:	4929      	ldr	r1, [pc, #164]	@ (8003508 <plotter_begin+0x5ac>)
 8003462:	482a      	ldr	r0, [pc, #168]	@ (800350c <plotter_begin+0x5b0>)
 8003464:	f7fe f8c6 	bl	80015f4 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003468:	4829      	ldr	r0, [pc, #164]	@ (8003510 <plotter_begin+0x5b4>)
 800346a:	f004 fd61 	bl	8007f30 <HAL_TIM_Base_Start_IT>
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	ecbd 8b02 	vpop	{d8}
 8003476:	bdb0      	pop	{r4, r5, r7, pc}
 8003478:	20000780 	.word	0x20000780
 800347c:	20000060 	.word	0x20000060
 8003480:	00000000 	.word	0x00000000
 8003484:	42f00000 	.word	0x42f00000
 8003488:	2000079c 	.word	0x2000079c
 800348c:	20000000 	.word	0x20000000
 8003490:	3089705f 	.word	0x3089705f
 8003494:	200007b8 	.word	0x200007b8
 8003498:	42a00000 	.word	0x42a00000
 800349c:	44fa0000 	.word	0x44fa0000
 80034a0:	200007d4 	.word	0x200007d4
 80034a4:	200007fc 	.word	0x200007fc
 80034a8:	200007f0 	.word	0x200007f0
 80034ac:	200000c0 	.word	0x200000c0
 80034b0:	20000800 	.word	0x20000800
 80034b4:	200007f4 	.word	0x200007f4
 80034b8:	457ff000 	.word	0x457ff000
 80034bc:	40533333 	.word	0x40533333
 80034c0:	20001194 	.word	0x20001194
 80034c4:	200001f4 	.word	0x200001f4
 80034c8:	20000820 	.word	0x20000820
 80034cc:	45000000 	.word	0x45000000
 80034d0:	447a0000 	.word	0x447a0000
 80034d4:	20000a70 	.word	0x20000a70
 80034d8:	20000a64 	.word	0x20000a64
 80034dc:	20000a88 	.word	0x20000a88
 80034e0:	20000a7c 	.word	0x20000a7c
 80034e4:	3d4ccccd 	.word	0x3d4ccccd
 80034e8:	20000168 	.word	0x20000168
 80034ec:	20000128 	.word	0x20000128
 80034f0:	20000e14 	.word	0x20000e14
 80034f4:	20000118 	.word	0x20000118
 80034f8:	200000d8 	.word	0x200000d8
 80034fc:	20000a94 	.word	0x20000a94
 8003500:	20001734 	.word	0x20001734
 8003504:	20001dc0 	.word	0x20001dc0
 8003508:	20001f58 	.word	0x20001f58
 800350c:	2000125c 	.word	0x2000125c
 8003510:	200019c4 	.word	0x200019c4

08003514 <plotter_update_sensors>:
void plotter_reset() {
	QEI_reset(&prismatic_encoder);
	QEI_reset(&revolute_encoder);
}

void plotter_update_sensors() {
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 8003518:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8003680 <plotter_update_sensors+0x16c>
 800351c:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8003684 <plotter_update_sensors+0x170>
 8003520:	2106      	movs	r1, #6
 8003522:	4859      	ldr	r0, [pc, #356]	@ (8003688 <plotter_update_sensors+0x174>)
 8003524:	f7fd fd28 	bl	8000f78 <ADC_DMA_GetJoystickValue>
 8003528:	eef0 7a40 	vmov.f32	s15, s0
 800352c:	4b57      	ldr	r3, [pc, #348]	@ (800368c <plotter_update_sensors+0x178>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 8003532:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8003680 <plotter_update_sensors+0x16c>
 8003536:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8003684 <plotter_update_sensors+0x170>
 800353a:	2107      	movs	r1, #7
 800353c:	4852      	ldr	r0, [pc, #328]	@ (8003688 <plotter_update_sensors+0x174>)
 800353e:	f7fd fd1b 	bl	8000f78 <ADC_DMA_GetJoystickValue>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	4b52      	ldr	r3, [pc, #328]	@ (8003690 <plotter_update_sensors+0x17c>)
 8003548:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 800354c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003550:	4850      	ldr	r0, [pc, #320]	@ (8003694 <plotter_update_sensors+0x180>)
 8003552:	f003 fba1 	bl	8006c98 <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	4b4c      	ldr	r3, [pc, #304]	@ (8003698 <plotter_update_sensors+0x184>)
 8003566:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8003568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800356c:	4849      	ldr	r0, [pc, #292]	@ (8003694 <plotter_update_sensors+0x180>)
 800356e:	f003 fb93 	bl	8006c98 <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	4b46      	ldr	r3, [pc, #280]	@ (800369c <plotter_update_sensors+0x188>)
 8003582:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	4846      	ldr	r0, [pc, #280]	@ (80036a0 <plotter_update_sensors+0x18c>)
 8003588:	f003 fb86 	bl	8006c98 <HAL_GPIO_ReadPin>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <plotter_update_sensors+0x190>)
 800359c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800359e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a2:	483c      	ldr	r0, [pc, #240]	@ (8003694 <plotter_update_sensors+0x180>)
 80035a4:	f003 fb78 	bl	8006c98 <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b3c      	ldr	r3, [pc, #240]	@ (80036a8 <plotter_update_sensors+0x194>)
 80035b8:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80035ba:	2120      	movs	r1, #32
 80035bc:	4838      	ldr	r0, [pc, #224]	@ (80036a0 <plotter_update_sensors+0x18c>)
 80035be:	f003 fb6b 	bl	8006c98 <HAL_GPIO_ReadPin>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <plotter_update_sensors+0x198>)
 80035c8:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80035ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035ce:	4834      	ldr	r0, [pc, #208]	@ (80036a0 <plotter_update_sensors+0x18c>)
 80035d0:	f003 fb62 	bl	8006c98 <HAL_GPIO_ReadPin>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b35      	ldr	r3, [pc, #212]	@ (80036b0 <plotter_update_sensors+0x19c>)
 80035da:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80035dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035e4:	f003 fb58 	bl	8006c98 <HAL_GPIO_ReadPin>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <plotter_update_sensors+0x1a0>)
 80035ee:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80035f0:	2102      	movs	r1, #2
 80035f2:	482b      	ldr	r0, [pc, #172]	@ (80036a0 <plotter_update_sensors+0x18c>)
 80035f4:	f003 fb50 	bl	8006c98 <HAL_GPIO_ReadPin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b2e      	ldr	r3, [pc, #184]	@ (80036b8 <plotter_update_sensors+0x1a4>)
 80035fe:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8003600:	2104      	movs	r1, #4
 8003602:	4827      	ldr	r0, [pc, #156]	@ (80036a0 <plotter_update_sensors+0x18c>)
 8003604:	f003 fb48 	bl	8006c98 <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	4b2b      	ldr	r3, [pc, #172]	@ (80036bc <plotter_update_sensors+0x1a8>)
 800360e:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8003610:	2110      	movs	r1, #16
 8003612:	4823      	ldr	r0, [pc, #140]	@ (80036a0 <plotter_update_sensors+0x18c>)
 8003614:	f003 fb40 	bl	8006c98 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <plotter_update_sensors+0x1ac>)
 8003628:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <plotter_update_sensors+0x1a4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <plotter_update_sensors+0x126>
		servo_state = PEN_UP;
 8003632:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <plotter_update_sensors+0x1b0>)
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e00a      	b.n	8003650 <plotter_update_sensors+0x13c>
	} else if (low_lim) {
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <plotter_update_sensors+0x1a8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <plotter_update_sensors+0x136>
		servo_state = PEN_DOWN;
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <plotter_update_sensors+0x1b0>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e002      	b.n	8003650 <plotter_update_sensors+0x13c>
	} else {
		servo_state = PEN_IDLE;
 800364a:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <plotter_update_sensors+0x1b0>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8003650:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <plotter_update_sensors+0x19c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <plotter_update_sensors+0x14c>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <plotter_update_sensors+0x1b4>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e006      	b.n	800366e <plotter_update_sensors+0x15a>
	} else if (low_photo) {
 8003660:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <plotter_update_sensors+0x1a0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <plotter_update_sensors+0x15a>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8003668:	4b17      	ldr	r3, [pc, #92]	@ (80036c8 <plotter_update_sensors+0x1b4>)
 800366a:	2202      	movs	r2, #2
 800366c:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 800366e:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <plotter_update_sensors+0x198>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <plotter_update_sensors+0x168>
		revolute_state = RP_AT_HOME_POSITION;
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <plotter_update_sensors+0x1b8>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	42480000 	.word	0x42480000
 8003684:	c2480000 	.word	0xc2480000
 8003688:	20000820 	.word	0x20000820
 800368c:	200018c4 	.word	0x200018c4
 8003690:	200018c8 	.word	0x200018c8
 8003694:	48000800 	.word	0x48000800
 8003698:	200018e4 	.word	0x200018e4
 800369c:	200018e8 	.word	0x200018e8
 80036a0:	48000400 	.word	0x48000400
 80036a4:	200018ec 	.word	0x200018ec
 80036a8:	200018f0 	.word	0x200018f0
 80036ac:	200018cc 	.word	0x200018cc
 80036b0:	200018d4 	.word	0x200018d4
 80036b4:	200018d8 	.word	0x200018d8
 80036b8:	200018dc 	.word	0x200018dc
 80036bc:	200018e0 	.word	0x200018e0
 80036c0:	200018d0 	.word	0x200018d0
 80036c4:	2000062c 	.word	0x2000062c
 80036c8:	200000d5 	.word	0x200000d5
 80036cc:	200000d6 	.word	0x200000d6

080036d0 <plotter_pen_up>:

void plotter_pen_up() {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80036d4:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80036d8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80036e8 <plotter_pen_up+0x18>
 80036dc:	4803      	ldr	r0, [pc, #12]	@ (80036ec <plotter_pen_up+0x1c>)
 80036de:	f7fe fd11 	bl	8002104 <PWM_write_duty>
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	42480000 	.word	0x42480000
 80036ec:	20000808 	.word	0x20000808

080036f0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003708:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003710:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <SIGNAL_init+0xb4>)
 8003736:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d828      	bhi.n	8003798 <SIGNAL_init+0xa8>
 8003746:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <SIGNAL_init+0x5c>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003797 	.word	0x08003797
 8003750:	0800375d 	.word	0x0800375d
 8003754:	0800377b 	.word	0x0800377b
 8003758:	08003785 	.word	0x08003785
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003768:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0e      	ldr	r2, [pc, #56]	@ (80037a8 <SIGNAL_init+0xb8>)
 800376e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003776:	621a      	str	r2, [r3, #32]
            break;
 8003778:	e00e      	b.n	8003798 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003780:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8003782:	e009      	b.n	8003798 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003794:	e000      	b.n	8003798 <SIGNAL_init+0xa8>
            break;
 8003796:	bf00      	nop
    }
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	bf800000 	.word	0xbf800000
 80037a8:	41200000 	.word	0x41200000

080037ac <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	@ 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	61f8      	str	r0, [r7, #28]
 80037b4:	ed87 0a06 	vstr	s0, [r7, #24]
 80037b8:	edc7 0a05 	vstr	s1, [r7, #20]
 80037bc:	ed87 1a04 	vstr	s2, [r7, #16]
 80037c0:	edc7 1a03 	vstr	s3, [r7, #12]
 80037c4:	ed87 2a02 	vstr	s4, [r7, #8]
 80037c8:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80037f6:	bf00      	nop
 80037f8:	3724      	adds	r7, #36	@ 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003802:	b480      	push	{r7}
 8003804:	b089      	sub	sp, #36	@ 0x24
 8003806:	af00      	add	r7, sp, #0
 8003808:	61f8      	str	r0, [r7, #28]
 800380a:	ed87 0a06 	vstr	s0, [r7, #24]
 800380e:	edc7 0a05 	vstr	s1, [r7, #20]
 8003812:	ed87 1a04 	vstr	s2, [r7, #16]
 8003816:	edc7 1a03 	vstr	s3, [r7, #12]
 800381a:	ed87 2a02 	vstr	s4, [r7, #8]
 800381e:	edc7 2a01 	vstr	s5, [r7, #4]
 8003822:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2202      	movs	r2, #2
 800382a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003856:	bf00      	nop
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_MspInit+0x44>)
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	4a0e      	ldr	r2, [pc, #56]	@ (80038a8 <HAL_MspInit+0x44>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6613      	str	r3, [r2, #96]	@ 0x60
 8003876:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <HAL_MspInit+0x44>)
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_MspInit+0x44>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <HAL_MspInit+0x44>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	@ 0x58
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_MspInit+0x44>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800389a:	f003 fae9 	bl	8006e70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <NMI_Handler+0x4>

080038b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <HardFault_Handler+0x4>

080038bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <MemManage_Handler+0x4>

080038c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <BusFault_Handler+0x4>

080038cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <UsageFault_Handler+0x4>

080038d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003902:	f000 ff6f 	bl	80047e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003910:	4802      	ldr	r0, [pc, #8]	@ (800391c <DMA1_Channel1_IRQHandler+0x10>)
 8003912:	f002 fef0 	bl	80066f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000260 	.word	0x20000260

08003920 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003924:	4802      	ldr	r0, [pc, #8]	@ (8003930 <DMA1_Channel2_IRQHandler+0x10>)
 8003926:	f002 fee6 	bl	80066f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200020e4 	.word	0x200020e4

08003934 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003938:	4802      	ldr	r0, [pc, #8]	@ (8003944 <DMA1_Channel3_IRQHandler+0x10>)
 800393a:	f002 fedc 	bl	80066f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20002144 	.word	0x20002144

08003948 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800394c:	4802      	ldr	r0, [pc, #8]	@ (8003958 <DMA1_Channel4_IRQHandler+0x10>)
 800394e:	f002 fed2 	bl	80066f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20002024 	.word	0x20002024

0800395c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <DMA1_Channel5_IRQHandler+0x10>)
 8003962:	f002 fec8 	bl	80066f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20002084 	.word	0x20002084

08003970 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003974:	4803      	ldr	r0, [pc, #12]	@ (8003984 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003976:	f004 ff01 	bl	800877c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800397a:	4803      	ldr	r0, [pc, #12]	@ (8003988 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800397c:	f004 fefe 	bl	800877c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	200018f8 	.word	0x200018f8
 8003988:	20001dc0 	.word	0x20001dc0

0800398c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003990:	4802      	ldr	r0, [pc, #8]	@ (800399c <TIM2_IRQHandler+0x10>)
 8003992:	f004 fef3 	bl	800877c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200019c4 	.word	0x200019c4

080039a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <TIM3_IRQHandler+0x10>)
 80039a6:	f004 fee9 	bl	800877c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20001a90 	.word	0x20001a90

080039b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <TIM4_IRQHandler+0x10>)
 80039ba:	f004 fedf 	bl	800877c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20001b5c 	.word	0x20001b5c

080039c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <USART2_IRQHandler+0x10>)
 80039ce:	f006 fc29 	bl	800a224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20001f58 	.word	0x20001f58

080039dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039e4:	f003 f988 	bl	8006cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}

080039ec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <LPUART1_IRQHandler+0x10>)
 80039f2:	f006 fc17 	bl	800a224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001e8c 	.word	0x20001e8c

08003a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a08:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <_sbrk+0x5c>)
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <_sbrk+0x60>)
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <_sbrk+0x64>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <_sbrk+0x64>)
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <_sbrk+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a22:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <_sbrk+0x64>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a30:	f008 fa8a 	bl	800bf48 <__errno>
 8003a34:	4603      	mov	r3, r0
 8003a36:	220c      	movs	r2, #12
 8003a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	e009      	b.n	8003a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a46:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <_sbrk+0x64>)
 8003a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20020000 	.word	0x20020000
 8003a60:	00000400 	.word	0x00000400
 8003a64:	200018f4 	.word	0x200018f4
 8003a68:	200022f0 	.word	0x200022f0

08003a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <SystemInit+0x20>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <SystemInit+0x20>)
 8003a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b098      	sub	sp, #96	@ 0x60
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2234      	movs	r2, #52	@ 0x34
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f008 fa2b 	bl	800bf18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb4 <MX_TIM1_Init+0x124>)
 8003ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	4b38      	ldr	r3, [pc, #224]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ae2:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003aee:	4830      	ldr	r0, [pc, #192]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003af0:	f004 fa96 	bl	8008020 <HAL_TIM_PWM_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003afa:	f7ff fa29 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4827      	ldr	r0, [pc, #156]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003b12:	f006 f8a7 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b1c:	f7ff fa18 	bl	8002f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b20:	2360      	movs	r3, #96	@ 0x60
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b40:	220c      	movs	r2, #12
 8003b42:	4619      	mov	r1, r3
 8003b44:	481a      	ldr	r0, [pc, #104]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003b46:	f004 ff93 	bl	8008a70 <HAL_TIM_PWM_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b50:	f7ff f9fe 	bl	8002f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4807      	ldr	r0, [pc, #28]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003b92:	f006 f8fd 	bl	8009d90 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003b9c:	f7ff f9d8 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ba0:	4803      	ldr	r0, [pc, #12]	@ (8003bb0 <MX_TIM1_Init+0x120>)
 8003ba2:	f000 fb4f 	bl	8004244 <HAL_TIM_MspPostInit>

}
 8003ba6:	bf00      	nop
 8003ba8:	3760      	adds	r7, #96	@ 0x60
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200018f8 	.word	0x200018f8
 8003bb4:	40012c00 	.word	0x40012c00

08003bb8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bbe:	f107 0310 	add.w	r3, r7, #16
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003bd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003bde:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003be0:	22a9      	movs	r2, #169	@ 0xa9
 8003be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003bec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf2:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bfe:	4814      	ldr	r0, [pc, #80]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003c00:	f004 f8c2 	bl	8007d88 <HAL_TIM_Base_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c0a:	f7ff f9a1 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	4619      	mov	r1, r3
 8003c1a:	480d      	ldr	r0, [pc, #52]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003c1c:	f005 f83c 	bl	8008c98 <HAL_TIM_ConfigClockSource>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c26:	f7ff f993 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4806      	ldr	r0, [pc, #24]	@ (8003c50 <MX_TIM2_Init+0x98>)
 8003c38:	f006 f814 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c42:	f7ff f985 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c46:	bf00      	nop
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200019c4 	.word	0x200019c4

08003c54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	@ 0x30
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c5a:	f107 030c 	add.w	r3, r7, #12
 8003c5e:	2224      	movs	r2, #36	@ 0x24
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f008 f958 	bl	800bf18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c68:	463b      	mov	r3, r7
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c72:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c74:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <MX_TIM3_Init+0xa8>)
 8003c76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c84:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480d      	ldr	r0, [pc, #52]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003cc4:	f004 fc18 	bl	80084f8 <HAL_TIM_Encoder_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003cce:	f7ff f93f 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4806      	ldr	r0, [pc, #24]	@ (8003cf8 <MX_TIM3_Init+0xa4>)
 8003ce0:	f005 ffc0 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003cea:	f7ff f931 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	3730      	adds	r7, #48	@ 0x30
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20001a90 	.word	0x20001a90
 8003cfc:	40000400 	.word	0x40000400

08003d00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	@ 0x30
 8003d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d06:	f107 030c 	add.w	r3, r7, #12
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f008 f902 	bl	800bf18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d14:	463b      	mov	r3, r7
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d1e:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d20:	4a21      	ldr	r2, [pc, #132]	@ (8003da8 <MX_TIM4_Init+0xa8>)
 8003d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d30:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d38:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d44:	2303      	movs	r3, #3
 8003d46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	480d      	ldr	r0, [pc, #52]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d70:	f004 fbc2 	bl	80084f8 <HAL_TIM_Encoder_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003d7a:	f7ff f8e9 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d86:	463b      	mov	r3, r7
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4806      	ldr	r0, [pc, #24]	@ (8003da4 <MX_TIM4_Init+0xa4>)
 8003d8c:	f005 ff6a 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003d96:	f7ff f8db 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d9a:	bf00      	nop
 8003d9c:	3730      	adds	r7, #48	@ 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001b5c 	.word	0x20001b5c
 8003da8:	40000800 	.word	0x40000800

08003dac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003dca:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <MX_TIM5_Init+0x98>)
 8003dce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003dd2:	22a9      	movs	r2, #169	@ 0xa9
 8003dd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003ddc:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de4:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003df0:	4813      	ldr	r0, [pc, #76]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003df2:	f003 ffc9 	bl	8007d88 <HAL_TIM_Base_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003dfc:	f7ff f8a8 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e06:	f107 0310 	add.w	r3, r7, #16
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	480c      	ldr	r0, [pc, #48]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003e0e:	f004 ff43 	bl	8008c98 <HAL_TIM_ConfigClockSource>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003e18:	f7ff f89a 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4805      	ldr	r0, [pc, #20]	@ (8003e40 <MX_TIM5_Init+0x94>)
 8003e2a:	f005 ff1b 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003e34:	f7ff f88c 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20001c28 	.word	0x20001c28
 8003e44:	40000c00 	.word	0x40000c00

08003e48 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b09c      	sub	sp, #112	@ 0x70
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
 8003e78:	615a      	str	r2, [r3, #20]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2234      	movs	r2, #52	@ 0x34
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f008 f848 	bl	800bf18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003e8a:	4a4c      	ldr	r2, [pc, #304]	@ (8003fbc <MX_TIM8_Init+0x174>)
 8003e8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e94:	4b48      	ldr	r3, [pc, #288]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ea0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea2:	4b45      	ldr	r3, [pc, #276]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ea8:	4b43      	ldr	r3, [pc, #268]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eae:	4b42      	ldr	r3, [pc, #264]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003eb4:	4840      	ldr	r0, [pc, #256]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003eb6:	f003 ff67 	bl	8007d88 <HAL_TIM_Base_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003ec0:	f7ff f846 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ec8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003eca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4839      	ldr	r0, [pc, #228]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003ed2:	f004 fee1 	bl	8008c98 <HAL_TIM_ConfigClockSource>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003edc:	f7ff f838 	bl	8002f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003ee0:	4835      	ldr	r0, [pc, #212]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003ee2:	f004 f89d 	bl	8008020 <HAL_TIM_PWM_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003eec:	f7ff f830 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003efc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f00:	4619      	mov	r1, r3
 8003f02:	482d      	ldr	r0, [pc, #180]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003f04:	f005 feae 	bl	8009c64 <HAL_TIMEx_MasterConfigSynchronization>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003f0e:	f7ff f81f 	bl	8002f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f12:	2360      	movs	r3, #96	@ 0x60
 8003f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f32:	2200      	movs	r2, #0
 8003f34:	4619      	mov	r1, r3
 8003f36:	4820      	ldr	r0, [pc, #128]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003f38:	f004 fd9a 	bl	8008a70 <HAL_TIM_PWM_ConfigChannel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003f42:	f7ff f805 	bl	8002f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	481a      	ldr	r0, [pc, #104]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003f50:	f004 fd8e 	bl	8008a70 <HAL_TIM_PWM_ConfigChannel>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003f5a:	f7fe fff9 	bl	8002f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4807      	ldr	r0, [pc, #28]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003f9c:	f005 fef8 	bl	8009d90 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8003fa6:	f7fe ffd3 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003faa:	4803      	ldr	r0, [pc, #12]	@ (8003fb8 <MX_TIM8_Init+0x170>)
 8003fac:	f000 f94a 	bl	8004244 <HAL_TIM_MspPostInit>

}
 8003fb0:	bf00      	nop
 8003fb2:	3770      	adds	r7, #112	@ 0x70
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20001cf4 	.word	0x20001cf4
 8003fbc:	40013400 	.word	0x40013400

08003fc0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fc6:	4a15      	ldr	r2, [pc, #84]	@ (800401c <MX_TIM16_Init+0x5c>)
 8003fc8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003fca:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fcc:	22a9      	movs	r2, #169	@ 0xa9
 8003fce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd0:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003fd6:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fd8:	f240 4279 	movw	r2, #1145	@ 0x479
 8003fdc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fde:	4b0e      	ldr	r3, [pc, #56]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003ff0:	4809      	ldr	r0, [pc, #36]	@ (8004018 <MX_TIM16_Init+0x58>)
 8003ff2:	f003 fec9 	bl	8007d88 <HAL_TIM_Base_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003ffc:	f7fe ffa8 	bl	8002f50 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004000:	2108      	movs	r1, #8
 8004002:	4805      	ldr	r0, [pc, #20]	@ (8004018 <MX_TIM16_Init+0x58>)
 8004004:	f004 f982 	bl	800830c <HAL_TIM_OnePulse_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800400e:	f7fe ff9f 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20001dc0 	.word	0x20001dc0
 800401c:	40014400 	.word	0x40014400

08004020 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <HAL_TIM_PWM_MspInit+0x44>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d113      	bne.n	800405a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <HAL_TIM_PWM_MspInit+0x48>)
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	4a0c      	ldr	r2, [pc, #48]	@ (8004068 <HAL_TIM_PWM_MspInit+0x48>)
 8004038:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800403c:	6613      	str	r3, [r2, #96]	@ 0x60
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_TIM_PWM_MspInit+0x48>)
 8004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	2019      	movs	r0, #25
 8004050:	f002 f939 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004054:	2019      	movs	r0, #25
 8004056:	f002 f950 	bl	80062fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d114      	bne.n	80040a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800407e:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	4a2a      	ldr	r2, [pc, #168]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6593      	str	r3, [r2, #88]	@ 0x58
 800408a:	4b28      	ldr	r3, [pc, #160]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004096:	2200      	movs	r2, #0
 8004098:	2100      	movs	r1, #0
 800409a:	201c      	movs	r0, #28
 800409c:	f002 f913 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040a0:	201c      	movs	r0, #28
 80040a2:	f002 f92a 	bl	80062fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80040a6:	e03c      	b.n	8004122 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_TIM_Base_MspInit+0xc4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040b8:	f043 0308 	orr.w	r3, r3, #8
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040be:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
}
 80040ca:	e02a      	b.n	8004122 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <HAL_TIM_Base_MspInit+0xc8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10c      	bne.n	80040f0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	4a14      	ldr	r2, [pc, #80]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	e018      	b.n	8004122 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a10      	ldr	r2, [pc, #64]	@ (8004138 <HAL_TIM_Base_MspInit+0xcc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d113      	bne.n	8004122 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80040fa:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 80040fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fe:	4a0b      	ldr	r2, [pc, #44]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 8004100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004104:	6613      	str	r3, [r2, #96]	@ 0x60
 8004106:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_TIM_Base_MspInit+0xc0>)
 8004108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	2100      	movs	r1, #0
 8004116:	2019      	movs	r0, #25
 8004118:	f002 f8d5 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800411c:	2019      	movs	r0, #25
 800411e:	f002 f8ec 	bl	80062fa <HAL_NVIC_EnableIRQ>
}
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014400 	.word	0x40014400

0800413c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	@ 0x30
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a37      	ldr	r2, [pc, #220]	@ (8004238 <HAL_TIM_Encoder_MspInit+0xfc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d131      	bne.n	80041c2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800415e:	4b37      	ldr	r3, [pc, #220]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	4a36      	ldr	r2, [pc, #216]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	6593      	str	r3, [r2, #88]	@ 0x58
 800416a:	4b34      	ldr	r3, [pc, #208]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004176:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	4a30      	ldr	r2, [pc, #192]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004182:	4b2e      	ldr	r3, [pc, #184]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800418e:	23c0      	movs	r3, #192	@ 0xc0
 8004190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	2300      	movs	r3, #0
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800419e:	2302      	movs	r3, #2
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a2:	f107 031c 	add.w	r3, r7, #28
 80041a6:	4619      	mov	r1, r3
 80041a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041ac:	f002 fbf2 	bl	8006994 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041b0:	2200      	movs	r2, #0
 80041b2:	2100      	movs	r1, #0
 80041b4:	201d      	movs	r0, #29
 80041b6:	f002 f886 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041ba:	201d      	movs	r0, #29
 80041bc:	f002 f89d 	bl	80062fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80041c0:	e036      	b.n	8004230 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_TIM_Encoder_MspInit+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d131      	bne.n	8004230 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	4a1a      	ldr	r2, [pc, #104]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e4:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e8:	4a14      	ldr	r2, [pc, #80]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_TIM_Encoder_MspInit+0x100>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800420e:	230a      	movs	r3, #10
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 031c 	add.w	r3, r7, #28
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800421c:	f002 fbba 	bl	8006994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	201e      	movs	r0, #30
 8004226:	f002 f84e 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800422a:	201e      	movs	r0, #30
 800422c:	f002 f865 	bl	80062fa <HAL_NVIC_EnableIRQ>
}
 8004230:	bf00      	nop
 8004232:	3730      	adds	r7, #48	@ 0x30
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40000400 	.word	0x40000400
 800423c:	40021000 	.word	0x40021000
 8004240:	40000800 	.word	0x40000800

08004244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	@ 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a22      	ldr	r2, [pc, #136]	@ (80042ec <HAL_TIM_MspPostInit+0xa8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d11c      	bne.n	80042a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004266:	4b22      	ldr	r3, [pc, #136]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	4a21      	ldr	r2, [pc, #132]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004272:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800427e:	2308      	movs	r3, #8
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800428e:	2302      	movs	r3, #2
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	4816      	ldr	r0, [pc, #88]	@ (80042f4 <HAL_TIM_MspPostInit+0xb0>)
 800429a:	f002 fb7b 	bl	8006994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800429e:	e020      	b.n	80042e2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <HAL_TIM_MspPostInit+0xb4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d11b      	bne.n	80042e2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042aa:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042b6:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <HAL_TIM_MspPostInit+0xac>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042c2:	23c0      	movs	r3, #192	@ 0xc0
 80042c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80042d2:	2304      	movs	r3, #4
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <HAL_TIM_MspPostInit+0xb0>)
 80042de:	f002 fb59 	bl	8006994 <HAL_GPIO_Init>
}
 80042e2:	bf00      	nop
 80042e4:	3728      	adds	r7, #40	@ 0x28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	48000800 	.word	0x48000800
 80042f8:	40013400 	.word	0x40013400

080042fc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004300:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004302:	4a21      	ldr	r2, [pc, #132]	@ (8004388 <MX_LPUART1_UART_Init+0x8c>)
 8004304:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8004306:	4b1f      	ldr	r3, [pc, #124]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004308:	4a20      	ldr	r2, [pc, #128]	@ (800438c <MX_LPUART1_UART_Init+0x90>)
 800430a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430c:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004312:	4b1c      	ldr	r3, [pc, #112]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004318:	4b1a      	ldr	r3, [pc, #104]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800431e:	4b19      	ldr	r3, [pc, #100]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004320:	220c      	movs	r2, #12
 8004322:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004324:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004326:	2200      	movs	r2, #0
 8004328:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800432a:	4b16      	ldr	r3, [pc, #88]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004330:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004332:	2200      	movs	r2, #0
 8004334:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004336:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800433c:	4811      	ldr	r0, [pc, #68]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 800433e:	f005 fe0b 	bl	8009f58 <HAL_UART_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8004348:	f7fe fe02 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800434c:	2100      	movs	r1, #0
 800434e:	480d      	ldr	r0, [pc, #52]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004350:	f007 fb5e 	bl	800ba10 <HAL_UARTEx_SetTxFifoThreshold>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800435a:	f7fe fdf9 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800435e:	2100      	movs	r1, #0
 8004360:	4808      	ldr	r0, [pc, #32]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004362:	f007 fb93 	bl	800ba8c <HAL_UARTEx_SetRxFifoThreshold>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800436c:	f7fe fdf0 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004370:	4804      	ldr	r0, [pc, #16]	@ (8004384 <MX_LPUART1_UART_Init+0x88>)
 8004372:	f007 fb14 	bl	800b99e <HAL_UARTEx_DisableFifoMode>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800437c:	f7fe fde8 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20001e8c 	.word	0x20001e8c
 8004388:	40008000 	.word	0x40008000
 800438c:	001e8480 	.word	0x001e8480

08004390 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004394:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 8004396:	4a24      	ldr	r2, [pc, #144]	@ (8004428 <MX_USART2_UART_Init+0x98>)
 8004398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800439a:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 800439c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80043a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80043a2:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043a8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043ba:	220c      	movs	r2, #12
 80043bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043ca:	4b16      	ldr	r3, [pc, #88]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043d0:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043d6:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043dc:	4811      	ldr	r0, [pc, #68]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043de:	f005 fdbb 	bl	8009f58 <HAL_UART_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80043e8:	f7fe fdb2 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ec:	2100      	movs	r1, #0
 80043ee:	480d      	ldr	r0, [pc, #52]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 80043f0:	f007 fb0e 	bl	800ba10 <HAL_UARTEx_SetTxFifoThreshold>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80043fa:	f7fe fda9 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043fe:	2100      	movs	r1, #0
 8004400:	4808      	ldr	r0, [pc, #32]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 8004402:	f007 fb43 	bl	800ba8c <HAL_UARTEx_SetRxFifoThreshold>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800440c:	f7fe fda0 	bl	8002f50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004410:	4804      	ldr	r0, [pc, #16]	@ (8004424 <MX_USART2_UART_Init+0x94>)
 8004412:	f007 fac4 	bl	800b99e <HAL_UARTEx_DisableFifoMode>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800441c:	f7fe fd98 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20001f58 	.word	0x20001f58
 8004428:	40004400 	.word	0x40004400

0800442c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0a0      	sub	sp, #128	@ 0x80
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004444:	f107 0318 	add.w	r3, r7, #24
 8004448:	2254      	movs	r2, #84	@ 0x54
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f007 fd63 	bl	800bf18 <memset>
  if(uartHandle->Instance==LPUART1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a99      	ldr	r2, [pc, #612]	@ (80046bc <HAL_UART_MspInit+0x290>)
 8004458:	4293      	cmp	r3, r2
 800445a:	f040 8093 	bne.w	8004584 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800445e:	2320      	movs	r3, #32
 8004460:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004462:	2300      	movs	r3, #0
 8004464:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004466:	f107 0318 	add.w	r3, r7, #24
 800446a:	4618      	mov	r0, r3
 800446c:	f003 fa3e 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004476:	f7fe fd6b 	bl	8002f50 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800447a:	4b91      	ldr	r3, [pc, #580]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	4a90      	ldr	r2, [pc, #576]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004486:	4b8e      	ldr	r3, [pc, #568]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004492:	4b8b      	ldr	r3, [pc, #556]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	4a8a      	ldr	r2, [pc, #552]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449e:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80044aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80044ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b0:	2302      	movs	r3, #2
 80044b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b8:	2300      	movs	r3, #0
 80044ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80044bc:	2308      	movs	r3, #8
 80044be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044c4:	4619      	mov	r1, r3
 80044c6:	487f      	ldr	r0, [pc, #508]	@ (80046c4 <HAL_UART_MspInit+0x298>)
 80044c8:	f002 fa64 	bl	8006994 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80044cc:	4b7e      	ldr	r3, [pc, #504]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044ce:	4a7f      	ldr	r2, [pc, #508]	@ (80046cc <HAL_UART_MspInit+0x2a0>)
 80044d0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80044d2:	4b7d      	ldr	r3, [pc, #500]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044d4:	2222      	movs	r2, #34	@ 0x22
 80044d6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044d8:	4b7b      	ldr	r3, [pc, #492]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044de:	4b7a      	ldr	r3, [pc, #488]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044e4:	4b78      	ldr	r3, [pc, #480]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044e6:	2280      	movs	r2, #128	@ 0x80
 80044e8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ea:	4b77      	ldr	r3, [pc, #476]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044f0:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80044f6:	4b74      	ldr	r3, [pc, #464]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044fc:	4b72      	ldr	r3, [pc, #456]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004502:	4871      	ldr	r0, [pc, #452]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 8004504:	f001 ff14 	bl	8006330 <HAL_DMA_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800450e:	f7fe fd1f 	bl	8002f50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a6c      	ldr	r2, [pc, #432]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800451a:	4a6b      	ldr	r2, [pc, #428]	@ (80046c8 <HAL_UART_MspInit+0x29c>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8004520:	4b6b      	ldr	r3, [pc, #428]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004522:	4a6c      	ldr	r2, [pc, #432]	@ (80046d4 <HAL_UART_MspInit+0x2a8>)
 8004524:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004528:	2223      	movs	r2, #35	@ 0x23
 800452a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800452c:	4b68      	ldr	r3, [pc, #416]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 800452e:	2210      	movs	r2, #16
 8004530:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004532:	4b67      	ldr	r3, [pc, #412]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004534:	2200      	movs	r2, #0
 8004536:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004538:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 800453a:	2280      	movs	r2, #128	@ 0x80
 800453c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800453e:	4b64      	ldr	r3, [pc, #400]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004540:	2200      	movs	r2, #0
 8004542:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004544:	4b62      	ldr	r3, [pc, #392]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004546:	2200      	movs	r2, #0
 8004548:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800454a:	4b61      	ldr	r3, [pc, #388]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 800454c:	2200      	movs	r2, #0
 800454e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004550:	4b5f      	ldr	r3, [pc, #380]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004552:	2200      	movs	r2, #0
 8004554:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004556:	485e      	ldr	r0, [pc, #376]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 8004558:	f001 feea 	bl	8006330 <HAL_DMA_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004562:	f7fe fcf5 	bl	8002f50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a59      	ldr	r2, [pc, #356]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 800456a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800456c:	4a58      	ldr	r2, [pc, #352]	@ (80046d0 <HAL_UART_MspInit+0x2a4>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004572:	2200      	movs	r2, #0
 8004574:	2100      	movs	r1, #0
 8004576:	205b      	movs	r0, #91	@ 0x5b
 8004578:	f001 fea5 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800457c:	205b      	movs	r0, #91	@ 0x5b
 800457e:	f001 febc 	bl	80062fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004582:	e097      	b.n	80046b4 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a53      	ldr	r2, [pc, #332]	@ (80046d8 <HAL_UART_MspInit+0x2ac>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f040 8092 	bne.w	80046b4 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004590:	2302      	movs	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004594:	2300      	movs	r3, #0
 8004596:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004598:	f107 0318 	add.w	r3, r7, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f003 f9a5 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_MspInit+0x180>
      Error_Handler();
 80045a8:	f7fe fcd2 	bl	8002f50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045ac:	4b44      	ldr	r3, [pc, #272]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	4a43      	ldr	r2, [pc, #268]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b8:	4b41      	ldr	r3, [pc, #260]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	4b3e      	ldr	r3, [pc, #248]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c8:	4a3d      	ldr	r2, [pc, #244]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045d0:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_UART_MspInit+0x294>)
 80045d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045dc:	230c      	movs	r3, #12
 80045de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e0:	2302      	movs	r3, #2
 80045e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e8:	2300      	movs	r3, #0
 80045ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045ec:	2307      	movs	r3, #7
 80045ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045fa:	f002 f9cb 	bl	8006994 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80045fe:	4b37      	ldr	r3, [pc, #220]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004600:	4a37      	ldr	r2, [pc, #220]	@ (80046e0 <HAL_UART_MspInit+0x2b4>)
 8004602:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004604:	4b35      	ldr	r3, [pc, #212]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004606:	221a      	movs	r2, #26
 8004608:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800460a:	4b34      	ldr	r3, [pc, #208]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004610:	4b32      	ldr	r3, [pc, #200]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004616:	4b31      	ldr	r3, [pc, #196]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800461c:	4b2f      	ldr	r3, [pc, #188]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004622:	4b2e      	ldr	r3, [pc, #184]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004628:	4b2c      	ldr	r3, [pc, #176]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800462e:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004630:	2200      	movs	r2, #0
 8004632:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004634:	4829      	ldr	r0, [pc, #164]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004636:	f001 fe7b 	bl	8006330 <HAL_DMA_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8004640:	f7fe fc86 	bl	8002f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a25      	ldr	r2, [pc, #148]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 8004648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800464c:	4a23      	ldr	r2, [pc, #140]	@ (80046dc <HAL_UART_MspInit+0x2b0>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004654:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <HAL_UART_MspInit+0x2bc>)
 8004656:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 800465a:	221b      	movs	r2, #27
 800465c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800465e:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004660:	2210      	movs	r2, #16
 8004662:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004666:	2200      	movs	r2, #0
 8004668:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466a:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 800466c:	2280      	movs	r2, #128	@ 0x80
 800466e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004670:	4b1c      	ldr	r3, [pc, #112]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004672:	2200      	movs	r2, #0
 8004674:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004676:	4b1b      	ldr	r3, [pc, #108]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800467c:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004682:	4b18      	ldr	r3, [pc, #96]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 8004684:	2200      	movs	r2, #0
 8004686:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004688:	4816      	ldr	r0, [pc, #88]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 800468a:	f001 fe51 	bl	8006330 <HAL_DMA_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8004694:	f7fe fc5c 	bl	8002f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a12      	ldr	r2, [pc, #72]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 800469c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800469e:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <HAL_UART_MspInit+0x2b8>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	2026      	movs	r0, #38	@ 0x26
 80046aa:	f001 fe0c 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046ae:	2026      	movs	r0, #38	@ 0x26
 80046b0:	f001 fe23 	bl	80062fa <HAL_NVIC_EnableIRQ>
}
 80046b4:	bf00      	nop
 80046b6:	3780      	adds	r7, #128	@ 0x80
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40008000 	.word	0x40008000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	48000400 	.word	0x48000400
 80046c8:	20002024 	.word	0x20002024
 80046cc:	40020044 	.word	0x40020044
 80046d0:	20002084 	.word	0x20002084
 80046d4:	40020058 	.word	0x40020058
 80046d8:	40004400 	.word	0x40004400
 80046dc:	200020e4 	.word	0x200020e4
 80046e0:	4002001c 	.word	0x4002001c
 80046e4:	20002144 	.word	0x20002144
 80046e8:	40020030 	.word	0x40020030

080046ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046ec:	480d      	ldr	r0, [pc, #52]	@ (8004724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046f0:	f7ff f9bc 	bl	8003a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046f4:	480c      	ldr	r0, [pc, #48]	@ (8004728 <LoopForever+0x6>)
  ldr r1, =_edata
 80046f6:	490d      	ldr	r1, [pc, #52]	@ (800472c <LoopForever+0xa>)
  ldr r2, =_sidata
 80046f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <LoopForever+0xe>)
  movs r3, #0
 80046fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80046fc:	e002      	b.n	8004704 <LoopCopyDataInit>

080046fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004702:	3304      	adds	r3, #4

08004704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004708:	d3f9      	bcc.n	80046fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800470a:	4a0a      	ldr	r2, [pc, #40]	@ (8004734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800470c:	4c0a      	ldr	r4, [pc, #40]	@ (8004738 <LoopForever+0x16>)
  movs r3, #0
 800470e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004710:	e001      	b.n	8004716 <LoopFillZerobss>

08004712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004714:	3204      	adds	r2, #4

08004716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004718:	d3fb      	bcc.n	8004712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800471a:	f007 fc1b 	bl	800bf54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800471e:	f7fe fb2f 	bl	8002d80 <main>

08004722 <LoopForever>:

LoopForever:
    b LoopForever
 8004722:	e7fe      	b.n	8004722 <LoopForever>
  ldr   r0, =_estack
 8004724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800472c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004730:	0800cf44 	.word	0x0800cf44
  ldr r2, =_sbss
 8004734:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004738:	200022f0 	.word	0x200022f0

0800473c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800473c:	e7fe      	b.n	800473c <ADC1_2_IRQHandler>

0800473e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004748:	2003      	movs	r0, #3
 800474a:	f001 fdb1 	bl	80062b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800474e:	2000      	movs	r0, #0
 8004750:	f000 f80e 	bl	8004770 <HAL_InitTick>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	71fb      	strb	r3, [r7, #7]
 800475e:	e001      	b.n	8004764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004760:	f7ff f880 	bl	8003864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004764:	79fb      	ldrb	r3, [r7, #7]

}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800477c:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <HAL_InitTick+0x68>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004784:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <HAL_InitTick+0x6c>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <HAL_InitTick+0x68>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004790:	fbb1 f3f3 	udiv	r3, r1, r3
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fdbc 	bl	8006316 <HAL_SYSTICK_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10f      	bne.n	80047c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d809      	bhi.n	80047be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047aa:	2200      	movs	r2, #0
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	f001 fd88 	bl	80062c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047b6:	4a0a      	ldr	r2, [pc, #40]	@ (80047e0 <HAL_InitTick+0x70>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e007      	b.n	80047ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e004      	b.n	80047ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000180 	.word	0x20000180
 80047dc:	20000178 	.word	0x20000178
 80047e0:	2000017c 	.word	0x2000017c

080047e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047e8:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <HAL_IncTick+0x1c>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_IncTick+0x20>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a03      	ldr	r2, [pc, #12]	@ (8004800 <HAL_IncTick+0x1c>)
 80047f4:	6013      	str	r3, [r2, #0]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	200021a4 	.word	0x200021a4
 8004804:	20000180 	.word	0x20000180

08004808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return uwTick;
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <HAL_GetTick+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	200021a4 	.word	0x200021a4

08004820 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3360      	adds	r3, #96	@ 0x60
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <LL_ADC_SetOffset+0x44>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	03fff000 	.word	0x03fff000

080048d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3360      	adds	r3, #96	@ 0x60
 80048de:	461a      	mov	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3360      	adds	r3, #96	@ 0x60
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	431a      	orrs	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3360      	adds	r3, #96	@ 0x60
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	431a      	orrs	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3360      	adds	r3, #96	@ 0x60
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	431a      	orrs	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	615a      	str	r2, [r3, #20]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3330      	adds	r3, #48	@ 0x30
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	4413      	add	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	211f      	movs	r1, #31
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	401a      	ands	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0e9b      	lsrs	r3, r3, #26
 8004a22:	f003 011f 	and.w	r1, r3, #31
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	431a      	orrs	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3314      	adds	r3, #20
 8004a52:	461a      	mov	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	0e5b      	lsrs	r3, r3, #25
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	0d1b      	lsrs	r3, r3, #20
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2107      	movs	r1, #7
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	0d1b      	lsrs	r3, r3, #20
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	431a      	orrs	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0318 	and.w	r3, r3, #24
 8004aba:	4908      	ldr	r1, [pc, #32]	@ (8004adc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004abc:	40d9      	lsrs	r1, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	0007ffff 	.word	0x0007ffff

08004ae0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 031f 	and.w	r3, r3, #31
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6093      	str	r3, [r2, #8]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b84:	d101      	bne.n	8004b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bd4:	f043 0202 	orr.w	r2, r3, #2
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <LL_ADC_IsEnabled+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_ADC_IsEnabled+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d101      	bne.n	8004c26 <LL_ADC_IsDisableOngoing+0x18>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_ADC_IsDisableOngoing+0x1a>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c48:	f043 0204 	orr.w	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d101      	bne.n	8004c74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d101      	bne.n	8004c9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e1a9      	b.n	8005016 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fd fd1b 	bl	800270c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff19 	bl	8004b20 <LL_ADC_IsDeepPowerDownEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff feff 	bl	8004afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff34 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d115      	bne.n	8004d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff18 	bl	8004b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d18:	4b9c      	ldr	r3, [pc, #624]	@ (8004f8c <HAL_ADC_Init+0x2e4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	4a9c      	ldr	r2, [pc, #624]	@ (8004f90 <HAL_ADC_Init+0x2e8>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d2c:	e002      	b.n	8004d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f9      	bne.n	8004d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff16 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	f043 0210 	orr.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff76 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 8004d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 8142 	bne.w	8005004 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f040 813e 	bne.w	8005004 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff23 	bl	8004be8 <LL_ADC_IsEnabled>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d141      	bne.n	8004e2c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db0:	d004      	beq.n	8004dbc <HAL_ADC_Init+0x114>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a77      	ldr	r2, [pc, #476]	@ (8004f94 <HAL_ADC_Init+0x2ec>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10f      	bne.n	8004ddc <HAL_ADC_Init+0x134>
 8004dbc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dc0:	f7ff ff12 	bl	8004be8 <LL_ADC_IsEnabled>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	4873      	ldr	r0, [pc, #460]	@ (8004f94 <HAL_ADC_Init+0x2ec>)
 8004dc8:	f7ff ff0e 	bl	8004be8 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4323      	orrs	r3, r4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e012      	b.n	8004e02 <HAL_ADC_Init+0x15a>
 8004ddc:	486e      	ldr	r0, [pc, #440]	@ (8004f98 <HAL_ADC_Init+0x2f0>)
 8004dde:	f7ff ff03 	bl	8004be8 <LL_ADC_IsEnabled>
 8004de2:	4604      	mov	r4, r0
 8004de4:	486d      	ldr	r0, [pc, #436]	@ (8004f9c <HAL_ADC_Init+0x2f4>)
 8004de6:	f7ff feff 	bl	8004be8 <LL_ADC_IsEnabled>
 8004dea:	4603      	mov	r3, r0
 8004dec:	431c      	orrs	r4, r3
 8004dee:	486c      	ldr	r0, [pc, #432]	@ (8004fa0 <HAL_ADC_Init+0x2f8>)
 8004df0:	f7ff fefa 	bl	8004be8 <LL_ADC_IsEnabled>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4323      	orrs	r3, r4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d004      	beq.n	8004e1a <HAL_ADC_Init+0x172>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5f      	ldr	r2, [pc, #380]	@ (8004f94 <HAL_ADC_Init+0x2ec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_Init+0x176>
 8004e1a:	4a62      	ldr	r2, [pc, #392]	@ (8004fa4 <HAL_ADC_Init+0x2fc>)
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_Init+0x178>
 8004e1e:	4a62      	ldr	r2, [pc, #392]	@ (8004fa8 <HAL_ADC_Init+0x300>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7ff fcfa 	bl	8004820 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7f5b      	ldrb	r3, [r3, #29]
 8004e30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d106      	bne.n	8004e68 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	045b      	lsls	r3, r3, #17
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	4b48      	ldr	r3, [pc, #288]	@ (8004fac <HAL_ADC_Init+0x304>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	69b9      	ldr	r1, [r7, #24]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fee5 	bl	8004c82 <LL_ADC_INJ_IsConversionOngoing>
 8004eb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d17f      	bne.n	8004fc0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d17c      	bne.n	8004fc0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ed2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee2:	f023 0302 	bic.w	r3, r3, #2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	430b      	orrs	r3, r1
 8004eee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6911      	ldr	r1, [r2, #16]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f26:	e013      	b.n	8004f50 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12a      	bne.n	8004fb0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f76:	4311      	orrs	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e019      	b.n	8004fc0 <HAL_ADC_Init+0x318>
 8004f8c:	20000178 	.word	0x20000178
 8004f90:	053e2d63 	.word	0x053e2d63
 8004f94:	50000100 	.word	0x50000100
 8004f98:	50000400 	.word	0x50000400
 8004f9c:	50000500 	.word	0x50000500
 8004fa0:	50000600 	.word	0x50000600
 8004fa4:	50000300 	.word	0x50000300
 8004fa8:	50000700 	.word	0x50000700
 8004fac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	f023 010f 	bic.w	r1, r3, #15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fe0:	e007      	b.n	8004ff2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 020f 	bic.w	r2, r2, #15
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0201 	orr.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005002:	e007      	b.n	8005014 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	f043 0210 	orr.w	r2, r3, #16
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005014:	7ffb      	ldrb	r3, [r7, #31]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	@ 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	bf00      	nop

08005020 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005034:	d004      	beq.n	8005040 <HAL_ADC_Start_DMA+0x20>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5a      	ldr	r2, [pc, #360]	@ (80051a4 <HAL_ADC_Start_DMA+0x184>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_ADC_Start_DMA+0x24>
 8005040:	4b59      	ldr	r3, [pc, #356]	@ (80051a8 <HAL_ADC_Start_DMA+0x188>)
 8005042:	e000      	b.n	8005046 <HAL_ADC_Start_DMA+0x26>
 8005044:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_ADC_Start_DMA+0x18c>)
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fd4a 	bl	8004ae0 <LL_ADC_GetMultimode>
 800504c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fe02 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 809b 	bne.w	8005196 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_ADC_Start_DMA+0x4e>
 800506a:	2302      	movs	r3, #2
 800506c:	e096      	b.n	800519c <HAL_ADC_Start_DMA+0x17c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4d      	ldr	r2, [pc, #308]	@ (80051b0 <HAL_ADC_Start_DMA+0x190>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d008      	beq.n	8005092 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b05      	cmp	r3, #5
 800508a:	d002      	beq.n	8005092 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b09      	cmp	r3, #9
 8005090:	d17a      	bne.n	8005188 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fcf6 	bl	8005a84 <ADC_Enable>
 8005098:	4603      	mov	r3, r0
 800509a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800509c:	7dfb      	ldrb	r3, [r7, #23]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d16d      	bne.n	800517e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3a      	ldr	r2, [pc, #232]	@ (80051a4 <HAL_ADC_Start_DMA+0x184>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <HAL_ADC_Start_DMA+0xb4>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a3b      	ldr	r2, [pc, #236]	@ (80051b4 <HAL_ADC_Start_DMA+0x194>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d002      	beq.n	80050d0 <HAL_ADC_Start_DMA+0xb0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	e003      	b.n	80050d8 <HAL_ADC_Start_DMA+0xb8>
 80050d0:	4b39      	ldr	r3, [pc, #228]	@ (80051b8 <HAL_ADC_Start_DMA+0x198>)
 80050d2:	e001      	b.n	80050d8 <HAL_ADC_Start_DMA+0xb8>
 80050d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	4293      	cmp	r3, r2
 80050de:	d002      	beq.n	80050e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005102:	f023 0206 	bic.w	r2, r3, #6
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	661a      	str	r2, [r3, #96]	@ 0x60
 800510a:	e002      	b.n	8005112 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	4a29      	ldr	r2, [pc, #164]	@ (80051bc <HAL_ADC_Start_DMA+0x19c>)
 8005118:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <HAL_ADC_Start_DMA+0x1a0>)
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005126:	4a27      	ldr	r2, [pc, #156]	@ (80051c4 <HAL_ADC_Start_DMA+0x1a4>)
 8005128:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	221c      	movs	r2, #28
 8005130:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0210 	orr.w	r2, r2, #16
 8005148:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3340      	adds	r3, #64	@ 0x40
 8005164:	4619      	mov	r1, r3
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f001 f989 	bl	8006480 <HAL_DMA_Start_IT>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fd5c 	bl	8004c34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800517c:	e00d      	b.n	800519a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005186:	e008      	b.n	800519a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005194:	e001      	b.n	800519a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005196:	2302      	movs	r3, #2
 8005198:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	50000100 	.word	0x50000100
 80051a8:	50000300 	.word	0x50000300
 80051ac:	50000700 	.word	0x50000700
 80051b0:	50000600 	.word	0x50000600
 80051b4:	50000500 	.word	0x50000500
 80051b8:	50000400 	.word	0x50000400
 80051bc:	08005c6f 	.word	0x08005c6f
 80051c0:	08005d47 	.word	0x08005d47
 80051c4:	08005d63 	.word	0x08005d63

080051c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b0b6      	sub	sp, #216	@ 0xd8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x24>
 8005222:	2302      	movs	r3, #2
 8005224:	f000 bc13 	b.w	8005a4e <HAL_ADC_ConfigChannel+0x84a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fd11 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 83f3 	bne.w	8005a28 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7ff fbcb 	bl	80049ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fcff 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 800525e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fd0b 	bl	8004c82 <LL_ADC_INJ_IsConversionOngoing>
 800526c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005270:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005274:	2b00      	cmp	r3, #0
 8005276:	f040 81d9 	bne.w	800562c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800527a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 81d4 	bne.w	800562c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800528c:	d10f      	bne.n	80052ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	4619      	mov	r1, r3
 800529a:	f7ff fbd2 	bl	8004a42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fb79 	bl	800499e <LL_ADC_SetSamplingTimeCommonConfig>
 80052ac:	e00e      	b.n	80052cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7ff fbc1 	bl	8004a42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fb69 	bl	800499e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d022      	beq.n	8005334 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6919      	ldr	r1, [r3, #16]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052fe:	f7ff fac3 	bl	8004888 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	461a      	mov	r2, r3
 8005310:	f7ff fb0f 	bl	8004932 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005320:	2b01      	cmp	r3, #1
 8005322:	d102      	bne.n	800532a <HAL_ADC_ConfigChannel+0x126>
 8005324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005328:	e000      	b.n	800532c <HAL_ADC_ConfigChannel+0x128>
 800532a:	2300      	movs	r3, #0
 800532c:	461a      	mov	r2, r3
 800532e:	f7ff fb1b 	bl	8004968 <LL_ADC_SetOffsetSaturation>
 8005332:	e17b      	b.n	800562c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fac8 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 8005340:	4603      	mov	r3, r0
 8005342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_ADC_ConfigChannel+0x15c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fabd 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 8005356:	4603      	mov	r3, r0
 8005358:	0e9b      	lsrs	r3, r3, #26
 800535a:	f003 021f 	and.w	r2, r3, #31
 800535e:	e01e      	b.n	800539e <HAL_ADC_ConfigChannel+0x19a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fab2 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800537e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005382:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800538e:	2320      	movs	r3, #32
 8005390:	e004      	b.n	800539c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x1b2>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	0e9b      	lsrs	r3, r3, #26
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	e018      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x1e4>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80053ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80053d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80053da:	2320      	movs	r3, #32
 80053dc:	e004      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80053de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d106      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fa81 	bl	80048fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fa65 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 8005406:	4603      	mov	r3, r0
 8005408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x222>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fa5a 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 800541c:	4603      	mov	r3, r0
 800541e:	0e9b      	lsrs	r3, r3, #26
 8005420:	f003 021f 	and.w	r2, r3, #31
 8005424:	e01e      	b.n	8005464 <HAL_ADC_ConfigChannel+0x260>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fa4f 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 8005432:	4603      	mov	r3, r0
 8005434:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800543c:	fa93 f3a3 	rbit	r3, r3
 8005440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005444:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800544c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005454:	2320      	movs	r3, #32
 8005456:	e004      	b.n	8005462 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <HAL_ADC_ConfigChannel+0x278>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0e9b      	lsrs	r3, r3, #26
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	e018      	b.n	80054ae <HAL_ADC_ConfigChannel+0x2aa>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005490:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005498:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80054a0:	2320      	movs	r3, #32
 80054a2:	e004      	b.n	80054ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80054a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d106      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fa1e 	bl	80048fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2102      	movs	r1, #2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fa02 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x2e8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2102      	movs	r1, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff f9f7 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 80054e2:	4603      	mov	r3, r0
 80054e4:	0e9b      	lsrs	r3, r3, #26
 80054e6:	f003 021f 	and.w	r2, r3, #31
 80054ea:	e01e      	b.n	800552a <HAL_ADC_ConfigChannel+0x326>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2102      	movs	r1, #2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff f9ec 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800550a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800551a:	2320      	movs	r3, #32
 800551c:	e004      	b.n	8005528 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800551e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005522:	fab3 f383 	clz	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x33e>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	0e9b      	lsrs	r3, r3, #26
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	e016      	b.n	8005570 <HAL_ADC_ConfigChannel+0x36c>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005554:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005556:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800555a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005562:	2320      	movs	r3, #32
 8005564:	e004      	b.n	8005570 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005566:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005570:	429a      	cmp	r2, r3
 8005572:	d106      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	2102      	movs	r1, #2
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff f9bd 	bl	80048fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2103      	movs	r1, #3
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff f9a1 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 800558e:	4603      	mov	r3, r0
 8005590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x3aa>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2103      	movs	r1, #3
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f996 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 80055a4:	4603      	mov	r3, r0
 80055a6:	0e9b      	lsrs	r3, r3, #26
 80055a8:	f003 021f 	and.w	r2, r3, #31
 80055ac:	e017      	b.n	80055de <HAL_ADC_ConfigChannel+0x3da>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2103      	movs	r1, #3
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f98b 	bl	80048d0 <LL_ADC_GetOffsetChannel>
 80055ba:	4603      	mov	r3, r0
 80055bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80055d0:	2320      	movs	r3, #32
 80055d2:	e003      	b.n	80055dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x3f2>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	0e9b      	lsrs	r3, r3, #26
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	e011      	b.n	800561a <HAL_ADC_ConfigChannel+0x416>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005606:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800560e:	2320      	movs	r3, #32
 8005610:	e003      	b.n	800561a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005614:	fab3 f383 	clz	r3, r3
 8005618:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800561a:	429a      	cmp	r2, r3
 800561c:	d106      	bne.n	800562c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	2103      	movs	r1, #3
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f968 	bl	80048fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fad9 	bl	8004be8 <LL_ADC_IsEnabled>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 813d 	bne.w	80058b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f7ff fa24 	bl	8004a98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4aa2      	ldr	r2, [pc, #648]	@ (80058e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	f040 812e 	bne.w	80058b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10b      	bne.n	8005684 <HAL_ADC_ConfigChannel+0x480>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	0e9b      	lsrs	r3, r3, #26
 8005672:	3301      	adds	r3, #1
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2b09      	cmp	r3, #9
 800567a:	bf94      	ite	ls
 800567c:	2301      	movls	r3, #1
 800567e:	2300      	movhi	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e019      	b.n	80056b8 <HAL_ADC_ConfigChannel+0x4b4>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800568c:	fa93 f3a3 	rbit	r3, r3
 8005690:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005694:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800569c:	2320      	movs	r3, #32
 800569e:	e003      	b.n	80056a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80056a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2b09      	cmp	r3, #9
 80056b0:	bf94      	ite	ls
 80056b2:	2301      	movls	r3, #1
 80056b4:	2300      	movhi	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d079      	beq.n	80057b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x4d4>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	0e9b      	lsrs	r3, r3, #26
 80056ce:	3301      	adds	r3, #1
 80056d0:	069b      	lsls	r3, r3, #26
 80056d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056d6:	e015      	b.n	8005704 <HAL_ADC_ConfigChannel+0x500>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056e0:	fa93 f3a3 	rbit	r3, r3
 80056e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80056e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80056ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80056f0:	2320      	movs	r3, #32
 80056f2:	e003      	b.n	80056fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80056f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	3301      	adds	r3, #1
 80056fe:	069b      	lsls	r3, r3, #26
 8005700:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x520>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0e9b      	lsrs	r3, r3, #26
 8005716:	3301      	adds	r3, #1
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	e017      	b.n	8005754 <HAL_ADC_ConfigChannel+0x550>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800573c:	2320      	movs	r3, #32
 800573e:	e003      	b.n	8005748 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3301      	adds	r3, #1
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2101      	movs	r1, #1
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	ea42 0103 	orr.w	r1, r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <HAL_ADC_ConfigChannel+0x576>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	0e9b      	lsrs	r3, r3, #26
 800576a:	3301      	adds	r3, #1
 800576c:	f003 021f 	and.w	r2, r3, #31
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	051b      	lsls	r3, r3, #20
 8005778:	e018      	b.n	80057ac <HAL_ADC_ConfigChannel+0x5a8>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005792:	2320      	movs	r3, #32
 8005794:	e003      	b.n	800579e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	b2db      	uxtb	r3, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4613      	mov	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	4413      	add	r3, r2
 80057aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ac:	430b      	orrs	r3, r1
 80057ae:	e07e      	b.n	80058ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x5c8>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	0e9b      	lsrs	r3, r3, #26
 80057c2:	3301      	adds	r3, #1
 80057c4:	069b      	lsls	r3, r3, #26
 80057c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057ca:	e015      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x5f4>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	fa93 f3a3 	rbit	r3, r3
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80057e4:	2320      	movs	r3, #32
 80057e6:	e003      	b.n	80057f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	fab3 f383 	clz	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	3301      	adds	r3, #1
 80057f2:	069b      	lsls	r3, r3, #26
 80057f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x614>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	0e9b      	lsrs	r3, r3, #26
 800580a:	3301      	adds	r3, #1
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	e017      	b.n	8005848 <HAL_ADC_ConfigChannel+0x644>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	fa93 f3a3 	rbit	r3, r3
 8005824:	61fb      	str	r3, [r7, #28]
  return result;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005830:	2320      	movs	r3, #32
 8005832:	e003      	b.n	800583c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	fab3 f383 	clz	r3, r3
 800583a:	b2db      	uxtb	r3, r3
 800583c:	3301      	adds	r3, #1
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2101      	movs	r1, #1
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	ea42 0103 	orr.w	r1, r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10d      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x670>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0e9b      	lsrs	r3, r3, #26
 800585e:	3301      	adds	r3, #1
 8005860:	f003 021f 	and.w	r2, r3, #31
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	3b1e      	subs	r3, #30
 800586c:	051b      	lsls	r3, r3, #20
 800586e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005872:	e01b      	b.n	80058ac <HAL_ADC_ConfigChannel+0x6a8>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	fa93 f3a3 	rbit	r3, r3
 8005880:	613b      	str	r3, [r7, #16]
  return result;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800588c:	2320      	movs	r3, #32
 800588e:	e003      	b.n	8005898 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	fab3 f383 	clz	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	3301      	adds	r3, #1
 800589a:	f003 021f 	and.w	r2, r3, #31
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	3b1e      	subs	r3, #30
 80058a6:	051b      	lsls	r3, r3, #20
 80058a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058b2:	4619      	mov	r1, r3
 80058b4:	f7ff f8c5 	bl	8004a42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b09      	ldr	r3, [pc, #36]	@ (80058e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80be 	beq.w	8005a42 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058ce:	d004      	beq.n	80058da <HAL_ADC_ConfigChannel+0x6d6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10a      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x6ec>
 80058da:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <HAL_ADC_ConfigChannel+0x6e8>)
 80058dc:	e009      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x6ee>
 80058de:	bf00      	nop
 80058e0:	407f0000 	.word	0x407f0000
 80058e4:	80080000 	.word	0x80080000
 80058e8:	50000100 	.word	0x50000100
 80058ec:	50000300 	.word	0x50000300
 80058f0:	4b59      	ldr	r3, [pc, #356]	@ (8005a58 <HAL_ADC_ConfigChannel+0x854>)
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe ffba 	bl	800486c <LL_ADC_GetCommonPathInternalCh>
 80058f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a56      	ldr	r2, [pc, #344]	@ (8005a5c <HAL_ADC_ConfigChannel+0x858>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_ADC_ConfigChannel+0x70c>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a55      	ldr	r2, [pc, #340]	@ (8005a60 <HAL_ADC_ConfigChannel+0x85c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d13a      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d134      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005924:	d005      	beq.n	8005932 <HAL_ADC_ConfigChannel+0x72e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a4e      	ldr	r2, [pc, #312]	@ (8005a64 <HAL_ADC_ConfigChannel+0x860>)
 800592c:	4293      	cmp	r3, r2
 800592e:	f040 8085 	bne.w	8005a3c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800593a:	d004      	beq.n	8005946 <HAL_ADC_ConfigChannel+0x742>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a49      	ldr	r2, [pc, #292]	@ (8005a68 <HAL_ADC_ConfigChannel+0x864>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_ADC_ConfigChannel+0x746>
 8005946:	4a49      	ldr	r2, [pc, #292]	@ (8005a6c <HAL_ADC_ConfigChannel+0x868>)
 8005948:	e000      	b.n	800594c <HAL_ADC_ConfigChannel+0x748>
 800594a:	4a43      	ldr	r2, [pc, #268]	@ (8005a58 <HAL_ADC_ConfigChannel+0x854>)
 800594c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005950:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f7fe ff75 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800595c:	4b44      	ldr	r3, [pc, #272]	@ (8005a70 <HAL_ADC_ConfigChannel+0x86c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	4a44      	ldr	r2, [pc, #272]	@ (8005a74 <HAL_ADC_ConfigChannel+0x870>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005976:	e002      	b.n	800597e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3b01      	subs	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f9      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005984:	e05a      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a78 <HAL_ADC_ConfigChannel+0x874>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d125      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11f      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a31      	ldr	r2, [pc, #196]	@ (8005a68 <HAL_ADC_ConfigChannel+0x864>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d104      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x7ac>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a34      	ldr	r2, [pc, #208]	@ (8005a7c <HAL_ADC_ConfigChannel+0x878>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d047      	beq.n	8005a40 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059b8:	d004      	beq.n	80059c4 <HAL_ADC_ConfigChannel+0x7c0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2a      	ldr	r2, [pc, #168]	@ (8005a68 <HAL_ADC_ConfigChannel+0x864>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x7c4>
 80059c4:	4a29      	ldr	r2, [pc, #164]	@ (8005a6c <HAL_ADC_ConfigChannel+0x868>)
 80059c6:	e000      	b.n	80059ca <HAL_ADC_ConfigChannel+0x7c6>
 80059c8:	4a23      	ldr	r2, [pc, #140]	@ (8005a58 <HAL_ADC_ConfigChannel+0x854>)
 80059ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7fe ff36 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059da:	e031      	b.n	8005a40 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a27      	ldr	r2, [pc, #156]	@ (8005a80 <HAL_ADC_ConfigChannel+0x87c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d12d      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d127      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <HAL_ADC_ConfigChannel+0x864>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a04:	d004      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x80c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	@ (8005a68 <HAL_ADC_ConfigChannel+0x864>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x810>
 8005a10:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <HAL_ADC_ConfigChannel+0x868>)
 8005a12:	e000      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x812>
 8005a14:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <HAL_ADC_ConfigChannel+0x854>)
 8005a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7fe ff10 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
 8005a26:	e00c      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a3a:	e002      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	37d8      	adds	r7, #216	@ 0xd8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	50000700 	.word	0x50000700
 8005a5c:	c3210000 	.word	0xc3210000
 8005a60:	90c00010 	.word	0x90c00010
 8005a64:	50000600 	.word	0x50000600
 8005a68:	50000100 	.word	0x50000100
 8005a6c:	50000300 	.word	0x50000300
 8005a70:	20000178 	.word	0x20000178
 8005a74:	053e2d63 	.word	0x053e2d63
 8005a78:	c7520000 	.word	0xc7520000
 8005a7c:	50000500 	.word	0x50000500
 8005a80:	cb840000 	.word	0xcb840000

08005a84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff f8a7 	bl	8004be8 <LL_ADC_IsEnabled>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d176      	bne.n	8005b8e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8005b98 <ADC_Enable+0x114>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab2:	f043 0210 	orr.w	r2, r3, #16
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e062      	b.n	8005b90 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff f862 	bl	8004b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005adc:	d004      	beq.n	8005ae8 <ADC_Enable+0x64>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b9c <ADC_Enable+0x118>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <ADC_Enable+0x68>
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba0 <ADC_Enable+0x11c>)
 8005aea:	e000      	b.n	8005aee <ADC_Enable+0x6a>
 8005aec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba4 <ADC_Enable+0x120>)
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe febc 	bl	800486c <LL_ADC_GetCommonPathInternalCh>
 8005af4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005afe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <ADC_Enable+0x124>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	4a29      	ldr	r2, [pc, #164]	@ (8005bac <ADC_Enable+0x128>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	099b      	lsrs	r3, r3, #6
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b18:	e002      	b.n	8005b20 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f9      	bne.n	8005b1a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b26:	f7fe fe6f 	bl	8004808 <HAL_GetTick>
 8005b2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b2c:	e028      	b.n	8005b80 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff f858 	bl	8004be8 <LL_ADC_IsEnabled>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff f828 	bl	8004b98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b48:	f7fe fe5e 	bl	8004808 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d914      	bls.n	8005b80 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d00d      	beq.n	8005b80 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b68:	f043 0210 	orr.w	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b74:	f043 0201 	orr.w	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e007      	b.n	8005b90 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d1cf      	bne.n	8005b2e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	8000003f 	.word	0x8000003f
 8005b9c:	50000100 	.word	0x50000100
 8005ba0:	50000300 	.word	0x50000300
 8005ba4:	50000700 	.word	0x50000700
 8005ba8:	20000178 	.word	0x20000178
 8005bac:	053e2d63 	.word	0x053e2d63

08005bb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff f826 	bl	8004c0e <LL_ADC_IsDisableOngoing>
 8005bc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff f80d 	bl	8004be8 <LL_ADC_IsEnabled>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d047      	beq.n	8005c64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d144      	bne.n	8005c64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 030d 	and.w	r3, r3, #13
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10c      	bne.n	8005c02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe ffe7 	bl	8004bc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bfa:	f7fe fe05 	bl	8004808 <HAL_GetTick>
 8005bfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c00:	e029      	b.n	8005c56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c06:	f043 0210 	orr.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c12:	f043 0201 	orr.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e023      	b.n	8005c66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c1e:	f7fe fdf3 	bl	8004808 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d914      	bls.n	8005c56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1dc      	bne.n	8005c1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d14b      	bne.n	8005d20 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d021      	beq.n	8005ce6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fe8c 	bl	80049c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d032      	beq.n	8005d18 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d12b      	bne.n	8005d18 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11f      	bne.n	8005d18 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ce4:	e018      	b.n	8005d18 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d111      	bne.n	8005d18 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d10:	f043 0201 	orr.w	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff fa55 	bl	80051c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d1e:	e00e      	b.n	8005d3e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff fa5f 	bl	80051f0 <HAL_ADC_ErrorCallback>
}
 8005d32:	e004      	b.n	8005d3e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fa41 	bl	80051dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	f043 0204 	orr.w	r2, r3, #4
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff fa31 	bl	80051f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <LL_ADC_IsEnabled>:
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <LL_ADC_IsEnabled+0x18>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <LL_ADC_IsEnabled+0x1a>
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_StartCalibration>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005dce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_ADC_IsCalibrationOnGoing>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e02:	d101      	bne.n	8005e08 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_ADC_REG_IsConversionOngoing>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d101      	bne.n	8005e2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_ADCEx_Calibration_Start+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e04d      	b.n	8005ef4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fea5 	bl	8005bb0 <ADC_Disable>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d136      	bne.n	8005ede <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005e78:	f023 0302 	bic.w	r3, r3, #2
 8005e7c:	f043 0202 	orr.w	r2, r3, #2
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff96 	bl	8005dbc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e90:	e014      	b.n	8005ebc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d90d      	bls.n	8005ebc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea4:	f023 0312 	bic.w	r3, r3, #18
 8005ea8:	f043 0210 	orr.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e01b      	b.n	8005ef4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff94 	bl	8005dee <LL_ADC_IsCalibrationOnGoing>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e2      	bne.n	8005e92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
 8005ed4:	f043 0201 	orr.w	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005edc:	e005      	b.n	8005eea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee2:	f043 0210 	orr.w	r2, r3, #16
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	0004de01 	.word	0x0004de01

08005f00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b0a1      	sub	sp, #132	@ 0x84
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0e7      	b.n	80060ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005f26:	2300      	movs	r3, #0
 8005f28:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f36:	d102      	bne.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f38:	4b6f      	ldr	r3, [pc, #444]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	e009      	b.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6e      	ldr	r2, [pc, #440]	@ (80060fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d102      	bne.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005f48:	4b6d      	ldr	r3, [pc, #436]	@ (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	e001      	b.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0be      	b.n	80060ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ff4f 	bl	8005e16 <LL_ADC_REG_IsConversionOngoing>
 8005f78:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ff49 	bl	8005e16 <LL_ADC_REG_IsConversionOngoing>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 80a0 	bne.w	80060cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 809c 	bne.w	80060cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f9c:	d004      	beq.n	8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a55      	ldr	r2, [pc, #340]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fa8:	4b56      	ldr	r3, [pc, #344]	@ (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005faa:	e000      	b.n	8005fae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005fac:	4b56      	ldr	r3, [pc, #344]	@ (8006108 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005fae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d04b      	beq.n	8006050 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005fca:	035b      	lsls	r3, r3, #13
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fdc:	d004      	beq.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a45      	ldr	r2, [pc, #276]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10f      	bne.n	8006008 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005fe8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fec:	f7ff fed3 	bl	8005d96 <LL_ADC_IsEnabled>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4841      	ldr	r0, [pc, #260]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ff4:	f7ff fecf 	bl	8005d96 <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e012      	b.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006008:	483c      	ldr	r0, [pc, #240]	@ (80060fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800600a:	f7ff fec4 	bl	8005d96 <LL_ADC_IsEnabled>
 800600e:	4604      	mov	r4, r0
 8006010:	483b      	ldr	r0, [pc, #236]	@ (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006012:	f7ff fec0 	bl	8005d96 <LL_ADC_IsEnabled>
 8006016:	4603      	mov	r3, r0
 8006018:	431c      	orrs	r4, r3
 800601a:	483c      	ldr	r0, [pc, #240]	@ (800610c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800601c:	f7ff febb 	bl	8005d96 <LL_ADC_IsEnabled>
 8006020:	4603      	mov	r3, r0
 8006022:	4323      	orrs	r3, r4
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d056      	beq.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	6811      	ldr	r1, [r2, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	430a      	orrs	r2, r1
 8006048:	431a      	orrs	r2, r3
 800604a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800604c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800604e:	e047      	b.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800605a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006064:	d004      	beq.n	8006070 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a23      	ldr	r2, [pc, #140]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10f      	bne.n	8006090 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006070:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006074:	f7ff fe8f 	bl	8005d96 <LL_ADC_IsEnabled>
 8006078:	4604      	mov	r4, r0
 800607a:	481f      	ldr	r0, [pc, #124]	@ (80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800607c:	f7ff fe8b 	bl	8005d96 <LL_ADC_IsEnabled>
 8006080:	4603      	mov	r3, r0
 8006082:	4323      	orrs	r3, r4
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e012      	b.n	80060b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006090:	481a      	ldr	r0, [pc, #104]	@ (80060fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006092:	f7ff fe80 	bl	8005d96 <LL_ADC_IsEnabled>
 8006096:	4604      	mov	r4, r0
 8006098:	4819      	ldr	r0, [pc, #100]	@ (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800609a:	f7ff fe7c 	bl	8005d96 <LL_ADC_IsEnabled>
 800609e:	4603      	mov	r3, r0
 80060a0:	431c      	orrs	r4, r3
 80060a2:	481a      	ldr	r0, [pc, #104]	@ (800610c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80060a4:	f7ff fe77 	bl	8005d96 <LL_ADC_IsEnabled>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4323      	orrs	r3, r4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d012      	beq.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060c2:	f023 030f 	bic.w	r3, r3, #15
 80060c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060ca:	e009      	b.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80060de:	e000      	b.n	80060e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80060ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3784      	adds	r7, #132	@ 0x84
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}
 80060f6:	bf00      	nop
 80060f8:	50000100 	.word	0x50000100
 80060fc:	50000400 	.word	0x50000400
 8006100:	50000500 	.word	0x50000500
 8006104:	50000300 	.word	0x50000300
 8006108:	50000700 	.word	0x50000700
 800610c:	50000600 	.word	0x50000600

08006110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006120:	4b0c      	ldr	r3, [pc, #48]	@ (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800612c:	4013      	ands	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800613c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006142:	4a04      	ldr	r2, [pc, #16]	@ (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	60d3      	str	r3, [r2, #12]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <__NVIC_GetPriorityGrouping+0x18>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 0307 	and.w	r3, r3, #7
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000ed00 	.word	0xe000ed00

08006174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	db0b      	blt.n	800619e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	4907      	ldr	r1, [pc, #28]	@ (80061ac <__NVIC_EnableIRQ+0x38>)
 800618e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2001      	movs	r0, #1
 8006196:	fa00 f202 	lsl.w	r2, r0, r2
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000e100 	.word	0xe000e100

080061b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db0a      	blt.n	80061da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	490c      	ldr	r1, [pc, #48]	@ (80061fc <__NVIC_SetPriority+0x4c>)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	440b      	add	r3, r1
 80061d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061d8:	e00a      	b.n	80061f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4908      	ldr	r1, [pc, #32]	@ (8006200 <__NVIC_SetPriority+0x50>)
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3b04      	subs	r3, #4
 80061e8:	0112      	lsls	r2, r2, #4
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	440b      	add	r3, r1
 80061ee:	761a      	strb	r2, [r3, #24]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000e100 	.word	0xe000e100
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	@ 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	bf28      	it	cs
 8006222:	2304      	movcs	r3, #4
 8006224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3304      	adds	r3, #4
 800622a:	2b06      	cmp	r3, #6
 800622c:	d902      	bls.n	8006234 <NVIC_EncodePriority+0x30>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3b03      	subs	r3, #3
 8006232:	e000      	b.n	8006236 <NVIC_EncodePriority+0x32>
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006238:	f04f 32ff 	mov.w	r2, #4294967295
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43da      	mvns	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	401a      	ands	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800624c:	f04f 31ff 	mov.w	r1, #4294967295
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43d9      	mvns	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800625c:	4313      	orrs	r3, r2
         );
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	@ 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800627c:	d301      	bcc.n	8006282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800627e:	2301      	movs	r3, #1
 8006280:	e00f      	b.n	80062a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006282:	4a0a      	ldr	r2, [pc, #40]	@ (80062ac <SysTick_Config+0x40>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800628a:	210f      	movs	r1, #15
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	f7ff ff8e 	bl	80061b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <SysTick_Config+0x40>)
 8006296:	2200      	movs	r2, #0
 8006298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800629a:	4b04      	ldr	r3, [pc, #16]	@ (80062ac <SysTick_Config+0x40>)
 800629c:	2207      	movs	r2, #7
 800629e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000e010 	.word	0xe000e010

080062b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff29 	bl	8006110 <__NVIC_SetPriorityGrouping>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	4603      	mov	r3, r0
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062d4:	f7ff ff40 	bl	8006158 <__NVIC_GetPriorityGrouping>
 80062d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	6978      	ldr	r0, [r7, #20]
 80062e0:	f7ff ff90 	bl	8006204 <NVIC_EncodePriority>
 80062e4:	4602      	mov	r2, r0
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff ff5f 	bl	80061b0 <__NVIC_SetPriority>
}
 80062f2:	bf00      	nop
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	4603      	mov	r3, r0
 8006302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff ff33 	bl	8006174 <__NVIC_EnableIRQ>
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff ffa4 	bl	800626c <SysTick_Config>
 8006324:	4603      	mov	r3, r0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e08d      	b.n	800645e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HAL_DMA_Init+0x138>)
 800634a:	429a      	cmp	r2, r3
 800634c:	d80f      	bhi.n	800636e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	4b45      	ldr	r3, [pc, #276]	@ (800646c <HAL_DMA_Init+0x13c>)
 8006356:	4413      	add	r3, r2
 8006358:	4a45      	ldr	r2, [pc, #276]	@ (8006470 <HAL_DMA_Init+0x140>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	009a      	lsls	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a42      	ldr	r2, [pc, #264]	@ (8006474 <HAL_DMA_Init+0x144>)
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
 800636c:	e00e      	b.n	800638c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	4b40      	ldr	r3, [pc, #256]	@ (8006478 <HAL_DMA_Init+0x148>)
 8006376:	4413      	add	r3, r2
 8006378:	4a3d      	ldr	r2, [pc, #244]	@ (8006470 <HAL_DMA_Init+0x140>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a3c      	ldr	r2, [pc, #240]	@ (800647c <HAL_DMA_Init+0x14c>)
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa76 	bl	80068d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ec:	d102      	bne.n	80063f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006408:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <HAL_DMA_Init+0x104>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b04      	cmp	r3, #4
 8006418:	d80c      	bhi.n	8006434 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa96 	bl	800694c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	e008      	b.n	8006446 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40020407 	.word	0x40020407
 800646c:	bffdfff8 	.word	0xbffdfff8
 8006470:	cccccccd 	.word	0xcccccccd
 8006474:	40020000 	.word	0x40020000
 8006478:	bffdfbf8 	.word	0xbffdfbf8
 800647c:	40020400 	.word	0x40020400

08006480 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_DMA_Start_IT+0x20>
 800649c:	2302      	movs	r3, #2
 800649e:	e066      	b.n	800656e <HAL_DMA_Start_IT+0xee>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d155      	bne.n	8006560 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f9bb 	bl	8006854 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 020e 	orr.w	r2, r2, #14
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e00f      	b.n	8006518 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 020a 	orr.w	r2, r2, #10
 8006516:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006534:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800654c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e005      	b.n	800656c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006568:	2302      	movs	r3, #2
 800656a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d005      	beq.n	800659a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2204      	movs	r2, #4
 8006592:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e037      	b.n	800660a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 020e 	bic.w	r2, r2, #14
 80065a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f003 021f 	and.w	r2, r3, #31
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	2101      	movs	r1, #1
 80065d8:	fa01 f202 	lsl.w	r2, r1, r2
 80065dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006608:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d00d      	beq.n	800665c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	e047      	b.n	80066ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 020e 	bic.w	r2, r2, #14
 800666a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006686:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800668a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	f003 021f 	and.w	r2, r3, #31
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	2101      	movs	r1, #1
 800669a:	fa01 f202 	lsl.w	r2, r1, r2
 800669e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
    }
  }
  return status;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2204      	movs	r2, #4
 8006718:	409a      	lsls	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d026      	beq.n	8006770 <HAL_DMA_IRQHandler+0x7a>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d021      	beq.n	8006770 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0204 	bic.w	r2, r2, #4
 8006748:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	f003 021f 	and.w	r2, r3, #31
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	2104      	movs	r1, #4
 8006758:	fa01 f202 	lsl.w	r2, r1, r2
 800675c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d071      	beq.n	800684a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800676e:	e06c      	b.n	800684a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2202      	movs	r2, #2
 800677a:	409a      	lsls	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d029      	beq.n	80067e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10b      	bne.n	80067b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 020a 	bic.w	r2, r2, #10
 80067aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b8:	f003 021f 	and.w	r2, r3, #31
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	2102      	movs	r1, #2
 80067c2:	fa01 f202 	lsl.w	r2, r1, r2
 80067c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d038      	beq.n	800684a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80067e0:	e033      	b.n	800684a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2208      	movs	r2, #8
 80067ec:	409a      	lsls	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02a      	beq.n	800684c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d025      	beq.n	800684c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 020e 	bic.w	r2, r2, #14
 800680e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006814:	f003 021f 	and.w	r2, r3, #31
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681c:	2101      	movs	r1, #1
 800681e:	fa01 f202 	lsl.w	r2, r1, r2
 8006822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800684a:	bf00      	nop
 800684c:	bf00      	nop
}
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800686a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	f003 021f 	and.w	r2, r3, #31
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	2101      	movs	r1, #1
 800688c:	fa01 f202 	lsl.w	r2, r1, r2
 8006890:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d108      	bne.n	80068b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068b2:	e007      	b.n	80068c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	60da      	str	r2, [r3, #12]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	4b16      	ldr	r3, [pc, #88]	@ (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d802      	bhi.n	80068ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80068e4:	4b15      	ldr	r3, [pc, #84]	@ (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e001      	b.n	80068ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80068ea:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80068ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	3b08      	subs	r3, #8
 80068fa:	4a12      	ldr	r2, [pc, #72]	@ (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80068fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006908:	089b      	lsrs	r3, r3, #2
 800690a:	009a      	lsls	r2, r3, #2
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a0b      	ldr	r2, [pc, #44]	@ (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800691a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2201      	movs	r2, #1
 8006924:	409a      	lsls	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40020407 	.word	0x40020407
 800693c:	40020800 	.word	0x40020800
 8006940:	40020820 	.word	0x40020820
 8006944:	cccccccd 	.word	0xcccccccd
 8006948:	40020880 	.word	0x40020880

0800694c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a08      	ldr	r2, [pc, #32]	@ (8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800696e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3b01      	subs	r3, #1
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2201      	movs	r2, #1
 800697a:	409a      	lsls	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	1000823f 	.word	0x1000823f
 8006990:	40020940 	.word	0x40020940

08006994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069a2:	e15a      	b.n	8006c5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	fa01 f303 	lsl.w	r3, r1, r3
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 814c 	beq.w	8006c54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d005      	beq.n	80069d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d130      	bne.n	8006a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	2203      	movs	r2, #3
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	43db      	mvns	r3, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4013      	ands	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4013      	ands	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f003 0201 	and.w	r2, r3, #1
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d017      	beq.n	8006a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d123      	bne.n	8006ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	08da      	lsrs	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3208      	adds	r2, #8
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	220f      	movs	r2, #15
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	08da      	lsrs	r2, r3, #3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3208      	adds	r2, #8
 8006ac0:	6939      	ldr	r1, [r7, #16]
 8006ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4013      	ands	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f003 0203 	and.w	r2, r3, #3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a6 	beq.w	8006c54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b08:	4b5b      	ldr	r3, [pc, #364]	@ (8006c78 <HAL_GPIO_Init+0x2e4>)
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c78 <HAL_GPIO_Init+0x2e4>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b14:	4b58      	ldr	r3, [pc, #352]	@ (8006c78 <HAL_GPIO_Init+0x2e4>)
 8006b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b20:	4a56      	ldr	r2, [pc, #344]	@ (8006c7c <HAL_GPIO_Init+0x2e8>)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	089b      	lsrs	r3, r3, #2
 8006b26:	3302      	adds	r3, #2
 8006b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	220f      	movs	r2, #15
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006b4a:	d01f      	beq.n	8006b8c <HAL_GPIO_Init+0x1f8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8006c80 <HAL_GPIO_Init+0x2ec>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d019      	beq.n	8006b88 <HAL_GPIO_Init+0x1f4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a4b      	ldr	r2, [pc, #300]	@ (8006c84 <HAL_GPIO_Init+0x2f0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_GPIO_Init+0x1f0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c88 <HAL_GPIO_Init+0x2f4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00d      	beq.n	8006b80 <HAL_GPIO_Init+0x1ec>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a49      	ldr	r2, [pc, #292]	@ (8006c8c <HAL_GPIO_Init+0x2f8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <HAL_GPIO_Init+0x1e8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a48      	ldr	r2, [pc, #288]	@ (8006c90 <HAL_GPIO_Init+0x2fc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d101      	bne.n	8006b78 <HAL_GPIO_Init+0x1e4>
 8006b74:	2305      	movs	r3, #5
 8006b76:	e00a      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b78:	2306      	movs	r3, #6
 8006b7a:	e008      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	e006      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b80:	2303      	movs	r3, #3
 8006b82:	e004      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e002      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_GPIO_Init+0x1fa>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	f002 0203 	and.w	r2, r2, #3
 8006b94:	0092      	lsls	r2, r2, #2
 8006b96:	4093      	lsls	r3, r2
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b9e:	4937      	ldr	r1, [pc, #220]	@ (8006c7c <HAL_GPIO_Init+0x2e8>)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bac:	4b39      	ldr	r3, [pc, #228]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bd0:	4a30      	ldr	r2, [pc, #192]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4013      	ands	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006bfa:	4a26      	ldr	r2, [pc, #152]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006c00:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c24:	4a1b      	ldr	r2, [pc, #108]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	43db      	mvns	r3, r3
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4013      	ands	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c4e:	4a11      	ldr	r2, [pc, #68]	@ (8006c94 <HAL_GPIO_Init+0x300>)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	3301      	adds	r3, #1
 8006c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f ae9d 	bne.w	80069a4 <HAL_GPIO_Init+0x10>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	48000400 	.word	0x48000400
 8006c84:	48000800 	.word	0x48000800
 8006c88:	48000c00 	.word	0x48000c00
 8006c8c:	48001000 	.word	0x48001000
 8006c90:	48001400 	.word	0x48001400
 8006c94:	40010400 	.word	0x40010400

08006c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	887b      	ldrh	r3, [r7, #2]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e001      	b.n	8006cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cd8:	787b      	ldrb	r3, [r7, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ce4:	e002      	b.n	8006cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d02:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d04:	695a      	ldr	r2, [r3, #20]
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d0e:	4a05      	ldr	r2, [pc, #20]	@ (8006d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fc f8ee 	bl	8002ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40010400 	.word	0x40010400

08006d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d141      	bne.n	8006dba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d36:	4b4b      	ldr	r3, [pc, #300]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d42:	d131      	bne.n	8006da8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d44:	4b47      	ldr	r3, [pc, #284]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4a:	4a46      	ldr	r2, [pc, #280]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d54:	4b43      	ldr	r3, [pc, #268]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d5c:	4a41      	ldr	r2, [pc, #260]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d64:	4b40      	ldr	r3, [pc, #256]	@ (8006e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2232      	movs	r2, #50	@ 0x32
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8006e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	0c9b      	lsrs	r3, r3, #18
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d7a:	e002      	b.n	8006d82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d82:	4b38      	ldr	r3, [pc, #224]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d8e:	d102      	bne.n	8006d96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f2      	bne.n	8006d7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d96:	4b33      	ldr	r3, [pc, #204]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da2:	d158      	bne.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e057      	b.n	8006e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006da8:	4b2e      	ldr	r3, [pc, #184]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dae:	4a2d      	ldr	r2, [pc, #180]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006db8:	e04d      	b.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc0:	d141      	bne.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dc2:	4b28      	ldr	r3, [pc, #160]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dce:	d131      	bne.n	8006e34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dd0:	4b24      	ldr	r3, [pc, #144]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd6:	4a23      	ldr	r2, [pc, #140]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006de0:	4b20      	ldr	r3, [pc, #128]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006de8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2232      	movs	r2, #50	@ 0x32
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8006e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	0c9b      	lsrs	r3, r3, #18
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e06:	e002      	b.n	8006e0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e0e:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1a:	d102      	bne.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f2      	bne.n	8006e08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e22:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e2e:	d112      	bne.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e011      	b.n	8006e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e34:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e44:	e007      	b.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e4e:	4a05      	ldr	r2, [pc, #20]	@ (8006e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40007000 	.word	0x40007000
 8006e68:	20000178 	.word	0x20000178
 8006e6c:	431bde83 	.word	0x431bde83

08006e70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a04      	ldr	r2, [pc, #16]	@ (8006e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e7e:	6093      	str	r3, [r2, #8]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40007000 	.word	0x40007000

08006e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e2fe      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d075      	beq.n	8006f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eae:	4b97      	ldr	r3, [pc, #604]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eb8:	4b94      	ldr	r3, [pc, #592]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b0c      	cmp	r3, #12
 8006ec6:	d102      	bne.n	8006ece <HAL_RCC_OscConfig+0x3e>
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d002      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x44>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d10b      	bne.n	8006eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05b      	beq.n	8006f98 <HAL_RCC_OscConfig+0x108>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d157      	bne.n	8006f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e2d9      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCC_OscConfig+0x74>
 8006ef6:	4b85      	ldr	r3, [pc, #532]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a84      	ldr	r2, [pc, #528]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e01d      	b.n	8006f40 <HAL_RCC_OscConfig+0xb0>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x98>
 8006f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a7e      	ldr	r2, [pc, #504]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e00b      	b.n	8006f40 <HAL_RCC_OscConfig+0xb0>
 8006f28:	4b78      	ldr	r3, [pc, #480]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a77      	ldr	r2, [pc, #476]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4b75      	ldr	r3, [pc, #468]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a74      	ldr	r2, [pc, #464]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fd fc5e 	bl	8004808 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f50:	f7fd fc5a 	bl	8004808 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b64      	cmp	r3, #100	@ 0x64
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e29e      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f62:	4b6a      	ldr	r3, [pc, #424]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0xc0>
 8006f6e:	e014      	b.n	8006f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fd fc4a 	bl	8004808 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f78:	f7fd fc46 	bl	8004808 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b64      	cmp	r3, #100	@ 0x64
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e28a      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f8a:	4b60      	ldr	r3, [pc, #384]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0xe8>
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d075      	beq.n	8007092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa6:	4b59      	ldr	r3, [pc, #356]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 030c 	and.w	r3, r3, #12
 8006fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb0:	4b56      	ldr	r3, [pc, #344]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b0c      	cmp	r3, #12
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x136>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d002      	beq.n	8006fcc <HAL_RCC_OscConfig+0x13c>
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d11f      	bne.n	800700c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x154>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e25d      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe4:	4b49      	ldr	r3, [pc, #292]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	4946      	ldr	r1, [pc, #280]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ff8:	4b45      	ldr	r3, [pc, #276]	@ (8007110 <HAL_RCC_OscConfig+0x280>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd fbb7 	bl	8004770 <HAL_InitTick>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d043      	beq.n	8007090 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e249      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d023      	beq.n	800705c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007014:	4b3d      	ldr	r3, [pc, #244]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a3c      	ldr	r2, [pc, #240]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 800701a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800701e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fd fbf2 	bl	8004808 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007028:	f7fd fbee 	bl	8004808 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e232      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800703a:	4b34      	ldr	r3, [pc, #208]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007046:	4b31      	ldr	r3, [pc, #196]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	492d      	ldr	r1, [pc, #180]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	604b      	str	r3, [r1, #4]
 800705a:	e01a      	b.n	8007092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800705c:	4b2b      	ldr	r3, [pc, #172]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a2a      	ldr	r2, [pc, #168]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8007062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fd fbce 	bl	8004808 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007070:	f7fd fbca 	bl	8004808 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e20e      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007082:	4b22      	ldr	r3, [pc, #136]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x1e0>
 800708e:	e000      	b.n	8007092 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d041      	beq.n	8007122 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01c      	beq.n	80070e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070a6:	4b19      	ldr	r3, [pc, #100]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 80070a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ac:	4a17      	ldr	r2, [pc, #92]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b6:	f7fd fba7 	bl	8004808 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070be:	f7fd fba3 	bl	8004808 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e1e7      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070d0:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 80070d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0ef      	beq.n	80070be <HAL_RCC_OscConfig+0x22e>
 80070de:	e020      	b.n	8007122 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e0:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 80070e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070e6:	4a09      	ldr	r2, [pc, #36]	@ (800710c <HAL_RCC_OscConfig+0x27c>)
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f0:	f7fd fb8a 	bl	8004808 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070f6:	e00d      	b.n	8007114 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f8:	f7fd fb86 	bl	8004808 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d906      	bls.n	8007114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e1ca      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
 800710a:	bf00      	nop
 800710c:	40021000 	.word	0x40021000
 8007110:	2000017c 	.word	0x2000017c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007114:	4b8c      	ldr	r3, [pc, #560]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ea      	bne.n	80070f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80a6 	beq.w	800727c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007130:	2300      	movs	r3, #0
 8007132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007134:	4b84      	ldr	r3, [pc, #528]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_RCC_OscConfig+0x2b4>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x2b6>
 8007144:	2300      	movs	r3, #0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00d      	beq.n	8007166 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800714a:	4b7f      	ldr	r3, [pc, #508]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714e:	4a7e      	ldr	r2, [pc, #504]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007154:	6593      	str	r3, [r2, #88]	@ 0x58
 8007156:	4b7c      	ldr	r3, [pc, #496]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007162:	2301      	movs	r3, #1
 8007164:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007166:	4b79      	ldr	r3, [pc, #484]	@ (800734c <HAL_RCC_OscConfig+0x4bc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d118      	bne.n	80071a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007172:	4b76      	ldr	r3, [pc, #472]	@ (800734c <HAL_RCC_OscConfig+0x4bc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a75      	ldr	r2, [pc, #468]	@ (800734c <HAL_RCC_OscConfig+0x4bc>)
 8007178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800717c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800717e:	f7fd fb43 	bl	8004808 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007184:	e008      	b.n	8007198 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007186:	f7fd fb3f 	bl	8004808 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e183      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007198:	4b6c      	ldr	r3, [pc, #432]	@ (800734c <HAL_RCC_OscConfig+0x4bc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0f0      	beq.n	8007186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d108      	bne.n	80071be <HAL_RCC_OscConfig+0x32e>
 80071ac:	4b66      	ldr	r3, [pc, #408]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b2:	4a65      	ldr	r2, [pc, #404]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071bc:	e024      	b.n	8007208 <HAL_RCC_OscConfig+0x378>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d110      	bne.n	80071e8 <HAL_RCC_OscConfig+0x358>
 80071c6:	4b60      	ldr	r3, [pc, #384]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071ce:	f043 0304 	orr.w	r3, r3, #4
 80071d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071e6:	e00f      	b.n	8007208 <HAL_RCC_OscConfig+0x378>
 80071e8:	4b57      	ldr	r3, [pc, #348]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ee:	4a56      	ldr	r2, [pc, #344]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071f8:	4b53      	ldr	r3, [pc, #332]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fe:	4a52      	ldr	r2, [pc, #328]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007200:	f023 0304 	bic.w	r3, r3, #4
 8007204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d016      	beq.n	800723e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007210:	f7fd fafa 	bl	8004808 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007216:	e00a      	b.n	800722e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007218:	f7fd faf6 	bl	8004808 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e138      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800722e:	4b46      	ldr	r3, [pc, #280]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0ed      	beq.n	8007218 <HAL_RCC_OscConfig+0x388>
 800723c:	e015      	b.n	800726a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723e:	f7fd fae3 	bl	8004808 <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007244:	e00a      	b.n	800725c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007246:	f7fd fadf 	bl	8004808 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e121      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800725c:	4b3a      	ldr	r3, [pc, #232]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ed      	bne.n	8007246 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800726a:	7ffb      	ldrb	r3, [r7, #31]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d105      	bne.n	800727c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007270:	4b35      	ldr	r3, [pc, #212]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007274:	4a34      	ldr	r2, [pc, #208]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800727a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d03c      	beq.n	8007302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01c      	beq.n	80072ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007290:	4b2d      	ldr	r3, [pc, #180]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007296:	4a2c      	ldr	r2, [pc, #176]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a0:	f7fd fab2 	bl	8004808 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072a8:	f7fd faae 	bl	8004808 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e0f2      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072ba:	4b23      	ldr	r3, [pc, #140]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80072bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ef      	beq.n	80072a8 <HAL_RCC_OscConfig+0x418>
 80072c8:	e01b      	b.n	8007302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80072cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fd fa95 	bl	8004808 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e2:	f7fd fa91 	bl	8004808 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e0d5      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072f4:	4b14      	ldr	r3, [pc, #80]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 80072f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1ef      	bne.n	80072e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80c9 	beq.w	800749e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800730c:	4b0e      	ldr	r3, [pc, #56]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b0c      	cmp	r3, #12
 8007316:	f000 8083 	beq.w	8007420 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d15e      	bne.n	80073e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a08      	ldr	r2, [pc, #32]	@ (8007348 <HAL_RCC_OscConfig+0x4b8>)
 8007328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800732c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732e:	f7fd fa6b 	bl	8004808 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007334:	e00c      	b.n	8007350 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007336:	f7fd fa67 	bl	8004808 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d905      	bls.n	8007350 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e0ab      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
 8007348:	40021000 	.word	0x40021000
 800734c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007350:	4b55      	ldr	r3, [pc, #340]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1ec      	bne.n	8007336 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800735c:	4b52      	ldr	r3, [pc, #328]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	4b52      	ldr	r3, [pc, #328]	@ (80074ac <HAL_RCC_OscConfig+0x61c>)
 8007362:	4013      	ands	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6a11      	ldr	r1, [r2, #32]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800736c:	3a01      	subs	r2, #1
 800736e:	0112      	lsls	r2, r2, #4
 8007370:	4311      	orrs	r1, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007376:	0212      	lsls	r2, r2, #8
 8007378:	4311      	orrs	r1, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800737e:	0852      	lsrs	r2, r2, #1
 8007380:	3a01      	subs	r2, #1
 8007382:	0552      	lsls	r2, r2, #21
 8007384:	4311      	orrs	r1, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800738a:	0852      	lsrs	r2, r2, #1
 800738c:	3a01      	subs	r2, #1
 800738e:	0652      	lsls	r2, r2, #25
 8007390:	4311      	orrs	r1, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007396:	06d2      	lsls	r2, r2, #27
 8007398:	430a      	orrs	r2, r1
 800739a:	4943      	ldr	r1, [pc, #268]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 800739c:	4313      	orrs	r3, r2
 800739e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073a0:	4b41      	ldr	r3, [pc, #260]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a40      	ldr	r2, [pc, #256]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073ac:	4b3e      	ldr	r3, [pc, #248]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4a3d      	ldr	r2, [pc, #244]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fd fa26 	bl	8004808 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fd fa22 	bl	8004808 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e066      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073d2:	4b35      	ldr	r3, [pc, #212]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0x530>
 80073de:	e05e      	b.n	800749e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e0:	4b31      	ldr	r3, [pc, #196]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a30      	ldr	r2, [pc, #192]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 80073e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fd fa0c 	bl	8004808 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fd fa08 	bl	8004808 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e04c      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007406:	4b28      	ldr	r3, [pc, #160]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007412:	4b25      	ldr	r3, [pc, #148]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	4924      	ldr	r1, [pc, #144]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 8007418:	4b25      	ldr	r3, [pc, #148]	@ (80074b0 <HAL_RCC_OscConfig+0x620>)
 800741a:	4013      	ands	r3, r2
 800741c:	60cb      	str	r3, [r1, #12]
 800741e:	e03e      	b.n	800749e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e039      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800742c:	4b1e      	ldr	r3, [pc, #120]	@ (80074a8 <HAL_RCC_OscConfig+0x618>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f003 0203 	and.w	r2, r3, #3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	429a      	cmp	r2, r3
 800743e:	d12c      	bne.n	800749a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	3b01      	subs	r3, #1
 800744c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d123      	bne.n	800749a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800745e:	429a      	cmp	r2, r3
 8007460:	d11b      	bne.n	800749a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800746e:	429a      	cmp	r2, r3
 8007470:	d113      	bne.n	800749a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	3b01      	subs	r3, #1
 8007480:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007482:	429a      	cmp	r2, r3
 8007484:	d109      	bne.n	800749a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	3b01      	subs	r3, #1
 8007494:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007496:	429a      	cmp	r2, r3
 8007498:	d001      	beq.n	800749e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40021000 	.word	0x40021000
 80074ac:	019f800c 	.word	0x019f800c
 80074b0:	feeefffc 	.word	0xfeeefffc

080074b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e11e      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074cc:	4b91      	ldr	r3, [pc, #580]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d910      	bls.n	80074fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b8e      	ldr	r3, [pc, #568]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	498c      	ldr	r1, [pc, #560]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b8a      	ldr	r3, [pc, #552]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d001      	beq.n	80074fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e106      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d073      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d129      	bne.n	8007564 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007510:	4b81      	ldr	r3, [pc, #516]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0f4      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007520:	f000 f99e 	bl	8007860 <RCC_GetSysClockFreqFromPLLSource>
 8007524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4a7c      	ldr	r2, [pc, #496]	@ (800771c <HAL_RCC_ClockConfig+0x268>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d93f      	bls.n	80075ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800752e:	4b7a      	ldr	r3, [pc, #488]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007542:	2b00      	cmp	r3, #0
 8007544:	d033      	beq.n	80075ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800754a:	2b00      	cmp	r3, #0
 800754c:	d12f      	bne.n	80075ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800754e:	4b72      	ldr	r3, [pc, #456]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007556:	4a70      	ldr	r2, [pc, #448]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800755e:	2380      	movs	r3, #128	@ 0x80
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e024      	b.n	80075ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d107      	bne.n	800757c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800756c:	4b6a      	ldr	r3, [pc, #424]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d109      	bne.n	800758c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e0c6      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800757c:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0be      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800758c:	f000 f8ce 	bl	800772c <HAL_RCC_GetSysClockFreq>
 8007590:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4a61      	ldr	r2, [pc, #388]	@ (800771c <HAL_RCC_ClockConfig+0x268>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d909      	bls.n	80075ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800759a:	4b5f      	ldr	r3, [pc, #380]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075a2:	4a5d      	ldr	r2, [pc, #372]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80075a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075aa:	2380      	movs	r3, #128	@ 0x80
 80075ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f023 0203 	bic.w	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4957      	ldr	r1, [pc, #348]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c0:	f7fd f922 	bl	8004808 <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	e00a      	b.n	80075de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c8:	f7fd f91e 	bl	8004808 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e095      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	4b4e      	ldr	r3, [pc, #312]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 020c 	and.w	r2, r3, #12
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d1eb      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d023      	beq.n	8007644 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007608:	4b43      	ldr	r3, [pc, #268]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a42      	ldr	r2, [pc, #264]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800760e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007612:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007620:	4b3d      	ldr	r3, [pc, #244]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007628:	4a3b      	ldr	r2, [pc, #236]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800762a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800762e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007630:	4b39      	ldr	r3, [pc, #228]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	4936      	ldr	r1, [pc, #216]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800763e:	4313      	orrs	r3, r2
 8007640:	608b      	str	r3, [r1, #8]
 8007642:	e008      	b.n	8007656 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b80      	cmp	r3, #128	@ 0x80
 8007648:	d105      	bne.n	8007656 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800764a:	4b33      	ldr	r3, [pc, #204]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	4a32      	ldr	r2, [pc, #200]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 8007650:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007654:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007656:	4b2f      	ldr	r3, [pc, #188]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d21d      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007664:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 020f 	bic.w	r2, r3, #15
 800766c:	4929      	ldr	r1, [pc, #164]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007674:	f7fd f8c8 	bl	8004808 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767a:	e00a      	b.n	8007692 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767c:	f7fd f8c4 	bl	8004808 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e03b      	b.n	800770a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007692:	4b20      	ldr	r3, [pc, #128]	@ (8007714 <HAL_RCC_ClockConfig+0x260>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d1ed      	bne.n	800767c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4917      	ldr	r1, [pc, #92]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ca:	4b13      	ldr	r3, [pc, #76]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	490f      	ldr	r1, [pc, #60]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076de:	f000 f825 	bl	800772c <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <HAL_RCC_ClockConfig+0x264>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490c      	ldr	r1, [pc, #48]	@ (8007720 <HAL_RCC_ClockConfig+0x26c>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007724 <HAL_RCC_ClockConfig+0x270>)
 80076fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80076fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <HAL_RCC_ClockConfig+0x274>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd f834 	bl	8004770 <HAL_InitTick>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40022000 	.word	0x40022000
 8007718:	40021000 	.word	0x40021000
 800771c:	04c4b400 	.word	0x04c4b400
 8007720:	0800cb24 	.word	0x0800cb24
 8007724:	20000178 	.word	0x20000178
 8007728:	2000017c 	.word	0x2000017c

0800772c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007732:	4b2c      	ldr	r3, [pc, #176]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
 800773a:	2b04      	cmp	r3, #4
 800773c:	d102      	bne.n	8007744 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800773e:	4b2a      	ldr	r3, [pc, #168]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	e047      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007744:	4b27      	ldr	r3, [pc, #156]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 030c 	and.w	r3, r3, #12
 800774c:	2b08      	cmp	r3, #8
 800774e:	d102      	bne.n	8007756 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007750:	4b26      	ldr	r3, [pc, #152]	@ (80077ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	e03e      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007756:	4b23      	ldr	r3, [pc, #140]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	2b0c      	cmp	r3, #12
 8007760:	d136      	bne.n	80077d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007762:	4b20      	ldr	r3, [pc, #128]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800776c:	4b1d      	ldr	r3, [pc, #116]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	3301      	adds	r3, #1
 8007778:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b03      	cmp	r3, #3
 800777e:	d10c      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007780:	4a1a      	ldr	r2, [pc, #104]	@ (80077ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	4a16      	ldr	r2, [pc, #88]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800778a:	68d2      	ldr	r2, [r2, #12]
 800778c:	0a12      	lsrs	r2, r2, #8
 800778e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]
      break;
 8007798:	e00c      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800779a:	4a13      	ldr	r2, [pc, #76]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	4a10      	ldr	r2, [pc, #64]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a4:	68d2      	ldr	r2, [r2, #12]
 80077a6:	0a12      	lsrs	r2, r2, #8
 80077a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
 80077b0:	617b      	str	r3, [r7, #20]
      break;
 80077b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077b4:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	0e5b      	lsrs	r3, r3, #25
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	3301      	adds	r3, #1
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e001      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80077d4:	693b      	ldr	r3, [r7, #16]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40021000 	.word	0x40021000
 80077e8:	00f42400 	.word	0x00f42400
 80077ec:	016e3600 	.word	0x016e3600

080077f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f4:	4b03      	ldr	r3, [pc, #12]	@ (8007804 <HAL_RCC_GetHCLKFreq+0x14>)
 80077f6:	681b      	ldr	r3, [r3, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000178 	.word	0x20000178

08007808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800780c:	f7ff fff0 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 8007810:	4602      	mov	r2, r0
 8007812:	4b06      	ldr	r3, [pc, #24]	@ (800782c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	4904      	ldr	r1, [pc, #16]	@ (8007830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800781e:	5ccb      	ldrb	r3, [r1, r3]
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40021000 	.word	0x40021000
 8007830:	0800cb34 	.word	0x0800cb34

08007834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007838:	f7ff ffda 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 800783c:	4602      	mov	r2, r0
 800783e:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	0adb      	lsrs	r3, r3, #11
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	4904      	ldr	r1, [pc, #16]	@ (800785c <HAL_RCC_GetPCLK2Freq+0x28>)
 800784a:	5ccb      	ldrb	r3, [r1, r3]
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40021000 	.word	0x40021000
 800785c:	0800cb34 	.word	0x0800cb34

08007860 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007866:	4b1e      	ldr	r3, [pc, #120]	@ (80078e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007870:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d10c      	bne.n	800789e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007884:	4a17      	ldr	r2, [pc, #92]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	fbb2 f3f3 	udiv	r3, r2, r3
 800788c:	4a14      	ldr	r2, [pc, #80]	@ (80078e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800788e:	68d2      	ldr	r2, [r2, #12]
 8007890:	0a12      	lsrs	r2, r2, #8
 8007892:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	617b      	str	r3, [r7, #20]
    break;
 800789c:	e00c      	b.n	80078b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800789e:	4a12      	ldr	r2, [pc, #72]	@ (80078e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	4a0e      	ldr	r2, [pc, #56]	@ (80078e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078a8:	68d2      	ldr	r2, [r2, #12]
 80078aa:	0a12      	lsrs	r2, r2, #8
 80078ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078b0:	fb02 f303 	mul.w	r3, r2, r3
 80078b4:	617b      	str	r3, [r7, #20]
    break;
 80078b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078b8:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	0e5b      	lsrs	r3, r3, #25
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	3301      	adds	r3, #1
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80078d2:	687b      	ldr	r3, [r7, #4]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40021000 	.word	0x40021000
 80078e4:	016e3600 	.word	0x016e3600
 80078e8:	00f42400 	.word	0x00f42400

080078ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078f4:	2300      	movs	r3, #0
 80078f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078f8:	2300      	movs	r3, #0
 80078fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8098 	beq.w	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800790a:	2300      	movs	r3, #0
 800790c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800790e:	4b43      	ldr	r3, [pc, #268]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10d      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800791a:	4b40      	ldr	r3, [pc, #256]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007924:	6593      	str	r3, [r2, #88]	@ 0x58
 8007926:	4b3d      	ldr	r3, [pc, #244]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800792a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007932:	2301      	movs	r3, #1
 8007934:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007936:	4b3a      	ldr	r3, [pc, #232]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a39      	ldr	r2, [pc, #228]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800793c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007940:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007942:	f7fc ff61 	bl	8004808 <HAL_GetTick>
 8007946:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007948:	e009      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794a:	f7fc ff5d 	bl	8004808 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d902      	bls.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	74fb      	strb	r3, [r7, #19]
        break;
 800795c:	e005      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800795e:	4b30      	ldr	r3, [pc, #192]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0ef      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800796a:	7cfb      	ldrb	r3, [r7, #19]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d159      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007970:	4b2a      	ldr	r3, [pc, #168]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800797a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01e      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	429a      	cmp	r2, r3
 800798a:	d019      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800798c:	4b23      	ldr	r3, [pc, #140]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007996:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007998:	4b20      	ldr	r3, [pc, #128]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079a8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	4a1b      	ldr	r2, [pc, #108]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079b8:	4a18      	ldr	r2, [pc, #96]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fc ff1d 	bl	8004808 <HAL_GetTick>
 80079ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079d0:	e00b      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d2:	f7fc ff19 	bl	8004808 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d902      	bls.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	74fb      	strb	r3, [r7, #19]
            break;
 80079e8:	e006      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ea:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0ec      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80079f8:	7cfb      	ldrb	r3, [r7, #19]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fe:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a0c:	4903      	ldr	r1, [pc, #12]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a14:	e008      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a16:	7cfb      	ldrb	r3, [r7, #19]
 8007a18:	74bb      	strb	r3, [r7, #18]
 8007a1a:	e005      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a28:	7c7b      	ldrb	r3, [r7, #17]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d105      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a2e:	4ba7      	ldr	r3, [pc, #668]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a32:	4aa6      	ldr	r2, [pc, #664]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a46:	4ba1      	ldr	r3, [pc, #644]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f023 0203 	bic.w	r2, r3, #3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	499d      	ldr	r1, [pc, #628]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a68:	4b98      	ldr	r3, [pc, #608]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6e:	f023 020c 	bic.w	r2, r3, #12
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	4995      	ldr	r1, [pc, #596]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a8a:	4b90      	ldr	r3, [pc, #576]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	498c      	ldr	r1, [pc, #560]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007aac:	4b87      	ldr	r3, [pc, #540]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	4984      	ldr	r1, [pc, #528]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ace:	4b7f      	ldr	r3, [pc, #508]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	497b      	ldr	r1, [pc, #492]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007af0:	4b76      	ldr	r3, [pc, #472]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	4973      	ldr	r1, [pc, #460]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b12:	4b6e      	ldr	r3, [pc, #440]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	496a      	ldr	r1, [pc, #424]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b34:	4b65      	ldr	r3, [pc, #404]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	4962      	ldr	r1, [pc, #392]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b56:	4b5d      	ldr	r3, [pc, #372]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	4959      	ldr	r1, [pc, #356]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b78:	4b54      	ldr	r3, [pc, #336]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b7e:	f023 0203 	bic.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b86:	4951      	ldr	r1, [pc, #324]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	4948      	ldr	r1, [pc, #288]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bbc:	4b43      	ldr	r3, [pc, #268]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bca:	4940      	ldr	r1, [pc, #256]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bda:	d105      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a3a      	ldr	r2, [pc, #232]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007be6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bf4:	4b35      	ldr	r3, [pc, #212]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c02:	4932      	ldr	r1, [pc, #200]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c12:	d105      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c14:	4b2d      	ldr	r3, [pc, #180]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a2c      	ldr	r2, [pc, #176]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c1e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d015      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c2c:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3a:	4924      	ldr	r1, [pc, #144]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c4a:	d105      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c64:	4b19      	ldr	r3, [pc, #100]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c72:	4916      	ldr	r1, [pc, #88]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c84:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4a10      	ldr	r2, [pc, #64]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d019      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	4908      	ldr	r1, [pc, #32]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cba:	d109      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b03      	ldr	r3, [pc, #12]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a02      	ldr	r2, [pc, #8]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007cca:	bf00      	nop
 8007ccc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d015      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007cdc:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cea:	4926      	ldr	r1, [pc, #152]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cfa:	d105      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cfc:	4b21      	ldr	r3, [pc, #132]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a20      	ldr	r2, [pc, #128]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d015      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d14:	4b1b      	ldr	r3, [pc, #108]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d22:	4918      	ldr	r1, [pc, #96]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d105      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d34:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a12      	ldr	r2, [pc, #72]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d015      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d5a:	490a      	ldr	r1, [pc, #40]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d6a:	d105      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4a04      	ldr	r2, [pc, #16]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d78:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40021000 	.word	0x40021000

08007d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e054      	b.n	8007e44 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d111      	bne.n	8007dca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 fee2 	bl	8009b78 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	@ (8007e4c <HAL_TIM_Base_Init+0xc4>)
 8007dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f001 fa2b 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	0800406d 	.word	0x0800406d

08007e50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d001      	beq.n	8007e68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e04c      	b.n	8007f02 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a26      	ldr	r2, [pc, #152]	@ (8007f10 <HAL_TIM_Base_Start+0xc0>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e82:	d01d      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a22      	ldr	r2, [pc, #136]	@ (8007f14 <HAL_TIM_Base_Start+0xc4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a21      	ldr	r2, [pc, #132]	@ (8007f18 <HAL_TIM_Base_Start+0xc8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <HAL_TIM_Base_Start+0xcc>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f20 <HAL_TIM_Base_Start+0xd0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f24 <HAL_TIM_Base_Start+0xd4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x70>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1b      	ldr	r2, [pc, #108]	@ (8007f28 <HAL_TIM_Base_Start+0xd8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d115      	bne.n	8007eec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	4b19      	ldr	r3, [pc, #100]	@ (8007f2c <HAL_TIM_Base_Start+0xdc>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d015      	beq.n	8007efe <HAL_TIM_Base_Start+0xae>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed8:	d011      	beq.n	8007efe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eea:	e008      	b.n	8007efe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e000      	b.n	8007f00 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40012c00 	.word	0x40012c00
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40013400 	.word	0x40013400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40015000 	.word	0x40015000
 8007f2c:	00010007 	.word	0x00010007

08007f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e054      	b.n	8007ff2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a26      	ldr	r2, [pc, #152]	@ (8008000 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d022      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a22      	ldr	r2, [pc, #136]	@ (8008004 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a21      	ldr	r2, [pc, #132]	@ (8008008 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800800c <HAL_TIM_Base_Start_IT+0xdc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a1e      	ldr	r2, [pc, #120]	@ (8008010 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8008014 <HAL_TIM_Base_Start_IT+0xe4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <HAL_TIM_Base_Start_IT+0xe8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d115      	bne.n	8007fdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	4b19      	ldr	r3, [pc, #100]	@ (800801c <HAL_TIM_Base_Start_IT+0xec>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b06      	cmp	r3, #6
 8007fc0:	d015      	beq.n	8007fee <HAL_TIM_Base_Start_IT+0xbe>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc8:	d011      	beq.n	8007fee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fda:	e008      	b.n	8007fee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	e000      	b.n	8007ff0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	40013400 	.word	0x40013400
 8008014:	40014000 	.word	0x40014000
 8008018:	40015000 	.word	0x40015000
 800801c:	00010007 	.word	0x00010007

08008020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e054      	b.n	80080dc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d111      	bne.n	8008062 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 fd96 	bl	8009b78 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a23      	ldr	r2, [pc, #140]	@ (80080e4 <HAL_TIM_PWM_Init+0xc4>)
 8008058:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f001 f8df 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	08004021 	.word	0x08004021

080080e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d109      	bne.n	800810c <HAL_TIM_PWM_Start+0x24>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	bf14      	ite	ne
 8008104:	2301      	movne	r3, #1
 8008106:	2300      	moveq	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	e03c      	b.n	8008186 <HAL_TIM_PWM_Start+0x9e>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b04      	cmp	r3, #4
 8008110:	d109      	bne.n	8008126 <HAL_TIM_PWM_Start+0x3e>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b01      	cmp	r3, #1
 800811c:	bf14      	ite	ne
 800811e:	2301      	movne	r3, #1
 8008120:	2300      	moveq	r3, #0
 8008122:	b2db      	uxtb	r3, r3
 8008124:	e02f      	b.n	8008186 <HAL_TIM_PWM_Start+0x9e>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b08      	cmp	r3, #8
 800812a:	d109      	bne.n	8008140 <HAL_TIM_PWM_Start+0x58>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b01      	cmp	r3, #1
 8008136:	bf14      	ite	ne
 8008138:	2301      	movne	r3, #1
 800813a:	2300      	moveq	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	e022      	b.n	8008186 <HAL_TIM_PWM_Start+0x9e>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	d109      	bne.n	800815a <HAL_TIM_PWM_Start+0x72>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b01      	cmp	r3, #1
 8008150:	bf14      	ite	ne
 8008152:	2301      	movne	r3, #1
 8008154:	2300      	moveq	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	e015      	b.n	8008186 <HAL_TIM_PWM_Start+0x9e>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b10      	cmp	r3, #16
 800815e:	d109      	bne.n	8008174 <HAL_TIM_PWM_Start+0x8c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	bf14      	ite	ne
 800816c:	2301      	movne	r3, #1
 800816e:	2300      	moveq	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	e008      	b.n	8008186 <HAL_TIM_PWM_Start+0x9e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e0a6      	b.n	80082dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <HAL_TIM_PWM_Start+0xb6>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800819c:	e023      	b.n	80081e6 <HAL_TIM_PWM_Start+0xfe>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d104      	bne.n	80081ae <HAL_TIM_PWM_Start+0xc6>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081ac:	e01b      	b.n	80081e6 <HAL_TIM_PWM_Start+0xfe>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d104      	bne.n	80081be <HAL_TIM_PWM_Start+0xd6>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081bc:	e013      	b.n	80081e6 <HAL_TIM_PWM_Start+0xfe>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	d104      	bne.n	80081ce <HAL_TIM_PWM_Start+0xe6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081cc:	e00b      	b.n	80081e6 <HAL_TIM_PWM_Start+0xfe>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d104      	bne.n	80081de <HAL_TIM_PWM_Start+0xf6>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081dc:	e003      	b.n	80081e6 <HAL_TIM_PWM_Start+0xfe>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2201      	movs	r2, #1
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fc9c 	bl	8009b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a3a      	ldr	r2, [pc, #232]	@ (80082e4 <HAL_TIM_PWM_Start+0x1fc>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d018      	beq.n	8008230 <HAL_TIM_PWM_Start+0x148>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a39      	ldr	r2, [pc, #228]	@ (80082e8 <HAL_TIM_PWM_Start+0x200>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <HAL_TIM_PWM_Start+0x148>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a37      	ldr	r2, [pc, #220]	@ (80082ec <HAL_TIM_PWM_Start+0x204>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_TIM_PWM_Start+0x148>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a36      	ldr	r2, [pc, #216]	@ (80082f0 <HAL_TIM_PWM_Start+0x208>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_TIM_PWM_Start+0x148>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a34      	ldr	r2, [pc, #208]	@ (80082f4 <HAL_TIM_PWM_Start+0x20c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_TIM_PWM_Start+0x148>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a33      	ldr	r2, [pc, #204]	@ (80082f8 <HAL_TIM_PWM_Start+0x210>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d101      	bne.n	8008234 <HAL_TIM_PWM_Start+0x14c>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_TIM_PWM_Start+0x14e>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008248:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a25      	ldr	r2, [pc, #148]	@ (80082e4 <HAL_TIM_PWM_Start+0x1fc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d022      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825c:	d01d      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a26      	ldr	r2, [pc, #152]	@ (80082fc <HAL_TIM_PWM_Start+0x214>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d018      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a24      	ldr	r2, [pc, #144]	@ (8008300 <HAL_TIM_PWM_Start+0x218>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a23      	ldr	r2, [pc, #140]	@ (8008304 <HAL_TIM_PWM_Start+0x21c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a19      	ldr	r2, [pc, #100]	@ (80082e8 <HAL_TIM_PWM_Start+0x200>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d009      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a18      	ldr	r2, [pc, #96]	@ (80082ec <HAL_TIM_PWM_Start+0x204>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_TIM_PWM_Start+0x1b2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a18      	ldr	r2, [pc, #96]	@ (80082f8 <HAL_TIM_PWM_Start+0x210>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d115      	bne.n	80082c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	4b19      	ldr	r3, [pc, #100]	@ (8008308 <HAL_TIM_PWM_Start+0x220>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d015      	beq.n	80082d8 <HAL_TIM_PWM_Start+0x1f0>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b2:	d011      	beq.n	80082d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c4:	e008      	b.n	80082d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e000      	b.n	80082da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40013400 	.word	0x40013400
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800
 80082f8:	40015000 	.word	0x40015000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	00010007 	.word	0x00010007

0800830c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e04c      	b.n	80083ba <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d111      	bne.n	8008350 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fc1f 	bl	8009b78 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1f      	ldr	r2, [pc, #124]	@ (80083c4 <HAL_TIM_OnePulse_Init+0xb8>)
 8008346:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f000 ff68 	bl	8009238 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0208 	bic.w	r2, r2, #8
 8008376:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	080083c9 	.word	0x080083c9

080083c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008404:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d108      	bne.n	800841e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d105      	bne.n	800841e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008412:	7b7b      	ldrb	r3, [r7, #13]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d102      	bne.n	800841e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008418:	7b3b      	ldrb	r3, [r7, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d001      	beq.n	8008422 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e059      	b.n	80084d6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0202 	orr.w	r2, r2, #2
 8008450:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0204 	orr.w	r2, r2, #4
 8008460:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2201      	movs	r2, #1
 8008468:	2100      	movs	r1, #0
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fb5e 	bl	8009b2c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2201      	movs	r2, #1
 8008476:	2104      	movs	r1, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f001 fb57 	bl	8009b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a17      	ldr	r2, [pc, #92]	@ (80084e0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d018      	beq.n	80084ba <HAL_TIM_OnePulse_Start_IT+0xde>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a15      	ldr	r2, [pc, #84]	@ (80084e4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <HAL_TIM_OnePulse_Start_IT+0xde>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a14      	ldr	r2, [pc, #80]	@ (80084e8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00e      	beq.n	80084ba <HAL_TIM_OnePulse_Start_IT+0xde>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a12      	ldr	r2, [pc, #72]	@ (80084ec <HAL_TIM_OnePulse_Start_IT+0x110>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_TIM_OnePulse_Start_IT+0xde>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a11      	ldr	r2, [pc, #68]	@ (80084f0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <HAL_TIM_OnePulse_Start_IT+0xde>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a0f      	ldr	r2, [pc, #60]	@ (80084f4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <HAL_TIM_OnePulse_Start_IT+0xe2>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40012c00 	.word	0x40012c00
 80084e4:	40013400 	.word	0x40013400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800
 80084f4:	40015000 	.word	0x40015000

080084f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0a2      	b.n	8008652 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d111      	bne.n	800853c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fb29 	bl	8009b78 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a4a      	ldr	r2, [pc, #296]	@ (800865c <HAL_TIM_Encoder_Init+0x164>)
 8008532:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008552:	f023 0307 	bic.w	r3, r3, #7
 8008556:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f000 fe68 	bl	8009238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	4313      	orrs	r3, r2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80085ae:	f023 030c 	bic.w	r3, r3, #12
 80085b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	021b      	lsls	r3, r3, #8
 80085ca:	4313      	orrs	r3, r2
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	011a      	lsls	r2, r3, #4
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	031b      	lsls	r3, r3, #12
 80085de:	4313      	orrs	r3, r2
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80085ec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80085f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	4313      	orrs	r3, r2
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	0800413d 	.word	0x0800413d

08008660 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008670:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008678:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008680:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008688:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d110      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d102      	bne.n	800869c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008696:	7b7b      	ldrb	r3, [r7, #13]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d001      	beq.n	80086a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e069      	b.n	8008774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b0:	e031      	b.n	8008716 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d110      	bne.n	80086da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d102      	bne.n	80086c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086be:	7b3b      	ldrb	r3, [r7, #12]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d001      	beq.n	80086c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e055      	b.n	8008774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086d8:	e01d      	b.n	8008716 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d108      	bne.n	80086f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086e6:	7b7b      	ldrb	r3, [r7, #13]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086ec:	7b3b      	ldrb	r3, [r7, #12]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d001      	beq.n	80086f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e03e      	b.n	8008774 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2202      	movs	r2, #2
 8008702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2202      	movs	r2, #2
 800870a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_TIM_Encoder_Start+0xc4>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b04      	cmp	r3, #4
 8008720:	d008      	beq.n	8008734 <HAL_TIM_Encoder_Start+0xd4>
 8008722:	e00f      	b.n	8008744 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2201      	movs	r2, #1
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f001 f9fd 	bl	8009b2c <TIM_CCxChannelCmd>
      break;
 8008732:	e016      	b.n	8008762 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2201      	movs	r2, #1
 800873a:	2104      	movs	r1, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f9f5 	bl	8009b2c <TIM_CCxChannelCmd>
      break;
 8008742:	e00e      	b.n	8008762 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2201      	movs	r2, #1
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f001 f9ed 	bl	8009b2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2201      	movs	r2, #1
 8008758:	2104      	movs	r1, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f001 f9e6 	bl	8009b2c <TIM_CCxChannelCmd>
      break;
 8008760:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0201 	orr.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d026      	beq.n	80087ec <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d021      	beq.n	80087ec <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0202 	mvn.w	r2, #2
 80087b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
 80087d0:	e009      	b.n	80087e6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d026      	beq.n	8008844 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d021      	beq.n	8008844 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0204 	mvn.w	r2, #4
 8008808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2202      	movs	r2, #2
 800880e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
 8008828:	e009      	b.n	800883e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d026      	beq.n	800889c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f003 0308 	and.w	r3, r3, #8
 8008854:	2b00      	cmp	r3, #0
 8008856:	d021      	beq.n	800889c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0208 	mvn.w	r2, #8
 8008860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2204      	movs	r2, #4
 8008866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	4798      	blx	r3
 8008880:	e009      	b.n	8008896 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d026      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d021      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0210 	mvn.w	r2, #16
 80088b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2208      	movs	r2, #8
 80088be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
 80088d8:	e009      	b.n	80088ee <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00e      	beq.n	800891c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0201 	mvn.w	r2, #1
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00e      	beq.n	800894e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800896a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00e      	beq.n	800899e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f003 0320 	and.w	r3, r3, #32
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00e      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d009      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f06f 0220 	mvn.w	r2, #32
 80089ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00e      	beq.n	80089ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80089e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00e      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d101      	bne.n	8008a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e0ff      	b.n	8008c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b14      	cmp	r3, #20
 8008a9a:	f200 80f0 	bhi.w	8008c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008c7f 	.word	0x08008c7f
 8008aac:	08008c7f 	.word	0x08008c7f
 8008ab0:	08008c7f 	.word	0x08008c7f
 8008ab4:	08008b39 	.word	0x08008b39
 8008ab8:	08008c7f 	.word	0x08008c7f
 8008abc:	08008c7f 	.word	0x08008c7f
 8008ac0:	08008c7f 	.word	0x08008c7f
 8008ac4:	08008b7b 	.word	0x08008b7b
 8008ac8:	08008c7f 	.word	0x08008c7f
 8008acc:	08008c7f 	.word	0x08008c7f
 8008ad0:	08008c7f 	.word	0x08008c7f
 8008ad4:	08008bbb 	.word	0x08008bbb
 8008ad8:	08008c7f 	.word	0x08008c7f
 8008adc:	08008c7f 	.word	0x08008c7f
 8008ae0:	08008c7f 	.word	0x08008c7f
 8008ae4:	08008bfd 	.word	0x08008bfd
 8008ae8:	08008c7f 	.word	0x08008c7f
 8008aec:	08008c7f 	.word	0x08008c7f
 8008af0:	08008c7f 	.word	0x08008c7f
 8008af4:	08008c3d 	.word	0x08008c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fc4e 	bl	80093a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f042 0208 	orr.w	r2, r2, #8
 8008b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0204 	bic.w	r2, r2, #4
 8008b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6999      	ldr	r1, [r3, #24]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	619a      	str	r2, [r3, #24]
      break;
 8008b36:	e0a5      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fcc8 	bl	80094d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699a      	ldr	r2, [r3, #24]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6999      	ldr	r1, [r3, #24]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	021a      	lsls	r2, r3, #8
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	619a      	str	r2, [r3, #24]
      break;
 8008b78:	e084      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fd3b 	bl	80095fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 0208 	orr.w	r2, r2, #8
 8008b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0204 	bic.w	r2, r2, #4
 8008ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69d9      	ldr	r1, [r3, #28]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	61da      	str	r2, [r3, #28]
      break;
 8008bb8:	e064      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fdad 	bl	8009720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69da      	ldr	r2, [r3, #28]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69d9      	ldr	r1, [r3, #28]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	021a      	lsls	r2, r3, #8
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	61da      	str	r2, [r3, #28]
      break;
 8008bfa:	e043      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fe20 	bl	8009848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0208 	orr.w	r2, r2, #8
 8008c16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0204 	bic.w	r2, r2, #4
 8008c26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c3a:	e023      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fe6a 	bl	800991c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	021a      	lsls	r2, r3, #8
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c7c:	e002      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	75fb      	strb	r3, [r7, #23]
      break;
 8008c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop

08008c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e0f6      	b.n	8008ea2 <HAL_TIM_ConfigClockSource+0x20a>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008cd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a6f      	ldr	r2, [pc, #444]	@ (8008eac <HAL_TIM_ConfigClockSource+0x214>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	f000 80c1 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008cf4:	4a6d      	ldr	r2, [pc, #436]	@ (8008eac <HAL_TIM_ConfigClockSource+0x214>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	f200 80c6 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x218>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	f000 80b9 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d04:	4a6a      	ldr	r2, [pc, #424]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x218>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	f200 80be 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d0c:	4a69      	ldr	r2, [pc, #420]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f000 80b1 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d14:	4a67      	ldr	r2, [pc, #412]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	f200 80b6 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d1c:	4a66      	ldr	r2, [pc, #408]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x220>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	f000 80a9 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d24:	4a64      	ldr	r2, [pc, #400]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x220>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	f200 80ae 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d2c:	4a63      	ldr	r2, [pc, #396]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x224>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	f000 80a1 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d34:	4a61      	ldr	r2, [pc, #388]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x224>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	f200 80a6 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d3c:	4a60      	ldr	r2, [pc, #384]	@ (8008ec0 <HAL_TIM_ConfigClockSource+0x228>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	f000 8099 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d44:	4a5e      	ldr	r2, [pc, #376]	@ (8008ec0 <HAL_TIM_ConfigClockSource+0x228>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	f200 809e 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d50:	f000 8091 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d58:	f200 8096 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d60:	f000 8089 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d68:	f200 808e 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d70:	d03e      	beq.n	8008df0 <HAL_TIM_ConfigClockSource+0x158>
 8008d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d76:	f200 8087 	bhi.w	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d7e:	f000 8086 	beq.w	8008e8e <HAL_TIM_ConfigClockSource+0x1f6>
 8008d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d86:	d87f      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d88:	2b70      	cmp	r3, #112	@ 0x70
 8008d8a:	d01a      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x12a>
 8008d8c:	2b70      	cmp	r3, #112	@ 0x70
 8008d8e:	d87b      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d90:	2b60      	cmp	r3, #96	@ 0x60
 8008d92:	d050      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x19e>
 8008d94:	2b60      	cmp	r3, #96	@ 0x60
 8008d96:	d877      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d98:	2b50      	cmp	r3, #80	@ 0x50
 8008d9a:	d03c      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x17e>
 8008d9c:	2b50      	cmp	r3, #80	@ 0x50
 8008d9e:	d873      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008da0:	2b40      	cmp	r3, #64	@ 0x40
 8008da2:	d058      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x1be>
 8008da4:	2b40      	cmp	r3, #64	@ 0x40
 8008da6:	d86f      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008da8:	2b30      	cmp	r3, #48	@ 0x30
 8008daa:	d064      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008dac:	2b30      	cmp	r3, #48	@ 0x30
 8008dae:	d86b      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d060      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d867      	bhi.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05c      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008dbc:	2b10      	cmp	r3, #16
 8008dbe:	d05a      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x1de>
 8008dc0:	e062      	b.n	8008e88 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dd2:	f000 fe8b 	bl	8009aec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	609a      	str	r2, [r3, #8]
      break;
 8008dee:	e04f      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e00:	f000 fe74 	bl	8009aec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e12:	609a      	str	r2, [r3, #8]
      break;
 8008e14:	e03c      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e22:	461a      	mov	r2, r3
 8008e24:	f000 fde6 	bl	80099f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2150      	movs	r1, #80	@ 0x50
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fe3f 	bl	8009ab2 <TIM_ITRx_SetConfig>
      break;
 8008e34:	e02c      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e42:	461a      	mov	r2, r3
 8008e44:	f000 fe05 	bl	8009a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2160      	movs	r1, #96	@ 0x60
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fe2f 	bl	8009ab2 <TIM_ITRx_SetConfig>
      break;
 8008e54:	e01c      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e62:	461a      	mov	r2, r3
 8008e64:	f000 fdc6 	bl	80099f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2140      	movs	r1, #64	@ 0x40
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fe1f 	bl	8009ab2 <TIM_ITRx_SetConfig>
      break;
 8008e74:	e00c      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4610      	mov	r0, r2
 8008e82:	f000 fe16 	bl	8009ab2 <TIM_ITRx_SetConfig>
      break;
 8008e86:	e003      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	e000      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	00100070 	.word	0x00100070
 8008eb0:	00100060 	.word	0x00100060
 8008eb4:	00100050 	.word	0x00100050
 8008eb8:	00100040 	.word	0x00100040
 8008ebc:	00100030 	.word	0x00100030
 8008ec0:	00100020 	.word	0x00100020

08008ec4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	460b      	mov	r3, r1
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e14a      	b.n	800922a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 80dd 	bne.w	800915c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b1f      	cmp	r3, #31
 8008fa6:	f200 80d6 	bhi.w	8009156 <HAL_TIM_RegisterCallback+0x1de>
 8008faa:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb0 <HAL_TIM_RegisterCallback+0x38>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009031 	.word	0x08009031
 8008fb4:	08009039 	.word	0x08009039
 8008fb8:	08009041 	.word	0x08009041
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009051 	.word	0x08009051
 8008fc4:	08009059 	.word	0x08009059
 8008fc8:	08009061 	.word	0x08009061
 8008fcc:	08009069 	.word	0x08009069
 8008fd0:	08009071 	.word	0x08009071
 8008fd4:	08009079 	.word	0x08009079
 8008fd8:	08009081 	.word	0x08009081
 8008fdc:	08009089 	.word	0x08009089
 8008fe0:	08009091 	.word	0x08009091
 8008fe4:	08009099 	.word	0x08009099
 8008fe8:	080090a3 	.word	0x080090a3
 8008fec:	080090ad 	.word	0x080090ad
 8008ff0:	080090b7 	.word	0x080090b7
 8008ff4:	080090c1 	.word	0x080090c1
 8008ff8:	080090cb 	.word	0x080090cb
 8008ffc:	080090d5 	.word	0x080090d5
 8009000:	080090df 	.word	0x080090df
 8009004:	080090e9 	.word	0x080090e9
 8009008:	080090f3 	.word	0x080090f3
 800900c:	080090fd 	.word	0x080090fd
 8009010:	08009107 	.word	0x08009107
 8009014:	08009111 	.word	0x08009111
 8009018:	0800911b 	.word	0x0800911b
 800901c:	08009125 	.word	0x08009125
 8009020:	0800912f 	.word	0x0800912f
 8009024:	08009139 	.word	0x08009139
 8009028:	08009143 	.word	0x08009143
 800902c:	0800914d 	.word	0x0800914d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009036:	e0f7      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800903e:	e0f3      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009046:	e0ef      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800904e:	e0eb      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009056:	e0e7      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800905e:	e0e3      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009066:	e0df      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800906e:	e0db      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009076:	e0d7      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800907e:	e0d3      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009086:	e0cf      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800908e:	e0cb      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009096:	e0c7      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80090a0:	e0c2      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80090aa:	e0bd      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80090b4:	e0b8      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80090be:	e0b3      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80090c8:	e0ae      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80090d2:	e0a9      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80090dc:	e0a4      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80090e6:	e09f      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80090f0:	e09a      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80090fa:	e095      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009104:	e090      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800910e:	e08b      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009118:	e086      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009122:	e081      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800912c:	e07c      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009136:	e077      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009140:	e072      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800914a:	e06d      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009154:	e068      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	75fb      	strb	r3, [r7, #23]
        break;
 800915a:	e065      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d15d      	bne.n	8009224 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	2b0d      	cmp	r3, #13
 800916c:	d857      	bhi.n	800921e <HAL_TIM_RegisterCallback+0x2a6>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <HAL_TIM_RegisterCallback+0x1fc>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091ad 	.word	0x080091ad
 8009178:	080091b5 	.word	0x080091b5
 800917c:	080091bd 	.word	0x080091bd
 8009180:	080091c5 	.word	0x080091c5
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091dd 	.word	0x080091dd
 8009190:	080091e5 	.word	0x080091e5
 8009194:	080091ed 	.word	0x080091ed
 8009198:	080091f5 	.word	0x080091f5
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	08009205 	.word	0x08009205
 80091a4:	0800920d 	.word	0x0800920d
 80091a8:	08009215 	.word	0x08009215
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80091b2:	e039      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80091ba:	e035      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80091c2:	e031      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80091ca:	e02d      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80091d2:	e029      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80091da:	e025      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80091e2:	e021      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80091ea:	e01d      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80091f2:	e019      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80091fa:	e015      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009202:	e011      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800920a:	e00d      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009212:	e009      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800921c:	e004      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
        break;
 8009222:	e001      	b.n	8009228 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a4c      	ldr	r2, [pc, #304]	@ (800937c <TIM_Base_SetConfig+0x144>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d017      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009256:	d013      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a49      	ldr	r2, [pc, #292]	@ (8009380 <TIM_Base_SetConfig+0x148>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00f      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a48      	ldr	r2, [pc, #288]	@ (8009384 <TIM_Base_SetConfig+0x14c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00b      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a47      	ldr	r2, [pc, #284]	@ (8009388 <TIM_Base_SetConfig+0x150>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d007      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a46      	ldr	r2, [pc, #280]	@ (800938c <TIM_Base_SetConfig+0x154>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d003      	beq.n	8009280 <TIM_Base_SetConfig+0x48>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a45      	ldr	r2, [pc, #276]	@ (8009390 <TIM_Base_SetConfig+0x158>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d108      	bne.n	8009292 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a39      	ldr	r2, [pc, #228]	@ (800937c <TIM_Base_SetConfig+0x144>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d023      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a0:	d01f      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a36      	ldr	r2, [pc, #216]	@ (8009380 <TIM_Base_SetConfig+0x148>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d01b      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a35      	ldr	r2, [pc, #212]	@ (8009384 <TIM_Base_SetConfig+0x14c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d017      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a34      	ldr	r2, [pc, #208]	@ (8009388 <TIM_Base_SetConfig+0x150>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d013      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a33      	ldr	r2, [pc, #204]	@ (800938c <TIM_Base_SetConfig+0x154>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d00f      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a33      	ldr	r2, [pc, #204]	@ (8009394 <TIM_Base_SetConfig+0x15c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00b      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a32      	ldr	r2, [pc, #200]	@ (8009398 <TIM_Base_SetConfig+0x160>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d007      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a31      	ldr	r2, [pc, #196]	@ (800939c <TIM_Base_SetConfig+0x164>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d003      	beq.n	80092e2 <TIM_Base_SetConfig+0xaa>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009390 <TIM_Base_SetConfig+0x158>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d108      	bne.n	80092f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a18      	ldr	r2, [pc, #96]	@ (800937c <TIM_Base_SetConfig+0x144>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d013      	beq.n	8009348 <TIM_Base_SetConfig+0x110>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a1a      	ldr	r2, [pc, #104]	@ (800938c <TIM_Base_SetConfig+0x154>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00f      	beq.n	8009348 <TIM_Base_SetConfig+0x110>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1a      	ldr	r2, [pc, #104]	@ (8009394 <TIM_Base_SetConfig+0x15c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00b      	beq.n	8009348 <TIM_Base_SetConfig+0x110>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <TIM_Base_SetConfig+0x160>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d007      	beq.n	8009348 <TIM_Base_SetConfig+0x110>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a18      	ldr	r2, [pc, #96]	@ (800939c <TIM_Base_SetConfig+0x164>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d003      	beq.n	8009348 <TIM_Base_SetConfig+0x110>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a13      	ldr	r2, [pc, #76]	@ (8009390 <TIM_Base_SetConfig+0x158>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d103      	bne.n	8009350 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b01      	cmp	r3, #1
 8009360:	d105      	bne.n	800936e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f023 0201 	bic.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]
  }
}
 800936e:	bf00      	nop
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	40012c00 	.word	0x40012c00
 8009380:	40000400 	.word	0x40000400
 8009384:	40000800 	.word	0x40000800
 8009388:	40000c00 	.word	0x40000c00
 800938c:	40013400 	.word	0x40013400
 8009390:	40015000 	.word	0x40015000
 8009394:	40014000 	.word	0x40014000
 8009398:	40014400 	.word	0x40014400
 800939c:	40014800 	.word	0x40014800

080093a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a1b      	ldr	r3, [r3, #32]
 80093b4:	f023 0201 	bic.w	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f023 0302 	bic.w	r3, r3, #2
 80093ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a30      	ldr	r2, [pc, #192]	@ (80094bc <TIM_OC1_SetConfig+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d013      	beq.n	8009428 <TIM_OC1_SetConfig+0x88>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a2f      	ldr	r2, [pc, #188]	@ (80094c0 <TIM_OC1_SetConfig+0x120>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00f      	beq.n	8009428 <TIM_OC1_SetConfig+0x88>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a2e      	ldr	r2, [pc, #184]	@ (80094c4 <TIM_OC1_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00b      	beq.n	8009428 <TIM_OC1_SetConfig+0x88>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a2d      	ldr	r2, [pc, #180]	@ (80094c8 <TIM_OC1_SetConfig+0x128>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d007      	beq.n	8009428 <TIM_OC1_SetConfig+0x88>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a2c      	ldr	r2, [pc, #176]	@ (80094cc <TIM_OC1_SetConfig+0x12c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <TIM_OC1_SetConfig+0x88>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a2b      	ldr	r2, [pc, #172]	@ (80094d0 <TIM_OC1_SetConfig+0x130>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d10c      	bne.n	8009442 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f023 0308 	bic.w	r3, r3, #8
 800942e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f023 0304 	bic.w	r3, r3, #4
 8009440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <TIM_OC1_SetConfig+0x11c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <TIM_OC1_SetConfig+0xd2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <TIM_OC1_SetConfig+0x120>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d00f      	beq.n	8009472 <TIM_OC1_SetConfig+0xd2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a1b      	ldr	r2, [pc, #108]	@ (80094c4 <TIM_OC1_SetConfig+0x124>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00b      	beq.n	8009472 <TIM_OC1_SetConfig+0xd2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a1a      	ldr	r2, [pc, #104]	@ (80094c8 <TIM_OC1_SetConfig+0x128>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d007      	beq.n	8009472 <TIM_OC1_SetConfig+0xd2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a19      	ldr	r2, [pc, #100]	@ (80094cc <TIM_OC1_SetConfig+0x12c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d003      	beq.n	8009472 <TIM_OC1_SetConfig+0xd2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a18      	ldr	r2, [pc, #96]	@ (80094d0 <TIM_OC1_SetConfig+0x130>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d111      	bne.n	8009496 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	621a      	str	r2, [r3, #32]
}
 80094b0:	bf00      	nop
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	40012c00 	.word	0x40012c00
 80094c0:	40013400 	.word	0x40013400
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40014400 	.word	0x40014400
 80094cc:	40014800 	.word	0x40014800
 80094d0:	40015000 	.word	0x40015000

080094d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f023 0210 	bic.w	r2, r3, #16
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f023 0320 	bic.w	r3, r3, #32
 8009522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a2c      	ldr	r2, [pc, #176]	@ (80095e4 <TIM_OC2_SetConfig+0x110>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_OC2_SetConfig+0x74>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a2b      	ldr	r2, [pc, #172]	@ (80095e8 <TIM_OC2_SetConfig+0x114>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC2_SetConfig+0x74>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a2a      	ldr	r2, [pc, #168]	@ (80095ec <TIM_OC2_SetConfig+0x118>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d10d      	bne.n	8009564 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	011b      	lsls	r3, r3, #4
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a1f      	ldr	r2, [pc, #124]	@ (80095e4 <TIM_OC2_SetConfig+0x110>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d013      	beq.n	8009594 <TIM_OC2_SetConfig+0xc0>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1e      	ldr	r2, [pc, #120]	@ (80095e8 <TIM_OC2_SetConfig+0x114>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00f      	beq.n	8009594 <TIM_OC2_SetConfig+0xc0>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a1e      	ldr	r2, [pc, #120]	@ (80095f0 <TIM_OC2_SetConfig+0x11c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00b      	beq.n	8009594 <TIM_OC2_SetConfig+0xc0>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a1d      	ldr	r2, [pc, #116]	@ (80095f4 <TIM_OC2_SetConfig+0x120>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d007      	beq.n	8009594 <TIM_OC2_SetConfig+0xc0>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a1c      	ldr	r2, [pc, #112]	@ (80095f8 <TIM_OC2_SetConfig+0x124>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d003      	beq.n	8009594 <TIM_OC2_SetConfig+0xc0>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a17      	ldr	r2, [pc, #92]	@ (80095ec <TIM_OC2_SetConfig+0x118>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d113      	bne.n	80095bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800959a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	621a      	str	r2, [r3, #32]
}
 80095d6:	bf00      	nop
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40012c00 	.word	0x40012c00
 80095e8:	40013400 	.word	0x40013400
 80095ec:	40015000 	.word	0x40015000
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40014400 	.word	0x40014400
 80095f8:	40014800 	.word	0x40014800

080095fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800962a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4313      	orrs	r3, r2
 8009654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2b      	ldr	r2, [pc, #172]	@ (8009708 <TIM_OC3_SetConfig+0x10c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d007      	beq.n	800966e <TIM_OC3_SetConfig+0x72>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2a      	ldr	r2, [pc, #168]	@ (800970c <TIM_OC3_SetConfig+0x110>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC3_SetConfig+0x72>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a29      	ldr	r2, [pc, #164]	@ (8009710 <TIM_OC3_SetConfig+0x114>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10d      	bne.n	800968a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1e      	ldr	r2, [pc, #120]	@ (8009708 <TIM_OC3_SetConfig+0x10c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <TIM_OC3_SetConfig+0xbe>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1d      	ldr	r2, [pc, #116]	@ (800970c <TIM_OC3_SetConfig+0x110>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00f      	beq.n	80096ba <TIM_OC3_SetConfig+0xbe>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <TIM_OC3_SetConfig+0x118>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00b      	beq.n	80096ba <TIM_OC3_SetConfig+0xbe>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <TIM_OC3_SetConfig+0x11c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d007      	beq.n	80096ba <TIM_OC3_SetConfig+0xbe>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a1b      	ldr	r2, [pc, #108]	@ (800971c <TIM_OC3_SetConfig+0x120>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d003      	beq.n	80096ba <TIM_OC3_SetConfig+0xbe>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a16      	ldr	r2, [pc, #88]	@ (8009710 <TIM_OC3_SetConfig+0x114>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d113      	bne.n	80096e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	621a      	str	r2, [r3, #32]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	40012c00 	.word	0x40012c00
 800970c:	40013400 	.word	0x40013400
 8009710:	40015000 	.word	0x40015000
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800

08009720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800974e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800975a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800976e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	031b      	lsls	r3, r3, #12
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4313      	orrs	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a2c      	ldr	r2, [pc, #176]	@ (8009830 <TIM_OC4_SetConfig+0x110>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_OC4_SetConfig+0x74>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a2b      	ldr	r2, [pc, #172]	@ (8009834 <TIM_OC4_SetConfig+0x114>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC4_SetConfig+0x74>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a2a      	ldr	r2, [pc, #168]	@ (8009838 <TIM_OC4_SetConfig+0x118>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d10d      	bne.n	80097b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800979a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	031b      	lsls	r3, r3, #12
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009830 <TIM_OC4_SetConfig+0x110>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d013      	beq.n	80097e0 <TIM_OC4_SetConfig+0xc0>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009834 <TIM_OC4_SetConfig+0x114>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00f      	beq.n	80097e0 <TIM_OC4_SetConfig+0xc0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a1e      	ldr	r2, [pc, #120]	@ (800983c <TIM_OC4_SetConfig+0x11c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <TIM_OC4_SetConfig+0xc0>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009840 <TIM_OC4_SetConfig+0x120>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <TIM_OC4_SetConfig+0xc0>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009844 <TIM_OC4_SetConfig+0x124>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_OC4_SetConfig+0xc0>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a17      	ldr	r2, [pc, #92]	@ (8009838 <TIM_OC4_SetConfig+0x118>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d113      	bne.n	8009808 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	019b      	lsls	r3, r3, #6
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	019b      	lsls	r3, r3, #6
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	4313      	orrs	r3, r2
 8009806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	621a      	str	r2, [r3, #32]
}
 8009822:	bf00      	nop
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	40012c00 	.word	0x40012c00
 8009834:	40013400 	.word	0x40013400
 8009838:	40015000 	.word	0x40015000
 800983c:	40014000 	.word	0x40014000
 8009840:	40014400 	.word	0x40014400
 8009844:	40014800 	.word	0x40014800

08009848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800988c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a19      	ldr	r2, [pc, #100]	@ (8009904 <TIM_OC5_SetConfig+0xbc>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <TIM_OC5_SetConfig+0x82>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a18      	ldr	r2, [pc, #96]	@ (8009908 <TIM_OC5_SetConfig+0xc0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00f      	beq.n	80098ca <TIM_OC5_SetConfig+0x82>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a17      	ldr	r2, [pc, #92]	@ (800990c <TIM_OC5_SetConfig+0xc4>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00b      	beq.n	80098ca <TIM_OC5_SetConfig+0x82>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a16      	ldr	r2, [pc, #88]	@ (8009910 <TIM_OC5_SetConfig+0xc8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d007      	beq.n	80098ca <TIM_OC5_SetConfig+0x82>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a15      	ldr	r2, [pc, #84]	@ (8009914 <TIM_OC5_SetConfig+0xcc>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_OC5_SetConfig+0x82>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a14      	ldr	r2, [pc, #80]	@ (8009918 <TIM_OC5_SetConfig+0xd0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d109      	bne.n	80098de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	621a      	str	r2, [r3, #32]
}
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40012c00 	.word	0x40012c00
 8009908:	40013400 	.word	0x40013400
 800990c:	40014000 	.word	0x40014000
 8009910:	40014400 	.word	0x40014400
 8009914:	40014800 	.word	0x40014800
 8009918:	40015000 	.word	0x40015000

0800991c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800994a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800994e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	021b      	lsls	r3, r3, #8
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	4313      	orrs	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	051b      	lsls	r3, r3, #20
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	4313      	orrs	r3, r2
 800996e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a1a      	ldr	r2, [pc, #104]	@ (80099dc <TIM_OC6_SetConfig+0xc0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d013      	beq.n	80099a0 <TIM_OC6_SetConfig+0x84>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a19      	ldr	r2, [pc, #100]	@ (80099e0 <TIM_OC6_SetConfig+0xc4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00f      	beq.n	80099a0 <TIM_OC6_SetConfig+0x84>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a18      	ldr	r2, [pc, #96]	@ (80099e4 <TIM_OC6_SetConfig+0xc8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00b      	beq.n	80099a0 <TIM_OC6_SetConfig+0x84>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a17      	ldr	r2, [pc, #92]	@ (80099e8 <TIM_OC6_SetConfig+0xcc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <TIM_OC6_SetConfig+0x84>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <TIM_OC6_SetConfig+0xd0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_OC6_SetConfig+0x84>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a15      	ldr	r2, [pc, #84]	@ (80099f0 <TIM_OC6_SetConfig+0xd4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d109      	bne.n	80099b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	029b      	lsls	r3, r3, #10
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	621a      	str	r2, [r3, #32]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	40012c00 	.word	0x40012c00
 80099e0:	40013400 	.word	0x40013400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40014400 	.word	0x40014400
 80099ec:	40014800 	.word	0x40014800
 80099f0:	40015000 	.word	0x40015000

080099f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	f023 0201 	bic.w	r2, r3, #1
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f023 030a 	bic.w	r3, r3, #10
 8009a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	621a      	str	r2, [r3, #32]
}
 8009a46:	bf00      	nop
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b087      	sub	sp, #28
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	f023 0210 	bic.w	r2, r3, #16
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	031b      	lsls	r3, r3, #12
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f043 0307 	orr.w	r3, r3, #7
 8009ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	609a      	str	r2, [r3, #8]
}
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	021a      	lsls	r2, r3, #8
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	609a      	str	r2, [r3, #8]
}
 8009b20:	bf00      	nop
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f003 031f 	and.w	r3, r3, #31
 8009b3e:	2201      	movs	r2, #1
 8009b40:	fa02 f303 	lsl.w	r3, r2, r3
 8009b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1a      	ldr	r2, [r3, #32]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	401a      	ands	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1a      	ldr	r2, [r3, #32]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f003 031f 	and.w	r3, r3, #31
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	fa01 f303 	lsl.w	r3, r1, r3
 8009b64:	431a      	orrs	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
	...

08009b78 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a26      	ldr	r2, [pc, #152]	@ (8009c1c <TIM_ResetCallback+0xa4>)
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a25      	ldr	r2, [pc, #148]	@ (8009c20 <TIM_ResetCallback+0xa8>)
 8009b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a24      	ldr	r2, [pc, #144]	@ (8009c24 <TIM_ResetCallback+0xac>)
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a23      	ldr	r2, [pc, #140]	@ (8009c28 <TIM_ResetCallback+0xb0>)
 8009b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a22      	ldr	r2, [pc, #136]	@ (8009c2c <TIM_ResetCallback+0xb4>)
 8009ba4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a21      	ldr	r2, [pc, #132]	@ (8009c30 <TIM_ResetCallback+0xb8>)
 8009bac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a20      	ldr	r2, [pc, #128]	@ (8009c34 <TIM_ResetCallback+0xbc>)
 8009bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a1f      	ldr	r2, [pc, #124]	@ (8009c38 <TIM_ResetCallback+0xc0>)
 8009bbc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c3c <TIM_ResetCallback+0xc4>)
 8009bc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a1d      	ldr	r2, [pc, #116]	@ (8009c40 <TIM_ResetCallback+0xc8>)
 8009bcc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c44 <TIM_ResetCallback+0xcc>)
 8009bd4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a1b      	ldr	r2, [pc, #108]	@ (8009c48 <TIM_ResetCallback+0xd0>)
 8009bdc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a1a      	ldr	r2, [pc, #104]	@ (8009c4c <TIM_ResetCallback+0xd4>)
 8009be4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a19      	ldr	r2, [pc, #100]	@ (8009c50 <TIM_ResetCallback+0xd8>)
 8009bec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a18      	ldr	r2, [pc, #96]	@ (8009c54 <TIM_ResetCallback+0xdc>)
 8009bf4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a17      	ldr	r2, [pc, #92]	@ (8009c58 <TIM_ResetCallback+0xe0>)
 8009bfc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a16      	ldr	r2, [pc, #88]	@ (8009c5c <TIM_ResetCallback+0xe4>)
 8009c04:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a15      	ldr	r2, [pc, #84]	@ (8009c60 <TIM_ResetCallback+0xe8>)
 8009c0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	08002f3d 	.word	0x08002f3d
 8009c20:	08008ec5 	.word	0x08008ec5
 8009c24:	08008f3d 	.word	0x08008f3d
 8009c28:	08008f51 	.word	0x08008f51
 8009c2c:	08008eed 	.word	0x08008eed
 8009c30:	08008f01 	.word	0x08008f01
 8009c34:	08008ed9 	.word	0x08008ed9
 8009c38:	08008f15 	.word	0x08008f15
 8009c3c:	08008f29 	.word	0x08008f29
 8009c40:	08008f65 	.word	0x08008f65
 8009c44:	08009eb9 	.word	0x08009eb9
 8009c48:	08009ecd 	.word	0x08009ecd
 8009c4c:	08009ee1 	.word	0x08009ee1
 8009c50:	08009ef5 	.word	0x08009ef5
 8009c54:	08009f09 	.word	0x08009f09
 8009c58:	08009f1d 	.word	0x08009f1d
 8009c5c:	08009f31 	.word	0x08009f31
 8009c60:	08009f45 	.word	0x08009f45

08009c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e074      	b.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a34      	ldr	r2, [pc, #208]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d009      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a33      	ldr	r2, [pc, #204]	@ (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a31      	ldr	r2, [pc, #196]	@ (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d108      	bne.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a21      	ldr	r2, [pc, #132]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d022      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cfc:	d01d      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a1f      	ldr	r2, [pc, #124]	@ (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d018      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1c      	ldr	r2, [pc, #112]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00e      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a15      	ldr	r2, [pc, #84]	@ (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d009      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a18      	ldr	r2, [pc, #96]	@ (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d004      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a11      	ldr	r2, [pc, #68]	@ (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d10c      	bne.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40013400 	.word	0x40013400
 8009d7c:	40015000 	.word	0x40015000
 8009d80:	40000400 	.word	0x40000400
 8009d84:	40000800 	.word	0x40000800
 8009d88:	40000c00 	.word	0x40000c00
 8009d8c:	40014000 	.word	0x40014000

08009d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e078      	b.n	8009e9e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d009      	beq.n	8009e52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d004      	beq.n	8009e52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a19      	ldr	r2, [pc, #100]	@ (8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d11c      	bne.n	8009e8c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5c:	051b      	lsls	r3, r3, #20
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40012c00 	.word	0x40012c00
 8009eb0:	40013400 	.word	0x40013400
 8009eb4:	40015000 	.word	0x40015000

08009eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e050      	b.n	800a00c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d114      	bne.n	8009f9e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fd5b 	bl	800aa38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a21      	ldr	r2, [pc, #132]	@ (800a014 <HAL_UART_Init+0xbc>)
 8009f90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2224      	movs	r2, #36	@ 0x24
 8009fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0201 	bic.w	r2, r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 f888 	bl	800b0d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fd89 	bl	800aadc <UART_SetConfig>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d101      	bne.n	8009fd4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e01b      	b.n	800a00c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f907 	bl	800b218 <UART_CheckIdleState>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	0800442d 	.word	0x0800442d

0800a018 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	460b      	mov	r3, r1
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e09c      	b.n	800a17e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a04a:	2b20      	cmp	r3, #32
 800a04c:	d16c      	bne.n	800a128 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	2b0c      	cmp	r3, #12
 800a052:	d85e      	bhi.n	800a112 <HAL_UART_RegisterCallback+0xfa>
 800a054:	a201      	add	r2, pc, #4	@ (adr r2, 800a05c <HAL_UART_RegisterCallback+0x44>)
 800a056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05a:	bf00      	nop
 800a05c:	0800a091 	.word	0x0800a091
 800a060:	0800a09b 	.word	0x0800a09b
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0af 	.word	0x0800a0af
 800a06c:	0800a0b9 	.word	0x0800a0b9
 800a070:	0800a0c3 	.word	0x0800a0c3
 800a074:	0800a0cd 	.word	0x0800a0cd
 800a078:	0800a0d7 	.word	0x0800a0d7
 800a07c:	0800a0e1 	.word	0x0800a0e1
 800a080:	0800a0eb 	.word	0x0800a0eb
 800a084:	0800a0f5 	.word	0x0800a0f5
 800a088:	0800a0ff 	.word	0x0800a0ff
 800a08c:	0800a109 	.word	0x0800a109
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a098:	e070      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a0a2:	e06b      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a0ac:	e066      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a0b6:	e061      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a0c0:	e05c      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a0ca:	e057      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a0d4:	e052      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a0de:	e04d      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a0e8:	e048      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a0f2:	e043      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a0fc:	e03e      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a106:	e039      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a110:	e034      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a118:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
        break;
 800a126:	e029      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d11a      	bne.n	800a168 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a132:	7afb      	ldrb	r3, [r7, #11]
 800a134:	2b0b      	cmp	r3, #11
 800a136:	d002      	beq.n	800a13e <HAL_UART_RegisterCallback+0x126>
 800a138:	2b0c      	cmp	r3, #12
 800a13a:	d005      	beq.n	800a148 <HAL_UART_RegisterCallback+0x130>
 800a13c:	e009      	b.n	800a152 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a146:	e019      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a150:	e014      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a158:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
        break;
 800a166:	e009      	b.n	800a17c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a16e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop

0800a18c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	@ 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d137      	bne.n	800a214 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <HAL_UART_Receive_DMA+0x24>
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e030      	b.n	800a216 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a18      	ldr	r2, [pc, #96]	@ (800a220 <HAL_UART_Receive_DMA+0x94>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d01f      	beq.n	800a204 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d018      	beq.n	800a204 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	623b      	str	r3, [r7, #32]
 800a1f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	69f9      	ldr	r1, [r7, #28]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e6      	bne.n	800a1d2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	461a      	mov	r2, r3
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f001 f91c 	bl	800b448 <UART_Start_Receive_DMA>
 800a210:	4603      	mov	r3, r0
 800a212:	e000      	b.n	800a216 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a214:	2302      	movs	r3, #2
  }
}
 800a216:	4618      	mov	r0, r3
 800a218:	3728      	adds	r7, #40	@ 0x28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	40008000 	.word	0x40008000

0800a224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b0ba      	sub	sp, #232	@ 0xe8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a24a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a24e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a252:	4013      	ands	r3, r2
 800a254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d11b      	bne.n	800a298 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a264:	f003 0320 	and.w	r3, r3, #32
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d105      	bne.n	800a284 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a27c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 8312 	beq.w	800a8b2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	4798      	blx	r3
      }
      return;
 800a296:	e30c      	b.n	800a8b2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8129 	beq.w	800a4f4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a2a6:	4b90      	ldr	r3, [pc, #576]	@ (800a4e8 <HAL_UART_IRQHandler+0x2c4>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a2b2:	4b8e      	ldr	r3, [pc, #568]	@ (800a4ec <HAL_UART_IRQHandler+0x2c8>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 811c 	beq.w	800a4f4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d011      	beq.n	800a2ec <HAL_UART_IRQHandler+0xc8>
 800a2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e2:	f043 0201 	orr.w	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d011      	beq.n	800a31c <HAL_UART_IRQHandler+0xf8>
 800a2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2202      	movs	r2, #2
 800a30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a312:	f043 0204 	orr.w	r2, r3, #4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	d011      	beq.n	800a34c <HAL_UART_IRQHandler+0x128>
 800a328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2204      	movs	r2, #4
 800a33a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a342:	f043 0202 	orr.w	r2, r3, #2
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d017      	beq.n	800a388 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b00      	cmp	r3, #0
 800a362:	d105      	bne.n	800a370 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a364:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a368:	4b5f      	ldr	r3, [pc, #380]	@ (800a4e8 <HAL_UART_IRQHandler+0x2c4>)
 800a36a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00b      	beq.n	800a388 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2208      	movs	r2, #8
 800a376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a37e:	f043 0208 	orr.w	r2, r3, #8
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a38c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a390:	2b00      	cmp	r3, #0
 800a392:	d012      	beq.n	800a3ba <HAL_UART_IRQHandler+0x196>
 800a394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00c      	beq.n	800a3ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b0:	f043 0220 	orr.w	r2, r3, #32
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 8278 	beq.w	800a8b6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d013      	beq.n	800a3fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d007      	beq.n	800a3fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a40e:	2b40      	cmp	r3, #64	@ 0x40
 800a410:	d005      	beq.n	800a41e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a416:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d058      	beq.n	800a4d0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 f8f9 	bl	800b616 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42e:	2b40      	cmp	r3, #64	@ 0x40
 800a430:	d148      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a44c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3308      	adds	r3, #8
 800a45a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a45e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a46a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1d9      	bne.n	800a432 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a484:	2b00      	cmp	r3, #0
 800a486:	d017      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a48e:	4a18      	ldr	r2, [pc, #96]	@ (800a4f0 <HAL_UART_IRQHandler+0x2cc>)
 800a490:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fc f8c5 	bl	8006628 <HAL_DMA_Abort_IT>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01f      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b6:	e015      	b.n	800a4e4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c2:	e00f      	b.n	800a4e4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ce:	e009      	b.n	800a4e4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a4e2:	e1e8      	b.n	800a8b6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e4:	bf00      	nop
    return;
 800a4e6:	e1e6      	b.n	800a8b6 <HAL_UART_IRQHandler+0x692>
 800a4e8:	10000001 	.word	0x10000001
 800a4ec:	04000120 	.word	0x04000120
 800a4f0:	0800b8e1 	.word	0x0800b8e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	f040 8176 	bne.w	800a7ea <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a502:	f003 0310 	and.w	r3, r3, #16
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 816f 	beq.w	800a7ea <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8168 	beq.w	800a7ea <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2210      	movs	r2, #16
 800a520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52c:	2b40      	cmp	r3, #64	@ 0x40
 800a52e:	f040 80dc 	bne.w	800a6ea <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 80b1 	beq.w	800a6ac <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a554:	429a      	cmp	r2, r3
 800a556:	f080 80a9 	bcs.w	800a6ac <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 8087 	bne.w	800a686 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a5a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a5ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a5ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1da      	bne.n	800a578 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5cc:	e853 3f00 	ldrex	r3, [r3]
 800a5d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a5d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5d4:	f023 0301 	bic.w	r3, r3, #1
 800a5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a5e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a5ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a5ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e1      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a60e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3308      	adds	r3, #8
 800a61e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e3      	bne.n	800a5fe <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a654:	f023 0310 	bic.w	r3, r3, #16
 800a658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a666:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a668:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a66c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e4      	bne.n	800a644 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a680:	4618      	mov	r0, r3
 800a682:	f7fb ff78 	bl	8006576 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a69e:	b292      	uxth	r2, r2
 800a6a0:	1a8a      	subs	r2, r1, r2
 800a6a2:	b292      	uxth	r2, r2
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a6aa:	e106      	b.n	800a8ba <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	f040 80ff 	bne.w	800a8ba <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b20      	cmp	r3, #32
 800a6cc:	f040 80f5 	bne.w	800a8ba <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
      return;
 800a6e8:	e0e7      	b.n	800a8ba <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a704:	b29b      	uxth	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 80d9 	beq.w	800a8be <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a70c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80d4 	beq.w	800a8be <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a72a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a738:	647b      	str	r3, [r7, #68]	@ 0x44
 800a73a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a73e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e4      	bne.n	800a716 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	623b      	str	r3, [r7, #32]
   return(result);
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3308      	adds	r3, #8
 800a770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a774:	633a      	str	r2, [r7, #48]	@ 0x30
 800a776:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a77a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a77c:	e841 2300 	strex	r3, r2, [r1]
 800a780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1e1      	bne.n	800a74c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f023 0310 	bic.w	r3, r3, #16
 800a7b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a7be:	61fb      	str	r3, [r7, #28]
 800a7c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	69b9      	ldr	r1, [r7, #24]
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e4      	bne.n	800a79c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7de:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7e8:	e069      	b.n	800a8be <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d010      	beq.n	800a818 <HAL_UART_IRQHandler+0x5f4>
 800a7f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a80a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a816:	e055      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a81c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a820:	2b00      	cmp	r3, #0
 800a822:	d014      	beq.n	800a84e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d105      	bne.n	800a83c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d008      	beq.n	800a84e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a840:	2b00      	cmp	r3, #0
 800a842:	d03e      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
    }
    return;
 800a84c:	e039      	b.n	800a8c2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <HAL_UART_IRQHandler+0x64a>
 800a85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a85e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f001 f84e 	bl	800b908 <UART_EndTransmit_IT>
    return;
 800a86c:	e02a      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_UART_IRQHandler+0x66e>
 800a87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a87e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a890:	e018      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d012      	beq.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
 800a89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	da0e      	bge.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8b0:	e008      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a8b2:	bf00      	nop
 800a8b4:	e006      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a8b6:	bf00      	nop
 800a8b8:	e004      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a8ba:	bf00      	nop
 800a8bc:	e002      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a8be:	bf00      	nop
 800a8c0:	e000      	b.n	800a8c4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a8c2:	bf00      	nop
  }
}
 800a8c4:	37e8      	adds	r7, #232	@ 0xe8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop

0800a8cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a09      	ldr	r2, [pc, #36]	@ (800a9a4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d009      	beq.n	800a998 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	615a      	str	r2, [r3, #20]
  }
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	40008000 	.word	0x40008000

0800a9a8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a18      	ldr	r2, [pc, #96]	@ (800aa18 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d027      	beq.n	800aa0a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	d120      	bne.n	800aa06 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e01c      	b.n	800aa0c <HAL_UART_EnableReceiverTimeout+0x64>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2224      	movs	r2, #36	@ 0x24
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a9f0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	e002      	b.n	800aa0c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800aa06:	2302      	movs	r3, #2
 800aa08:	e000      	b.n	800aa0c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
  }
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	40008000 	.word	0x40008000

0800aa1c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
	...

0800aa38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a1a      	ldr	r2, [pc, #104]	@ (800aaac <UART_InitCallbacksToDefault+0x74>)
 800aa44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a19      	ldr	r2, [pc, #100]	@ (800aab0 <UART_InitCallbacksToDefault+0x78>)
 800aa4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a18      	ldr	r2, [pc, #96]	@ (800aab4 <UART_InitCallbacksToDefault+0x7c>)
 800aa54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	@ (800aab8 <UART_InitCallbacksToDefault+0x80>)
 800aa5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a16      	ldr	r2, [pc, #88]	@ (800aabc <UART_InitCallbacksToDefault+0x84>)
 800aa64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a15      	ldr	r2, [pc, #84]	@ (800aac0 <UART_InitCallbacksToDefault+0x88>)
 800aa6c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a14      	ldr	r2, [pc, #80]	@ (800aac4 <UART_InitCallbacksToDefault+0x8c>)
 800aa74:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a13      	ldr	r2, [pc, #76]	@ (800aac8 <UART_InitCallbacksToDefault+0x90>)
 800aa7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a12      	ldr	r2, [pc, #72]	@ (800aacc <UART_InitCallbacksToDefault+0x94>)
 800aa84:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a11      	ldr	r2, [pc, #68]	@ (800aad0 <UART_InitCallbacksToDefault+0x98>)
 800aa8c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a10      	ldr	r2, [pc, #64]	@ (800aad4 <UART_InitCallbacksToDefault+0x9c>)
 800aa94:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a0f      	ldr	r2, [pc, #60]	@ (800aad8 <UART_InitCallbacksToDefault+0xa0>)
 800aa9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	0800a8e1 	.word	0x0800a8e1
 800aab0:	0800a8cd 	.word	0x0800a8cd
 800aab4:	0800a8f5 	.word	0x0800a8f5
 800aab8:	08002f29 	.word	0x08002f29
 800aabc:	0800a909 	.word	0x0800a909
 800aac0:	0800a91d 	.word	0x0800a91d
 800aac4:	0800a931 	.word	0x0800a931
 800aac8:	0800a945 	.word	0x0800a945
 800aacc:	0800b963 	.word	0x0800b963
 800aad0:	0800b977 	.word	0x0800b977
 800aad4:	0800b98b 	.word	0x0800b98b
 800aad8:	0800a959 	.word	0x0800a959

0800aadc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aadc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aae0:	b08c      	sub	sp, #48	@ 0x30
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	431a      	orrs	r2, r3
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	4baa      	ldr	r3, [pc, #680]	@ (800adb4 <UART_SetConfig+0x2d8>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab14:	430b      	orrs	r3, r1
 800ab16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a9f      	ldr	r2, [pc, #636]	@ (800adb8 <UART_SetConfig+0x2dc>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d004      	beq.n	800ab48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab44:	4313      	orrs	r3, r2
 800ab46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ab52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	6812      	ldr	r2, [r2, #0]
 800ab5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab66:	f023 010f 	bic.w	r1, r3, #15
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a90      	ldr	r2, [pc, #576]	@ (800adbc <UART_SetConfig+0x2e0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d125      	bne.n	800abcc <UART_SetConfig+0xf0>
 800ab80:	4b8f      	ldr	r3, [pc, #572]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d81a      	bhi.n	800abc4 <UART_SetConfig+0xe8>
 800ab8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab94 <UART_SetConfig+0xb8>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800aba5 	.word	0x0800aba5
 800ab98:	0800abb5 	.word	0x0800abb5
 800ab9c:	0800abad 	.word	0x0800abad
 800aba0:	0800abbd 	.word	0x0800abbd
 800aba4:	2301      	movs	r3, #1
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abaa:	e116      	b.n	800adda <UART_SetConfig+0x2fe>
 800abac:	2302      	movs	r3, #2
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb2:	e112      	b.n	800adda <UART_SetConfig+0x2fe>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abba:	e10e      	b.n	800adda <UART_SetConfig+0x2fe>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc2:	e10a      	b.n	800adda <UART_SetConfig+0x2fe>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abca:	e106      	b.n	800adda <UART_SetConfig+0x2fe>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a7c      	ldr	r2, [pc, #496]	@ (800adc4 <UART_SetConfig+0x2e8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d138      	bne.n	800ac48 <UART_SetConfig+0x16c>
 800abd6:	4b7a      	ldr	r3, [pc, #488]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abdc:	f003 030c 	and.w	r3, r3, #12
 800abe0:	2b0c      	cmp	r3, #12
 800abe2:	d82d      	bhi.n	800ac40 <UART_SetConfig+0x164>
 800abe4:	a201      	add	r2, pc, #4	@ (adr r2, 800abec <UART_SetConfig+0x110>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800ac21 	.word	0x0800ac21
 800abf0:	0800ac41 	.word	0x0800ac41
 800abf4:	0800ac41 	.word	0x0800ac41
 800abf8:	0800ac41 	.word	0x0800ac41
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac41 	.word	0x0800ac41
 800ac04:	0800ac41 	.word	0x0800ac41
 800ac08:	0800ac41 	.word	0x0800ac41
 800ac0c:	0800ac29 	.word	0x0800ac29
 800ac10:	0800ac41 	.word	0x0800ac41
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac39 	.word	0x0800ac39
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac26:	e0d8      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2e:	e0d4      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac30:	2304      	movs	r3, #4
 800ac32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	e0d0      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac38:	2308      	movs	r3, #8
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e0cc      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac40:	2310      	movs	r3, #16
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	e0c8      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a5e      	ldr	r2, [pc, #376]	@ (800adc8 <UART_SetConfig+0x2ec>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d125      	bne.n	800ac9e <UART_SetConfig+0x1c2>
 800ac52:	4b5b      	ldr	r3, [pc, #364]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800ac54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac5c:	2b30      	cmp	r3, #48	@ 0x30
 800ac5e:	d016      	beq.n	800ac8e <UART_SetConfig+0x1b2>
 800ac60:	2b30      	cmp	r3, #48	@ 0x30
 800ac62:	d818      	bhi.n	800ac96 <UART_SetConfig+0x1ba>
 800ac64:	2b20      	cmp	r3, #32
 800ac66:	d00a      	beq.n	800ac7e <UART_SetConfig+0x1a2>
 800ac68:	2b20      	cmp	r3, #32
 800ac6a:	d814      	bhi.n	800ac96 <UART_SetConfig+0x1ba>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <UART_SetConfig+0x19a>
 800ac70:	2b10      	cmp	r3, #16
 800ac72:	d008      	beq.n	800ac86 <UART_SetConfig+0x1aa>
 800ac74:	e00f      	b.n	800ac96 <UART_SetConfig+0x1ba>
 800ac76:	2300      	movs	r3, #0
 800ac78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7c:	e0ad      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac84:	e0a9      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac86:	2304      	movs	r3, #4
 800ac88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac8c:	e0a5      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac8e:	2308      	movs	r3, #8
 800ac90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac94:	e0a1      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac96:	2310      	movs	r3, #16
 800ac98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9c:	e09d      	b.n	800adda <UART_SetConfig+0x2fe>
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a4a      	ldr	r2, [pc, #296]	@ (800adcc <UART_SetConfig+0x2f0>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d125      	bne.n	800acf4 <UART_SetConfig+0x218>
 800aca8:	4b45      	ldr	r3, [pc, #276]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800acb4:	d016      	beq.n	800ace4 <UART_SetConfig+0x208>
 800acb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800acb8:	d818      	bhi.n	800acec <UART_SetConfig+0x210>
 800acba:	2b80      	cmp	r3, #128	@ 0x80
 800acbc:	d00a      	beq.n	800acd4 <UART_SetConfig+0x1f8>
 800acbe:	2b80      	cmp	r3, #128	@ 0x80
 800acc0:	d814      	bhi.n	800acec <UART_SetConfig+0x210>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <UART_SetConfig+0x1f0>
 800acc6:	2b40      	cmp	r3, #64	@ 0x40
 800acc8:	d008      	beq.n	800acdc <UART_SetConfig+0x200>
 800acca:	e00f      	b.n	800acec <UART_SetConfig+0x210>
 800accc:	2300      	movs	r3, #0
 800acce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd2:	e082      	b.n	800adda <UART_SetConfig+0x2fe>
 800acd4:	2302      	movs	r3, #2
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acda:	e07e      	b.n	800adda <UART_SetConfig+0x2fe>
 800acdc:	2304      	movs	r3, #4
 800acde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ace2:	e07a      	b.n	800adda <UART_SetConfig+0x2fe>
 800ace4:	2308      	movs	r3, #8
 800ace6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acea:	e076      	b.n	800adda <UART_SetConfig+0x2fe>
 800acec:	2310      	movs	r3, #16
 800acee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acf2:	e072      	b.n	800adda <UART_SetConfig+0x2fe>
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a35      	ldr	r2, [pc, #212]	@ (800add0 <UART_SetConfig+0x2f4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d12a      	bne.n	800ad54 <UART_SetConfig+0x278>
 800acfe:	4b30      	ldr	r3, [pc, #192]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800ad00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad0c:	d01a      	beq.n	800ad44 <UART_SetConfig+0x268>
 800ad0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad12:	d81b      	bhi.n	800ad4c <UART_SetConfig+0x270>
 800ad14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad18:	d00c      	beq.n	800ad34 <UART_SetConfig+0x258>
 800ad1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad1e:	d815      	bhi.n	800ad4c <UART_SetConfig+0x270>
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <UART_SetConfig+0x250>
 800ad24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad28:	d008      	beq.n	800ad3c <UART_SetConfig+0x260>
 800ad2a:	e00f      	b.n	800ad4c <UART_SetConfig+0x270>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad32:	e052      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad34:	2302      	movs	r3, #2
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e04e      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad3c:	2304      	movs	r3, #4
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad42:	e04a      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad44:	2308      	movs	r3, #8
 800ad46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad4a:	e046      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad52:	e042      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a17      	ldr	r2, [pc, #92]	@ (800adb8 <UART_SetConfig+0x2dc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d13a      	bne.n	800add4 <UART_SetConfig+0x2f8>
 800ad5e:	4b18      	ldr	r3, [pc, #96]	@ (800adc0 <UART_SetConfig+0x2e4>)
 800ad60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad6c:	d01a      	beq.n	800ada4 <UART_SetConfig+0x2c8>
 800ad6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad72:	d81b      	bhi.n	800adac <UART_SetConfig+0x2d0>
 800ad74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad78:	d00c      	beq.n	800ad94 <UART_SetConfig+0x2b8>
 800ad7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad7e:	d815      	bhi.n	800adac <UART_SetConfig+0x2d0>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <UART_SetConfig+0x2b0>
 800ad84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad88:	d008      	beq.n	800ad9c <UART_SetConfig+0x2c0>
 800ad8a:	e00f      	b.n	800adac <UART_SetConfig+0x2d0>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e022      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad94:	2302      	movs	r3, #2
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e01e      	b.n	800adda <UART_SetConfig+0x2fe>
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada2:	e01a      	b.n	800adda <UART_SetConfig+0x2fe>
 800ada4:	2308      	movs	r3, #8
 800ada6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adaa:	e016      	b.n	800adda <UART_SetConfig+0x2fe>
 800adac:	2310      	movs	r3, #16
 800adae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adb2:	e012      	b.n	800adda <UART_SetConfig+0x2fe>
 800adb4:	cfff69f3 	.word	0xcfff69f3
 800adb8:	40008000 	.word	0x40008000
 800adbc:	40013800 	.word	0x40013800
 800adc0:	40021000 	.word	0x40021000
 800adc4:	40004400 	.word	0x40004400
 800adc8:	40004800 	.word	0x40004800
 800adcc:	40004c00 	.word	0x40004c00
 800add0:	40005000 	.word	0x40005000
 800add4:	2310      	movs	r3, #16
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4aae      	ldr	r2, [pc, #696]	@ (800b098 <UART_SetConfig+0x5bc>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	f040 8097 	bne.w	800af14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ade6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adea:	2b08      	cmp	r3, #8
 800adec:	d823      	bhi.n	800ae36 <UART_SetConfig+0x35a>
 800adee:	a201      	add	r2, pc, #4	@ (adr r2, 800adf4 <UART_SetConfig+0x318>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae19 	.word	0x0800ae19
 800adf8:	0800ae37 	.word	0x0800ae37
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae37 	.word	0x0800ae37
 800ae04:	0800ae27 	.word	0x0800ae27
 800ae08:	0800ae37 	.word	0x0800ae37
 800ae0c:	0800ae37 	.word	0x0800ae37
 800ae10:	0800ae37 	.word	0x0800ae37
 800ae14:	0800ae2f 	.word	0x0800ae2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae18:	f7fc fcf6 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800ae1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae1e:	e010      	b.n	800ae42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae20:	4b9e      	ldr	r3, [pc, #632]	@ (800b09c <UART_SetConfig+0x5c0>)
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae24:	e00d      	b.n	800ae42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae26:	f7fc fc81 	bl	800772c <HAL_RCC_GetSysClockFreq>
 800ae2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae2c:	e009      	b.n	800ae42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae34:	e005      	b.n	800ae42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 8130 	beq.w	800b0aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4e:	4a94      	ldr	r2, [pc, #592]	@ (800b0a0 <UART_SetConfig+0x5c4>)
 800ae50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	4613      	mov	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d305      	bcc.n	800ae7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d903      	bls.n	800ae82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae80:	e113      	b.n	800b0aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	2200      	movs	r2, #0
 800ae86:	60bb      	str	r3, [r7, #8]
 800ae88:	60fa      	str	r2, [r7, #12]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8e:	4a84      	ldr	r2, [pc, #528]	@ (800b0a0 <UART_SetConfig+0x5c4>)
 800ae90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2200      	movs	r2, #0
 800ae98:	603b      	str	r3, [r7, #0]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aea4:	f7f5 fdf6 	bl	8000a94 <__aeabi_uldivmod>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4610      	mov	r0, r2
 800aeae:	4619      	mov	r1, r3
 800aeb0:	f04f 0200 	mov.w	r2, #0
 800aeb4:	f04f 0300 	mov.w	r3, #0
 800aeb8:	020b      	lsls	r3, r1, #8
 800aeba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aebe:	0202      	lsls	r2, r0, #8
 800aec0:	6979      	ldr	r1, [r7, #20]
 800aec2:	6849      	ldr	r1, [r1, #4]
 800aec4:	0849      	lsrs	r1, r1, #1
 800aec6:	2000      	movs	r0, #0
 800aec8:	460c      	mov	r4, r1
 800aeca:	4605      	mov	r5, r0
 800aecc:	eb12 0804 	adds.w	r8, r2, r4
 800aed0:	eb43 0905 	adc.w	r9, r3, r5
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	469a      	mov	sl, r3
 800aedc:	4693      	mov	fp, r2
 800aede:	4652      	mov	r2, sl
 800aee0:	465b      	mov	r3, fp
 800aee2:	4640      	mov	r0, r8
 800aee4:	4649      	mov	r1, r9
 800aee6:	f7f5 fdd5 	bl	8000a94 <__aeabi_uldivmod>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4613      	mov	r3, r2
 800aef0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aef8:	d308      	bcc.n	800af0c <UART_SetConfig+0x430>
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af00:	d204      	bcs.n	800af0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	e0ce      	b.n	800b0aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af12:	e0ca      	b.n	800b0aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af1c:	d166      	bne.n	800afec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800af1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af22:	2b08      	cmp	r3, #8
 800af24:	d827      	bhi.n	800af76 <UART_SetConfig+0x49a>
 800af26:	a201      	add	r2, pc, #4	@ (adr r2, 800af2c <UART_SetConfig+0x450>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af51 	.word	0x0800af51
 800af30:	0800af59 	.word	0x0800af59
 800af34:	0800af61 	.word	0x0800af61
 800af38:	0800af77 	.word	0x0800af77
 800af3c:	0800af67 	.word	0x0800af67
 800af40:	0800af77 	.word	0x0800af77
 800af44:	0800af77 	.word	0x0800af77
 800af48:	0800af77 	.word	0x0800af77
 800af4c:	0800af6f 	.word	0x0800af6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af50:	f7fc fc5a 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800af54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af56:	e014      	b.n	800af82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af58:	f7fc fc6c 	bl	8007834 <HAL_RCC_GetPCLK2Freq>
 800af5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af5e:	e010      	b.n	800af82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af60:	4b4e      	ldr	r3, [pc, #312]	@ (800b09c <UART_SetConfig+0x5c0>)
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af64:	e00d      	b.n	800af82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af66:	f7fc fbe1 	bl	800772c <HAL_RCC_GetSysClockFreq>
 800af6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af6c:	e009      	b.n	800af82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af74:	e005      	b.n	800af82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 8090 	beq.w	800b0aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8e:	4a44      	ldr	r2, [pc, #272]	@ (800b0a0 <UART_SetConfig+0x5c4>)
 800af90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af94:	461a      	mov	r2, r3
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	fbb3 f3f2 	udiv	r3, r3, r2
 800af9c:	005a      	lsls	r2, r3, #1
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	085b      	lsrs	r3, r3, #1
 800afa4:	441a      	add	r2, r3
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800afae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d916      	bls.n	800afe4 <UART_SetConfig+0x508>
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afbc:	d212      	bcs.n	800afe4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f023 030f 	bic.w	r3, r3, #15
 800afc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	8bfb      	ldrh	r3, [r7, #30]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	8bfa      	ldrh	r2, [r7, #30]
 800afe0:	60da      	str	r2, [r3, #12]
 800afe2:	e062      	b.n	800b0aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800afea:	e05e      	b.n	800b0aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aff0:	2b08      	cmp	r3, #8
 800aff2:	d828      	bhi.n	800b046 <UART_SetConfig+0x56a>
 800aff4:	a201      	add	r2, pc, #4	@ (adr r2, 800affc <UART_SetConfig+0x520>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b021 	.word	0x0800b021
 800b000:	0800b029 	.word	0x0800b029
 800b004:	0800b031 	.word	0x0800b031
 800b008:	0800b047 	.word	0x0800b047
 800b00c:	0800b037 	.word	0x0800b037
 800b010:	0800b047 	.word	0x0800b047
 800b014:	0800b047 	.word	0x0800b047
 800b018:	0800b047 	.word	0x0800b047
 800b01c:	0800b03f 	.word	0x0800b03f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b020:	f7fc fbf2 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800b024:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b026:	e014      	b.n	800b052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b028:	f7fc fc04 	bl	8007834 <HAL_RCC_GetPCLK2Freq>
 800b02c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b02e:	e010      	b.n	800b052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b030:	4b1a      	ldr	r3, [pc, #104]	@ (800b09c <UART_SetConfig+0x5c0>)
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b034:	e00d      	b.n	800b052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b036:	f7fc fb79 	bl	800772c <HAL_RCC_GetSysClockFreq>
 800b03a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b03c:	e009      	b.n	800b052 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b03e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b044:	e005      	b.n	800b052 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b050:	bf00      	nop
    }

    if (pclk != 0U)
 800b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b054:	2b00      	cmp	r3, #0
 800b056:	d028      	beq.n	800b0aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05c:	4a10      	ldr	r2, [pc, #64]	@ (800b0a0 <UART_SetConfig+0x5c4>)
 800b05e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b062:	461a      	mov	r2, r3
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	fbb3 f2f2 	udiv	r2, r3, r2
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	441a      	add	r2, r3
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	fbb2 f3f3 	udiv	r3, r2, r3
 800b07a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	2b0f      	cmp	r3, #15
 800b080:	d910      	bls.n	800b0a4 <UART_SetConfig+0x5c8>
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b088:	d20c      	bcs.n	800b0a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	60da      	str	r2, [r3, #12]
 800b094:	e009      	b.n	800b0aa <UART_SetConfig+0x5ce>
 800b096:	bf00      	nop
 800b098:	40008000 	.word	0x40008000
 800b09c:	00f42400 	.word	0x00f42400
 800b0a0:	0800cb3c 	.word	0x0800cb3c
      }
      else
      {
        ret = HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3730      	adds	r7, #48	@ 0x30
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	430a      	orrs	r2, r1
 800b11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18a:	f003 0320 	and.w	r3, r3, #32
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01a      	beq.n	800b1ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1d2:	d10a      	bne.n	800b1ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	605a      	str	r2, [r3, #4]
  }
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b098      	sub	sp, #96	@ 0x60
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b228:	f7f9 faee 	bl	8004808 <HAL_GetTick>
 800b22c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0308 	and.w	r3, r3, #8
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d12f      	bne.n	800b29c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b244:	2200      	movs	r2, #0
 800b246:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f88e 	bl	800b36c <UART_WaitOnFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d022      	beq.n	800b29c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b26a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	461a      	mov	r2, r3
 800b272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b274:	647b      	str	r3, [r7, #68]	@ 0x44
 800b276:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e6      	bne.n	800b256 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2220      	movs	r2, #32
 800b28c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e063      	b.n	800b364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d149      	bne.n	800b33e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f857 	bl	800b36c <UART_WaitOnFlagUntilTimeout>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d03c      	beq.n	800b33e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e6      	bne.n	800b2c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	60fb      	str	r3, [r7, #12]
   return(result);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f023 0301 	bic.w	r3, r3, #1
 800b30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b316:	61fa      	str	r2, [r7, #28]
 800b318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	69b9      	ldr	r1, [r7, #24]
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	617b      	str	r3, [r7, #20]
   return(result);
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1e5      	bne.n	800b2f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2220      	movs	r2, #32
 800b32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e012      	b.n	800b364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2220      	movs	r2, #32
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3758      	adds	r7, #88	@ 0x58
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	4613      	mov	r3, r2
 800b37a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b37c:	e04f      	b.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d04b      	beq.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b386:	f7f9 fa3f 	bl	8004808 <HAL_GetTick>
 800b38a:	4602      	mov	r2, r0
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	69ba      	ldr	r2, [r7, #24]
 800b392:	429a      	cmp	r2, r3
 800b394:	d302      	bcc.n	800b39c <UART_WaitOnFlagUntilTimeout+0x30>
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e04e      	b.n	800b43e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d037      	beq.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b80      	cmp	r3, #128	@ 0x80
 800b3b2:	d034      	beq.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b40      	cmp	r3, #64	@ 0x40
 800b3b8:	d031      	beq.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d110      	bne.n	800b3ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f920 	bl	800b616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2208      	movs	r2, #8
 800b3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e029      	b.n	800b43e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3f8:	d111      	bne.n	800b41e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f000 f906 	bl	800b616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e00f      	b.n	800b43e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69da      	ldr	r2, [r3, #28]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4013      	ands	r3, r2
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	bf0c      	ite	eq
 800b42e:	2301      	moveq	r3, #1
 800b430:	2300      	movne	r3, #0
 800b432:	b2db      	uxtb	r3, r3
 800b434:	461a      	mov	r2, r3
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d0a0      	beq.n	800b37e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b096      	sub	sp, #88	@ 0x58
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	4613      	mov	r3, r2
 800b454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	88fa      	ldrh	r2, [r7, #6]
 800b460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2222      	movs	r2, #34	@ 0x22
 800b470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d02d      	beq.n	800b4da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b484:	4a40      	ldr	r2, [pc, #256]	@ (800b588 <UART_Start_Receive_DMA+0x140>)
 800b486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48e:	4a3f      	ldr	r2, [pc, #252]	@ (800b58c <UART_Start_Receive_DMA+0x144>)
 800b490:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b498:	4a3d      	ldr	r2, [pc, #244]	@ (800b590 <UART_Start_Receive_DMA+0x148>)
 800b49a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3324      	adds	r3, #36	@ 0x24
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	88fb      	ldrh	r3, [r7, #6]
 800b4bc:	f7fa ffe0 	bl	8006480 <HAL_DMA_Start_IT>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d009      	beq.n	800b4da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e051      	b.n	800b57e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d018      	beq.n	800b514 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b502:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3308      	adds	r3, #8
 800b51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3308      	adds	r3, #8
 800b532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b534:	637a      	str	r2, [r7, #52]	@ 0x34
 800b536:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b53a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b53c:	e841 2300 	strex	r3, r2, [r1]
 800b540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e5      	bne.n	800b514 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3308      	adds	r3, #8
 800b54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	613b      	str	r3, [r7, #16]
   return(result);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b568:	623a      	str	r2, [r7, #32]
 800b56a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	69f9      	ldr	r1, [r7, #28]
 800b56e:	6a3a      	ldr	r2, [r7, #32]
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	61bb      	str	r3, [r7, #24]
   return(result);
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e5      	bne.n	800b548 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3758      	adds	r7, #88	@ 0x58
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	0800b6e3 	.word	0x0800b6e3
 800b58c:	0800b817 	.word	0x0800b817
 800b590:	0800b85d 	.word	0x0800b85d

0800b594 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b594:	b480      	push	{r7}
 800b596:	b08f      	sub	sp, #60	@ 0x3c
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e6      	bne.n	800b59c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ee:	61ba      	str	r2, [r7, #24]
 800b5f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e5      	bne.n	800b5ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b60a:	bf00      	nop
 800b60c:	373c      	adds	r7, #60	@ 0x3c
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b616:	b480      	push	{r7}
 800b618:	b095      	sub	sp, #84	@ 0x54
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b63c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b63e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e6      	bne.n	800b61e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3308      	adds	r3, #8
 800b656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	e853 3f00 	ldrex	r3, [r3]
 800b65e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b666:	f023 0301 	bic.w	r3, r3, #1
 800b66a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3308      	adds	r3, #8
 800b672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e3      	bne.n	800b650 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d118      	bne.n	800b6c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	f023 0310 	bic.w	r3, r3, #16
 800b6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6979      	ldr	r1, [r7, #20]
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e6      	bne.n	800b690 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6d6:	bf00      	nop
 800b6d8:	3754      	adds	r7, #84	@ 0x54
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b09c      	sub	sp, #112	@ 0x70
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d171      	bne.n	800b7e2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b6fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b700:	2200      	movs	r2, #0
 800b702:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70e:	e853 3f00 	ldrex	r3, [r3]
 800b712:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b716:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b71a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b71c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b724:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b726:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b72a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b72c:	e841 2300 	strex	r3, r2, [r1]
 800b730:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e6      	bne.n	800b706 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3308      	adds	r3, #8
 800b73e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	e853 3f00 	ldrex	r3, [r3]
 800b746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74a:	f023 0301 	bic.w	r3, r3, #1
 800b74e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3308      	adds	r3, #8
 800b756:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b758:	647a      	str	r2, [r7, #68]	@ 0x44
 800b75a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b760:	e841 2300 	strex	r3, r2, [r1]
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1e5      	bne.n	800b738 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b76c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3308      	adds	r3, #8
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	e853 3f00 	ldrex	r3, [r3]
 800b77a:	623b      	str	r3, [r7, #32]
   return(result);
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b782:	663b      	str	r3, [r7, #96]	@ 0x60
 800b784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3308      	adds	r3, #8
 800b78a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b78c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b794:	e841 2300 	strex	r3, r2, [r1]
 800b798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e5      	bne.n	800b76c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d118      	bne.n	800b7e2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f023 0310 	bic.w	r3, r3, #16
 800b7c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	69b9      	ldr	r1, [r7, #24]
 800b7d4:	69fa      	ldr	r2, [r7, #28]
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	617b      	str	r3, [r7, #20]
   return(result);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e6      	bne.n	800b7b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d109      	bne.n	800b804 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b7f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b7f8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b800:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b802:	e004      	b.n	800b80e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b80a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b80c:	4798      	blx	r3
}
 800b80e:	bf00      	nop
 800b810:	3770      	adds	r7, #112	@ 0x70
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b822:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d10b      	bne.n	800b84a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b83e:	0852      	lsrs	r2, r2, #1
 800b840:	b292      	uxth	r2, r2
 800b842:	4611      	mov	r1, r2
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b848:	e004      	b.n	800b854 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	4798      	blx	r3
}
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b868:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b870:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b878:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b884:	2b80      	cmp	r3, #128	@ 0x80
 800b886:	d109      	bne.n	800b89c <UART_DMAError+0x40>
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b21      	cmp	r3, #33	@ 0x21
 800b88c:	d106      	bne.n	800b89c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2200      	movs	r2, #0
 800b892:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b896:	6978      	ldr	r0, [r7, #20]
 800b898:	f7ff fe7c 	bl	800b594 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a6:	2b40      	cmp	r3, #64	@ 0x40
 800b8a8:	d109      	bne.n	800b8be <UART_DMAError+0x62>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b22      	cmp	r3, #34	@ 0x22
 800b8ae:	d106      	bne.n	800b8be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	f7ff feac 	bl	800b616 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8c4:	f043 0210 	orr.w	r2, r3, #16
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8d4:	6978      	ldr	r0, [r7, #20]
 800b8d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8d8:	bf00      	nop
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	61bb      	str	r3, [r7, #24]
 800b930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b932:	6979      	ldr	r1, [r7, #20]
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	e841 2300 	strex	r3, r2, [r1]
 800b93a:	613b      	str	r3, [r7, #16]
   return(result);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1e6      	bne.n	800b910 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2220      	movs	r2, #32
 800b946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b95a:	bf00      	nop
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	e027      	b.n	800ba04 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2224      	movs	r2, #36	@ 0x24
 800b9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0201 	bic.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2220      	movs	r2, #32
 800b9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e02d      	b.n	800ba84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2224      	movs	r2, #36	@ 0x24
 800ba34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f84f 	bl	800bb08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e02d      	b.n	800bb00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2224      	movs	r2, #36	@ 0x24
 800bab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0201 	bic.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f811 	bl	800bb08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d108      	bne.n	800bb2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb28:	e031      	b.n	800bb8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb2e:	2308      	movs	r3, #8
 800bb30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	0e5b      	lsrs	r3, r3, #25
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	0f5b      	lsrs	r3, r3, #29
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	7b3a      	ldrb	r2, [r7, #12]
 800bb56:	4911      	ldr	r1, [pc, #68]	@ (800bb9c <UARTEx_SetNbDataToProcess+0x94>)
 800bb58:	5c8a      	ldrb	r2, [r1, r2]
 800bb5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb5e:	7b3a      	ldrb	r2, [r7, #12]
 800bb60:	490f      	ldr	r1, [pc, #60]	@ (800bba0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb64:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	7b7a      	ldrb	r2, [r7, #13]
 800bb74:	4909      	ldr	r1, [pc, #36]	@ (800bb9c <UARTEx_SetNbDataToProcess+0x94>)
 800bb76:	5c8a      	ldrb	r2, [r1, r2]
 800bb78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb7c:	7b7a      	ldrb	r2, [r7, #13]
 800bb7e:	4908      	ldr	r1, [pc, #32]	@ (800bba0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb82:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	0800cb54 	.word	0x0800cb54
 800bba0:	0800cb5c 	.word	0x0800cb5c

0800bba4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b08b      	sub	sp, #44	@ 0x2c
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	885b      	ldrh	r3, [r3, #2]
 800bbcc:	fb02 f303 	mul.w	r3, r2, r3
 800bbd0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bbd6:	e013      	b.n	800bc00 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbda:	1d1a      	adds	r2, r3, #4
 800bbdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbde:	ed93 7a00 	vldr	s14, [r3]
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	1d1a      	adds	r2, r3, #4
 800bbe6:	623a      	str	r2, [r7, #32]
 800bbe8:	edd3 7a00 	vldr	s15, [r3]
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	1d1a      	adds	r2, r3, #4
 800bbf0:	61fa      	str	r2, [r7, #28]
 800bbf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbf6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e8      	bne.n	800bbd8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bc06:	2300      	movs	r3, #0
 800bc08:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bc0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	372c      	adds	r7, #44	@ 0x2c
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	607b      	str	r3, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	817b      	strh	r3, [r7, #10]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	897a      	ldrh	r2, [r7, #10]
 800bc30:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	893a      	ldrh	r2, [r7, #8]
 800bc36:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	605a      	str	r2, [r3, #4]
}
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b093      	sub	sp, #76	@ 0x4c
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	60f8      	str	r0, [r7, #12]
 800bc52:	60b9      	str	r1, [r7, #8]
 800bc54:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	885b      	ldrh	r3, [r3, #2]
 800bc7e:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	885b      	ldrh	r3, [r3, #2]
 800bc84:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800bc86:	2300      	movs	r3, #0
 800bc88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc8a:	8b7b      	ldrh	r3, [r7, #26]
 800bc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800bc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800bc98:	8b3b      	ldrh	r3, [r7, #24]
 800bc9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800bca2:	f04f 0300 	mov.w	r3, #0
 800bca6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800bca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcaa:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800bcac:	8afb      	ldrh	r3, [r7, #22]
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800bcb0:	e017      	b.n	800bce2 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800bcb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb4:	1d1a      	adds	r2, r3, #4
 800bcb6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bcb8:	ed93 7a00 	vldr	s14, [r3]
 800bcbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcbe:	edd3 7a00 	vldr	s15, [r3]
 800bcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800bcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800bcd2:	8b3b      	ldrh	r3, [r7, #24]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcd8:	4413      	add	r3, r2
 800bcda:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	3b01      	subs	r3, #1
 800bce0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e4      	bne.n	800bcb2 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bcee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcf0:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800bcf8:	8b3a      	ldrh	r2, [r7, #24]
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	6a3a      	ldr	r2, [r7, #32]
 800bd02:	4413      	add	r3, r2
 800bd04:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800bd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1ca      	bne.n	800bca2 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800bd0c:	8b3b      	ldrh	r3, [r7, #24]
 800bd0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd10:	4413      	add	r3, r2
 800bd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800bd14:	8afb      	ldrh	r3, [r7, #22]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd1a:	4413      	add	r3, r2
 800bd1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	3b01      	subs	r3, #1
 800bd22:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800bd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1b1      	bne.n	800bc8e <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800bd2e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	374c      	adds	r7, #76	@ 0x4c
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b08b      	sub	sp, #44	@ 0x2c
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	60f8      	str	r0, [r7, #12]
 800bd46:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd4a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	885b      	ldrh	r3, [r3, #2]
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bd6c:	e010      	b.n	800bd90 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	1d1a      	adds	r2, r3, #4
 800bd72:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd74:	ed93 7a00 	vldr	s14, [r3]
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	1d1a      	adds	r2, r3, #4
 800bd7c:	623a      	str	r2, [r7, #32]
 800bd7e:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd86:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1eb      	bne.n	800bd6e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd96:	2300      	movs	r3, #0
 800bd98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800bd9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	372c      	adds	r7, #44	@ 0x2c
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
	...

0800bdac <malloc>:
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <malloc+0xc>)
 800bdae:	4601      	mov	r1, r0
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f000 b825 	b.w	800be00 <_malloc_r>
 800bdb6:	bf00      	nop
 800bdb8:	20000184 	.word	0x20000184

0800bdbc <sbrk_aligned>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4e0f      	ldr	r6, [pc, #60]	@ (800bdfc <sbrk_aligned+0x40>)
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	6831      	ldr	r1, [r6, #0]
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	b911      	cbnz	r1, 800bdce <sbrk_aligned+0x12>
 800bdc8:	f000 f8ae 	bl	800bf28 <_sbrk_r>
 800bdcc:	6030      	str	r0, [r6, #0]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f000 f8a9 	bl	800bf28 <_sbrk_r>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d103      	bne.n	800bde2 <sbrk_aligned+0x26>
 800bdda:	f04f 34ff 	mov.w	r4, #4294967295
 800bdde:	4620      	mov	r0, r4
 800bde0:	bd70      	pop	{r4, r5, r6, pc}
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d0f8      	beq.n	800bdde <sbrk_aligned+0x22>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 f89a 	bl	800bf28 <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1f2      	bne.n	800bdde <sbrk_aligned+0x22>
 800bdf8:	e7ef      	b.n	800bdda <sbrk_aligned+0x1e>
 800bdfa:	bf00      	nop
 800bdfc:	200021a8 	.word	0x200021a8

0800be00 <_malloc_r>:
 800be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be04:	1ccd      	adds	r5, r1, #3
 800be06:	f025 0503 	bic.w	r5, r5, #3
 800be0a:	3508      	adds	r5, #8
 800be0c:	2d0c      	cmp	r5, #12
 800be0e:	bf38      	it	cc
 800be10:	250c      	movcc	r5, #12
 800be12:	2d00      	cmp	r5, #0
 800be14:	4606      	mov	r6, r0
 800be16:	db01      	blt.n	800be1c <_malloc_r+0x1c>
 800be18:	42a9      	cmp	r1, r5
 800be1a:	d904      	bls.n	800be26 <_malloc_r+0x26>
 800be1c:	230c      	movs	r3, #12
 800be1e:	6033      	str	r3, [r6, #0]
 800be20:	2000      	movs	r0, #0
 800be22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800befc <_malloc_r+0xfc>
 800be2a:	f000 f869 	bl	800bf00 <__malloc_lock>
 800be2e:	f8d8 3000 	ldr.w	r3, [r8]
 800be32:	461c      	mov	r4, r3
 800be34:	bb44      	cbnz	r4, 800be88 <_malloc_r+0x88>
 800be36:	4629      	mov	r1, r5
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ffbf 	bl	800bdbc <sbrk_aligned>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	4604      	mov	r4, r0
 800be42:	d158      	bne.n	800bef6 <_malloc_r+0xf6>
 800be44:	f8d8 4000 	ldr.w	r4, [r8]
 800be48:	4627      	mov	r7, r4
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	d143      	bne.n	800bed6 <_malloc_r+0xd6>
 800be4e:	2c00      	cmp	r4, #0
 800be50:	d04b      	beq.n	800beea <_malloc_r+0xea>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	4639      	mov	r1, r7
 800be56:	4630      	mov	r0, r6
 800be58:	eb04 0903 	add.w	r9, r4, r3
 800be5c:	f000 f864 	bl	800bf28 <_sbrk_r>
 800be60:	4581      	cmp	r9, r0
 800be62:	d142      	bne.n	800beea <_malloc_r+0xea>
 800be64:	6821      	ldr	r1, [r4, #0]
 800be66:	1a6d      	subs	r5, r5, r1
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ffa6 	bl	800bdbc <sbrk_aligned>
 800be70:	3001      	adds	r0, #1
 800be72:	d03a      	beq.n	800beea <_malloc_r+0xea>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	442b      	add	r3, r5
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	f8d8 3000 	ldr.w	r3, [r8]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	bb62      	cbnz	r2, 800bedc <_malloc_r+0xdc>
 800be82:	f8c8 7000 	str.w	r7, [r8]
 800be86:	e00f      	b.n	800bea8 <_malloc_r+0xa8>
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	1b52      	subs	r2, r2, r5
 800be8c:	d420      	bmi.n	800bed0 <_malloc_r+0xd0>
 800be8e:	2a0b      	cmp	r2, #11
 800be90:	d917      	bls.n	800bec2 <_malloc_r+0xc2>
 800be92:	1961      	adds	r1, r4, r5
 800be94:	42a3      	cmp	r3, r4
 800be96:	6025      	str	r5, [r4, #0]
 800be98:	bf18      	it	ne
 800be9a:	6059      	strne	r1, [r3, #4]
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	bf08      	it	eq
 800bea0:	f8c8 1000 	streq.w	r1, [r8]
 800bea4:	5162      	str	r2, [r4, r5]
 800bea6:	604b      	str	r3, [r1, #4]
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 f82f 	bl	800bf0c <__malloc_unlock>
 800beae:	f104 000b 	add.w	r0, r4, #11
 800beb2:	1d23      	adds	r3, r4, #4
 800beb4:	f020 0007 	bic.w	r0, r0, #7
 800beb8:	1ac2      	subs	r2, r0, r3
 800beba:	bf1c      	itt	ne
 800bebc:	1a1b      	subne	r3, r3, r0
 800bebe:	50a3      	strne	r3, [r4, r2]
 800bec0:	e7af      	b.n	800be22 <_malloc_r+0x22>
 800bec2:	6862      	ldr	r2, [r4, #4]
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	bf0c      	ite	eq
 800bec8:	f8c8 2000 	streq.w	r2, [r8]
 800becc:	605a      	strne	r2, [r3, #4]
 800bece:	e7eb      	b.n	800bea8 <_malloc_r+0xa8>
 800bed0:	4623      	mov	r3, r4
 800bed2:	6864      	ldr	r4, [r4, #4]
 800bed4:	e7ae      	b.n	800be34 <_malloc_r+0x34>
 800bed6:	463c      	mov	r4, r7
 800bed8:	687f      	ldr	r7, [r7, #4]
 800beda:	e7b6      	b.n	800be4a <_malloc_r+0x4a>
 800bedc:	461a      	mov	r2, r3
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	d1fb      	bne.n	800bedc <_malloc_r+0xdc>
 800bee4:	2300      	movs	r3, #0
 800bee6:	6053      	str	r3, [r2, #4]
 800bee8:	e7de      	b.n	800bea8 <_malloc_r+0xa8>
 800beea:	230c      	movs	r3, #12
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	4630      	mov	r0, r6
 800bef0:	f000 f80c 	bl	800bf0c <__malloc_unlock>
 800bef4:	e794      	b.n	800be20 <_malloc_r+0x20>
 800bef6:	6005      	str	r5, [r0, #0]
 800bef8:	e7d6      	b.n	800bea8 <_malloc_r+0xa8>
 800befa:	bf00      	nop
 800befc:	200021ac 	.word	0x200021ac

0800bf00 <__malloc_lock>:
 800bf00:	4801      	ldr	r0, [pc, #4]	@ (800bf08 <__malloc_lock+0x8>)
 800bf02:	f000 b84b 	b.w	800bf9c <__retarget_lock_acquire_recursive>
 800bf06:	bf00      	nop
 800bf08:	200022ec 	.word	0x200022ec

0800bf0c <__malloc_unlock>:
 800bf0c:	4801      	ldr	r0, [pc, #4]	@ (800bf14 <__malloc_unlock+0x8>)
 800bf0e:	f000 b846 	b.w	800bf9e <__retarget_lock_release_recursive>
 800bf12:	bf00      	nop
 800bf14:	200022ec 	.word	0x200022ec

0800bf18 <memset>:
 800bf18:	4402      	add	r2, r0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d100      	bne.n	800bf22 <memset+0xa>
 800bf20:	4770      	bx	lr
 800bf22:	f803 1b01 	strb.w	r1, [r3], #1
 800bf26:	e7f9      	b.n	800bf1c <memset+0x4>

0800bf28 <_sbrk_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d06      	ldr	r5, [pc, #24]	@ (800bf44 <_sbrk_r+0x1c>)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	f7f7 fd64 	bl	8003a00 <_sbrk>
 800bf38:	1c43      	adds	r3, r0, #1
 800bf3a:	d102      	bne.n	800bf42 <_sbrk_r+0x1a>
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	b103      	cbz	r3, 800bf42 <_sbrk_r+0x1a>
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	bd38      	pop	{r3, r4, r5, pc}
 800bf44:	200022e8 	.word	0x200022e8

0800bf48 <__errno>:
 800bf48:	4b01      	ldr	r3, [pc, #4]	@ (800bf50 <__errno+0x8>)
 800bf4a:	6818      	ldr	r0, [r3, #0]
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	20000184 	.word	0x20000184

0800bf54 <__libc_init_array>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	4d0d      	ldr	r5, [pc, #52]	@ (800bf8c <__libc_init_array+0x38>)
 800bf58:	4c0d      	ldr	r4, [pc, #52]	@ (800bf90 <__libc_init_array+0x3c>)
 800bf5a:	1b64      	subs	r4, r4, r5
 800bf5c:	10a4      	asrs	r4, r4, #2
 800bf5e:	2600      	movs	r6, #0
 800bf60:	42a6      	cmp	r6, r4
 800bf62:	d109      	bne.n	800bf78 <__libc_init_array+0x24>
 800bf64:	4d0b      	ldr	r5, [pc, #44]	@ (800bf94 <__libc_init_array+0x40>)
 800bf66:	4c0c      	ldr	r4, [pc, #48]	@ (800bf98 <__libc_init_array+0x44>)
 800bf68:	f000 fdb0 	bl	800cacc <_init>
 800bf6c:	1b64      	subs	r4, r4, r5
 800bf6e:	10a4      	asrs	r4, r4, #2
 800bf70:	2600      	movs	r6, #0
 800bf72:	42a6      	cmp	r6, r4
 800bf74:	d105      	bne.n	800bf82 <__libc_init_array+0x2e>
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf7c:	4798      	blx	r3
 800bf7e:	3601      	adds	r6, #1
 800bf80:	e7ee      	b.n	800bf60 <__libc_init_array+0xc>
 800bf82:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf86:	4798      	blx	r3
 800bf88:	3601      	adds	r6, #1
 800bf8a:	e7f2      	b.n	800bf72 <__libc_init_array+0x1e>
 800bf8c:	0800cf3c 	.word	0x0800cf3c
 800bf90:	0800cf3c 	.word	0x0800cf3c
 800bf94:	0800cf3c 	.word	0x0800cf3c
 800bf98:	0800cf40 	.word	0x0800cf40

0800bf9c <__retarget_lock_acquire_recursive>:
 800bf9c:	4770      	bx	lr

0800bf9e <__retarget_lock_release_recursive>:
 800bf9e:	4770      	bx	lr

0800bfa0 <sqrtf>:
 800bfa0:	b508      	push	{r3, lr}
 800bfa2:	ed2d 8b02 	vpush	{d8}
 800bfa6:	eeb0 8a40 	vmov.f32	s16, s0
 800bfaa:	f000 f8a1 	bl	800c0f0 <__ieee754_sqrtf>
 800bfae:	eeb4 8a48 	vcmp.f32	s16, s16
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	d60c      	bvs.n	800bfd2 <sqrtf+0x32>
 800bfb8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bfd8 <sqrtf+0x38>
 800bfbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc4:	d505      	bpl.n	800bfd2 <sqrtf+0x32>
 800bfc6:	f7ff ffbf 	bl	800bf48 <__errno>
 800bfca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bfce:	2321      	movs	r3, #33	@ 0x21
 800bfd0:	6003      	str	r3, [r0, #0]
 800bfd2:	ecbd 8b02 	vpop	{d8}
 800bfd6:	bd08      	pop	{r3, pc}
 800bfd8:	00000000 	.word	0x00000000

0800bfdc <cosf>:
 800bfdc:	ee10 3a10 	vmov	r3, s0
 800bfe0:	b507      	push	{r0, r1, r2, lr}
 800bfe2:	4a1e      	ldr	r2, [pc, #120]	@ (800c05c <cosf+0x80>)
 800bfe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d806      	bhi.n	800bffa <cosf+0x1e>
 800bfec:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c060 <cosf+0x84>
 800bff0:	b003      	add	sp, #12
 800bff2:	f85d eb04 	ldr.w	lr, [sp], #4
 800bff6:	f000 b87f 	b.w	800c0f8 <__kernel_cosf>
 800bffa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bffe:	d304      	bcc.n	800c00a <cosf+0x2e>
 800c000:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c004:	b003      	add	sp, #12
 800c006:	f85d fb04 	ldr.w	pc, [sp], #4
 800c00a:	4668      	mov	r0, sp
 800c00c:	f000 f914 	bl	800c238 <__ieee754_rem_pio2f>
 800c010:	f000 0003 	and.w	r0, r0, #3
 800c014:	2801      	cmp	r0, #1
 800c016:	d009      	beq.n	800c02c <cosf+0x50>
 800c018:	2802      	cmp	r0, #2
 800c01a:	d010      	beq.n	800c03e <cosf+0x62>
 800c01c:	b9b0      	cbnz	r0, 800c04c <cosf+0x70>
 800c01e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c022:	ed9d 0a00 	vldr	s0, [sp]
 800c026:	f000 f867 	bl	800c0f8 <__kernel_cosf>
 800c02a:	e7eb      	b.n	800c004 <cosf+0x28>
 800c02c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c030:	ed9d 0a00 	vldr	s0, [sp]
 800c034:	f000 f8b8 	bl	800c1a8 <__kernel_sinf>
 800c038:	eeb1 0a40 	vneg.f32	s0, s0
 800c03c:	e7e2      	b.n	800c004 <cosf+0x28>
 800c03e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c042:	ed9d 0a00 	vldr	s0, [sp]
 800c046:	f000 f857 	bl	800c0f8 <__kernel_cosf>
 800c04a:	e7f5      	b.n	800c038 <cosf+0x5c>
 800c04c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c050:	ed9d 0a00 	vldr	s0, [sp]
 800c054:	2001      	movs	r0, #1
 800c056:	f000 f8a7 	bl	800c1a8 <__kernel_sinf>
 800c05a:	e7d3      	b.n	800c004 <cosf+0x28>
 800c05c:	3f490fd8 	.word	0x3f490fd8
 800c060:	00000000 	.word	0x00000000

0800c064 <sinf>:
 800c064:	ee10 3a10 	vmov	r3, s0
 800c068:	b507      	push	{r0, r1, r2, lr}
 800c06a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0e8 <sinf+0x84>)
 800c06c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c070:	4293      	cmp	r3, r2
 800c072:	d807      	bhi.n	800c084 <sinf+0x20>
 800c074:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c0ec <sinf+0x88>
 800c078:	2000      	movs	r0, #0
 800c07a:	b003      	add	sp, #12
 800c07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c080:	f000 b892 	b.w	800c1a8 <__kernel_sinf>
 800c084:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c088:	d304      	bcc.n	800c094 <sinf+0x30>
 800c08a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c08e:	b003      	add	sp, #12
 800c090:	f85d fb04 	ldr.w	pc, [sp], #4
 800c094:	4668      	mov	r0, sp
 800c096:	f000 f8cf 	bl	800c238 <__ieee754_rem_pio2f>
 800c09a:	f000 0003 	and.w	r0, r0, #3
 800c09e:	2801      	cmp	r0, #1
 800c0a0:	d00a      	beq.n	800c0b8 <sinf+0x54>
 800c0a2:	2802      	cmp	r0, #2
 800c0a4:	d00f      	beq.n	800c0c6 <sinf+0x62>
 800c0a6:	b9c0      	cbnz	r0, 800c0da <sinf+0x76>
 800c0a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0ac:	ed9d 0a00 	vldr	s0, [sp]
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	f000 f879 	bl	800c1a8 <__kernel_sinf>
 800c0b6:	e7ea      	b.n	800c08e <sinf+0x2a>
 800c0b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0bc:	ed9d 0a00 	vldr	s0, [sp]
 800c0c0:	f000 f81a 	bl	800c0f8 <__kernel_cosf>
 800c0c4:	e7e3      	b.n	800c08e <sinf+0x2a>
 800c0c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0ca:	ed9d 0a00 	vldr	s0, [sp]
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f000 f86a 	bl	800c1a8 <__kernel_sinf>
 800c0d4:	eeb1 0a40 	vneg.f32	s0, s0
 800c0d8:	e7d9      	b.n	800c08e <sinf+0x2a>
 800c0da:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0de:	ed9d 0a00 	vldr	s0, [sp]
 800c0e2:	f000 f809 	bl	800c0f8 <__kernel_cosf>
 800c0e6:	e7f5      	b.n	800c0d4 <sinf+0x70>
 800c0e8:	3f490fd8 	.word	0x3f490fd8
 800c0ec:	00000000 	.word	0x00000000

0800c0f0 <__ieee754_sqrtf>:
 800c0f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <__kernel_cosf>:
 800c0f8:	ee10 3a10 	vmov	r3, s0
 800c0fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c100:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c104:	eef0 6a40 	vmov.f32	s13, s0
 800c108:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c10c:	d204      	bcs.n	800c118 <__kernel_cosf+0x20>
 800c10e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c112:	ee17 2a90 	vmov	r2, s15
 800c116:	b342      	cbz	r2, 800c16a <__kernel_cosf+0x72>
 800c118:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c11c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c188 <__kernel_cosf+0x90>
 800c120:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c18c <__kernel_cosf+0x94>
 800c124:	4a1a      	ldr	r2, [pc, #104]	@ (800c190 <__kernel_cosf+0x98>)
 800c126:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c12a:	4293      	cmp	r3, r2
 800c12c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c194 <__kernel_cosf+0x9c>
 800c130:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c134:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c198 <__kernel_cosf+0xa0>
 800c138:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c13c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c19c <__kernel_cosf+0xa4>
 800c140:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c144:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c1a0 <__kernel_cosf+0xa8>
 800c148:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c14c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c150:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c154:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c158:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c160:	d804      	bhi.n	800c16c <__kernel_cosf+0x74>
 800c162:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c166:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c16a:	4770      	bx	lr
 800c16c:	4a0d      	ldr	r2, [pc, #52]	@ (800c1a4 <__kernel_cosf+0xac>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	bf9a      	itte	ls
 800c172:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c176:	ee07 3a10 	vmovls	s14, r3
 800c17a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c17e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c186:	e7ec      	b.n	800c162 <__kernel_cosf+0x6a>
 800c188:	ad47d74e 	.word	0xad47d74e
 800c18c:	310f74f6 	.word	0x310f74f6
 800c190:	3e999999 	.word	0x3e999999
 800c194:	b493f27c 	.word	0xb493f27c
 800c198:	37d00d01 	.word	0x37d00d01
 800c19c:	bab60b61 	.word	0xbab60b61
 800c1a0:	3d2aaaab 	.word	0x3d2aaaab
 800c1a4:	3f480000 	.word	0x3f480000

0800c1a8 <__kernel_sinf>:
 800c1a8:	ee10 3a10 	vmov	r3, s0
 800c1ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c1b4:	d204      	bcs.n	800c1c0 <__kernel_sinf+0x18>
 800c1b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c1ba:	ee17 3a90 	vmov	r3, s15
 800c1be:	b35b      	cbz	r3, 800c218 <__kernel_sinf+0x70>
 800c1c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c1c4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c21c <__kernel_sinf+0x74>
 800c1c8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c220 <__kernel_sinf+0x78>
 800c1cc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c1d0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c224 <__kernel_sinf+0x7c>
 800c1d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1d8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c228 <__kernel_sinf+0x80>
 800c1dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c1e0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c22c <__kernel_sinf+0x84>
 800c1e4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c1e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1ec:	b930      	cbnz	r0, 800c1fc <__kernel_sinf+0x54>
 800c1ee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c230 <__kernel_sinf+0x88>
 800c1f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c1f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c1fa:	4770      	bx	lr
 800c1fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c200:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c204:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c208:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c20c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c234 <__kernel_sinf+0x8c>
 800c210:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c214:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c220:	b2d72f34 	.word	0xb2d72f34
 800c224:	3638ef1b 	.word	0x3638ef1b
 800c228:	b9500d01 	.word	0xb9500d01
 800c22c:	3c088889 	.word	0x3c088889
 800c230:	be2aaaab 	.word	0xbe2aaaab
 800c234:	3e2aaaab 	.word	0x3e2aaaab

0800c238 <__ieee754_rem_pio2f>:
 800c238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c23a:	ee10 6a10 	vmov	r6, s0
 800c23e:	4b88      	ldr	r3, [pc, #544]	@ (800c460 <__ieee754_rem_pio2f+0x228>)
 800c240:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c244:	429d      	cmp	r5, r3
 800c246:	b087      	sub	sp, #28
 800c248:	4604      	mov	r4, r0
 800c24a:	d805      	bhi.n	800c258 <__ieee754_rem_pio2f+0x20>
 800c24c:	2300      	movs	r3, #0
 800c24e:	ed80 0a00 	vstr	s0, [r0]
 800c252:	6043      	str	r3, [r0, #4]
 800c254:	2000      	movs	r0, #0
 800c256:	e022      	b.n	800c29e <__ieee754_rem_pio2f+0x66>
 800c258:	4b82      	ldr	r3, [pc, #520]	@ (800c464 <__ieee754_rem_pio2f+0x22c>)
 800c25a:	429d      	cmp	r5, r3
 800c25c:	d83a      	bhi.n	800c2d4 <__ieee754_rem_pio2f+0x9c>
 800c25e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c262:	2e00      	cmp	r6, #0
 800c264:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c468 <__ieee754_rem_pio2f+0x230>
 800c268:	4a80      	ldr	r2, [pc, #512]	@ (800c46c <__ieee754_rem_pio2f+0x234>)
 800c26a:	f023 030f 	bic.w	r3, r3, #15
 800c26e:	dd18      	ble.n	800c2a2 <__ieee754_rem_pio2f+0x6a>
 800c270:	4293      	cmp	r3, r2
 800c272:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c276:	bf09      	itett	eq
 800c278:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c470 <__ieee754_rem_pio2f+0x238>
 800c27c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c474 <__ieee754_rem_pio2f+0x23c>
 800c280:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c478 <__ieee754_rem_pio2f+0x240>
 800c284:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c288:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c28c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c290:	ed80 7a00 	vstr	s14, [r0]
 800c294:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c298:	edc0 7a01 	vstr	s15, [r0, #4]
 800c29c:	2001      	movs	r0, #1
 800c29e:	b007      	add	sp, #28
 800c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c2a8:	bf09      	itett	eq
 800c2aa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c470 <__ieee754_rem_pio2f+0x238>
 800c2ae:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c474 <__ieee754_rem_pio2f+0x23c>
 800c2b2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c478 <__ieee754_rem_pio2f+0x240>
 800c2b6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c2ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c2be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2c2:	ed80 7a00 	vstr	s14, [r0]
 800c2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ca:	edc0 7a01 	vstr	s15, [r0, #4]
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d2:	e7e4      	b.n	800c29e <__ieee754_rem_pio2f+0x66>
 800c2d4:	4b69      	ldr	r3, [pc, #420]	@ (800c47c <__ieee754_rem_pio2f+0x244>)
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	d873      	bhi.n	800c3c2 <__ieee754_rem_pio2f+0x18a>
 800c2da:	f000 f8dd 	bl	800c498 <fabsf>
 800c2de:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c480 <__ieee754_rem_pio2f+0x248>
 800c2e2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c2e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c2ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2f2:	ee17 0a90 	vmov	r0, s15
 800c2f6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c468 <__ieee754_rem_pio2f+0x230>
 800c2fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c2fe:	281f      	cmp	r0, #31
 800c300:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c474 <__ieee754_rem_pio2f+0x23c>
 800c304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c308:	eeb1 6a47 	vneg.f32	s12, s14
 800c30c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c310:	ee16 1a90 	vmov	r1, s13
 800c314:	dc09      	bgt.n	800c32a <__ieee754_rem_pio2f+0xf2>
 800c316:	4a5b      	ldr	r2, [pc, #364]	@ (800c484 <__ieee754_rem_pio2f+0x24c>)
 800c318:	1e47      	subs	r7, r0, #1
 800c31a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c31e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c322:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c326:	4293      	cmp	r3, r2
 800c328:	d107      	bne.n	800c33a <__ieee754_rem_pio2f+0x102>
 800c32a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c32e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c332:	2a08      	cmp	r2, #8
 800c334:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c338:	dc14      	bgt.n	800c364 <__ieee754_rem_pio2f+0x12c>
 800c33a:	6021      	str	r1, [r4, #0]
 800c33c:	ed94 7a00 	vldr	s14, [r4]
 800c340:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c344:	2e00      	cmp	r6, #0
 800c346:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c34a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c34e:	daa6      	bge.n	800c29e <__ieee754_rem_pio2f+0x66>
 800c350:	eeb1 7a47 	vneg.f32	s14, s14
 800c354:	eeb1 0a40 	vneg.f32	s0, s0
 800c358:	ed84 7a00 	vstr	s14, [r4]
 800c35c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c360:	4240      	negs	r0, r0
 800c362:	e79c      	b.n	800c29e <__ieee754_rem_pio2f+0x66>
 800c364:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c470 <__ieee754_rem_pio2f+0x238>
 800c368:	eef0 6a40 	vmov.f32	s13, s0
 800c36c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c370:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c374:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c378:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c478 <__ieee754_rem_pio2f+0x240>
 800c37c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c380:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c384:	ee15 2a90 	vmov	r2, s11
 800c388:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c38c:	1a5b      	subs	r3, r3, r1
 800c38e:	2b19      	cmp	r3, #25
 800c390:	dc04      	bgt.n	800c39c <__ieee754_rem_pio2f+0x164>
 800c392:	edc4 5a00 	vstr	s11, [r4]
 800c396:	eeb0 0a66 	vmov.f32	s0, s13
 800c39a:	e7cf      	b.n	800c33c <__ieee754_rem_pio2f+0x104>
 800c39c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c488 <__ieee754_rem_pio2f+0x250>
 800c3a0:	eeb0 0a66 	vmov.f32	s0, s13
 800c3a4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c3a8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c3ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c48c <__ieee754_rem_pio2f+0x254>
 800c3b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c3b4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c3b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c3bc:	ed84 7a00 	vstr	s14, [r4]
 800c3c0:	e7bc      	b.n	800c33c <__ieee754_rem_pio2f+0x104>
 800c3c2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c3c6:	d306      	bcc.n	800c3d6 <__ieee754_rem_pio2f+0x19e>
 800c3c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c3cc:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3d0:	edc0 7a00 	vstr	s15, [r0]
 800c3d4:	e73e      	b.n	800c254 <__ieee754_rem_pio2f+0x1c>
 800c3d6:	15ea      	asrs	r2, r5, #23
 800c3d8:	3a86      	subs	r2, #134	@ 0x86
 800c3da:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3e6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c490 <__ieee754_rem_pio2f+0x258>
 800c3ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3f2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c3f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c406:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c40a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c40e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c416:	edcd 7a05 	vstr	s15, [sp, #20]
 800c41a:	d11e      	bne.n	800c45a <__ieee754_rem_pio2f+0x222>
 800c41c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c424:	bf0c      	ite	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	2302      	movne	r3, #2
 800c42a:	491a      	ldr	r1, [pc, #104]	@ (800c494 <__ieee754_rem_pio2f+0x25c>)
 800c42c:	9101      	str	r1, [sp, #4]
 800c42e:	2102      	movs	r1, #2
 800c430:	9100      	str	r1, [sp, #0]
 800c432:	a803      	add	r0, sp, #12
 800c434:	4621      	mov	r1, r4
 800c436:	f000 f89d 	bl	800c574 <__kernel_rem_pio2f>
 800c43a:	2e00      	cmp	r6, #0
 800c43c:	f6bf af2f 	bge.w	800c29e <__ieee754_rem_pio2f+0x66>
 800c440:	edd4 7a00 	vldr	s15, [r4]
 800c444:	eef1 7a67 	vneg.f32	s15, s15
 800c448:	edc4 7a00 	vstr	s15, [r4]
 800c44c:	edd4 7a01 	vldr	s15, [r4, #4]
 800c450:	eef1 7a67 	vneg.f32	s15, s15
 800c454:	edc4 7a01 	vstr	s15, [r4, #4]
 800c458:	e782      	b.n	800c360 <__ieee754_rem_pio2f+0x128>
 800c45a:	2303      	movs	r3, #3
 800c45c:	e7e5      	b.n	800c42a <__ieee754_rem_pio2f+0x1f2>
 800c45e:	bf00      	nop
 800c460:	3f490fd8 	.word	0x3f490fd8
 800c464:	4016cbe3 	.word	0x4016cbe3
 800c468:	3fc90f80 	.word	0x3fc90f80
 800c46c:	3fc90fd0 	.word	0x3fc90fd0
 800c470:	37354400 	.word	0x37354400
 800c474:	37354443 	.word	0x37354443
 800c478:	2e85a308 	.word	0x2e85a308
 800c47c:	43490f80 	.word	0x43490f80
 800c480:	3f22f984 	.word	0x3f22f984
 800c484:	0800cb64 	.word	0x0800cb64
 800c488:	2e85a300 	.word	0x2e85a300
 800c48c:	248d3132 	.word	0x248d3132
 800c490:	43800000 	.word	0x43800000
 800c494:	0800cbe4 	.word	0x0800cbe4

0800c498 <fabsf>:
 800c498:	ee10 3a10 	vmov	r3, s0
 800c49c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4a0:	ee00 3a10 	vmov	s0, r3
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <scalbnf>:
 800c4a8:	ee10 3a10 	vmov	r3, s0
 800c4ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c4b0:	d02b      	beq.n	800c50a <scalbnf+0x62>
 800c4b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c4b6:	d302      	bcc.n	800c4be <scalbnf+0x16>
 800c4b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c4bc:	4770      	bx	lr
 800c4be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c4c2:	d123      	bne.n	800c50c <scalbnf+0x64>
 800c4c4:	4b24      	ldr	r3, [pc, #144]	@ (800c558 <scalbnf+0xb0>)
 800c4c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c55c <scalbnf+0xb4>
 800c4ca:	4298      	cmp	r0, r3
 800c4cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c4d0:	db17      	blt.n	800c502 <scalbnf+0x5a>
 800c4d2:	ee10 3a10 	vmov	r3, s0
 800c4d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c4da:	3a19      	subs	r2, #25
 800c4dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c4e0:	4288      	cmp	r0, r1
 800c4e2:	dd15      	ble.n	800c510 <scalbnf+0x68>
 800c4e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c560 <scalbnf+0xb8>
 800c4e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c564 <scalbnf+0xbc>
 800c4ec:	ee10 3a10 	vmov	r3, s0
 800c4f0:	eeb0 7a67 	vmov.f32	s14, s15
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfb8      	it	lt
 800c4f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800c4fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c500:	4770      	bx	lr
 800c502:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c568 <scalbnf+0xc0>
 800c506:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c50a:	4770      	bx	lr
 800c50c:	0dd2      	lsrs	r2, r2, #23
 800c50e:	e7e5      	b.n	800c4dc <scalbnf+0x34>
 800c510:	4410      	add	r0, r2
 800c512:	28fe      	cmp	r0, #254	@ 0xfe
 800c514:	dce6      	bgt.n	800c4e4 <scalbnf+0x3c>
 800c516:	2800      	cmp	r0, #0
 800c518:	dd06      	ble.n	800c528 <scalbnf+0x80>
 800c51a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c51e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c522:	ee00 3a10 	vmov	s0, r3
 800c526:	4770      	bx	lr
 800c528:	f110 0f16 	cmn.w	r0, #22
 800c52c:	da09      	bge.n	800c542 <scalbnf+0x9a>
 800c52e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c568 <scalbnf+0xc0>
 800c532:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c56c <scalbnf+0xc4>
 800c536:	ee10 3a10 	vmov	r3, s0
 800c53a:	eeb0 7a67 	vmov.f32	s14, s15
 800c53e:	2b00      	cmp	r3, #0
 800c540:	e7d9      	b.n	800c4f6 <scalbnf+0x4e>
 800c542:	3019      	adds	r0, #25
 800c544:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c548:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c54c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c570 <scalbnf+0xc8>
 800c550:	ee07 3a90 	vmov	s15, r3
 800c554:	e7d7      	b.n	800c506 <scalbnf+0x5e>
 800c556:	bf00      	nop
 800c558:	ffff3cb0 	.word	0xffff3cb0
 800c55c:	4c000000 	.word	0x4c000000
 800c560:	7149f2ca 	.word	0x7149f2ca
 800c564:	f149f2ca 	.word	0xf149f2ca
 800c568:	0da24260 	.word	0x0da24260
 800c56c:	8da24260 	.word	0x8da24260
 800c570:	33000000 	.word	0x33000000

0800c574 <__kernel_rem_pio2f>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	ed2d 8b04 	vpush	{d8-d9}
 800c57c:	b0d9      	sub	sp, #356	@ 0x164
 800c57e:	4690      	mov	r8, r2
 800c580:	9001      	str	r0, [sp, #4]
 800c582:	4ab6      	ldr	r2, [pc, #728]	@ (800c85c <__kernel_rem_pio2f+0x2e8>)
 800c584:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c586:	f118 0f04 	cmn.w	r8, #4
 800c58a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c58e:	460f      	mov	r7, r1
 800c590:	f103 3bff 	add.w	fp, r3, #4294967295
 800c594:	db26      	blt.n	800c5e4 <__kernel_rem_pio2f+0x70>
 800c596:	f1b8 0203 	subs.w	r2, r8, #3
 800c59a:	bf48      	it	mi
 800c59c:	f108 0204 	addmi.w	r2, r8, #4
 800c5a0:	10d2      	asrs	r2, r2, #3
 800c5a2:	1c55      	adds	r5, r2, #1
 800c5a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c5a6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c5aa:	00e8      	lsls	r0, r5, #3
 800c5ac:	eba2 060b 	sub.w	r6, r2, fp
 800c5b0:	9002      	str	r0, [sp, #8]
 800c5b2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c5b6:	eb0a 0c0b 	add.w	ip, sl, fp
 800c5ba:	ac1c      	add	r4, sp, #112	@ 0x70
 800c5bc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	4560      	cmp	r0, ip
 800c5c4:	dd10      	ble.n	800c5e8 <__kernel_rem_pio2f+0x74>
 800c5c6:	a91c      	add	r1, sp, #112	@ 0x70
 800c5c8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c5cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c5d0:	2600      	movs	r6, #0
 800c5d2:	4556      	cmp	r6, sl
 800c5d4:	dc24      	bgt.n	800c620 <__kernel_rem_pio2f+0xac>
 800c5d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c5da:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c5de:	4684      	mov	ip, r0
 800c5e0:	2400      	movs	r4, #0
 800c5e2:	e016      	b.n	800c612 <__kernel_rem_pio2f+0x9e>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	e7dc      	b.n	800c5a2 <__kernel_rem_pio2f+0x2e>
 800c5e8:	42c6      	cmn	r6, r0
 800c5ea:	bf5d      	ittte	pl
 800c5ec:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c5f0:	ee07 1a90 	vmovpl	s15, r1
 800c5f4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c5f8:	eef0 7a47 	vmovmi.f32	s15, s14
 800c5fc:	ece4 7a01 	vstmia	r4!, {s15}
 800c600:	3001      	adds	r0, #1
 800c602:	e7de      	b.n	800c5c2 <__kernel_rem_pio2f+0x4e>
 800c604:	ecfe 6a01 	vldmia	lr!, {s13}
 800c608:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c60c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c610:	3401      	adds	r4, #1
 800c612:	455c      	cmp	r4, fp
 800c614:	ddf6      	ble.n	800c604 <__kernel_rem_pio2f+0x90>
 800c616:	ece9 7a01 	vstmia	r9!, {s15}
 800c61a:	3601      	adds	r6, #1
 800c61c:	3004      	adds	r0, #4
 800c61e:	e7d8      	b.n	800c5d2 <__kernel_rem_pio2f+0x5e>
 800c620:	a908      	add	r1, sp, #32
 800c622:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c626:	9104      	str	r1, [sp, #16]
 800c628:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c62a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c868 <__kernel_rem_pio2f+0x2f4>
 800c62e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c864 <__kernel_rem_pio2f+0x2f0>
 800c632:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c636:	9203      	str	r2, [sp, #12]
 800c638:	4654      	mov	r4, sl
 800c63a:	00a2      	lsls	r2, r4, #2
 800c63c:	9205      	str	r2, [sp, #20]
 800c63e:	aa58      	add	r2, sp, #352	@ 0x160
 800c640:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c644:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c648:	a944      	add	r1, sp, #272	@ 0x110
 800c64a:	aa08      	add	r2, sp, #32
 800c64c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c650:	4694      	mov	ip, r2
 800c652:	4626      	mov	r6, r4
 800c654:	2e00      	cmp	r6, #0
 800c656:	dc4c      	bgt.n	800c6f2 <__kernel_rem_pio2f+0x17e>
 800c658:	4628      	mov	r0, r5
 800c65a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c65e:	f7ff ff23 	bl	800c4a8 <scalbnf>
 800c662:	eeb0 8a40 	vmov.f32	s16, s0
 800c666:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c66a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c66e:	f000 f9e9 	bl	800ca44 <floorf>
 800c672:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c676:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c67a:	2d00      	cmp	r5, #0
 800c67c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c680:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c684:	ee17 9a90 	vmov	r9, s15
 800c688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c68c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c690:	dd41      	ble.n	800c716 <__kernel_rem_pio2f+0x1a2>
 800c692:	f104 3cff 	add.w	ip, r4, #4294967295
 800c696:	a908      	add	r1, sp, #32
 800c698:	f1c5 0e08 	rsb	lr, r5, #8
 800c69c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c6a0:	fa46 f00e 	asr.w	r0, r6, lr
 800c6a4:	4481      	add	r9, r0
 800c6a6:	fa00 f00e 	lsl.w	r0, r0, lr
 800c6aa:	1a36      	subs	r6, r6, r0
 800c6ac:	f1c5 0007 	rsb	r0, r5, #7
 800c6b0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c6b4:	4106      	asrs	r6, r0
 800c6b6:	2e00      	cmp	r6, #0
 800c6b8:	dd3c      	ble.n	800c734 <__kernel_rem_pio2f+0x1c0>
 800c6ba:	f04f 0e00 	mov.w	lr, #0
 800c6be:	f109 0901 	add.w	r9, r9, #1
 800c6c2:	4670      	mov	r0, lr
 800c6c4:	4574      	cmp	r4, lr
 800c6c6:	dc68      	bgt.n	800c79a <__kernel_rem_pio2f+0x226>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	dd03      	ble.n	800c6d4 <__kernel_rem_pio2f+0x160>
 800c6cc:	2d01      	cmp	r5, #1
 800c6ce:	d074      	beq.n	800c7ba <__kernel_rem_pio2f+0x246>
 800c6d0:	2d02      	cmp	r5, #2
 800c6d2:	d07d      	beq.n	800c7d0 <__kernel_rem_pio2f+0x25c>
 800c6d4:	2e02      	cmp	r6, #2
 800c6d6:	d12d      	bne.n	800c734 <__kernel_rem_pio2f+0x1c0>
 800c6d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c6dc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c6e0:	b340      	cbz	r0, 800c734 <__kernel_rem_pio2f+0x1c0>
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	9306      	str	r3, [sp, #24]
 800c6e6:	f7ff fedf 	bl	800c4a8 <scalbnf>
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c6f0:	e020      	b.n	800c734 <__kernel_rem_pio2f+0x1c0>
 800c6f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c6f6:	3e01      	subs	r6, #1
 800c6f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c700:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c704:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c708:	ecac 0a01 	vstmia	ip!, {s0}
 800c70c:	ed30 0a01 	vldmdb	r0!, {s0}
 800c710:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c714:	e79e      	b.n	800c654 <__kernel_rem_pio2f+0xe0>
 800c716:	d105      	bne.n	800c724 <__kernel_rem_pio2f+0x1b0>
 800c718:	1e60      	subs	r0, r4, #1
 800c71a:	a908      	add	r1, sp, #32
 800c71c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c720:	11f6      	asrs	r6, r6, #7
 800c722:	e7c8      	b.n	800c6b6 <__kernel_rem_pio2f+0x142>
 800c724:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c728:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c730:	da31      	bge.n	800c796 <__kernel_rem_pio2f+0x222>
 800c732:	2600      	movs	r6, #0
 800c734:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	f040 8098 	bne.w	800c870 <__kernel_rem_pio2f+0x2fc>
 800c740:	1e60      	subs	r0, r4, #1
 800c742:	2200      	movs	r2, #0
 800c744:	4550      	cmp	r0, sl
 800c746:	da4b      	bge.n	800c7e0 <__kernel_rem_pio2f+0x26c>
 800c748:	2a00      	cmp	r2, #0
 800c74a:	d065      	beq.n	800c818 <__kernel_rem_pio2f+0x2a4>
 800c74c:	3c01      	subs	r4, #1
 800c74e:	ab08      	add	r3, sp, #32
 800c750:	3d08      	subs	r5, #8
 800c752:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0f8      	beq.n	800c74c <__kernel_rem_pio2f+0x1d8>
 800c75a:	4628      	mov	r0, r5
 800c75c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c760:	f7ff fea2 	bl	800c4a8 <scalbnf>
 800c764:	1c63      	adds	r3, r4, #1
 800c766:	aa44      	add	r2, sp, #272	@ 0x110
 800c768:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c868 <__kernel_rem_pio2f+0x2f4>
 800c76c:	0099      	lsls	r1, r3, #2
 800c76e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c772:	4623      	mov	r3, r4
 800c774:	2b00      	cmp	r3, #0
 800c776:	f280 80a9 	bge.w	800c8cc <__kernel_rem_pio2f+0x358>
 800c77a:	4623      	mov	r3, r4
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f2c0 80c7 	blt.w	800c910 <__kernel_rem_pio2f+0x39c>
 800c782:	aa44      	add	r2, sp, #272	@ 0x110
 800c784:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c788:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c860 <__kernel_rem_pio2f+0x2ec>
 800c78c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c790:	2000      	movs	r0, #0
 800c792:	1ae2      	subs	r2, r4, r3
 800c794:	e0b1      	b.n	800c8fa <__kernel_rem_pio2f+0x386>
 800c796:	2602      	movs	r6, #2
 800c798:	e78f      	b.n	800c6ba <__kernel_rem_pio2f+0x146>
 800c79a:	f852 1b04 	ldr.w	r1, [r2], #4
 800c79e:	b948      	cbnz	r0, 800c7b4 <__kernel_rem_pio2f+0x240>
 800c7a0:	b121      	cbz	r1, 800c7ac <__kernel_rem_pio2f+0x238>
 800c7a2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c7a6:	f842 1c04 	str.w	r1, [r2, #-4]
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	f10e 0e01 	add.w	lr, lr, #1
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	e787      	b.n	800c6c4 <__kernel_rem_pio2f+0x150>
 800c7b4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c7b8:	e7f5      	b.n	800c7a6 <__kernel_rem_pio2f+0x232>
 800c7ba:	f104 3cff 	add.w	ip, r4, #4294967295
 800c7be:	aa08      	add	r2, sp, #32
 800c7c0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c7c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c7c8:	a908      	add	r1, sp, #32
 800c7ca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c7ce:	e781      	b.n	800c6d4 <__kernel_rem_pio2f+0x160>
 800c7d0:	f104 3cff 	add.w	ip, r4, #4294967295
 800c7d4:	aa08      	add	r2, sp, #32
 800c7d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c7da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c7de:	e7f3      	b.n	800c7c8 <__kernel_rem_pio2f+0x254>
 800c7e0:	a908      	add	r1, sp, #32
 800c7e2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c7e6:	3801      	subs	r0, #1
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	e7ab      	b.n	800c744 <__kernel_rem_pio2f+0x1d0>
 800c7ec:	3201      	adds	r2, #1
 800c7ee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	d0fa      	beq.n	800c7ec <__kernel_rem_pio2f+0x278>
 800c7f6:	9905      	ldr	r1, [sp, #20]
 800c7f8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c7fc:	eb0d 0001 	add.w	r0, sp, r1
 800c800:	18e6      	adds	r6, r4, r3
 800c802:	a91c      	add	r1, sp, #112	@ 0x70
 800c804:	f104 0c01 	add.w	ip, r4, #1
 800c808:	384c      	subs	r0, #76	@ 0x4c
 800c80a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c80e:	4422      	add	r2, r4
 800c810:	4562      	cmp	r2, ip
 800c812:	da04      	bge.n	800c81e <__kernel_rem_pio2f+0x2aa>
 800c814:	4614      	mov	r4, r2
 800c816:	e710      	b.n	800c63a <__kernel_rem_pio2f+0xc6>
 800c818:	9804      	ldr	r0, [sp, #16]
 800c81a:	2201      	movs	r2, #1
 800c81c:	e7e7      	b.n	800c7ee <__kernel_rem_pio2f+0x27a>
 800c81e:	9903      	ldr	r1, [sp, #12]
 800c820:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c824:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c828:	9105      	str	r1, [sp, #20]
 800c82a:	ee07 1a90 	vmov	s15, r1
 800c82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c832:	2400      	movs	r4, #0
 800c834:	ece6 7a01 	vstmia	r6!, {s15}
 800c838:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c83c:	46b1      	mov	r9, r6
 800c83e:	455c      	cmp	r4, fp
 800c840:	dd04      	ble.n	800c84c <__kernel_rem_pio2f+0x2d8>
 800c842:	ece0 7a01 	vstmia	r0!, {s15}
 800c846:	f10c 0c01 	add.w	ip, ip, #1
 800c84a:	e7e1      	b.n	800c810 <__kernel_rem_pio2f+0x29c>
 800c84c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c850:	ed39 7a01 	vldmdb	r9!, {s14}
 800c854:	3401      	adds	r4, #1
 800c856:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c85a:	e7f0      	b.n	800c83e <__kernel_rem_pio2f+0x2ca>
 800c85c:	0800cf28 	.word	0x0800cf28
 800c860:	0800cefc 	.word	0x0800cefc
 800c864:	43800000 	.word	0x43800000
 800c868:	3b800000 	.word	0x3b800000
 800c86c:	00000000 	.word	0x00000000
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	eeb0 0a48 	vmov.f32	s0, s16
 800c876:	eba3 0008 	sub.w	r0, r3, r8
 800c87a:	f7ff fe15 	bl	800c4a8 <scalbnf>
 800c87e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c864 <__kernel_rem_pio2f+0x2f0>
 800c882:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88a:	db19      	blt.n	800c8c0 <__kernel_rem_pio2f+0x34c>
 800c88c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c868 <__kernel_rem_pio2f+0x2f4>
 800c890:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c894:	aa08      	add	r2, sp, #32
 800c896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c89a:	3508      	adds	r5, #8
 800c89c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c8a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8ac:	ee10 3a10 	vmov	r3, s0
 800c8b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c8b4:	ee17 3a90 	vmov	r3, s15
 800c8b8:	3401      	adds	r4, #1
 800c8ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c8be:	e74c      	b.n	800c75a <__kernel_rem_pio2f+0x1e6>
 800c8c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8c4:	aa08      	add	r2, sp, #32
 800c8c6:	ee10 3a10 	vmov	r3, s0
 800c8ca:	e7f6      	b.n	800c8ba <__kernel_rem_pio2f+0x346>
 800c8cc:	a808      	add	r0, sp, #32
 800c8ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c8d2:	9001      	str	r0, [sp, #4]
 800c8d4:	ee07 0a90 	vmov	s15, r0
 800c8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c8e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c8e6:	ed62 7a01 	vstmdb	r2!, {s15}
 800c8ea:	e743      	b.n	800c774 <__kernel_rem_pio2f+0x200>
 800c8ec:	ecfc 6a01 	vldmia	ip!, {s13}
 800c8f0:	ecb5 7a01 	vldmia	r5!, {s14}
 800c8f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	4550      	cmp	r0, sl
 800c8fc:	dc01      	bgt.n	800c902 <__kernel_rem_pio2f+0x38e>
 800c8fe:	4290      	cmp	r0, r2
 800c900:	ddf4      	ble.n	800c8ec <__kernel_rem_pio2f+0x378>
 800c902:	a858      	add	r0, sp, #352	@ 0x160
 800c904:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c908:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c90c:	3b01      	subs	r3, #1
 800c90e:	e735      	b.n	800c77c <__kernel_rem_pio2f+0x208>
 800c910:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c912:	2b02      	cmp	r3, #2
 800c914:	dc09      	bgt.n	800c92a <__kernel_rem_pio2f+0x3b6>
 800c916:	2b00      	cmp	r3, #0
 800c918:	dc27      	bgt.n	800c96a <__kernel_rem_pio2f+0x3f6>
 800c91a:	d040      	beq.n	800c99e <__kernel_rem_pio2f+0x42a>
 800c91c:	f009 0007 	and.w	r0, r9, #7
 800c920:	b059      	add	sp, #356	@ 0x164
 800c922:	ecbd 8b04 	vpop	{d8-d9}
 800c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d1f5      	bne.n	800c91c <__kernel_rem_pio2f+0x3a8>
 800c930:	aa30      	add	r2, sp, #192	@ 0xc0
 800c932:	1f0b      	subs	r3, r1, #4
 800c934:	4413      	add	r3, r2
 800c936:	461a      	mov	r2, r3
 800c938:	4620      	mov	r0, r4
 800c93a:	2800      	cmp	r0, #0
 800c93c:	dc50      	bgt.n	800c9e0 <__kernel_rem_pio2f+0x46c>
 800c93e:	4622      	mov	r2, r4
 800c940:	2a01      	cmp	r2, #1
 800c942:	dc5d      	bgt.n	800ca00 <__kernel_rem_pio2f+0x48c>
 800c944:	ab30      	add	r3, sp, #192	@ 0xc0
 800c946:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c94a:	440b      	add	r3, r1
 800c94c:	2c01      	cmp	r4, #1
 800c94e:	dc67      	bgt.n	800ca20 <__kernel_rem_pio2f+0x4ac>
 800c950:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c954:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c958:	2e00      	cmp	r6, #0
 800c95a:	d167      	bne.n	800ca2c <__kernel_rem_pio2f+0x4b8>
 800c95c:	edc7 6a00 	vstr	s13, [r7]
 800c960:	ed87 7a01 	vstr	s14, [r7, #4]
 800c964:	edc7 7a02 	vstr	s15, [r7, #8]
 800c968:	e7d8      	b.n	800c91c <__kernel_rem_pio2f+0x3a8>
 800c96a:	ab30      	add	r3, sp, #192	@ 0xc0
 800c96c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c970:	440b      	add	r3, r1
 800c972:	4622      	mov	r2, r4
 800c974:	2a00      	cmp	r2, #0
 800c976:	da24      	bge.n	800c9c2 <__kernel_rem_pio2f+0x44e>
 800c978:	b34e      	cbz	r6, 800c9ce <__kernel_rem_pio2f+0x45a>
 800c97a:	eef1 7a47 	vneg.f32	s15, s14
 800c97e:	edc7 7a00 	vstr	s15, [r7]
 800c982:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c98a:	aa31      	add	r2, sp, #196	@ 0xc4
 800c98c:	2301      	movs	r3, #1
 800c98e:	429c      	cmp	r4, r3
 800c990:	da20      	bge.n	800c9d4 <__kernel_rem_pio2f+0x460>
 800c992:	b10e      	cbz	r6, 800c998 <__kernel_rem_pio2f+0x424>
 800c994:	eef1 7a67 	vneg.f32	s15, s15
 800c998:	edc7 7a01 	vstr	s15, [r7, #4]
 800c99c:	e7be      	b.n	800c91c <__kernel_rem_pio2f+0x3a8>
 800c99e:	ab30      	add	r3, sp, #192	@ 0xc0
 800c9a0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c86c <__kernel_rem_pio2f+0x2f8>
 800c9a4:	440b      	add	r3, r1
 800c9a6:	2c00      	cmp	r4, #0
 800c9a8:	da05      	bge.n	800c9b6 <__kernel_rem_pio2f+0x442>
 800c9aa:	b10e      	cbz	r6, 800c9b0 <__kernel_rem_pio2f+0x43c>
 800c9ac:	eef1 7a67 	vneg.f32	s15, s15
 800c9b0:	edc7 7a00 	vstr	s15, [r7]
 800c9b4:	e7b2      	b.n	800c91c <__kernel_rem_pio2f+0x3a8>
 800c9b6:	ed33 7a01 	vldmdb	r3!, {s14}
 800c9ba:	3c01      	subs	r4, #1
 800c9bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9c0:	e7f1      	b.n	800c9a6 <__kernel_rem_pio2f+0x432>
 800c9c2:	ed73 7a01 	vldmdb	r3!, {s15}
 800c9c6:	3a01      	subs	r2, #1
 800c9c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9cc:	e7d2      	b.n	800c974 <__kernel_rem_pio2f+0x400>
 800c9ce:	eef0 7a47 	vmov.f32	s15, s14
 800c9d2:	e7d4      	b.n	800c97e <__kernel_rem_pio2f+0x40a>
 800c9d4:	ecb2 7a01 	vldmia	r2!, {s14}
 800c9d8:	3301      	adds	r3, #1
 800c9da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9de:	e7d6      	b.n	800c98e <__kernel_rem_pio2f+0x41a>
 800c9e0:	ed72 7a01 	vldmdb	r2!, {s15}
 800c9e4:	edd2 6a01 	vldr	s13, [r2, #4]
 800c9e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c9ec:	3801      	subs	r0, #1
 800c9ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9f2:	ed82 7a00 	vstr	s14, [r2]
 800c9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9fa:	edc2 7a01 	vstr	s15, [r2, #4]
 800c9fe:	e79c      	b.n	800c93a <__kernel_rem_pio2f+0x3c6>
 800ca00:	ed73 7a01 	vldmdb	r3!, {s15}
 800ca04:	edd3 6a01 	vldr	s13, [r3, #4]
 800ca08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca0c:	3a01      	subs	r2, #1
 800ca0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca12:	ed83 7a00 	vstr	s14, [r3]
 800ca16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca1a:	edc3 7a01 	vstr	s15, [r3, #4]
 800ca1e:	e78f      	b.n	800c940 <__kernel_rem_pio2f+0x3cc>
 800ca20:	ed33 7a01 	vldmdb	r3!, {s14}
 800ca24:	3c01      	subs	r4, #1
 800ca26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca2a:	e78f      	b.n	800c94c <__kernel_rem_pio2f+0x3d8>
 800ca2c:	eef1 6a66 	vneg.f32	s13, s13
 800ca30:	eeb1 7a47 	vneg.f32	s14, s14
 800ca34:	edc7 6a00 	vstr	s13, [r7]
 800ca38:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca3c:	eef1 7a67 	vneg.f32	s15, s15
 800ca40:	e790      	b.n	800c964 <__kernel_rem_pio2f+0x3f0>
 800ca42:	bf00      	nop

0800ca44 <floorf>:
 800ca44:	ee10 3a10 	vmov	r3, s0
 800ca48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca4c:	3a7f      	subs	r2, #127	@ 0x7f
 800ca4e:	2a16      	cmp	r2, #22
 800ca50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ca54:	dc2b      	bgt.n	800caae <floorf+0x6a>
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	da12      	bge.n	800ca80 <floorf+0x3c>
 800ca5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cac0 <floorf+0x7c>
 800ca5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6a:	dd06      	ble.n	800ca7a <floorf+0x36>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	da24      	bge.n	800caba <floorf+0x76>
 800ca70:	2900      	cmp	r1, #0
 800ca72:	4b14      	ldr	r3, [pc, #80]	@ (800cac4 <floorf+0x80>)
 800ca74:	bf08      	it	eq
 800ca76:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ca7a:	ee00 3a10 	vmov	s0, r3
 800ca7e:	4770      	bx	lr
 800ca80:	4911      	ldr	r1, [pc, #68]	@ (800cac8 <floorf+0x84>)
 800ca82:	4111      	asrs	r1, r2
 800ca84:	420b      	tst	r3, r1
 800ca86:	d0fa      	beq.n	800ca7e <floorf+0x3a>
 800ca88:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cac0 <floorf+0x7c>
 800ca8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca98:	ddef      	ble.n	800ca7a <floorf+0x36>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	bfbe      	ittt	lt
 800ca9e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800caa2:	fa40 f202 	asrlt.w	r2, r0, r2
 800caa6:	189b      	addlt	r3, r3, r2
 800caa8:	ea23 0301 	bic.w	r3, r3, r1
 800caac:	e7e5      	b.n	800ca7a <floorf+0x36>
 800caae:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cab2:	d3e4      	bcc.n	800ca7e <floorf+0x3a>
 800cab4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cab8:	4770      	bx	lr
 800caba:	2300      	movs	r3, #0
 800cabc:	e7dd      	b.n	800ca7a <floorf+0x36>
 800cabe:	bf00      	nop
 800cac0:	7149f2ca 	.word	0x7149f2ca
 800cac4:	bf800000 	.word	0xbf800000
 800cac8:	007fffff 	.word	0x007fffff

0800cacc <_init>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr

0800cad8 <_fini>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	bf00      	nop
 800cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cade:	bc08      	pop	{r3}
 800cae0:	469e      	mov	lr, r3
 800cae2:	4770      	bx	lr
