
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec58  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  0800ee30  0800ee30  0000fe30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faa4  0800faa4  00011170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800faa4  0800faa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800faac  0800faac  00011170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800faac  0800faac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fab0  0800fab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800fab4  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000208c  20000170  0800fc24  00011170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021fc  0800fc24  000111fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e76f  00000000  00000000  000111a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000576f  00000000  00000000  0003f90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00045080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001650  00000000  00000000  00046d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dcf7  00000000  00000000  000483c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1d7  00000000  00000000  000760bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b2be  00000000  00000000  000a2296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bd554  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  001bd598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c57e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000170 	.word	0x20000170
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ee18 	.word	0x0800ee18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000174 	.word	0x20000174
 8000214:	0800ee18 	.word	0x0800ee18

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	60fa      	str	r2, [r7, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e22:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e3e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000e4c:	ed97 7a00 	vldr	s14, [r7]
 8000e50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2205      	movs	r2, #5
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e74:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000ebc <ADC_DMA_Init+0xac>
 8000e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e008      	b.n	8000ea4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3f2      	bcc.n	8000e92 <ADC_DMA_Init+0x82>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	42c80000 	.word	0x42c80000

08000ec0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	217f      	movs	r1, #127	@ 0x7f
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 f8d8 	bl	8007084 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f005 f9c1 	bl	8006268 <HAL_ADC_Start_DMA>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e012      	b.n	8000f30 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
        samples++;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3e7      	bcc.n	8000f0a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00c      	beq.n	8000f5a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f58:	e001      	b.n	8000f5e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 8000f5a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8000f70 <ADC_DMA_GetValue+0x80>
}
 8000f5e:	eef0 7a66 	vmov.f32	s15, s13
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	00000000 	.word	0x00000000

08000f74 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	460b      	mov	r3, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000fc4 <ADC_DMA_SetCenterPoint+0x50>
 8000fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	42c80000 	.word	0x42c80000

08000fc8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd6:	edc7 0a00 	vstr	s1, [r7]
 8000fda:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff85 	bl	8000ef0 <ADC_DMA_GetValue>
 8000fe6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	eeb0 7ae7 	vabs.f32	s14, s15
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d502      	bpl.n	8001012 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a05 	vldr	s15, [r3, #20]
 8001018:	ed97 2a00 	vldr	s4, [r7]
 800101c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001020:	eeb0 1a67 	vmov.f32	s2, s15
 8001024:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001040 <ADC_DMA_GetJoystickValue+0x78>
 8001028:	ed97 0a05 	vldr	s0, [r7, #20]
 800102c:	f000 fb5c 	bl	80016e8 <mapf>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000

08001044 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	ed87 0a03 	vstr	s0, [r7, #12]
 800104e:	60b8      	str	r0, [r7, #8]
 8001050:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	dd01      	ble.n	800106e <PWM_Satuation+0x2a>
		return _upper_limit;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	e013      	b.n	8001096 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	ed97 7a03 	vldr	s14, [r7, #12]
 800107c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d501      	bpl.n	800108a <PWM_Satuation+0x46>
		return _lower_limit;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e005      	b.n	8001096 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800108a:	edd7 7a03 	vldr	s15, [r7, #12]
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6178      	str	r0, [r7, #20]
 80010aa:	ed87 0a04 	vstr	s0, [r7, #16]
 80010ae:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b2:	ed87 1a02 	vstr	s2, [r7, #8]
 80010b6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	bfac      	ite	ge
 800112a:	2301      	movge	r3, #1
 800112c:	2300      	movlt	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10e      	bne.n	8001158 <PID_CONTROLLER_Compute+0x50>
 800113a:	edd7 7a00 	vldr	s15, [r7]
 800113e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	bfcc      	ite	gt
 8001148:	2301      	movgt	r3, #1
 800114a:	2300      	movle	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d057      	beq.n	8001208 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a06 	vldr	s15, [r3, #24]
 8001164:	eef1 7a67 	vneg.f32	s15, s15
 8001168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	bf94      	ite	ls
 8001172:	2301      	movls	r3, #1
 8001174:	2300      	movhi	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f083 0301 	eor.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10e      	bne.n	80011a0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001182:	edd7 7a00 	vldr	s15, [r7]
 8001186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	bf4c      	ite	mi
 8001190:	2301      	movmi	r3, #1
 8001192:	2300      	movpl	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d033      	beq.n	8001208 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 6a00 	vldr	s13, [r3]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 6a00 	vldr	s12, [r3]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a07 	vldr	s15, [r3, #28]
 80011e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	ed93 6a02 	vldr	s12, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80011f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	ee07 3a90 	vmov	s15, r3
}
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3328      	adds	r3, #40	@ 0x28
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f001 f827 	bl	80022a4 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8b3a      	ldrh	r2, [r7, #24]
 8001260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001280:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800128a:	2b00      	cmp	r3, #0
 800128c:	d15f      	bne.n	800134e <MDXX_set_range+0xda>
		if (duty == 0) {
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d115      	bne.n	80012c8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3310      	adds	r3, #16
 80012a0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001420 <MDXX_set_range+0x1ac>
 80012a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 f81d 	bl	80022e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3328      	adds	r3, #40	@ 0x28
 80012b2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001420 <MDXX_set_range+0x1ac>
 80012b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f814 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = 0;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80012c6:	e0a6      	b.n	8001416 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd1a      	ble.n	800130c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3310      	adds	r3, #16
 80012da:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001420 <MDXX_set_range+0x1ac>
 80012de:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 f800 	bl	80022e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3328      	adds	r3, #40	@ 0x28
 80012ec:	edd7 0a01 	vldr	s1, [r7, #4]
 80012f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fff7 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = duty;
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800130a:	e084      	b.n	8001416 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3310      	adds	r3, #16
 8001310:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001424 <MDXX_set_range+0x1b0>
 8001314:	ed97 0a02 	vldr	s0, [r7, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 ffe5 	bl	80022e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3328      	adds	r3, #40	@ 0x28
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eef0 7ae7 	vabs.f32	s15, s15
 800132a:	eef0 0a67 	vmov.f32	s1, s15
 800132e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 ffd8 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001338:	edd7 7a01 	vldr	s15, [r7, #4]
 800133c:	eef0 7ae7 	vabs.f32	s15, s15
 8001340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800134c:	e063      	b.n	8001416 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001354:	2b01      	cmp	r3, #1
 8001356:	d15e      	bne.n	8001416 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001358:	edd7 7a01 	vldr	s15, [r7, #4]
 800135c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d115      	bne.n	8001392 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	f006 fdcc 	bl	8007f10 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3328      	adds	r3, #40	@ 0x28
 800137c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001420 <MDXX_set_range+0x1ac>
 8001380:	ed97 0a02 	vldr	s0, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 ffaf 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = 0;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001390:	e041      	b.n	8001416 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001392:	edd7 7a01 	vldr	s15, [r7, #4]
 8001396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd1a      	ble.n	80013d6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f006 fdaf 	bl	8007f10 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3328      	adds	r3, #40	@ 0x28
 80013b6:	edd7 0a01 	vldr	s1, [r7, #4]
 80013ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 ff92 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = duty;
 80013c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013cc:	ee17 2a90 	vmov	r2, s15
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013d4:	e01f      	b.n	8001416 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013e0:	2201      	movs	r2, #1
 80013e2:	4619      	mov	r1, r3
 80013e4:	f006 fd94 	bl	8007f10 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3328      	adds	r3, #40	@ 0x28
 80013ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f0:	eef0 7ae7 	vabs.f32	s15, s15
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 ff73 	bl	80022e8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eef0 7ae7 	vabs.f32	s15, s15
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 2a90 	vmov	r2, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	42c80000 	.word	0x42c80000

08001428 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	ed2d 8b02 	vpush	{d8}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	460b      	mov	r3, r1
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ba:	edc7 0a00 	vstr	s1, [r7]
 80014be:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80014c0:	897b      	ldrh	r3, [r7, #10]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <FIR_init+0x2a>
        numTaps += 1;
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	3301      	adds	r3, #1
 80014d0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	897a      	ldrh	r2, [r7, #10]
 80014d6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00c fa10 	bl	800d908 <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00c fa07 	bl	800d908 <malloc>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e0 	beq.w	80016cc <FIR_init+0x224>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80db 	beq.w	80016cc <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800151a:	e00a      	b.n	8001532 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800152c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800152e:	3301      	adds	r3, #1
 8001530:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001532:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f0      	bcc.n	800151c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800153a:	edd7 6a01 	vldr	s13, [r7, #4]
 800153e:	ed97 7a00 	vldr	s14, [r7]
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800154a:	897b      	ldrh	r3, [r7, #10]
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001556:	e077      	b.n	8001648 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001558:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	429a      	cmp	r2, r3
 8001562:	d10c      	bne.n	800157e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	edd7 7a06 	vldr	s15, [r7, #24]
 8001574:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001578:	edc3 7a00 	vstr	s15, [r3]
 800157c:	e02c      	b.n	80015d8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800157e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001580:	8afb      	ldrh	r3, [r7, #22]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001588:	edd7 7a06 	vldr	s15, [r7, #24]
 800158c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80016d8 <FIR_init+0x230>
 8001590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001594:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f00c fb82 	bl	800dcb0 <sinf>
 80015ac:	eef0 6a40 	vmov.f32	s13, s0
 80015b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80016dc <FIR_init+0x234>
 80015c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	ed93 8a00 	vldr	s16, [r3]
 80015e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016d8 <FIR_init+0x230>
 80015f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	3b01      	subs	r3, #1
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800160c:	eeb0 0a66 	vmov.f32	s0, s13
 8001610:	f00c fb0a 	bl	800dc28 <cosf>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016e0 <FIR_init+0x238>
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80016e4 <FIR_init+0x23c>
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001638:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800163c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b29b      	uxth	r3, r3
 8001646:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001648:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	429a      	cmp	r2, r3
 8001650:	db82      	blt.n	8001558 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	83fb      	strh	r3, [r7, #30]
 800165c:	e00f      	b.n	800167e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	8bfb      	ldrh	r3, [r7, #30]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001678:	8bfb      	ldrh	r3, [r7, #30]
 800167a:	3301      	adds	r3, #1
 800167c:	83fb      	strh	r3, [r7, #30]
 800167e:	8bfa      	ldrh	r2, [r7, #30]
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3eb      	bcc.n	800165e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001686:	edd7 7a08 	vldr	s15, [r7, #32]
 800168a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d01b      	beq.n	80016cc <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	83bb      	strh	r3, [r7, #28]
 8001698:	e014      	b.n	80016c4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	8bbb      	ldrh	r3, [r7, #28]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edd3 6a00 	vldr	s13, [r3]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	8bbb      	ldrh	r3, [r7, #28]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	83bb      	strh	r3, [r7, #28]
 80016c4:	8bba      	ldrh	r2, [r7, #28]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3e6      	bcc.n	800169a <FIR_init+0x1f2>
            }
        }
    }
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	ecbd 8b02 	vpop	{d8}
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40c90fdb 	.word	0x40c90fdb
 80016dc:	40490fdb 	.word	0x40490fdb
 80016e0:	3eeb851f 	.word	0x3eeb851f
 80016e4:	3f0a3d71 	.word	0x3f0a3d71

080016e8 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80016f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80016f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80016fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80016fe:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001702:	ed97 7a05 	vldr	s14, [r7, #20]
 8001706:	edd7 7a04 	vldr	s15, [r7, #16]
 800170a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800170e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001712:	edd7 7a04 	vldr	s15, [r7, #16]
 8001716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171e:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001722:	ed97 7a01 	vldr	s14, [r7, #4]
 8001726:	edd7 7a02 	vldr	s15, [r7, #8]
 800172a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800172e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	ed97 7a02 	vldr	s14, [r7, #8]
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000018c 	.word	0x2000018c

08001798 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <modbus_3t5_Timeout+0x1c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	755a      	strb	r2, [r3, #21]

}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	2000018c 	.word	0x2000018c

080017b8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f00a fa65 	bl	800bc90 <HAL_UART_GetError>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d101      	bne.n	80017d0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80017cc:	f7ff ffc4 	bl	8001758 <modbus_1t5_Timeout>

	}
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80017e6:	4a2d      	ldr	r2, [pc, #180]	@ (800189c <Modbus_init+0xc4>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80017ec:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <Modbus_init+0xc4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <Modbus_init+0xc4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <Modbus_init+0xc4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <Modbus_init+0xc4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	7e3a      	ldrb	r2, [r7, #24]
 800180a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800180c:	4b23      	ldr	r3, [pc, #140]	@ (800189c <Modbus_init+0xc4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <Modbus_init+0xc8>)
 800181a:	210e      	movs	r1, #14
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fcdb 	bl	800a1d8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2110      	movs	r1, #16
 8001828:	4618      	mov	r0, r3
 800182a:	f00a f9db 	bl	800bbe4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	f00a f9f2 	bl	800bc1c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <Modbus_init+0xcc>)
 800183e:	2104      	movs	r1, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fd19 	bl	800b278 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <Modbus_init+0xc4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <Modbus_init+0xc4>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <Modbus_init+0xc4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001858:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800185c:	4413      	add	r3, r2
 800185e:	3302      	adds	r3, #2
 8001860:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001864:	4619      	mov	r1, r3
 8001866:	f009 fdc1 	bl	800b3ec <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <Modbus_init+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10c      	bne.n	8001894 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <Modbus_init+0xc4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4618      	mov	r0, r3
 8001882:	f007 fc85 	bl	8009190 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <Modbus_init+0xc4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f007 fed4 	bl	800963c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000018c 	.word	0x2000018c
 80018a0:	08001799 	.word	0x08001799
 80018a4:	080017b9 	.word	0x080017b9

080018a8 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80018b0:	ed87 0a08 	vstr	s0, [r7, #32]
 80018b4:	edc7 0a07 	vstr	s1, [r7, #28]
 80018b8:	ed87 1a06 	vstr	s2, [r7, #24]
 80018bc:	edc7 1a05 	vstr	s3, [r7, #20]
 80018c0:	ed87 2a04 	vstr	s4, [r7, #16]
 80018c4:	edc7 2a03 	vstr	s5, [r7, #12]
 80018c8:	ed87 3a02 	vstr	s6, [r7, #8]
 80018cc:	edc7 3a01 	vstr	s7, [r7, #4]
 80018d0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	2210      	movs	r2, #16
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f00c f8ae 	bl	800da74 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	3310      	adds	r3, #16
 800191c:	2240      	movs	r2, #64	@ 0x40
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f00c f8a7 	bl	800da74 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800192a:	e00c      	b.n	8001946 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 800192c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001936:	3304      	adds	r3, #4
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	4a79      	ldr	r2, [pc, #484]	@ (8001b24 <MotorKalman_Init+0x27c>)
 800193e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001942:	3301      	adds	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001948:	2b03      	cmp	r3, #3
 800194a:	ddef      	ble.n	800192c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00c f88c 	bl	800da74 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001960:	e00d      	b.n	800197e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	33be      	adds	r3, #190	@ 0xbe
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001976:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	3301      	adds	r3, #1
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	2b03      	cmp	r3, #3
 8001982:	ddee      	ble.n	8001962 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	33f0      	adds	r3, #240	@ 0xf0
 8001988:	2210      	movs	r2, #16
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00c f871 	bl	800da74 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001998:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019a2:	2210      	movs	r2, #16
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00c f864 	bl	800da74 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019b2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80019b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80019ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019bc:	f000 f922 	bl	8001c04 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80019c0:	ed97 0a00 	vldr	s0, [r7]
 80019c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019c6:	f000 f94d 	bl	8001c64 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	2201      	movs	r2, #1
 80019d4:	2104      	movs	r1, #4
 80019d6:	f00b fadc 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3310      	adds	r3, #16
 80019e4:	2204      	movs	r2, #4
 80019e6:	2104      	movs	r1, #4
 80019e8:	f00b fad3 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80019f8:	2204      	movs	r2, #4
 80019fa:	2104      	movs	r1, #4
 80019fc:	f00b fac9 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	f00b fabf 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001a20:	2201      	movs	r2, #1
 8001a22:	2101      	movs	r1, #1
 8001a24:	f00b fab5 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001a34:	2201      	movs	r2, #1
 8001a36:	2101      	movs	r1, #1
 8001a38:	f00b faab 	bl	800cf92 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001a48:	2204      	movs	r2, #4
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	f00b faa1 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2104      	movs	r1, #4
 8001a60:	f00b fa97 	bl	800cf92 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a70:	2201      	movs	r2, #1
 8001a72:	2104      	movs	r1, #4
 8001a74:	f00b fa8d 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8001a84:	2204      	movs	r2, #4
 8001a86:	2104      	movs	r1, #4
 8001a88:	f00b fa83 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8001a98:	2204      	movs	r2, #4
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	f00b fa79 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001aac:	2201      	movs	r2, #1
 8001aae:	2101      	movs	r1, #1
 8001ab0:	f00b fa6f 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	f00b fa65 	bl	800cf92 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8001ac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001aca:	f000 f82d 	bl	8001b28 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	3390      	adds	r3, #144	@ 0x90
 8001ad8:	2204      	movs	r2, #4
 8001ada:	2104      	movs	r1, #4
 8001adc:	f00b fa59 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	33e0      	adds	r3, #224	@ 0xe0
 8001aea:	2201      	movs	r2, #1
 8001aec:	2104      	movs	r1, #4
 8001aee:	f00b fa50 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001afe:	2204      	movs	r2, #4
 8001b00:	2104      	movs	r1, #4
 8001b02:	f00b fa46 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001b12:	2201      	movs	r2, #1
 8001b14:	2104      	movs	r1, #4
 8001b16:	f00b fa3c 	bl	800cf92 <arm_mat_init_f32>
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	@ 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	42c80000 	.word	0x42c80000

08001b28 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	eeb0 3a64 	vmov.f32	s6, s9
 8001b6c:	eef0 2a45 	vmov.f32	s5, s10
 8001b70:	eeb0 2a65 	vmov.f32	s4, s11
 8001b74:	eef0 1a46 	vmov.f32	s3, s12
 8001b78:	eeb0 1a66 	vmov.f32	s2, s13
 8001b7c:	eef0 0a47 	vmov.f32	s1, s14
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	f000 fb26 	bl	80021d4 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b8e:	2240      	movs	r2, #64	@ 0x40
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00b ff6e 	bl	800da74 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001b9e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bfc <MotorKalman_DiscretizeModel+0xd4>
 8001ba2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bd2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c00 <MotorKalman_DiscretizeModel+0xd8>
 8001bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001be6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001bfc <MotorKalman_DiscretizeModel+0xd4>
 8001bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	3c23d70a 	.word	0x3c23d70a
 8001c00:	3dcccccd 	.word	0x3dcccccd

08001c04 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001c16:	2240      	movs	r2, #64	@ 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00b ff2a 	bl	800da74 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001c20:	edd7 7a00 	vldr	s15, [r7]
 8001c24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001c3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d107      	bne.n	8001c56 <MotorKalman_SetProcessNoise+0x52>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001c4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	d002      	beq.n	8001c5c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff66 	bl	8001b28 <MotorKalman_DiscretizeModel>
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001c70:	ed97 0a00 	vldr	s0, [r7]
 8001c74:	f00b ffba 	bl	800dbec <sqrtf>
 8001c78:	eef0 7a40 	vmov.f32	s15, s0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e00c      	b.n	8001cbe <matrix_copy+0x2c>
        dst[i] = src[i];
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	441a      	add	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbee      	blt.n	8001ca4 <matrix_copy+0x12>
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8001ce0:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8001ce4:	6020      	str	r0, [r4, #0]
 8001ce6:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001cea:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8001cee:	6001      	str	r1, [r0, #0]
 8001cf0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001cf4:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8001cf8:	ed81 0a00 	vstr	s0, [r1]
 8001cfc:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001d00:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8001d04:	600a      	str	r2, [r1, #0]
 8001d06:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8001d0a:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8001d0e:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8001d10:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d14:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001d18:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	2104      	movs	r1, #4
 8001d22:	f00b f936 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8001d26:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d2a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001d2e:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2204      	movs	r2, #4
 8001d36:	2104      	movs	r1, #4
 8001d38:	f00b f92b 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8001d3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d40:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001d44:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	f00b f920 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8001d52:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d56:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001d5a:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	2104      	movs	r1, #4
 8001d64:	f00b f915 	bl	800cf92 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8001d68:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001d6c:	2240      	movs	r2, #64	@ 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00b fe7f 	bl	800da74 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8001d76:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001d7a:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001d7e:	2204      	movs	r2, #4
 8001d80:	2104      	movs	r1, #4
 8001d82:	f00b f906 	bl	800cf92 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001d8c:	e011      	b.n	8001db2 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8001d8e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8001d9e:	443b      	add	r3, r7
 8001da0:	3b6c      	subs	r3, #108	@ 0x6c
 8001da2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001da6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001da8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001dac:	3301      	adds	r3, #1
 8001dae:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001db2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	dde9      	ble.n	8001d8e <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8001dba:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001dbe:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	f00b f8e4 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8001dca:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001dce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001dd2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001dd6:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001dda:	ed93 0a00 	vldr	s0, [r3]
 8001dde:	4610      	mov	r0, r2
 8001de0:	f00b fce0 	bl	800d7a4 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8001de4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001de8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001dec:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8001df0:	2210      	movs	r2, #16
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	f7ff ff4d 	bl	8001c92 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8001df8:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001dfc:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8001e00:	2204      	movs	r2, #4
 8001e02:	2104      	movs	r1, #4
 8001e04:	f00b f8c5 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8001e08:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001e0c:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001e10:	2204      	movs	r2, #4
 8001e12:	2104      	movs	r1, #4
 8001e14:	f00b f8bd 	bl	800cf92 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8001e18:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001e1c:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001e20:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00b f879 	bl	800cf1c <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8001e2a:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001e2e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001e32:	2210      	movs	r2, #16
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff2c 	bl	8001c92 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8001e3a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e3e:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001e48:	e03a      	b.n	8001ec0 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8001e4a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8001e62:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001e66:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001e6a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f00b fc1e 	bl	800d6b0 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8001e74:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001e78:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff07 	bl	8001c92 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8001e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e88:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8001e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e90:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001e94:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001e98:	4611      	mov	r1, r2
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00b fc80 	bl	800d7a4 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8001ea4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001ea8:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001eac:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00b f833 	bl	800cf1c <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001eb6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001ec0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001ec4:	2b0a      	cmp	r3, #10
 8001ec6:	ddc0      	ble.n	8001e4a <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8001ec8:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001ecc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ed0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ed4:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8001ed8:	ed93 0a00 	vldr	s0, [r3]
 8001edc:	4610      	mov	r0, r2
 8001ede:	f00b fc61 	bl	800d7a4 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8001ee2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ee6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001eea:	461a      	mov	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	6053      	str	r3, [r2, #4]
 8001ef2:	6093      	str	r3, [r2, #8]
 8001ef4:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8001ef6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001efa:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001efe:	2201      	movs	r2, #1
 8001f00:	2104      	movs	r1, #4
 8001f02:	f00b f846 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8001f06:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8001f0a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001f0e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00b fbcc 	bl	800d6b0 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8001f18:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001f1c:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001f20:	2201      	movs	r2, #1
 8001f22:	2104      	movs	r1, #4
 8001f24:	f00b f835 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8001f28:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f2c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f40:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001f44:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001f48:	4611      	mov	r1, r2
 8001f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00b fc28 	bl	800d7a4 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001f54:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001f58:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001f5c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00a ffdb 	bl	800cf1c <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8001f66:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f6e:	4618      	mov	r0, r3
 8001f70:	2340      	movs	r3, #64	@ 0x40
 8001f72:	461a      	mov	r2, r3
 8001f74:	2100      	movs	r1, #0
 8001f76:	f00b fd7d 	bl	800da74 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8001f7a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001f7e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001f82:	2204      	movs	r2, #4
 8001f84:	2104      	movs	r1, #4
 8001f86:	f00b f804 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8001f8a:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001f8e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001f92:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00b fb8a 	bl	800d6b0 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8001f9c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fa0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	6053      	str	r3, [r2, #4]
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8001fb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fb4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2104      	movs	r1, #4
 8001fbc:	f00a ffe9 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8001fc0:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001fc4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001fc8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00b fb6f 	bl	800d6b0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8001fd2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fd6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fe2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fe6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001ff6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ffa:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001ffe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002002:	4611      	mov	r1, r2
 8002004:	eeb0 0a47 	vmov.f32	s0, s14
 8002008:	4618      	mov	r0, r3
 800200a:	f00b fbcb 	bl	800d7a4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800200e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002012:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002016:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800201a:	4618      	mov	r0, r3
 800201c:	f00a ff7e 	bl	800cf1c <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002020:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002024:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002028:	4618      	mov	r0, r3
 800202a:	2340      	movs	r3, #64	@ 0x40
 800202c:	461a      	mov	r2, r3
 800202e:	2100      	movs	r1, #0
 8002030:	f00b fd20 	bl	800da74 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002034:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002038:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 800203c:	2204      	movs	r2, #4
 800203e:	2104      	movs	r1, #4
 8002040:	f00a ffa7 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002044:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002048:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800204c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002050:	4618      	mov	r0, r3
 8002052:	f00b fb2d 	bl	800d6b0 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002056:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800205a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800205e:	461a      	mov	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	6053      	str	r3, [r2, #4]
 8002066:	6093      	str	r3, [r2, #8]
 8002068:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800206a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800206e:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002072:	2201      	movs	r2, #1
 8002074:	2104      	movs	r1, #4
 8002076:	f00a ff8c 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800207a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800207e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002082:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002086:	4618      	mov	r0, r3
 8002088:	f00b fb12 	bl	800d6b0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 800208c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002090:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800209c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020a0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020b0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80020c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020c4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80020c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80020cc:	4611      	mov	r1, r2
 80020ce:	eeb0 0a47 	vmov.f32	s0, s14
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00b fb66 	bl	800d7a4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80020d8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80020dc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80020e0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00a ff19 	bl	800cf1c <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80020ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020ee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80020f2:	4618      	mov	r0, r3
 80020f4:	2340      	movs	r3, #64	@ 0x40
 80020f6:	461a      	mov	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f00b fcbb 	bl	800da74 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80020fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002102:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002106:	2204      	movs	r2, #4
 8002108:	2104      	movs	r1, #4
 800210a:	f00a ff42 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 800210e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002112:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002116:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800211a:	4618      	mov	r0, r3
 800211c:	f00b fac8 	bl	800d6b0 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002120:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002124:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002128:	461a      	mov	r2, r3
 800212a:	2300      	movs	r3, #0
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	6053      	str	r3, [r2, #4]
 8002130:	6093      	str	r3, [r2, #8]
 8002132:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002138:	f107 001c 	add.w	r0, r7, #28
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	f00a ff27 	bl	800cf92 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002144:	f107 021c 	add.w	r2, r7, #28
 8002148:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800214c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002150:	4618      	mov	r0, r3
 8002152:	f00b faad 	bl	800d6b0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002156:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800215a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002166:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800216a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800217a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800218a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80021d0 <discretize_system_with_arm+0x4fc>
 800219a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800219e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4611      	mov	r1, r2
 80021a8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00b faf9 	bl	800d7a4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80021b2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80021b6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80021ba:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a feac 	bl	800cf1c <arm_mat_add_f32>
}
 80021c4:	bf00      	nop
 80021c6:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	42f00000 	.word	0x42f00000

080021d4 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09e      	sub	sp, #120	@ 0x78
 80021d8:	af00      	add	r7, sp, #0
 80021da:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80021de:	edc7 0a08 	vstr	s1, [r7, #32]
 80021e2:	ed87 1a07 	vstr	s2, [r7, #28]
 80021e6:	edc7 1a06 	vstr	s3, [r7, #24]
 80021ea:	ed87 2a05 	vstr	s4, [r7, #20]
 80021ee:	edc7 2a04 	vstr	s5, [r7, #16]
 80021f2:	ed87 3a03 	vstr	s6, [r7, #12]
 80021f6:	60b8      	str	r0, [r7, #8]
 80021f8:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80021fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f00b fc36 	bl	800da74 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002208:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002216:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 800221c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002220:	eef1 6a67 	vneg.f32	s13, s15
 8002224:	ed97 7a07 	vldr	s14, [r7, #28]
 8002228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002230:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002234:	ed97 7a07 	vldr	s14, [r7, #28]
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002240:	edd7 6a04 	vldr	s13, [r7, #16]
 8002244:	ed97 7a07 	vldr	s14, [r7, #28]
 8002248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002250:	edd7 7a05 	vldr	s15, [r7, #20]
 8002254:	eef1 6a67 	vneg.f32	s13, s15
 8002258:	ed97 7a08 	vldr	s14, [r7, #32]
 800225c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002260:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002264:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002268:	eef1 6a67 	vneg.f32	s13, s15
 800226c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002284:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002288:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800228c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	ed97 0a03 	vldr	s0, [r7, #12]
 8002298:	f7ff fd1c 	bl	8001cd4 <discretize_system_with_arm>
}
 800229c:	bf00      	nop
 800229e:	3778      	adds	r7, #120	@ 0x78
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <PWM_init+0x40>)
 80022b6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80022ca:	68b8      	ldr	r0, [r7, #8]
 80022cc:	f006 fef0 	bl	80090b0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4619      	mov	r1, r3
 80022d4:	68b8      	ldr	r0, [r7, #8]
 80022d6:	f007 f837 	bl	8009348 <HAL_TIM_PWM_Start>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0a21fe80 	.word	0x0a21fe80

080022e8 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80022f4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80022f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	d137      	bne.n	8002376 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	889b      	ldrh	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <PWM_write_range+0x32>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002318:	e0e1      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	889b      	ldrh	r3, [r3, #4]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d105      	bne.n	800232e <PWM_write_range+0x46>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	6393      	str	r3, [r2, #56]	@ 0x38
 800232c:	e0d7      	b.n	80024de <PWM_write_range+0x1f6>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	2b08      	cmp	r3, #8
 8002334:	d105      	bne.n	8002342 <PWM_write_range+0x5a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002340:	e0cd      	b.n	80024de <PWM_write_range+0x1f6>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	889b      	ldrh	r3, [r3, #4]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d105      	bne.n	8002356 <PWM_write_range+0x6e>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	6413      	str	r3, [r2, #64]	@ 0x40
 8002354:	e0c3      	b.n	80024de <PWM_write_range+0x1f6>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d105      	bne.n	800236a <PWM_write_range+0x82>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	6493      	str	r3, [r2, #72]	@ 0x48
 8002368:	e0b9      	b.n	80024de <PWM_write_range+0x1f6>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002374:	e0b3      	b.n	80024de <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002382:	ed97 7a02 	vldr	s14, [r7, #8]
 8002386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238e:	ee17 2a90 	vmov	r2, s15
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800239e:	33fe      	adds	r3, #254	@ 0xfe
 80023a0:	4a53      	ldr	r2, [pc, #332]	@ (80024f0 <PWM_write_range+0x208>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0bdb      	lsrs	r3, r3, #15
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	899b      	ldrh	r3, [r3, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80023d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e4:	ee17 3a90 	vmov	r3, s15
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	89db      	ldrh	r3, [r3, #14]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f862 	bl	80004bc <__aeabi_i2d>
 80023f8:	4604      	mov	r4, r0
 80023fa:	460d      	mov	r5, r1
 80023fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002400:	eef0 7ae7 	vabs.f32	s15, s15
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f86a 	bl	80004e0 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f8bc 	bl	8000590 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	a331      	add	r3, pc, #196	@ (adr r3, 80024e8 <PWM_write_range+0x200>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe f9dd 	bl	80007e4 <__aeabi_ddiv>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fae7 	bl	8000a04 <__aeabi_d2uiz>
 8002436:	4603      	mov	r3, r0
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	899a      	ldrh	r2, [r3, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	89da      	ldrh	r2, [r3, #14]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	89da      	ldrh	r2, [r3, #14]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <PWM_write_range+0x190>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6952      	ldr	r2, [r2, #20]
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002476:	e032      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d106      	bne.n	800248e <PWM_write_range+0x1a6>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800248c:	e027      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	889b      	ldrh	r3, [r3, #4]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d106      	bne.n	80024a4 <PWM_write_range+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80024a2:	e01c      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d106      	bne.n	80024ba <PWM_write_range+0x1d2>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80024b8:	e011      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	889b      	ldrh	r3, [r3, #4]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d106      	bne.n	80024d0 <PWM_write_range+0x1e8>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80024ce:	e006      	b.n	80024de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80024dc:	e7ff      	b.n	80024de <PWM_write_range+0x1f6>
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00000000 	.word	0x00000000
 80024ec:	40efffe0 	.word	0x40efffe0
 80024f0:	80008001 	.word	0x80008001

080024f4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6178      	str	r0, [r7, #20]
 80024fc:	6139      	str	r1, [r7, #16]
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	ed87 0a01 	vstr	s0, [r7, #4]
 8002506:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8002554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	fb93 f2f2 	sdiv	r2, r3, r2
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	fb01 f202 	mul.w	r2, r1, r2
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80025c2:	213c      	movs	r1, #60	@ 0x3c
 80025c4:	6938      	ldr	r0, [r7, #16]
 80025c6:	f007 f97b 	bl	80098c0 <HAL_TIM_Encoder_Start>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	0000      	movs	r0, r0
 80025d4:	0000      	movs	r0, r0
	...

080025d8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80025d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	0fda      	lsrs	r2, r3, #31
 8002600:	4413      	add	r3, r2
 8002602:	105b      	asrs	r3, r3, #1
 8002604:	461a      	mov	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4293      	cmp	r3, r2
 800260a:	dd05      	ble.n	8002618 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e00e      	b.n	8002636 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	0fda      	lsrs	r2, r3, #31
 800261e:	4413      	add	r3, r2
 8002620:	105b      	asrs	r3, r3, #1
 8002622:	425b      	negs	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4293      	cmp	r3, r2
 800262a:	da04      	bge.n	8002636 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002668:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff2b 	bl	80004e0 <__aeabi_f2d>
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026ae:	ee17 0a90 	vmov	r0, s15
 80026b2:	f7fd ff15 	bl	80004e0 <__aeabi_f2d>
 80026b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80027a8 <QEI_get_diff_count+0x1d0>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd ff68 	bl	8000590 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4690      	mov	r8, r2
 80026c6:	4699      	mov	r9, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff07 	bl	80004e0 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4640      	mov	r0, r8
 80026d8:	4649      	mov	r1, r9
 80026da:	f7fd ff59 	bl	8000590 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fd9d 	bl	8000224 <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe f9a7 	bl	8000a44 <__aeabi_d2f>
 80026f6:	4602      	mov	r2, r0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd feed 	bl	80004e0 <__aeabi_f2d>
 8002706:	4604      	mov	r4, r0
 8002708:	460d      	mov	r5, r1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002726:	ee16 0a90 	vmov	r0, s13
 800272a:	f7fd fed9 	bl	80004e0 <__aeabi_f2d>
 800272e:	a31e      	add	r3, pc, #120	@ (adr r3, 80027a8 <QEI_get_diff_count+0x1d0>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd ff2c 	bl	8000590 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4690      	mov	r8, r2
 800273e:	4699      	mov	r9, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fecb 	bl	80004e0 <__aeabi_f2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4640      	mov	r0, r8
 8002750:	4649      	mov	r1, r9
 8002752:	f7fd ff1d 	bl	8000590 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd febc 	bl	80004e0 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	f7fd ff0e 	bl	8000590 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd52 	bl	8000224 <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe f95c 	bl	8000a44 <__aeabi_d2f>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027a4:	f3af 8000 	nop.w
 80027a8:	54442d18 	.word	0x54442d18
 80027ac:	400921fb 	.word	0x400921fb

080027b0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe82 	bl	80004e0 <__aeabi_f2d>
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b83      	ldr	r3, [pc, #524]	@ (80029f0 <QEI_compute_data+0x240>)
 80027e2:	f7fd fed5 	bl	8000590 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fa:	ee17 0a90 	vmov	r0, s15
 80027fe:	f7fd fe6f 	bl	80004e0 <__aeabi_f2d>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd ffeb 	bl	80007e4 <__aeabi_ddiv>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4614      	mov	r4, r2
 8002814:	461d      	mov	r5, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe60 	bl	80004e0 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd feb2 	bl	8000590 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f906 	bl	8000a44 <__aeabi_d2f>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002848:	ee17 0a90 	vmov	r0, s15
 800284c:	f7fd fe48 	bl	80004e0 <__aeabi_f2d>
 8002850:	a365      	add	r3, pc, #404	@ (adr r3, 80029e8 <QEI_compute_data+0x238>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fe9b 	bl	8000590 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4614      	mov	r4, r2
 8002860:	461d      	mov	r5, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ee17 0a90 	vmov	r0, s15
 8002872:	f7fd fe35 	bl	80004e0 <__aeabi_f2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd ffb1 	bl	80007e4 <__aeabi_ddiv>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4614      	mov	r4, r2
 8002888:	461d      	mov	r5, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe26 	bl	80004e0 <__aeabi_f2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4620      	mov	r0, r4
 800289a:	4629      	mov	r1, r5
 800289c:	f7fd fe78 	bl	8000590 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f8cc 	bl	8000a44 <__aeabi_d2f>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe12 	bl	80004e0 <__aeabi_f2d>
 80028bc:	a34a      	add	r3, pc, #296	@ (adr r3, 80029e8 <QEI_compute_data+0x238>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe65 	bl	8000590 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4614      	mov	r4, r2
 80028cc:	461d      	mov	r5, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe04 	bl	80004e0 <__aeabi_f2d>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4620      	mov	r0, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	f7fd fe56 	bl	8000590 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	ee17 0a90 	vmov	r0, s15
 80028fc:	f7fd fdf0 	bl	80004e0 <__aeabi_f2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4620      	mov	r0, r4
 8002906:	4629      	mov	r1, r5
 8002908:	f7fd ff6c 	bl	80007e4 <__aeabi_ddiv>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fde1 	bl	80004e0 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd fe33 	bl	8000590 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f887 	bl	8000a44 <__aeabi_d2f>
 8002936:	4602      	mov	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a03 	vldr	s15, [r3, #12]
 8002958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8002960:	edd7 7a03 	vldr	s15, [r7, #12]
 8002964:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d00a      	beq.n	8002984 <QEI_compute_data+0x1d4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800297a:	edd7 7a03 	vldr	s15, [r7, #12]
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	e001      	b.n	8002988 <QEI_compute_data+0x1d8>
 8002984:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80029f4 <QEI_compute_data+0x244>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	ed93 7a04 	vldr	s14, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	edd3 7a05 	vldr	s15, [r3, #20]
 800299a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80029a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	d00a      	beq.n	80029c6 <QEI_compute_data+0x216>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c4:	e001      	b.n	80029ca <QEI_compute_data+0x21a>
 80029c6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80029f4 <QEI_compute_data+0x244>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	615a      	str	r2, [r3, #20]
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	54442d18 	.word	0x54442d18
 80029ec:	400921fb 	.word	0x400921fb
 80029f0:	404e0000 	.word	0x404e0000
 80029f4:	00000000 	.word	0x00000000

080029f8 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a02:	4603      	mov	r3, r0
 8002a04:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	2b1a      	cmp	r3, #26
 8002a0a:	d018      	beq.n	8002a3e <temperature_to_base+0x46>
 8002a0c:	2b1a      	cmp	r3, #26
 8002a0e:	dc1d      	bgt.n	8002a4c <temperature_to_base+0x54>
 8002a10:	2b18      	cmp	r3, #24
 8002a12:	d002      	beq.n	8002a1a <temperature_to_base+0x22>
 8002a14:	2b19      	cmp	r3, #25
 8002a16:	d003      	beq.n	8002a20 <temperature_to_base+0x28>
 8002a18:	e018      	b.n	8002a4c <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8002a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a1e:	e017      	b.n	8002a50 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8002a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a24:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002a60 <temperature_to_base+0x68>
 8002a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a2c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a34:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8002a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3c:	e008      	b.n	8002a50 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8002a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a42:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a64 <temperature_to_base+0x6c>
 8002a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a4a:	e001      	b.n	8002a50 <temperature_to_base+0x58>
        default:
            return value;
 8002a4c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	42000000 	.word	0x42000000
 8002a64:	43889333 	.word	0x43889333

08002a68 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a72:	4603      	mov	r3, r0
 8002a74:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	2b1a      	cmp	r3, #26
 8002a7a:	d018      	beq.n	8002aae <temperature_from_base+0x46>
 8002a7c:	2b1a      	cmp	r3, #26
 8002a7e:	dc1d      	bgt.n	8002abc <temperature_from_base+0x54>
 8002a80:	2b18      	cmp	r3, #24
 8002a82:	d002      	beq.n	8002a8a <temperature_from_base+0x22>
 8002a84:	2b19      	cmp	r3, #25
 8002a86:	d003      	beq.n	8002a90 <temperature_from_base+0x28>
 8002a88:	e018      	b.n	8002abc <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8002a8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a8e:	e017      	b.n	8002ac0 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8002a90:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a94:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002ad0 <temperature_from_base+0x68>
 8002aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aac:	e008      	b.n	8002ac0 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8002aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ab2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ad4 <temperature_from_base+0x6c>
 8002ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aba:	e001      	b.n	8002ac0 <temperature_from_base+0x58>
        default:
            return value;
 8002abc:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8002ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	42000000 	.word	0x42000000
 8002ad4:	43889333 	.word	0x43889333

08002ad8 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e00a      	b.n	8002b08 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b1a      	cmp	r3, #26
 8002b0c:	ddf1      	ble.n	8002af2 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <init_length_converter+0x80>)
 8002b12:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <init_length_converter+0x84>)
 8002b18:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b20:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	@ (8002b60 <init_length_converter+0x88>)
 8002b26:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b64 <init_length_converter+0x8c>)
 8002b2c:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	@ (8002b68 <init_length_converter+0x90>)
 8002b32:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <init_length_converter+0x94>)
 8002b38:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <init_length_converter+0x98>)
 8002b3e:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	3a83126f 	.word	0x3a83126f
 8002b5c:	3c23d70a 	.word	0x3c23d70a
 8002b60:	447a0000 	.word	0x447a0000
 8002b64:	3cd013a9 	.word	0x3cd013a9
 8002b68:	3e9c0ebf 	.word	0x3e9c0ebf
 8002b6c:	3f6a161e 	.word	0x3f6a161e
 8002b70:	44c92b02 	.word	0x44c92b02

08002b74 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	220a      	movs	r2, #10
 8002b86:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e00a      	b.n	8002ba4 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b1a      	cmp	r3, #26
 8002ba8:	ddf1      	ble.n	8002b8e <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0e      	ldr	r2, [pc, #56]	@ (8002be8 <init_mass_converter+0x74>)
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <init_mass_converter+0x78>)
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <init_mass_converter+0x7c>)
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <init_mass_converter+0x80>)
 8002bc8:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <init_mass_converter+0x84>)
 8002bce:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	358637bd 	.word	0x358637bd
 8002bec:	3a83126f 	.word	0x3a83126f
 8002bf0:	447a0000 	.word	0x447a0000
 8002bf4:	3ce83d36 	.word	0x3ce83d36
 8002bf8:	3ee83d36 	.word	0x3ee83d36

08002bfc <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e00a      	b.n	8002c2c <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b1a      	cmp	r3, #26
 8002c30:	ddf1      	ble.n	8002c16 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <init_angle_converter+0x64>)
 8002c36:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <init_angle_converter+0x68>)
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	3c8efa35 	.word	0x3c8efa35
 8002c64:	3c80adfd 	.word	0x3c80adfd

08002c68 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2214      	movs	r2, #20
 8002c7a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e00a      	b.n	8002c98 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b1a      	cmp	r3, #26
 8002c9c:	ddf1      	ble.n	8002c82 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a10      	ldr	r2, [pc, #64]	@ (8002ce4 <init_time_converter+0x7c>)
 8002ca2:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <init_time_converter+0x80>)
 8002ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a0f      	ldr	r2, [pc, #60]	@ (8002cec <init_time_converter+0x84>)
 8002cae:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <init_time_converter+0x88>)
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <init_time_converter+0x8c>)
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <init_time_converter+0x90>)
 8002cc8:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	3089705f 	.word	0x3089705f
 8002ce8:	358637bd 	.word	0x358637bd
 8002cec:	3a83126f 	.word	0x3a83126f
 8002cf0:	42700000 	.word	0x42700000
 8002cf4:	45610000 	.word	0x45610000
 8002cf8:	47a8c000 	.word	0x47a8c000

08002cfc <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e00a      	b.n	8002d2c <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b1a      	cmp	r3, #26
 8002d30:	ddf1      	ble.n	8002d16 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <init_temperature_converter+0x50>)
 8002d36:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a05      	ldr	r2, [pc, #20]	@ (8002d50 <init_temperature_converter+0x54>)
 8002d3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	080029f9 	.word	0x080029f9
 8002d50:	08002a69 	.word	0x08002a69

08002d54 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff feba 	bl	8002ad8 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3378      	adds	r3, #120	@ 0x78
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff03 	bl	8002b74 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	33f0      	adds	r3, #240	@ 0xf0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff42 	bl	8002bfc <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff72 	bl	8002c68 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ffb6 	bl	8002cfc <init_temperature_converter>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	@ 0x30
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2220      	movs	r2, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f00a fe5f 	bl	800da74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002db6:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002db8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002dbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dc0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dc6:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dcc:	4b33      	ldr	r3, [pc, #204]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002dd2:	4b32      	ldr	r3, [pc, #200]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dde:	4b2f      	ldr	r3, [pc, #188]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002de0:	2204      	movs	r2, #4
 8002de2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002dea:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002df0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002df2:	2202      	movs	r2, #2
 8002df4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002df6:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dfe:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e04:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e0a:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e12:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e20:	481e      	ldr	r0, [pc, #120]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e22:	f003 f865 	bl	8005ef0 <HAL_ADC_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002e2c:	f000 fee6 	bl	8003bfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4818      	ldr	r0, [pc, #96]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e3c:	f004 f984 	bl	8007148 <HAL_ADCEx_MultiModeConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e46:	f000 fed9 	bl	8003bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <MX_ADC1_Init+0x108>)
 8002e4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e4e:	2306      	movs	r3, #6
 8002e50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002e52:	2307      	movs	r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e56:	237f      	movs	r3, #127	@ 0x7f
 8002e58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	480d      	ldr	r0, [pc, #52]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e68:	f003 faf0 	bl	800644c <HAL_ADC_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002e72:	f000 fec3 	bl	8003bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <MX_ADC1_Init+0x10c>)
 8002e78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	@ (8002e9c <MX_ADC1_Init+0x104>)
 8002e84:	f003 fae2 	bl	800644c <HAL_ADC_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002e8e:	f000 feb5 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3730      	adds	r7, #48	@ 0x30
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000190 	.word	0x20000190
 8002ea0:	19200040 	.word	0x19200040
 8002ea4:	1d500080 	.word	0x1d500080

08002ea8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b09e      	sub	sp, #120	@ 0x78
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	2254      	movs	r2, #84	@ 0x54
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00a fdd3 	bl	800da74 <memset>
  if(adcHandle->Instance==ADC1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed6:	d15e      	bne.n	8002f96 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002edc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002ede:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fe2f 	bl	8008b4c <HAL_RCCEx_PeriphCLKConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002ef4:	f000 fe82 	bl	8003bfc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ef8:	4b29      	ldr	r3, [pc, #164]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efc:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002efe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f14:	4a22      	ldr	r2, [pc, #136]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_ADC_MspInit+0xf8>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f38:	4619      	mov	r1, r3
 8002f3a:	481a      	ldr	r0, [pc, #104]	@ (8002fa4 <HAL_ADC_MspInit+0xfc>)
 8002f3c:	f004 fe4e 	bl	8007bdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f42:	4a1a      	ldr	r2, [pc, #104]	@ (8002fac <HAL_ADC_MspInit+0x104>)
 8002f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f46:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f48:	2205      	movs	r2, #5
 8002f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f70:	2220      	movs	r2, #32
 8002f72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f7a:	480b      	ldr	r0, [pc, #44]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f7c:	f004 fafc 	bl	8007578 <HAL_DMA_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002f86:	f000 fe39 	bl	8003bfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f90:	4a05      	ldr	r2, [pc, #20]	@ (8002fa8 <HAL_ADC_MspInit+0x100>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002f96:	bf00      	nop
 8002f98:	3778      	adds	r7, #120	@ 0x78
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	200001fc 	.word	0x200001fc
 8002fac:	40020008 	.word	0x40020008

08002fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002fb6:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fba:	4a21      	ldr	r2, [pc, #132]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fce:	4b1c      	ldr	r3, [pc, #112]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002fda:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <MX_DMA_Init+0x90>)
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	200b      	movs	r0, #11
 8002fec:	f004 fa8f 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ff0:	200b      	movs	r0, #11
 8002ff2:	f004 faa6 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	200c      	movs	r0, #12
 8002ffc:	f004 fa87 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003000:	200c      	movs	r0, #12
 8003002:	f004 fa9e 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	200d      	movs	r0, #13
 800300c:	f004 fa7f 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003010:	200d      	movs	r0, #13
 8003012:	f004 fa96 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	200e      	movs	r0, #14
 800301c:	f004 fa77 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003020:	200e      	movs	r0, #14
 8003022:	f004 fa8e 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	200f      	movs	r0, #15
 800302c:	f004 fa6f 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003030:	200f      	movs	r0, #15
 8003032:	f004 fa86 	bl	8007542 <HAL_NVIC_EnableIRQ>

}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305a:	4b67      	ldr	r3, [pc, #412]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 800305c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305e:	4a66      	ldr	r2, [pc, #408]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003066:	4b64      	ldr	r3, [pc, #400]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003072:	4b61      	ldr	r3, [pc, #388]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003076:	4a60      	ldr	r2, [pc, #384]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800307e:	4b5e      	ldr	r3, [pc, #376]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	4b5b      	ldr	r3, [pc, #364]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	4a5a      	ldr	r2, [pc, #360]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003096:	4b58      	ldr	r3, [pc, #352]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	4b55      	ldr	r3, [pc, #340]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	4a54      	ldr	r2, [pc, #336]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ae:	4b52      	ldr	r3, [pc, #328]	@ (80031f8 <MX_GPIO_Init+0x1b4>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80030c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c4:	f004 ff24 	bl	8007f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ce:	484b      	ldr	r0, [pc, #300]	@ (80031fc <MX_GPIO_Init+0x1b8>)
 80030d0:	f004 ff1e 	bl	8007f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|J3_Pin|J4_Pin;
 80030d4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80030d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4844      	ldr	r0, [pc, #272]	@ (80031fc <MX_GPIO_Init+0x1b8>)
 80030ec:	f004 fd76 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80030f0:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2301      	movs	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800310c:	f004 fd66 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|J1_Pin;
 8003110:	f241 0381 	movw	r3, #4225	@ 0x1081
 8003114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003116:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800311a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	4836      	ldr	r0, [pc, #216]	@ (8003200 <MX_GPIO_Init+0x1bc>)
 8003128:	f004 fd58 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 800312c:	2306      	movs	r3, #6
 800312e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003134:	2302      	movs	r3, #2
 8003136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	4830      	ldr	r0, [pc, #192]	@ (8003200 <MX_GPIO_Init+0x1bc>)
 8003140:	f004 fd4c 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314a:	2301      	movs	r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	4827      	ldr	r0, [pc, #156]	@ (80031fc <MX_GPIO_Init+0x1b8>)
 800315e:	f004 fd3d 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8003162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	4821      	ldr	r0, [pc, #132]	@ (80031fc <MX_GPIO_Init+0x1b8>)
 8003178:	f004 fd30 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 800317c:	2310      	movs	r3, #16
 800317e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003180:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	481b      	ldr	r0, [pc, #108]	@ (8003200 <MX_GPIO_Init+0x1bc>)
 8003192:	f004 fd23 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8003196:	2340      	movs	r3, #64	@ 0x40
 8003198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800319a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4815      	ldr	r0, [pc, #84]	@ (8003200 <MX_GPIO_Init+0x1bc>)
 80031ac:	f004 fd16 	bl	8007bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	2006      	movs	r0, #6
 80031b6:	f004 f9aa 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031ba:	2006      	movs	r0, #6
 80031bc:	f004 f9c1 	bl	8007542 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	200a      	movs	r0, #10
 80031c6:	f004 f9a2 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031ca:	200a      	movs	r0, #10
 80031cc:	f004 f9b9 	bl	8007542 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	2017      	movs	r0, #23
 80031d6:	f004 f99a 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031da:	2017      	movs	r0, #23
 80031dc:	f004 f9b1 	bl	8007542 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	2028      	movs	r0, #40	@ 0x28
 80031e6:	f004 f992 	bl	800750e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031ea:	2028      	movs	r0, #40	@ 0x28
 80031ec:	f004 f9a9 	bl	8007542 <HAL_NVIC_EnableIRQ>

}
 80031f0:	bf00      	nop
 80031f2:	3728      	adds	r7, #40	@ 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	48000800 	.word	0x48000800
 8003200:	48000400 	.word	0x48000400

08003204 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003204:	b580      	push	{r7, lr}
 8003206:	b096      	sub	sp, #88	@ 0x58
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003210:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2201      	movs	r2, #1
 800321e:	2101      	movs	r1, #1
 8003220:	f009 feb7 	bl	800cf92 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f00a fb27 	bl	800d886 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f00a fb1d 	bl	800d886 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f00a fb13 	bl	800d886 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800326c:	4619      	mov	r1, r3
 800326e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003272:	4610      	mov	r0, r2
 8003274:	f00a fa96 	bl	800d7a4 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800328a:	461a      	mov	r2, r3
 800328c:	f00a fa10 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80032a2:	461a      	mov	r2, r3
 80032a4:	f009 fe3a 	bl	800cf1c <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80032ba:	461a      	mov	r2, r3
 80032bc:	f00a f9f8 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80032d2:	461a      	mov	r2, r3
 80032d4:	f00a f9ec 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80032ea:	461a      	mov	r2, r3
 80032ec:	f00a f9e0 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003302:	4619      	mov	r1, r3
 8003304:	eeb0 0a67 	vmov.f32	s0, s15
 8003308:	4610      	mov	r0, r2
 800330a:	f00a fa4b 	bl	800d7a4 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003320:	461a      	mov	r2, r3
 8003322:	f009 fdfb 	bl	800cf1c <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003338:	461a      	mov	r2, r3
 800333a:	f00a f9b9 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003350:	461a      	mov	r2, r3
 8003352:	f00a f9ad 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8003368:	461a      	mov	r2, r3
 800336a:	f009 fdd7 	bl	800cf1c <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f009 fe20 	bl	800cfc2 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8003394:	461a      	mov	r2, r3
 8003396:	f00a f98b 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80033ac:	461a      	mov	r2, r3
 80033ae:	f00a f97f 	bl	800d6b0 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80033c4:	461a      	mov	r2, r3
 80033c6:	f00a f973 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80033dc:	461a      	mov	r2, r3
 80033de:	f00a fa17 	bl	800d810 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80033f4:	461a      	mov	r2, r3
 80033f6:	f00a f95b 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800340c:	461a      	mov	r2, r3
 800340e:	f009 fd85 	bl	800cf1c <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8003424:	461a      	mov	r2, r3
 8003426:	f00a f943 	bl	800d6b0 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003432:	2204      	movs	r2, #4
 8003434:	2104      	movs	r1, #4
 8003436:	f009 fdac 	bl	800cf92 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8003446:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800344a:	4619      	mov	r1, r3
 800344c:	f00a f930 	bl	800d6b0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003456:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800345a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800345e:	4618      	mov	r0, r3
 8003460:	f00a f9d6 	bl	800d810 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8003470:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003474:	4618      	mov	r0, r3
 8003476:	f00a f91b 	bl	800d6b0 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800348a:	ee07 3a90 	vmov	s15, r3
}
 800348e:	eeb0 0a67 	vmov.f32	s0, s15
 8003492:	3758      	adds	r7, #88	@ 0x58
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b0a4      	sub	sp, #144	@ 0x90
 800349c:	af00      	add	r7, sp, #0
 800349e:	6178      	str	r0, [r7, #20]
 80034a0:	6139      	str	r1, [r7, #16]
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80034a8:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80034bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80034f2:	4bc6      	ldr	r3, [pc, #792]	@ (800380c <Kalman_Start+0x374>)
 80034f4:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80034f8:	461d      	mov	r5, r3
 80034fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800350a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800350e:	f107 031c 	add.w	r3, r7, #28
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800352c:	e028      	b.n	8003580 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 800352e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	3314      	adds	r3, #20
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3390      	adds	r3, #144	@ 0x90
 8003550:	443b      	add	r3, r7
 8003552:	3b64      	subs	r3, #100	@ 0x64
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	6979      	ldr	r1, [r7, #20]
 8003558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800355c:	3398      	adds	r3, #152	@ 0x98
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356a:	3304      	adds	r3, #4
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800357a:	3301      	adds	r3, #1
 800357c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003584:	2b0f      	cmp	r3, #15
 8003586:	ddd2      	ble.n	800352e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800358e:	e03a      	b.n	8003606 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3390      	adds	r3, #144	@ 0x90
 8003598:	443b      	add	r3, r7
 800359a:	3b74      	subs	r3, #116	@ 0x74
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	6979      	ldr	r1, [r7, #20]
 80035a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80035aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	6979      	ldr	r1, [r7, #20]
 80035b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035bc:	3324      	adds	r3, #36	@ 0x24
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3390      	adds	r3, #144	@ 0x90
 80035cc:	443b      	add	r3, r7
 80035ce:	3b14      	subs	r3, #20
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d8:	3328      	adds	r3, #40	@ 0x28
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80035e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3390      	adds	r3, #144	@ 0x90
 80035e8:	443b      	add	r3, r7
 80035ea:	3b24      	subs	r3, #36	@ 0x24
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	6979      	ldr	r1, [r7, #20]
 80035f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f4:	332c      	adds	r3, #44	@ 0x2c
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80035fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003600:	3301      	adds	r3, #1
 8003602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360a:	2b03      	cmp	r3, #3
 800360c:	ddc0      	ble.n	8003590 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2201      	movs	r2, #1
 8003618:	2104      	movs	r1, #4
 800361a:	f009 fcba 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3310      	adds	r3, #16
 8003628:	2204      	movs	r2, #4
 800362a:	2104      	movs	r1, #4
 800362c:	f009 fcb1 	bl	800cf92 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3350      	adds	r3, #80	@ 0x50
 800363a:	2204      	movs	r2, #4
 800363c:	2104      	movs	r1, #4
 800363e:	f009 fca8 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3390      	adds	r3, #144	@ 0x90
 800364c:	2201      	movs	r2, #1
 800364e:	2104      	movs	r1, #4
 8003650:	f009 fc9f 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	33a0      	adds	r3, #160	@ 0xa0
 800365e:	2204      	movs	r2, #4
 8003660:	2101      	movs	r1, #1
 8003662:	f009 fc96 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	33b0      	adds	r3, #176	@ 0xb0
 8003670:	2201      	movs	r2, #1
 8003672:	2104      	movs	r1, #4
 8003674:	f009 fc8d 	bl	800cf92 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	33c8      	adds	r3, #200	@ 0xc8
 8003682:	2204      	movs	r2, #4
 8003684:	2104      	movs	r1, #4
 8003686:	f009 fc84 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003696:	2201      	movs	r2, #1
 8003698:	2104      	movs	r1, #4
 800369a:	f009 fc7a 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80036aa:	2204      	movs	r2, #4
 80036ac:	2101      	movs	r1, #1
 80036ae:	f009 fc70 	bl	800cf92 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80036be:	2204      	movs	r2, #4
 80036c0:	2104      	movs	r1, #4
 80036c2:	f009 fc66 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80036d2:	2204      	movs	r2, #4
 80036d4:	2104      	movs	r1, #4
 80036d6:	f009 fc5c 	bl	800cf92 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80036e6:	2201      	movs	r2, #1
 80036e8:	2104      	movs	r1, #4
 80036ea:	f009 fc52 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80036fa:	2201      	movs	r2, #1
 80036fc:	2104      	movs	r1, #4
 80036fe:	f009 fc48 	bl	800cf92 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800370e:	2204      	movs	r2, #4
 8003710:	2101      	movs	r1, #1
 8003712:	f009 fc3e 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003722:	2201      	movs	r2, #1
 8003724:	2101      	movs	r1, #1
 8003726:	f009 fc34 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003736:	2201      	movs	r2, #1
 8003738:	2101      	movs	r1, #1
 800373a:	f009 fc2a 	bl	800cf92 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800374a:	2201      	movs	r2, #1
 800374c:	2104      	movs	r1, #4
 800374e:	f009 fc20 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	f009 fc16 	bl	800cf92 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003772:	2201      	movs	r2, #1
 8003774:	2101      	movs	r1, #1
 8003776:	f009 fc0c 	bl	800cf92 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003786:	2201      	movs	r2, #1
 8003788:	2101      	movs	r1, #1
 800378a:	f009 fc02 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800379a:	2201      	movs	r2, #1
 800379c:	2101      	movs	r1, #1
 800379e:	f009 fbf8 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80037ae:	2201      	movs	r2, #1
 80037b0:	2104      	movs	r1, #4
 80037b2:	f009 fbee 	bl	800cf92 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80037c2:	2201      	movs	r2, #1
 80037c4:	2101      	movs	r1, #1
 80037c6:	f009 fbe4 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80037d6:	2204      	movs	r2, #4
 80037d8:	2104      	movs	r1, #4
 80037da:	f009 fbda 	bl	800cf92 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	33c4      	adds	r3, #196	@ 0xc4
 80037e8:	2201      	movs	r2, #1
 80037ea:	2101      	movs	r1, #1
 80037ec:	f009 fbd1 	bl	800cf92 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80037fc:	2201      	movs	r2, #1
 80037fe:	2101      	movs	r1, #1
 8003800:	f009 fbc7 	bl	800cf92 <arm_mat_init_f32>
}
 8003804:	bf00      	nop
 8003806:	3790      	adds	r7, #144	@ 0x90
 8003808:	46bd      	mov	sp, r7
 800380a:	bdb0      	pop	{r4, r5, r7, pc}
 800380c:	0800ee30 	.word	0x0800ee30

08003810 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003814:	f002 f8b7 	bl	8005986 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003818:	f000 f844 	bl	80038a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800381c:	f7ff fc12 	bl	8003044 <MX_GPIO_Init>
	MX_DMA_Init();
 8003820:	f7ff fbc6 	bl	8002fb0 <MX_DMA_Init>
	MX_ADC1_Init();
 8003824:	f7ff fab8 	bl	8002d98 <MX_ADC1_Init>
	MX_TIM2_Init();
 8003828:	f001 fac2 	bl	8004db0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800382c:	f001 fb0e 	bl	8004e4c <MX_TIM3_Init>
	MX_TIM4_Init();
 8003830:	f001 fb62 	bl	8004ef8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003834:	f001 fbb6 	bl	8004fa4 <MX_TIM5_Init>
	MX_TIM8_Init();
 8003838:	f001 fc0a 	bl	8005050 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800383c:	f001 fecc 	bl	80055d8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8003840:	f001 fcc4 	bl	80051cc <MX_TIM16_Init>
	MX_TIM1_Init();
 8003844:	f001 fa20 	bl	8004c88 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8003848:	f001 fe7c 	bl	8005544 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800384c:	f000 f9dc 	bl	8003c08 <plotter_begin>

	// Initialize revolute axis
	revolute_axis.position_setpoint = 0.0f;
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <main+0x8c>)
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
	revolute_axis.velocity_setpoint = 0.0f;
 8003858:	4b10      	ldr	r3, [pc, #64]	@ (800389c <main+0x8c>)
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
	revolute_axis.pos_error = 0.0f;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <main+0x8c>)
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
	revolute_axis.vel_error = 0.0f;
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <main+0x8c>)
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
	revolute_axis.command_vel = 0.0f;
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <main+0x8c>)
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
	revolute_axis.command_pos = 0.0f;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <main+0x8c>)
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	61da      	str	r2, [r3, #28]
	revolute_axis.dfd = 0.0f;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <main+0x8c>)
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
	revolute_axis.ffd = 0.0f;
 8003888:	4b04      	ldr	r3, [pc, #16]	@ (800389c <main+0x8c>)
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24

	// Initialize position control tick counter
	position_control_tick = 0;
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <main+0x90>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003896:	bf00      	nop
 8003898:	e7fd      	b.n	8003896 <main+0x86>
 800389a:	bf00      	nop
 800389c:	2000025c 	.word	0x2000025c
 80038a0:	20000284 	.word	0x20000284

080038a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b094      	sub	sp, #80	@ 0x50
 80038a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80038aa:	f107 0318 	add.w	r3, r7, #24
 80038ae:	2238      	movs	r2, #56	@ 0x38
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f00a f8de 	bl	800da74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80038c6:	2000      	movs	r0, #0
 80038c8:	f004 fb5e 	bl	8007f88 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038d6:	2340      	movs	r3, #64	@ 0x40
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038da:	2302      	movs	r3, #2
 80038dc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038de:	2302      	movs	r3, #2
 80038e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80038e2:	2304      	movs	r3, #4
 80038e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80038e6:	2355      	movs	r3, #85	@ 0x55
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ea:	2302      	movs	r3, #2
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80038ee:	2302      	movs	r3, #2
 80038f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80038f2:	2302      	movs	r3, #2
 80038f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038f6:	f107 0318 	add.w	r3, r7, #24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fbf8 	bl	80080f0 <HAL_RCC_OscConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SystemClock_Config+0x66>
		Error_Handler();
 8003906:	f000 f979 	bl	8003bfc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800390a:	230f      	movs	r3, #15
 800390c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800390e:	2303      	movs	r3, #3
 8003910:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	2104      	movs	r1, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fef6 	bl	8008714 <HAL_RCC_ClockConfig>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <SystemClock_Config+0x8e>
		Error_Handler();
 800392e:	f000 f965 	bl	8003bfc <Error_Handler>
	}
}
 8003932:	bf00      	nop
 8003934:	3750      	adds	r7, #80	@ 0x50
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <update_revolute_position_control>:

/* USER CODE BEGIN 4 */
void update_revolute_position_control(void) {
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	ed2d 8b02 	vpush	{d8}
 8003942:	af00      	add	r7, sp, #0
	// Calculate position error
	revolute_axis.pos_error = revolute_axis.position_setpoint - revolute_encoder.mm;
 8003944:	4b1c      	ldr	r3, [pc, #112]	@ (80039b8 <update_revolute_position_control+0x7c>)
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <update_revolute_position_control+0x80>)
 800394c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003954:	4b18      	ldr	r3, [pc, #96]	@ (80039b8 <update_revolute_position_control+0x7c>)
 8003956:	edc3 7a04 	vstr	s15, [r3, #16]

	// Position PID control to generate velocity command
	revolute_axis.command_vel = PWM_Satuation(
 800395a:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <update_revolute_position_control+0x7c>)
 800395c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	4816      	ldr	r0, [pc, #88]	@ (80039c0 <update_revolute_position_control+0x84>)
 8003966:	f7fd fbcf 	bl	8001108 <PID_CONTROLLER_Compute>
 800396a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid, revolute_axis.pos_error),
			ZGX45RGG_150RPM_Constant.qd_max,
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <update_revolute_position_control+0x88>)
 8003970:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7fd f81c 	bl	80009b4 <__aeabi_d2iz>
 800397c:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800397e:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <update_revolute_position_control+0x88>)
 8003980:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003984:	4614      	mov	r4, r2
 8003986:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fd f811 	bl	80009b4 <__aeabi_d2iz>
 8003992:	4603      	mov	r3, r0
 8003994:	4619      	mov	r1, r3
 8003996:	4630      	mov	r0, r6
 8003998:	eeb0 0a48 	vmov.f32	s0, s16
 800399c:	f7fd fb52 	bl	8001044 <PWM_Satuation>
 80039a0:	ee07 0a90 	vmov	s15, r0
 80039a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <update_revolute_position_control+0x7c>)
 80039aa:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	ecbd 8b02 	vpop	{d8}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b8:	2000025c 	.word	0x2000025c
 80039bc:	2000037c 	.word	0x2000037c
 80039c0:	20000428 	.word	0x20000428
 80039c4:	20000000 	.word	0x20000000

080039c8 <update_revolute_velocity_control>:

void update_revolute_velocity_control(void) {
 80039c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	ed2d 8b02 	vpush	{d8}
 80039d0:	af00      	add	r7, sp, #0
	// Calculate velocity error (combines position command and velocity setpoint)
	revolute_axis.vel_error = revolute_axis.command_vel + revolute_axis.velocity_setpoint - revolute_axis.kalman_velocity;
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 80039d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80039d8:	4b34      	ldr	r3, [pc, #208]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 80039da:	edd3 7a01 	vldr	s15, [r3, #4]
 80039de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e2:	4b32      	ldr	r3, [pc, #200]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 80039e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80039e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ec:	4b2f      	ldr	r3, [pc, #188]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 80039ee:	edc3 7a05 	vstr	s15, [r3, #20]

	// Velocity PID control
	revolute_axis.command_pos = PWM_Satuation(
 80039f2:	4b2e      	ldr	r3, [pc, #184]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 80039f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	482c      	ldr	r0, [pc, #176]	@ (8003ab0 <update_revolute_velocity_control+0xe8>)
 80039fe:	f7fd fb83 	bl	8001108 <PID_CONTROLLER_Compute>
 8003a02:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
			ZGX45RGG_150RPM_Constant.U_max,
 8003a06:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <update_revolute_velocity_control+0xec>)
 8003a08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f7fc ffd0 	bl	80009b4 <__aeabi_d2iz>
 8003a14:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8003a16:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <update_revolute_velocity_control+0xec>)
 8003a18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003a1c:	4690      	mov	r8, r2
 8003a1e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8003a22:	4640      	mov	r0, r8
 8003a24:	4649      	mov	r1, r9
 8003a26:	f7fc ffc5 	bl	80009b4 <__aeabi_d2iz>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4630      	mov	r0, r6
 8003a30:	eeb0 0a48 	vmov.f32	s0, s16
 8003a34:	f7fd fb06 	bl	8001044 <PWM_Satuation>
 8003a38:	ee07 0a90 	vmov	s15, r0
 8003a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a40:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 8003a42:	edc3 7a07 	vstr	s15, [r3, #28]

	// Add feedforward compensation
//	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;

	// Final saturation
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8003a46:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 8003a48:	ed93 8a07 	vldr	s16, [r3, #28]
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <update_revolute_velocity_control+0xec>)
 8003a4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fc ffad 	bl	80009b4 <__aeabi_d2iz>
 8003a5a:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8003a5c:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <update_revolute_velocity_control+0xec>)
 8003a5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003a62:	4614      	mov	r4, r2
 8003a64:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8003a68:	4620      	mov	r0, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f7fc ffa2 	bl	80009b4 <__aeabi_d2iz>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4619      	mov	r1, r3
 8003a74:	4630      	mov	r0, r6
 8003a76:	eeb0 0a48 	vmov.f32	s0, s16
 8003a7a:	f7fd fae3 	bl	8001044 <PWM_Satuation>
 8003a7e:	ee07 0a90 	vmov	s15, r0
 8003a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 8003a88:	edc3 7a07 	vstr	s15, [r3, #28]

	// Apply command to motor
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8003a8c:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <update_revolute_velocity_control+0xe4>)
 8003a8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a92:	eef0 0a67 	vmov.f32	s1, s15
 8003a96:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003ab8 <update_revolute_velocity_control+0xf0>
 8003a9a:	4808      	ldr	r0, [pc, #32]	@ (8003abc <update_revolute_velocity_control+0xf4>)
 8003a9c:	f7fd fbea 	bl	8001274 <MDXX_set_range>
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	ecbd 8b02 	vpop	{d8}
 8003aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aac:	2000025c 	.word	0x2000025c
 8003ab0:	20000450 	.word	0x20000450
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	44fa0000 	.word	0x44fa0000
 8003abc:	200002d4 	.word	0x200002d4

08003ac0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a43      	ldr	r2, [pc, #268]	@ (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d17a      	bne.n	8003bc6 <HAL_TIM_PeriodElapsedCallback+0x106>
		// Update sensor readings
		plotter_update_sensors();
 8003ad0:	f000 fc8e 	bl	80043f0 <plotter_update_sensors>

		QEI_get_diff_count(&revolute_encoder);
 8003ad4:	4841      	ldr	r0, [pc, #260]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003ad6:	f7fe fd7f 	bl	80025d8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8003ada:	4840      	ldr	r0, [pc, #256]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003adc:	f7fe fe68 	bl	80027b0 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8003ae0:	483e      	ldr	r0, [pc, #248]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003ae2:	f7fe fd79 	bl	80025d8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8003ae6:	483d      	ldr	r0, [pc, #244]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003ae8:	f7fe fe62 	bl	80027b0 <QEI_compute_data>

		// Calculate revolute motor input voltage for Kalman filter
		revolute_axis.input_voltage = mapf(revolute_axis.command_pos,
 8003aec:	4b3c      	ldr	r3, [pc, #240]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003aee:	edd3 7a07 	vldr	s15, [r3, #28]
 8003af2:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8003af6:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8003afa:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8003be4 <HAL_TIM_PeriodElapsedCallback+0x124>
 8003afe:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8003be8 <HAL_TIM_PeriodElapsedCallback+0x128>
 8003b02:	eeb0 0a67 	vmov.f32	s0, s15
 8003b06:	f7fd fdef 	bl	80016e8 <mapf>
 8003b0a:	eef0 7a40 	vmov.f32	s15, s0
 8003b0e:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b10:	edc3 7a03 	vstr	s15, [r3, #12]
				-65535.0f, 65535.0f, -12.0f, 12.0f);

		// Update Kalman filtered velocity
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(&revolute_kalman,
 8003b14:	4b32      	ldr	r3, [pc, #200]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b1a:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003b1c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003b20:	eef0 0a47 	vmov.f32	s1, s14
 8003b24:	eeb0 0a67 	vmov.f32	s0, s15
 8003b28:	4830      	ldr	r0, [pc, #192]	@ (8003bec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003b2a:	f7ff fb6b 	bl	8003204 <SteadyStateKalmanFilter>
 8003b2e:	eef0 7a40 	vmov.f32	s15, s0
 8003b32:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b34:	edc3 7a02 	vstr	s15, [r3, #8]
				revolute_axis.input_voltage, revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b3e:	eef4 7a67 	vcmp.f32	s15, s15
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	d703      	bvc.n	8003b50 <HAL_TIM_PeriodElapsedCallback+0x90>
			revolute_axis.kalman_velocity = 0.0f;
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
		}

		// Increment tick counter
		position_control_tick++;
 8003b50:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a26      	ldr	r2, [pc, #152]	@ (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003b58:	6013      	str	r3, [r2, #0]

		// Position control at 100Hz (every 10 ticks at 1000Hz)
		if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8003b5a:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	220a      	movs	r2, #10
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d32e      	bcc.n	8003bc2 <HAL_TIM_PeriodElapsedCallback+0x102>
			position_control_tick = 0;
 8003b64:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

			// Generate position setpoint (example: sine wave)
			revolute_axis.position_setpoint += revolute_axis.velocity_setpoint * 0.01;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fcb6 	bl	80004e0 <__aeabi_f2d>
 8003b74:	4604      	mov	r4, r0
 8003b76:	460d      	mov	r5, r1
 8003b78:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fcaf 	bl	80004e0 <__aeabi_f2d>
 8003b82:	a313      	add	r3, pc, #76	@ (adr r3, 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc fd02 	bl	8000590 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4620      	mov	r0, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	f7fc fb46 	bl	8000224 <__adddf3>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fc ff50 	bl	8000a44 <__aeabi_d2f>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003ba8:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity_setpoint = SIGNAL_generate(&sine_sg_revolute, 0.01f);
 8003baa:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003bf4 <HAL_TIM_PeriodElapsedCallback+0x134>
 8003bae:	4812      	ldr	r0, [pc, #72]	@ (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003bb0:	f000 fdbe 	bl	8004730 <SIGNAL_generate>
 8003bb4:	eef0 7a40 	vmov.f32	s15, s0
 8003bb8:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003bba:	edc3 7a01 	vstr	s15, [r3, #4]

			// Update position control
			update_revolute_position_control();
 8003bbe:	f7ff febd 	bl	800393c <update_revolute_position_control>
		}
		// Velocity control runs at full 1000Hz
		update_revolute_velocity_control();
 8003bc2:	f7ff ff01 	bl	80039c8 <update_revolute_velocity_control>
	}
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	47ae147b 	.word	0x47ae147b
 8003bd4:	3f847ae1 	.word	0x3f847ae1
 8003bd8:	200018d0 	.word	0x200018d0
 8003bdc:	2000037c 	.word	0x2000037c
 8003be0:	2000025c 	.word	0x2000025c
 8003be4:	477fff00 	.word	0x477fff00
 8003be8:	c77fff00 	.word	0xc77fff00
 8003bec:	20001410 	.word	0x20001410
 8003bf0:	20000284 	.word	0x20000284
 8003bf4:	3c23d70a 	.word	0x3c23d70a
 8003bf8:	20000664 	.word	0x20000664

08003bfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c00:	b672      	cpsid	i
}
 8003c02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <Error_Handler+0x8>

08003c08 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8003c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c0c:	ed2d 8b02 	vpush	{d8}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max * Disturbance_Constant.prismatic_pulley_radius * 1000;
 8003c14:	4bc2      	ldr	r3, [pc, #776]	@ (8003f20 <plotter_begin+0x318>)
 8003c16:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003c1a:	4bc2      	ldr	r3, [pc, #776]	@ (8003f24 <plotter_begin+0x31c>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fc5e 	bl	80004e0 <__aeabi_f2d>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fcb0 	bl	8000590 <__aeabi_dmul>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	4bba      	ldr	r3, [pc, #744]	@ (8003f28 <plotter_begin+0x320>)
 8003c3e:	f7fc fca7 	bl	8000590 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	49b6      	ldr	r1, [pc, #728]	@ (8003f20 <plotter_begin+0x318>)
 8003c48:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8003c4c:	4bb4      	ldr	r3, [pc, #720]	@ (8003f20 <plotter_begin+0x318>)
 8003c4e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	f7fc fae5 	bl	8000224 <__adddf3>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	49b0      	ldr	r1, [pc, #704]	@ (8003f20 <plotter_begin+0x318>)
 8003c60:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 8003c64:	49ae      	ldr	r1, [pc, #696]	@ (8003f20 <plotter_begin+0x318>)
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	4bb0      	ldr	r3, [pc, #704]	@ (8003f2c <plotter_begin+0x324>)
 8003c6c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = ZGX45RGG_400RPM_Constant.sdd_max;
 8003c70:	4bab      	ldr	r3, [pc, #684]	@ (8003f20 <plotter_begin+0x318>)
 8003c72:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8003c76:	49aa      	ldr	r1, [pc, #680]	@ (8003f20 <plotter_begin+0x318>)
 8003c78:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8003c7c:	4bac      	ldr	r3, [pc, #688]	@ (8003f30 <plotter_begin+0x328>)
 8003c7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8003c82:	a3a3      	add	r3, pc, #652	@ (adr r3, 8003f10 <plotter_begin+0x308>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fc82 	bl	8000590 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8003c90:	49a7      	ldr	r1, [pc, #668]	@ (8003f30 <plotter_begin+0x328>)
 8003c92:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8003c96:	4ba6      	ldr	r3, [pc, #664]	@ (8003f30 <plotter_begin+0x328>)
 8003c98:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003c9c:	a39e      	add	r3, pc, #632	@ (adr r3, 8003f18 <plotter_begin+0x310>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f7fc fc75 	bl	8000590 <__aeabi_dmul>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	49a1      	ldr	r1, [pc, #644]	@ (8003f30 <plotter_begin+0x328>)
 8003cac:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	ZGX45RGG_150RPM_Constant.traject_qd_max = ZGX45RGG_150RPM_Constant.qd_max;
 8003cb0:	4b9f      	ldr	r3, [pc, #636]	@ (8003f30 <plotter_begin+0x328>)
 8003cb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003cb6:	499e      	ldr	r1, [pc, #632]	@ (8003f30 <plotter_begin+0x328>)
 8003cb8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = ZGX45RGG_150RPM_Constant.qdd_max;
 8003cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8003f30 <plotter_begin+0x328>)
 8003cbe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8003cc2:	499b      	ldr	r1, [pc, #620]	@ (8003f30 <plotter_begin+0x328>)
 8003cc4:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	489a      	ldr	r0, [pc, #616]	@ (8003f34 <plotter_begin+0x32c>)
 8003ccc:	f000 fc76 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8003cd0:	eddf 2a99 	vldr	s5, [pc, #612]	@ 8003f38 <plotter_begin+0x330>
 8003cd4:	ed9f 2a99 	vldr	s4, [pc, #612]	@ 8003f3c <plotter_begin+0x334>
 8003cd8:	eddf 1a99 	vldr	s3, [pc, #612]	@ 8003f40 <plotter_begin+0x338>
 8003cdc:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 8003f40 <plotter_begin+0x338>
 8003ce0:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8003f44 <plotter_begin+0x33c>
 8003ce4:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8003f38 <plotter_begin+0x330>
 8003ce8:	4892      	ldr	r0, [pc, #584]	@ (8003f34 <plotter_begin+0x32c>)
 8003cea:	f000 fcc5 	bl	8004678 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4895      	ldr	r0, [pc, #596]	@ (8003f48 <plotter_begin+0x340>)
 8003cf2:	f000 fc63 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8003cf6:	ed9f 3a90 	vldr	s6, [pc, #576]	@ 8003f38 <plotter_begin+0x330>
 8003cfa:	eddf 2a90 	vldr	s5, [pc, #576]	@ 8003f3c <plotter_begin+0x334>
 8003cfe:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8003f40 <plotter_begin+0x338>
 8003d02:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8003f40 <plotter_begin+0x338>
 8003d06:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003d0a:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8003f44 <plotter_begin+0x33c>
 8003d0e:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8003f38 <plotter_begin+0x330>
 8003d12:	488d      	ldr	r0, [pc, #564]	@ (8003f48 <plotter_begin+0x340>)
 8003d14:	f000 fcdb 	bl	80046ce <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8003d18:	2100      	movs	r1, #0
 8003d1a:	488c      	ldr	r0, [pc, #560]	@ (8003f4c <plotter_begin+0x344>)
 8003d1c:	f000 fc4e 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8003d20:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 8003f50 <plotter_begin+0x348>
 8003d24:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 8003f54 <plotter_begin+0x34c>
 8003d28:	eddf 1a85 	vldr	s3, [pc, #532]	@ 8003f40 <plotter_begin+0x338>
 8003d2c:	ed9f 1a84 	vldr	s2, [pc, #528]	@ 8003f40 <plotter_begin+0x338>
 8003d30:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8003f44 <plotter_begin+0x33c>
 8003d34:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8003f50 <plotter_begin+0x348>
 8003d38:	4884      	ldr	r0, [pc, #528]	@ (8003f4c <plotter_begin+0x344>)
 8003d3a:	f000 fc9d 	bl	8004678 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4885      	ldr	r0, [pc, #532]	@ (8003f58 <plotter_begin+0x350>)
 8003d42:	f000 fc3b 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8003d46:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8003d4a:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8003d4e:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8003f40 <plotter_begin+0x338>
 8003d52:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8003f40 <plotter_begin+0x338>
 8003d56:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003d5a:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8003f44 <plotter_begin+0x33c>
 8003d5e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003d62:	487d      	ldr	r0, [pc, #500]	@ (8003f58 <plotter_begin+0x350>)
 8003d64:	f000 fcb3 	bl	80046ce <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	487c      	ldr	r0, [pc, #496]	@ (8003f5c <plotter_begin+0x354>)
 8003d6c:	f000 fc26 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003d70:	4b6b      	ldr	r3, [pc, #428]	@ (8003f20 <plotter_begin+0x318>)
 8003d72:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f7fc fe63 	bl	8000a44 <__aeabi_d2f>
 8003d7e:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.sd_max,
 8003d80:	4b67      	ldr	r3, [pc, #412]	@ (8003f20 <plotter_begin+0x318>)
 8003d82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f7fc fe5b 	bl	8000a44 <__aeabi_d2f>
 8003d8e:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.sd_max);
 8003d98:	4b61      	ldr	r3, [pc, #388]	@ (8003f20 <plotter_begin+0x318>)
 8003d9a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7fc fe4f 	bl	8000a44 <__aeabi_d2f>
 8003da6:	4603      	mov	r3, r0
 8003da8:	ee02 3a90 	vmov	s5, r3
 8003dac:	eeb0 2a48 	vmov.f32	s4, s16
 8003db0:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8003f40 <plotter_begin+0x338>
 8003db4:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 8003f40 <plotter_begin+0x338>
 8003db8:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8003f44 <plotter_begin+0x33c>
 8003dbc:	ee00 4a10 	vmov	s0, r4
 8003dc0:	4866      	ldr	r0, [pc, #408]	@ (8003f5c <plotter_begin+0x354>)
 8003dc2:	f000 fc59 	bl	8004678 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4865      	ldr	r0, [pc, #404]	@ (8003f60 <plotter_begin+0x358>)
 8003dca:	f000 fbf7 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003dce:	4b54      	ldr	r3, [pc, #336]	@ (8003f20 <plotter_begin+0x318>)
 8003dd0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7fc fe34 	bl	8000a44 <__aeabi_d2f>
 8003ddc:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sd_max);
 8003dde:	4b50      	ldr	r3, [pc, #320]	@ (8003f20 <plotter_begin+0x318>)
 8003de0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fc fe2c 	bl	8000a44 <__aeabi_d2f>
 8003dec:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sd_max);
 8003df6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f20 <plotter_begin+0x318>)
 8003df8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.sd_max,
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc fe20 	bl	8000a44 <__aeabi_d2f>
 8003e04:	4603      	mov	r3, r0
 8003e06:	ee03 3a10 	vmov	s6, r3
 8003e0a:	eef0 2a48 	vmov.f32	s5, s16
 8003e0e:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 8003f40 <plotter_begin+0x338>
 8003e12:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8003f40 <plotter_begin+0x338>
 8003e16:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003e1a:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8003f44 <plotter_begin+0x33c>
 8003e1e:	ee00 4a10 	vmov	s0, r4
 8003e22:	484f      	ldr	r0, [pc, #316]	@ (8003f60 <plotter_begin+0x358>)
 8003e24:	f000 fc53 	bl	80046ce <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8003e28:	2100      	movs	r1, #0
 8003e2a:	484e      	ldr	r0, [pc, #312]	@ (8003f64 <plotter_begin+0x35c>)
 8003e2c:	f000 fbc6 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max - 5.0,
 8003e30:	4b3f      	ldr	r3, [pc, #252]	@ (8003f30 <plotter_begin+0x328>)
 8003e32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f68 <plotter_begin+0x360>)
 8003e3c:	f7fc f9f0 	bl	8000220 <__aeabi_dsub>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	f7fc fdfc 	bl	8000a44 <__aeabi_d2f>
 8003e4c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max + 5.0,
 8003e4e:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <plotter_begin+0x328>)
 8003e50:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	4943      	ldr	r1, [pc, #268]	@ (8003f68 <plotter_begin+0x360>)
 8003e5a:	f7fc f9e1 	bl	8000220 <__aeabi_dsub>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max - 5.0,
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7fc fded 	bl	8000a44 <__aeabi_d2f>
 8003e6a:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.qd_max - 5.0);
 8003e6c:	4b30      	ldr	r3, [pc, #192]	@ (8003f30 <plotter_begin+0x328>)
 8003e6e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	4b3c      	ldr	r3, [pc, #240]	@ (8003f68 <plotter_begin+0x360>)
 8003e78:	f7fc f9d2 	bl	8000220 <__aeabi_dsub>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max - 5.0,
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fc fdde 	bl	8000a44 <__aeabi_d2f>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	ee02 3a90 	vmov	s5, r3
 8003e8e:	ee02 5a10 	vmov	s4, r5
 8003e92:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 8003f40 <plotter_begin+0x338>
 8003e96:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8003f40 <plotter_begin+0x338>
 8003e9a:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8003f44 <plotter_begin+0x33c>
 8003e9e:	ee00 4a10 	vmov	s0, r4
 8003ea2:	4830      	ldr	r0, [pc, #192]	@ (8003f64 <plotter_begin+0x35c>)
 8003ea4:	f000 fbe8 	bl	8004678 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4830      	ldr	r0, [pc, #192]	@ (8003f6c <plotter_begin+0x364>)
 8003eac:	f000 fb86 	bl	80045bc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <plotter_begin+0x328>)
 8003eb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f7fc fdc3 	bl	8000a44 <__aeabi_d2f>
 8003ebe:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <plotter_begin+0x328>)
 8003ec2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f7fc fdbb 	bl	8000a44 <__aeabi_d2f>
 8003ece:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003ed8:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <plotter_begin+0x328>)
 8003eda:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fdaf 	bl	8000a44 <__aeabi_d2f>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	ee03 3a10 	vmov	s6, r3
 8003eec:	eef0 2a48 	vmov.f32	s5, s16
 8003ef0:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8003f40 <plotter_begin+0x338>
 8003ef4:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003f40 <plotter_begin+0x338>
 8003ef8:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003efc:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8003f44 <plotter_begin+0x33c>
 8003f00:	ee00 4a10 	vmov	s0, r4
 8003f04:	4819      	ldr	r0, [pc, #100]	@ (8003f6c <plotter_begin+0x364>)
 8003f06:	f000 fbe2 	bl	80046ce <SIGNAL_config_square>
 8003f0a:	e031      	b.n	8003f70 <plotter_begin+0x368>
 8003f0c:	f3af 8000 	nop.w
 8003f10:	55555555 	.word	0x55555555
 8003f14:	3fe55555 	.word	0x3fe55555
 8003f18:	9999999a 	.word	0x9999999a
 8003f1c:	3fd99999 	.word	0x3fd99999
 8003f20:	20000080 	.word	0x20000080
 8003f24:	20000100 	.word	0x20000100
 8003f28:	408f4000 	.word	0x408f4000
 8003f2c:	407f4000 	.word	0x407f4000
 8003f30:	20000000 	.word	0x20000000
 8003f34:	200004cc 	.word	0x200004cc
 8003f38:	477fff00 	.word	0x477fff00
 8003f3c:	c77fff00 	.word	0xc77fff00
 8003f40:	00000000 	.word	0x00000000
 8003f44:	3dcccccd 	.word	0x3dcccccd
 8003f48:	20000510 	.word	0x20000510
 8003f4c:	20000554 	.word	0x20000554
 8003f50:	43480000 	.word	0x43480000
 8003f54:	c3480000 	.word	0xc3480000
 8003f58:	20000598 	.word	0x20000598
 8003f5c:	200005dc 	.word	0x200005dc
 8003f60:	20000620 	.word	0x20000620
 8003f64:	20000664 	.word	0x20000664
 8003f68:	40140000 	.word	0x40140000
 8003f6c:	200006a8 	.word	0x200006a8

	UnitConverter_init(&converter_system);
 8003f70:	48c3      	ldr	r0, [pc, #780]	@ (8004280 <plotter_begin+0x678>)
 8003f72:	f7fe feef 	bl	8002d54 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8003f76:	4bc3      	ldr	r3, [pc, #780]	@ (8004284 <plotter_begin+0x67c>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fab0 	bl	80004e0 <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	f7fc f94e 	bl	8000224 <__adddf3>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	4bbc      	ldr	r3, [pc, #752]	@ (8004288 <plotter_begin+0x680>)
 8003f96:	f7fc fafb 	bl	8000590 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fd4f 	bl	8000a44 <__aeabi_d2f>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	ee00 3a90 	vmov	s1, r3
 8003fac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fb8:	49b4      	ldr	r1, [pc, #720]	@ (800428c <plotter_begin+0x684>)
 8003fba:	48b5      	ldr	r0, [pc, #724]	@ (8004290 <plotter_begin+0x688>)
 8003fbc:	f7fe fa9a 	bl	80024f4 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8003fc0:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 8004294 <plotter_begin+0x68c>
 8003fc4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd0:	49b1      	ldr	r1, [pc, #708]	@ (8004298 <plotter_begin+0x690>)
 8003fd2:	48b2      	ldr	r0, [pc, #712]	@ (800429c <plotter_begin+0x694>)
 8003fd4:	f7fe fa8e 	bl	80024f4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8003fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	49ae      	ldr	r1, [pc, #696]	@ (80042a0 <plotter_begin+0x698>)
 8003fe6:	48af      	ldr	r0, [pc, #700]	@ (80042a4 <plotter_begin+0x69c>)
 8003fe8:	f7fd f920 	bl	800122c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8003fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4bad      	ldr	r3, [pc, #692]	@ (80042a8 <plotter_begin+0x6a0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	49aa      	ldr	r1, [pc, #680]	@ (80042a0 <plotter_begin+0x698>)
 8003ff8:	48ac      	ldr	r0, [pc, #688]	@ (80042ac <plotter_begin+0x6a4>)
 8003ffa:	f7fd f917 	bl	800122c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8003ffe:	220c      	movs	r2, #12
 8004000:	49ab      	ldr	r1, [pc, #684]	@ (80042b0 <plotter_begin+0x6a8>)
 8004002:	48ac      	ldr	r0, [pc, #688]	@ (80042b4 <plotter_begin+0x6ac>)
 8004004:	f7fe f94e 	bl	80022a4 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8004008:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8004294 <plotter_begin+0x68c>
 800400c:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 80042b8 <plotter_begin+0x6b0>
 8004010:	48a4      	ldr	r0, [pc, #656]	@ (80042a4 <plotter_begin+0x69c>)
 8004012:	f7fd f92f 	bl	8001274 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8004016:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8004294 <plotter_begin+0x68c>
 800401a:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 80042b8 <plotter_begin+0x6b0>
 800401e:	48a3      	ldr	r0, [pc, #652]	@ (80042ac <plotter_begin+0x6a4>)
 8004020:	f7fd f928 	bl	8001274 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 1, 0.1, 0,
			ZGX45RGG_400RPM_Constant.sd_max);
 8004024:	4ba5      	ldr	r3, [pc, #660]	@ (80042bc <plotter_begin+0x6b4>)
 8004026:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 1, 0.1, 0,
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f7fc fd09 	bl	8000a44 <__aeabi_d2f>
 8004032:	4603      	mov	r3, r0
 8004034:	ee01 3a90 	vmov	s3, r3
 8004038:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8004294 <plotter_begin+0x68c>
 800403c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 80042c0 <plotter_begin+0x6b8>
 8004040:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004044:	489f      	ldr	r0, [pc, #636]	@ (80042c4 <plotter_begin+0x6bc>)
 8004046:	f7fd f82c 	bl	80010a2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 3, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800404a:	4b9c      	ldr	r3, [pc, #624]	@ (80042bc <plotter_begin+0x6b4>)
 800404c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 3, 0,
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7fc fcf6 	bl	8000a44 <__aeabi_d2f>
 8004058:	4603      	mov	r3, r0
 800405a:	ee01 3a90 	vmov	s3, r3
 800405e:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8004294 <plotter_begin+0x68c>
 8004062:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8004066:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80042c8 <plotter_begin+0x6c0>
 800406a:	4898      	ldr	r0, [pc, #608]	@ (80042cc <plotter_begin+0x6c4>)
 800406c:	f7fd f819 	bl	80010a2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0.001, 0, 0.001,
			ZGX45RGG_150RPM_Constant.qd_max);
 8004070:	4b97      	ldr	r3, [pc, #604]	@ (80042d0 <plotter_begin+0x6c8>)
 8004072:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 0.001, 0, 0.001,
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f7fc fce3 	bl	8000a44 <__aeabi_d2f>
 800407e:	4603      	mov	r3, r0
 8004080:	ee01 3a90 	vmov	s3, r3
 8004084:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80042d4 <plotter_begin+0x6cc>
 8004088:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8004294 <plotter_begin+0x68c>
 800408c:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80042d4 <plotter_begin+0x6cc>
 8004090:	4891      	ldr	r0, [pc, #580]	@ (80042d8 <plotter_begin+0x6d0>)
 8004092:	f7fd f806 	bl	80010a2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
			ZGX45RGG_150RPM_Constant.U_max);
 8004096:	4b8e      	ldr	r3, [pc, #568]	@ (80042d0 <plotter_begin+0x6c8>)
 8004098:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 8000, 150, 80,
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f7fc fcd0 	bl	8000a44 <__aeabi_d2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	ee01 3a90 	vmov	s3, r3
 80040aa:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 80042dc <plotter_begin+0x6d4>
 80040ae:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80042c8 <plotter_begin+0x6c0>
 80040b2:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 80042e0 <plotter_begin+0x6d8>
 80040b6:	488b      	ldr	r0, [pc, #556]	@ (80042e4 <plotter_begin+0x6dc>)
 80040b8:	f7fc fff3 	bl	80010a2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80040bc:	4984      	ldr	r1, [pc, #528]	@ (80042d0 <plotter_begin+0x6c8>)
 80040be:	488a      	ldr	r0, [pc, #552]	@ (80042e8 <plotter_begin+0x6e0>)
 80040c0:	f7fd f9b2 	bl	8001428 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80040c4:	497d      	ldr	r1, [pc, #500]	@ (80042bc <plotter_begin+0x6b4>)
 80040c6:	4889      	ldr	r0, [pc, #548]	@ (80042ec <plotter_begin+0x6e4>)
 80040c8:	f7fd f9ce 	bl	8001468 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80040cc:	4a6d      	ldr	r2, [pc, #436]	@ (8004284 <plotter_begin+0x67c>)
 80040ce:	4980      	ldr	r1, [pc, #512]	@ (80042d0 <plotter_begin+0x6c8>)
 80040d0:	4887      	ldr	r0, [pc, #540]	@ (80042f0 <plotter_begin+0x6e8>)
 80040d2:	f7fd f9b7 	bl	8001444 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80040d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004284 <plotter_begin+0x67c>)
 80040d8:	4978      	ldr	r1, [pc, #480]	@ (80042bc <plotter_begin+0x6b4>)
 80040da:	4886      	ldr	r0, [pc, #536]	@ (80042f4 <plotter_begin+0x6ec>)
 80040dc:	f7fd f9d2 	bl	8001484 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80040e0:	2302      	movs	r3, #2
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80042f8 <plotter_begin+0x6f0>
 80040e8:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80042fc <plotter_begin+0x6f4>
 80040ec:	2364      	movs	r3, #100	@ 0x64
 80040ee:	4a84      	ldr	r2, [pc, #528]	@ (8004300 <plotter_begin+0x6f8>)
 80040f0:	4984      	ldr	r1, [pc, #528]	@ (8004304 <plotter_begin+0x6fc>)
 80040f2:	4885      	ldr	r0, [pc, #532]	@ (8004308 <plotter_begin+0x700>)
 80040f4:	f7fc fe8c 	bl	8000e10 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80040f8:	2105      	movs	r1, #5
 80040fa:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 800430c <plotter_begin+0x704>
 80040fe:	4882      	ldr	r0, [pc, #520]	@ (8004308 <plotter_begin+0x700>)
 8004100:	f7fc ff38 	bl	8000f74 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8004104:	4880      	ldr	r0, [pc, #512]	@ (8004308 <plotter_begin+0x700>)
 8004106:	f7fc fedb 	bl	8000ec0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800410a:	eddf 0a81 	vldr	s1, [pc, #516]	@ 8004310 <plotter_begin+0x708>
 800410e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004112:	211f      	movs	r1, #31
 8004114:	487f      	ldr	r0, [pc, #508]	@ (8004314 <plotter_begin+0x70c>)
 8004116:	f7fd f9c7 	bl	80014a8 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800411a:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8004310 <plotter_begin+0x708>
 800411e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004122:	211f      	movs	r1, #31
 8004124:	487c      	ldr	r0, [pc, #496]	@ (8004318 <plotter_begin+0x710>)
 8004126:	f7fd f9bf 	bl	80014a8 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800412a:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8004310 <plotter_begin+0x708>
 800412e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004132:	211f      	movs	r1, #31
 8004134:	4879      	ldr	r0, [pc, #484]	@ (800431c <plotter_begin+0x714>)
 8004136:	f7fd f9b7 	bl	80014a8 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800413a:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8004310 <plotter_begin+0x708>
 800413e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004142:	211f      	movs	r1, #31
 8004144:	4876      	ldr	r0, [pc, #472]	@ (8004320 <plotter_begin+0x718>)
 8004146:	f7fd f9af 	bl	80014a8 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800414a:	4b5c      	ldr	r3, [pc, #368]	@ (80042bc <plotter_begin+0x6b4>)
 800414c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f7fc fc76 	bl	8000a44 <__aeabi_d2f>
 8004158:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800415a:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <plotter_begin+0x6b4>)
 800415c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7fc fc6e 	bl	8000a44 <__aeabi_d2f>
 8004168:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800416a:	4b54      	ldr	r3, [pc, #336]	@ (80042bc <plotter_begin+0x6b4>)
 800416c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	f7fc fc66 	bl	8000a44 <__aeabi_d2f>
 8004178:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800417a:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <plotter_begin+0x6b4>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f7fc fc5e 	bl	8000a44 <__aeabi_d2f>
 8004188:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <plotter_begin+0x6b4>)
 800418c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	f7fc fc56 	bl	8000a44 <__aeabi_d2f>
 8004198:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800419a:	4b48      	ldr	r3, [pc, #288]	@ (80042bc <plotter_begin+0x6b4>)
 800419c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7fc fc4e 	bl	8000a44 <__aeabi_d2f>
 80041a8:	4603      	mov	r3, r0
 80041aa:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80041ae:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80041b2:	ee03 3a10 	vmov	s6, r3
 80041b6:	ee02 9a90 	vmov	s5, r9
 80041ba:	ee02 8a10 	vmov	s4, r8
 80041be:	ee01 6a90 	vmov	s3, r6
 80041c2:	ee01 5a10 	vmov	s2, r5
 80041c6:	ee00 4a90 	vmov	s1, r4
 80041ca:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80042d4 <plotter_begin+0x6cc>
 80041ce:	4855      	ldr	r0, [pc, #340]	@ (8004324 <plotter_begin+0x71c>)
 80041d0:	f7fd fb6a 	bl	80018a8 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80041d4:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <plotter_begin+0x6c8>)
 80041d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f7fc fc31 	bl	8000a44 <__aeabi_d2f>
 80041e2:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 80041e4:	4b3a      	ldr	r3, [pc, #232]	@ (80042d0 <plotter_begin+0x6c8>)
 80041e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fc fc29 	bl	8000a44 <__aeabi_d2f>
 80041f2:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 80041f4:	4b36      	ldr	r3, [pc, #216]	@ (80042d0 <plotter_begin+0x6c8>)
 80041f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f7fc fc21 	bl	8000a44 <__aeabi_d2f>
 8004202:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 8004204:	4b32      	ldr	r3, [pc, #200]	@ (80042d0 <plotter_begin+0x6c8>)
 8004206:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800420a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004278 <plotter_begin+0x670>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc f9be 	bl	8000590 <__aeabi_dmul>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f7fc fc12 	bl	8000a44 <__aeabi_d2f>
 8004220:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 8004222:	4b2b      	ldr	r3, [pc, #172]	@ (80042d0 <plotter_begin+0x6c8>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f7fc fc0a 	bl	8000a44 <__aeabi_d2f>
 8004230:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 8004232:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <plotter_begin+0x6c8>)
 8004234:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fc02 	bl	8000a44 <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	4939      	ldr	r1, [pc, #228]	@ (8004328 <plotter_begin+0x720>)
 8004244:	4839      	ldr	r0, [pc, #228]	@ (800432c <plotter_begin+0x724>)
 8004246:	ed9f 3a23 	vldr	s6, [pc, #140]	@ 80042d4 <plotter_begin+0x6cc>
 800424a:	ee02 3a90 	vmov	s5, r3
 800424e:	ee02 9a10 	vmov	s4, r9
 8004252:	ee01 8a90 	vmov	s3, r8
 8004256:	ee01 6a10 	vmov	s2, r6
 800425a:	ee00 5a90 	vmov	s1, r5
 800425e:	ee00 4a10 	vmov	s0, r4
 8004262:	f7fd ffb7 	bl	80021d4 <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8004266:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8004330 <plotter_begin+0x728>
 800426a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800426e:	4a2e      	ldr	r2, [pc, #184]	@ (8004328 <plotter_begin+0x720>)
 8004270:	492e      	ldr	r1, [pc, #184]	@ (800432c <plotter_begin+0x724>)
 8004272:	e05f      	b.n	8004334 <plotter_begin+0x72c>
 8004274:	f3af 8000 	nop.w
 8004278:	9999999a 	.word	0x9999999a
 800427c:	40019999 	.word	0x40019999
 8004280:	200006ec 	.word	0x200006ec
 8004284:	20000100 	.word	0x20000100
 8004288:	408f4000 	.word	0x408f4000
 800428c:	20001b34 	.word	0x20001b34
 8004290:	20000320 	.word	0x20000320
 8004294:	00000000 	.word	0x00000000
 8004298:	20001a68 	.word	0x20001a68
 800429c:	2000037c 	.word	0x2000037c
 80042a0:	20001c00 	.word	0x20001c00
 80042a4:	20000288 	.word	0x20000288
 80042a8:	48000800 	.word	0x48000800
 80042ac:	200002d4 	.word	0x200002d4
 80042b0:	20001804 	.word	0x20001804
 80042b4:	20000490 	.word	0x20000490
 80042b8:	44fa0000 	.word	0x44fa0000
 80042bc:	20000080 	.word	0x20000080
 80042c0:	3dcccccd 	.word	0x3dcccccd
 80042c4:	200003d8 	.word	0x200003d8
 80042c8:	43160000 	.word	0x43160000
 80042cc:	20000400 	.word	0x20000400
 80042d0:	20000000 	.word	0x20000000
 80042d4:	3a83126f 	.word	0x3a83126f
 80042d8:	20000428 	.word	0x20000428
 80042dc:	42a00000 	.word	0x42a00000
 80042e0:	45fa0000 	.word	0x45fa0000
 80042e4:	20000450 	.word	0x20000450
 80042e8:	20000484 	.word	0x20000484
 80042ec:	20000478 	.word	0x20000478
 80042f0:	20000488 	.word	0x20000488
 80042f4:	2000047c 	.word	0x2000047c
 80042f8:	457ff000 	.word	0x457ff000
 80042fc:	40533333 	.word	0x40533333
 8004300:	20000974 	.word	0x20000974
 8004304:	20000190 	.word	0x20000190
 8004308:	200004a8 	.word	0x200004a8
 800430c:	45000000 	.word	0x45000000
 8004310:	447a0000 	.word	0x447a0000
 8004314:	20000950 	.word	0x20000950
 8004318:	20000944 	.word	0x20000944
 800431c:	20000968 	.word	0x20000968
 8004320:	2000095c 	.word	0x2000095c
 8004324:	200010a4 	.word	0x200010a4
 8004328:	200017d0 	.word	0x200017d0
 800432c:	20001790 	.word	0x20001790
 8004330:	3d4ccccd 	.word	0x3d4ccccd
 8004334:	480c      	ldr	r0, [pc, #48]	@ (8004368 <plotter_begin+0x760>)
 8004336:	f7ff f8af 	bl	8003498 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 800433a:	23c8      	movs	r3, #200	@ 0xc8
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2315      	movs	r3, #21
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <plotter_begin+0x764>)
 8004344:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <plotter_begin+0x768>)
 8004346:	490b      	ldr	r1, [pc, #44]	@ (8004374 <plotter_begin+0x76c>)
 8004348:	480b      	ldr	r0, [pc, #44]	@ (8004378 <plotter_begin+0x770>)
 800434a:	f7fd fa45 	bl	80017d8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800434e:	480b      	ldr	r0, [pc, #44]	@ (800437c <plotter_begin+0x774>)
 8004350:	f004 ff1e 	bl	8009190 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8004354:	f000 f814 	bl	8004380 <plotter_reset>
}
 8004358:	bf00      	nop
 800435a:	3704      	adds	r7, #4
 800435c:	46bd      	mov	sp, r7
 800435e:	ecbd 8b02 	vpop	{d8}
 8004362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004366:	bf00      	nop
 8004368:	20001410 	.word	0x20001410
 800436c:	20000f14 	.word	0x20000f14
 8004370:	20001ccc 	.word	0x20001ccc
 8004374:	20001e64 	.word	0x20001e64
 8004378:	20000a3c 	.word	0x20000a3c
 800437c:	200018d0 	.word	0x200018d0

08004380 <plotter_reset>:

void plotter_reset() {
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 8004384:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <plotter_reset+0x68>)
 8004386:	2200      	movs	r2, #0
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 800438a:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <plotter_reset+0x68>)
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <plotter_reset+0x68>)
 8004394:	2200      	movs	r2, #0
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <plotter_reset+0x68>)
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <plotter_reset+0x68>)
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <plotter_reset+0x68>)
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <plotter_reset+0x6c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <plotter_reset+0x6c>)
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <plotter_reset+0x6c>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <plotter_reset+0x6c>)
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80043cc:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <plotter_reset+0x6c>)
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <plotter_reset+0x6c>)
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000320 	.word	0x20000320
 80043ec:	2000037c 	.word	0x2000037c

080043f0 <plotter_update_sensors>:

void plotter_update_sensors() {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 80043f4:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80044bc <plotter_update_sensors+0xcc>
 80043f8:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80044c0 <plotter_update_sensors+0xd0>
 80043fc:	2106      	movs	r1, #6
 80043fe:	4831      	ldr	r0, [pc, #196]	@ (80044c4 <plotter_update_sensors+0xd4>)
 8004400:	f7fc fde2 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 8004404:	eef0 7a40 	vmov.f32	s15, s0
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <plotter_update_sensors+0xd8>)
 800440a:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 800440e:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80044bc <plotter_update_sensors+0xcc>
 8004412:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80044c0 <plotter_update_sensors+0xd0>
 8004416:	2107      	movs	r1, #7
 8004418:	482a      	ldr	r0, [pc, #168]	@ (80044c4 <plotter_update_sensors+0xd4>)
 800441a:	f7fc fdd5 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 800441e:	eef0 7a40 	vmov.f32	s15, s0
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <plotter_update_sensors+0xdc>)
 8004424:	edc3 7a00 	vstr	s15, [r3]

    b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8004428:	2180      	movs	r1, #128	@ 0x80
 800442a:	4829      	ldr	r0, [pc, #164]	@ (80044d0 <plotter_update_sensors+0xe0>)
 800442c:	f003 fd58 	bl	8007ee0 <HAL_GPIO_ReadPin>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <plotter_update_sensors+0xe4>)
 8004440:	601a      	str	r2, [r3, #0]
    b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8004442:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004446:	4824      	ldr	r0, [pc, #144]	@ (80044d8 <plotter_update_sensors+0xe8>)
 8004448:	f003 fd4a 	bl	8007ee0 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <plotter_update_sensors+0xec>)
 800445c:	601a      	str	r2, [r3, #0]
    b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 800445e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004462:	481d      	ldr	r0, [pc, #116]	@ (80044d8 <plotter_update_sensors+0xe8>)
 8004464:	f003 fd3c 	bl	8007ee0 <HAL_GPIO_ReadPin>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <plotter_update_sensors+0xf0>)
 8004478:	601a      	str	r2, [r3, #0]
    b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800447a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800447e:	4816      	ldr	r0, [pc, #88]	@ (80044d8 <plotter_update_sensors+0xe8>)
 8004480:	f003 fd2e 	bl	8007ee0 <HAL_GPIO_ReadPin>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <plotter_update_sensors+0xf4>)
 8004494:	601a      	str	r2, [r3, #0]

    up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8004496:	2104      	movs	r1, #4
 8004498:	480d      	ldr	r0, [pc, #52]	@ (80044d0 <plotter_update_sensors+0xe0>)
 800449a:	f003 fd21 	bl	8007ee0 <HAL_GPIO_ReadPin>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <plotter_update_sensors+0xf8>)
 80044a4:	601a      	str	r2, [r3, #0]
    low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80044a6:	2102      	movs	r1, #2
 80044a8:	4809      	ldr	r0, [pc, #36]	@ (80044d0 <plotter_update_sensors+0xe0>)
 80044aa:	f003 fd19 	bl	8007ee0 <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <plotter_update_sensors+0xfc>)
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	42480000 	.word	0x42480000
 80044c0:	c2480000 	.word	0xc2480000
 80044c4:	200004a8 	.word	0x200004a8
 80044c8:	200017e0 	.word	0x200017e0
 80044cc:	200017e4 	.word	0x200017e4
 80044d0:	48000400 	.word	0x48000400
 80044d4:	200017f0 	.word	0x200017f0
 80044d8:	48000800 	.word	0x48000800
 80044dc:	200017f4 	.word	0x200017f4
 80044e0:	200017f8 	.word	0x200017f8
 80044e4:	200017fc 	.word	0x200017fc
 80044e8:	200017e8 	.word	0x200017e8
 80044ec:	200017ec 	.word	0x200017ec

080044f0 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 80044fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80044fe:	eef0 7ae7 	vabs.f32	s15, s15
 8004502:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8004506:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <wrap_phase+0x74>)
 8004508:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 800450a:	e007      	b.n	800451c <wrap_phase+0x2c>
        phase -= two_pi;
 800450c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004510:	edd7 7a03 	vldr	s15, [r7, #12]
 8004514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004518:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 800451c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004520:	edd7 7a03 	vldr	s15, [r7, #12]
 8004524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	dcee      	bgt.n	800450c <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 800452e:	e007      	b.n	8004540 <wrap_phase+0x50>
        phase += two_pi;
 8004530:	ed97 7a01 	vldr	s14, [r7, #4]
 8004534:	edd7 7a03 	vldr	s15, [r7, #12]
 8004538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8004540:	edd7 7a01 	vldr	s15, [r7, #4]
 8004544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d4f0      	bmi.n	8004530 <wrap_phase+0x40>
    }
    return phase;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	ee07 3a90 	vmov	s15, r3
}
 8004554:	eeb0 0a67 	vmov.f32	s0, s15
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40c90fdb 	.word	0x40c90fdb

08004568 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004572:	edc7 0a02 	vstr	s1, [r7, #8]
 8004576:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 800457a:	ed97 7a03 	vldr	s14, [r7, #12]
 800457e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458a:	d501      	bpl.n	8004590 <limit_setpoint+0x28>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	e00b      	b.n	80045a8 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 8004590:	ed97 7a03 	vldr	s14, [r7, #12]
 8004594:	edd7 7a01 	vldr	s15, [r7, #4]
 8004598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	dd01      	ble.n	80045a6 <limit_setpoint+0x3e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	e000      	b.n	80045a8 <limit_setpoint+0x40>
    return value;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eeb0 0a67 	vmov.f32	s0, s15
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045d4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045dc:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <SIGNAL_init+0xb4>)
 8004602:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d828      	bhi.n	8004664 <SIGNAL_init+0xa8>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <SIGNAL_init+0x5c>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004663 	.word	0x08004663
 800461c:	08004629 	.word	0x08004629
 8004620:	08004647 	.word	0x08004647
 8004624:	08004651 	.word	0x08004651
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004634:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a0e      	ldr	r2, [pc, #56]	@ (8004674 <SIGNAL_init+0xb8>)
 800463a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004642:	621a      	str	r2, [r3, #32]
            break;
 8004644:	e00e      	b.n	8004664 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800464e:	e009      	b.n	8004664 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8004660:	e000      	b.n	8004664 <SIGNAL_init+0xa8>
            break;
 8004662:	bf00      	nop
    }
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	bf800000 	.word	0xbf800000
 8004674:	41200000 	.word	0x41200000

08004678 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	@ 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	61f8      	str	r0, [r7, #28]
 8004680:	ed87 0a06 	vstr	s0, [r7, #24]
 8004684:	edc7 0a05 	vstr	s1, [r7, #20]
 8004688:	ed87 1a04 	vstr	s2, [r7, #16]
 800468c:	edc7 1a03 	vstr	s3, [r7, #12]
 8004690:	ed87 2a02 	vstr	s4, [r7, #8]
 8004694:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80046c2:	bf00      	nop
 80046c4:	3724      	adds	r7, #36	@ 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80046ce:	b480      	push	{r7}
 80046d0:	b089      	sub	sp, #36	@ 0x24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	61f8      	str	r0, [r7, #28]
 80046d6:	ed87 0a06 	vstr	s0, [r7, #24]
 80046da:	edc7 0a05 	vstr	s1, [r7, #20]
 80046de:	ed87 1a04 	vstr	s2, [r7, #16]
 80046e2:	edc7 1a03 	vstr	s3, [r7, #12]
 80046e6:	ed87 2a02 	vstr	s4, [r7, #8]
 80046ea:	edc7 2a01 	vstr	s5, [r7, #4]
 80046ee:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2202      	movs	r2, #2
 80046f6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004722:	bf00      	nop
 8004724:	3724      	adds	r7, #36	@ 0x24
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <SIGNAL_generate>:
    sg->min_setpoint = min_setpoint;
    sg->max_setpoint = max_setpoint;
}

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 8004730:	b580      	push	{r7, lr}
 8004732:	ed2d 8b02 	vpush	{d8}
 8004736:	b08c      	sub	sp, #48	@ 0x30
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8004746:	4bb2      	ldr	r3, [pc, #712]	@ (8004a10 <SIGNAL_generate+0x2e0>)
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	edd3 6a02 	vldr	s13, [r3, #8]
 8004756:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800475a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800475e:	edd7 7a00 	vldr	s15, [r7]
 8004762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	f7ff febf 	bl	80044f0 <wrap_phase>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004782:	edd7 7a00 	vldr	s15, [r7]
 8004786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b03      	cmp	r3, #3
 8004796:	f200 8123 	bhi.w	80049e0 <SIGNAL_generate+0x2b0>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <SIGNAL_generate+0x70>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047ef 	.word	0x080047ef
 80047a8:	08004909 	.word	0x08004909
 80047ac:	08004975 	.word	0x08004975
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80047bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c0:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80047c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80047c8:	f008 fb26 	bl	800ce18 <arm_sin_f32>
 80047cc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80047d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80047da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80047e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80047ec:	e0f8      	b.n	80049e0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	7d1b      	ldrb	r3, [r3, #20]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d032      	beq.n	8004870 <SIGNAL_generate+0x140>
 800480a:	2b02      	cmp	r3, #2
 800480c:	dc48      	bgt.n	80048a0 <SIGNAL_generate+0x170>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <SIGNAL_generate+0xe8>
 8004812:	2b01      	cmp	r3, #1
 8004814:	d014      	beq.n	8004840 <SIGNAL_generate+0x110>
 8004816:	e043      	b.n	80048a0 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	ed93 7a06 	vldr	s14, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	edd3 6a07 	vldr	s13, [r3, #28]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	edd3 7a06 	vldr	s15, [r3, #24]
 800482a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800482e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800483e:	e02f      	b.n	80048a0 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	ed93 8a06 	vldr	s16, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	ed93 7a07 	vldr	s14, [r3, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004856:	edd7 0a04 	vldr	s1, [r7, #16]
 800485a:	eeb0 0a66 	vmov.f32	s0, s13
 800485e:	f009 f96d 	bl	800db3c <powf>
 8004862:	eef0 7a40 	vmov.f32	s15, s0
 8004866:	ee68 7a27 	vmul.f32	s15, s16, s15
 800486a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800486e:	e017      	b.n	80048a0 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	ed93 7a06 	vldr	s14, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	edd3 6a07 	vldr	s13, [r3, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004882:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004886:	edd7 7a04 	vldr	s15, [r7, #16]
 800488a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800488e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800489e:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 80048a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80048a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80048a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80048c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80048c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	f008 faa4 	bl	800ce18 <arm_sin_f32>
 80048d0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80048da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80048f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	da00      	bge.n	80048fe <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 80048fc:	e070      	b.n	80049e0 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004906:	e06b      	b.n	80049e0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	edd3 7a03 	vldr	s15, [r3, #12]
 8004914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004918:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800491c:	eeb0 0a67 	vmov.f32	s0, s15
 8004920:	f009 f8ec 	bl	800dafc <fmodf>
 8004924:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800492e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 800493a:	ed97 7a06 	vldr	s14, [r7, #24]
 800493e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d508      	bpl.n	800495e <SIGNAL_generate+0x22e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	edd3 7a04 	vldr	s15, [r3, #16]
 8004958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495c:	e007      	b.n	800496e <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	ed93 7a04 	vldr	s14, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 800496a:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 800496e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8004972:	e035      	b.n	80049e0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004984:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8004988:	eeb0 0a67 	vmov.f32	s0, s15
 800498c:	f009 f8b6 	bl	800dafc <fmodf>
 8004990:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 8004994:	edd7 6a08 	vldr	s13, [r7, #32]
 8004998:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800499c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a0:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80049b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80049be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80049c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 80049cc:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 80049d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80049de:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80049ec:	eeb0 1a47 	vmov.f32	s2, s14
 80049f0:	eef0 0a67 	vmov.f32	s1, s15
 80049f4:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80049f8:	f7ff fdb6 	bl	8004568 <limit_setpoint>
 80049fc:	eef0 7a40 	vmov.f32	s15, s0
}
 8004a00:	eeb0 0a67 	vmov.f32	s0, s15
 8004a04:	3730      	adds	r7, #48	@ 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	ecbd 8b02 	vpop	{d8}
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40c90fdb 	.word	0x40c90fdb

08004a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a26:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_MspInit+0x44>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004a4a:	f003 fb41 	bl	80080d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000

08004a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <NMI_Handler+0x4>

08004a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <HardFault_Handler+0x4>

08004a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <MemManage_Handler+0x4>

08004a74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <BusFault_Handler+0x4>

08004a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <UsageFault_Handler+0x4>

08004a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ab2:	f000 ffbb 	bl	8005a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f003 fa3e 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8004acc:	2010      	movs	r0, #16
 8004ace:	f003 fa37 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004adc:	4802      	ldr	r0, [pc, #8]	@ (8004ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8004ade:	f002 ff2e 	bl	800793e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200001fc 	.word	0x200001fc

08004aec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004af0:	4802      	ldr	r0, [pc, #8]	@ (8004afc <DMA1_Channel2_IRQHandler+0x10>)
 8004af2:	f002 ff24 	bl	800793e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20001ff0 	.word	0x20001ff0

08004b00 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b04:	4802      	ldr	r0, [pc, #8]	@ (8004b10 <DMA1_Channel3_IRQHandler+0x10>)
 8004b06:	f002 ff1a 	bl	800793e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20002050 	.word	0x20002050

08004b14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004b18:	4802      	ldr	r0, [pc, #8]	@ (8004b24 <DMA1_Channel4_IRQHandler+0x10>)
 8004b1a:	f002 ff10 	bl	800793e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20001f30 	.word	0x20001f30

08004b28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004b2c:	4802      	ldr	r0, [pc, #8]	@ (8004b38 <DMA1_Channel5_IRQHandler+0x10>)
 8004b2e:	f002 ff06 	bl	800793e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20001f90 	.word	0x20001f90

08004b3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8004b40:	2040      	movs	r0, #64	@ 0x40
 8004b42:	f003 f9fd 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8004b46:	2080      	movs	r0, #128	@ 0x80
 8004b48:	f003 f9fa 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004b4c:	bf00      	nop
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b54:	4803      	ldr	r0, [pc, #12]	@ (8004b64 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004b56:	f004 ff41 	bl	80099dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004b5a:	4803      	ldr	r0, [pc, #12]	@ (8004b68 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004b5c:	f004 ff3e 	bl	80099dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20001804 	.word	0x20001804
 8004b68:	20001ccc 	.word	0x20001ccc

08004b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b70:	4802      	ldr	r0, [pc, #8]	@ (8004b7c <TIM2_IRQHandler+0x10>)
 8004b72:	f004 ff33 	bl	80099dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200018d0 	.word	0x200018d0

08004b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b84:	4802      	ldr	r0, [pc, #8]	@ (8004b90 <TIM3_IRQHandler+0x10>)
 8004b86:	f004 ff29 	bl	80099dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	2000199c 	.word	0x2000199c

08004b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b98:	4802      	ldr	r0, [pc, #8]	@ (8004ba4 <TIM4_IRQHandler+0x10>)
 8004b9a:	f004 ff1f 	bl	80099dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20001a68 	.word	0x20001a68

08004ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bac:	4802      	ldr	r0, [pc, #8]	@ (8004bb8 <USART2_IRQHandler+0x10>)
 8004bae:	f006 fc69 	bl	800b484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20001e64 	.word	0x20001e64

08004bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8004bc0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004bc4:	f003 f9bc 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8004bc8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004bcc:	f003 f9b8 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8004bd0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004bd4:	f003 f9b4 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004bd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004bdc:	f003 f9b0 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004be8:	4802      	ldr	r0, [pc, #8]	@ (8004bf4 <LPUART1_IRQHandler+0x10>)
 8004bea:	f006 fc4b 	bl	800b484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20001d98 	.word	0x20001d98

08004bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <_sbrk+0x5c>)
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <_sbrk+0x60>)
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <_sbrk+0x64>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <_sbrk+0x64>)
 8004c16:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <_sbrk+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <_sbrk+0x64>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c28:	f008 ff3c 	bl	800daa4 <__errno>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	220c      	movs	r2, #12
 8004c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	e009      	b.n	8004c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c38:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <_sbrk+0x64>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <_sbrk+0x64>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <_sbrk+0x64>)
 8004c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20020000 	.word	0x20020000
 8004c58:	00000400 	.word	0x00000400
 8004c5c:	20001800 	.word	0x20001800
 8004c60:	20002200 	.word	0x20002200

08004c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <SystemInit+0x20>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <SystemInit+0x20>)
 8004c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b098      	sub	sp, #96	@ 0x60
 8004c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	609a      	str	r2, [r3, #8]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	615a      	str	r2, [r3, #20]
 8004cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	2234      	movs	r2, #52	@ 0x34
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f008 fedd 	bl	800da74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cba:	4b3b      	ldr	r3, [pc, #236]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cbc:	4a3b      	ldr	r2, [pc, #236]	@ (8004dac <MX_TIM1_Init+0x124>)
 8004cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004cc0:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc6:	4b38      	ldr	r3, [pc, #224]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cd4:	4b34      	ldr	r3, [pc, #208]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cda:	4b33      	ldr	r3, [pc, #204]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ce0:	4b31      	ldr	r3, [pc, #196]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004ce6:	4830      	ldr	r0, [pc, #192]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004ce8:	f004 faca 	bl	8009280 <HAL_TIM_PWM_Init>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004cf2:	f7fe ff83 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d06:	4619      	mov	r1, r3
 8004d08:	4827      	ldr	r0, [pc, #156]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004d0a:	f006 f8db 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004d14:	f7fe ff72 	bl	8003bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d18:	2360      	movs	r3, #96	@ 0x60
 8004d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d20:	2300      	movs	r3, #0
 8004d22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d24:	2300      	movs	r3, #0
 8004d26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d30:	2300      	movs	r3, #0
 8004d32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004d38:	220c      	movs	r2, #12
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	481a      	ldr	r0, [pc, #104]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004d3e:	f004 ffc7 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004d48:	f7fe ff58 	bl	8003bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	4807      	ldr	r0, [pc, #28]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004d8a:	f006 f931 	bl	800aff0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004d94:	f7fe ff32 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d98:	4803      	ldr	r0, [pc, #12]	@ (8004da8 <MX_TIM1_Init+0x120>)
 8004d9a:	f000 fb77 	bl	800548c <HAL_TIM_MspPostInit>

}
 8004d9e:	bf00      	nop
 8004da0:	3760      	adds	r7, #96	@ 0x60
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20001804 	.word	0x20001804
 8004dac:	40012c00 	.word	0x40012c00

08004db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004db6:	f107 0310 	add.w	r3, r7, #16
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004dd8:	22a9      	movs	r2, #169	@ 0xa9
 8004dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004de2:	4b19      	ldr	r3, [pc, #100]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dea:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df0:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004df6:	4814      	ldr	r0, [pc, #80]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004df8:	f004 f8f6 	bl	8008fe8 <HAL_TIM_Base_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004e02:	f7fe fefb 	bl	8003bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4619      	mov	r1, r3
 8004e12:	480d      	ldr	r0, [pc, #52]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004e14:	f005 f870 	bl	8009ef8 <HAL_TIM_ConfigClockSource>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e1e:	f7fe feed 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4806      	ldr	r0, [pc, #24]	@ (8004e48 <MX_TIM2_Init+0x98>)
 8004e30:	f006 f848 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e3a:	f7fe fedf 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e3e:	bf00      	nop
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200018d0 	.word	0x200018d0

08004e4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	@ 0x30
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	2224      	movs	r2, #36	@ 0x24
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f008 fe0a 	bl	800da74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e60:	463b      	mov	r3, r7
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e6a:	4b21      	ldr	r3, [pc, #132]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ef4 <MX_TIM3_Init+0xa8>)
 8004e6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e90:	2303      	movs	r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004eb4:	f107 030c 	add.w	r3, r7, #12
 8004eb8:	4619      	mov	r1, r3
 8004eba:	480d      	ldr	r0, [pc, #52]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004ebc:	f004 fc4c 	bl	8009758 <HAL_TIM_Encoder_Init>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004ec6:	f7fe fe99 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4806      	ldr	r0, [pc, #24]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004ed8:	f005 fff4 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004ee2:	f7fe fe8b 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ee6:	bf00      	nop
 8004ee8:	3730      	adds	r7, #48	@ 0x30
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000199c 	.word	0x2000199c
 8004ef4:	40000400 	.word	0x40000400

08004ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	@ 0x30
 8004efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	2224      	movs	r2, #36	@ 0x24
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f008 fdb4 	bl	800da74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f16:	4b21      	ldr	r3, [pc, #132]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f18:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <MX_TIM4_Init+0xa8>)
 8004f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f22:	4b1e      	ldr	r3, [pc, #120]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f28:	4b1c      	ldr	r3, [pc, #112]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f30:	4b1a      	ldr	r3, [pc, #104]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f36:	4b19      	ldr	r3, [pc, #100]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f54:	2301      	movs	r3, #1
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	4619      	mov	r1, r3
 8004f66:	480d      	ldr	r0, [pc, #52]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f68:	f004 fbf6 	bl	8009758 <HAL_TIM_Encoder_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004f72:	f7fe fe43 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f7e:	463b      	mov	r3, r7
 8004f80:	4619      	mov	r1, r3
 8004f82:	4806      	ldr	r0, [pc, #24]	@ (8004f9c <MX_TIM4_Init+0xa4>)
 8004f84:	f005 ff9e 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004f8e:	f7fe fe35 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f92:	bf00      	nop
 8004f94:	3730      	adds	r7, #48	@ 0x30
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20001a68 	.word	0x20001a68
 8004fa0:	40000800 	.word	0x40000800

08004fa4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	@ 0x30
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f008 fd5e 	bl	800da74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fb8:	463b      	mov	r3, r7
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004fc2:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fc4:	4a21      	ldr	r2, [pc, #132]	@ (800504c <MX_TIM5_Init+0xa8>)
 8004fc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fce:	4b1e      	ldr	r3, [pc, #120]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe2:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005000:	2301      	movs	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005004:	2300      	movs	r3, #0
 8005006:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800500c:	f107 030c 	add.w	r3, r7, #12
 8005010:	4619      	mov	r1, r3
 8005012:	480d      	ldr	r0, [pc, #52]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8005014:	f004 fba0 	bl	8009758 <HAL_TIM_Encoder_Init>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800501e:	f7fe fded 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800502a:	463b      	mov	r3, r7
 800502c:	4619      	mov	r1, r3
 800502e:	4806      	ldr	r0, [pc, #24]	@ (8005048 <MX_TIM5_Init+0xa4>)
 8005030:	f005 ff48 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800503a:	f7fe fddf 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800503e:	bf00      	nop
 8005040:	3730      	adds	r7, #48	@ 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001b34 	.word	0x20001b34
 800504c:	40000c00 	.word	0x40000c00

08005050 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b09c      	sub	sp, #112	@ 0x70
 8005054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005056:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005064:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005070:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	611a      	str	r2, [r3, #16]
 8005080:	615a      	str	r2, [r3, #20]
 8005082:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	2234      	movs	r2, #52	@ 0x34
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f008 fcf2 	bl	800da74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005090:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <MX_TIM8_Init+0x174>)
 8005092:	4a4d      	ldr	r2, [pc, #308]	@ (80051c8 <MX_TIM8_Init+0x178>)
 8005094:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005096:	4b4b      	ldr	r3, [pc, #300]	@ (80051c4 <MX_TIM8_Init+0x174>)
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800509c:	4b49      	ldr	r3, [pc, #292]	@ (80051c4 <MX_TIM8_Init+0x174>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80050a2:	4b48      	ldr	r3, [pc, #288]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80050aa:	4b46      	ldr	r3, [pc, #280]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80050b2:	4b44      	ldr	r3, [pc, #272]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050b8:	4b42      	ldr	r3, [pc, #264]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80050be:	4841      	ldr	r0, [pc, #260]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050c0:	f003 ff92 	bl	8008fe8 <HAL_TIM_Base_Init>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80050ca:	f7fe fd97 	bl	8003bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050d2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80050d4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80050d8:	4619      	mov	r1, r3
 80050da:	483a      	ldr	r0, [pc, #232]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050dc:	f004 ff0c 	bl	8009ef8 <HAL_TIM_ConfigClockSource>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80050e6:	f7fe fd89 	bl	8003bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80050ea:	4836      	ldr	r0, [pc, #216]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80050ec:	f004 f8c8 	bl	8009280 <HAL_TIM_PWM_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80050f6:	f7fe fd81 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005102:	2300      	movs	r3, #0
 8005104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005106:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800510a:	4619      	mov	r1, r3
 800510c:	482d      	ldr	r0, [pc, #180]	@ (80051c4 <MX_TIM8_Init+0x174>)
 800510e:	f005 fed9 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8005118:	f7fe fd70 	bl	8003bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800511c:	2360      	movs	r3, #96	@ 0x60
 800511e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005124:	2300      	movs	r3, #0
 8005126:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005128:	2300      	movs	r3, #0
 800512a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800512c:	2300      	movs	r3, #0
 800512e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005130:	2300      	movs	r3, #0
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005134:	2300      	movs	r3, #0
 8005136:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005138:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800513c:	2200      	movs	r2, #0
 800513e:	4619      	mov	r1, r3
 8005140:	4820      	ldr	r0, [pc, #128]	@ (80051c4 <MX_TIM8_Init+0x174>)
 8005142:	f004 fdc5 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800514c:	f7fe fd56 	bl	8003bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005150:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005154:	2204      	movs	r2, #4
 8005156:	4619      	mov	r1, r3
 8005158:	481a      	ldr	r0, [pc, #104]	@ (80051c4 <MX_TIM8_Init+0x174>)
 800515a:	f004 fdb9 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8005164:	f7fe fd4a 	bl	8003bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005168:	2300      	movs	r3, #0
 800516a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800516c:	2300      	movs	r3, #0
 800516e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800517c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005180:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005186:	2300      	movs	r3, #0
 8005188:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800518e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005198:	2300      	movs	r3, #0
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4807      	ldr	r0, [pc, #28]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80051a6:	f005 ff23 	bl	800aff0 <HAL_TIMEx_ConfigBreakDeadTime>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80051b0:	f7fe fd24 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80051b4:	4803      	ldr	r0, [pc, #12]	@ (80051c4 <MX_TIM8_Init+0x174>)
 80051b6:	f000 f969 	bl	800548c <HAL_TIM_MspPostInit>

}
 80051ba:	bf00      	nop
 80051bc:	3770      	adds	r7, #112	@ 0x70
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20001c00 	.word	0x20001c00
 80051c8:	40013400 	.word	0x40013400

080051cc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80051d0:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <MX_TIM16_Init+0x5c>)
 80051d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051d8:	22a9      	movs	r2, #169	@ 0xa9
 80051da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051e4:	f240 4279 	movw	r2, #1145	@ 0x479
 80051e8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80051fc:	4809      	ldr	r0, [pc, #36]	@ (8005224 <MX_TIM16_Init+0x58>)
 80051fe:	f003 fef3 	bl	8008fe8 <HAL_TIM_Base_Init>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005208:	f7fe fcf8 	bl	8003bfc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800520c:	2108      	movs	r1, #8
 800520e:	4805      	ldr	r0, [pc, #20]	@ (8005224 <MX_TIM16_Init+0x58>)
 8005210:	f004 f9ac 	bl	800956c <HAL_TIM_OnePulse_Init>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800521a:	f7fe fcef 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20001ccc 	.word	0x20001ccc
 8005228:	40014400 	.word	0x40014400

0800522c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a0d      	ldr	r2, [pc, #52]	@ (8005270 <HAL_TIM_PWM_MspInit+0x44>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d113      	bne.n	8005266 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <HAL_TIM_PWM_MspInit+0x48>)
 8005240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005242:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <HAL_TIM_PWM_MspInit+0x48>)
 8005244:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005248:	6613      	str	r3, [r2, #96]	@ 0x60
 800524a:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <HAL_TIM_PWM_MspInit+0x48>)
 800524c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005256:	2200      	movs	r2, #0
 8005258:	2100      	movs	r1, #0
 800525a:	2019      	movs	r0, #25
 800525c:	f002 f957 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005260:	2019      	movs	r0, #25
 8005262:	f002 f96e 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40021000 	.word	0x40021000

08005278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005288:	d114      	bne.n	80052b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800528a:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	4a21      	ldr	r2, [pc, #132]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
 8005296:	4b1f      	ldr	r3, [pc, #124]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	201c      	movs	r0, #28
 80052a8:	f002 f931 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052ac:	201c      	movs	r0, #28
 80052ae:	f002 f948 	bl	8007542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80052b2:	e02a      	b.n	800530a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a17      	ldr	r2, [pc, #92]	@ (8005318 <HAL_TIM_Base_MspInit+0xa0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d10c      	bne.n	80052d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80052ca:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
}
 80052d6:	e018      	b.n	800530a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a0f      	ldr	r2, [pc, #60]	@ (800531c <HAL_TIM_Base_MspInit+0xa4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d113      	bne.n	800530a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_TIM_Base_MspInit+0x9c>)
 80052f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	2019      	movs	r0, #25
 8005300:	f002 f905 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005304:	2019      	movs	r0, #25
 8005306:	f002 f91c 	bl	8007542 <HAL_NVIC_EnableIRQ>
}
 800530a:	bf00      	nop
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
 8005318:	40013400 	.word	0x40013400
 800531c:	40014400 	.word	0x40014400

08005320 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a4f      	ldr	r2, [pc, #316]	@ (800547c <HAL_TIM_Encoder_MspInit+0x15c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d131      	bne.n	80053a6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005342:	4b4f      	ldr	r3, [pc, #316]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	4a4e      	ldr	r2, [pc, #312]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	6593      	str	r3, [r2, #88]	@ 0x58
 800534e:	4b4c      	ldr	r3, [pc, #304]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 800535c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535e:	4a48      	ldr	r2, [pc, #288]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005366:	4b46      	ldr	r3, [pc, #280]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005372:	23c0      	movs	r3, #192	@ 0xc0
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005376:	2302      	movs	r3, #2
 8005378:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537a:	2300      	movs	r3, #0
 800537c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537e:	2300      	movs	r3, #0
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005382:	2302      	movs	r3, #2
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800538a:	4619      	mov	r1, r3
 800538c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005390:	f002 fc24 	bl	8007bdc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005394:	2200      	movs	r2, #0
 8005396:	2100      	movs	r1, #0
 8005398:	201d      	movs	r0, #29
 800539a:	f002 f8b8 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800539e:	201d      	movs	r0, #29
 80053a0:	f002 f8cf 	bl	8007542 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80053a4:	e065      	b.n	8005472 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a36      	ldr	r2, [pc, #216]	@ (8005484 <HAL_TIM_Encoder_MspInit+0x164>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d132      	bne.n	8005416 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053b0:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	4a32      	ldr	r2, [pc, #200]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80053bc:	4b30      	ldr	r3, [pc, #192]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 80053d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e6:	2302      	movs	r3, #2
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ee:	2300      	movs	r3, #0
 80053f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80053f2:	230a      	movs	r3, #10
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053fa:	4619      	mov	r1, r3
 80053fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005400:	f002 fbec 	bl	8007bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005404:	2200      	movs	r2, #0
 8005406:	2100      	movs	r1, #0
 8005408:	201e      	movs	r0, #30
 800540a:	f002 f880 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800540e:	201e      	movs	r0, #30
 8005410:	f002 f897 	bl	8007542 <HAL_NVIC_EnableIRQ>
}
 8005414:	e02d      	b.n	8005472 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <HAL_TIM_Encoder_MspInit+0x168>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d128      	bne.n	8005472 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005420:	4b17      	ldr	r3, [pc, #92]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	4a16      	ldr	r2, [pc, #88]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	6593      	str	r3, [r2, #88]	@ 0x58
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005438:	4b11      	ldr	r3, [pc, #68]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 800543a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543c:	4a10      	ldr	r2, [pc, #64]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005444:	4b0e      	ldr	r3, [pc, #56]	@ (8005480 <HAL_TIM_Encoder_MspInit+0x160>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005450:	2303      	movs	r3, #3
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005454:	2302      	movs	r3, #2
 8005456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005458:	2300      	movs	r3, #0
 800545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545c:	2300      	movs	r3, #0
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005460:	2302      	movs	r3, #2
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800546e:	f002 fbb5 	bl	8007bdc <HAL_GPIO_Init>
}
 8005472:	bf00      	nop
 8005474:	3738      	adds	r7, #56	@ 0x38
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40000400 	.word	0x40000400
 8005480:	40021000 	.word	0x40021000
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00

0800548c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a22      	ldr	r2, [pc, #136]	@ (8005534 <HAL_TIM_MspPostInit+0xa8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d11c      	bne.n	80054e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80054c6:	2308      	movs	r3, #8
 80054c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80054d6:	2302      	movs	r3, #2
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	4619      	mov	r1, r3
 80054e0:	4816      	ldr	r0, [pc, #88]	@ (800553c <HAL_TIM_MspPostInit+0xb0>)
 80054e2:	f002 fb7b 	bl	8007bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80054e6:	e020      	b.n	800552a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a14      	ldr	r2, [pc, #80]	@ (8005540 <HAL_TIM_MspPostInit+0xb4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d11b      	bne.n	800552a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054f2:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f6:	4a10      	ldr	r2, [pc, #64]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <HAL_TIM_MspPostInit+0xac>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800550a:	23c0      	movs	r3, #192	@ 0xc0
 800550c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550e:	2302      	movs	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800551a:	2304      	movs	r3, #4
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4619      	mov	r1, r3
 8005524:	4805      	ldr	r0, [pc, #20]	@ (800553c <HAL_TIM_MspPostInit+0xb0>)
 8005526:	f002 fb59 	bl	8007bdc <HAL_GPIO_Init>
}
 800552a:	bf00      	nop
 800552c:	3728      	adds	r7, #40	@ 0x28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40021000 	.word	0x40021000
 800553c:	48000800 	.word	0x48000800
 8005540:	40013400 	.word	0x40013400

08005544 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005548:	4b20      	ldr	r3, [pc, #128]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 800554a:	4a21      	ldr	r2, [pc, #132]	@ (80055d0 <MX_LPUART1_UART_Init+0x8c>)
 800554c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800554e:	4b1f      	ldr	r3, [pc, #124]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005550:	4a20      	ldr	r2, [pc, #128]	@ (80055d4 <MX_LPUART1_UART_Init+0x90>)
 8005552:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005554:	4b1d      	ldr	r3, [pc, #116]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800555a:	4b1c      	ldr	r3, [pc, #112]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 800555c:	2200      	movs	r2, #0
 800555e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005560:	4b1a      	ldr	r3, [pc, #104]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005562:	2200      	movs	r2, #0
 8005564:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005566:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005568:	220c      	movs	r2, #12
 800556a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800556c:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005572:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005574:	2200      	movs	r2, #0
 8005576:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005578:	4b14      	ldr	r3, [pc, #80]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 800557a:	2200      	movs	r2, #0
 800557c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800557e:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005580:	2200      	movs	r2, #0
 8005582:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005584:	4811      	ldr	r0, [pc, #68]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005586:	f005 fe17 	bl	800b1b8 <HAL_UART_Init>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8005590:	f7fe fb34 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005594:	2100      	movs	r1, #0
 8005596:	480d      	ldr	r0, [pc, #52]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 8005598:	f007 fb74 	bl	800cc84 <HAL_UARTEx_SetTxFifoThreshold>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80055a2:	f7fe fb2b 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055a6:	2100      	movs	r1, #0
 80055a8:	4808      	ldr	r0, [pc, #32]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 80055aa:	f007 fba9 	bl	800cd00 <HAL_UARTEx_SetRxFifoThreshold>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80055b4:	f7fe fb22 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80055b8:	4804      	ldr	r0, [pc, #16]	@ (80055cc <MX_LPUART1_UART_Init+0x88>)
 80055ba:	f007 fb2a 	bl	800cc12 <HAL_UARTEx_DisableFifoMode>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80055c4:	f7fe fb1a 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80055c8:	bf00      	nop
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20001d98 	.word	0x20001d98
 80055d0:	40008000 	.word	0x40008000
 80055d4:	001e8480 	.word	0x001e8480

080055d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055dc:	4b23      	ldr	r3, [pc, #140]	@ (800566c <MX_USART2_UART_Init+0x94>)
 80055de:	4a24      	ldr	r2, [pc, #144]	@ (8005670 <MX_USART2_UART_Init+0x98>)
 80055e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <MX_USART2_UART_Init+0x94>)
 80055e4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80055e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80055ea:	4b20      	ldr	r3, [pc, #128]	@ (800566c <MX_USART2_UART_Init+0x94>)
 80055ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055f2:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <MX_USART2_UART_Init+0x94>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80055f8:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <MX_USART2_UART_Init+0x94>)
 80055fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005600:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005602:	220c      	movs	r2, #12
 8005604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005606:	4b19      	ldr	r3, [pc, #100]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800560c:	4b17      	ldr	r3, [pc, #92]	@ (800566c <MX_USART2_UART_Init+0x94>)
 800560e:	2200      	movs	r2, #0
 8005610:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005614:	2200      	movs	r2, #0
 8005616:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005618:	4b14      	ldr	r3, [pc, #80]	@ (800566c <MX_USART2_UART_Init+0x94>)
 800561a:	2200      	movs	r2, #0
 800561c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800561e:	4b13      	ldr	r3, [pc, #76]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005620:	2200      	movs	r2, #0
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005624:	4811      	ldr	r0, [pc, #68]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005626:	f005 fdc7 	bl	800b1b8 <HAL_UART_Init>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005630:	f7fe fae4 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005634:	2100      	movs	r1, #0
 8005636:	480d      	ldr	r0, [pc, #52]	@ (800566c <MX_USART2_UART_Init+0x94>)
 8005638:	f007 fb24 	bl	800cc84 <HAL_UARTEx_SetTxFifoThreshold>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8005642:	f7fe fadb 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005646:	2100      	movs	r1, #0
 8005648:	4808      	ldr	r0, [pc, #32]	@ (800566c <MX_USART2_UART_Init+0x94>)
 800564a:	f007 fb59 	bl	800cd00 <HAL_UARTEx_SetRxFifoThreshold>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005654:	f7fe fad2 	bl	8003bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005658:	4804      	ldr	r0, [pc, #16]	@ (800566c <MX_USART2_UART_Init+0x94>)
 800565a:	f007 fada 	bl	800cc12 <HAL_UARTEx_DisableFifoMode>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005664:	f7fe faca 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20001e64 	.word	0x20001e64
 8005670:	40004400 	.word	0x40004400

08005674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0a0      	sub	sp, #128	@ 0x80
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800568c:	f107 0318 	add.w	r3, r7, #24
 8005690:	2254      	movs	r2, #84	@ 0x54
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f008 f9ed 	bl	800da74 <memset>
  if(uartHandle->Instance==LPUART1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a99      	ldr	r2, [pc, #612]	@ (8005904 <HAL_UART_MspInit+0x290>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	f040 8093 	bne.w	80057cc <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80056a6:	2320      	movs	r3, #32
 80056a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80056aa:	2300      	movs	r3, #0
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056ae:	f107 0318 	add.w	r3, r7, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f003 fa4a 	bl	8008b4c <HAL_RCCEx_PeriphCLKConfig>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80056be:	f7fe fa9d 	bl	8003bfc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80056c2:	4b91      	ldr	r3, [pc, #580]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c6:	4a90      	ldr	r2, [pc, #576]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80056ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056da:	4b8b      	ldr	r3, [pc, #556]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	4a8a      	ldr	r2, [pc, #552]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056e6:	4b88      	ldr	r3, [pc, #544]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80056f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f8:	2302      	movs	r3, #2
 80056fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005700:	2300      	movs	r3, #0
 8005702:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005704:	2308      	movs	r3, #8
 8005706:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005708:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800570c:	4619      	mov	r1, r3
 800570e:	487f      	ldr	r0, [pc, #508]	@ (800590c <HAL_UART_MspInit+0x298>)
 8005710:	f002 fa64 	bl	8007bdc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8005714:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005716:	4a7f      	ldr	r2, [pc, #508]	@ (8005914 <HAL_UART_MspInit+0x2a0>)
 8005718:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800571a:	4b7d      	ldr	r3, [pc, #500]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 800571c:	2222      	movs	r2, #34	@ 0x22
 800571e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005720:	4b7b      	ldr	r3, [pc, #492]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005726:	4b7a      	ldr	r3, [pc, #488]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005728:	2200      	movs	r2, #0
 800572a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800572c:	4b78      	ldr	r3, [pc, #480]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 800572e:	2280      	movs	r2, #128	@ 0x80
 8005730:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005732:	4b77      	ldr	r3, [pc, #476]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005734:	2200      	movs	r2, #0
 8005736:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005738:	4b75      	ldr	r3, [pc, #468]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 800573a:	2200      	movs	r2, #0
 800573c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800573e:	4b74      	ldr	r3, [pc, #464]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005740:	2200      	movs	r2, #0
 8005742:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005744:	4b72      	ldr	r3, [pc, #456]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005746:	2200      	movs	r2, #0
 8005748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800574a:	4871      	ldr	r0, [pc, #452]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 800574c:	f001 ff14 	bl	8007578 <HAL_DMA_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005756:	f7fe fa51 	bl	8003bfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a6c      	ldr	r2, [pc, #432]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005762:	4a6b      	ldr	r2, [pc, #428]	@ (8005910 <HAL_UART_MspInit+0x29c>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8005768:	4b6b      	ldr	r3, [pc, #428]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 800576a:	4a6c      	ldr	r2, [pc, #432]	@ (800591c <HAL_UART_MspInit+0x2a8>)
 800576c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800576e:	4b6a      	ldr	r3, [pc, #424]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 8005770:	2223      	movs	r2, #35	@ 0x23
 8005772:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005774:	4b68      	ldr	r3, [pc, #416]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 8005776:	2210      	movs	r2, #16
 8005778:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800577a:	4b67      	ldr	r3, [pc, #412]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 800577c:	2200      	movs	r2, #0
 800577e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005780:	4b65      	ldr	r3, [pc, #404]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 8005782:	2280      	movs	r2, #128	@ 0x80
 8005784:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005786:	4b64      	ldr	r3, [pc, #400]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 8005788:	2200      	movs	r2, #0
 800578a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800578c:	4b62      	ldr	r3, [pc, #392]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005792:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 8005794:	2200      	movs	r2, #0
 8005796:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005798:	4b5f      	ldr	r3, [pc, #380]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 800579a:	2200      	movs	r2, #0
 800579c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800579e:	485e      	ldr	r0, [pc, #376]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 80057a0:	f001 feea 	bl	8007578 <HAL_DMA_Init>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80057aa:	f7fe fa27 	bl	8003bfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a59      	ldr	r2, [pc, #356]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 80057b2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80057b4:	4a58      	ldr	r2, [pc, #352]	@ (8005918 <HAL_UART_MspInit+0x2a4>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	205b      	movs	r0, #91	@ 0x5b
 80057c0:	f001 fea5 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80057c4:	205b      	movs	r0, #91	@ 0x5b
 80057c6:	f001 febc 	bl	8007542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80057ca:	e097      	b.n	80058fc <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a53      	ldr	r2, [pc, #332]	@ (8005920 <HAL_UART_MspInit+0x2ac>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f040 8092 	bne.w	80058fc <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057d8:	2302      	movs	r3, #2
 80057da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057dc:	2300      	movs	r3, #0
 80057de:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057e0:	f107 0318 	add.w	r3, r7, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f003 f9b1 	bl	8008b4c <HAL_RCCEx_PeriphCLKConfig>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80057f0:	f7fe fa04 	bl	8003bfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057f4:	4b44      	ldr	r3, [pc, #272]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	4a43      	ldr	r2, [pc, #268]	@ (8005908 <HAL_UART_MspInit+0x294>)
 80057fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005800:	4b41      	ldr	r3, [pc, #260]	@ (8005908 <HAL_UART_MspInit+0x294>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800580c:	4b3e      	ldr	r3, [pc, #248]	@ (8005908 <HAL_UART_MspInit+0x294>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005810:	4a3d      	ldr	r2, [pc, #244]	@ (8005908 <HAL_UART_MspInit+0x294>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005818:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <HAL_UART_MspInit+0x294>)
 800581a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005824:	230c      	movs	r3, #12
 8005826:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005828:	2302      	movs	r3, #2
 800582a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582c:	2300      	movs	r3, #0
 800582e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005830:	2300      	movs	r3, #0
 8005832:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005834:	2307      	movs	r3, #7
 8005836:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005838:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005842:	f002 f9cb 	bl	8007bdc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005846:	4b37      	ldr	r3, [pc, #220]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005848:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <HAL_UART_MspInit+0x2b4>)
 800584a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800584c:	4b35      	ldr	r3, [pc, #212]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 800584e:	221a      	movs	r2, #26
 8005850:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005852:	4b34      	ldr	r3, [pc, #208]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005854:	2200      	movs	r2, #0
 8005856:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005858:	4b32      	ldr	r3, [pc, #200]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800585e:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005860:	2280      	movs	r2, #128	@ 0x80
 8005862:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005864:	4b2f      	ldr	r3, [pc, #188]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005866:	2200      	movs	r2, #0
 8005868:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800586a:	4b2e      	ldr	r3, [pc, #184]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005870:	4b2c      	ldr	r3, [pc, #176]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005872:	2200      	movs	r2, #0
 8005874:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005876:	4b2b      	ldr	r3, [pc, #172]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005878:	2200      	movs	r2, #0
 800587a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800587c:	4829      	ldr	r0, [pc, #164]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 800587e:	f001 fe7b 	bl	8007578 <HAL_DMA_Init>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005888:	f7fe f9b8 	bl	8003bfc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005894:	4a23      	ldr	r2, [pc, #140]	@ (8005924 <HAL_UART_MspInit+0x2b0>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800589a:	4b24      	ldr	r3, [pc, #144]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 800589c:	4a24      	ldr	r2, [pc, #144]	@ (8005930 <HAL_UART_MspInit+0x2bc>)
 800589e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80058a0:	4b22      	ldr	r3, [pc, #136]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058a2:	221b      	movs	r2, #27
 80058a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058a6:	4b21      	ldr	r3, [pc, #132]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058a8:	2210      	movs	r2, #16
 80058aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058ac:	4b1f      	ldr	r3, [pc, #124]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058b2:	4b1e      	ldr	r3, [pc, #120]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058b4:	2280      	movs	r2, #128	@ 0x80
 80058b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058b8:	4b1c      	ldr	r3, [pc, #112]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058be:	4b1b      	ldr	r3, [pc, #108]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80058c4:	4b19      	ldr	r3, [pc, #100]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058ca:	4b18      	ldr	r3, [pc, #96]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80058d0:	4816      	ldr	r0, [pc, #88]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058d2:	f001 fe51 	bl	8007578 <HAL_DMA_Init>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80058dc:	f7fe f98e 	bl	8003bfc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a12      	ldr	r2, [pc, #72]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058e4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80058e6:	4a11      	ldr	r2, [pc, #68]	@ (800592c <HAL_UART_MspInit+0x2b8>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2100      	movs	r1, #0
 80058f0:	2026      	movs	r0, #38	@ 0x26
 80058f2:	f001 fe0c 	bl	800750e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80058f6:	2026      	movs	r0, #38	@ 0x26
 80058f8:	f001 fe23 	bl	8007542 <HAL_NVIC_EnableIRQ>
}
 80058fc:	bf00      	nop
 80058fe:	3780      	adds	r7, #128	@ 0x80
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40008000 	.word	0x40008000
 8005908:	40021000 	.word	0x40021000
 800590c:	48000400 	.word	0x48000400
 8005910:	20001f30 	.word	0x20001f30
 8005914:	40020044 	.word	0x40020044
 8005918:	20001f90 	.word	0x20001f90
 800591c:	40020058 	.word	0x40020058
 8005920:	40004400 	.word	0x40004400
 8005924:	20001ff0 	.word	0x20001ff0
 8005928:	4002001c 	.word	0x4002001c
 800592c:	20002050 	.word	0x20002050
 8005930:	40020030 	.word	0x40020030

08005934 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8005934:	480d      	ldr	r0, [pc, #52]	@ (800596c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005936:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005938:	f7ff f994 	bl	8004c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800593c:	480c      	ldr	r0, [pc, #48]	@ (8005970 <LoopForever+0x6>)
  ldr r1, =_edata
 800593e:	490d      	ldr	r1, [pc, #52]	@ (8005974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005940:	4a0d      	ldr	r2, [pc, #52]	@ (8005978 <LoopForever+0xe>)
  movs r3, #0
 8005942:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005944:	e002      	b.n	800594c <LoopCopyDataInit>

08005946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800594a:	3304      	adds	r3, #4

0800594c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800594c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800594e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005950:	d3f9      	bcc.n	8005946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005952:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005954:	4c0a      	ldr	r4, [pc, #40]	@ (8005980 <LoopForever+0x16>)
  movs r3, #0
 8005956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005958:	e001      	b.n	800595e <LoopFillZerobss>

0800595a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800595a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800595c:	3204      	adds	r2, #4

0800595e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800595e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005960:	d3fb      	bcc.n	800595a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005962:	f008 f8a5 	bl	800dab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005966:	f7fd ff53 	bl	8003810 <main>

0800596a <LoopForever>:

LoopForever:
    b LoopForever
 800596a:	e7fe      	b.n	800596a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800596c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005974:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8005978:	0800fab4 	.word	0x0800fab4
  ldr r2, =_sbss
 800597c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8005980:	200021fc 	.word	0x200021fc

08005984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005984:	e7fe      	b.n	8005984 <ADC1_2_IRQHandler>

08005986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005990:	2003      	movs	r0, #3
 8005992:	f001 fdb1 	bl	80074f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005996:	2000      	movs	r0, #0
 8005998:	f000 f80e 	bl	80059b8 <HAL_InitTick>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	71fb      	strb	r3, [r7, #7]
 80059a6:	e001      	b.n	80059ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059a8:	f7ff f834 	bl	8004a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059ac:	79fb      	ldrb	r3, [r7, #7]

}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80059c4:	4b16      	ldr	r3, [pc, #88]	@ (8005a20 <HAL_InitTick+0x68>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80059cc:	4b15      	ldr	r3, [pc, #84]	@ (8005a24 <HAL_InitTick+0x6c>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_InitTick+0x68>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80059d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fdbc 	bl	800755e <HAL_SYSTICK_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10f      	bne.n	8005a0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d809      	bhi.n	8005a06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059f2:	2200      	movs	r2, #0
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	f001 fd88 	bl	800750e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <HAL_InitTick+0x70>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e007      	b.n	8005a16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
 8005a0a:	e004      	b.n	8005a16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e001      	b.n	8005a16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2000011c 	.word	0x2000011c
 8005a24:	20000114 	.word	0x20000114
 8005a28:	20000118 	.word	0x20000118

08005a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HAL_IncTick+0x1c>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <HAL_IncTick+0x20>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4413      	add	r3, r2
 8005a3a:	4a03      	ldr	r2, [pc, #12]	@ (8005a48 <HAL_IncTick+0x1c>)
 8005a3c:	6013      	str	r3, [r2, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	200020b0 	.word	0x200020b0
 8005a4c:	2000011c 	.word	0x2000011c

08005a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return uwTick;
 8005a54:	4b03      	ldr	r3, [pc, #12]	@ (8005a64 <HAL_GetTick+0x14>)
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	200020b0 	.word	0x200020b0

08005a68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3360      	adds	r3, #96	@ 0x60
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b08      	ldr	r3, [pc, #32]	@ (8005b14 <LL_ADC_SetOffset+0x44>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	03fff000 	.word	0x03fff000

08005b18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3360      	adds	r3, #96	@ 0x60
 8005b26:	461a      	mov	r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3360      	adds	r3, #96	@ 0x60
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3360      	adds	r3, #96	@ 0x60
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3360      	adds	r3, #96	@ 0x60
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	615a      	str	r2, [r3, #20]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3330      	adds	r3, #48	@ 0x30
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	4413      	add	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	211f      	movs	r1, #31
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	401a      	ands	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0e9b      	lsrs	r3, r3, #26
 8005c6a:	f003 011f 	and.w	r1, r3, #31
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	0e5b      	lsrs	r3, r3, #25
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	4413      	add	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0d1b      	lsrs	r3, r3, #20
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2107      	movs	r1, #7
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	0d1b      	lsrs	r3, r3, #20
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0318 	and.w	r3, r3, #24
 8005d02:	4908      	ldr	r1, [pc, #32]	@ (8005d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d04:	40d9      	lsrs	r1, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	400b      	ands	r3, r1
 8005d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	0007ffff 	.word	0x0007ffff

08005d28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 031f 	and.w	r3, r3, #31
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6093      	str	r3, [r2, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7c:	d101      	bne.n	8005d82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dcc:	d101      	bne.n	8005dd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005df4:	f043 0201 	orr.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e1c:	f043 0202 	orr.w	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <LL_ADC_IsEnabled+0x18>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <LL_ADC_IsEnabled+0x1a>
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d101      	bne.n	8005e6e <LL_ADC_IsDisableOngoing+0x18>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <LL_ADC_IsDisableOngoing+0x1a>
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e90:	f043 0204 	orr.w	r2, r3, #4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d101      	bne.n	8005ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d101      	bne.n	8005ee2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e1a9      	b.n	800625e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc ffc5 	bl	8002ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ff19 	bl	8005d68 <LL_ADC_IsDeepPowerDownEnabled>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff feff 	bl	8005d44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff34 	bl	8005db8 <LL_ADC_IsInternalRegulatorEnabled>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d115      	bne.n	8005f82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff18 	bl	8005d90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f60:	4b9c      	ldr	r3, [pc, #624]	@ (80061d4 <HAL_ADC_Init+0x2e4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	4a9c      	ldr	r2, [pc, #624]	@ (80061d8 <HAL_ADC_Init+0x2e8>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	099b      	lsrs	r3, r3, #6
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005f74:	e002      	b.n	8005f7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f9      	bne.n	8005f76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff ff16 	bl	8005db8 <LL_ADC_IsInternalRegulatorEnabled>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff76 	bl	8005ea4 <LL_ADC_REG_IsConversionOngoing>
 8005fb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 8142 	bne.w	800624c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 813e 	bne.w	800624c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005fd8:	f043 0202 	orr.w	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff ff23 	bl	8005e30 <LL_ADC_IsEnabled>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d141      	bne.n	8006074 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff8:	d004      	beq.n	8006004 <HAL_ADC_Init+0x114>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a77      	ldr	r2, [pc, #476]	@ (80061dc <HAL_ADC_Init+0x2ec>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10f      	bne.n	8006024 <HAL_ADC_Init+0x134>
 8006004:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006008:	f7ff ff12 	bl	8005e30 <LL_ADC_IsEnabled>
 800600c:	4604      	mov	r4, r0
 800600e:	4873      	ldr	r0, [pc, #460]	@ (80061dc <HAL_ADC_Init+0x2ec>)
 8006010:	f7ff ff0e 	bl	8005e30 <LL_ADC_IsEnabled>
 8006014:	4603      	mov	r3, r0
 8006016:	4323      	orrs	r3, r4
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e012      	b.n	800604a <HAL_ADC_Init+0x15a>
 8006024:	486e      	ldr	r0, [pc, #440]	@ (80061e0 <HAL_ADC_Init+0x2f0>)
 8006026:	f7ff ff03 	bl	8005e30 <LL_ADC_IsEnabled>
 800602a:	4604      	mov	r4, r0
 800602c:	486d      	ldr	r0, [pc, #436]	@ (80061e4 <HAL_ADC_Init+0x2f4>)
 800602e:	f7ff feff 	bl	8005e30 <LL_ADC_IsEnabled>
 8006032:	4603      	mov	r3, r0
 8006034:	431c      	orrs	r4, r3
 8006036:	486c      	ldr	r0, [pc, #432]	@ (80061e8 <HAL_ADC_Init+0x2f8>)
 8006038:	f7ff fefa 	bl	8005e30 <LL_ADC_IsEnabled>
 800603c:	4603      	mov	r3, r0
 800603e:	4323      	orrs	r3, r4
 8006040:	2b00      	cmp	r3, #0
 8006042:	bf0c      	ite	eq
 8006044:	2301      	moveq	r3, #1
 8006046:	2300      	movne	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d012      	beq.n	8006074 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006056:	d004      	beq.n	8006062 <HAL_ADC_Init+0x172>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5f      	ldr	r2, [pc, #380]	@ (80061dc <HAL_ADC_Init+0x2ec>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <HAL_ADC_Init+0x176>
 8006062:	4a62      	ldr	r2, [pc, #392]	@ (80061ec <HAL_ADC_Init+0x2fc>)
 8006064:	e000      	b.n	8006068 <HAL_ADC_Init+0x178>
 8006066:	4a62      	ldr	r2, [pc, #392]	@ (80061f0 <HAL_ADC_Init+0x300>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7ff fcfa 	bl	8005a68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7f5b      	ldrb	r3, [r3, #29]
 8006078:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800607e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006084:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800608a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006092:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d106      	bne.n	80060b0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	3b01      	subs	r3, #1
 80060a8:	045b      	lsls	r3, r3, #17
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	4b48      	ldr	r3, [pc, #288]	@ (80061f4 <HAL_ADC_Init+0x304>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	69b9      	ldr	r1, [r7, #24]
 80060dc:	430b      	orrs	r3, r1
 80060de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fee5 	bl	8005eca <LL_ADC_INJ_IsConversionOngoing>
 8006100:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d17f      	bne.n	8006208 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d17c      	bne.n	8006208 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006112:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800611a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800612a:	f023 0302 	bic.w	r3, r3, #2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	69b9      	ldr	r1, [r7, #24]
 8006134:	430b      	orrs	r3, r1
 8006136:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d017      	beq.n	8006170 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800614e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006158:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800615c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6911      	ldr	r1, [r2, #16]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	430b      	orrs	r3, r1
 800616a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800616e:	e013      	b.n	8006198 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800617e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006194:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d12a      	bne.n	80061f8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80061be:	4311      	orrs	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061c4:	430a      	orrs	r2, r1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	611a      	str	r2, [r3, #16]
 80061d2:	e019      	b.n	8006208 <HAL_ADC_Init+0x318>
 80061d4:	20000114 	.word	0x20000114
 80061d8:	053e2d63 	.word	0x053e2d63
 80061dc:	50000100 	.word	0x50000100
 80061e0:	50000400 	.word	0x50000400
 80061e4:	50000500 	.word	0x50000500
 80061e8:	50000600 	.word	0x50000600
 80061ec:	50000300 	.word	0x50000300
 80061f0:	50000700 	.word	0x50000700
 80061f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10c      	bne.n	800622a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	f023 010f 	bic.w	r1, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	1e5a      	subs	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
 8006228:	e007      	b.n	800623a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 020f 	bic.w	r2, r2, #15
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800624a:	e007      	b.n	800625c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800625c:	7ffb      	ldrb	r3, [r7, #31]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	@ 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd90      	pop	{r4, r7, pc}
 8006266:	bf00      	nop

08006268 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800627c:	d004      	beq.n	8006288 <HAL_ADC_Start_DMA+0x20>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a5a      	ldr	r2, [pc, #360]	@ (80063ec <HAL_ADC_Start_DMA+0x184>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_ADC_Start_DMA+0x24>
 8006288:	4b59      	ldr	r3, [pc, #356]	@ (80063f0 <HAL_ADC_Start_DMA+0x188>)
 800628a:	e000      	b.n	800628e <HAL_ADC_Start_DMA+0x26>
 800628c:	4b59      	ldr	r3, [pc, #356]	@ (80063f4 <HAL_ADC_Start_DMA+0x18c>)
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fd4a 	bl	8005d28 <LL_ADC_GetMultimode>
 8006294:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fe02 	bl	8005ea4 <LL_ADC_REG_IsConversionOngoing>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 809b 	bne.w	80063de <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_ADC_Start_DMA+0x4e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e096      	b.n	80063e4 <HAL_ADC_Start_DMA+0x17c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4d      	ldr	r2, [pc, #308]	@ (80063f8 <HAL_ADC_Start_DMA+0x190>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d008      	beq.n	80062da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d002      	beq.n	80062da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b09      	cmp	r3, #9
 80062d8:	d17a      	bne.n	80063d0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fcf6 	bl	8006ccc <ADC_Enable>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d16d      	bne.n	80063c6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a3a      	ldr	r2, [pc, #232]	@ (80063ec <HAL_ADC_Start_DMA+0x184>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d009      	beq.n	800631c <HAL_ADC_Start_DMA+0xb4>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3b      	ldr	r2, [pc, #236]	@ (80063fc <HAL_ADC_Start_DMA+0x194>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d002      	beq.n	8006318 <HAL_ADC_Start_DMA+0xb0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	e003      	b.n	8006320 <HAL_ADC_Start_DMA+0xb8>
 8006318:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <HAL_ADC_Start_DMA+0x198>)
 800631a:	e001      	b.n	8006320 <HAL_ADC_Start_DMA+0xb8>
 800631c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	4293      	cmp	r3, r2
 8006326:	d002      	beq.n	800632e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006332:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634a:	f023 0206 	bic.w	r2, r3, #6
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	661a      	str	r2, [r3, #96]	@ 0x60
 8006352:	e002      	b.n	800635a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635e:	4a29      	ldr	r2, [pc, #164]	@ (8006404 <HAL_ADC_Start_DMA+0x19c>)
 8006360:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	4a28      	ldr	r2, [pc, #160]	@ (8006408 <HAL_ADC_Start_DMA+0x1a0>)
 8006368:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	4a27      	ldr	r2, [pc, #156]	@ (800640c <HAL_ADC_Start_DMA+0x1a4>)
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	221c      	movs	r2, #28
 8006378:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0210 	orr.w	r2, r2, #16
 8006390:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3340      	adds	r3, #64	@ 0x40
 80063ac:	4619      	mov	r1, r3
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f001 f989 	bl	80076c8 <HAL_DMA_Start_IT>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fd5c 	bl	8005e7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80063c4:	e00d      	b.n	80063e2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80063ce:	e008      	b.n	80063e2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80063dc:	e001      	b.n	80063e2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063de:	2302      	movs	r3, #2
 80063e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	50000100 	.word	0x50000100
 80063f0:	50000300 	.word	0x50000300
 80063f4:	50000700 	.word	0x50000700
 80063f8:	50000600 	.word	0x50000600
 80063fc:	50000500 	.word	0x50000500
 8006400:	50000400 	.word	0x50000400
 8006404:	08006eb7 	.word	0x08006eb7
 8006408:	08006f8f 	.word	0x08006f8f
 800640c:	08006fab 	.word	0x08006fab

08006410 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b0b6      	sub	sp, #216	@ 0xd8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <HAL_ADC_ConfigChannel+0x24>
 800646a:	2302      	movs	r3, #2
 800646c:	f000 bc13 	b.w	8006c96 <HAL_ADC_ConfigChannel+0x84a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fd11 	bl	8005ea4 <LL_ADC_REG_IsConversionOngoing>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 83f3 	bne.w	8006c70 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	f7ff fbcb 	bl	8005c32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fcff 	bl	8005ea4 <LL_ADC_REG_IsConversionOngoing>
 80064a6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fd0b 	bl	8005eca <LL_ADC_INJ_IsConversionOngoing>
 80064b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 81d9 	bne.w	8006874 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 81d4 	bne.w	8006874 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d4:	d10f      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	4619      	mov	r1, r3
 80064e2:	f7ff fbd2 	bl	8005c8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fb79 	bl	8005be6 <LL_ADC_SetSamplingTimeCommonConfig>
 80064f4:	e00e      	b.n	8006514 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	461a      	mov	r2, r3
 8006504:	f7ff fbc1 	bl	8005c8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fb69 	bl	8005be6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695a      	ldr	r2, [r3, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d022      	beq.n	800657c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6919      	ldr	r1, [r3, #16]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006546:	f7ff fac3 	bl	8005ad0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6919      	ldr	r1, [r3, #16]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	461a      	mov	r2, r3
 8006558:	f7ff fb0f 	bl	8005b7a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <HAL_ADC_ConfigChannel+0x126>
 800656c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006570:	e000      	b.n	8006574 <HAL_ADC_ConfigChannel+0x128>
 8006572:	2300      	movs	r3, #0
 8006574:	461a      	mov	r2, r3
 8006576:	f7ff fb1b 	bl	8005bb0 <LL_ADC_SetOffsetSaturation>
 800657a:	e17b      	b.n	8006874 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fac8 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 8006588:	4603      	mov	r3, r0
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x15c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fabd 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 800659e:	4603      	mov	r3, r0
 80065a0:	0e9b      	lsrs	r3, r3, #26
 80065a2:	f003 021f 	and.w	r2, r3, #31
 80065a6:	e01e      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x19a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fab2 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065be:	fa93 f3a3 	rbit	r3, r3
 80065c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80065ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80065d6:	2320      	movs	r3, #32
 80065d8:	e004      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80065da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065de:	fab3 f383 	clz	r3, r3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_ADC_ConfigChannel+0x1b2>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	0e9b      	lsrs	r3, r3, #26
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	e018      	b.n	8006630 <HAL_ADC_ConfigChannel+0x1e4>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800660a:	fa93 f3a3 	rbit	r3, r3
 800660e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800661a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006622:	2320      	movs	r3, #32
 8006624:	e004      	b.n	8006630 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800662a:	fab3 f383 	clz	r3, r3
 800662e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006630:	429a      	cmp	r2, r3
 8006632:	d106      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fa81 	bl	8005b44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2101      	movs	r1, #1
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fa65 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 800664e:	4603      	mov	r3, r0
 8006650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <HAL_ADC_ConfigChannel+0x222>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fa5a 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 8006664:	4603      	mov	r3, r0
 8006666:	0e9b      	lsrs	r3, r3, #26
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	e01e      	b.n	80066ac <HAL_ADC_ConfigChannel+0x260>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2101      	movs	r1, #1
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff fa4f 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 800667a:	4603      	mov	r3, r0
 800667c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006680:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006684:	fa93 f3a3 	rbit	r3, r3
 8006688:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800668c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800669c:	2320      	movs	r3, #32
 800669e:	e004      	b.n	80066aa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80066a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066a4:	fab3 f383 	clz	r3, r3
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x278>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	0e9b      	lsrs	r3, r3, #26
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	e018      	b.n	80066f6 <HAL_ADC_ConfigChannel+0x2aa>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d0:	fa93 f3a3 	rbit	r3, r3
 80066d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80066d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80066e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80066e8:	2320      	movs	r3, #32
 80066ea:	e004      	b.n	80066f6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80066ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066f0:	fab3 f383 	clz	r3, r3
 80066f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d106      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fa1e 	bl	8005b44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2102      	movs	r1, #2
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa02 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 8006714:	4603      	mov	r3, r0
 8006716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <HAL_ADC_ConfigChannel+0x2e8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2102      	movs	r1, #2
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff f9f7 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 800672a:	4603      	mov	r3, r0
 800672c:	0e9b      	lsrs	r3, r3, #26
 800672e:	f003 021f 	and.w	r2, r3, #31
 8006732:	e01e      	b.n	8006772 <HAL_ADC_ConfigChannel+0x326>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2102      	movs	r1, #2
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff f9ec 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 8006740:	4603      	mov	r3, r0
 8006742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800674a:	fa93 f3a3 	rbit	r3, r3
 800674e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006752:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800675a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006762:	2320      	movs	r3, #32
 8006764:	e004      	b.n	8006770 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006766:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <HAL_ADC_ConfigChannel+0x33e>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	0e9b      	lsrs	r3, r3, #26
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	e016      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x36c>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006792:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006796:	fa93 f3a3 	rbit	r3, r3
 800679a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800679c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800679e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80067a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80067aa:	2320      	movs	r3, #32
 80067ac:	e004      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80067ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067b2:	fab3 f383 	clz	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d106      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2102      	movs	r1, #2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff f9bd 	bl	8005b44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2103      	movs	r1, #3
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff f9a1 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <HAL_ADC_ConfigChannel+0x3aa>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2103      	movs	r1, #3
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff f996 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 80067ec:	4603      	mov	r3, r0
 80067ee:	0e9b      	lsrs	r3, r3, #26
 80067f0:	f003 021f 	and.w	r2, r3, #31
 80067f4:	e017      	b.n	8006826 <HAL_ADC_ConfigChannel+0x3da>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2103      	movs	r1, #3
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff f98b 	bl	8005b18 <LL_ADC_GetOffsetChannel>
 8006802:	4603      	mov	r3, r0
 8006804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800680e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006810:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006818:	2320      	movs	r3, #32
 800681a:	e003      	b.n	8006824 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800681c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800681e:	fab3 f383 	clz	r3, r3
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682e:	2b00      	cmp	r3, #0
 8006830:	d105      	bne.n	800683e <HAL_ADC_ConfigChannel+0x3f2>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	0e9b      	lsrs	r3, r3, #26
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	e011      	b.n	8006862 <HAL_ADC_ConfigChannel+0x416>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006846:	fa93 f3a3 	rbit	r3, r3
 800684a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800684c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800684e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006856:	2320      	movs	r3, #32
 8006858:	e003      	b.n	8006862 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800685a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006862:	429a      	cmp	r2, r3
 8006864:	d106      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	2103      	movs	r1, #3
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f968 	bl	8005b44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fad9 	bl	8005e30 <LL_ADC_IsEnabled>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 813d 	bne.w	8006b00 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	461a      	mov	r2, r3
 8006894:	f7ff fa24 	bl	8005ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4aa2      	ldr	r2, [pc, #648]	@ (8006b28 <HAL_ADC_ConfigChannel+0x6dc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	f040 812e 	bne.w	8006b00 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x480>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	0e9b      	lsrs	r3, r3, #26
 80068ba:	3301      	adds	r3, #1
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e019      	b.n	8006900 <HAL_ADC_ConfigChannel+0x4b4>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d4:	fa93 f3a3 	rbit	r3, r3
 80068d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80068da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80068de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80068e4:	2320      	movs	r3, #32
 80068e6:	e003      	b.n	80068f0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80068e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ea:	fab3 f383 	clz	r3, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	bf94      	ite	ls
 80068fa:	2301      	movls	r3, #1
 80068fc:	2300      	movhi	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006900:	2b00      	cmp	r3, #0
 8006902:	d079      	beq.n	80069f8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800690c:	2b00      	cmp	r3, #0
 800690e:	d107      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x4d4>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0e9b      	lsrs	r3, r3, #26
 8006916:	3301      	adds	r3, #1
 8006918:	069b      	lsls	r3, r3, #26
 800691a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800691e:	e015      	b.n	800694c <HAL_ADC_ConfigChannel+0x500>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006928:	fa93 f3a3 	rbit	r3, r3
 800692c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800692e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006930:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006938:	2320      	movs	r3, #32
 800693a:	e003      	b.n	8006944 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800693c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800693e:	fab3 f383 	clz	r3, r3
 8006942:	b2db      	uxtb	r3, r3
 8006944:	3301      	adds	r3, #1
 8006946:	069b      	lsls	r3, r3, #26
 8006948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <HAL_ADC_ConfigChannel+0x520>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0e9b      	lsrs	r3, r3, #26
 800695e:	3301      	adds	r3, #1
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f303 	lsl.w	r3, r1, r3
 800696a:	e017      	b.n	800699c <HAL_ADC_ConfigChannel+0x550>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006974:	fa93 f3a3 	rbit	r3, r3
 8006978:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800697a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800697e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006984:	2320      	movs	r3, #32
 8006986:	e003      	b.n	8006990 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800698a:	fab3 f383 	clz	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	3301      	adds	r3, #1
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2101      	movs	r1, #1
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	ea42 0103 	orr.w	r1, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <HAL_ADC_ConfigChannel+0x576>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	0e9b      	lsrs	r3, r3, #26
 80069b2:	3301      	adds	r3, #1
 80069b4:	f003 021f 	and.w	r2, r3, #31
 80069b8:	4613      	mov	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	4413      	add	r3, r2
 80069be:	051b      	lsls	r3, r3, #20
 80069c0:	e018      	b.n	80069f4 <HAL_ADC_ConfigChannel+0x5a8>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ca:	fa93 f3a3 	rbit	r3, r3
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80069d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80069d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80069da:	2320      	movs	r3, #32
 80069dc:	e003      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	fab3 f383 	clz	r3, r3
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	3301      	adds	r3, #1
 80069e8:	f003 021f 	and.w	r2, r3, #31
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069f4:	430b      	orrs	r3, r1
 80069f6:	e07e      	b.n	8006af6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d107      	bne.n	8006a14 <HAL_ADC_ConfigChannel+0x5c8>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	0e9b      	lsrs	r3, r3, #26
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	069b      	lsls	r3, r3, #26
 8006a0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a12:	e015      	b.n	8006a40 <HAL_ADC_ConfigChannel+0x5f4>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	fa93 f3a3 	rbit	r3, r3
 8006a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	e003      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	fab3 f383 	clz	r3, r3
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	069b      	lsls	r3, r3, #26
 8006a3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <HAL_ADC_ConfigChannel+0x614>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	0e9b      	lsrs	r3, r3, #26
 8006a52:	3301      	adds	r3, #1
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2101      	movs	r1, #1
 8006a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5e:	e017      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x644>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	fa93 f3a3 	rbit	r3, r3
 8006a6c:	61fb      	str	r3, [r7, #28]
  return result;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006a78:	2320      	movs	r3, #32
 8006a7a:	e003      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	fab3 f383 	clz	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	3301      	adds	r3, #1
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	ea42 0103 	orr.w	r1, r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <HAL_ADC_ConfigChannel+0x670>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0e9b      	lsrs	r3, r3, #26
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f003 021f 	and.w	r2, r3, #31
 8006aac:	4613      	mov	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3b1e      	subs	r3, #30
 8006ab4:	051b      	lsls	r3, r3, #20
 8006ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006aba:	e01b      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x6a8>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	fa93 f3a3 	rbit	r3, r3
 8006ac8:	613b      	str	r3, [r7, #16]
  return result;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	e003      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	fab3 f383 	clz	r3, r3
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	f003 021f 	and.w	r2, r3, #31
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	3b1e      	subs	r3, #30
 8006aee:	051b      	lsls	r3, r3, #20
 8006af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006af4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006afa:	4619      	mov	r1, r3
 8006afc:	f7ff f8c5 	bl	8005c8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_ADC_ConfigChannel+0x6e0>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80be 	beq.w	8006c8a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b16:	d004      	beq.n	8006b22 <HAL_ADC_ConfigChannel+0x6d6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a04      	ldr	r2, [pc, #16]	@ (8006b30 <HAL_ADC_ConfigChannel+0x6e4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10a      	bne.n	8006b38 <HAL_ADC_ConfigChannel+0x6ec>
 8006b22:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <HAL_ADC_ConfigChannel+0x6e8>)
 8006b24:	e009      	b.n	8006b3a <HAL_ADC_ConfigChannel+0x6ee>
 8006b26:	bf00      	nop
 8006b28:	407f0000 	.word	0x407f0000
 8006b2c:	80080000 	.word	0x80080000
 8006b30:	50000100 	.word	0x50000100
 8006b34:	50000300 	.word	0x50000300
 8006b38:	4b59      	ldr	r3, [pc, #356]	@ (8006ca0 <HAL_ADC_ConfigChannel+0x854>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe ffba 	bl	8005ab4 <LL_ADC_GetCommonPathInternalCh>
 8006b40:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a56      	ldr	r2, [pc, #344]	@ (8006ca4 <HAL_ADC_ConfigChannel+0x858>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_ADC_ConfigChannel+0x70c>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a55      	ldr	r2, [pc, #340]	@ (8006ca8 <HAL_ADC_ConfigChannel+0x85c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d13a      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d134      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b6c:	d005      	beq.n	8006b7a <HAL_ADC_ConfigChannel+0x72e>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a4e      	ldr	r2, [pc, #312]	@ (8006cac <HAL_ADC_ConfigChannel+0x860>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	f040 8085 	bne.w	8006c84 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b82:	d004      	beq.n	8006b8e <HAL_ADC_ConfigChannel+0x742>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a49      	ldr	r2, [pc, #292]	@ (8006cb0 <HAL_ADC_ConfigChannel+0x864>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <HAL_ADC_ConfigChannel+0x746>
 8006b8e:	4a49      	ldr	r2, [pc, #292]	@ (8006cb4 <HAL_ADC_ConfigChannel+0x868>)
 8006b90:	e000      	b.n	8006b94 <HAL_ADC_ConfigChannel+0x748>
 8006b92:	4a43      	ldr	r2, [pc, #268]	@ (8006ca0 <HAL_ADC_ConfigChannel+0x854>)
 8006b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f7fe ff75 	bl	8005a8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ba4:	4b44      	ldr	r3, [pc, #272]	@ (8006cb8 <HAL_ADC_ConfigChannel+0x86c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	099b      	lsrs	r3, r3, #6
 8006baa:	4a44      	ldr	r2, [pc, #272]	@ (8006cbc <HAL_ADC_ConfigChannel+0x870>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	099b      	lsrs	r3, r3, #6
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bbe:	e002      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f9      	bne.n	8006bc0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bcc:	e05a      	b.n	8006c84 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8006cc0 <HAL_ADC_ConfigChannel+0x874>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d125      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11f      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a31      	ldr	r2, [pc, #196]	@ (8006cb0 <HAL_ADC_ConfigChannel+0x864>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d104      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x7ac>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a34      	ldr	r2, [pc, #208]	@ (8006cc4 <HAL_ADC_ConfigChannel+0x878>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d047      	beq.n	8006c88 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c00:	d004      	beq.n	8006c0c <HAL_ADC_ConfigChannel+0x7c0>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb0 <HAL_ADC_ConfigChannel+0x864>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_ADC_ConfigChannel+0x7c4>
 8006c0c:	4a29      	ldr	r2, [pc, #164]	@ (8006cb4 <HAL_ADC_ConfigChannel+0x868>)
 8006c0e:	e000      	b.n	8006c12 <HAL_ADC_ConfigChannel+0x7c6>
 8006c10:	4a23      	ldr	r2, [pc, #140]	@ (8006ca0 <HAL_ADC_ConfigChannel+0x854>)
 8006c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe ff36 	bl	8005a8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c22:	e031      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a27      	ldr	r2, [pc, #156]	@ (8006cc8 <HAL_ADC_ConfigChannel+0x87c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d12d      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d127      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb0 <HAL_ADC_ConfigChannel+0x864>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d022      	beq.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c4c:	d004      	beq.n	8006c58 <HAL_ADC_ConfigChannel+0x80c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <HAL_ADC_ConfigChannel+0x864>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d101      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x810>
 8006c58:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <HAL_ADC_ConfigChannel+0x868>)
 8006c5a:	e000      	b.n	8006c5e <HAL_ADC_ConfigChannel+0x812>
 8006c5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <HAL_ADC_ConfigChannel+0x854>)
 8006c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7fe ff10 	bl	8005a8e <LL_ADC_SetCommonPathInternalCh>
 8006c6e:	e00c      	b.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006c82:	e002      	b.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	37d8      	adds	r7, #216	@ 0xd8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	50000700 	.word	0x50000700
 8006ca4:	c3210000 	.word	0xc3210000
 8006ca8:	90c00010 	.word	0x90c00010
 8006cac:	50000600 	.word	0x50000600
 8006cb0:	50000100 	.word	0x50000100
 8006cb4:	50000300 	.word	0x50000300
 8006cb8:	20000114 	.word	0x20000114
 8006cbc:	053e2d63 	.word	0x053e2d63
 8006cc0:	c7520000 	.word	0xc7520000
 8006cc4:	50000500 	.word	0x50000500
 8006cc8:	cb840000 	.word	0xcb840000

08006ccc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff f8a7 	bl	8005e30 <LL_ADC_IsEnabled>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d176      	bne.n	8006dd6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	4b3c      	ldr	r3, [pc, #240]	@ (8006de0 <ADC_Enable+0x114>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfa:	f043 0210 	orr.w	r2, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d06:	f043 0201 	orr.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e062      	b.n	8006dd8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff f862 	bl	8005de0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d24:	d004      	beq.n	8006d30 <ADC_Enable+0x64>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8006de4 <ADC_Enable+0x118>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <ADC_Enable+0x68>
 8006d30:	4b2d      	ldr	r3, [pc, #180]	@ (8006de8 <ADC_Enable+0x11c>)
 8006d32:	e000      	b.n	8006d36 <ADC_Enable+0x6a>
 8006d34:	4b2d      	ldr	r3, [pc, #180]	@ (8006dec <ADC_Enable+0x120>)
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe febc 	bl	8005ab4 <LL_ADC_GetCommonPathInternalCh>
 8006d3c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d46:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <ADC_Enable+0x124>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	099b      	lsrs	r3, r3, #6
 8006d4c:	4a29      	ldr	r2, [pc, #164]	@ (8006df4 <ADC_Enable+0x128>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	099b      	lsrs	r3, r3, #6
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006d60:	e002      	b.n	8006d68 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f9      	bne.n	8006d62 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d6e:	f7fe fe6f 	bl	8005a50 <HAL_GetTick>
 8006d72:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d74:	e028      	b.n	8006dc8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff f858 	bl	8005e30 <LL_ADC_IsEnabled>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff f828 	bl	8005de0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d90:	f7fe fe5e 	bl	8005a50 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d914      	bls.n	8006dc8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d00d      	beq.n	8006dc8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db0:	f043 0210 	orr.w	r2, r3, #16
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dbc:	f043 0201 	orr.w	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e007      	b.n	8006dd8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d1cf      	bne.n	8006d76 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	8000003f 	.word	0x8000003f
 8006de4:	50000100 	.word	0x50000100
 8006de8:	50000300 	.word	0x50000300
 8006dec:	50000700 	.word	0x50000700
 8006df0:	20000114 	.word	0x20000114
 8006df4:	053e2d63 	.word	0x053e2d63

08006df8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f826 	bl	8005e56 <LL_ADC_IsDisableOngoing>
 8006e0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff f80d 	bl	8005e30 <LL_ADC_IsEnabled>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d047      	beq.n	8006eac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d144      	bne.n	8006eac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 030d 	and.w	r3, r3, #13
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10c      	bne.n	8006e4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe ffe7 	bl	8005e08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2203      	movs	r2, #3
 8006e40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e42:	f7fe fe05 	bl	8005a50 <HAL_GetTick>
 8006e46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006e48:	e029      	b.n	8006e9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4e:	f043 0210 	orr.w	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5a:	f043 0201 	orr.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e023      	b.n	8006eae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006e66:	f7fe fdf3 	bl	8005a50 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d914      	bls.n	8006e9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00d      	beq.n	8006e9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e86:	f043 0210 	orr.w	r2, r3, #16
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e007      	b.n	8006eae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1dc      	bne.n	8006e66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d14b      	bne.n	8006f68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d021      	beq.n	8006f2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fe8c 	bl	8005c0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d032      	beq.n	8006f60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d12b      	bne.n	8006f60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11f      	bne.n	8006f60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f24:	f043 0201 	orr.w	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f2c:	e018      	b.n	8006f60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d111      	bne.n	8006f60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d105      	bne.n	8006f60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f58:	f043 0201 	orr.w	r2, r3, #1
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fa55 	bl	8006410 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f66:	e00e      	b.n	8006f86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fa5f 	bl	8006438 <HAL_ADC_ErrorCallback>
}
 8006f7a:	e004      	b.n	8006f86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff fa41 	bl	8006424 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc8:	f043 0204 	orr.w	r2, r3, #4
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fa31 	bl	8006438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <LL_ADC_IsEnabled>:
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <LL_ADC_IsEnabled+0x18>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <LL_ADC_IsEnabled+0x1a>
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <LL_ADC_StartCalibration>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007016:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007020:	4313      	orrs	r3, r2
 8007022:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	609a      	str	r2, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_ADC_IsCalibrationOnGoing>:
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800704a:	d101      	bne.n	8007050 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <LL_ADC_REG_IsConversionOngoing>:
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b04      	cmp	r3, #4
 8007070:	d101      	bne.n	8007076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800709c:	2302      	movs	r3, #2
 800709e:	e04d      	b.n	800713c <HAL_ADCEx_Calibration_Start+0xb8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fea5 	bl	8006df8 <ADC_Disable>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d136      	bne.n	8007126 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80070c0:	f023 0302 	bic.w	r3, r3, #2
 80070c4:	f043 0202 	orr.w	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff ff96 	bl	8007004 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80070d8:	e014      	b.n	8007104 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3301      	adds	r3, #1
 80070de:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <HAL_ADCEx_Calibration_Start+0xc0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d90d      	bls.n	8007104 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ec:	f023 0312 	bic.w	r3, r3, #18
 80070f0:	f043 0210 	orr.w	r2, r3, #16
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e01b      	b.n	800713c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ff94 	bl	8007036 <LL_ADC_IsCalibrationOnGoing>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e2      	bne.n	80070da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007118:	f023 0303 	bic.w	r3, r3, #3
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007124:	e005      	b.n	8007132 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712a:	f043 0210 	orr.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	0004de01 	.word	0x0004de01

08007148 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b0a1      	sub	sp, #132	@ 0x84
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007162:	2302      	movs	r3, #2
 8007164:	e0e7      	b.n	8007336 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800716e:	2300      	movs	r3, #0
 8007170:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007172:	2300      	movs	r3, #0
 8007174:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800717e:	d102      	bne.n	8007186 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007180:	4b6f      	ldr	r3, [pc, #444]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	e009      	b.n	800719a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6e      	ldr	r2, [pc, #440]	@ (8007344 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d102      	bne.n	8007196 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007190:	4b6d      	ldr	r3, [pc, #436]	@ (8007348 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007192:	60bb      	str	r3, [r7, #8]
 8007194:	e001      	b.n	800719a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007196:	2300      	movs	r3, #0
 8007198:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0be      	b.n	8007336 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff ff4f 	bl	800705e <LL_ADC_REG_IsConversionOngoing>
 80071c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff ff49 	bl	800705e <LL_ADC_REG_IsConversionOngoing>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 80a0 	bne.w	8007314 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80071d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 809c 	bne.w	8007314 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071e4:	d004      	beq.n	80071f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a55      	ldr	r2, [pc, #340]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d101      	bne.n	80071f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80071f0:	4b56      	ldr	r3, [pc, #344]	@ (800734c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80071f2:	e000      	b.n	80071f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80071f4:	4b56      	ldr	r3, [pc, #344]	@ (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80071f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d04b      	beq.n	8007298 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007212:	035b      	lsls	r3, r3, #13
 8007214:	430b      	orrs	r3, r1
 8007216:	431a      	orrs	r2, r3
 8007218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800721a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007224:	d004      	beq.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a45      	ldr	r2, [pc, #276]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10f      	bne.n	8007250 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007230:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007234:	f7ff fed3 	bl	8006fde <LL_ADC_IsEnabled>
 8007238:	4604      	mov	r4, r0
 800723a:	4841      	ldr	r0, [pc, #260]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800723c:	f7ff fecf 	bl	8006fde <LL_ADC_IsEnabled>
 8007240:	4603      	mov	r3, r0
 8007242:	4323      	orrs	r3, r4
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e012      	b.n	8007276 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007250:	483c      	ldr	r0, [pc, #240]	@ (8007344 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007252:	f7ff fec4 	bl	8006fde <LL_ADC_IsEnabled>
 8007256:	4604      	mov	r4, r0
 8007258:	483b      	ldr	r0, [pc, #236]	@ (8007348 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800725a:	f7ff fec0 	bl	8006fde <LL_ADC_IsEnabled>
 800725e:	4603      	mov	r3, r0
 8007260:	431c      	orrs	r4, r3
 8007262:	483c      	ldr	r0, [pc, #240]	@ (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007264:	f7ff febb 	bl	8006fde <LL_ADC_IsEnabled>
 8007268:	4603      	mov	r3, r0
 800726a:	4323      	orrs	r3, r4
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d056      	beq.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800727a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007282:	f023 030f 	bic.w	r3, r3, #15
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	6811      	ldr	r1, [r2, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	6892      	ldr	r2, [r2, #8]
 800728e:	430a      	orrs	r2, r1
 8007290:	431a      	orrs	r2, r3
 8007292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007294:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007296:	e047      	b.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ac:	d004      	beq.n	80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a23      	ldr	r2, [pc, #140]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10f      	bne.n	80072d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80072b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80072bc:	f7ff fe8f 	bl	8006fde <LL_ADC_IsEnabled>
 80072c0:	4604      	mov	r4, r0
 80072c2:	481f      	ldr	r0, [pc, #124]	@ (8007340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072c4:	f7ff fe8b 	bl	8006fde <LL_ADC_IsEnabled>
 80072c8:	4603      	mov	r3, r0
 80072ca:	4323      	orrs	r3, r4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e012      	b.n	80072fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80072d8:	481a      	ldr	r0, [pc, #104]	@ (8007344 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80072da:	f7ff fe80 	bl	8006fde <LL_ADC_IsEnabled>
 80072de:	4604      	mov	r4, r0
 80072e0:	4819      	ldr	r0, [pc, #100]	@ (8007348 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80072e2:	f7ff fe7c 	bl	8006fde <LL_ADC_IsEnabled>
 80072e6:	4603      	mov	r3, r0
 80072e8:	431c      	orrs	r4, r3
 80072ea:	481a      	ldr	r0, [pc, #104]	@ (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80072ec:	f7ff fe77 	bl	8006fde <LL_ADC_IsEnabled>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4323      	orrs	r3, r4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800730a:	f023 030f 	bic.w	r3, r3, #15
 800730e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007310:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007312:	e009      	b.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007326:	e000      	b.n	800732a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007332:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007336:	4618      	mov	r0, r3
 8007338:	3784      	adds	r7, #132	@ 0x84
 800733a:	46bd      	mov	sp, r7
 800733c:	bd90      	pop	{r4, r7, pc}
 800733e:	bf00      	nop
 8007340:	50000100 	.word	0x50000100
 8007344:	50000400 	.word	0x50000400
 8007348:	50000500 	.word	0x50000500
 800734c:	50000300 	.word	0x50000300
 8007350:	50000700 	.word	0x50000700
 8007354:	50000600 	.word	0x50000600

08007358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007368:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <__NVIC_SetPriorityGrouping+0x44>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007374:	4013      	ands	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800738a:	4a04      	ldr	r2, [pc, #16]	@ (800739c <__NVIC_SetPriorityGrouping+0x44>)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	60d3      	str	r3, [r2, #12]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	e000ed00 	.word	0xe000ed00

080073a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073a4:	4b04      	ldr	r3, [pc, #16]	@ (80073b8 <__NVIC_GetPriorityGrouping+0x18>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	f003 0307 	and.w	r3, r3, #7
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	e000ed00 	.word	0xe000ed00

080073bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	db0b      	blt.n	80073e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	f003 021f 	and.w	r2, r3, #31
 80073d4:	4907      	ldr	r1, [pc, #28]	@ (80073f4 <__NVIC_EnableIRQ+0x38>)
 80073d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	2001      	movs	r0, #1
 80073de:	fa00 f202 	lsl.w	r2, r0, r2
 80073e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	e000e100 	.word	0xe000e100

080073f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	db0a      	blt.n	8007422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	b2da      	uxtb	r2, r3
 8007410:	490c      	ldr	r1, [pc, #48]	@ (8007444 <__NVIC_SetPriority+0x4c>)
 8007412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007416:	0112      	lsls	r2, r2, #4
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	440b      	add	r3, r1
 800741c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007420:	e00a      	b.n	8007438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4908      	ldr	r1, [pc, #32]	@ (8007448 <__NVIC_SetPriority+0x50>)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	3b04      	subs	r3, #4
 8007430:	0112      	lsls	r2, r2, #4
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	440b      	add	r3, r1
 8007436:	761a      	strb	r2, [r3, #24]
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	e000e100 	.word	0xe000e100
 8007448:	e000ed00 	.word	0xe000ed00

0800744c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800744c:	b480      	push	{r7}
 800744e:	b089      	sub	sp, #36	@ 0x24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f1c3 0307 	rsb	r3, r3, #7
 8007466:	2b04      	cmp	r3, #4
 8007468:	bf28      	it	cs
 800746a:	2304      	movcs	r3, #4
 800746c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3304      	adds	r3, #4
 8007472:	2b06      	cmp	r3, #6
 8007474:	d902      	bls.n	800747c <NVIC_EncodePriority+0x30>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3b03      	subs	r3, #3
 800747a:	e000      	b.n	800747e <NVIC_EncodePriority+0x32>
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007480:	f04f 32ff 	mov.w	r2, #4294967295
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43da      	mvns	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	401a      	ands	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007494:	f04f 31ff 	mov.w	r1, #4294967295
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	43d9      	mvns	r1, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074a4:	4313      	orrs	r3, r2
         );
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3724      	adds	r7, #36	@ 0x24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3b01      	subs	r3, #1
 80074c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c4:	d301      	bcc.n	80074ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074c6:	2301      	movs	r3, #1
 80074c8:	e00f      	b.n	80074ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074ca:	4a0a      	ldr	r2, [pc, #40]	@ (80074f4 <SysTick_Config+0x40>)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074d2:	210f      	movs	r1, #15
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	f7ff ff8e 	bl	80073f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <SysTick_Config+0x40>)
 80074de:	2200      	movs	r2, #0
 80074e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074e2:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <SysTick_Config+0x40>)
 80074e4:	2207      	movs	r2, #7
 80074e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	e000e010 	.word	0xe000e010

080074f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff ff29 	bl	8007358 <__NVIC_SetPriorityGrouping>
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	4603      	mov	r3, r0
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800751c:	f7ff ff40 	bl	80073a0 <__NVIC_GetPriorityGrouping>
 8007520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f7ff ff90 	bl	800744c <NVIC_EncodePriority>
 800752c:	4602      	mov	r2, r0
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff ff5f 	bl	80073f8 <__NVIC_SetPriority>
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800754c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff33 	bl	80073bc <__NVIC_EnableIRQ>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ffa4 	bl	80074b4 <SysTick_Config>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e08d      	b.n	80076a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	4b47      	ldr	r3, [pc, #284]	@ (80076b0 <HAL_DMA_Init+0x138>)
 8007592:	429a      	cmp	r2, r3
 8007594:	d80f      	bhi.n	80075b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	4b45      	ldr	r3, [pc, #276]	@ (80076b4 <HAL_DMA_Init+0x13c>)
 800759e:	4413      	add	r3, r2
 80075a0:	4a45      	ldr	r2, [pc, #276]	@ (80076b8 <HAL_DMA_Init+0x140>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	009a      	lsls	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a42      	ldr	r2, [pc, #264]	@ (80076bc <HAL_DMA_Init+0x144>)
 80075b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80075b4:	e00e      	b.n	80075d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	4b40      	ldr	r3, [pc, #256]	@ (80076c0 <HAL_DMA_Init+0x148>)
 80075be:	4413      	add	r3, r2
 80075c0:	4a3d      	ldr	r2, [pc, #244]	@ (80076b8 <HAL_DMA_Init+0x140>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	091b      	lsrs	r3, r3, #4
 80075c8:	009a      	lsls	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a3c      	ldr	r2, [pc, #240]	@ (80076c4 <HAL_DMA_Init+0x14c>)
 80075d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80075ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80075f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa76 	bl	8007b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007634:	d102      	bne.n	800763c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007650:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d010      	beq.n	800767c <HAL_DMA_Init+0x104>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b04      	cmp	r3, #4
 8007660:	d80c      	bhi.n	800767c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa96 	bl	8007b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	e008      	b.n	800768e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40020407 	.word	0x40020407
 80076b4:	bffdfff8 	.word	0xbffdfff8
 80076b8:	cccccccd 	.word	0xcccccccd
 80076bc:	40020000 	.word	0x40020000
 80076c0:	bffdfbf8 	.word	0xbffdfbf8
 80076c4:	40020400 	.word	0x40020400

080076c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_DMA_Start_IT+0x20>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e066      	b.n	80077b6 <HAL_DMA_Start_IT+0xee>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d155      	bne.n	80077a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f9bb 	bl	8007a9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 020e 	orr.w	r2, r2, #14
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e00f      	b.n	8007760 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0204 	bic.w	r2, r2, #4
 800774e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 020a 	orr.w	r2, r2, #10
 800775e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800777c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007794:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e005      	b.n	80077b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
 80077b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d005      	beq.n	80077e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2204      	movs	r2, #4
 80077da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	e037      	b.n	8007852 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 020e 	bic.w	r2, r2, #14
 80077f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007800:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007816:	f003 021f 	and.w	r2, r3, #31
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	2101      	movs	r1, #1
 8007820:	fa01 f202 	lsl.w	r2, r1, r2
 8007824:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800782e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007846:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007850:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d00d      	beq.n	80078a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2204      	movs	r2, #4
 800788c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
 80078a2:	e047      	b.n	8007934 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 020e 	bic.w	r2, r2, #14
 80078b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d8:	f003 021f 	and.w	r2, r3, #31
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	2101      	movs	r1, #1
 80078e2:	fa01 f202 	lsl.w	r2, r1, r2
 80078e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80078f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007908:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007912:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
    }
  }
  return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2204      	movs	r2, #4
 8007960:	409a      	lsls	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4013      	ands	r3, r2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d026      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x7a>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d021      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0204 	bic.w	r2, r2, #4
 8007990:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	f003 021f 	and.w	r2, r3, #31
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799e:	2104      	movs	r1, #4
 80079a0:	fa01 f202 	lsl.w	r2, r1, r2
 80079a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d071      	beq.n	8007a92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80079b6:	e06c      	b.n	8007a92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	2202      	movs	r2, #2
 80079c2:	409a      	lsls	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d029      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 020a 	bic.w	r2, r2, #10
 80079f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a00:	f003 021f 	and.w	r2, r3, #31
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	2102      	movs	r1, #2
 8007a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d038      	beq.n	8007a92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007a28:	e033      	b.n	8007a92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2208      	movs	r2, #8
 8007a34:	409a      	lsls	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d02a      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d025      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 020e 	bic.w	r2, r2, #14
 8007a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5c:	f003 021f 	and.w	r2, r3, #31
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	2101      	movs	r1, #1
 8007a66:	fa01 f202 	lsl.w	r2, r1, r2
 8007a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
}
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ab2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ac4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aca:	f003 021f 	and.w	r2, r3, #31
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b10      	cmp	r3, #16
 8007ae8:	d108      	bne.n	8007afc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007afa:	e007      	b.n	8007b0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b16      	ldr	r3, [pc, #88]	@ (8007b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d802      	bhi.n	8007b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007b2c:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e001      	b.n	8007b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007b32:	4b15      	ldr	r3, [pc, #84]	@ (8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007b34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	3b08      	subs	r3, #8
 8007b42:	4a12      	ldr	r2, [pc, #72]	@ (8007b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b50:	089b      	lsrs	r3, r3, #2
 8007b52:	009a      	lsls	r2, r3, #2
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a0b      	ldr	r2, [pc, #44]	@ (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 031f 	and.w	r3, r3, #31
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	409a      	lsls	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40020407 	.word	0x40020407
 8007b84:	40020800 	.word	0x40020800
 8007b88:	40020820 	.word	0x40020820
 8007b8c:	cccccccd 	.word	0xcccccccd
 8007b90:	40020880 	.word	0x40020880

08007b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007bb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007bc8:	bf00      	nop
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	1000823f 	.word	0x1000823f
 8007bd8:	40020940 	.word	0x40020940

08007bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007bea:	e15a      	b.n	8007ea2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 814c 	beq.w	8007e9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d005      	beq.n	8007c1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d130      	bne.n	8007c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	2203      	movs	r2, #3
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4013      	ands	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c52:	2201      	movs	r2, #1
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 0201 	and.w	r2, r3, #1
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d017      	beq.n	8007cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	2203      	movs	r2, #3
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d123      	bne.n	8007d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	08da      	lsrs	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3208      	adds	r2, #8
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	220f      	movs	r2, #15
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	08da      	lsrs	r2, r3, #3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3208      	adds	r2, #8
 8007d08:	6939      	ldr	r1, [r7, #16]
 8007d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	2203      	movs	r2, #3
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4013      	ands	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f003 0203 	and.w	r2, r3, #3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80a6 	beq.w	8007e9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d50:	4b5b      	ldr	r3, [pc, #364]	@ (8007ec0 <HAL_GPIO_Init+0x2e4>)
 8007d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d54:	4a5a      	ldr	r2, [pc, #360]	@ (8007ec0 <HAL_GPIO_Init+0x2e4>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007d5c:	4b58      	ldr	r3, [pc, #352]	@ (8007ec0 <HAL_GPIO_Init+0x2e4>)
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d68:	4a56      	ldr	r2, [pc, #344]	@ (8007ec4 <HAL_GPIO_Init+0x2e8>)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	089b      	lsrs	r3, r3, #2
 8007d6e:	3302      	adds	r3, #2
 8007d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	220f      	movs	r2, #15
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	43db      	mvns	r3, r3
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007d92:	d01f      	beq.n	8007dd4 <HAL_GPIO_Init+0x1f8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a4c      	ldr	r2, [pc, #304]	@ (8007ec8 <HAL_GPIO_Init+0x2ec>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d019      	beq.n	8007dd0 <HAL_GPIO_Init+0x1f4>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8007ecc <HAL_GPIO_Init+0x2f0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d013      	beq.n	8007dcc <HAL_GPIO_Init+0x1f0>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ed0 <HAL_GPIO_Init+0x2f4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00d      	beq.n	8007dc8 <HAL_GPIO_Init+0x1ec>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a49      	ldr	r2, [pc, #292]	@ (8007ed4 <HAL_GPIO_Init+0x2f8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <HAL_GPIO_Init+0x1e8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a48      	ldr	r2, [pc, #288]	@ (8007ed8 <HAL_GPIO_Init+0x2fc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d101      	bne.n	8007dc0 <HAL_GPIO_Init+0x1e4>
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	e00a      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	e008      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	e006      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e004      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e002      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <HAL_GPIO_Init+0x1fa>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	f002 0203 	and.w	r2, r2, #3
 8007ddc:	0092      	lsls	r2, r2, #2
 8007dde:	4093      	lsls	r3, r2
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007de6:	4937      	ldr	r1, [pc, #220]	@ (8007ec4 <HAL_GPIO_Init+0x2e8>)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	3302      	adds	r3, #2
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007df4:	4b39      	ldr	r3, [pc, #228]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4013      	ands	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007e18:	4a30      	ldr	r2, [pc, #192]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	43db      	mvns	r3, r3
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007e42:	4a26      	ldr	r2, [pc, #152]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007e48:	4b24      	ldr	r3, [pc, #144]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4013      	ands	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e72:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e96:	4a11      	ldr	r2, [pc, #68]	@ (8007edc <HAL_GPIO_Init+0x300>)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f47f ae9d 	bne.w	8007bec <HAL_GPIO_Init+0x10>
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40021000 	.word	0x40021000
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	48000400 	.word	0x48000400
 8007ecc:	48000800 	.word	0x48000800
 8007ed0:	48000c00 	.word	0x48000c00
 8007ed4:	48001000 	.word	0x48001000
 8007ed8:	48001400 	.word	0x48001400
 8007edc:	40010400 	.word	0x40010400

08007ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	887b      	ldrh	r3, [r7, #2]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e001      	b.n	8007f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	807b      	strh	r3, [r7, #2]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f20:	787b      	ldrb	r3, [r7, #1]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007f26:	887a      	ldrh	r2, [r7, #2]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007f2c:	e002      	b.n	8007f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007f2e:	887a      	ldrh	r2, [r7, #2]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007f4a:	4b08      	ldr	r3, [pc, #32]	@ (8007f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f56:	4a05      	ldr	r2, [pc, #20]	@ (8007f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f806 	bl	8007f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40010400 	.word	0x40010400

08007f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d141      	bne.n	800801a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f96:	4b4b      	ldr	r3, [pc, #300]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa2:	d131      	bne.n	8008008 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fa4:	4b47      	ldr	r3, [pc, #284]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007faa:	4a46      	ldr	r2, [pc, #280]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fb4:	4b43      	ldr	r3, [pc, #268]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fbc:	4a41      	ldr	r2, [pc, #260]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fc4:	4b40      	ldr	r3, [pc, #256]	@ (80080c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2232      	movs	r2, #50	@ 0x32
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	4a3f      	ldr	r2, [pc, #252]	@ (80080cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd4:	0c9b      	lsrs	r3, r3, #18
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fda:	e002      	b.n	8007fe2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fe2:	4b38      	ldr	r3, [pc, #224]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fee:	d102      	bne.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f2      	bne.n	8007fdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ff6:	4b33      	ldr	r3, [pc, #204]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d158      	bne.n	80080b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e057      	b.n	80080b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008008:	4b2e      	ldr	r3, [pc, #184]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800800a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800e:	4a2d      	ldr	r2, [pc, #180]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008014:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008018:	e04d      	b.n	80080b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008020:	d141      	bne.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008022:	4b28      	ldr	r3, [pc, #160]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802e:	d131      	bne.n	8008094 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008030:	4b24      	ldr	r3, [pc, #144]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008036:	4a23      	ldr	r2, [pc, #140]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800803c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008040:	4b20      	ldr	r3, [pc, #128]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008048:	4a1e      	ldr	r2, [pc, #120]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800804a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800804e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008050:	4b1d      	ldr	r3, [pc, #116]	@ (80080c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2232      	movs	r2, #50	@ 0x32
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	0c9b      	lsrs	r3, r3, #18
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008066:	e002      	b.n	800806e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3b01      	subs	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800806e:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800807a:	d102      	bne.n	8008082 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f2      	bne.n	8008068 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800808a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800808e:	d112      	bne.n	80080b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e011      	b.n	80080b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008094:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800809a:	4a0a      	ldr	r2, [pc, #40]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800809c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80080a4:	e007      	b.n	80080b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80080ae:	4a05      	ldr	r2, [pc, #20]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40007000 	.word	0x40007000
 80080c8:	20000114 	.word	0x20000114
 80080cc:	431bde83 	.word	0x431bde83

080080d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80080d4:	4b05      	ldr	r3, [pc, #20]	@ (80080ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4a04      	ldr	r2, [pc, #16]	@ (80080ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80080da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080de:	6093      	str	r3, [r2, #8]
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40007000 	.word	0x40007000

080080f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e2fe      	b.n	8008700 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d075      	beq.n	80081fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800810e:	4b97      	ldr	r3, [pc, #604]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 030c 	and.w	r3, r3, #12
 8008116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008118:	4b94      	ldr	r3, [pc, #592]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b0c      	cmp	r3, #12
 8008126:	d102      	bne.n	800812e <HAL_RCC_OscConfig+0x3e>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b03      	cmp	r3, #3
 800812c:	d002      	beq.n	8008134 <HAL_RCC_OscConfig+0x44>
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2b08      	cmp	r3, #8
 8008132:	d10b      	bne.n	800814c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008134:	4b8d      	ldr	r3, [pc, #564]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d05b      	beq.n	80081f8 <HAL_RCC_OscConfig+0x108>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d157      	bne.n	80081f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e2d9      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008154:	d106      	bne.n	8008164 <HAL_RCC_OscConfig+0x74>
 8008156:	4b85      	ldr	r3, [pc, #532]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a84      	ldr	r2, [pc, #528]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800815c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	e01d      	b.n	80081a0 <HAL_RCC_OscConfig+0xb0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800816c:	d10c      	bne.n	8008188 <HAL_RCC_OscConfig+0x98>
 800816e:	4b7f      	ldr	r3, [pc, #508]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a7e      	ldr	r2, [pc, #504]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	4b7c      	ldr	r3, [pc, #496]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a7b      	ldr	r2, [pc, #492]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e00b      	b.n	80081a0 <HAL_RCC_OscConfig+0xb0>
 8008188:	4b78      	ldr	r3, [pc, #480]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a77      	ldr	r2, [pc, #476]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800818e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	4b75      	ldr	r3, [pc, #468]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a74      	ldr	r2, [pc, #464]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800819a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800819e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d013      	beq.n	80081d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fd fc52 	bl	8005a50 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081b0:	f7fd fc4e 	bl	8005a50 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b64      	cmp	r3, #100	@ 0x64
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e29e      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081c2:	4b6a      	ldr	r3, [pc, #424]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0f0      	beq.n	80081b0 <HAL_RCC_OscConfig+0xc0>
 80081ce:	e014      	b.n	80081fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d0:	f7fd fc3e 	bl	8005a50 <HAL_GetTick>
 80081d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081d8:	f7fd fc3a 	bl	8005a50 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b64      	cmp	r3, #100	@ 0x64
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e28a      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081ea:	4b60      	ldr	r3, [pc, #384]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0xe8>
 80081f6:	e000      	b.n	80081fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d075      	beq.n	80082f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008206:	4b59      	ldr	r3, [pc, #356]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 030c 	and.w	r3, r3, #12
 800820e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008210:	4b56      	ldr	r3, [pc, #344]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b0c      	cmp	r3, #12
 800821e:	d102      	bne.n	8008226 <HAL_RCC_OscConfig+0x136>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d002      	beq.n	800822c <HAL_RCC_OscConfig+0x13c>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d11f      	bne.n	800826c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800822c:	4b4f      	ldr	r3, [pc, #316]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_RCC_OscConfig+0x154>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e25d      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008244:	4b49      	ldr	r3, [pc, #292]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	4946      	ldr	r1, [pc, #280]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008258:	4b45      	ldr	r3, [pc, #276]	@ (8008370 <HAL_RCC_OscConfig+0x280>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f7fd fbab 	bl	80059b8 <HAL_InitTick>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d043      	beq.n	80082f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e249      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d023      	beq.n	80082bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008274:	4b3d      	ldr	r3, [pc, #244]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a3c      	ldr	r2, [pc, #240]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800827a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800827e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fd fbe6 	bl	8005a50 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008288:	f7fd fbe2 	bl	8005a50 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e232      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800829a:	4b34      	ldr	r3, [pc, #208]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a6:	4b31      	ldr	r3, [pc, #196]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	492d      	ldr	r1, [pc, #180]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	604b      	str	r3, [r1, #4]
 80082ba:	e01a      	b.n	80082f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082bc:	4b2b      	ldr	r3, [pc, #172]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2a      	ldr	r2, [pc, #168]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80082c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c8:	f7fd fbc2 	bl	8005a50 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082d0:	f7fd fbbe 	bl	8005a50 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e20e      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082e2:	4b22      	ldr	r3, [pc, #136]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f0      	bne.n	80082d0 <HAL_RCC_OscConfig+0x1e0>
 80082ee:	e000      	b.n	80082f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d041      	beq.n	8008382 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01c      	beq.n	8008340 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008306:	4b19      	ldr	r3, [pc, #100]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800830c:	4a17      	ldr	r2, [pc, #92]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008316:	f7fd fb9b 	bl	8005a50 <HAL_GetTick>
 800831a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800831e:	f7fd fb97 	bl	8005a50 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e1e7      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008330:	4b0e      	ldr	r3, [pc, #56]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0ef      	beq.n	800831e <HAL_RCC_OscConfig+0x22e>
 800833e:	e020      	b.n	8008382 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008340:	4b0a      	ldr	r3, [pc, #40]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008346:	4a09      	ldr	r2, [pc, #36]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008350:	f7fd fb7e 	bl	8005a50 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008356:	e00d      	b.n	8008374 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008358:	f7fd fb7a 	bl	8005a50 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d906      	bls.n	8008374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e1ca      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
 800836a:	bf00      	nop
 800836c:	40021000 	.word	0x40021000
 8008370:	20000118 	.word	0x20000118
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008374:	4b8c      	ldr	r3, [pc, #560]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ea      	bne.n	8008358 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80a6 	beq.w	80084dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008390:	2300      	movs	r3, #0
 8008392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008394:	4b84      	ldr	r3, [pc, #528]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_RCC_OscConfig+0x2b4>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <HAL_RCC_OscConfig+0x2b6>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083aa:	4b7f      	ldr	r3, [pc, #508]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80083ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ae:	4a7e      	ldr	r2, [pc, #504]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80083b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80083b6:	4b7c      	ldr	r3, [pc, #496]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80083b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80083c2:	2301      	movs	r3, #1
 80083c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083c6:	4b79      	ldr	r3, [pc, #484]	@ (80085ac <HAL_RCC_OscConfig+0x4bc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d118      	bne.n	8008404 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083d2:	4b76      	ldr	r3, [pc, #472]	@ (80085ac <HAL_RCC_OscConfig+0x4bc>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a75      	ldr	r2, [pc, #468]	@ (80085ac <HAL_RCC_OscConfig+0x4bc>)
 80083d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083de:	f7fd fb37 	bl	8005a50 <HAL_GetTick>
 80083e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083e4:	e008      	b.n	80083f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083e6:	f7fd fb33 	bl	8005a50 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e183      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083f8:	4b6c      	ldr	r3, [pc, #432]	@ (80085ac <HAL_RCC_OscConfig+0x4bc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f0      	beq.n	80083e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d108      	bne.n	800841e <HAL_RCC_OscConfig+0x32e>
 800840c:	4b66      	ldr	r3, [pc, #408]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008412:	4a65      	ldr	r2, [pc, #404]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800841c:	e024      	b.n	8008468 <HAL_RCC_OscConfig+0x378>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	2b05      	cmp	r3, #5
 8008424:	d110      	bne.n	8008448 <HAL_RCC_OscConfig+0x358>
 8008426:	4b60      	ldr	r3, [pc, #384]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800842c:	4a5e      	ldr	r2, [pc, #376]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800842e:	f043 0304 	orr.w	r3, r3, #4
 8008432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008436:	4b5c      	ldr	r3, [pc, #368]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843c:	4a5a      	ldr	r2, [pc, #360]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008446:	e00f      	b.n	8008468 <HAL_RCC_OscConfig+0x378>
 8008448:	4b57      	ldr	r3, [pc, #348]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844e:	4a56      	ldr	r2, [pc, #344]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008450:	f023 0301 	bic.w	r3, r3, #1
 8008454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008458:	4b53      	ldr	r3, [pc, #332]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845e:	4a52      	ldr	r2, [pc, #328]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008460:	f023 0304 	bic.w	r3, r3, #4
 8008464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d016      	beq.n	800849e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fd faee 	bl	8005a50 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008476:	e00a      	b.n	800848e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008478:	f7fd faea 	bl	8005a50 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e138      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800848e:	4b46      	ldr	r3, [pc, #280]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0ed      	beq.n	8008478 <HAL_RCC_OscConfig+0x388>
 800849c:	e015      	b.n	80084ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849e:	f7fd fad7 	bl	8005a50 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084a4:	e00a      	b.n	80084bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a6:	f7fd fad3 	bl	8005a50 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d901      	bls.n	80084bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e121      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084bc:	4b3a      	ldr	r3, [pc, #232]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80084be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1ed      	bne.n	80084a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084ca:	7ffb      	ldrb	r3, [r7, #31]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d105      	bne.n	80084dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084d0:	4b35      	ldr	r3, [pc, #212]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d4:	4a34      	ldr	r2, [pc, #208]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80084d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d03c      	beq.n	8008562 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01c      	beq.n	800852a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084f0:	4b2d      	ldr	r3, [pc, #180]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80084f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084f6:	4a2c      	ldr	r2, [pc, #176]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008500:	f7fd faa6 	bl	8005a50 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008508:	f7fd faa2 	bl	8005a50 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e0f2      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800851a:	4b23      	ldr	r3, [pc, #140]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800851c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0ef      	beq.n	8008508 <HAL_RCC_OscConfig+0x418>
 8008528:	e01b      	b.n	8008562 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800852a:	4b1f      	ldr	r3, [pc, #124]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800852c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008530:	4a1d      	ldr	r2, [pc, #116]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853a:	f7fd fa89 	bl	8005a50 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008542:	f7fd fa85 	bl	8005a50 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e0d5      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008554:	4b14      	ldr	r3, [pc, #80]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1ef      	bne.n	8008542 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80c9 	beq.w	80086fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800856c:	4b0e      	ldr	r3, [pc, #56]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 030c 	and.w	r3, r3, #12
 8008574:	2b0c      	cmp	r3, #12
 8008576:	f000 8083 	beq.w	8008680 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d15e      	bne.n	8008640 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008582:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a08      	ldr	r2, [pc, #32]	@ (80085a8 <HAL_RCC_OscConfig+0x4b8>)
 8008588:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800858c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858e:	f7fd fa5f 	bl	8005a50 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008594:	e00c      	b.n	80085b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008596:	f7fd fa5b 	bl	8005a50 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d905      	bls.n	80085b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e0ab      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
 80085a8:	40021000 	.word	0x40021000
 80085ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085b0:	4b55      	ldr	r3, [pc, #340]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1ec      	bne.n	8008596 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085bc:	4b52      	ldr	r3, [pc, #328]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	4b52      	ldr	r3, [pc, #328]	@ (800870c <HAL_RCC_OscConfig+0x61c>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6a11      	ldr	r1, [r2, #32]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085cc:	3a01      	subs	r2, #1
 80085ce:	0112      	lsls	r2, r2, #4
 80085d0:	4311      	orrs	r1, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80085d6:	0212      	lsls	r2, r2, #8
 80085d8:	4311      	orrs	r1, r2
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80085de:	0852      	lsrs	r2, r2, #1
 80085e0:	3a01      	subs	r2, #1
 80085e2:	0552      	lsls	r2, r2, #21
 80085e4:	4311      	orrs	r1, r2
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80085ea:	0852      	lsrs	r2, r2, #1
 80085ec:	3a01      	subs	r2, #1
 80085ee:	0652      	lsls	r2, r2, #25
 80085f0:	4311      	orrs	r1, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085f6:	06d2      	lsls	r2, r2, #27
 80085f8:	430a      	orrs	r2, r1
 80085fa:	4943      	ldr	r1, [pc, #268]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008600:	4b41      	ldr	r3, [pc, #260]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a40      	ldr	r2, [pc, #256]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800860a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800860c:	4b3e      	ldr	r3, [pc, #248]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4a3d      	ldr	r2, [pc, #244]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008616:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008618:	f7fd fa1a 	bl	8005a50 <HAL_GetTick>
 800861c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800861e:	e008      	b.n	8008632 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008620:	f7fd fa16 	bl	8005a50 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	2b02      	cmp	r3, #2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e066      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008632:	4b35      	ldr	r3, [pc, #212]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0f0      	beq.n	8008620 <HAL_RCC_OscConfig+0x530>
 800863e:	e05e      	b.n	80086fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008640:	4b31      	ldr	r3, [pc, #196]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a30      	ldr	r2, [pc, #192]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800864a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864c:	f7fd fa00 	bl	8005a50 <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008654:	f7fd f9fc 	bl	8005a50 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e04c      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008666:	4b28      	ldr	r3, [pc, #160]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f0      	bne.n	8008654 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008672:	4b25      	ldr	r3, [pc, #148]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	4924      	ldr	r1, [pc, #144]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 8008678:	4b25      	ldr	r3, [pc, #148]	@ (8008710 <HAL_RCC_OscConfig+0x620>)
 800867a:	4013      	ands	r3, r2
 800867c:	60cb      	str	r3, [r1, #12]
 800867e:	e03e      	b.n	80086fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e039      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800868c:	4b1e      	ldr	r3, [pc, #120]	@ (8008708 <HAL_RCC_OscConfig+0x618>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f003 0203 	and.w	r2, r3, #3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	429a      	cmp	r2, r3
 800869e:	d12c      	bne.n	80086fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086aa:	3b01      	subs	r3, #1
 80086ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d123      	bne.n	80086fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086be:	429a      	cmp	r2, r3
 80086c0:	d11b      	bne.n	80086fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d113      	bne.n	80086fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	3b01      	subs	r3, #1
 80086e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d109      	bne.n	80086fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	3b01      	subs	r3, #1
 80086f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d001      	beq.n	80086fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3720      	adds	r7, #32
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40021000 	.word	0x40021000
 800870c:	019f800c 	.word	0x019f800c
 8008710:	feeefffc 	.word	0xfeeefffc

08008714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e11e      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800872c:	4b91      	ldr	r3, [pc, #580]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d910      	bls.n	800875c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873a:	4b8e      	ldr	r3, [pc, #568]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f023 020f 	bic.w	r2, r3, #15
 8008742:	498c      	ldr	r1, [pc, #560]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800874a:	4b8a      	ldr	r3, [pc, #552]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d001      	beq.n	800875c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e106      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d073      	beq.n	8008850 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d129      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008770:	4b81      	ldr	r3, [pc, #516]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e0f4      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008780:	f000 f99e 	bl	8008ac0 <RCC_GetSysClockFreqFromPLLSource>
 8008784:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4a7c      	ldr	r2, [pc, #496]	@ (800897c <HAL_RCC_ClockConfig+0x268>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d93f      	bls.n	800880e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800878e:	4b7a      	ldr	r3, [pc, #488]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d033      	beq.n	800880e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d12f      	bne.n	800880e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80087ae:	4b72      	ldr	r3, [pc, #456]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087b6:	4a70      	ldr	r2, [pc, #448]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80087b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80087be:	2380      	movs	r3, #128	@ 0x80
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e024      	b.n	800880e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d107      	bne.n	80087dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087cc:	4b6a      	ldr	r3, [pc, #424]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e0c6      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087dc:	4b66      	ldr	r3, [pc, #408]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0be      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80087ec:	f000 f8ce 	bl	800898c <HAL_RCC_GetSysClockFreq>
 80087f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	4a61      	ldr	r2, [pc, #388]	@ (800897c <HAL_RCC_ClockConfig+0x268>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d909      	bls.n	800880e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80087fa:	4b5f      	ldr	r3, [pc, #380]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008802:	4a5d      	ldr	r2, [pc, #372]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008808:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800880a:	2380      	movs	r3, #128	@ 0x80
 800880c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800880e:	4b5a      	ldr	r3, [pc, #360]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f023 0203 	bic.w	r2, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4957      	ldr	r1, [pc, #348]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800881c:	4313      	orrs	r3, r2
 800881e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008820:	f7fd f916 	bl	8005a50 <HAL_GetTick>
 8008824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008826:	e00a      	b.n	800883e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008828:	f7fd f912 	bl	8005a50 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008836:	4293      	cmp	r3, r2
 8008838:	d901      	bls.n	800883e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e095      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883e:	4b4e      	ldr	r3, [pc, #312]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 020c 	and.w	r2, r3, #12
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	429a      	cmp	r2, r3
 800884e:	d1eb      	bne.n	8008828 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d023      	beq.n	80088a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008868:	4b43      	ldr	r3, [pc, #268]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4a42      	ldr	r2, [pc, #264]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800886e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008872:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008880:	4b3d      	ldr	r3, [pc, #244]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008888:	4a3b      	ldr	r2, [pc, #236]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800888a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800888e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008890:	4b39      	ldr	r3, [pc, #228]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	4936      	ldr	r1, [pc, #216]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	608b      	str	r3, [r1, #8]
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b80      	cmp	r3, #128	@ 0x80
 80088a8:	d105      	bne.n	80088b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80088aa:	4b33      	ldr	r3, [pc, #204]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	4a32      	ldr	r2, [pc, #200]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 80088b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d21d      	bcs.n	8008900 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f023 020f 	bic.w	r2, r3, #15
 80088cc:	4929      	ldr	r1, [pc, #164]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80088d4:	f7fd f8bc 	bl	8005a50 <HAL_GetTick>
 80088d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088da:	e00a      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088dc:	f7fd f8b8 	bl	8005a50 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e03b      	b.n	800896a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f2:	4b20      	ldr	r3, [pc, #128]	@ (8008974 <HAL_RCC_ClockConfig+0x260>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d1ed      	bne.n	80088dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800890c:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	4917      	ldr	r1, [pc, #92]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800891a:	4313      	orrs	r3, r2
 800891c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800892a:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	490f      	ldr	r1, [pc, #60]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 800893a:	4313      	orrs	r3, r2
 800893c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800893e:	f000 f825 	bl	800898c <HAL_RCC_GetSysClockFreq>
 8008942:	4602      	mov	r2, r0
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <HAL_RCC_ClockConfig+0x264>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	490c      	ldr	r1, [pc, #48]	@ (8008980 <HAL_RCC_ClockConfig+0x26c>)
 8008950:	5ccb      	ldrb	r3, [r1, r3]
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	fa22 f303 	lsr.w	r3, r2, r3
 800895a:	4a0a      	ldr	r2, [pc, #40]	@ (8008984 <HAL_RCC_ClockConfig+0x270>)
 800895c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <HAL_RCC_ClockConfig+0x274>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f7fd f828 	bl	80059b8 <HAL_InitTick>
 8008968:	4603      	mov	r3, r0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	40022000 	.word	0x40022000
 8008978:	40021000 	.word	0x40021000
 800897c:	04c4b400 	.word	0x04c4b400
 8008980:	0800ee70 	.word	0x0800ee70
 8008984:	20000114 	.word	0x20000114
 8008988:	20000118 	.word	0x20000118

0800898c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008992:	4b2c      	ldr	r3, [pc, #176]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 030c 	and.w	r3, r3, #12
 800899a:	2b04      	cmp	r3, #4
 800899c:	d102      	bne.n	80089a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800899e:	4b2a      	ldr	r3, [pc, #168]	@ (8008a48 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	e047      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089a4:	4b27      	ldr	r3, [pc, #156]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 030c 	and.w	r3, r3, #12
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d102      	bne.n	80089b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089b0:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	e03e      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80089b6:	4b23      	ldr	r3, [pc, #140]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 030c 	and.w	r3, r3, #12
 80089be:	2b0c      	cmp	r3, #12
 80089c0:	d136      	bne.n	8008a30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089c2:	4b20      	ldr	r3, [pc, #128]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	091b      	lsrs	r3, r3, #4
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	3301      	adds	r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d10c      	bne.n	80089fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089e0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e8:	4a16      	ldr	r2, [pc, #88]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089ea:	68d2      	ldr	r2, [r2, #12]
 80089ec:	0a12      	lsrs	r2, r2, #8
 80089ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	617b      	str	r3, [r7, #20]
      break;
 80089f8:	e00c      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089fa:	4a13      	ldr	r2, [pc, #76]	@ (8008a48 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	4a10      	ldr	r2, [pc, #64]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a04:	68d2      	ldr	r2, [r2, #12]
 8008a06:	0a12      	lsrs	r2, r2, #8
 8008a08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a0c:	fb02 f303 	mul.w	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]
      break;
 8008a12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a14:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	0e5b      	lsrs	r3, r3, #25
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	3301      	adds	r3, #1
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	e001      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a34:	693b      	ldr	r3, [r7, #16]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40021000 	.word	0x40021000
 8008a48:	00f42400 	.word	0x00f42400
 8008a4c:	016e3600 	.word	0x016e3600

08008a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a54:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000114 	.word	0x20000114

08008a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a6c:	f7ff fff0 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b06      	ldr	r3, [pc, #24]	@ (8008a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4904      	ldr	r1, [pc, #16]	@ (8008a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	0800ee80 	.word	0x0800ee80

08008a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a98:	f7ff ffda 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	0adb      	lsrs	r3, r3, #11
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	@ (8008abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800ee80 	.word	0x0800ee80

08008ac0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d10c      	bne.n	8008afe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ae4:	4a17      	ldr	r2, [pc, #92]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aec:	4a14      	ldr	r2, [pc, #80]	@ (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008aee:	68d2      	ldr	r2, [r2, #12]
 8008af0:	0a12      	lsrs	r2, r2, #8
 8008af2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008af6:	fb02 f303 	mul.w	r3, r2, r3
 8008afa:	617b      	str	r3, [r7, #20]
    break;
 8008afc:	e00c      	b.n	8008b18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008afe:	4a12      	ldr	r2, [pc, #72]	@ (8008b48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b06:	4a0e      	ldr	r2, [pc, #56]	@ (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b08:	68d2      	ldr	r2, [r2, #12]
 8008b0a:	0a12      	lsrs	r2, r2, #8
 8008b0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b10:	fb02 f303 	mul.w	r3, r2, r3
 8008b14:	617b      	str	r3, [r7, #20]
    break;
 8008b16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b18:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	0e5b      	lsrs	r3, r3, #25
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	3301      	adds	r3, #1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b32:	687b      	ldr	r3, [r7, #4]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	40021000 	.word	0x40021000
 8008b44:	016e3600 	.word	0x016e3600
 8008b48:	00f42400 	.word	0x00f42400

08008b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b54:	2300      	movs	r3, #0
 8008b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b58:	2300      	movs	r3, #0
 8008b5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8098 	beq.w	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b6e:	4b43      	ldr	r3, [pc, #268]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10d      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b7a:	4b40      	ldr	r3, [pc, #256]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b86:	4b3d      	ldr	r3, [pc, #244]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b8e:	60bb      	str	r3, [r7, #8]
 8008b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b92:	2301      	movs	r3, #1
 8008b94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b96:	4b3a      	ldr	r3, [pc, #232]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a39      	ldr	r2, [pc, #228]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ba0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ba2:	f7fc ff55 	bl	8005a50 <HAL_GetTick>
 8008ba6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba8:	e009      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008baa:	f7fc ff51 	bl	8005a50 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d902      	bls.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	74fb      	strb	r3, [r7, #19]
        break;
 8008bbc:	e005      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bbe:	4b30      	ldr	r3, [pc, #192]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0ef      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008bca:	7cfb      	ldrb	r3, [r7, #19]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d159      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01e      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d019      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008bec:	4b23      	ldr	r3, [pc, #140]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bf8:	4b20      	ldr	r3, [pc, #128]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c08:	4b1c      	ldr	r3, [pc, #112]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c18:	4a18      	ldr	r2, [pc, #96]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d016      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2a:	f7fc ff11 	bl	8005a50 <HAL_GetTick>
 8008c2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c30:	e00b      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c32:	f7fc ff0d 	bl	8005a50 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d902      	bls.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	74fb      	strb	r3, [r7, #19]
            break;
 8008c48:	e006      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0ec      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c5e:	4b07      	ldr	r3, [pc, #28]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6c:	4903      	ldr	r1, [pc, #12]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008c74:	e008      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c76:	7cfb      	ldrb	r3, [r7, #19]
 8008c78:	74bb      	strb	r3, [r7, #18]
 8008c7a:	e005      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008c7c:	40021000 	.word	0x40021000
 8008c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c84:	7cfb      	ldrb	r3, [r7, #19]
 8008c86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c88:	7c7b      	ldrb	r3, [r7, #17]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c8e:	4ba7      	ldr	r3, [pc, #668]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c92:	4aa6      	ldr	r2, [pc, #664]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ca6:	4ba1      	ldr	r3, [pc, #644]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	f023 0203 	bic.w	r2, r3, #3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	499d      	ldr	r1, [pc, #628]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cc8:	4b98      	ldr	r3, [pc, #608]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cce:	f023 020c 	bic.w	r2, r3, #12
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	4995      	ldr	r1, [pc, #596]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cea:	4b90      	ldr	r3, [pc, #576]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	498c      	ldr	r1, [pc, #560]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d0c:	4b87      	ldr	r3, [pc, #540]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	4984      	ldr	r1, [pc, #528]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0310 	and.w	r3, r3, #16
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	497b      	ldr	r1, [pc, #492]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d50:	4b76      	ldr	r3, [pc, #472]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	4973      	ldr	r1, [pc, #460]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d72:	4b6e      	ldr	r3, [pc, #440]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	496a      	ldr	r1, [pc, #424]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d94:	4b65      	ldr	r3, [pc, #404]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	4962      	ldr	r1, [pc, #392]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008db6:	4b5d      	ldr	r3, [pc, #372]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	4959      	ldr	r1, [pc, #356]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00a      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dd8:	4b54      	ldr	r3, [pc, #336]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dde:	f023 0203 	bic.w	r2, r3, #3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de6:	4951      	ldr	r1, [pc, #324]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e08:	4948      	ldr	r1, [pc, #288]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d015      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e1c:	4b43      	ldr	r3, [pc, #268]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2a:	4940      	ldr	r1, [pc, #256]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3a:	d105      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	4a3a      	ldr	r2, [pc, #232]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d015      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e54:	4b35      	ldr	r3, [pc, #212]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e62:	4932      	ldr	r1, [pc, #200]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e72:	d105      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e74:	4b2d      	ldr	r3, [pc, #180]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	4a2c      	ldr	r2, [pc, #176]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e8c:	4b27      	ldr	r3, [pc, #156]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	4924      	ldr	r1, [pc, #144]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eaa:	d105      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008eac:	4b1f      	ldr	r3, [pc, #124]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d015      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ec4:	4b19      	ldr	r3, [pc, #100]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed2:	4916      	ldr	r1, [pc, #88]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ee2:	d105      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ee4:	4b11      	ldr	r3, [pc, #68]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4a10      	ldr	r2, [pc, #64]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d019      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008efc:	4b0b      	ldr	r3, [pc, #44]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0a:	4908      	ldr	r1, [pc, #32]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f1a:	d109      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f1c:	4b03      	ldr	r3, [pc, #12]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4a02      	ldr	r2, [pc, #8]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f26:	60d3      	str	r3, [r2, #12]
 8008f28:	e002      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008f2a:	bf00      	nop
 8008f2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d015      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f3c:	4b29      	ldr	r3, [pc, #164]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	4926      	ldr	r1, [pc, #152]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f5a:	d105      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f5c:	4b21      	ldr	r3, [pc, #132]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	4a20      	ldr	r2, [pc, #128]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008f74:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f82:	4918      	ldr	r1, [pc, #96]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f92:	d105      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f94:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	4a12      	ldr	r2, [pc, #72]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d015      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fac:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fba:	490a      	ldr	r1, [pc, #40]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fca:	d105      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	4a04      	ldr	r2, [pc, #16]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40021000 	.word	0x40021000

08008fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e054      	b.n	80090a4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d111      	bne.n	800902a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 fee2 	bl	800add8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a23      	ldr	r2, [pc, #140]	@ (80090ac <HAL_TIM_Base_Init+0xc4>)
 8009020:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2202      	movs	r2, #2
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	4619      	mov	r1, r3
 800903c:	4610      	mov	r0, r2
 800903e:	f001 fa2b 	bl	800a498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	08005279 	.word	0x08005279

080090b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d001      	beq.n	80090c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e04c      	b.n	8009162 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a26      	ldr	r2, [pc, #152]	@ (8009170 <HAL_TIM_Base_Start+0xc0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d022      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e2:	d01d      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a22      	ldr	r2, [pc, #136]	@ (8009174 <HAL_TIM_Base_Start+0xc4>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d018      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a21      	ldr	r2, [pc, #132]	@ (8009178 <HAL_TIM_Base_Start+0xc8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1f      	ldr	r2, [pc, #124]	@ (800917c <HAL_TIM_Base_Start+0xcc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00e      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1e      	ldr	r2, [pc, #120]	@ (8009180 <HAL_TIM_Base_Start+0xd0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d009      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a1c      	ldr	r2, [pc, #112]	@ (8009184 <HAL_TIM_Base_Start+0xd4>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d004      	beq.n	8009120 <HAL_TIM_Base_Start+0x70>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a1b      	ldr	r2, [pc, #108]	@ (8009188 <HAL_TIM_Base_Start+0xd8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d115      	bne.n	800914c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	4b19      	ldr	r3, [pc, #100]	@ (800918c <HAL_TIM_Base_Start+0xdc>)
 8009128:	4013      	ands	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b06      	cmp	r3, #6
 8009130:	d015      	beq.n	800915e <HAL_TIM_Base_Start+0xae>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009138:	d011      	beq.n	800915e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914a:	e008      	b.n	800915e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0201 	orr.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	e000      	b.n	8009160 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800915e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40012c00 	.word	0x40012c00
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40014000 	.word	0x40014000
 8009188:	40015000 	.word	0x40015000
 800918c:	00010007 	.word	0x00010007

08009190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d001      	beq.n	80091a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e054      	b.n	8009252 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a26      	ldr	r2, [pc, #152]	@ (8009260 <HAL_TIM_Base_Start_IT+0xd0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d022      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d2:	d01d      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a22      	ldr	r2, [pc, #136]	@ (8009264 <HAL_TIM_Base_Start_IT+0xd4>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d018      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a21      	ldr	r2, [pc, #132]	@ (8009268 <HAL_TIM_Base_Start_IT+0xd8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1f      	ldr	r2, [pc, #124]	@ (800926c <HAL_TIM_Base_Start_IT+0xdc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00e      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009270 <HAL_TIM_Base_Start_IT+0xe0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a1c      	ldr	r2, [pc, #112]	@ (8009274 <HAL_TIM_Base_Start_IT+0xe4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d004      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x80>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1b      	ldr	r2, [pc, #108]	@ (8009278 <HAL_TIM_Base_Start_IT+0xe8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d115      	bne.n	800923c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	4b19      	ldr	r3, [pc, #100]	@ (800927c <HAL_TIM_Base_Start_IT+0xec>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b06      	cmp	r3, #6
 8009220:	d015      	beq.n	800924e <HAL_TIM_Base_Start_IT+0xbe>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009228:	d011      	beq.n	800924e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923a:	e008      	b.n	800924e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e000      	b.n	8009250 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40012c00 	.word	0x40012c00
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40013400 	.word	0x40013400
 8009274:	40014000 	.word	0x40014000
 8009278:	40015000 	.word	0x40015000
 800927c:	00010007 	.word	0x00010007

08009280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e054      	b.n	800933c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d111      	bne.n	80092c2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 fd96 	bl	800add8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a23      	ldr	r2, [pc, #140]	@ (8009344 <HAL_TIM_PWM_Init+0xc4>)
 80092b8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f001 f8df 	bl	800a498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	0800522d 	.word	0x0800522d

08009348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <HAL_TIM_PWM_Start+0x24>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b01      	cmp	r3, #1
 8009362:	bf14      	ite	ne
 8009364:	2301      	movne	r3, #1
 8009366:	2300      	moveq	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	e03c      	b.n	80093e6 <HAL_TIM_PWM_Start+0x9e>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b04      	cmp	r3, #4
 8009370:	d109      	bne.n	8009386 <HAL_TIM_PWM_Start+0x3e>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b01      	cmp	r3, #1
 800937c:	bf14      	ite	ne
 800937e:	2301      	movne	r3, #1
 8009380:	2300      	moveq	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	e02f      	b.n	80093e6 <HAL_TIM_PWM_Start+0x9e>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b08      	cmp	r3, #8
 800938a:	d109      	bne.n	80093a0 <HAL_TIM_PWM_Start+0x58>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b01      	cmp	r3, #1
 8009396:	bf14      	ite	ne
 8009398:	2301      	movne	r3, #1
 800939a:	2300      	moveq	r3, #0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	e022      	b.n	80093e6 <HAL_TIM_PWM_Start+0x9e>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b0c      	cmp	r3, #12
 80093a4:	d109      	bne.n	80093ba <HAL_TIM_PWM_Start+0x72>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	bf14      	ite	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	2300      	moveq	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	e015      	b.n	80093e6 <HAL_TIM_PWM_Start+0x9e>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b10      	cmp	r3, #16
 80093be:	d109      	bne.n	80093d4 <HAL_TIM_PWM_Start+0x8c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	e008      	b.n	80093e6 <HAL_TIM_PWM_Start+0x9e>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0a6      	b.n	800953c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d104      	bne.n	80093fe <HAL_TIM_PWM_Start+0xb6>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093fc:	e023      	b.n	8009446 <HAL_TIM_PWM_Start+0xfe>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2b04      	cmp	r3, #4
 8009402:	d104      	bne.n	800940e <HAL_TIM_PWM_Start+0xc6>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800940c:	e01b      	b.n	8009446 <HAL_TIM_PWM_Start+0xfe>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b08      	cmp	r3, #8
 8009412:	d104      	bne.n	800941e <HAL_TIM_PWM_Start+0xd6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800941c:	e013      	b.n	8009446 <HAL_TIM_PWM_Start+0xfe>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b0c      	cmp	r3, #12
 8009422:	d104      	bne.n	800942e <HAL_TIM_PWM_Start+0xe6>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2202      	movs	r2, #2
 8009428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800942c:	e00b      	b.n	8009446 <HAL_TIM_PWM_Start+0xfe>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b10      	cmp	r3, #16
 8009432:	d104      	bne.n	800943e <HAL_TIM_PWM_Start+0xf6>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800943c:	e003      	b.n	8009446 <HAL_TIM_PWM_Start+0xfe>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2201      	movs	r2, #1
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fc9c 	bl	800ad8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a3a      	ldr	r2, [pc, #232]	@ (8009544 <HAL_TIM_PWM_Start+0x1fc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d018      	beq.n	8009490 <HAL_TIM_PWM_Start+0x148>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a39      	ldr	r2, [pc, #228]	@ (8009548 <HAL_TIM_PWM_Start+0x200>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <HAL_TIM_PWM_Start+0x148>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a37      	ldr	r2, [pc, #220]	@ (800954c <HAL_TIM_PWM_Start+0x204>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00e      	beq.n	8009490 <HAL_TIM_PWM_Start+0x148>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a36      	ldr	r2, [pc, #216]	@ (8009550 <HAL_TIM_PWM_Start+0x208>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d009      	beq.n	8009490 <HAL_TIM_PWM_Start+0x148>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a34      	ldr	r2, [pc, #208]	@ (8009554 <HAL_TIM_PWM_Start+0x20c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIM_PWM_Start+0x148>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a33      	ldr	r2, [pc, #204]	@ (8009558 <HAL_TIM_PWM_Start+0x210>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d101      	bne.n	8009494 <HAL_TIM_PWM_Start+0x14c>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <HAL_TIM_PWM_Start+0x14e>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a25      	ldr	r2, [pc, #148]	@ (8009544 <HAL_TIM_PWM_Start+0x1fc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d022      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094bc:	d01d      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a26      	ldr	r2, [pc, #152]	@ (800955c <HAL_TIM_PWM_Start+0x214>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d018      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a24      	ldr	r2, [pc, #144]	@ (8009560 <HAL_TIM_PWM_Start+0x218>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a23      	ldr	r2, [pc, #140]	@ (8009564 <HAL_TIM_PWM_Start+0x21c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a19      	ldr	r2, [pc, #100]	@ (8009548 <HAL_TIM_PWM_Start+0x200>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a18      	ldr	r2, [pc, #96]	@ (800954c <HAL_TIM_PWM_Start+0x204>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Start+0x1b2>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a18      	ldr	r2, [pc, #96]	@ (8009558 <HAL_TIM_PWM_Start+0x210>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d115      	bne.n	8009526 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	4b19      	ldr	r3, [pc, #100]	@ (8009568 <HAL_TIM_PWM_Start+0x220>)
 8009502:	4013      	ands	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b06      	cmp	r3, #6
 800950a:	d015      	beq.n	8009538 <HAL_TIM_PWM_Start+0x1f0>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009512:	d011      	beq.n	8009538 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009524:	e008      	b.n	8009538 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0201 	orr.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e000      	b.n	800953a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40012c00 	.word	0x40012c00
 8009548:	40013400 	.word	0x40013400
 800954c:	40014000 	.word	0x40014000
 8009550:	40014400 	.word	0x40014400
 8009554:	40014800 	.word	0x40014800
 8009558:	40015000 	.word	0x40015000
 800955c:	40000400 	.word	0x40000400
 8009560:	40000800 	.word	0x40000800
 8009564:	40000c00 	.word	0x40000c00
 8009568:	00010007 	.word	0x00010007

0800956c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e04c      	b.n	800961a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d111      	bne.n	80095b0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fc1f 	bl	800add8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009624 <HAL_TIM_OnePulse_Init+0xb8>)
 80095a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f000 ff68 	bl	800a498 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0208 	bic.w	r2, r2, #8
 80095d6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6819      	ldr	r1, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08009629 	.word	0x08009629

08009628 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800964c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009654:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800965c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009664:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d108      	bne.n	800967e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d105      	bne.n	800967e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009672:	7b7b      	ldrb	r3, [r7, #13]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d102      	bne.n	800967e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009678:	7b3b      	ldrb	r3, [r7, #12]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d001      	beq.n	8009682 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e059      	b.n	8009736 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2202      	movs	r2, #2
 8009686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2202      	movs	r2, #2
 800969e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0202 	orr.w	r2, r2, #2
 80096b0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f042 0204 	orr.w	r2, r2, #4
 80096c0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2201      	movs	r2, #1
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fb5e 	bl	800ad8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2201      	movs	r2, #1
 80096d6:	2104      	movs	r1, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fb57 	bl	800ad8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a17      	ldr	r2, [pc, #92]	@ (8009740 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d018      	beq.n	800971a <HAL_TIM_OnePulse_Start_IT+0xde>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a15      	ldr	r2, [pc, #84]	@ (8009744 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d013      	beq.n	800971a <HAL_TIM_OnePulse_Start_IT+0xde>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a14      	ldr	r2, [pc, #80]	@ (8009748 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00e      	beq.n	800971a <HAL_TIM_OnePulse_Start_IT+0xde>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a12      	ldr	r2, [pc, #72]	@ (800974c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d009      	beq.n	800971a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a11      	ldr	r2, [pc, #68]	@ (8009750 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0f      	ldr	r2, [pc, #60]	@ (8009754 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d101      	bne.n	800971e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d007      	beq.n	8009734 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009732:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	40012c00 	.word	0x40012c00
 8009744:	40013400 	.word	0x40013400
 8009748:	40014000 	.word	0x40014000
 800974c:	40014400 	.word	0x40014400
 8009750:	40014800 	.word	0x40014800
 8009754:	40015000 	.word	0x40015000

08009758 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e0a2      	b.n	80098b2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d111      	bne.n	800979c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fb29 	bl	800add8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a4a      	ldr	r2, [pc, #296]	@ (80098bc <HAL_TIM_Encoder_Init+0x164>)
 8009792:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80097b2:	f023 0307 	bic.w	r3, r3, #7
 80097b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f000 fe68 	bl	800a498 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097f0:	f023 0303 	bic.w	r3, r3, #3
 80097f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	4313      	orrs	r3, r2
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	4313      	orrs	r3, r2
 8009806:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800980e:	f023 030c 	bic.w	r3, r3, #12
 8009812:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800981a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800981e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	4313      	orrs	r3, r2
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	011a      	lsls	r2, r3, #4
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	031b      	lsls	r3, r3, #12
 800983e:	4313      	orrs	r3, r2
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800984c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009854:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	4313      	orrs	r3, r2
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	08005321 	.word	0x08005321

080098c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80098d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d110      	bne.n	8009912 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d102      	bne.n	80098fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80098f6:	7b7b      	ldrb	r3, [r7, #13]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d001      	beq.n	8009900 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e069      	b.n	80099d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009910:	e031      	b.n	8009976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b04      	cmp	r3, #4
 8009916:	d110      	bne.n	800993a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d102      	bne.n	8009924 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800991e:	7b3b      	ldrb	r3, [r7, #12]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d001      	beq.n	8009928 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e055      	b.n	80099d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009938:	e01d      	b.n	8009976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d108      	bne.n	8009952 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d105      	bne.n	8009952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009946:	7b7b      	ldrb	r3, [r7, #13]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d102      	bne.n	8009952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800994c:	7b3b      	ldrb	r3, [r7, #12]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d001      	beq.n	8009956 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e03e      	b.n	80099d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2202      	movs	r2, #2
 800996a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_TIM_Encoder_Start+0xc4>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b04      	cmp	r3, #4
 8009980:	d008      	beq.n	8009994 <HAL_TIM_Encoder_Start+0xd4>
 8009982:	e00f      	b.n	80099a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2201      	movs	r2, #1
 800998a:	2100      	movs	r1, #0
 800998c:	4618      	mov	r0, r3
 800998e:	f001 f9fd 	bl	800ad8c <TIM_CCxChannelCmd>
      break;
 8009992:	e016      	b.n	80099c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2201      	movs	r2, #1
 800999a:	2104      	movs	r1, #4
 800999c:	4618      	mov	r0, r3
 800999e:	f001 f9f5 	bl	800ad8c <TIM_CCxChannelCmd>
      break;
 80099a2:	e00e      	b.n	80099c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2201      	movs	r2, #1
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 f9ed 	bl	800ad8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2201      	movs	r2, #1
 80099b8:	2104      	movs	r1, #4
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 f9e6 	bl	800ad8c <TIM_CCxChannelCmd>
      break;
 80099c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0201 	orr.w	r2, r2, #1
 80099d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d026      	beq.n	8009a4c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d021      	beq.n	8009a4c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0202 	mvn.w	r2, #2
 8009a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
 8009a30:	e009      	b.n	8009a46 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f003 0304 	and.w	r3, r3, #4
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d026      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d021      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f06f 0204 	mvn.w	r2, #4
 8009a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	4798      	blx	r3
 8009a88:	e009      	b.n	8009a9e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d026      	beq.n	8009afc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d021      	beq.n	8009afc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0208 	mvn.w	r2, #8
 8009ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
 8009ae0:	e009      	b.n	8009af6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d026      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d021      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0210 	mvn.w	r2, #16
 8009b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2208      	movs	r2, #8
 8009b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
 8009b38:	e009      	b.n	8009b4e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00e      	beq.n	8009b7c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d009      	beq.n	8009b7c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0201 	mvn.w	r2, #1
 8009b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d104      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00e      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00e      	beq.n	8009bfe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00e      	beq.n	8009c26 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f06f 0220 	mvn.w	r2, #32
 8009c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00e      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d009      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00e      	beq.n	8009c9e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00e      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e0ff      	b.n	8009eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b14      	cmp	r3, #20
 8009cfa:	f200 80f0 	bhi.w	8009ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d59 	.word	0x08009d59
 8009d08:	08009edf 	.word	0x08009edf
 8009d0c:	08009edf 	.word	0x08009edf
 8009d10:	08009edf 	.word	0x08009edf
 8009d14:	08009d99 	.word	0x08009d99
 8009d18:	08009edf 	.word	0x08009edf
 8009d1c:	08009edf 	.word	0x08009edf
 8009d20:	08009edf 	.word	0x08009edf
 8009d24:	08009ddb 	.word	0x08009ddb
 8009d28:	08009edf 	.word	0x08009edf
 8009d2c:	08009edf 	.word	0x08009edf
 8009d30:	08009edf 	.word	0x08009edf
 8009d34:	08009e1b 	.word	0x08009e1b
 8009d38:	08009edf 	.word	0x08009edf
 8009d3c:	08009edf 	.word	0x08009edf
 8009d40:	08009edf 	.word	0x08009edf
 8009d44:	08009e5d 	.word	0x08009e5d
 8009d48:	08009edf 	.word	0x08009edf
 8009d4c:	08009edf 	.word	0x08009edf
 8009d50:	08009edf 	.word	0x08009edf
 8009d54:	08009e9d 	.word	0x08009e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fc4e 	bl	800a600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	699a      	ldr	r2, [r3, #24]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0208 	orr.w	r2, r2, #8
 8009d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0204 	bic.w	r2, r2, #4
 8009d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6999      	ldr	r1, [r3, #24]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	691a      	ldr	r2, [r3, #16]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	619a      	str	r2, [r3, #24]
      break;
 8009d96:	e0a5      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fcc8 	bl	800a734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6999      	ldr	r1, [r3, #24]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	021a      	lsls	r2, r3, #8
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	619a      	str	r2, [r3, #24]
      break;
 8009dd8:	e084      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fd3b 	bl	800a85c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69da      	ldr	r2, [r3, #28]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f042 0208 	orr.w	r2, r2, #8
 8009df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69da      	ldr	r2, [r3, #28]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 0204 	bic.w	r2, r2, #4
 8009e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69d9      	ldr	r1, [r3, #28]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	61da      	str	r2, [r3, #28]
      break;
 8009e18:	e064      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fdad 	bl	800a980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69da      	ldr	r2, [r3, #28]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69da      	ldr	r2, [r3, #28]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69d9      	ldr	r1, [r3, #28]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	021a      	lsls	r2, r3, #8
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	61da      	str	r2, [r3, #28]
      break;
 8009e5a:	e043      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fe20 	bl	800aaa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0208 	orr.w	r2, r2, #8
 8009e76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0204 	bic.w	r2, r2, #4
 8009e86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009e9a:	e023      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fe6a 	bl	800ab7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009eb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ec6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	021a      	lsls	r2, r3, #8
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009edc:	e002      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop

08009ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_TIM_ConfigClockSource+0x1c>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e0f6      	b.n	800a102 <HAL_TIM_ConfigClockSource+0x20a>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800a10c <HAL_TIM_ConfigClockSource+0x214>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f000 80c1 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009f54:	4a6d      	ldr	r2, [pc, #436]	@ (800a10c <HAL_TIM_ConfigClockSource+0x214>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f200 80c6 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f5c:	4a6c      	ldr	r2, [pc, #432]	@ (800a110 <HAL_TIM_ConfigClockSource+0x218>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	f000 80b9 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009f64:	4a6a      	ldr	r2, [pc, #424]	@ (800a110 <HAL_TIM_ConfigClockSource+0x218>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f200 80be 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f6c:	4a69      	ldr	r2, [pc, #420]	@ (800a114 <HAL_TIM_ConfigClockSource+0x21c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	f000 80b1 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009f74:	4a67      	ldr	r2, [pc, #412]	@ (800a114 <HAL_TIM_ConfigClockSource+0x21c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f200 80b6 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f7c:	4a66      	ldr	r2, [pc, #408]	@ (800a118 <HAL_TIM_ConfigClockSource+0x220>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	f000 80a9 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009f84:	4a64      	ldr	r2, [pc, #400]	@ (800a118 <HAL_TIM_ConfigClockSource+0x220>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	f200 80ae 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f8c:	4a63      	ldr	r2, [pc, #396]	@ (800a11c <HAL_TIM_ConfigClockSource+0x224>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	f000 80a1 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009f94:	4a61      	ldr	r2, [pc, #388]	@ (800a11c <HAL_TIM_ConfigClockSource+0x224>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	f200 80a6 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f9c:	4a60      	ldr	r2, [pc, #384]	@ (800a120 <HAL_TIM_ConfigClockSource+0x228>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	f000 8099 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009fa4:	4a5e      	ldr	r2, [pc, #376]	@ (800a120 <HAL_TIM_ConfigClockSource+0x228>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f200 809e 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009fac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fb0:	f000 8091 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fb8:	f200 8096 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc0:	f000 8089 	beq.w	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 8009fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc8:	f200 808e 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fd0:	d03e      	beq.n	800a050 <HAL_TIM_ConfigClockSource+0x158>
 8009fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fd6:	f200 8087 	bhi.w	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	f000 8086 	beq.w	800a0ee <HAL_TIM_ConfigClockSource+0x1f6>
 8009fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe6:	d87f      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009fe8:	2b70      	cmp	r3, #112	@ 0x70
 8009fea:	d01a      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x12a>
 8009fec:	2b70      	cmp	r3, #112	@ 0x70
 8009fee:	d87b      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ff0:	2b60      	cmp	r3, #96	@ 0x60
 8009ff2:	d050      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x19e>
 8009ff4:	2b60      	cmp	r3, #96	@ 0x60
 8009ff6:	d877      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ff8:	2b50      	cmp	r3, #80	@ 0x50
 8009ffa:	d03c      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0x17e>
 8009ffc:	2b50      	cmp	r3, #80	@ 0x50
 8009ffe:	d873      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a000:	2b40      	cmp	r3, #64	@ 0x40
 800a002:	d058      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
 800a004:	2b40      	cmp	r3, #64	@ 0x40
 800a006:	d86f      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a008:	2b30      	cmp	r3, #48	@ 0x30
 800a00a:	d064      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 800a00c:	2b30      	cmp	r3, #48	@ 0x30
 800a00e:	d86b      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a010:	2b20      	cmp	r3, #32
 800a012:	d060      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 800a014:	2b20      	cmp	r3, #32
 800a016:	d867      	bhi.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05c      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 800a01c:	2b10      	cmp	r3, #16
 800a01e:	d05a      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x1de>
 800a020:	e062      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a032:	f000 fe8b 	bl	800ad4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	609a      	str	r2, [r3, #8]
      break;
 800a04e:	e04f      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a060:	f000 fe74 	bl	800ad4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689a      	ldr	r2, [r3, #8]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a072:	609a      	str	r2, [r3, #8]
      break;
 800a074:	e03c      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a082:	461a      	mov	r2, r3
 800a084:	f000 fde6 	bl	800ac54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2150      	movs	r1, #80	@ 0x50
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fe3f 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a094:	e02c      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 fe05 	bl	800acb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2160      	movs	r1, #96	@ 0x60
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fe2f 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a0b4:	e01c      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 fdc6 	bl	800ac54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2140      	movs	r1, #64	@ 0x40
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fe1f 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e00c      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f000 fe16 	bl	800ad12 <TIM_ITRx_SetConfig>
      break;
 800a0e6:	e003      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ec:	e000      	b.n	800a0f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a0ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	00100070 	.word	0x00100070
 800a110:	00100060 	.word	0x00100060
 800a114:	00100050 	.word	0x00100050
 800a118:	00100040 	.word	0x00100040
 800a11c:	00100030 	.word	0x00100030
 800a120:	00100020 	.word	0x00100020

0800a124 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e14a      	b.n	800a48a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	f040 80dd 	bne.w	800a3bc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	2b1f      	cmp	r3, #31
 800a206:	f200 80d6 	bhi.w	800a3b6 <HAL_TIM_RegisterCallback+0x1de>
 800a20a:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <HAL_TIM_RegisterCallback+0x38>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a291 	.word	0x0800a291
 800a214:	0800a299 	.word	0x0800a299
 800a218:	0800a2a1 	.word	0x0800a2a1
 800a21c:	0800a2a9 	.word	0x0800a2a9
 800a220:	0800a2b1 	.word	0x0800a2b1
 800a224:	0800a2b9 	.word	0x0800a2b9
 800a228:	0800a2c1 	.word	0x0800a2c1
 800a22c:	0800a2c9 	.word	0x0800a2c9
 800a230:	0800a2d1 	.word	0x0800a2d1
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a2e1 	.word	0x0800a2e1
 800a23c:	0800a2e9 	.word	0x0800a2e9
 800a240:	0800a2f1 	.word	0x0800a2f1
 800a244:	0800a2f9 	.word	0x0800a2f9
 800a248:	0800a303 	.word	0x0800a303
 800a24c:	0800a30d 	.word	0x0800a30d
 800a250:	0800a317 	.word	0x0800a317
 800a254:	0800a321 	.word	0x0800a321
 800a258:	0800a32b 	.word	0x0800a32b
 800a25c:	0800a335 	.word	0x0800a335
 800a260:	0800a33f 	.word	0x0800a33f
 800a264:	0800a349 	.word	0x0800a349
 800a268:	0800a353 	.word	0x0800a353
 800a26c:	0800a35d 	.word	0x0800a35d
 800a270:	0800a367 	.word	0x0800a367
 800a274:	0800a371 	.word	0x0800a371
 800a278:	0800a37b 	.word	0x0800a37b
 800a27c:	0800a385 	.word	0x0800a385
 800a280:	0800a38f 	.word	0x0800a38f
 800a284:	0800a399 	.word	0x0800a399
 800a288:	0800a3a3 	.word	0x0800a3a3
 800a28c:	0800a3ad 	.word	0x0800a3ad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a296:	e0f7      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a29e:	e0f3      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a2a6:	e0ef      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a2ae:	e0eb      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a2b6:	e0e7      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a2be:	e0e3      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a2c6:	e0df      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a2ce:	e0db      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a2d6:	e0d7      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a2de:	e0d3      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a2e6:	e0cf      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a2ee:	e0cb      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a2f6:	e0c7      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a300:	e0c2      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a30a:	e0bd      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a314:	e0b8      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a31e:	e0b3      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a328:	e0ae      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a332:	e0a9      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a33c:	e0a4      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a346:	e09f      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a350:	e09a      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a35a:	e095      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a364:	e090      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a36e:	e08b      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a378:	e086      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a382:	e081      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a38c:	e07c      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a396:	e077      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a3a0:	e072      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a3aa:	e06d      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a3b4:	e068      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ba:	e065      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d15d      	bne.n	800a484 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	2b0d      	cmp	r3, #13
 800a3cc:	d857      	bhi.n	800a47e <HAL_TIM_RegisterCallback+0x2a6>
 800a3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d4 <HAL_TIM_RegisterCallback+0x1fc>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a40d 	.word	0x0800a40d
 800a3d8:	0800a415 	.word	0x0800a415
 800a3dc:	0800a41d 	.word	0x0800a41d
 800a3e0:	0800a425 	.word	0x0800a425
 800a3e4:	0800a42d 	.word	0x0800a42d
 800a3e8:	0800a435 	.word	0x0800a435
 800a3ec:	0800a43d 	.word	0x0800a43d
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a44d 	.word	0x0800a44d
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a45d 	.word	0x0800a45d
 800a400:	0800a465 	.word	0x0800a465
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a475 	.word	0x0800a475
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a412:	e039      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a41a:	e035      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a422:	e031      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a42a:	e02d      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a432:	e029      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a43a:	e025      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a442:	e021      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a44a:	e01d      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a452:	e019      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a45a:	e015      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a462:	e011      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a46a:	e00d      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a472:	e009      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a47c:	e004      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	75fb      	strb	r3, [r7, #23]
        break;
 800a482:	e001      	b.n	800a488 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a488:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop

0800a498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a4c      	ldr	r2, [pc, #304]	@ (800a5dc <TIM_Base_SetConfig+0x144>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d017      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b6:	d013      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a49      	ldr	r2, [pc, #292]	@ (800a5e0 <TIM_Base_SetConfig+0x148>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00f      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a48      	ldr	r2, [pc, #288]	@ (800a5e4 <TIM_Base_SetConfig+0x14c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a47      	ldr	r2, [pc, #284]	@ (800a5e8 <TIM_Base_SetConfig+0x150>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a46      	ldr	r2, [pc, #280]	@ (800a5ec <TIM_Base_SetConfig+0x154>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0x48>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a45      	ldr	r2, [pc, #276]	@ (800a5f0 <TIM_Base_SetConfig+0x158>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d108      	bne.n	800a4f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a39      	ldr	r2, [pc, #228]	@ (800a5dc <TIM_Base_SetConfig+0x144>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d023      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a500:	d01f      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a36      	ldr	r2, [pc, #216]	@ (800a5e0 <TIM_Base_SetConfig+0x148>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d01b      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a35      	ldr	r2, [pc, #212]	@ (800a5e4 <TIM_Base_SetConfig+0x14c>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d017      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a34      	ldr	r2, [pc, #208]	@ (800a5e8 <TIM_Base_SetConfig+0x150>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d013      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a33      	ldr	r2, [pc, #204]	@ (800a5ec <TIM_Base_SetConfig+0x154>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00f      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a33      	ldr	r2, [pc, #204]	@ (800a5f4 <TIM_Base_SetConfig+0x15c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d00b      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a32      	ldr	r2, [pc, #200]	@ (800a5f8 <TIM_Base_SetConfig+0x160>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d007      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a31      	ldr	r2, [pc, #196]	@ (800a5fc <TIM_Base_SetConfig+0x164>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d003      	beq.n	800a542 <TIM_Base_SetConfig+0xaa>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a2c      	ldr	r2, [pc, #176]	@ (800a5f0 <TIM_Base_SetConfig+0x158>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d108      	bne.n	800a554 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4313      	orrs	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a18      	ldr	r2, [pc, #96]	@ (800a5dc <TIM_Base_SetConfig+0x144>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d013      	beq.n	800a5a8 <TIM_Base_SetConfig+0x110>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1a      	ldr	r2, [pc, #104]	@ (800a5ec <TIM_Base_SetConfig+0x154>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d00f      	beq.n	800a5a8 <TIM_Base_SetConfig+0x110>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f4 <TIM_Base_SetConfig+0x15c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00b      	beq.n	800a5a8 <TIM_Base_SetConfig+0x110>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a19      	ldr	r2, [pc, #100]	@ (800a5f8 <TIM_Base_SetConfig+0x160>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d007      	beq.n	800a5a8 <TIM_Base_SetConfig+0x110>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a18      	ldr	r2, [pc, #96]	@ (800a5fc <TIM_Base_SetConfig+0x164>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d003      	beq.n	800a5a8 <TIM_Base_SetConfig+0x110>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a13      	ldr	r2, [pc, #76]	@ (800a5f0 <TIM_Base_SetConfig+0x158>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d103      	bne.n	800a5b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d105      	bne.n	800a5ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f023 0201 	bic.w	r2, r3, #1
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	611a      	str	r2, [r3, #16]
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40012c00 	.word	0x40012c00
 800a5e0:	40000400 	.word	0x40000400
 800a5e4:	40000800 	.word	0x40000800
 800a5e8:	40000c00 	.word	0x40000c00
 800a5ec:	40013400 	.word	0x40013400
 800a5f0:	40015000 	.word	0x40015000
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800

0800a600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	f023 0201 	bic.w	r2, r3, #1
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f023 0302 	bic.w	r3, r3, #2
 800a64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	4313      	orrs	r3, r2
 800a656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a30      	ldr	r2, [pc, #192]	@ (800a71c <TIM_OC1_SetConfig+0x11c>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d013      	beq.n	800a688 <TIM_OC1_SetConfig+0x88>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a2f      	ldr	r2, [pc, #188]	@ (800a720 <TIM_OC1_SetConfig+0x120>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d00f      	beq.n	800a688 <TIM_OC1_SetConfig+0x88>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a2e      	ldr	r2, [pc, #184]	@ (800a724 <TIM_OC1_SetConfig+0x124>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00b      	beq.n	800a688 <TIM_OC1_SetConfig+0x88>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a2d      	ldr	r2, [pc, #180]	@ (800a728 <TIM_OC1_SetConfig+0x128>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d007      	beq.n	800a688 <TIM_OC1_SetConfig+0x88>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a2c      	ldr	r2, [pc, #176]	@ (800a72c <TIM_OC1_SetConfig+0x12c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d003      	beq.n	800a688 <TIM_OC1_SetConfig+0x88>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a2b      	ldr	r2, [pc, #172]	@ (800a730 <TIM_OC1_SetConfig+0x130>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d10c      	bne.n	800a6a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f023 0308 	bic.w	r3, r3, #8
 800a68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	4313      	orrs	r3, r2
 800a698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f023 0304 	bic.w	r3, r3, #4
 800a6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a71c <TIM_OC1_SetConfig+0x11c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d013      	beq.n	800a6d2 <TIM_OC1_SetConfig+0xd2>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a720 <TIM_OC1_SetConfig+0x120>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00f      	beq.n	800a6d2 <TIM_OC1_SetConfig+0xd2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a724 <TIM_OC1_SetConfig+0x124>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d00b      	beq.n	800a6d2 <TIM_OC1_SetConfig+0xd2>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a728 <TIM_OC1_SetConfig+0x128>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d007      	beq.n	800a6d2 <TIM_OC1_SetConfig+0xd2>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a19      	ldr	r2, [pc, #100]	@ (800a72c <TIM_OC1_SetConfig+0x12c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_OC1_SetConfig+0xd2>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a18      	ldr	r2, [pc, #96]	@ (800a730 <TIM_OC1_SetConfig+0x130>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d111      	bne.n	800a6f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	621a      	str	r2, [r3, #32]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40012c00 	.word	0x40012c00
 800a720:	40013400 	.word	0x40013400
 800a724:	40014000 	.word	0x40014000
 800a728:	40014400 	.word	0x40014400
 800a72c:	40014800 	.word	0x40014800
 800a730:	40015000 	.word	0x40015000

0800a734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a1b      	ldr	r3, [r3, #32]
 800a748:	f023 0210 	bic.w	r2, r3, #16
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	4313      	orrs	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f023 0320 	bic.w	r3, r3, #32
 800a782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a2c      	ldr	r2, [pc, #176]	@ (800a844 <TIM_OC2_SetConfig+0x110>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d007      	beq.n	800a7a8 <TIM_OC2_SetConfig+0x74>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a2b      	ldr	r2, [pc, #172]	@ (800a848 <TIM_OC2_SetConfig+0x114>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d003      	beq.n	800a7a8 <TIM_OC2_SetConfig+0x74>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a84c <TIM_OC2_SetConfig+0x118>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d10d      	bne.n	800a7c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	011b      	lsls	r3, r3, #4
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a844 <TIM_OC2_SetConfig+0x110>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d013      	beq.n	800a7f4 <TIM_OC2_SetConfig+0xc0>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a848 <TIM_OC2_SetConfig+0x114>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00f      	beq.n	800a7f4 <TIM_OC2_SetConfig+0xc0>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a850 <TIM_OC2_SetConfig+0x11c>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00b      	beq.n	800a7f4 <TIM_OC2_SetConfig+0xc0>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a1d      	ldr	r2, [pc, #116]	@ (800a854 <TIM_OC2_SetConfig+0x120>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d007      	beq.n	800a7f4 <TIM_OC2_SetConfig+0xc0>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a858 <TIM_OC2_SetConfig+0x124>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d003      	beq.n	800a7f4 <TIM_OC2_SetConfig+0xc0>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a17      	ldr	r2, [pc, #92]	@ (800a84c <TIM_OC2_SetConfig+0x118>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d113      	bne.n	800a81c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	4313      	orrs	r3, r2
 800a81a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	621a      	str	r2, [r3, #32]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40012c00 	.word	0x40012c00
 800a848:	40013400 	.word	0x40013400
 800a84c:	40015000 	.word	0x40015000
 800a850:	40014000 	.word	0x40014000
 800a854:	40014400 	.word	0x40014400
 800a858:	40014800 	.word	0x40014800

0800a85c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a88a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2b      	ldr	r2, [pc, #172]	@ (800a968 <TIM_OC3_SetConfig+0x10c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d007      	beq.n	800a8ce <TIM_OC3_SetConfig+0x72>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2a      	ldr	r2, [pc, #168]	@ (800a96c <TIM_OC3_SetConfig+0x110>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d003      	beq.n	800a8ce <TIM_OC3_SetConfig+0x72>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a29      	ldr	r2, [pc, #164]	@ (800a970 <TIM_OC3_SetConfig+0x114>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d10d      	bne.n	800a8ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a1e      	ldr	r2, [pc, #120]	@ (800a968 <TIM_OC3_SetConfig+0x10c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d013      	beq.n	800a91a <TIM_OC3_SetConfig+0xbe>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a96c <TIM_OC3_SetConfig+0x110>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d00f      	beq.n	800a91a <TIM_OC3_SetConfig+0xbe>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a974 <TIM_OC3_SetConfig+0x118>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00b      	beq.n	800a91a <TIM_OC3_SetConfig+0xbe>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a1c      	ldr	r2, [pc, #112]	@ (800a978 <TIM_OC3_SetConfig+0x11c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d007      	beq.n	800a91a <TIM_OC3_SetConfig+0xbe>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a1b      	ldr	r2, [pc, #108]	@ (800a97c <TIM_OC3_SetConfig+0x120>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d003      	beq.n	800a91a <TIM_OC3_SetConfig+0xbe>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a16      	ldr	r2, [pc, #88]	@ (800a970 <TIM_OC3_SetConfig+0x114>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d113      	bne.n	800a942 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4313      	orrs	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	4313      	orrs	r3, r2
 800a940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	621a      	str	r2, [r3, #32]
}
 800a95c:	bf00      	nop
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	40012c00 	.word	0x40012c00
 800a96c:	40013400 	.word	0x40013400
 800a970:	40015000 	.word	0x40015000
 800a974:	40014000 	.word	0x40014000
 800a978:	40014400 	.word	0x40014400
 800a97c:	40014800 	.word	0x40014800

0800a980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	031b      	lsls	r3, r3, #12
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a2c      	ldr	r2, [pc, #176]	@ (800aa90 <TIM_OC4_SetConfig+0x110>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d007      	beq.n	800a9f4 <TIM_OC4_SetConfig+0x74>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a2b      	ldr	r2, [pc, #172]	@ (800aa94 <TIM_OC4_SetConfig+0x114>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d003      	beq.n	800a9f4 <TIM_OC4_SetConfig+0x74>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800aa98 <TIM_OC4_SetConfig+0x118>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d10d      	bne.n	800aa10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	031b      	lsls	r3, r3, #12
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a1f      	ldr	r2, [pc, #124]	@ (800aa90 <TIM_OC4_SetConfig+0x110>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d013      	beq.n	800aa40 <TIM_OC4_SetConfig+0xc0>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a1e      	ldr	r2, [pc, #120]	@ (800aa94 <TIM_OC4_SetConfig+0x114>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d00f      	beq.n	800aa40 <TIM_OC4_SetConfig+0xc0>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a1e      	ldr	r2, [pc, #120]	@ (800aa9c <TIM_OC4_SetConfig+0x11c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d00b      	beq.n	800aa40 <TIM_OC4_SetConfig+0xc0>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa0 <TIM_OC4_SetConfig+0x120>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d007      	beq.n	800aa40 <TIM_OC4_SetConfig+0xc0>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa4 <TIM_OC4_SetConfig+0x124>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d003      	beq.n	800aa40 <TIM_OC4_SetConfig+0xc0>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a17      	ldr	r2, [pc, #92]	@ (800aa98 <TIM_OC4_SetConfig+0x118>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d113      	bne.n	800aa68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	019b      	lsls	r3, r3, #6
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	019b      	lsls	r3, r3, #6
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	621a      	str	r2, [r3, #32]
}
 800aa82:	bf00      	nop
 800aa84:	371c      	adds	r7, #28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	40012c00 	.word	0x40012c00
 800aa94:	40013400 	.word	0x40013400
 800aa98:	40015000 	.word	0x40015000
 800aa9c:	40014000 	.word	0x40014000
 800aaa0:	40014400 	.word	0x40014400
 800aaa4:	40014800 	.word	0x40014800

0800aaa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aaec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	041b      	lsls	r3, r3, #16
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a19      	ldr	r2, [pc, #100]	@ (800ab64 <TIM_OC5_SetConfig+0xbc>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d013      	beq.n	800ab2a <TIM_OC5_SetConfig+0x82>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a18      	ldr	r2, [pc, #96]	@ (800ab68 <TIM_OC5_SetConfig+0xc0>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00f      	beq.n	800ab2a <TIM_OC5_SetConfig+0x82>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a17      	ldr	r2, [pc, #92]	@ (800ab6c <TIM_OC5_SetConfig+0xc4>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <TIM_OC5_SetConfig+0x82>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a16      	ldr	r2, [pc, #88]	@ (800ab70 <TIM_OC5_SetConfig+0xc8>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <TIM_OC5_SetConfig+0x82>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <TIM_OC5_SetConfig+0xcc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_OC5_SetConfig+0x82>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a14      	ldr	r2, [pc, #80]	@ (800ab78 <TIM_OC5_SetConfig+0xd0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d109      	bne.n	800ab3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	621a      	str	r2, [r3, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	40012c00 	.word	0x40012c00
 800ab68:	40013400 	.word	0x40013400
 800ab6c:	40014000 	.word	0x40014000
 800ab70:	40014400 	.word	0x40014400
 800ab74:	40014800 	.word	0x40014800
 800ab78:	40015000 	.word	0x40015000

0800ab7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	051b      	lsls	r3, r3, #20
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	4313      	orrs	r3, r2
 800abce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a1a      	ldr	r2, [pc, #104]	@ (800ac3c <TIM_OC6_SetConfig+0xc0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d013      	beq.n	800ac00 <TIM_OC6_SetConfig+0x84>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a19      	ldr	r2, [pc, #100]	@ (800ac40 <TIM_OC6_SetConfig+0xc4>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00f      	beq.n	800ac00 <TIM_OC6_SetConfig+0x84>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a18      	ldr	r2, [pc, #96]	@ (800ac44 <TIM_OC6_SetConfig+0xc8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00b      	beq.n	800ac00 <TIM_OC6_SetConfig+0x84>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a17      	ldr	r2, [pc, #92]	@ (800ac48 <TIM_OC6_SetConfig+0xcc>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_OC6_SetConfig+0x84>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a16      	ldr	r2, [pc, #88]	@ (800ac4c <TIM_OC6_SetConfig+0xd0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_OC6_SetConfig+0x84>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a15      	ldr	r2, [pc, #84]	@ (800ac50 <TIM_OC6_SetConfig+0xd4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d109      	bne.n	800ac14 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	029b      	lsls	r3, r3, #10
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	621a      	str	r2, [r3, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40012c00 	.word	0x40012c00
 800ac40:	40013400 	.word	0x40013400
 800ac44:	40014000 	.word	0x40014000
 800ac48:	40014400 	.word	0x40014400
 800ac4c:	40014800 	.word	0x40014800
 800ac50:	40015000 	.word	0x40015000

0800ac54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f023 0201 	bic.w	r2, r3, #1
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f023 030a 	bic.w	r3, r3, #10
 800ac90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	621a      	str	r2, [r3, #32]
}
 800aca6:	bf00      	nop
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b087      	sub	sp, #28
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	60b9      	str	r1, [r7, #8]
 800acbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	f023 0210 	bic.w	r2, r3, #16
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	031b      	lsls	r3, r3, #12
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	621a      	str	r2, [r3, #32]
}
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f043 0307 	orr.w	r3, r3, #7
 800ad38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	609a      	str	r2, [r3, #8]
}
 800ad40:	bf00      	nop
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	021a      	lsls	r2, r3, #8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	609a      	str	r2, [r3, #8]
}
 800ad80:	bf00      	nop
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f003 031f 	and.w	r3, r3, #31
 800ad9e:	2201      	movs	r2, #1
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6a1a      	ldr	r2, [r3, #32]
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	43db      	mvns	r3, r3
 800adae:	401a      	ands	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1a      	ldr	r2, [r3, #32]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f003 031f 	and.w	r3, r3, #31
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	fa01 f303 	lsl.w	r3, r1, r3
 800adc4:	431a      	orrs	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	621a      	str	r2, [r3, #32]
}
 800adca:	bf00      	nop
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a26      	ldr	r2, [pc, #152]	@ (800ae7c <TIM_ResetCallback+0xa4>)
 800ade4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a25      	ldr	r2, [pc, #148]	@ (800ae80 <TIM_ResetCallback+0xa8>)
 800adec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a24      	ldr	r2, [pc, #144]	@ (800ae84 <TIM_ResetCallback+0xac>)
 800adf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a23      	ldr	r2, [pc, #140]	@ (800ae88 <TIM_ResetCallback+0xb0>)
 800adfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a22      	ldr	r2, [pc, #136]	@ (800ae8c <TIM_ResetCallback+0xb4>)
 800ae04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a21      	ldr	r2, [pc, #132]	@ (800ae90 <TIM_ResetCallback+0xb8>)
 800ae0c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a20      	ldr	r2, [pc, #128]	@ (800ae94 <TIM_ResetCallback+0xbc>)
 800ae14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a1f      	ldr	r2, [pc, #124]	@ (800ae98 <TIM_ResetCallback+0xc0>)
 800ae1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a1e      	ldr	r2, [pc, #120]	@ (800ae9c <TIM_ResetCallback+0xc4>)
 800ae24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <TIM_ResetCallback+0xc8>)
 800ae2c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a1c      	ldr	r2, [pc, #112]	@ (800aea4 <TIM_ResetCallback+0xcc>)
 800ae34:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aea8 <TIM_ResetCallback+0xd0>)
 800ae3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a1a      	ldr	r2, [pc, #104]	@ (800aeac <TIM_ResetCallback+0xd4>)
 800ae44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a19      	ldr	r2, [pc, #100]	@ (800aeb0 <TIM_ResetCallback+0xd8>)
 800ae4c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a18      	ldr	r2, [pc, #96]	@ (800aeb4 <TIM_ResetCallback+0xdc>)
 800ae54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a17      	ldr	r2, [pc, #92]	@ (800aeb8 <TIM_ResetCallback+0xe0>)
 800ae5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a16      	ldr	r2, [pc, #88]	@ (800aebc <TIM_ResetCallback+0xe4>)
 800ae64:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a15      	ldr	r2, [pc, #84]	@ (800aec0 <TIM_ResetCallback+0xe8>)
 800ae6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	08003ac1 	.word	0x08003ac1
 800ae80:	0800a125 	.word	0x0800a125
 800ae84:	0800a19d 	.word	0x0800a19d
 800ae88:	0800a1b1 	.word	0x0800a1b1
 800ae8c:	0800a14d 	.word	0x0800a14d
 800ae90:	0800a161 	.word	0x0800a161
 800ae94:	0800a139 	.word	0x0800a139
 800ae98:	0800a175 	.word	0x0800a175
 800ae9c:	0800a189 	.word	0x0800a189
 800aea0:	0800a1c5 	.word	0x0800a1c5
 800aea4:	0800b119 	.word	0x0800b119
 800aea8:	0800b12d 	.word	0x0800b12d
 800aeac:	0800b141 	.word	0x0800b141
 800aeb0:	0800b155 	.word	0x0800b155
 800aeb4:	0800b169 	.word	0x0800b169
 800aeb8:	0800b17d 	.word	0x0800b17d
 800aebc:	0800b191 	.word	0x0800b191
 800aec0:	0800b1a5 	.word	0x0800b1a5

0800aec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e074      	b.n	800afc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a34      	ldr	r2, [pc, #208]	@ (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d009      	beq.n	800af1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a33      	ldr	r2, [pc, #204]	@ (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d004      	beq.n	800af1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a31      	ldr	r2, [pc, #196]	@ (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d108      	bne.n	800af2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800af32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a21      	ldr	r2, [pc, #132]	@ (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d022      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af5c:	d01d      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a1f      	ldr	r2, [pc, #124]	@ (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d018      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1d      	ldr	r2, [pc, #116]	@ (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d013      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a1c      	ldr	r2, [pc, #112]	@ (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d00e      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a15      	ldr	r2, [pc, #84]	@ (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d009      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a18      	ldr	r2, [pc, #96]	@ (800afec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d004      	beq.n	800af9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a11      	ldr	r2, [pc, #68]	@ (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d10c      	bne.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	40012c00 	.word	0x40012c00
 800afd8:	40013400 	.word	0x40013400
 800afdc:	40015000 	.word	0x40015000
 800afe0:	40000400 	.word	0x40000400
 800afe4:	40000800 	.word	0x40000800
 800afe8:	40000c00 	.word	0x40000c00
 800afec:	40014000 	.word	0x40014000

0800aff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b008:	2302      	movs	r3, #2
 800b00a:	e078      	b.n	800b0fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b072:	4313      	orrs	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	041b      	lsls	r3, r3, #16
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a1c      	ldr	r2, [pc, #112]	@ (800b10c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d009      	beq.n	800b0b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a1b      	ldr	r2, [pc, #108]	@ (800b110 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d004      	beq.n	800b0b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a19      	ldr	r2, [pc, #100]	@ (800b114 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d11c      	bne.n	800b0ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	051b      	lsls	r3, r3, #20
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40012c00 	.word	0x40012c00
 800b110:	40013400 	.word	0x40013400
 800b114:	40015000 	.word	0x40015000

0800b118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e050      	b.n	800b26c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d114      	bne.n	800b1fe <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fd65 	bl	800bcac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d103      	bne.n	800b1f4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a21      	ldr	r2, [pc, #132]	@ (800b274 <HAL_UART_Init+0xbc>)
 800b1f0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2224      	movs	r2, #36	@ 0x24
 800b202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0201 	bic.w	r2, r2, #1
 800b214:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f001 f892 	bl	800c348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fd93 	bl	800bd50 <UART_SetConfig>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e01b      	b.n	800b26c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b242:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689a      	ldr	r2, [r3, #8]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b252:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f001 f911 	bl	800c48c <UART_CheckIdleState>
 800b26a:	4603      	mov	r3, r0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08005675 	.word	0x08005675

0800b278 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	460b      	mov	r3, r1
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d109      	bne.n	800b2a4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b296:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e09c      	b.n	800b3de <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	d16c      	bne.n	800b388 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	2b0c      	cmp	r3, #12
 800b2b2:	d85e      	bhi.n	800b372 <HAL_UART_RegisterCallback+0xfa>
 800b2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2bc <HAL_UART_RegisterCallback+0x44>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2f1 	.word	0x0800b2f1
 800b2c0:	0800b2fb 	.word	0x0800b2fb
 800b2c4:	0800b305 	.word	0x0800b305
 800b2c8:	0800b30f 	.word	0x0800b30f
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b323 	.word	0x0800b323
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b337 	.word	0x0800b337
 800b2dc:	0800b341 	.word	0x0800b341
 800b2e0:	0800b34b 	.word	0x0800b34b
 800b2e4:	0800b355 	.word	0x0800b355
 800b2e8:	0800b35f 	.word	0x0800b35f
 800b2ec:	0800b369 	.word	0x0800b369
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b2f8:	e070      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b302:	e06b      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b30c:	e066      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b316:	e061      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b320:	e05c      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b32a:	e057      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b334:	e052      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b33e:	e04d      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b348:	e048      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b352:	e043      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b35c:	e03e      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b366:	e039      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b370:	e034      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b378:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	75fb      	strb	r3, [r7, #23]
        break;
 800b386:	e029      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d11a      	bne.n	800b3c8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	2b0b      	cmp	r3, #11
 800b396:	d002      	beq.n	800b39e <HAL_UART_RegisterCallback+0x126>
 800b398:	2b0c      	cmp	r3, #12
 800b39a:	d005      	beq.n	800b3a8 <HAL_UART_RegisterCallback+0x130>
 800b39c:	e009      	b.n	800b3b2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b3a6:	e019      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b3b0:	e014      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	75fb      	strb	r3, [r7, #23]
        break;
 800b3c6:	e009      	b.n	800b3dc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop

0800b3ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	@ 0x28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b400:	2b20      	cmp	r3, #32
 800b402:	d137      	bne.n	800b474 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <HAL_UART_Receive_DMA+0x24>
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e030      	b.n	800b476 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a18      	ldr	r2, [pc, #96]	@ (800b480 <HAL_UART_Receive_DMA+0x94>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d01f      	beq.n	800b464 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d018      	beq.n	800b464 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	613b      	str	r3, [r7, #16]
   return(result);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b446:	627b      	str	r3, [r7, #36]	@ 0x24
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	69f9      	ldr	r1, [r7, #28]
 800b456:	6a3a      	ldr	r2, [r7, #32]
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e6      	bne.n	800b432 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	461a      	mov	r2, r3
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f001 f926 	bl	800c6bc <UART_Start_Receive_DMA>
 800b470:	4603      	mov	r3, r0
 800b472:	e000      	b.n	800b476 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b474:	2302      	movs	r3, #2
  }
}
 800b476:	4618      	mov	r0, r3
 800b478:	3728      	adds	r7, #40	@ 0x28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	40008000 	.word	0x40008000

0800b484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b0ba      	sub	sp, #232	@ 0xe8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b4aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b4ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b4b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11b      	bne.n	800b4f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d015      	beq.n	800b4f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d105      	bne.n	800b4e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d009      	beq.n	800b4f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 8312 	beq.w	800bb12 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	4798      	blx	r3
      }
      return;
 800b4f6:	e30c      	b.n	800bb12 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 8129 	beq.w	800b754 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b502:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b506:	4b90      	ldr	r3, [pc, #576]	@ (800b748 <HAL_UART_IRQHandler+0x2c4>)
 800b508:	4013      	ands	r3, r2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b50e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b512:	4b8e      	ldr	r3, [pc, #568]	@ (800b74c <HAL_UART_IRQHandler+0x2c8>)
 800b514:	4013      	ands	r3, r2
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 811c 	beq.w	800b754 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	d011      	beq.n	800b54c <HAL_UART_IRQHandler+0xc8>
 800b528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2201      	movs	r2, #1
 800b53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b542:	f043 0201 	orr.w	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b550:	f003 0302 	and.w	r3, r3, #2
 800b554:	2b00      	cmp	r3, #0
 800b556:	d011      	beq.n	800b57c <HAL_UART_IRQHandler+0xf8>
 800b558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b55c:	f003 0301 	and.w	r3, r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00b      	beq.n	800b57c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2202      	movs	r2, #2
 800b56a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b572:	f043 0204 	orr.w	r2, r3, #4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b00      	cmp	r3, #0
 800b586:	d011      	beq.n	800b5ac <HAL_UART_IRQHandler+0x128>
 800b588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2204      	movs	r2, #4
 800b59a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5a2:	f043 0202 	orr.w	r2, r3, #2
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b0:	f003 0308 	and.w	r3, r3, #8
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d017      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5bc:	f003 0320 	and.w	r3, r3, #32
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b5c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b5c8:	4b5f      	ldr	r3, [pc, #380]	@ (800b748 <HAL_UART_IRQHandler+0x2c4>)
 800b5ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2208      	movs	r2, #8
 800b5d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5de:	f043 0208 	orr.w	r2, r3, #8
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d012      	beq.n	800b61a <HAL_UART_IRQHandler+0x196>
 800b5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00c      	beq.n	800b61a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b610:	f043 0220 	orr.w	r2, r3, #32
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8278 	beq.w	800bb16 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d013      	beq.n	800b65a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d105      	bne.n	800b64a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b63e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d007      	beq.n	800b65a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b660:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66e:	2b40      	cmp	r3, #64	@ 0x40
 800b670:	d005      	beq.n	800b67e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b676:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d058      	beq.n	800b730 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 f903 	bl	800c88a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68e:	2b40      	cmp	r3, #64	@ 0x40
 800b690:	d148      	bne.n	800b724 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6a0:	e853 3f00 	ldrex	r3, [r3]
 800b6a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b6a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b6be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b6c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b6ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b6ce:	e841 2300 	strex	r3, r2, [r1]
 800b6d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b6d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1d9      	bne.n	800b692 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d017      	beq.n	800b718 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ee:	4a18      	ldr	r2, [pc, #96]	@ (800b750 <HAL_UART_IRQHandler+0x2cc>)
 800b6f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fc f8b9 	bl	8007870 <HAL_DMA_Abort_IT>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d01f      	beq.n	800b744 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b712:	4610      	mov	r0, r2
 800b714:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b716:	e015      	b.n	800b744 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b722:	e00f      	b.n	800b744 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b72e:	e009      	b.n	800b744 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b742:	e1e8      	b.n	800bb16 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b744:	bf00      	nop
    return;
 800b746:	e1e6      	b.n	800bb16 <HAL_UART_IRQHandler+0x692>
 800b748:	10000001 	.word	0x10000001
 800b74c:	04000120 	.word	0x04000120
 800b750:	0800cb55 	.word	0x0800cb55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	f040 8176 	bne.w	800ba4a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b762:	f003 0310 	and.w	r3, r3, #16
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 816f 	beq.w	800ba4a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 8168 	beq.w	800ba4a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2210      	movs	r2, #16
 800b780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b78c:	2b40      	cmp	r3, #64	@ 0x40
 800b78e:	f040 80dc 	bne.w	800b94a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 80b1 	beq.w	800b90c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	f080 80a9 	bcs.w	800b90c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f040 8087 	bne.w	800b8e6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7e4:	e853 3f00 	ldrex	r3, [r3]
 800b7e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b7ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b806:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b80e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1da      	bne.n	800b7d8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3308      	adds	r3, #8
 800b828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b834:	f023 0301 	bic.w	r3, r3, #1
 800b838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b84a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b84e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e1      	bne.n	800b822 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3308      	adds	r3, #8
 800b864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b86e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3308      	adds	r3, #8
 800b87e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e3      	bne.n	800b85e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2220      	movs	r2, #32
 800b89a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b4:	f023 0310 	bic.w	r3, r3, #16
 800b8b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8ce:	e841 2300 	strex	r3, r2, [r1]
 800b8d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e4      	bne.n	800b8a4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fb ff6c 	bl	80077be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b8fe:	b292      	uxth	r2, r2
 800b900:	1a8a      	subs	r2, r1, r2
 800b902:	b292      	uxth	r2, r2
 800b904:	4611      	mov	r1, r2
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b90a:	e106      	b.n	800bb1a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b916:	429a      	cmp	r2, r3
 800b918:	f040 80ff 	bne.w	800bb1a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 0320 	and.w	r3, r3, #32
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	f040 80f5 	bne.w	800bb1a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b942:	4611      	mov	r1, r2
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
      return;
 800b948:	e0e7      	b.n	800bb1a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b956:	b29b      	uxth	r3, r3
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b964:	b29b      	uxth	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 80d9 	beq.w	800bb1e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b96c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 80d4 	beq.w	800bb1e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b98a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b998:	647b      	str	r3, [r7, #68]	@ 0x44
 800b99a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b99e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e4      	bne.n	800b976 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	623b      	str	r3, [r7, #32]
   return(result);
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9c2:	f023 0301 	bic.w	r3, r3, #1
 800b9c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b9d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9dc:	e841 2300 	strex	r3, r2, [r1]
 800b9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1e1      	bne.n	800b9ac <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f023 0310 	bic.w	r3, r3, #16
 800ba10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba1e:	61fb      	str	r3, [r7, #28]
 800ba20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	69b9      	ldr	r1, [r7, #24]
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e4      	bne.n	800b9fc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2202      	movs	r2, #2
 800ba36:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba3e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ba42:	4611      	mov	r1, r2
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba48:	e069      	b.n	800bb1e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d010      	beq.n	800ba78 <HAL_UART_IRQHandler+0x5f4>
 800ba56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00a      	beq.n	800ba78 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ba6a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba76:	e055      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d014      	beq.n	800baae <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d105      	bne.n	800ba9c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d008      	beq.n	800baae <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d03e      	beq.n	800bb22 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	4798      	blx	r3
    }
    return;
 800baac:	e039      	b.n	800bb22 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <HAL_UART_IRQHandler+0x64a>
 800baba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800babe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 f858 	bl	800cb7c <UART_EndTransmit_IT>
    return;
 800bacc:	e02a      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <HAL_UART_IRQHandler+0x66e>
 800bada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bade:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf0:	e018      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800baf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d012      	beq.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
 800bafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	da0e      	bge.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb10:	e008      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bb12:	bf00      	nop
 800bb14:	e006      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
    return;
 800bb16:	bf00      	nop
 800bb18:	e004      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bb1a:	bf00      	nop
 800bb1c:	e002      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bb1e:	bf00      	nop
 800bb20:	e000      	b.n	800bb24 <HAL_UART_IRQHandler+0x6a0>
    return;
 800bb22:	bf00      	nop
  }
}
 800bb24:	37e8      	adds	r7, #232	@ 0xe8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop

0800bb2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a09      	ldr	r2, [pc, #36]	@ (800bc18 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d009      	beq.n	800bc0c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	615a      	str	r2, [r3, #20]
  }
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	40008000 	.word	0x40008000

0800bc1c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a18      	ldr	r2, [pc, #96]	@ (800bc8c <HAL_UART_EnableReceiverTimeout+0x70>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d027      	beq.n	800bc7e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	d120      	bne.n	800bc7a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d101      	bne.n	800bc46 <HAL_UART_EnableReceiverTimeout+0x2a>
 800bc42:	2302      	movs	r3, #2
 800bc44:	e01c      	b.n	800bc80 <HAL_UART_EnableReceiverTimeout+0x64>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2224      	movs	r2, #36	@ 0x24
 800bc52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800bc64:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e002      	b.n	800bc80 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	e000      	b.n	800bc80 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
  }
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	40008000 	.word	0x40008000

0800bc90 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
	...

0800bcac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd20 <UART_InitCallbacksToDefault+0x74>)
 800bcb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a19      	ldr	r2, [pc, #100]	@ (800bd24 <UART_InitCallbacksToDefault+0x78>)
 800bcc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a18      	ldr	r2, [pc, #96]	@ (800bd28 <UART_InitCallbacksToDefault+0x7c>)
 800bcc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a17      	ldr	r2, [pc, #92]	@ (800bd2c <UART_InitCallbacksToDefault+0x80>)
 800bcd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a16      	ldr	r2, [pc, #88]	@ (800bd30 <UART_InitCallbacksToDefault+0x84>)
 800bcd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a15      	ldr	r2, [pc, #84]	@ (800bd34 <UART_InitCallbacksToDefault+0x88>)
 800bce0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a14      	ldr	r2, [pc, #80]	@ (800bd38 <UART_InitCallbacksToDefault+0x8c>)
 800bce8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a13      	ldr	r2, [pc, #76]	@ (800bd3c <UART_InitCallbacksToDefault+0x90>)
 800bcf0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a12      	ldr	r2, [pc, #72]	@ (800bd40 <UART_InitCallbacksToDefault+0x94>)
 800bcf8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a11      	ldr	r2, [pc, #68]	@ (800bd44 <UART_InitCallbacksToDefault+0x98>)
 800bd00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a10      	ldr	r2, [pc, #64]	@ (800bd48 <UART_InitCallbacksToDefault+0x9c>)
 800bd08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a0f      	ldr	r2, [pc, #60]	@ (800bd4c <UART_InitCallbacksToDefault+0xa0>)
 800bd10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	0800bb41 	.word	0x0800bb41
 800bd24:	0800bb2d 	.word	0x0800bb2d
 800bd28:	0800bb69 	.word	0x0800bb69
 800bd2c:	0800bb55 	.word	0x0800bb55
 800bd30:	0800bb7d 	.word	0x0800bb7d
 800bd34:	0800bb91 	.word	0x0800bb91
 800bd38:	0800bba5 	.word	0x0800bba5
 800bd3c:	0800bbb9 	.word	0x0800bbb9
 800bd40:	0800cbd7 	.word	0x0800cbd7
 800bd44:	0800cbeb 	.word	0x0800cbeb
 800bd48:	0800cbff 	.word	0x0800cbff
 800bd4c:	0800bbcd 	.word	0x0800bbcd

0800bd50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd54:	b08c      	sub	sp, #48	@ 0x30
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	4baa      	ldr	r3, [pc, #680]	@ (800c028 <UART_SetConfig+0x2d8>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	6812      	ldr	r2, [r2, #0]
 800bd86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	68da      	ldr	r2, [r3, #12]
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a9f      	ldr	r2, [pc, #636]	@ (800c02c <UART_SetConfig+0x2dc>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d004      	beq.n	800bdbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bdc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdd0:	430b      	orrs	r3, r1
 800bdd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	f023 010f 	bic.w	r1, r3, #15
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a90      	ldr	r2, [pc, #576]	@ (800c030 <UART_SetConfig+0x2e0>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d125      	bne.n	800be40 <UART_SetConfig+0xf0>
 800bdf4:	4b8f      	ldr	r3, [pc, #572]	@ (800c034 <UART_SetConfig+0x2e4>)
 800bdf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d81a      	bhi.n	800be38 <UART_SetConfig+0xe8>
 800be02:	a201      	add	r2, pc, #4	@ (adr r2, 800be08 <UART_SetConfig+0xb8>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be19 	.word	0x0800be19
 800be0c:	0800be29 	.word	0x0800be29
 800be10:	0800be21 	.word	0x0800be21
 800be14:	0800be31 	.word	0x0800be31
 800be18:	2301      	movs	r3, #1
 800be1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be1e:	e116      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be20:	2302      	movs	r3, #2
 800be22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be26:	e112      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be2e:	e10e      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be30:	2308      	movs	r3, #8
 800be32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be36:	e10a      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be38:	2310      	movs	r3, #16
 800be3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be3e:	e106      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a7c      	ldr	r2, [pc, #496]	@ (800c038 <UART_SetConfig+0x2e8>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d138      	bne.n	800bebc <UART_SetConfig+0x16c>
 800be4a:	4b7a      	ldr	r3, [pc, #488]	@ (800c034 <UART_SetConfig+0x2e4>)
 800be4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be50:	f003 030c 	and.w	r3, r3, #12
 800be54:	2b0c      	cmp	r3, #12
 800be56:	d82d      	bhi.n	800beb4 <UART_SetConfig+0x164>
 800be58:	a201      	add	r2, pc, #4	@ (adr r2, 800be60 <UART_SetConfig+0x110>)
 800be5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5e:	bf00      	nop
 800be60:	0800be95 	.word	0x0800be95
 800be64:	0800beb5 	.word	0x0800beb5
 800be68:	0800beb5 	.word	0x0800beb5
 800be6c:	0800beb5 	.word	0x0800beb5
 800be70:	0800bea5 	.word	0x0800bea5
 800be74:	0800beb5 	.word	0x0800beb5
 800be78:	0800beb5 	.word	0x0800beb5
 800be7c:	0800beb5 	.word	0x0800beb5
 800be80:	0800be9d 	.word	0x0800be9d
 800be84:	0800beb5 	.word	0x0800beb5
 800be88:	0800beb5 	.word	0x0800beb5
 800be8c:	0800beb5 	.word	0x0800beb5
 800be90:	0800bead 	.word	0x0800bead
 800be94:	2300      	movs	r3, #0
 800be96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be9a:	e0d8      	b.n	800c04e <UART_SetConfig+0x2fe>
 800be9c:	2302      	movs	r3, #2
 800be9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bea2:	e0d4      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bea4:	2304      	movs	r3, #4
 800bea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beaa:	e0d0      	b.n	800c04e <UART_SetConfig+0x2fe>
 800beac:	2308      	movs	r3, #8
 800beae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beb2:	e0cc      	b.n	800c04e <UART_SetConfig+0x2fe>
 800beb4:	2310      	movs	r3, #16
 800beb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beba:	e0c8      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a5e      	ldr	r2, [pc, #376]	@ (800c03c <UART_SetConfig+0x2ec>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d125      	bne.n	800bf12 <UART_SetConfig+0x1c2>
 800bec6:	4b5b      	ldr	r3, [pc, #364]	@ (800c034 <UART_SetConfig+0x2e4>)
 800bec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800becc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bed0:	2b30      	cmp	r3, #48	@ 0x30
 800bed2:	d016      	beq.n	800bf02 <UART_SetConfig+0x1b2>
 800bed4:	2b30      	cmp	r3, #48	@ 0x30
 800bed6:	d818      	bhi.n	800bf0a <UART_SetConfig+0x1ba>
 800bed8:	2b20      	cmp	r3, #32
 800beda:	d00a      	beq.n	800bef2 <UART_SetConfig+0x1a2>
 800bedc:	2b20      	cmp	r3, #32
 800bede:	d814      	bhi.n	800bf0a <UART_SetConfig+0x1ba>
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d002      	beq.n	800beea <UART_SetConfig+0x19a>
 800bee4:	2b10      	cmp	r3, #16
 800bee6:	d008      	beq.n	800befa <UART_SetConfig+0x1aa>
 800bee8:	e00f      	b.n	800bf0a <UART_SetConfig+0x1ba>
 800beea:	2300      	movs	r3, #0
 800beec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bef0:	e0ad      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bef2:	2302      	movs	r3, #2
 800bef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bef8:	e0a9      	b.n	800c04e <UART_SetConfig+0x2fe>
 800befa:	2304      	movs	r3, #4
 800befc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf00:	e0a5      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf02:	2308      	movs	r3, #8
 800bf04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf08:	e0a1      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf0a:	2310      	movs	r3, #16
 800bf0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf10:	e09d      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a4a      	ldr	r2, [pc, #296]	@ (800c040 <UART_SetConfig+0x2f0>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d125      	bne.n	800bf68 <UART_SetConfig+0x218>
 800bf1c:	4b45      	ldr	r3, [pc, #276]	@ (800c034 <UART_SetConfig+0x2e4>)
 800bf1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bf26:	2bc0      	cmp	r3, #192	@ 0xc0
 800bf28:	d016      	beq.n	800bf58 <UART_SetConfig+0x208>
 800bf2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bf2c:	d818      	bhi.n	800bf60 <UART_SetConfig+0x210>
 800bf2e:	2b80      	cmp	r3, #128	@ 0x80
 800bf30:	d00a      	beq.n	800bf48 <UART_SetConfig+0x1f8>
 800bf32:	2b80      	cmp	r3, #128	@ 0x80
 800bf34:	d814      	bhi.n	800bf60 <UART_SetConfig+0x210>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <UART_SetConfig+0x1f0>
 800bf3a:	2b40      	cmp	r3, #64	@ 0x40
 800bf3c:	d008      	beq.n	800bf50 <UART_SetConfig+0x200>
 800bf3e:	e00f      	b.n	800bf60 <UART_SetConfig+0x210>
 800bf40:	2300      	movs	r3, #0
 800bf42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf46:	e082      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf4e:	e07e      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf50:	2304      	movs	r3, #4
 800bf52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf56:	e07a      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf58:	2308      	movs	r3, #8
 800bf5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf5e:	e076      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf60:	2310      	movs	r3, #16
 800bf62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf66:	e072      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a35      	ldr	r2, [pc, #212]	@ (800c044 <UART_SetConfig+0x2f4>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d12a      	bne.n	800bfc8 <UART_SetConfig+0x278>
 800bf72:	4b30      	ldr	r3, [pc, #192]	@ (800c034 <UART_SetConfig+0x2e4>)
 800bf74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf80:	d01a      	beq.n	800bfb8 <UART_SetConfig+0x268>
 800bf82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf86:	d81b      	bhi.n	800bfc0 <UART_SetConfig+0x270>
 800bf88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf8c:	d00c      	beq.n	800bfa8 <UART_SetConfig+0x258>
 800bf8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf92:	d815      	bhi.n	800bfc0 <UART_SetConfig+0x270>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <UART_SetConfig+0x250>
 800bf98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9c:	d008      	beq.n	800bfb0 <UART_SetConfig+0x260>
 800bf9e:	e00f      	b.n	800bfc0 <UART_SetConfig+0x270>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfa6:	e052      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfae:	e04e      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bfb0:	2304      	movs	r3, #4
 800bfb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfb6:	e04a      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bfb8:	2308      	movs	r3, #8
 800bfba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfbe:	e046      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bfc0:	2310      	movs	r3, #16
 800bfc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfc6:	e042      	b.n	800c04e <UART_SetConfig+0x2fe>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a17      	ldr	r2, [pc, #92]	@ (800c02c <UART_SetConfig+0x2dc>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d13a      	bne.n	800c048 <UART_SetConfig+0x2f8>
 800bfd2:	4b18      	ldr	r3, [pc, #96]	@ (800c034 <UART_SetConfig+0x2e4>)
 800bfd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bfdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bfe0:	d01a      	beq.n	800c018 <UART_SetConfig+0x2c8>
 800bfe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bfe6:	d81b      	bhi.n	800c020 <UART_SetConfig+0x2d0>
 800bfe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfec:	d00c      	beq.n	800c008 <UART_SetConfig+0x2b8>
 800bfee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bff2:	d815      	bhi.n	800c020 <UART_SetConfig+0x2d0>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <UART_SetConfig+0x2b0>
 800bff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bffc:	d008      	beq.n	800c010 <UART_SetConfig+0x2c0>
 800bffe:	e00f      	b.n	800c020 <UART_SetConfig+0x2d0>
 800c000:	2300      	movs	r3, #0
 800c002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c006:	e022      	b.n	800c04e <UART_SetConfig+0x2fe>
 800c008:	2302      	movs	r3, #2
 800c00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c00e:	e01e      	b.n	800c04e <UART_SetConfig+0x2fe>
 800c010:	2304      	movs	r3, #4
 800c012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c016:	e01a      	b.n	800c04e <UART_SetConfig+0x2fe>
 800c018:	2308      	movs	r3, #8
 800c01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c01e:	e016      	b.n	800c04e <UART_SetConfig+0x2fe>
 800c020:	2310      	movs	r3, #16
 800c022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c026:	e012      	b.n	800c04e <UART_SetConfig+0x2fe>
 800c028:	cfff69f3 	.word	0xcfff69f3
 800c02c:	40008000 	.word	0x40008000
 800c030:	40013800 	.word	0x40013800
 800c034:	40021000 	.word	0x40021000
 800c038:	40004400 	.word	0x40004400
 800c03c:	40004800 	.word	0x40004800
 800c040:	40004c00 	.word	0x40004c00
 800c044:	40005000 	.word	0x40005000
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4aae      	ldr	r2, [pc, #696]	@ (800c30c <UART_SetConfig+0x5bc>)
 800c054:	4293      	cmp	r3, r2
 800c056:	f040 8097 	bne.w	800c188 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c05a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c05e:	2b08      	cmp	r3, #8
 800c060:	d823      	bhi.n	800c0aa <UART_SetConfig+0x35a>
 800c062:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <UART_SetConfig+0x318>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c0ab 	.word	0x0800c0ab
 800c070:	0800c095 	.word	0x0800c095
 800c074:	0800c0ab 	.word	0x0800c0ab
 800c078:	0800c09b 	.word	0x0800c09b
 800c07c:	0800c0ab 	.word	0x0800c0ab
 800c080:	0800c0ab 	.word	0x0800c0ab
 800c084:	0800c0ab 	.word	0x0800c0ab
 800c088:	0800c0a3 	.word	0x0800c0a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c08c:	f7fc fcec 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800c090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c092:	e010      	b.n	800c0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c094:	4b9e      	ldr	r3, [pc, #632]	@ (800c310 <UART_SetConfig+0x5c0>)
 800c096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c098:	e00d      	b.n	800c0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c09a:	f7fc fc77 	bl	800898c <HAL_RCC_GetSysClockFreq>
 800c09e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c0a0:	e009      	b.n	800c0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c0a8:	e005      	b.n	800c0b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c0b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 8130 	beq.w	800c31e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c2:	4a94      	ldr	r2, [pc, #592]	@ (800c314 <UART_SetConfig+0x5c4>)
 800c0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	4413      	add	r3, r2
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d305      	bcc.n	800c0ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d903      	bls.n	800c0f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c0f4:	e113      	b.n	800c31e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	60bb      	str	r3, [r7, #8]
 800c0fc:	60fa      	str	r2, [r7, #12]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c102:	4a84      	ldr	r2, [pc, #528]	@ (800c314 <UART_SetConfig+0x5c4>)
 800c104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	2200      	movs	r2, #0
 800c10c:	603b      	str	r3, [r7, #0]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c118:	f7f4 fce4 	bl	8000ae4 <__aeabi_uldivmod>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4610      	mov	r0, r2
 800c122:	4619      	mov	r1, r3
 800c124:	f04f 0200 	mov.w	r2, #0
 800c128:	f04f 0300 	mov.w	r3, #0
 800c12c:	020b      	lsls	r3, r1, #8
 800c12e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c132:	0202      	lsls	r2, r0, #8
 800c134:	6979      	ldr	r1, [r7, #20]
 800c136:	6849      	ldr	r1, [r1, #4]
 800c138:	0849      	lsrs	r1, r1, #1
 800c13a:	2000      	movs	r0, #0
 800c13c:	460c      	mov	r4, r1
 800c13e:	4605      	mov	r5, r0
 800c140:	eb12 0804 	adds.w	r8, r2, r4
 800c144:	eb43 0905 	adc.w	r9, r3, r5
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	469a      	mov	sl, r3
 800c150:	4693      	mov	fp, r2
 800c152:	4652      	mov	r2, sl
 800c154:	465b      	mov	r3, fp
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 fcc3 	bl	8000ae4 <__aeabi_uldivmod>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4613      	mov	r3, r2
 800c164:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c16c:	d308      	bcc.n	800c180 <UART_SetConfig+0x430>
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c174:	d204      	bcs.n	800c180 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	6a3a      	ldr	r2, [r7, #32]
 800c17c:	60da      	str	r2, [r3, #12]
 800c17e:	e0ce      	b.n	800c31e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c186:	e0ca      	b.n	800c31e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c190:	d166      	bne.n	800c260 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c192:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c196:	2b08      	cmp	r3, #8
 800c198:	d827      	bhi.n	800c1ea <UART_SetConfig+0x49a>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <UART_SetConfig+0x450>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1c5 	.word	0x0800c1c5
 800c1a4:	0800c1cd 	.word	0x0800c1cd
 800c1a8:	0800c1d5 	.word	0x0800c1d5
 800c1ac:	0800c1eb 	.word	0x0800c1eb
 800c1b0:	0800c1db 	.word	0x0800c1db
 800c1b4:	0800c1eb 	.word	0x0800c1eb
 800c1b8:	0800c1eb 	.word	0x0800c1eb
 800c1bc:	0800c1eb 	.word	0x0800c1eb
 800c1c0:	0800c1e3 	.word	0x0800c1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1c4:	f7fc fc50 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800c1c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1ca:	e014      	b.n	800c1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1cc:	f7fc fc62 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 800c1d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1d2:	e010      	b.n	800c1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1d4:	4b4e      	ldr	r3, [pc, #312]	@ (800c310 <UART_SetConfig+0x5c0>)
 800c1d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c1d8:	e00d      	b.n	800c1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1da:	f7fc fbd7 	bl	800898c <HAL_RCC_GetSysClockFreq>
 800c1de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c1e0:	e009      	b.n	800c1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c1e8:	e005      	b.n	800c1f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c1f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 8090 	beq.w	800c31e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c202:	4a44      	ldr	r2, [pc, #272]	@ (800c314 <UART_SetConfig+0x5c4>)
 800c204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c208:	461a      	mov	r2, r3
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c210:	005a      	lsls	r2, r3, #1
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	085b      	lsrs	r3, r3, #1
 800c218:	441a      	add	r2, r3
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	2b0f      	cmp	r3, #15
 800c228:	d916      	bls.n	800c258 <UART_SetConfig+0x508>
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c230:	d212      	bcs.n	800c258 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	b29b      	uxth	r3, r3
 800c236:	f023 030f 	bic.w	r3, r3, #15
 800c23a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	085b      	lsrs	r3, r3, #1
 800c240:	b29b      	uxth	r3, r3
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	b29a      	uxth	r2, r3
 800c248:	8bfb      	ldrh	r3, [r7, #30]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	8bfa      	ldrh	r2, [r7, #30]
 800c254:	60da      	str	r2, [r3, #12]
 800c256:	e062      	b.n	800c31e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c25e:	e05e      	b.n	800c31e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c260:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c264:	2b08      	cmp	r3, #8
 800c266:	d828      	bhi.n	800c2ba <UART_SetConfig+0x56a>
 800c268:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <UART_SetConfig+0x520>)
 800c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26e:	bf00      	nop
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c29d 	.word	0x0800c29d
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	0800c2bb 	.word	0x0800c2bb
 800c280:	0800c2ab 	.word	0x0800c2ab
 800c284:	0800c2bb 	.word	0x0800c2bb
 800c288:	0800c2bb 	.word	0x0800c2bb
 800c28c:	0800c2bb 	.word	0x0800c2bb
 800c290:	0800c2b3 	.word	0x0800c2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c294:	f7fc fbe8 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800c298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c29a:	e014      	b.n	800c2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c29c:	f7fc fbfa 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 800c2a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c2a2:	e010      	b.n	800c2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c310 <UART_SetConfig+0x5c0>)
 800c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c2a8:	e00d      	b.n	800c2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2aa:	f7fc fb6f 	bl	800898c <HAL_RCC_GetSysClockFreq>
 800c2ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c2b0:	e009      	b.n	800c2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c2b8:	e005      	b.n	800c2c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c2c4:	bf00      	nop
    }

    if (pclk != 0U)
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d028      	beq.n	800c31e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d0:	4a10      	ldr	r2, [pc, #64]	@ (800c314 <UART_SetConfig+0x5c4>)
 800c2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	085b      	lsrs	r3, r3, #1
 800c2e4:	441a      	add	r2, r3
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	2b0f      	cmp	r3, #15
 800c2f4:	d910      	bls.n	800c318 <UART_SetConfig+0x5c8>
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2fc:	d20c      	bcs.n	800c318 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	b29a      	uxth	r2, r3
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60da      	str	r2, [r3, #12]
 800c308:	e009      	b.n	800c31e <UART_SetConfig+0x5ce>
 800c30a:	bf00      	nop
 800c30c:	40008000 	.word	0x40008000
 800c310:	00f42400 	.word	0x00f42400
 800c314:	0800ee88 	.word	0x0800ee88
      }
      else
      {
        ret = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2201      	movs	r2, #1
 800c322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2201      	movs	r2, #1
 800c32a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	2200      	movs	r2, #0
 800c338:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c33a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3730      	adds	r7, #48	@ 0x30
 800c342:	46bd      	mov	sp, r7
 800c344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c354:	f003 0308 	and.w	r3, r3, #8
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00a      	beq.n	800c372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00a      	beq.n	800c394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00a      	beq.n	800c3b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00a      	beq.n	800c3d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	430a      	orrs	r2, r1
 800c3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3dc:	f003 0310 	and.w	r3, r3, #16
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00a      	beq.n	800c3fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3fe:	f003 0320 	and.w	r3, r3, #32
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c424:	2b00      	cmp	r3, #0
 800c426:	d01a      	beq.n	800c45e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c446:	d10a      	bne.n	800c45e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	430a      	orrs	r2, r1
 800c47e:	605a      	str	r2, [r3, #4]
  }
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b098      	sub	sp, #96	@ 0x60
 800c490:	af02      	add	r7, sp, #8
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c49c:	f7f9 fad8 	bl	8005a50 <HAL_GetTick>
 800c4a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d12f      	bne.n	800c510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f88e 	bl	800c5e0 <UART_WaitOnFlagUntilTimeout>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d022      	beq.n	800c510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d2:	e853 3f00 	ldrex	r3, [r3]
 800c4d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4de:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e6      	bne.n	800c4ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e063      	b.n	800c5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0304 	and.w	r3, r3, #4
 800c51a:	2b04      	cmp	r3, #4
 800c51c:	d149      	bne.n	800c5b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c51e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c526:	2200      	movs	r2, #0
 800c528:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f857 	bl	800c5e0 <UART_WaitOnFlagUntilTimeout>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d03c      	beq.n	800c5b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	623b      	str	r3, [r7, #32]
   return(result);
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c556:	633b      	str	r3, [r7, #48]	@ 0x30
 800c558:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c55c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e6      	bne.n	800c538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	60fb      	str	r3, [r7, #12]
   return(result);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f023 0301 	bic.w	r3, r3, #1
 800c580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3308      	adds	r3, #8
 800c588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c58a:	61fa      	str	r2, [r7, #28]
 800c58c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	69b9      	ldr	r1, [r7, #24]
 800c590:	69fa      	ldr	r2, [r7, #28]
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	617b      	str	r3, [r7, #20]
   return(result);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e5      	bne.n	800c56a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2220      	movs	r2, #32
 800c5a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e012      	b.n	800c5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2220      	movs	r2, #32
 800c5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3758      	adds	r7, #88	@ 0x58
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5f0:	e04f      	b.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d04b      	beq.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5fa:	f7f9 fa29 	bl	8005a50 <HAL_GetTick>
 800c5fe:	4602      	mov	r2, r0
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	429a      	cmp	r2, r3
 800c608:	d302      	bcc.n	800c610 <UART_WaitOnFlagUntilTimeout+0x30>
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e04e      	b.n	800c6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0304 	and.w	r3, r3, #4
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d037      	beq.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b80      	cmp	r3, #128	@ 0x80
 800c626:	d034      	beq.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b40      	cmp	r3, #64	@ 0x40
 800c62c:	d031      	beq.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69db      	ldr	r3, [r3, #28]
 800c634:	f003 0308 	and.w	r3, r3, #8
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d110      	bne.n	800c65e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2208      	movs	r2, #8
 800c642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f920 	bl	800c88a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2208      	movs	r2, #8
 800c64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e029      	b.n	800c6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c66c:	d111      	bne.n	800c692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f906 	bl	800c88a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2220      	movs	r2, #32
 800c682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e00f      	b.n	800c6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69da      	ldr	r2, [r3, #28]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4013      	ands	r3, r2
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	bf0c      	ite	eq
 800c6a2:	2301      	moveq	r3, #1
 800c6a4:	2300      	movne	r3, #0
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d0a0      	beq.n	800c5f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
	...

0800c6bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b096      	sub	sp, #88	@ 0x58
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	88fa      	ldrh	r2, [r7, #6]
 800c6d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2222      	movs	r2, #34	@ 0x22
 800c6e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d02d      	beq.n	800c74e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f8:	4a40      	ldr	r2, [pc, #256]	@ (800c7fc <UART_Start_Receive_DMA+0x140>)
 800c6fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c702:	4a3f      	ldr	r2, [pc, #252]	@ (800c800 <UART_Start_Receive_DMA+0x144>)
 800c704:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c70c:	4a3d      	ldr	r2, [pc, #244]	@ (800c804 <UART_Start_Receive_DMA+0x148>)
 800c70e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c716:	2200      	movs	r2, #0
 800c718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3324      	adds	r3, #36	@ 0x24
 800c726:	4619      	mov	r1, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c72c:	461a      	mov	r2, r3
 800c72e:	88fb      	ldrh	r3, [r7, #6]
 800c730:	f7fa ffca 	bl	80076c8 <HAL_DMA_Start_IT>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d009      	beq.n	800c74e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2210      	movs	r2, #16
 800c73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e051      	b.n	800c7f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d018      	beq.n	800c788 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c76a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c776:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c778:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c77a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c77c:	e841 2300 	strex	r3, r2, [r1]
 800c780:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1e6      	bne.n	800c756 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3308      	adds	r3, #8
 800c78e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c792:	e853 3f00 	ldrex	r3, [r3]
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	f043 0301 	orr.w	r3, r3, #1
 800c79e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7a8:	637a      	str	r2, [r7, #52]	@ 0x34
 800c7aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c7ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7b0:	e841 2300 	strex	r3, r2, [r1]
 800c7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e5      	bne.n	800c788 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	e853 3f00 	ldrex	r3, [r3]
 800c7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c7dc:	623a      	str	r2, [r7, #32]
 800c7de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e0:	69f9      	ldr	r1, [r7, #28]
 800c7e2:	6a3a      	ldr	r2, [r7, #32]
 800c7e4:	e841 2300 	strex	r3, r2, [r1]
 800c7e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1e5      	bne.n	800c7bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3758      	adds	r7, #88	@ 0x58
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	0800c957 	.word	0x0800c957
 800c800:	0800ca8b 	.word	0x0800ca8b
 800c804:	0800cad1 	.word	0x0800cad1

0800c808 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c808:	b480      	push	{r7}
 800c80a:	b08f      	sub	sp, #60	@ 0x3c
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c824:	637b      	str	r3, [r7, #52]	@ 0x34
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c830:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e6      	bne.n	800c810 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3308      	adds	r3, #8
 800c848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	e853 3f00 	ldrex	r3, [r3]
 800c850:	60bb      	str	r3, [r7, #8]
   return(result);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c858:	633b      	str	r3, [r7, #48]	@ 0x30
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3308      	adds	r3, #8
 800c860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c862:	61ba      	str	r2, [r7, #24]
 800c864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c866:	6979      	ldr	r1, [r7, #20]
 800c868:	69ba      	ldr	r2, [r7, #24]
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	613b      	str	r3, [r7, #16]
   return(result);
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e5      	bne.n	800c842 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2220      	movs	r2, #32
 800c87a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c87e:	bf00      	nop
 800c880:	373c      	adds	r7, #60	@ 0x3c
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b095      	sub	sp, #84	@ 0x54
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89a:	e853 3f00 	ldrex	r3, [r3]
 800c89e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8b8:	e841 2300 	strex	r3, r2, [r1]
 800c8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e6      	bne.n	800c892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	e853 3f00 	ldrex	r3, [r3]
 800c8d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8da:	f023 0301 	bic.w	r3, r3, #1
 800c8de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e3      	bne.n	800c8c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c900:	2b01      	cmp	r3, #1
 800c902:	d118      	bne.n	800c936 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	60bb      	str	r3, [r7, #8]
   return(result);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	f023 0310 	bic.w	r3, r3, #16
 800c918:	647b      	str	r3, [r7, #68]	@ 0x44
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c926:	6979      	ldr	r1, [r7, #20]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	e841 2300 	strex	r3, r2, [r1]
 800c92e:	613b      	str	r3, [r7, #16]
   return(result);
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1e6      	bne.n	800c904 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2220      	movs	r2, #32
 800c93a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c94a:	bf00      	nop
 800c94c:	3754      	adds	r7, #84	@ 0x54
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b09c      	sub	sp, #112	@ 0x70
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c962:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d171      	bne.n	800ca56 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c974:	2200      	movs	r2, #0
 800c976:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c982:	e853 3f00 	ldrex	r3, [r3]
 800c986:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c98a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c98e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c998:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c99a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c99e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9a0:	e841 2300 	strex	r3, r2, [r1]
 800c9a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1e6      	bne.n	800c97a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b6:	e853 3f00 	ldrex	r3, [r3]
 800c9ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9be:	f023 0301 	bic.w	r3, r3, #1
 800c9c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800c9c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9cc:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9d4:	e841 2300 	strex	r3, r2, [r1]
 800c9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e5      	bne.n	800c9ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	e853 3f00 	ldrex	r3, [r3]
 800c9ee:	623b      	str	r3, [r7, #32]
   return(result);
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9f6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c9f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca00:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e5      	bne.n	800c9e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca16:	2220      	movs	r2, #32
 800ca18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d118      	bne.n	800ca56 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	e853 3f00 	ldrex	r3, [r3]
 800ca30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f023 0310 	bic.w	r3, r3, #16
 800ca38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca46:	69b9      	ldr	r1, [r7, #24]
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	e841 2300 	strex	r3, r2, [r1]
 800ca4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1e6      	bne.n	800ca24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca58:	2200      	movs	r2, #0
 800ca5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d109      	bne.n	800ca78 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ca64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca6c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ca70:	4611      	mov	r1, r2
 800ca72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca74:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca76:	e004      	b.n	800ca82 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ca78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca80:	4798      	blx	r3
}
 800ca82:	bf00      	nop
 800ca84:	3770      	adds	r7, #112	@ 0x70
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d10b      	bne.n	800cabe <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cab2:	0852      	lsrs	r2, r2, #1
 800cab4:	b292      	uxth	r2, r2
 800cab6:	4611      	mov	r1, r2
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cabc:	e004      	b.n	800cac8 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	4798      	blx	r3
}
 800cac8:	bf00      	nop
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cadc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800caec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caf8:	2b80      	cmp	r3, #128	@ 0x80
 800cafa:	d109      	bne.n	800cb10 <UART_DMAError+0x40>
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	2b21      	cmp	r3, #33	@ 0x21
 800cb00:	d106      	bne.n	800cb10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cb0a:	6978      	ldr	r0, [r7, #20]
 800cb0c:	f7ff fe7c 	bl	800c808 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb1a:	2b40      	cmp	r3, #64	@ 0x40
 800cb1c:	d109      	bne.n	800cb32 <UART_DMAError+0x62>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b22      	cmp	r3, #34	@ 0x22
 800cb22:	d106      	bne.n	800cb32 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cb2c:	6978      	ldr	r0, [r7, #20]
 800cb2e:	f7ff feac 	bl	800c88a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb38:	f043 0210 	orr.w	r2, r3, #16
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb48:	6978      	ldr	r0, [r7, #20]
 800cb4a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb4c:	bf00      	nop
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	61bb      	str	r3, [r7, #24]
 800cba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	6979      	ldr	r1, [r7, #20]
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e6      	bne.n	800cb84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2220      	movs	r2, #32
 800cbba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbce:	bf00      	nop
 800cbd0:	3720      	adds	r7, #32
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbde:	bf00      	nop
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbf2:	bf00      	nop
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b083      	sub	sp, #12
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc12:	b480      	push	{r7}
 800cc14:	b085      	sub	sp, #20
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc24:	2302      	movs	r3, #2
 800cc26:	e027      	b.n	800cc78 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2224      	movs	r2, #36	@ 0x24
 800cc34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f022 0201 	bic.w	r2, r2, #1
 800cc4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d101      	bne.n	800cc9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc98:	2302      	movs	r3, #2
 800cc9a:	e02d      	b.n	800ccf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2224      	movs	r2, #36	@ 0x24
 800cca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0201 	bic.w	r2, r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	430a      	orrs	r2, r1
 800ccd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f84f 	bl	800cd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2220      	movs	r2, #32
 800ccea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d101      	bne.n	800cd18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd14:	2302      	movs	r3, #2
 800cd16:	e02d      	b.n	800cd74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2224      	movs	r2, #36	@ 0x24
 800cd24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f022 0201 	bic.w	r2, r2, #1
 800cd3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f811 	bl	800cd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d108      	bne.n	800cd9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd9c:	e031      	b.n	800ce02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd9e:	2308      	movs	r3, #8
 800cda0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cda2:	2308      	movs	r3, #8
 800cda4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	0e5b      	lsrs	r3, r3, #25
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f003 0307 	and.w	r3, r3, #7
 800cdb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	0f5b      	lsrs	r3, r3, #29
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	f003 0307 	and.w	r3, r3, #7
 800cdc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	7b3a      	ldrb	r2, [r7, #12]
 800cdca:	4911      	ldr	r1, [pc, #68]	@ (800ce10 <UARTEx_SetNbDataToProcess+0x94>)
 800cdcc:	5c8a      	ldrb	r2, [r1, r2]
 800cdce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdd2:	7b3a      	ldrb	r2, [r7, #12]
 800cdd4:	490f      	ldr	r1, [pc, #60]	@ (800ce14 <UARTEx_SetNbDataToProcess+0x98>)
 800cdd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	7b7a      	ldrb	r2, [r7, #13]
 800cde8:	4909      	ldr	r1, [pc, #36]	@ (800ce10 <UARTEx_SetNbDataToProcess+0x94>)
 800cdea:	5c8a      	ldrb	r2, [r1, r2]
 800cdec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdf0:	7b7a      	ldrb	r2, [r7, #13]
 800cdf2:	4908      	ldr	r1, [pc, #32]	@ (800ce14 <UARTEx_SetNbDataToProcess+0x98>)
 800cdf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	0800eea0 	.word	0x0800eea0
 800ce14:	0800eea8 	.word	0x0800eea8

0800ce18 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b08b      	sub	sp, #44	@ 0x2c
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800ce22:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce26:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800cf10 <arm_sin_f32+0xf8>
 800ce2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce2e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ce32:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce3a:	ee17 3a90 	vmov	r3, s15
 800ce3e:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800ce40:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4c:	d502      	bpl.n	800ce54 <arm_sin_f32+0x3c>
  {
    n--;
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	ee07 3a90 	vmov	s15, r3
 800ce5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce5e:	ed97 7a06 	vldr	s14, [r7, #24]
 800ce62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce66:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800ce6a:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce6e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800cf14 <arm_sin_f32+0xfc>
 800ce72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce76:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800ce7a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce82:	ee17 3a90 	vmov	r3, s15
 800ce86:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800ce88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce8e:	d309      	bcc.n	800cea4 <arm_sin_f32+0x8c>
    index = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800ce94:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce98:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800cf14 <arm_sin_f32+0xfc>
 800ce9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cea0:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800cea4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceae:	ed97 7a07 	vldr	s14, [r7, #28]
 800ceb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb6:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800ceba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cebc:	4a16      	ldr	r2, [pc, #88]	@ (800cf18 <arm_sin_f32+0x100>)
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800cec6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cec8:	3301      	adds	r3, #1
 800ceca:	4a13      	ldr	r2, [pc, #76]	@ (800cf18 <arm_sin_f32+0x100>)
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800ced4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ced8:	edd7 7a05 	vldr	s15, [r7, #20]
 800cedc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cee0:	edd7 7a04 	vldr	s15, [r7, #16]
 800cee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee8:	edd7 6a05 	vldr	s13, [r7, #20]
 800ceec:	edd7 7a03 	vldr	s15, [r7, #12]
 800cef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cef8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	ee07 3a90 	vmov	s15, r3
}
 800cf02:	eeb0 0a67 	vmov.f32	s0, s15
 800cf06:	372c      	adds	r7, #44	@ 0x2c
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	3e22f983 	.word	0x3e22f983
 800cf14:	44000000 	.word	0x44000000
 800cf18:	0800eeb0 	.word	0x0800eeb0

0800cf1c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b08b      	sub	sp, #44	@ 0x2c
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	885b      	ldrh	r3, [r3, #2]
 800cf44:	fb02 f303 	mul.w	r3, r2, r3
 800cf48:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800cf4e:	e013      	b.n	800cf78 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	1d1a      	adds	r2, r3, #4
 800cf54:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf56:	ed93 7a00 	vldr	s14, [r3]
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	623a      	str	r2, [r7, #32]
 800cf60:	edd3 7a00 	vldr	s15, [r3]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	1d1a      	adds	r2, r3, #4
 800cf68:	61fa      	str	r2, [r7, #28]
 800cf6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf6e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1e8      	bne.n	800cf50 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800cf82:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	372c      	adds	r7, #44	@ 0x2c
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	817b      	strh	r3, [r7, #10]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	897a      	ldrh	r2, [r7, #10]
 800cfa8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	893a      	ldrh	r2, [r7, #8]
 800cfae:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	605a      	str	r2, [r3, #4]
}
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b0bb      	sub	sp, #236	@ 0xec
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	885b      	ldrh	r3, [r3, #2]
 800cfe2:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800cfe4:	f04f 0300 	mov.w	r3, #0
 800cfe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cfec:	f04f 0300 	mov.w	r3, #0
 800cff0:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800cff2:	2300      	movs	r3, #0
 800cff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800cff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800cffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800d004:	e03b      	b.n	800d07e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800d006:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d008:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d012:	e00c      	b.n	800d02e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800d014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d018:	1d1a      	adds	r2, r3, #4
 800d01a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d01e:	f04f 0200 	mov.w	r2, #0
 800d022:	601a      	str	r2, [r3, #0]
        j--;
 800d024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d028:	3b01      	subs	r3, #1
 800d02a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1ee      	bne.n	800d014 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800d036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d03a:	1d1a      	adds	r2, r3, #4
 800d03c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d040:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d044:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800d046:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d04a:	3b01      	subs	r3, #1
 800d04c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d050:	e00c      	b.n	800d06c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800d052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d056:	1d1a      	adds	r2, r3, #4
 800d058:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
        j--;
 800d062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d066:	3b01      	subs	r3, #1
 800d068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d06c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1ee      	bne.n	800d052 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800d074:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d078:	3b01      	subs	r3, #1
 800d07a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800d07e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1bf      	bne.n	800d006 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800d086:	2300      	movs	r3, #0
 800d088:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d08c:	e2c7      	b.n	800d61e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800d08e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d092:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	885b      	ldrh	r3, [r3, #2]
 800d09c:	3301      	adds	r3, #1
 800d09e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800d0a2:	fb01 f303 	mul.w	r3, r1, r3
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800d0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800d0b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d0bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800d0c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d0ca:	e02c      	b.n	800d126 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685a      	ldr	r2, [r3, #4]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	885b      	ldrh	r3, [r3, #2]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0da:	fb03 f101 	mul.w	r1, r3, r1
 800d0de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d0e2:	440b      	add	r3, r1
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800d0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800d0f4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d0f8:	eeb0 7ae7 	vabs.f32	s14, s15
 800d0fc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d100:	eef0 7ae7 	vabs.f32	s15, s15
 800d104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10c:	dd06      	ble.n	800d11c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800d10e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800d116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800d11c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d120:	3301      	adds	r3, #1
 800d122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d126:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d12a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d3cd      	bcc.n	800d0cc <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800d130:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d134:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	f000 809b 	beq.w	800d276 <arm_mat_inverse_f32+0x2b4>
 800d140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d148:	429a      	cmp	r2, r3
 800d14a:	f000 8094 	beq.w	800d276 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	885b      	ldrh	r3, [r3, #2]
 800d162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d164:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d170:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d172:	fb03 f202 	mul.w	r2, r3, r2
 800d176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d182:	4413      	add	r3, r2
 800d184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d18e:	fb03 f202 	mul.w	r2, r3, r2
 800d192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d196:	4413      	add	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d19e:	4413      	add	r3, r2
 800d1a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d1aa:	e018      	b.n	800d1de <arm_mat_inverse_f32+0x21c>
 800d1ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d1b8:	1d1a      	adds	r2, r3, #4
 800d1ba:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800d1be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d1c2:	6812      	ldr	r2, [r2, #0]
 800d1c4:	601a      	str	r2, [r3, #0]
 800d1c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1ca:	1d1a      	adds	r2, r3, #4
 800d1cc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800d1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d1d8:	3301      	adds	r3, #1
 800d1da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d1de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800d1e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	dbe1      	blt.n	800d1ac <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d200:	643b      	str	r3, [r7, #64]	@ 0x40
 800d202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d204:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d206:	fb02 f303 	mul.w	r3, r2, r3
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d210:	4413      	add	r3, r2
 800d212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d21c:	fb02 f303 	mul.w	r3, r2, r3
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d226:	4413      	add	r3, r2
 800d228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d232:	e018      	b.n	800d266 <arm_mat_inverse_f32+0x2a4>
 800d234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d240:	1d1a      	adds	r2, r3, #4
 800d242:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d252:	1d1a      	adds	r2, r3, #4
 800d254:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d260:	3301      	adds	r3, #1
 800d262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d26c:	429a      	cmp	r2, r3
 800d26e:	dbe1      	blt.n	800d234 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800d270:	2301      	movs	r3, #1
 800d272:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800d276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d009      	beq.n	800d292 <arm_mat_inverse_f32+0x2d0>
 800d27e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d282:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28a:	d102      	bne.n	800d292 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800d28c:	f06f 0304 	mvn.w	r3, #4
 800d290:	e208      	b.n	800d6a4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800d292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d296:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800d29a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d29e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	885b      	ldrh	r3, [r3, #2]
 800d2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2be:	fb03 f202 	mul.w	r2, r3, r2
 800d2c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d2da:	e011      	b.n	800d300 <arm_mat_inverse_f32+0x33e>
 800d2dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800d2e6:	ed93 7a00 	vldr	s14, [r3]
 800d2ea:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f2:	edc3 7a00 	vstr	s15, [r3]
 800d2f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d300:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	429a      	cmp	r2, r3
 800d308:	dbe8      	blt.n	800d2dc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d320:	fb02 f303 	mul.w	r3, r2, r3
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d32a:	4413      	add	r3, r2
 800d32c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d330:	2300      	movs	r3, #0
 800d332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d336:	e011      	b.n	800d35c <arm_mat_inverse_f32+0x39a>
 800d338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d33c:	1d1a      	adds	r2, r3, #4
 800d33e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800d342:	ed93 7a00 	vldr	s14, [r3]
 800d346:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34e:	edc3 7a00 	vstr	s15, [r3]
 800d352:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d356:	3301      	adds	r3, #1
 800d358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d35c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d362:	429a      	cmp	r2, r3
 800d364:	dbe8      	blt.n	800d338 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800d36c:	e0ae      	b.n	800d4cc <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685a      	ldr	r2, [r3, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	885b      	ldrh	r3, [r3, #2]
 800d376:	4619      	mov	r1, r3
 800d378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d37c:	fb03 f101 	mul.w	r1, r3, r1
 800d380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d384:	440b      	add	r3, r1
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800d38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	885b      	ldrh	r3, [r3, #2]
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d3be:	fb03 f202 	mul.w	r2, r3, r2
 800d3c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d3d8:	fb03 f202 	mul.w	r2, r3, r2
 800d3dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d3e0:	4413      	add	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3f4:	e01a      	b.n	800d42c <arm_mat_inverse_f32+0x46a>
 800d3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3fa:	1d1a      	adds	r2, r3, #4
 800d3fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d400:	ed93 7a00 	vldr	s14, [r3]
 800d404:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d410:	1d1a      	adds	r2, r3, #4
 800d412:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d416:	ed93 7a00 	vldr	s14, [r3]
 800d41a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d41e:	edc3 7a00 	vstr	s15, [r3]
 800d422:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d426:	3301      	adds	r3, #1
 800d428:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d42c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	429a      	cmp	r2, r3
 800d434:	dbdf      	blt.n	800d3f6 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	885b      	ldrh	r3, [r3, #2]
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	60bb      	str	r3, [r7, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d460:	4413      	add	r3, r2
 800d462:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d46a:	fb02 f303 	mul.w	r3, r2, r3
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d474:	4413      	add	r3, r2
 800d476:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d47a:	2300      	movs	r3, #0
 800d47c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d480:	e01a      	b.n	800d4b8 <arm_mat_inverse_f32+0x4f6>
 800d482:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d486:	1d1a      	adds	r2, r3, #4
 800d488:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d48c:	ed93 7a00 	vldr	s14, [r3]
 800d490:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d49c:	1d1a      	adds	r2, r3, #4
 800d49e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800d4a2:	ed93 7a00 	vldr	s14, [r3]
 800d4a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4aa:	edc3 7a00 	vstr	s15, [r3]
 800d4ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d4b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	dbdf      	blt.n	800d482 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800d4c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d4cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	f4ff af4b 	bcc.w	800d36e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d4d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d4e0:	e092      	b.n	800d608 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	885b      	ldrh	r3, [r3, #2]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4f0:	fb03 f101 	mul.w	r1, r3, r1
 800d4f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d4f8:	440b      	add	r3, r1
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800d502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	677b      	str	r3, [r7, #116]	@ 0x74
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	885b      	ldrh	r3, [r3, #2]
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	623b      	str	r3, [r7, #32]
 800d528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d52e:	fb03 f202 	mul.w	r2, r3, r2
 800d532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d53c:	4413      	add	r3, r2
 800d53e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d544:	fb03 f202 	mul.w	r2, r3, r2
 800d548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d552:	4413      	add	r3, r2
 800d554:	677b      	str	r3, [r7, #116]	@ 0x74
 800d556:	2300      	movs	r3, #0
 800d558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d55a:	e014      	b.n	800d586 <arm_mat_inverse_f32+0x5c4>
 800d55c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d55e:	1d1a      	adds	r2, r3, #4
 800d560:	677a      	str	r2, [r7, #116]	@ 0x74
 800d562:	ed93 7a00 	vldr	s14, [r3]
 800d566:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d56e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d570:	1d1a      	adds	r2, r3, #4
 800d572:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d574:	ed93 7a00 	vldr	s14, [r3]
 800d578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d57c:	edc3 7a00 	vstr	s15, [r3]
 800d580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d582:	3301      	adds	r3, #1
 800d584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d586:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	dbe6      	blt.n	800d55c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	885b      	ldrh	r3, [r3, #2]
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	61bb      	str	r3, [r7, #24]
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d5aa:	fb02 f303 	mul.w	r3, r2, r3
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d5b2:	4413      	add	r3, r2
 800d5b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d5c2:	4413      	add	r3, r2
 800d5c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5ca:	e014      	b.n	800d5f6 <arm_mat_inverse_f32+0x634>
 800d5cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5ce:	1d1a      	adds	r2, r3, #4
 800d5d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d5d2:	ed93 7a00 	vldr	s14, [r3]
 800d5d6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5e0:	1d1a      	adds	r2, r3, #4
 800d5e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d5e4:	ed93 7a00 	vldr	s14, [r3]
 800d5e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5ec:	edc3 7a00 	vstr	s15, [r3]
 800d5f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	dbe6      	blt.n	800d5cc <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d5fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d602:	3301      	adds	r3, #1
 800d604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d608:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d60c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d60e:	429a      	cmp	r2, r3
 800d610:	f4ff af67 	bcc.w	800d4e2 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800d614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d618:	3301      	adds	r3, #1
 800d61a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d61e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d624:	429a      	cmp	r2, r3
 800d626:	f4ff ad32 	bcc.w	800d08e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d62a:	2300      	movs	r3, #0
 800d62c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800d630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d634:	2b01      	cmp	r3, #1
 800d636:	d033      	beq.n	800d6a0 <arm_mat_inverse_f32+0x6de>
 800d638:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d63c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	d12c      	bne.n	800d6a0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d64c:	2300      	movs	r3, #0
 800d64e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d652:	e010      	b.n	800d676 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d65c:	4413      	add	r3, r2
 800d65e:	edd3 7a00 	vldr	s15, [r3]
 800d662:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	d10d      	bne.n	800d688 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d66c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d670:	3301      	adds	r3, #1
 800d672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d67a:	fb02 f303 	mul.w	r3, r2, r3
 800d67e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d682:	429a      	cmp	r2, r3
 800d684:	d3e6      	bcc.n	800d654 <arm_mat_inverse_f32+0x692>
 800d686:	e000      	b.n	800d68a <arm_mat_inverse_f32+0x6c8>
            break;
 800d688:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d68c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
 800d692:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d696:	429a      	cmp	r2, r3
 800d698:	d102      	bne.n	800d6a0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d69a:	23fb      	movs	r3, #251	@ 0xfb
 800d69c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d6a0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	37ec      	adds	r7, #236	@ 0xec
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b093      	sub	sp, #76	@ 0x4c
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	885b      	ldrh	r3, [r3, #2]
 800d6e4:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	885b      	ldrh	r3, [r3, #2]
 800d6ea:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6f0:	8b7b      	ldrh	r3, [r7, #26]
 800d6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	69fa      	ldr	r2, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d6fe:	8b3b      	ldrh	r3, [r7, #24]
 800d700:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d708:	f04f 0300 	mov.w	r3, #0
 800d70c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d710:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d712:	8afb      	ldrh	r3, [r7, #22]
 800d714:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d716:	e017      	b.n	800d748 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d71a:	1d1a      	adds	r2, r3, #4
 800d71c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d71e:	ed93 7a00 	vldr	s14, [r3]
 800d722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d724:	edd3 7a00 	vldr	s15, [r3]
 800d728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d730:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d734:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d738:	8b3b      	ldrh	r3, [r7, #24]
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d73e:	4413      	add	r3, r2
 800d740:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d744:	3b01      	subs	r3, #1
 800d746:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1e4      	bne.n	800d718 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d750:	1d1a      	adds	r2, r3, #4
 800d752:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d756:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75a:	3b01      	subs	r3, #1
 800d75c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d75e:	8b3a      	ldrh	r2, [r7, #24]
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	6a3a      	ldr	r2, [r7, #32]
 800d768:	4413      	add	r3, r2
 800d76a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1ca      	bne.n	800d708 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d772:	8b3b      	ldrh	r3, [r7, #24]
 800d774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d776:	4413      	add	r3, r2
 800d778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d77a:	8afb      	ldrh	r3, [r7, #22]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d780:	4413      	add	r3, r2
 800d782:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d786:	3b01      	subs	r3, #1
 800d788:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1b1      	bne.n	800d6f4 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d790:	2300      	movs	r3, #0
 800d792:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d794:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	374c      	adds	r7, #76	@ 0x4c
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b08b      	sub	sp, #44	@ 0x2c
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	ed87 0a02 	vstr	s0, [r7, #8]
 800d7b0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	885b      	ldrh	r3, [r3, #2]
 800d7c8:	fb02 f303 	mul.w	r3, r2, r3
 800d7cc:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d7d2:	e010      	b.n	800d7f6 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	1d1a      	adds	r2, r3, #4
 800d7d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7da:	ed93 7a00 	vldr	s14, [r3]
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	1d1a      	adds	r2, r3, #4
 800d7e2:	623a      	str	r2, [r7, #32]
 800d7e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ec:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1eb      	bne.n	800d7d4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800d800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d804:	4618      	mov	r0, r3
 800d806:	372c      	adds	r7, #44	@ 0x2c
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d810:	b480      	push	{r7}
 800d812:	b08b      	sub	sp, #44	@ 0x2c
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	885b      	ldrh	r3, [r3, #2]
 800d838:	fb02 f303 	mul.w	r3, r2, r3
 800d83c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d842:	e013      	b.n	800d86c <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	1d1a      	adds	r2, r3, #4
 800d848:	627a      	str	r2, [r7, #36]	@ 0x24
 800d84a:	ed93 7a00 	vldr	s14, [r3]
 800d84e:	6a3b      	ldr	r3, [r7, #32]
 800d850:	1d1a      	adds	r2, r3, #4
 800d852:	623a      	str	r2, [r7, #32]
 800d854:	edd3 7a00 	vldr	s15, [r3]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	1d1a      	adds	r2, r3, #4
 800d85c:	61fa      	str	r2, [r7, #28]
 800d85e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d862:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	3b01      	subs	r3, #1
 800d86a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1e8      	bne.n	800d844 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d872:	2300      	movs	r3, #0
 800d874:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d876:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	372c      	adds	r7, #44	@ 0x2c
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d886:	b480      	push	{r7}
 800d888:	b08b      	sub	sp, #44	@ 0x2c
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	881b      	ldrh	r3, [r3, #0]
 800d8a0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d8a8:	89fb      	ldrh	r3, [r7, #14]
 800d8aa:	61bb      	str	r3, [r7, #24]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d8ba:	89bb      	ldrh	r3, [r7, #12]
 800d8bc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d8be:	e00d      	b.n	800d8dc <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c2:	1d1a      	adds	r2, r3, #4
 800d8c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d8cc:	89fb      	ldrh	r3, [r7, #14]
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	6a3a      	ldr	r2, [r7, #32]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1ee      	bne.n	800d8c0 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1dd      	bne.n	800d8b0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d8f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	372c      	adds	r7, #44	@ 0x2c
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <malloc>:
 800d908:	4b02      	ldr	r3, [pc, #8]	@ (800d914 <malloc+0xc>)
 800d90a:	4601      	mov	r1, r0
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	f000 b825 	b.w	800d95c <_malloc_r>
 800d912:	bf00      	nop
 800d914:	20000120 	.word	0x20000120

0800d918 <sbrk_aligned>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	4e0f      	ldr	r6, [pc, #60]	@ (800d958 <sbrk_aligned+0x40>)
 800d91c:	460c      	mov	r4, r1
 800d91e:	6831      	ldr	r1, [r6, #0]
 800d920:	4605      	mov	r5, r0
 800d922:	b911      	cbnz	r1, 800d92a <sbrk_aligned+0x12>
 800d924:	f000 f8ae 	bl	800da84 <_sbrk_r>
 800d928:	6030      	str	r0, [r6, #0]
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f000 f8a9 	bl	800da84 <_sbrk_r>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d103      	bne.n	800d93e <sbrk_aligned+0x26>
 800d936:	f04f 34ff 	mov.w	r4, #4294967295
 800d93a:	4620      	mov	r0, r4
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
 800d93e:	1cc4      	adds	r4, r0, #3
 800d940:	f024 0403 	bic.w	r4, r4, #3
 800d944:	42a0      	cmp	r0, r4
 800d946:	d0f8      	beq.n	800d93a <sbrk_aligned+0x22>
 800d948:	1a21      	subs	r1, r4, r0
 800d94a:	4628      	mov	r0, r5
 800d94c:	f000 f89a 	bl	800da84 <_sbrk_r>
 800d950:	3001      	adds	r0, #1
 800d952:	d1f2      	bne.n	800d93a <sbrk_aligned+0x22>
 800d954:	e7ef      	b.n	800d936 <sbrk_aligned+0x1e>
 800d956:	bf00      	nop
 800d958:	200020b4 	.word	0x200020b4

0800d95c <_malloc_r>:
 800d95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d960:	1ccd      	adds	r5, r1, #3
 800d962:	f025 0503 	bic.w	r5, r5, #3
 800d966:	3508      	adds	r5, #8
 800d968:	2d0c      	cmp	r5, #12
 800d96a:	bf38      	it	cc
 800d96c:	250c      	movcc	r5, #12
 800d96e:	2d00      	cmp	r5, #0
 800d970:	4606      	mov	r6, r0
 800d972:	db01      	blt.n	800d978 <_malloc_r+0x1c>
 800d974:	42a9      	cmp	r1, r5
 800d976:	d904      	bls.n	800d982 <_malloc_r+0x26>
 800d978:	230c      	movs	r3, #12
 800d97a:	6033      	str	r3, [r6, #0]
 800d97c:	2000      	movs	r0, #0
 800d97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da58 <_malloc_r+0xfc>
 800d986:	f000 f869 	bl	800da5c <__malloc_lock>
 800d98a:	f8d8 3000 	ldr.w	r3, [r8]
 800d98e:	461c      	mov	r4, r3
 800d990:	bb44      	cbnz	r4, 800d9e4 <_malloc_r+0x88>
 800d992:	4629      	mov	r1, r5
 800d994:	4630      	mov	r0, r6
 800d996:	f7ff ffbf 	bl	800d918 <sbrk_aligned>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	4604      	mov	r4, r0
 800d99e:	d158      	bne.n	800da52 <_malloc_r+0xf6>
 800d9a0:	f8d8 4000 	ldr.w	r4, [r8]
 800d9a4:	4627      	mov	r7, r4
 800d9a6:	2f00      	cmp	r7, #0
 800d9a8:	d143      	bne.n	800da32 <_malloc_r+0xd6>
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	d04b      	beq.n	800da46 <_malloc_r+0xea>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	eb04 0903 	add.w	r9, r4, r3
 800d9b8:	f000 f864 	bl	800da84 <_sbrk_r>
 800d9bc:	4581      	cmp	r9, r0
 800d9be:	d142      	bne.n	800da46 <_malloc_r+0xea>
 800d9c0:	6821      	ldr	r1, [r4, #0]
 800d9c2:	1a6d      	subs	r5, r5, r1
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f7ff ffa6 	bl	800d918 <sbrk_aligned>
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d03a      	beq.n	800da46 <_malloc_r+0xea>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	442b      	add	r3, r5
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	bb62      	cbnz	r2, 800da38 <_malloc_r+0xdc>
 800d9de:	f8c8 7000 	str.w	r7, [r8]
 800d9e2:	e00f      	b.n	800da04 <_malloc_r+0xa8>
 800d9e4:	6822      	ldr	r2, [r4, #0]
 800d9e6:	1b52      	subs	r2, r2, r5
 800d9e8:	d420      	bmi.n	800da2c <_malloc_r+0xd0>
 800d9ea:	2a0b      	cmp	r2, #11
 800d9ec:	d917      	bls.n	800da1e <_malloc_r+0xc2>
 800d9ee:	1961      	adds	r1, r4, r5
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	6025      	str	r5, [r4, #0]
 800d9f4:	bf18      	it	ne
 800d9f6:	6059      	strne	r1, [r3, #4]
 800d9f8:	6863      	ldr	r3, [r4, #4]
 800d9fa:	bf08      	it	eq
 800d9fc:	f8c8 1000 	streq.w	r1, [r8]
 800da00:	5162      	str	r2, [r4, r5]
 800da02:	604b      	str	r3, [r1, #4]
 800da04:	4630      	mov	r0, r6
 800da06:	f000 f82f 	bl	800da68 <__malloc_unlock>
 800da0a:	f104 000b 	add.w	r0, r4, #11
 800da0e:	1d23      	adds	r3, r4, #4
 800da10:	f020 0007 	bic.w	r0, r0, #7
 800da14:	1ac2      	subs	r2, r0, r3
 800da16:	bf1c      	itt	ne
 800da18:	1a1b      	subne	r3, r3, r0
 800da1a:	50a3      	strne	r3, [r4, r2]
 800da1c:	e7af      	b.n	800d97e <_malloc_r+0x22>
 800da1e:	6862      	ldr	r2, [r4, #4]
 800da20:	42a3      	cmp	r3, r4
 800da22:	bf0c      	ite	eq
 800da24:	f8c8 2000 	streq.w	r2, [r8]
 800da28:	605a      	strne	r2, [r3, #4]
 800da2a:	e7eb      	b.n	800da04 <_malloc_r+0xa8>
 800da2c:	4623      	mov	r3, r4
 800da2e:	6864      	ldr	r4, [r4, #4]
 800da30:	e7ae      	b.n	800d990 <_malloc_r+0x34>
 800da32:	463c      	mov	r4, r7
 800da34:	687f      	ldr	r7, [r7, #4]
 800da36:	e7b6      	b.n	800d9a6 <_malloc_r+0x4a>
 800da38:	461a      	mov	r2, r3
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	d1fb      	bne.n	800da38 <_malloc_r+0xdc>
 800da40:	2300      	movs	r3, #0
 800da42:	6053      	str	r3, [r2, #4]
 800da44:	e7de      	b.n	800da04 <_malloc_r+0xa8>
 800da46:	230c      	movs	r3, #12
 800da48:	6033      	str	r3, [r6, #0]
 800da4a:	4630      	mov	r0, r6
 800da4c:	f000 f80c 	bl	800da68 <__malloc_unlock>
 800da50:	e794      	b.n	800d97c <_malloc_r+0x20>
 800da52:	6005      	str	r5, [r0, #0]
 800da54:	e7d6      	b.n	800da04 <_malloc_r+0xa8>
 800da56:	bf00      	nop
 800da58:	200020b8 	.word	0x200020b8

0800da5c <__malloc_lock>:
 800da5c:	4801      	ldr	r0, [pc, #4]	@ (800da64 <__malloc_lock+0x8>)
 800da5e:	f000 b84b 	b.w	800daf8 <__retarget_lock_acquire_recursive>
 800da62:	bf00      	nop
 800da64:	200021f8 	.word	0x200021f8

0800da68 <__malloc_unlock>:
 800da68:	4801      	ldr	r0, [pc, #4]	@ (800da70 <__malloc_unlock+0x8>)
 800da6a:	f000 b846 	b.w	800dafa <__retarget_lock_release_recursive>
 800da6e:	bf00      	nop
 800da70:	200021f8 	.word	0x200021f8

0800da74 <memset>:
 800da74:	4402      	add	r2, r0
 800da76:	4603      	mov	r3, r0
 800da78:	4293      	cmp	r3, r2
 800da7a:	d100      	bne.n	800da7e <memset+0xa>
 800da7c:	4770      	bx	lr
 800da7e:	f803 1b01 	strb.w	r1, [r3], #1
 800da82:	e7f9      	b.n	800da78 <memset+0x4>

0800da84 <_sbrk_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4d06      	ldr	r5, [pc, #24]	@ (800daa0 <_sbrk_r+0x1c>)
 800da88:	2300      	movs	r3, #0
 800da8a:	4604      	mov	r4, r0
 800da8c:	4608      	mov	r0, r1
 800da8e:	602b      	str	r3, [r5, #0]
 800da90:	f7f7 f8b2 	bl	8004bf8 <_sbrk>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d102      	bne.n	800da9e <_sbrk_r+0x1a>
 800da98:	682b      	ldr	r3, [r5, #0]
 800da9a:	b103      	cbz	r3, 800da9e <_sbrk_r+0x1a>
 800da9c:	6023      	str	r3, [r4, #0]
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	200021f4 	.word	0x200021f4

0800daa4 <__errno>:
 800daa4:	4b01      	ldr	r3, [pc, #4]	@ (800daac <__errno+0x8>)
 800daa6:	6818      	ldr	r0, [r3, #0]
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	20000120 	.word	0x20000120

0800dab0 <__libc_init_array>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	4d0d      	ldr	r5, [pc, #52]	@ (800dae8 <__libc_init_array+0x38>)
 800dab4:	4c0d      	ldr	r4, [pc, #52]	@ (800daec <__libc_init_array+0x3c>)
 800dab6:	1b64      	subs	r4, r4, r5
 800dab8:	10a4      	asrs	r4, r4, #2
 800daba:	2600      	movs	r6, #0
 800dabc:	42a6      	cmp	r6, r4
 800dabe:	d109      	bne.n	800dad4 <__libc_init_array+0x24>
 800dac0:	4d0b      	ldr	r5, [pc, #44]	@ (800daf0 <__libc_init_array+0x40>)
 800dac2:	4c0c      	ldr	r4, [pc, #48]	@ (800daf4 <__libc_init_array+0x44>)
 800dac4:	f001 f9a8 	bl	800ee18 <_init>
 800dac8:	1b64      	subs	r4, r4, r5
 800daca:	10a4      	asrs	r4, r4, #2
 800dacc:	2600      	movs	r6, #0
 800dace:	42a6      	cmp	r6, r4
 800dad0:	d105      	bne.n	800dade <__libc_init_array+0x2e>
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
 800dad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dad8:	4798      	blx	r3
 800dada:	3601      	adds	r6, #1
 800dadc:	e7ee      	b.n	800dabc <__libc_init_array+0xc>
 800dade:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae2:	4798      	blx	r3
 800dae4:	3601      	adds	r6, #1
 800dae6:	e7f2      	b.n	800dace <__libc_init_array+0x1e>
 800dae8:	0800faac 	.word	0x0800faac
 800daec:	0800faac 	.word	0x0800faac
 800daf0:	0800faac 	.word	0x0800faac
 800daf4:	0800fab0 	.word	0x0800fab0

0800daf8 <__retarget_lock_acquire_recursive>:
 800daf8:	4770      	bx	lr

0800dafa <__retarget_lock_release_recursive>:
 800dafa:	4770      	bx	lr

0800dafc <fmodf>:
 800dafc:	b508      	push	{r3, lr}
 800dafe:	ed2d 8b02 	vpush	{d8}
 800db02:	eef0 8a40 	vmov.f32	s17, s0
 800db06:	eeb0 8a60 	vmov.f32	s16, s1
 800db0a:	f000 f9eb 	bl	800dee4 <__ieee754_fmodf>
 800db0e:	eef4 8a48 	vcmp.f32	s17, s16
 800db12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db16:	d60c      	bvs.n	800db32 <fmodf+0x36>
 800db18:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800db38 <fmodf+0x3c>
 800db1c:	eeb4 8a68 	vcmp.f32	s16, s17
 800db20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db24:	d105      	bne.n	800db32 <fmodf+0x36>
 800db26:	f7ff ffbd 	bl	800daa4 <__errno>
 800db2a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db2e:	2321      	movs	r3, #33	@ 0x21
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	ecbd 8b02 	vpop	{d8}
 800db36:	bd08      	pop	{r3, pc}
 800db38:	00000000 	.word	0x00000000

0800db3c <powf>:
 800db3c:	b508      	push	{r3, lr}
 800db3e:	ed2d 8b04 	vpush	{d8-d9}
 800db42:	eeb0 8a60 	vmov.f32	s16, s1
 800db46:	eeb0 9a40 	vmov.f32	s18, s0
 800db4a:	f000 fa4d 	bl	800dfe8 <__ieee754_powf>
 800db4e:	eeb4 8a48 	vcmp.f32	s16, s16
 800db52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db56:	eef0 8a40 	vmov.f32	s17, s0
 800db5a:	d63e      	bvs.n	800dbda <powf+0x9e>
 800db5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800db60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db64:	d112      	bne.n	800db8c <powf+0x50>
 800db66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6e:	d039      	beq.n	800dbe4 <powf+0xa8>
 800db70:	eeb0 0a48 	vmov.f32	s0, s16
 800db74:	f000 f8e2 	bl	800dd3c <finitef>
 800db78:	b378      	cbz	r0, 800dbda <powf+0x9e>
 800db7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800db7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db82:	d52a      	bpl.n	800dbda <powf+0x9e>
 800db84:	f7ff ff8e 	bl	800daa4 <__errno>
 800db88:	2322      	movs	r3, #34	@ 0x22
 800db8a:	e014      	b.n	800dbb6 <powf+0x7a>
 800db8c:	f000 f8d6 	bl	800dd3c <finitef>
 800db90:	b998      	cbnz	r0, 800dbba <powf+0x7e>
 800db92:	eeb0 0a49 	vmov.f32	s0, s18
 800db96:	f000 f8d1 	bl	800dd3c <finitef>
 800db9a:	b170      	cbz	r0, 800dbba <powf+0x7e>
 800db9c:	eeb0 0a48 	vmov.f32	s0, s16
 800dba0:	f000 f8cc 	bl	800dd3c <finitef>
 800dba4:	b148      	cbz	r0, 800dbba <powf+0x7e>
 800dba6:	eef4 8a68 	vcmp.f32	s17, s17
 800dbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbae:	d7e9      	bvc.n	800db84 <powf+0x48>
 800dbb0:	f7ff ff78 	bl	800daa4 <__errno>
 800dbb4:	2321      	movs	r3, #33	@ 0x21
 800dbb6:	6003      	str	r3, [r0, #0]
 800dbb8:	e00f      	b.n	800dbda <powf+0x9e>
 800dbba:	eef5 8a40 	vcmp.f32	s17, #0.0
 800dbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc2:	d10a      	bne.n	800dbda <powf+0x9e>
 800dbc4:	eeb0 0a49 	vmov.f32	s0, s18
 800dbc8:	f000 f8b8 	bl	800dd3c <finitef>
 800dbcc:	b128      	cbz	r0, 800dbda <powf+0x9e>
 800dbce:	eeb0 0a48 	vmov.f32	s0, s16
 800dbd2:	f000 f8b3 	bl	800dd3c <finitef>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d1d4      	bne.n	800db84 <powf+0x48>
 800dbda:	eeb0 0a68 	vmov.f32	s0, s17
 800dbde:	ecbd 8b04 	vpop	{d8-d9}
 800dbe2:	bd08      	pop	{r3, pc}
 800dbe4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800dbe8:	e7f7      	b.n	800dbda <powf+0x9e>
	...

0800dbec <sqrtf>:
 800dbec:	b508      	push	{r3, lr}
 800dbee:	ed2d 8b02 	vpush	{d8}
 800dbf2:	eeb0 8a40 	vmov.f32	s16, s0
 800dbf6:	f000 f8d1 	bl	800dd9c <__ieee754_sqrtf>
 800dbfa:	eeb4 8a48 	vcmp.f32	s16, s16
 800dbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc02:	d60c      	bvs.n	800dc1e <sqrtf+0x32>
 800dc04:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800dc24 <sqrtf+0x38>
 800dc08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc10:	d505      	bpl.n	800dc1e <sqrtf+0x32>
 800dc12:	f7ff ff47 	bl	800daa4 <__errno>
 800dc16:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc1a:	2321      	movs	r3, #33	@ 0x21
 800dc1c:	6003      	str	r3, [r0, #0]
 800dc1e:	ecbd 8b02 	vpop	{d8}
 800dc22:	bd08      	pop	{r3, pc}
 800dc24:	00000000 	.word	0x00000000

0800dc28 <cosf>:
 800dc28:	ee10 3a10 	vmov	r3, s0
 800dc2c:	b507      	push	{r0, r1, r2, lr}
 800dc2e:	4a1e      	ldr	r2, [pc, #120]	@ (800dca8 <cosf+0x80>)
 800dc30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d806      	bhi.n	800dc46 <cosf+0x1e>
 800dc38:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800dcac <cosf+0x84>
 800dc3c:	b003      	add	sp, #12
 800dc3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc42:	f000 b8af 	b.w	800dda4 <__kernel_cosf>
 800dc46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dc4a:	d304      	bcc.n	800dc56 <cosf+0x2e>
 800dc4c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dc50:	b003      	add	sp, #12
 800dc52:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc56:	4668      	mov	r0, sp
 800dc58:	f000 fc94 	bl	800e584 <__ieee754_rem_pio2f>
 800dc5c:	f000 0003 	and.w	r0, r0, #3
 800dc60:	2801      	cmp	r0, #1
 800dc62:	d009      	beq.n	800dc78 <cosf+0x50>
 800dc64:	2802      	cmp	r0, #2
 800dc66:	d010      	beq.n	800dc8a <cosf+0x62>
 800dc68:	b9b0      	cbnz	r0, 800dc98 <cosf+0x70>
 800dc6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800dc6e:	ed9d 0a00 	vldr	s0, [sp]
 800dc72:	f000 f897 	bl	800dda4 <__kernel_cosf>
 800dc76:	e7eb      	b.n	800dc50 <cosf+0x28>
 800dc78:	eddd 0a01 	vldr	s1, [sp, #4]
 800dc7c:	ed9d 0a00 	vldr	s0, [sp]
 800dc80:	f000 f8e8 	bl	800de54 <__kernel_sinf>
 800dc84:	eeb1 0a40 	vneg.f32	s0, s0
 800dc88:	e7e2      	b.n	800dc50 <cosf+0x28>
 800dc8a:	eddd 0a01 	vldr	s1, [sp, #4]
 800dc8e:	ed9d 0a00 	vldr	s0, [sp]
 800dc92:	f000 f887 	bl	800dda4 <__kernel_cosf>
 800dc96:	e7f5      	b.n	800dc84 <cosf+0x5c>
 800dc98:	eddd 0a01 	vldr	s1, [sp, #4]
 800dc9c:	ed9d 0a00 	vldr	s0, [sp]
 800dca0:	2001      	movs	r0, #1
 800dca2:	f000 f8d7 	bl	800de54 <__kernel_sinf>
 800dca6:	e7d3      	b.n	800dc50 <cosf+0x28>
 800dca8:	3f490fd8 	.word	0x3f490fd8
 800dcac:	00000000 	.word	0x00000000

0800dcb0 <sinf>:
 800dcb0:	ee10 3a10 	vmov	r3, s0
 800dcb4:	b507      	push	{r0, r1, r2, lr}
 800dcb6:	4a1f      	ldr	r2, [pc, #124]	@ (800dd34 <sinf+0x84>)
 800dcb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d807      	bhi.n	800dcd0 <sinf+0x20>
 800dcc0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800dd38 <sinf+0x88>
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	b003      	add	sp, #12
 800dcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dccc:	f000 b8c2 	b.w	800de54 <__kernel_sinf>
 800dcd0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dcd4:	d304      	bcc.n	800dce0 <sinf+0x30>
 800dcd6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dcda:	b003      	add	sp, #12
 800dcdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dce0:	4668      	mov	r0, sp
 800dce2:	f000 fc4f 	bl	800e584 <__ieee754_rem_pio2f>
 800dce6:	f000 0003 	and.w	r0, r0, #3
 800dcea:	2801      	cmp	r0, #1
 800dcec:	d00a      	beq.n	800dd04 <sinf+0x54>
 800dcee:	2802      	cmp	r0, #2
 800dcf0:	d00f      	beq.n	800dd12 <sinf+0x62>
 800dcf2:	b9c0      	cbnz	r0, 800dd26 <sinf+0x76>
 800dcf4:	eddd 0a01 	vldr	s1, [sp, #4]
 800dcf8:	ed9d 0a00 	vldr	s0, [sp]
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	f000 f8a9 	bl	800de54 <__kernel_sinf>
 800dd02:	e7ea      	b.n	800dcda <sinf+0x2a>
 800dd04:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd08:	ed9d 0a00 	vldr	s0, [sp]
 800dd0c:	f000 f84a 	bl	800dda4 <__kernel_cosf>
 800dd10:	e7e3      	b.n	800dcda <sinf+0x2a>
 800dd12:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd16:	ed9d 0a00 	vldr	s0, [sp]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	f000 f89a 	bl	800de54 <__kernel_sinf>
 800dd20:	eeb1 0a40 	vneg.f32	s0, s0
 800dd24:	e7d9      	b.n	800dcda <sinf+0x2a>
 800dd26:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd2a:	ed9d 0a00 	vldr	s0, [sp]
 800dd2e:	f000 f839 	bl	800dda4 <__kernel_cosf>
 800dd32:	e7f5      	b.n	800dd20 <sinf+0x70>
 800dd34:	3f490fd8 	.word	0x3f490fd8
 800dd38:	00000000 	.word	0x00000000

0800dd3c <finitef>:
 800dd3c:	ee10 3a10 	vmov	r3, s0
 800dd40:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800dd44:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800dd48:	bfac      	ite	ge
 800dd4a:	2000      	movge	r0, #0
 800dd4c:	2001      	movlt	r0, #1
 800dd4e:	4770      	bx	lr

0800dd50 <with_errnof>:
 800dd50:	b510      	push	{r4, lr}
 800dd52:	ed2d 8b02 	vpush	{d8}
 800dd56:	eeb0 8a40 	vmov.f32	s16, s0
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	f7ff fea2 	bl	800daa4 <__errno>
 800dd60:	eeb0 0a48 	vmov.f32	s0, s16
 800dd64:	ecbd 8b02 	vpop	{d8}
 800dd68:	6004      	str	r4, [r0, #0]
 800dd6a:	bd10      	pop	{r4, pc}

0800dd6c <xflowf>:
 800dd6c:	b130      	cbz	r0, 800dd7c <xflowf+0x10>
 800dd6e:	eef1 7a40 	vneg.f32	s15, s0
 800dd72:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd76:	2022      	movs	r0, #34	@ 0x22
 800dd78:	f7ff bfea 	b.w	800dd50 <with_errnof>
 800dd7c:	eef0 7a40 	vmov.f32	s15, s0
 800dd80:	e7f7      	b.n	800dd72 <xflowf+0x6>
	...

0800dd84 <__math_uflowf>:
 800dd84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd8c <__math_uflowf+0x8>
 800dd88:	f7ff bff0 	b.w	800dd6c <xflowf>
 800dd8c:	10000000 	.word	0x10000000

0800dd90 <__math_oflowf>:
 800dd90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd98 <__math_oflowf+0x8>
 800dd94:	f7ff bfea 	b.w	800dd6c <xflowf>
 800dd98:	70000000 	.word	0x70000000

0800dd9c <__ieee754_sqrtf>:
 800dd9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dda0:	4770      	bx	lr
	...

0800dda4 <__kernel_cosf>:
 800dda4:	ee10 3a10 	vmov	r3, s0
 800dda8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ddb0:	eef0 6a40 	vmov.f32	s13, s0
 800ddb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ddb8:	d204      	bcs.n	800ddc4 <__kernel_cosf+0x20>
 800ddba:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ddbe:	ee17 2a90 	vmov	r2, s15
 800ddc2:	b342      	cbz	r2, 800de16 <__kernel_cosf+0x72>
 800ddc4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ddc8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800de34 <__kernel_cosf+0x90>
 800ddcc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800de38 <__kernel_cosf+0x94>
 800ddd0:	4a1a      	ldr	r2, [pc, #104]	@ (800de3c <__kernel_cosf+0x98>)
 800ddd2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800de40 <__kernel_cosf+0x9c>
 800dddc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dde0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800de44 <__kernel_cosf+0xa0>
 800dde4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dde8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800de48 <__kernel_cosf+0xa4>
 800ddec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ddf0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800de4c <__kernel_cosf+0xa8>
 800ddf4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ddf8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ddfc:	ee26 6a07 	vmul.f32	s12, s12, s14
 800de00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800de04:	eee7 0a06 	vfma.f32	s1, s14, s12
 800de08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de0c:	d804      	bhi.n	800de18 <__kernel_cosf+0x74>
 800de0e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800de12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de16:	4770      	bx	lr
 800de18:	4a0d      	ldr	r2, [pc, #52]	@ (800de50 <__kernel_cosf+0xac>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	bf9a      	itte	ls
 800de1e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800de22:	ee07 3a10 	vmovls	s14, r3
 800de26:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800de2a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800de2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de32:	e7ec      	b.n	800de0e <__kernel_cosf+0x6a>
 800de34:	ad47d74e 	.word	0xad47d74e
 800de38:	310f74f6 	.word	0x310f74f6
 800de3c:	3e999999 	.word	0x3e999999
 800de40:	b493f27c 	.word	0xb493f27c
 800de44:	37d00d01 	.word	0x37d00d01
 800de48:	bab60b61 	.word	0xbab60b61
 800de4c:	3d2aaaab 	.word	0x3d2aaaab
 800de50:	3f480000 	.word	0x3f480000

0800de54 <__kernel_sinf>:
 800de54:	ee10 3a10 	vmov	r3, s0
 800de58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de5c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800de60:	d204      	bcs.n	800de6c <__kernel_sinf+0x18>
 800de62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800de66:	ee17 3a90 	vmov	r3, s15
 800de6a:	b35b      	cbz	r3, 800dec4 <__kernel_sinf+0x70>
 800de6c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800de70:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dec8 <__kernel_sinf+0x74>
 800de74:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800decc <__kernel_sinf+0x78>
 800de78:	eea7 6a27 	vfma.f32	s12, s14, s15
 800de7c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ded0 <__kernel_sinf+0x7c>
 800de80:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de84:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ded4 <__kernel_sinf+0x80>
 800de88:	eea7 6a87 	vfma.f32	s12, s15, s14
 800de8c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ded8 <__kernel_sinf+0x84>
 800de90:	ee60 6a07 	vmul.f32	s13, s0, s14
 800de94:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de98:	b930      	cbnz	r0, 800dea8 <__kernel_sinf+0x54>
 800de9a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800dedc <__kernel_sinf+0x88>
 800de9e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dea2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dea6:	4770      	bx	lr
 800dea8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800deac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800deb0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800deb4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800deb8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800dee0 <__kernel_sinf+0x8c>
 800debc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dec0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	2f2ec9d3 	.word	0x2f2ec9d3
 800decc:	b2d72f34 	.word	0xb2d72f34
 800ded0:	3638ef1b 	.word	0x3638ef1b
 800ded4:	b9500d01 	.word	0xb9500d01
 800ded8:	3c088889 	.word	0x3c088889
 800dedc:	be2aaaab 	.word	0xbe2aaaab
 800dee0:	3e2aaaab 	.word	0x3e2aaaab

0800dee4 <__ieee754_fmodf>:
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	ee10 6a90 	vmov	r6, s1
 800deea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800deee:	1e5a      	subs	r2, r3, #1
 800def0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800def4:	d206      	bcs.n	800df04 <__ieee754_fmodf+0x20>
 800def6:	ee10 4a10 	vmov	r4, s0
 800defa:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800defe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800df02:	d304      	bcc.n	800df0e <__ieee754_fmodf+0x2a>
 800df04:	ee60 0a20 	vmul.f32	s1, s0, s1
 800df08:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800df0c:	bd70      	pop	{r4, r5, r6, pc}
 800df0e:	4299      	cmp	r1, r3
 800df10:	dbfc      	blt.n	800df0c <__ieee754_fmodf+0x28>
 800df12:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800df16:	d105      	bne.n	800df24 <__ieee754_fmodf+0x40>
 800df18:	4b32      	ldr	r3, [pc, #200]	@ (800dfe4 <__ieee754_fmodf+0x100>)
 800df1a:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800df1e:	ed93 0a00 	vldr	s0, [r3]
 800df22:	e7f3      	b.n	800df0c <__ieee754_fmodf+0x28>
 800df24:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800df28:	d146      	bne.n	800dfb8 <__ieee754_fmodf+0xd4>
 800df2a:	020a      	lsls	r2, r1, #8
 800df2c:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800df30:	2a00      	cmp	r2, #0
 800df32:	dc3e      	bgt.n	800dfb2 <__ieee754_fmodf+0xce>
 800df34:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800df38:	bf01      	itttt	eq
 800df3a:	021a      	lsleq	r2, r3, #8
 800df3c:	fab2 f282 	clzeq	r2, r2
 800df40:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800df44:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800df48:	bf16      	itet	ne
 800df4a:	15da      	asrne	r2, r3, #23
 800df4c:	3282      	addeq	r2, #130	@ 0x82
 800df4e:	3a7f      	subne	r2, #127	@ 0x7f
 800df50:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800df54:	bfbb      	ittet	lt
 800df56:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800df5a:	1a24      	sublt	r4, r4, r0
 800df5c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800df60:	40a1      	lsllt	r1, r4
 800df62:	bfa8      	it	ge
 800df64:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800df68:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800df6c:	bfb5      	itete	lt
 800df6e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800df72:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800df76:	1aa4      	sublt	r4, r4, r2
 800df78:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800df7c:	bfb8      	it	lt
 800df7e:	fa03 f404 	lsllt.w	r4, r3, r4
 800df82:	1a80      	subs	r0, r0, r2
 800df84:	1b0b      	subs	r3, r1, r4
 800df86:	b9d0      	cbnz	r0, 800dfbe <__ieee754_fmodf+0xda>
 800df88:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800df8c:	bf28      	it	cs
 800df8e:	460b      	movcs	r3, r1
 800df90:	2b00      	cmp	r3, #0
 800df92:	d0c1      	beq.n	800df18 <__ieee754_fmodf+0x34>
 800df94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800df98:	db19      	blt.n	800dfce <__ieee754_fmodf+0xea>
 800df9a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800df9e:	db19      	blt.n	800dfd4 <__ieee754_fmodf+0xf0>
 800dfa0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800dfa4:	327f      	adds	r2, #127	@ 0x7f
 800dfa6:	432b      	orrs	r3, r5
 800dfa8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dfac:	ee00 3a10 	vmov	s0, r3
 800dfb0:	e7ac      	b.n	800df0c <__ieee754_fmodf+0x28>
 800dfb2:	3801      	subs	r0, #1
 800dfb4:	0052      	lsls	r2, r2, #1
 800dfb6:	e7bb      	b.n	800df30 <__ieee754_fmodf+0x4c>
 800dfb8:	15c8      	asrs	r0, r1, #23
 800dfba:	387f      	subs	r0, #127	@ 0x7f
 800dfbc:	e7ba      	b.n	800df34 <__ieee754_fmodf+0x50>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	da02      	bge.n	800dfc8 <__ieee754_fmodf+0xe4>
 800dfc2:	0049      	lsls	r1, r1, #1
 800dfc4:	3801      	subs	r0, #1
 800dfc6:	e7dd      	b.n	800df84 <__ieee754_fmodf+0xa0>
 800dfc8:	d0a6      	beq.n	800df18 <__ieee754_fmodf+0x34>
 800dfca:	0059      	lsls	r1, r3, #1
 800dfcc:	e7fa      	b.n	800dfc4 <__ieee754_fmodf+0xe0>
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	3a01      	subs	r2, #1
 800dfd2:	e7df      	b.n	800df94 <__ieee754_fmodf+0xb0>
 800dfd4:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800dfd8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800dfdc:	3282      	adds	r2, #130	@ 0x82
 800dfde:	4113      	asrs	r3, r2
 800dfe0:	432b      	orrs	r3, r5
 800dfe2:	e7e3      	b.n	800dfac <__ieee754_fmodf+0xc8>
 800dfe4:	0800f6b4 	.word	0x0800f6b4

0800dfe8 <__ieee754_powf>:
 800dfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	ee10 4a90 	vmov	r4, s1
 800dff0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800dff4:	ed2d 8b02 	vpush	{d8}
 800dff8:	ee10 6a10 	vmov	r6, s0
 800dffc:	eeb0 8a40 	vmov.f32	s16, s0
 800e000:	eef0 8a60 	vmov.f32	s17, s1
 800e004:	d10c      	bne.n	800e020 <__ieee754_powf+0x38>
 800e006:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e00a:	0076      	lsls	r6, r6, #1
 800e00c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e010:	f240 8274 	bls.w	800e4fc <__ieee754_powf+0x514>
 800e014:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e018:	ecbd 8b02 	vpop	{d8}
 800e01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e020:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e024:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e028:	d802      	bhi.n	800e030 <__ieee754_powf+0x48>
 800e02a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e02e:	d908      	bls.n	800e042 <__ieee754_powf+0x5a>
 800e030:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e034:	d1ee      	bne.n	800e014 <__ieee754_powf+0x2c>
 800e036:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e03a:	0064      	lsls	r4, r4, #1
 800e03c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e040:	e7e6      	b.n	800e010 <__ieee754_powf+0x28>
 800e042:	2e00      	cmp	r6, #0
 800e044:	da1f      	bge.n	800e086 <__ieee754_powf+0x9e>
 800e046:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e04a:	f080 8260 	bcs.w	800e50e <__ieee754_powf+0x526>
 800e04e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e052:	d32f      	bcc.n	800e0b4 <__ieee754_powf+0xcc>
 800e054:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e058:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e05c:	fa49 f503 	asr.w	r5, r9, r3
 800e060:	fa05 f303 	lsl.w	r3, r5, r3
 800e064:	454b      	cmp	r3, r9
 800e066:	d123      	bne.n	800e0b0 <__ieee754_powf+0xc8>
 800e068:	f005 0501 	and.w	r5, r5, #1
 800e06c:	f1c5 0502 	rsb	r5, r5, #2
 800e070:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e074:	d11f      	bne.n	800e0b6 <__ieee754_powf+0xce>
 800e076:	2c00      	cmp	r4, #0
 800e078:	f280 8246 	bge.w	800e508 <__ieee754_powf+0x520>
 800e07c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e080:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e084:	e7c8      	b.n	800e018 <__ieee754_powf+0x30>
 800e086:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e08a:	d111      	bne.n	800e0b0 <__ieee754_powf+0xc8>
 800e08c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e090:	f000 8234 	beq.w	800e4fc <__ieee754_powf+0x514>
 800e094:	d906      	bls.n	800e0a4 <__ieee754_powf+0xbc>
 800e096:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800e3ac <__ieee754_powf+0x3c4>
 800e09a:	2c00      	cmp	r4, #0
 800e09c:	bfa8      	it	ge
 800e09e:	eeb0 0a68 	vmovge.f32	s0, s17
 800e0a2:	e7b9      	b.n	800e018 <__ieee754_powf+0x30>
 800e0a4:	2c00      	cmp	r4, #0
 800e0a6:	f280 822c 	bge.w	800e502 <__ieee754_powf+0x51a>
 800e0aa:	eeb1 0a68 	vneg.f32	s0, s17
 800e0ae:	e7b3      	b.n	800e018 <__ieee754_powf+0x30>
 800e0b0:	2500      	movs	r5, #0
 800e0b2:	e7dd      	b.n	800e070 <__ieee754_powf+0x88>
 800e0b4:	2500      	movs	r5, #0
 800e0b6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e0ba:	d102      	bne.n	800e0c2 <__ieee754_powf+0xda>
 800e0bc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e0c0:	e7aa      	b.n	800e018 <__ieee754_powf+0x30>
 800e0c2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e0c6:	f040 8227 	bne.w	800e518 <__ieee754_powf+0x530>
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	f2c0 8224 	blt.w	800e518 <__ieee754_powf+0x530>
 800e0d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e0d4:	ecbd 8b02 	vpop	{d8}
 800e0d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	f7ff be5e 	b.w	800dd9c <__ieee754_sqrtf>
 800e0e0:	2d01      	cmp	r5, #1
 800e0e2:	d199      	bne.n	800e018 <__ieee754_powf+0x30>
 800e0e4:	eeb1 0a40 	vneg.f32	s0, s0
 800e0e8:	e796      	b.n	800e018 <__ieee754_powf+0x30>
 800e0ea:	0ff0      	lsrs	r0, r6, #31
 800e0ec:	3801      	subs	r0, #1
 800e0ee:	ea55 0300 	orrs.w	r3, r5, r0
 800e0f2:	d104      	bne.n	800e0fe <__ieee754_powf+0x116>
 800e0f4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e0f8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e0fc:	e78c      	b.n	800e018 <__ieee754_powf+0x30>
 800e0fe:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e102:	d96d      	bls.n	800e1e0 <__ieee754_powf+0x1f8>
 800e104:	4baa      	ldr	r3, [pc, #680]	@ (800e3b0 <__ieee754_powf+0x3c8>)
 800e106:	4598      	cmp	r8, r3
 800e108:	d808      	bhi.n	800e11c <__ieee754_powf+0x134>
 800e10a:	2c00      	cmp	r4, #0
 800e10c:	da0b      	bge.n	800e126 <__ieee754_powf+0x13e>
 800e10e:	2000      	movs	r0, #0
 800e110:	ecbd 8b02 	vpop	{d8}
 800e114:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e118:	f7ff be3a 	b.w	800dd90 <__math_oflowf>
 800e11c:	4ba5      	ldr	r3, [pc, #660]	@ (800e3b4 <__ieee754_powf+0x3cc>)
 800e11e:	4598      	cmp	r8, r3
 800e120:	d908      	bls.n	800e134 <__ieee754_powf+0x14c>
 800e122:	2c00      	cmp	r4, #0
 800e124:	dcf3      	bgt.n	800e10e <__ieee754_powf+0x126>
 800e126:	2000      	movs	r0, #0
 800e128:	ecbd 8b02 	vpop	{d8}
 800e12c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e130:	f7ff be28 	b.w	800dd84 <__math_uflowf>
 800e134:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e138:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e13c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800e3b8 <__ieee754_powf+0x3d0>
 800e140:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e144:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e148:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e14c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e150:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e154:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800e3bc <__ieee754_powf+0x3d4>
 800e158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e15c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800e3c0 <__ieee754_powf+0x3d8>
 800e160:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e164:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800e3c4 <__ieee754_powf+0x3dc>
 800e168:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e16c:	eeb0 7a67 	vmov.f32	s14, s15
 800e170:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e174:	ee17 3a10 	vmov	r3, s14
 800e178:	f36f 030b 	bfc	r3, #0, #12
 800e17c:	ee07 3a10 	vmov	s14, r3
 800e180:	eeb0 6a47 	vmov.f32	s12, s14
 800e184:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e188:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e18c:	3d01      	subs	r5, #1
 800e18e:	4305      	orrs	r5, r0
 800e190:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e194:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e198:	f36f 040b 	bfc	r4, #0, #12
 800e19c:	bf18      	it	ne
 800e19e:	eeb0 8a66 	vmovne.f32	s16, s13
 800e1a2:	ee06 4a90 	vmov	s13, r4
 800e1a6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e1aa:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e1ae:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e1b2:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e1b6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e1ba:	ee17 1a10 	vmov	r1, s14
 800e1be:	2900      	cmp	r1, #0
 800e1c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1c4:	f340 80dd 	ble.w	800e382 <__ieee754_powf+0x39a>
 800e1c8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e1cc:	f240 80ca 	bls.w	800e364 <__ieee754_powf+0x37c>
 800e1d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d8:	bf4c      	ite	mi
 800e1da:	2001      	movmi	r0, #1
 800e1dc:	2000      	movpl	r0, #0
 800e1de:	e797      	b.n	800e110 <__ieee754_powf+0x128>
 800e1e0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e1e4:	bf01      	itttt	eq
 800e1e6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e3c8 <__ieee754_powf+0x3e0>
 800e1ea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e1ee:	f06f 0317 	mvneq.w	r3, #23
 800e1f2:	ee17 7a90 	vmoveq	r7, s15
 800e1f6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e1fa:	bf18      	it	ne
 800e1fc:	2300      	movne	r3, #0
 800e1fe:	3a7f      	subs	r2, #127	@ 0x7f
 800e200:	441a      	add	r2, r3
 800e202:	4b72      	ldr	r3, [pc, #456]	@ (800e3cc <__ieee754_powf+0x3e4>)
 800e204:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e208:	429f      	cmp	r7, r3
 800e20a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e20e:	dd06      	ble.n	800e21e <__ieee754_powf+0x236>
 800e210:	4b6f      	ldr	r3, [pc, #444]	@ (800e3d0 <__ieee754_powf+0x3e8>)
 800e212:	429f      	cmp	r7, r3
 800e214:	f340 80a4 	ble.w	800e360 <__ieee754_powf+0x378>
 800e218:	3201      	adds	r2, #1
 800e21a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e21e:	2600      	movs	r6, #0
 800e220:	4b6c      	ldr	r3, [pc, #432]	@ (800e3d4 <__ieee754_powf+0x3ec>)
 800e222:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e226:	ee07 1a10 	vmov	s14, r1
 800e22a:	edd3 5a00 	vldr	s11, [r3]
 800e22e:	4b6a      	ldr	r3, [pc, #424]	@ (800e3d8 <__ieee754_powf+0x3f0>)
 800e230:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e238:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e23c:	1049      	asrs	r1, r1, #1
 800e23e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e242:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e246:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e24a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e24e:	ee07 1a90 	vmov	s15, r1
 800e252:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e256:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e25a:	ee15 7a10 	vmov	r7, s10
 800e25e:	401f      	ands	r7, r3
 800e260:	ee06 7a90 	vmov	s13, r7
 800e264:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e268:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e26c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e270:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e274:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e3dc <__ieee754_powf+0x3f4>
 800e278:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e3e0 <__ieee754_powf+0x3f8>
 800e27c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e280:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e3e4 <__ieee754_powf+0x3fc>
 800e284:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e288:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e3b8 <__ieee754_powf+0x3d0>
 800e28c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e290:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e3e8 <__ieee754_powf+0x400>
 800e294:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e298:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e3ec <__ieee754_powf+0x404>
 800e29c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e2a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e2a4:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e2a8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e2ac:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e2b0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e2b4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e2b8:	eef0 5a67 	vmov.f32	s11, s15
 800e2bc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e2c0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e2c4:	ee15 1a90 	vmov	r1, s11
 800e2c8:	4019      	ands	r1, r3
 800e2ca:	ee05 1a90 	vmov	s11, r1
 800e2ce:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e2d2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e2d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2da:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e2de:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e2e2:	eeb0 6a67 	vmov.f32	s12, s15
 800e2e6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e2ea:	ee16 1a10 	vmov	r1, s12
 800e2ee:	4019      	ands	r1, r3
 800e2f0:	ee06 1a10 	vmov	s12, r1
 800e2f4:	eeb0 7a46 	vmov.f32	s14, s12
 800e2f8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e2fc:	493c      	ldr	r1, [pc, #240]	@ (800e3f0 <__ieee754_powf+0x408>)
 800e2fe:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e306:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e3f4 <__ieee754_powf+0x40c>
 800e30a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e3f8 <__ieee754_powf+0x410>
 800e30e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e312:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e3fc <__ieee754_powf+0x414>
 800e316:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e31a:	ed91 7a00 	vldr	s14, [r1]
 800e31e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e322:	ee07 2a10 	vmov	s14, r2
 800e326:	4a36      	ldr	r2, [pc, #216]	@ (800e400 <__ieee754_powf+0x418>)
 800e328:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e32c:	eeb0 7a67 	vmov.f32	s14, s15
 800e330:	eea6 7a25 	vfma.f32	s14, s12, s11
 800e334:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e338:	ed92 5a00 	vldr	s10, [r2]
 800e33c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e340:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e344:	ee17 2a10 	vmov	r2, s14
 800e348:	401a      	ands	r2, r3
 800e34a:	ee07 2a10 	vmov	s14, r2
 800e34e:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e352:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e356:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e35a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e35e:	e715      	b.n	800e18c <__ieee754_powf+0x1a4>
 800e360:	2601      	movs	r6, #1
 800e362:	e75d      	b.n	800e220 <__ieee754_powf+0x238>
 800e364:	d152      	bne.n	800e40c <__ieee754_powf+0x424>
 800e366:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e404 <__ieee754_powf+0x41c>
 800e36a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e36e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e372:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37a:	f73f af29 	bgt.w	800e1d0 <__ieee754_powf+0x1e8>
 800e37e:	2386      	movs	r3, #134	@ 0x86
 800e380:	e048      	b.n	800e414 <__ieee754_powf+0x42c>
 800e382:	4a21      	ldr	r2, [pc, #132]	@ (800e408 <__ieee754_powf+0x420>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d907      	bls.n	800e398 <__ieee754_powf+0x3b0>
 800e388:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e390:	bf4c      	ite	mi
 800e392:	2001      	movmi	r0, #1
 800e394:	2000      	movpl	r0, #0
 800e396:	e6c7      	b.n	800e128 <__ieee754_powf+0x140>
 800e398:	d138      	bne.n	800e40c <__ieee754_powf+0x424>
 800e39a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e39e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a6:	dbea      	blt.n	800e37e <__ieee754_powf+0x396>
 800e3a8:	e7ee      	b.n	800e388 <__ieee754_powf+0x3a0>
 800e3aa:	bf00      	nop
 800e3ac:	00000000 	.word	0x00000000
 800e3b0:	3f7ffff3 	.word	0x3f7ffff3
 800e3b4:	3f800007 	.word	0x3f800007
 800e3b8:	3eaaaaab 	.word	0x3eaaaaab
 800e3bc:	3fb8aa00 	.word	0x3fb8aa00
 800e3c0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e3c4:	36eca570 	.word	0x36eca570
 800e3c8:	4b800000 	.word	0x4b800000
 800e3cc:	001cc471 	.word	0x001cc471
 800e3d0:	005db3d6 	.word	0x005db3d6
 800e3d4:	0800f6cc 	.word	0x0800f6cc
 800e3d8:	fffff000 	.word	0xfffff000
 800e3dc:	3e6c3255 	.word	0x3e6c3255
 800e3e0:	3e53f142 	.word	0x3e53f142
 800e3e4:	3e8ba305 	.word	0x3e8ba305
 800e3e8:	3edb6db7 	.word	0x3edb6db7
 800e3ec:	3f19999a 	.word	0x3f19999a
 800e3f0:	0800f6bc 	.word	0x0800f6bc
 800e3f4:	3f76384f 	.word	0x3f76384f
 800e3f8:	3f763800 	.word	0x3f763800
 800e3fc:	369dc3a0 	.word	0x369dc3a0
 800e400:	0800f6c4 	.word	0x0800f6c4
 800e404:	3338aa3c 	.word	0x3338aa3c
 800e408:	43160000 	.word	0x43160000
 800e40c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e410:	d96f      	bls.n	800e4f2 <__ieee754_powf+0x50a>
 800e412:	15db      	asrs	r3, r3, #23
 800e414:	3b7e      	subs	r3, #126	@ 0x7e
 800e416:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e41a:	4118      	asrs	r0, r3
 800e41c:	4408      	add	r0, r1
 800e41e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e422:	4a4e      	ldr	r2, [pc, #312]	@ (800e55c <__ieee754_powf+0x574>)
 800e424:	3b7f      	subs	r3, #127	@ 0x7f
 800e426:	411a      	asrs	r2, r3
 800e428:	4002      	ands	r2, r0
 800e42a:	ee07 2a10 	vmov	s14, r2
 800e42e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e432:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e436:	f1c3 0317 	rsb	r3, r3, #23
 800e43a:	4118      	asrs	r0, r3
 800e43c:	2900      	cmp	r1, #0
 800e43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e442:	bfb8      	it	lt
 800e444:	4240      	neglt	r0, r0
 800e446:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800e44a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e560 <__ieee754_powf+0x578>
 800e44e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800e564 <__ieee754_powf+0x57c>
 800e452:	ee16 3a90 	vmov	r3, s13
 800e456:	f36f 030b 	bfc	r3, #0, #12
 800e45a:	ee06 3a90 	vmov	s13, r3
 800e45e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e462:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e466:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e46a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800e568 <__ieee754_powf+0x580>
 800e46e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e472:	eee0 7a87 	vfma.f32	s15, s1, s14
 800e476:	eeb0 7a67 	vmov.f32	s14, s15
 800e47a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e47e:	eef0 5a47 	vmov.f32	s11, s14
 800e482:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800e486:	ee67 6a07 	vmul.f32	s13, s14, s14
 800e48a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e48e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800e56c <__ieee754_powf+0x584>
 800e492:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800e570 <__ieee754_powf+0x588>
 800e496:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e49a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e574 <__ieee754_powf+0x58c>
 800e49e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e4a2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800e578 <__ieee754_powf+0x590>
 800e4a6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800e4aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e57c <__ieee754_powf+0x594>
 800e4ae:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e4b2:	eeb0 6a47 	vmov.f32	s12, s14
 800e4b6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800e4ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e4be:	ee67 5a06 	vmul.f32	s11, s14, s12
 800e4c2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e4c6:	eee7 7a27 	vfma.f32	s15, s14, s15
 800e4ca:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e4ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e4d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4da:	ee10 3a10 	vmov	r3, s0
 800e4de:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e4e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4e6:	da06      	bge.n	800e4f6 <__ieee754_powf+0x50e>
 800e4e8:	f000 f984 	bl	800e7f4 <scalbnf>
 800e4ec:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e4f0:	e592      	b.n	800e018 <__ieee754_powf+0x30>
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	e7a7      	b.n	800e446 <__ieee754_powf+0x45e>
 800e4f6:	ee00 3a10 	vmov	s0, r3
 800e4fa:	e7f7      	b.n	800e4ec <__ieee754_powf+0x504>
 800e4fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e500:	e58a      	b.n	800e018 <__ieee754_powf+0x30>
 800e502:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800e580 <__ieee754_powf+0x598>
 800e506:	e587      	b.n	800e018 <__ieee754_powf+0x30>
 800e508:	eeb0 0a48 	vmov.f32	s0, s16
 800e50c:	e584      	b.n	800e018 <__ieee754_powf+0x30>
 800e50e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e512:	f43f adbb 	beq.w	800e08c <__ieee754_powf+0xa4>
 800e516:	2502      	movs	r5, #2
 800e518:	eeb0 0a48 	vmov.f32	s0, s16
 800e51c:	f000 f962 	bl	800e7e4 <fabsf>
 800e520:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e524:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e528:	4647      	mov	r7, r8
 800e52a:	d003      	beq.n	800e534 <__ieee754_powf+0x54c>
 800e52c:	f1b8 0f00 	cmp.w	r8, #0
 800e530:	f47f addb 	bne.w	800e0ea <__ieee754_powf+0x102>
 800e534:	2c00      	cmp	r4, #0
 800e536:	bfbc      	itt	lt
 800e538:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e53c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e540:	2e00      	cmp	r6, #0
 800e542:	f6bf ad69 	bge.w	800e018 <__ieee754_powf+0x30>
 800e546:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e54a:	ea58 0805 	orrs.w	r8, r8, r5
 800e54e:	f47f adc7 	bne.w	800e0e0 <__ieee754_powf+0xf8>
 800e552:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e556:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e55a:	e55d      	b.n	800e018 <__ieee754_powf+0x30>
 800e55c:	ff800000 	.word	0xff800000
 800e560:	3f317218 	.word	0x3f317218
 800e564:	3f317200 	.word	0x3f317200
 800e568:	35bfbe8c 	.word	0x35bfbe8c
 800e56c:	b5ddea0e 	.word	0xb5ddea0e
 800e570:	3331bb4c 	.word	0x3331bb4c
 800e574:	388ab355 	.word	0x388ab355
 800e578:	bb360b61 	.word	0xbb360b61
 800e57c:	3e2aaaab 	.word	0x3e2aaaab
 800e580:	00000000 	.word	0x00000000

0800e584 <__ieee754_rem_pio2f>:
 800e584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e586:	ee10 6a10 	vmov	r6, s0
 800e58a:	4b88      	ldr	r3, [pc, #544]	@ (800e7ac <__ieee754_rem_pio2f+0x228>)
 800e58c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e590:	429d      	cmp	r5, r3
 800e592:	b087      	sub	sp, #28
 800e594:	4604      	mov	r4, r0
 800e596:	d805      	bhi.n	800e5a4 <__ieee754_rem_pio2f+0x20>
 800e598:	2300      	movs	r3, #0
 800e59a:	ed80 0a00 	vstr	s0, [r0]
 800e59e:	6043      	str	r3, [r0, #4]
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	e022      	b.n	800e5ea <__ieee754_rem_pio2f+0x66>
 800e5a4:	4b82      	ldr	r3, [pc, #520]	@ (800e7b0 <__ieee754_rem_pio2f+0x22c>)
 800e5a6:	429d      	cmp	r5, r3
 800e5a8:	d83a      	bhi.n	800e620 <__ieee754_rem_pio2f+0x9c>
 800e5aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e7b4 <__ieee754_rem_pio2f+0x230>
 800e5b4:	4a80      	ldr	r2, [pc, #512]	@ (800e7b8 <__ieee754_rem_pio2f+0x234>)
 800e5b6:	f023 030f 	bic.w	r3, r3, #15
 800e5ba:	dd18      	ble.n	800e5ee <__ieee754_rem_pio2f+0x6a>
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e5c2:	bf09      	itett	eq
 800e5c4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e7bc <__ieee754_rem_pio2f+0x238>
 800e5c8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e7c0 <__ieee754_rem_pio2f+0x23c>
 800e5cc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e7c4 <__ieee754_rem_pio2f+0x240>
 800e5d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e5d4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e5d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5dc:	ed80 7a00 	vstr	s14, [r0]
 800e5e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5e4:	edc0 7a01 	vstr	s15, [r0, #4]
 800e5e8:	2001      	movs	r0, #1
 800e5ea:	b007      	add	sp, #28
 800e5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e5f4:	bf09      	itett	eq
 800e5f6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e7bc <__ieee754_rem_pio2f+0x238>
 800e5fa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e7c0 <__ieee754_rem_pio2f+0x23c>
 800e5fe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e7c4 <__ieee754_rem_pio2f+0x240>
 800e602:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e606:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e60a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e60e:	ed80 7a00 	vstr	s14, [r0]
 800e612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e616:	edc0 7a01 	vstr	s15, [r0, #4]
 800e61a:	f04f 30ff 	mov.w	r0, #4294967295
 800e61e:	e7e4      	b.n	800e5ea <__ieee754_rem_pio2f+0x66>
 800e620:	4b69      	ldr	r3, [pc, #420]	@ (800e7c8 <__ieee754_rem_pio2f+0x244>)
 800e622:	429d      	cmp	r5, r3
 800e624:	d873      	bhi.n	800e70e <__ieee754_rem_pio2f+0x18a>
 800e626:	f000 f8dd 	bl	800e7e4 <fabsf>
 800e62a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e7cc <__ieee754_rem_pio2f+0x248>
 800e62e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e632:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e63a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e63e:	ee17 0a90 	vmov	r0, s15
 800e642:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e7b4 <__ieee754_rem_pio2f+0x230>
 800e646:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e64a:	281f      	cmp	r0, #31
 800e64c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e7c0 <__ieee754_rem_pio2f+0x23c>
 800e650:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e654:	eeb1 6a47 	vneg.f32	s12, s14
 800e658:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e65c:	ee16 1a90 	vmov	r1, s13
 800e660:	dc09      	bgt.n	800e676 <__ieee754_rem_pio2f+0xf2>
 800e662:	4a5b      	ldr	r2, [pc, #364]	@ (800e7d0 <__ieee754_rem_pio2f+0x24c>)
 800e664:	1e47      	subs	r7, r0, #1
 800e666:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e66a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e66e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e672:	4293      	cmp	r3, r2
 800e674:	d107      	bne.n	800e686 <__ieee754_rem_pio2f+0x102>
 800e676:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e67a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e67e:	2a08      	cmp	r2, #8
 800e680:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e684:	dc14      	bgt.n	800e6b0 <__ieee754_rem_pio2f+0x12c>
 800e686:	6021      	str	r1, [r4, #0]
 800e688:	ed94 7a00 	vldr	s14, [r4]
 800e68c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e690:	2e00      	cmp	r6, #0
 800e692:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e696:	ed84 0a01 	vstr	s0, [r4, #4]
 800e69a:	daa6      	bge.n	800e5ea <__ieee754_rem_pio2f+0x66>
 800e69c:	eeb1 7a47 	vneg.f32	s14, s14
 800e6a0:	eeb1 0a40 	vneg.f32	s0, s0
 800e6a4:	ed84 7a00 	vstr	s14, [r4]
 800e6a8:	ed84 0a01 	vstr	s0, [r4, #4]
 800e6ac:	4240      	negs	r0, r0
 800e6ae:	e79c      	b.n	800e5ea <__ieee754_rem_pio2f+0x66>
 800e6b0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e7bc <__ieee754_rem_pio2f+0x238>
 800e6b4:	eef0 6a40 	vmov.f32	s13, s0
 800e6b8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e6bc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e6c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e6c4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e7c4 <__ieee754_rem_pio2f+0x240>
 800e6c8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e6cc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e6d0:	ee15 2a90 	vmov	r2, s11
 800e6d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e6d8:	1a5b      	subs	r3, r3, r1
 800e6da:	2b19      	cmp	r3, #25
 800e6dc:	dc04      	bgt.n	800e6e8 <__ieee754_rem_pio2f+0x164>
 800e6de:	edc4 5a00 	vstr	s11, [r4]
 800e6e2:	eeb0 0a66 	vmov.f32	s0, s13
 800e6e6:	e7cf      	b.n	800e688 <__ieee754_rem_pio2f+0x104>
 800e6e8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e7d4 <__ieee754_rem_pio2f+0x250>
 800e6ec:	eeb0 0a66 	vmov.f32	s0, s13
 800e6f0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e6f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e6f8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e7d8 <__ieee754_rem_pio2f+0x254>
 800e6fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e700:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e704:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e708:	ed84 7a00 	vstr	s14, [r4]
 800e70c:	e7bc      	b.n	800e688 <__ieee754_rem_pio2f+0x104>
 800e70e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e712:	d306      	bcc.n	800e722 <__ieee754_rem_pio2f+0x19e>
 800e714:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e718:	edc0 7a01 	vstr	s15, [r0, #4]
 800e71c:	edc0 7a00 	vstr	s15, [r0]
 800e720:	e73e      	b.n	800e5a0 <__ieee754_rem_pio2f+0x1c>
 800e722:	15ea      	asrs	r2, r5, #23
 800e724:	3a86      	subs	r2, #134	@ 0x86
 800e726:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e72a:	ee07 3a90 	vmov	s15, r3
 800e72e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e732:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e7dc <__ieee754_rem_pio2f+0x258>
 800e736:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e73a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e73e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e746:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e74a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e74e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e752:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e75a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e762:	edcd 7a05 	vstr	s15, [sp, #20]
 800e766:	d11e      	bne.n	800e7a6 <__ieee754_rem_pio2f+0x222>
 800e768:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e770:	bf0c      	ite	eq
 800e772:	2301      	moveq	r3, #1
 800e774:	2302      	movne	r3, #2
 800e776:	491a      	ldr	r1, [pc, #104]	@ (800e7e0 <__ieee754_rem_pio2f+0x25c>)
 800e778:	9101      	str	r1, [sp, #4]
 800e77a:	2102      	movs	r1, #2
 800e77c:	9100      	str	r1, [sp, #0]
 800e77e:	a803      	add	r0, sp, #12
 800e780:	4621      	mov	r1, r4
 800e782:	f000 f89d 	bl	800e8c0 <__kernel_rem_pio2f>
 800e786:	2e00      	cmp	r6, #0
 800e788:	f6bf af2f 	bge.w	800e5ea <__ieee754_rem_pio2f+0x66>
 800e78c:	edd4 7a00 	vldr	s15, [r4]
 800e790:	eef1 7a67 	vneg.f32	s15, s15
 800e794:	edc4 7a00 	vstr	s15, [r4]
 800e798:	edd4 7a01 	vldr	s15, [r4, #4]
 800e79c:	eef1 7a67 	vneg.f32	s15, s15
 800e7a0:	edc4 7a01 	vstr	s15, [r4, #4]
 800e7a4:	e782      	b.n	800e6ac <__ieee754_rem_pio2f+0x128>
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e7e5      	b.n	800e776 <__ieee754_rem_pio2f+0x1f2>
 800e7aa:	bf00      	nop
 800e7ac:	3f490fd8 	.word	0x3f490fd8
 800e7b0:	4016cbe3 	.word	0x4016cbe3
 800e7b4:	3fc90f80 	.word	0x3fc90f80
 800e7b8:	3fc90fd0 	.word	0x3fc90fd0
 800e7bc:	37354400 	.word	0x37354400
 800e7c0:	37354443 	.word	0x37354443
 800e7c4:	2e85a308 	.word	0x2e85a308
 800e7c8:	43490f80 	.word	0x43490f80
 800e7cc:	3f22f984 	.word	0x3f22f984
 800e7d0:	0800f6d4 	.word	0x0800f6d4
 800e7d4:	2e85a300 	.word	0x2e85a300
 800e7d8:	248d3132 	.word	0x248d3132
 800e7dc:	43800000 	.word	0x43800000
 800e7e0:	0800f754 	.word	0x0800f754

0800e7e4 <fabsf>:
 800e7e4:	ee10 3a10 	vmov	r3, s0
 800e7e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7ec:	ee00 3a10 	vmov	s0, r3
 800e7f0:	4770      	bx	lr
	...

0800e7f4 <scalbnf>:
 800e7f4:	ee10 3a10 	vmov	r3, s0
 800e7f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e7fc:	d02b      	beq.n	800e856 <scalbnf+0x62>
 800e7fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e802:	d302      	bcc.n	800e80a <scalbnf+0x16>
 800e804:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e808:	4770      	bx	lr
 800e80a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e80e:	d123      	bne.n	800e858 <scalbnf+0x64>
 800e810:	4b24      	ldr	r3, [pc, #144]	@ (800e8a4 <scalbnf+0xb0>)
 800e812:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e8a8 <scalbnf+0xb4>
 800e816:	4298      	cmp	r0, r3
 800e818:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e81c:	db17      	blt.n	800e84e <scalbnf+0x5a>
 800e81e:	ee10 3a10 	vmov	r3, s0
 800e822:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e826:	3a19      	subs	r2, #25
 800e828:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e82c:	4288      	cmp	r0, r1
 800e82e:	dd15      	ble.n	800e85c <scalbnf+0x68>
 800e830:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e8ac <scalbnf+0xb8>
 800e834:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e8b0 <scalbnf+0xbc>
 800e838:	ee10 3a10 	vmov	r3, s0
 800e83c:	eeb0 7a67 	vmov.f32	s14, s15
 800e840:	2b00      	cmp	r3, #0
 800e842:	bfb8      	it	lt
 800e844:	eef0 7a66 	vmovlt.f32	s15, s13
 800e848:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e84c:	4770      	bx	lr
 800e84e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e8b4 <scalbnf+0xc0>
 800e852:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e856:	4770      	bx	lr
 800e858:	0dd2      	lsrs	r2, r2, #23
 800e85a:	e7e5      	b.n	800e828 <scalbnf+0x34>
 800e85c:	4410      	add	r0, r2
 800e85e:	28fe      	cmp	r0, #254	@ 0xfe
 800e860:	dce6      	bgt.n	800e830 <scalbnf+0x3c>
 800e862:	2800      	cmp	r0, #0
 800e864:	dd06      	ble.n	800e874 <scalbnf+0x80>
 800e866:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e86a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e86e:	ee00 3a10 	vmov	s0, r3
 800e872:	4770      	bx	lr
 800e874:	f110 0f16 	cmn.w	r0, #22
 800e878:	da09      	bge.n	800e88e <scalbnf+0x9a>
 800e87a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e8b4 <scalbnf+0xc0>
 800e87e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e8b8 <scalbnf+0xc4>
 800e882:	ee10 3a10 	vmov	r3, s0
 800e886:	eeb0 7a67 	vmov.f32	s14, s15
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	e7d9      	b.n	800e842 <scalbnf+0x4e>
 800e88e:	3019      	adds	r0, #25
 800e890:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e894:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e898:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e8bc <scalbnf+0xc8>
 800e89c:	ee07 3a90 	vmov	s15, r3
 800e8a0:	e7d7      	b.n	800e852 <scalbnf+0x5e>
 800e8a2:	bf00      	nop
 800e8a4:	ffff3cb0 	.word	0xffff3cb0
 800e8a8:	4c000000 	.word	0x4c000000
 800e8ac:	7149f2ca 	.word	0x7149f2ca
 800e8b0:	f149f2ca 	.word	0xf149f2ca
 800e8b4:	0da24260 	.word	0x0da24260
 800e8b8:	8da24260 	.word	0x8da24260
 800e8bc:	33000000 	.word	0x33000000

0800e8c0 <__kernel_rem_pio2f>:
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	ed2d 8b04 	vpush	{d8-d9}
 800e8c8:	b0d9      	sub	sp, #356	@ 0x164
 800e8ca:	4690      	mov	r8, r2
 800e8cc:	9001      	str	r0, [sp, #4]
 800e8ce:	4ab6      	ldr	r2, [pc, #728]	@ (800eba8 <__kernel_rem_pio2f+0x2e8>)
 800e8d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e8d2:	f118 0f04 	cmn.w	r8, #4
 800e8d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e8da:	460f      	mov	r7, r1
 800e8dc:	f103 3bff 	add.w	fp, r3, #4294967295
 800e8e0:	db26      	blt.n	800e930 <__kernel_rem_pio2f+0x70>
 800e8e2:	f1b8 0203 	subs.w	r2, r8, #3
 800e8e6:	bf48      	it	mi
 800e8e8:	f108 0204 	addmi.w	r2, r8, #4
 800e8ec:	10d2      	asrs	r2, r2, #3
 800e8ee:	1c55      	adds	r5, r2, #1
 800e8f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e8f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800e8f6:	00e8      	lsls	r0, r5, #3
 800e8f8:	eba2 060b 	sub.w	r6, r2, fp
 800e8fc:	9002      	str	r0, [sp, #8]
 800e8fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e902:	eb0a 0c0b 	add.w	ip, sl, fp
 800e906:	ac1c      	add	r4, sp, #112	@ 0x70
 800e908:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e90c:	2000      	movs	r0, #0
 800e90e:	4560      	cmp	r0, ip
 800e910:	dd10      	ble.n	800e934 <__kernel_rem_pio2f+0x74>
 800e912:	a91c      	add	r1, sp, #112	@ 0x70
 800e914:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e918:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e91c:	2600      	movs	r6, #0
 800e91e:	4556      	cmp	r6, sl
 800e920:	dc24      	bgt.n	800e96c <__kernel_rem_pio2f+0xac>
 800e922:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e926:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800e92a:	4684      	mov	ip, r0
 800e92c:	2400      	movs	r4, #0
 800e92e:	e016      	b.n	800e95e <__kernel_rem_pio2f+0x9e>
 800e930:	2200      	movs	r2, #0
 800e932:	e7dc      	b.n	800e8ee <__kernel_rem_pio2f+0x2e>
 800e934:	42c6      	cmn	r6, r0
 800e936:	bf5d      	ittte	pl
 800e938:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e93c:	ee07 1a90 	vmovpl	s15, r1
 800e940:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e944:	eef0 7a47 	vmovmi.f32	s15, s14
 800e948:	ece4 7a01 	vstmia	r4!, {s15}
 800e94c:	3001      	adds	r0, #1
 800e94e:	e7de      	b.n	800e90e <__kernel_rem_pio2f+0x4e>
 800e950:	ecfe 6a01 	vldmia	lr!, {s13}
 800e954:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e958:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e95c:	3401      	adds	r4, #1
 800e95e:	455c      	cmp	r4, fp
 800e960:	ddf6      	ble.n	800e950 <__kernel_rem_pio2f+0x90>
 800e962:	ece9 7a01 	vstmia	r9!, {s15}
 800e966:	3601      	adds	r6, #1
 800e968:	3004      	adds	r0, #4
 800e96a:	e7d8      	b.n	800e91e <__kernel_rem_pio2f+0x5e>
 800e96c:	a908      	add	r1, sp, #32
 800e96e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e972:	9104      	str	r1, [sp, #16]
 800e974:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e976:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ebb4 <__kernel_rem_pio2f+0x2f4>
 800e97a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ebb0 <__kernel_rem_pio2f+0x2f0>
 800e97e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e982:	9203      	str	r2, [sp, #12]
 800e984:	4654      	mov	r4, sl
 800e986:	00a2      	lsls	r2, r4, #2
 800e988:	9205      	str	r2, [sp, #20]
 800e98a:	aa58      	add	r2, sp, #352	@ 0x160
 800e98c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e990:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e994:	a944      	add	r1, sp, #272	@ 0x110
 800e996:	aa08      	add	r2, sp, #32
 800e998:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e99c:	4694      	mov	ip, r2
 800e99e:	4626      	mov	r6, r4
 800e9a0:	2e00      	cmp	r6, #0
 800e9a2:	dc4c      	bgt.n	800ea3e <__kernel_rem_pio2f+0x17e>
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9aa:	f7ff ff23 	bl	800e7f4 <scalbnf>
 800e9ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e9b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e9b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e9ba:	f000 f9e9 	bl	800ed90 <floorf>
 800e9be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e9c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e9c6:	2d00      	cmp	r5, #0
 800e9c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e9d0:	ee17 9a90 	vmov	r9, s15
 800e9d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e9dc:	dd41      	ble.n	800ea62 <__kernel_rem_pio2f+0x1a2>
 800e9de:	f104 3cff 	add.w	ip, r4, #4294967295
 800e9e2:	a908      	add	r1, sp, #32
 800e9e4:	f1c5 0e08 	rsb	lr, r5, #8
 800e9e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e9ec:	fa46 f00e 	asr.w	r0, r6, lr
 800e9f0:	4481      	add	r9, r0
 800e9f2:	fa00 f00e 	lsl.w	r0, r0, lr
 800e9f6:	1a36      	subs	r6, r6, r0
 800e9f8:	f1c5 0007 	rsb	r0, r5, #7
 800e9fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ea00:	4106      	asrs	r6, r0
 800ea02:	2e00      	cmp	r6, #0
 800ea04:	dd3c      	ble.n	800ea80 <__kernel_rem_pio2f+0x1c0>
 800ea06:	f04f 0e00 	mov.w	lr, #0
 800ea0a:	f109 0901 	add.w	r9, r9, #1
 800ea0e:	4670      	mov	r0, lr
 800ea10:	4574      	cmp	r4, lr
 800ea12:	dc68      	bgt.n	800eae6 <__kernel_rem_pio2f+0x226>
 800ea14:	2d00      	cmp	r5, #0
 800ea16:	dd03      	ble.n	800ea20 <__kernel_rem_pio2f+0x160>
 800ea18:	2d01      	cmp	r5, #1
 800ea1a:	d074      	beq.n	800eb06 <__kernel_rem_pio2f+0x246>
 800ea1c:	2d02      	cmp	r5, #2
 800ea1e:	d07d      	beq.n	800eb1c <__kernel_rem_pio2f+0x25c>
 800ea20:	2e02      	cmp	r6, #2
 800ea22:	d12d      	bne.n	800ea80 <__kernel_rem_pio2f+0x1c0>
 800ea24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ea28:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ea2c:	b340      	cbz	r0, 800ea80 <__kernel_rem_pio2f+0x1c0>
 800ea2e:	4628      	mov	r0, r5
 800ea30:	9306      	str	r3, [sp, #24]
 800ea32:	f7ff fedf 	bl	800e7f4 <scalbnf>
 800ea36:	9b06      	ldr	r3, [sp, #24]
 800ea38:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ea3c:	e020      	b.n	800ea80 <__kernel_rem_pio2f+0x1c0>
 800ea3e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ea42:	3e01      	subs	r6, #1
 800ea44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea4c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ea50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ea54:	ecac 0a01 	vstmia	ip!, {s0}
 800ea58:	ed30 0a01 	vldmdb	r0!, {s0}
 800ea5c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ea60:	e79e      	b.n	800e9a0 <__kernel_rem_pio2f+0xe0>
 800ea62:	d105      	bne.n	800ea70 <__kernel_rem_pio2f+0x1b0>
 800ea64:	1e60      	subs	r0, r4, #1
 800ea66:	a908      	add	r1, sp, #32
 800ea68:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800ea6c:	11f6      	asrs	r6, r6, #7
 800ea6e:	e7c8      	b.n	800ea02 <__kernel_rem_pio2f+0x142>
 800ea70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ea74:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7c:	da31      	bge.n	800eae2 <__kernel_rem_pio2f+0x222>
 800ea7e:	2600      	movs	r6, #0
 800ea80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea88:	f040 8098 	bne.w	800ebbc <__kernel_rem_pio2f+0x2fc>
 800ea8c:	1e60      	subs	r0, r4, #1
 800ea8e:	2200      	movs	r2, #0
 800ea90:	4550      	cmp	r0, sl
 800ea92:	da4b      	bge.n	800eb2c <__kernel_rem_pio2f+0x26c>
 800ea94:	2a00      	cmp	r2, #0
 800ea96:	d065      	beq.n	800eb64 <__kernel_rem_pio2f+0x2a4>
 800ea98:	3c01      	subs	r4, #1
 800ea9a:	ab08      	add	r3, sp, #32
 800ea9c:	3d08      	subs	r5, #8
 800ea9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0f8      	beq.n	800ea98 <__kernel_rem_pio2f+0x1d8>
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eaac:	f7ff fea2 	bl	800e7f4 <scalbnf>
 800eab0:	1c63      	adds	r3, r4, #1
 800eab2:	aa44      	add	r2, sp, #272	@ 0x110
 800eab4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ebb4 <__kernel_rem_pio2f+0x2f4>
 800eab8:	0099      	lsls	r1, r3, #2
 800eaba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eabe:	4623      	mov	r3, r4
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f280 80a9 	bge.w	800ec18 <__kernel_rem_pio2f+0x358>
 800eac6:	4623      	mov	r3, r4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f2c0 80c7 	blt.w	800ec5c <__kernel_rem_pio2f+0x39c>
 800eace:	aa44      	add	r2, sp, #272	@ 0x110
 800ead0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ead4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ebac <__kernel_rem_pio2f+0x2ec>
 800ead8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800eadc:	2000      	movs	r0, #0
 800eade:	1ae2      	subs	r2, r4, r3
 800eae0:	e0b1      	b.n	800ec46 <__kernel_rem_pio2f+0x386>
 800eae2:	2602      	movs	r6, #2
 800eae4:	e78f      	b.n	800ea06 <__kernel_rem_pio2f+0x146>
 800eae6:	f852 1b04 	ldr.w	r1, [r2], #4
 800eaea:	b948      	cbnz	r0, 800eb00 <__kernel_rem_pio2f+0x240>
 800eaec:	b121      	cbz	r1, 800eaf8 <__kernel_rem_pio2f+0x238>
 800eaee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800eaf2:	f842 1c04 	str.w	r1, [r2, #-4]
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	f10e 0e01 	add.w	lr, lr, #1
 800eafc:	4608      	mov	r0, r1
 800eafe:	e787      	b.n	800ea10 <__kernel_rem_pio2f+0x150>
 800eb00:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800eb04:	e7f5      	b.n	800eaf2 <__kernel_rem_pio2f+0x232>
 800eb06:	f104 3cff 	add.w	ip, r4, #4294967295
 800eb0a:	aa08      	add	r2, sp, #32
 800eb0c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eb10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800eb14:	a908      	add	r1, sp, #32
 800eb16:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800eb1a:	e781      	b.n	800ea20 <__kernel_rem_pio2f+0x160>
 800eb1c:	f104 3cff 	add.w	ip, r4, #4294967295
 800eb20:	aa08      	add	r2, sp, #32
 800eb22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eb26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800eb2a:	e7f3      	b.n	800eb14 <__kernel_rem_pio2f+0x254>
 800eb2c:	a908      	add	r1, sp, #32
 800eb2e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eb32:	3801      	subs	r0, #1
 800eb34:	430a      	orrs	r2, r1
 800eb36:	e7ab      	b.n	800ea90 <__kernel_rem_pio2f+0x1d0>
 800eb38:	3201      	adds	r2, #1
 800eb3a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800eb3e:	2e00      	cmp	r6, #0
 800eb40:	d0fa      	beq.n	800eb38 <__kernel_rem_pio2f+0x278>
 800eb42:	9905      	ldr	r1, [sp, #20]
 800eb44:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800eb48:	eb0d 0001 	add.w	r0, sp, r1
 800eb4c:	18e6      	adds	r6, r4, r3
 800eb4e:	a91c      	add	r1, sp, #112	@ 0x70
 800eb50:	f104 0c01 	add.w	ip, r4, #1
 800eb54:	384c      	subs	r0, #76	@ 0x4c
 800eb56:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800eb5a:	4422      	add	r2, r4
 800eb5c:	4562      	cmp	r2, ip
 800eb5e:	da04      	bge.n	800eb6a <__kernel_rem_pio2f+0x2aa>
 800eb60:	4614      	mov	r4, r2
 800eb62:	e710      	b.n	800e986 <__kernel_rem_pio2f+0xc6>
 800eb64:	9804      	ldr	r0, [sp, #16]
 800eb66:	2201      	movs	r2, #1
 800eb68:	e7e7      	b.n	800eb3a <__kernel_rem_pio2f+0x27a>
 800eb6a:	9903      	ldr	r1, [sp, #12]
 800eb6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800eb70:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800eb74:	9105      	str	r1, [sp, #20]
 800eb76:	ee07 1a90 	vmov	s15, r1
 800eb7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb7e:	2400      	movs	r4, #0
 800eb80:	ece6 7a01 	vstmia	r6!, {s15}
 800eb84:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800eb88:	46b1      	mov	r9, r6
 800eb8a:	455c      	cmp	r4, fp
 800eb8c:	dd04      	ble.n	800eb98 <__kernel_rem_pio2f+0x2d8>
 800eb8e:	ece0 7a01 	vstmia	r0!, {s15}
 800eb92:	f10c 0c01 	add.w	ip, ip, #1
 800eb96:	e7e1      	b.n	800eb5c <__kernel_rem_pio2f+0x29c>
 800eb98:	ecfe 6a01 	vldmia	lr!, {s13}
 800eb9c:	ed39 7a01 	vldmdb	r9!, {s14}
 800eba0:	3401      	adds	r4, #1
 800eba2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eba6:	e7f0      	b.n	800eb8a <__kernel_rem_pio2f+0x2ca>
 800eba8:	0800fa98 	.word	0x0800fa98
 800ebac:	0800fa6c 	.word	0x0800fa6c
 800ebb0:	43800000 	.word	0x43800000
 800ebb4:	3b800000 	.word	0x3b800000
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	9b02      	ldr	r3, [sp, #8]
 800ebbe:	eeb0 0a48 	vmov.f32	s0, s16
 800ebc2:	eba3 0008 	sub.w	r0, r3, r8
 800ebc6:	f7ff fe15 	bl	800e7f4 <scalbnf>
 800ebca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ebb0 <__kernel_rem_pio2f+0x2f0>
 800ebce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ebd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd6:	db19      	blt.n	800ec0c <__kernel_rem_pio2f+0x34c>
 800ebd8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ebb4 <__kernel_rem_pio2f+0x2f4>
 800ebdc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ebe0:	aa08      	add	r2, sp, #32
 800ebe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebe6:	3508      	adds	r5, #8
 800ebe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ebf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ebf8:	ee10 3a10 	vmov	r3, s0
 800ebfc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec00:	ee17 3a90 	vmov	r3, s15
 800ec04:	3401      	adds	r4, #1
 800ec06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec0a:	e74c      	b.n	800eaa6 <__kernel_rem_pio2f+0x1e6>
 800ec0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec10:	aa08      	add	r2, sp, #32
 800ec12:	ee10 3a10 	vmov	r3, s0
 800ec16:	e7f6      	b.n	800ec06 <__kernel_rem_pio2f+0x346>
 800ec18:	a808      	add	r0, sp, #32
 800ec1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ec1e:	9001      	str	r0, [sp, #4]
 800ec20:	ee07 0a90 	vmov	s15, r0
 800ec24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec28:	3b01      	subs	r3, #1
 800ec2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ec2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ec32:	ed62 7a01 	vstmdb	r2!, {s15}
 800ec36:	e743      	b.n	800eac0 <__kernel_rem_pio2f+0x200>
 800ec38:	ecfc 6a01 	vldmia	ip!, {s13}
 800ec3c:	ecb5 7a01 	vldmia	r5!, {s14}
 800ec40:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec44:	3001      	adds	r0, #1
 800ec46:	4550      	cmp	r0, sl
 800ec48:	dc01      	bgt.n	800ec4e <__kernel_rem_pio2f+0x38e>
 800ec4a:	4290      	cmp	r0, r2
 800ec4c:	ddf4      	ble.n	800ec38 <__kernel_rem_pio2f+0x378>
 800ec4e:	a858      	add	r0, sp, #352	@ 0x160
 800ec50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ec54:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	e735      	b.n	800eac8 <__kernel_rem_pio2f+0x208>
 800ec5c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	dc09      	bgt.n	800ec76 <__kernel_rem_pio2f+0x3b6>
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dc27      	bgt.n	800ecb6 <__kernel_rem_pio2f+0x3f6>
 800ec66:	d040      	beq.n	800ecea <__kernel_rem_pio2f+0x42a>
 800ec68:	f009 0007 	and.w	r0, r9, #7
 800ec6c:	b059      	add	sp, #356	@ 0x164
 800ec6e:	ecbd 8b04 	vpop	{d8-d9}
 800ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec76:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ec78:	2b03      	cmp	r3, #3
 800ec7a:	d1f5      	bne.n	800ec68 <__kernel_rem_pio2f+0x3a8>
 800ec7c:	aa30      	add	r2, sp, #192	@ 0xc0
 800ec7e:	1f0b      	subs	r3, r1, #4
 800ec80:	4413      	add	r3, r2
 800ec82:	461a      	mov	r2, r3
 800ec84:	4620      	mov	r0, r4
 800ec86:	2800      	cmp	r0, #0
 800ec88:	dc50      	bgt.n	800ed2c <__kernel_rem_pio2f+0x46c>
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	2a01      	cmp	r2, #1
 800ec8e:	dc5d      	bgt.n	800ed4c <__kernel_rem_pio2f+0x48c>
 800ec90:	ab30      	add	r3, sp, #192	@ 0xc0
 800ec92:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800ec96:	440b      	add	r3, r1
 800ec98:	2c01      	cmp	r4, #1
 800ec9a:	dc67      	bgt.n	800ed6c <__kernel_rem_pio2f+0x4ac>
 800ec9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800eca0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800eca4:	2e00      	cmp	r6, #0
 800eca6:	d167      	bne.n	800ed78 <__kernel_rem_pio2f+0x4b8>
 800eca8:	edc7 6a00 	vstr	s13, [r7]
 800ecac:	ed87 7a01 	vstr	s14, [r7, #4]
 800ecb0:	edc7 7a02 	vstr	s15, [r7, #8]
 800ecb4:	e7d8      	b.n	800ec68 <__kernel_rem_pio2f+0x3a8>
 800ecb6:	ab30      	add	r3, sp, #192	@ 0xc0
 800ecb8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800ecbc:	440b      	add	r3, r1
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	2a00      	cmp	r2, #0
 800ecc2:	da24      	bge.n	800ed0e <__kernel_rem_pio2f+0x44e>
 800ecc4:	b34e      	cbz	r6, 800ed1a <__kernel_rem_pio2f+0x45a>
 800ecc6:	eef1 7a47 	vneg.f32	s15, s14
 800ecca:	edc7 7a00 	vstr	s15, [r7]
 800ecce:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ecd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecd6:	aa31      	add	r2, sp, #196	@ 0xc4
 800ecd8:	2301      	movs	r3, #1
 800ecda:	429c      	cmp	r4, r3
 800ecdc:	da20      	bge.n	800ed20 <__kernel_rem_pio2f+0x460>
 800ecde:	b10e      	cbz	r6, 800ece4 <__kernel_rem_pio2f+0x424>
 800ece0:	eef1 7a67 	vneg.f32	s15, s15
 800ece4:	edc7 7a01 	vstr	s15, [r7, #4]
 800ece8:	e7be      	b.n	800ec68 <__kernel_rem_pio2f+0x3a8>
 800ecea:	ab30      	add	r3, sp, #192	@ 0xc0
 800ecec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ebb8 <__kernel_rem_pio2f+0x2f8>
 800ecf0:	440b      	add	r3, r1
 800ecf2:	2c00      	cmp	r4, #0
 800ecf4:	da05      	bge.n	800ed02 <__kernel_rem_pio2f+0x442>
 800ecf6:	b10e      	cbz	r6, 800ecfc <__kernel_rem_pio2f+0x43c>
 800ecf8:	eef1 7a67 	vneg.f32	s15, s15
 800ecfc:	edc7 7a00 	vstr	s15, [r7]
 800ed00:	e7b2      	b.n	800ec68 <__kernel_rem_pio2f+0x3a8>
 800ed02:	ed33 7a01 	vldmdb	r3!, {s14}
 800ed06:	3c01      	subs	r4, #1
 800ed08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed0c:	e7f1      	b.n	800ecf2 <__kernel_rem_pio2f+0x432>
 800ed0e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ed12:	3a01      	subs	r2, #1
 800ed14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed18:	e7d2      	b.n	800ecc0 <__kernel_rem_pio2f+0x400>
 800ed1a:	eef0 7a47 	vmov.f32	s15, s14
 800ed1e:	e7d4      	b.n	800ecca <__kernel_rem_pio2f+0x40a>
 800ed20:	ecb2 7a01 	vldmia	r2!, {s14}
 800ed24:	3301      	adds	r3, #1
 800ed26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed2a:	e7d6      	b.n	800ecda <__kernel_rem_pio2f+0x41a>
 800ed2c:	ed72 7a01 	vldmdb	r2!, {s15}
 800ed30:	edd2 6a01 	vldr	s13, [r2, #4]
 800ed34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ed38:	3801      	subs	r0, #1
 800ed3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed3e:	ed82 7a00 	vstr	s14, [r2]
 800ed42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed46:	edc2 7a01 	vstr	s15, [r2, #4]
 800ed4a:	e79c      	b.n	800ec86 <__kernel_rem_pio2f+0x3c6>
 800ed4c:	ed73 7a01 	vldmdb	r3!, {s15}
 800ed50:	edd3 6a01 	vldr	s13, [r3, #4]
 800ed54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ed58:	3a01      	subs	r2, #1
 800ed5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed5e:	ed83 7a00 	vstr	s14, [r3]
 800ed62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed66:	edc3 7a01 	vstr	s15, [r3, #4]
 800ed6a:	e78f      	b.n	800ec8c <__kernel_rem_pio2f+0x3cc>
 800ed6c:	ed33 7a01 	vldmdb	r3!, {s14}
 800ed70:	3c01      	subs	r4, #1
 800ed72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed76:	e78f      	b.n	800ec98 <__kernel_rem_pio2f+0x3d8>
 800ed78:	eef1 6a66 	vneg.f32	s13, s13
 800ed7c:	eeb1 7a47 	vneg.f32	s14, s14
 800ed80:	edc7 6a00 	vstr	s13, [r7]
 800ed84:	ed87 7a01 	vstr	s14, [r7, #4]
 800ed88:	eef1 7a67 	vneg.f32	s15, s15
 800ed8c:	e790      	b.n	800ecb0 <__kernel_rem_pio2f+0x3f0>
 800ed8e:	bf00      	nop

0800ed90 <floorf>:
 800ed90:	ee10 3a10 	vmov	r3, s0
 800ed94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed98:	3a7f      	subs	r2, #127	@ 0x7f
 800ed9a:	2a16      	cmp	r2, #22
 800ed9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eda0:	dc2b      	bgt.n	800edfa <floorf+0x6a>
 800eda2:	2a00      	cmp	r2, #0
 800eda4:	da12      	bge.n	800edcc <floorf+0x3c>
 800eda6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ee0c <floorf+0x7c>
 800edaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800edae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb6:	dd06      	ble.n	800edc6 <floorf+0x36>
 800edb8:	2b00      	cmp	r3, #0
 800edba:	da24      	bge.n	800ee06 <floorf+0x76>
 800edbc:	2900      	cmp	r1, #0
 800edbe:	4b14      	ldr	r3, [pc, #80]	@ (800ee10 <floorf+0x80>)
 800edc0:	bf08      	it	eq
 800edc2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800edc6:	ee00 3a10 	vmov	s0, r3
 800edca:	4770      	bx	lr
 800edcc:	4911      	ldr	r1, [pc, #68]	@ (800ee14 <floorf+0x84>)
 800edce:	4111      	asrs	r1, r2
 800edd0:	420b      	tst	r3, r1
 800edd2:	d0fa      	beq.n	800edca <floorf+0x3a>
 800edd4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ee0c <floorf+0x7c>
 800edd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eddc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ede0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede4:	ddef      	ble.n	800edc6 <floorf+0x36>
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bfbe      	ittt	lt
 800edea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800edee:	fa40 f202 	asrlt.w	r2, r0, r2
 800edf2:	189b      	addlt	r3, r3, r2
 800edf4:	ea23 0301 	bic.w	r3, r3, r1
 800edf8:	e7e5      	b.n	800edc6 <floorf+0x36>
 800edfa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800edfe:	d3e4      	bcc.n	800edca <floorf+0x3a>
 800ee00:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee04:	4770      	bx	lr
 800ee06:	2300      	movs	r3, #0
 800ee08:	e7dd      	b.n	800edc6 <floorf+0x36>
 800ee0a:	bf00      	nop
 800ee0c:	7149f2ca 	.word	0x7149f2ca
 800ee10:	bf800000 	.word	0xbf800000
 800ee14:	007fffff 	.word	0x007fffff

0800ee18 <_init>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	bf00      	nop
 800ee1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee1e:	bc08      	pop	{r3}
 800ee20:	469e      	mov	lr, r3
 800ee22:	4770      	bx	lr

0800ee24 <_fini>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	bf00      	nop
 800ee28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2a:	bc08      	pop	{r3}
 800ee2c:	469e      	mov	lr, r3
 800ee2e:	4770      	bx	lr
